; ModuleID = 'get_sign.bin.unoptimized.bc'
source_filename = "llvm-link"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu-elf"

%union.anon = type { i64 }
%seg_4f8__init_type = type <{ [23 x i8] }>
%seg_510__plt_type = type <{ [16 x i8] }>
%seg_520__plt_got_type = type <{ [8 x i8] }>
%seg_530__text_type = type <{ [546 x i8] }>
%seg_754__fini_type = type <{ [9 x i8] }>
%seg_760__rodata_type = type <{ [4 x i8] }>
%seg_764__eh_frame_hdr_type = type <{ [76 x i8] }>
%seg_7b0__eh_frame_type = type <{ [332 x i8] }>
%seg_200de0__init_array_type = type <{ i64, i64 }>
%seg_200df0__jcr_type = type <{ [8 x i8] }>
%seg_200fb8__got_type = type <{ [24 x i8], i64, i64, i64, i64, i64, i64 }>
%seg_201000__data_type = type <{ [8 x i8], i64 }>
%__bss_start_type = type <{ [8 x i8] }>
%struct.State = type { %struct.ArchState, [32 x %union.VectorReg], %struct.ArithFlags, %union.anon, %struct.Segments, %struct.AddressSpace, %struct.GPR, %struct.X87Stack, %struct.MMX, %struct.FPUStatusFlags, %union.anon, %union.FPU, %struct.SegmentCaches }
%struct.ArchState = type { i32, i32, %union.anon }
%union.VectorReg = type { %union.vec512_t }
%union.vec512_t = type { %struct.uint64v8_t }
%struct.uint64v8_t = type { [8 x i64] }
%struct.ArithFlags = type { i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8 }
%struct.Segments = type { i16, %union.SegmentSelector, i16, %union.SegmentSelector, i16, %union.SegmentSelector, i16, %union.SegmentSelector, i16, %union.SegmentSelector, i16, %union.SegmentSelector }
%union.SegmentSelector = type { i16 }
%struct.AddressSpace = type { i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg }
%struct.Reg = type { %union.anon }
%struct.GPR = type { i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg }
%struct.X87Stack = type { [8 x %struct.anon.3] }
%struct.anon.3 = type { i64, double }
%struct.MMX = type { [8 x %struct.anon.4] }
%struct.anon.4 = type { i64, %union.vec64_t }
%union.vec64_t = type { %struct.uint64v1_t }
%struct.uint64v1_t = type { [1 x i64] }
%struct.FPUStatusFlags = type { i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, [4 x i8] }
%union.FPU = type { %struct.anon.13 }
%struct.anon.13 = type { %struct.FpuFXSAVE, [96 x i8] }
%struct.FpuFXSAVE = type { %union.SegmentSelector, %union.SegmentSelector, %union.FPUAbridgedTagWord, i8, i16, i32, %union.SegmentSelector, i16, i32, %union.SegmentSelector, i16, %union.FPUControlStatus, %union.FPUControlStatus, [8 x %struct.FPUStackElem], [16 x %union.vec128_t] }
%union.FPUAbridgedTagWord = type { i8 }
%union.FPUControlStatus = type { i32 }
%struct.FPUStackElem = type { %union.anon.11, [6 x i8] }
%union.anon.11 = type { %struct.float80_t }
%struct.float80_t = type { [10 x i8] }
%union.vec128_t = type { %struct.uint128v1_t }
%struct.uint128v1_t = type { [1 x i128] }
%struct.SegmentCaches = type { %struct.SegmentShadow, %struct.SegmentShadow, %struct.SegmentShadow, %struct.SegmentShadow, %struct.SegmentShadow, %struct.SegmentShadow }
%struct.SegmentShadow = type { %union.anon, i32, i32 }
%struct.Memory = type opaque
%struct.anon.2 = type { i8, i8 }
%struct.uint8v8_t = type { [8 x i8] }
%struct.uint8v16_t = type { [16 x i8] }
%struct.uint16v8_t = type { [8 x i16] }
%struct.uint8v4_t = type { [4 x i8] }
%struct.int16v4_t = type { [4 x i16] }
%struct.int32v4_t = type { [4 x i32] }
%struct.uint64v2_t = type { [2 x i64] }
%"class.(anonymous namespace)::BitMatrix" = type { %"class.std::bitset", [16 x [16 x i8]] }
%"class.std::bitset" = type { %"struct.std::_Base_bitset" }
%"struct.std::_Base_bitset" = type { [4 x i64] }
%struct.bcd80_t = type { [9 x %union.FPUAbridgedTagWord], %union.FPUAbridgedTagWord }
%struct.FpuFSAVE = type { %union.SegmentSelector, i16, %union.SegmentSelector, i16, %union.SegmentSelector, i16, i32, %union.SegmentSelector, i16, i32, %union.SegmentSelector, i16, [8 x %struct.FPUStackElem] }
%struct.anon.5 = type { i32, i32 }

@switch.table = private unnamed_addr constant [4 x i32] [i32 2048, i32 3072, i32 0, i32 1024]
@DR0 = external global i64, align 8
@DR1 = external global i64, align 8
@DR2 = external global i64, align 8
@DR3 = external global i64, align 8
@DR4 = external global i64, align 8
@DR5 = external global i64, align 8
@DR6 = external global i64, align 8
@DR7 = external global i64, align 8
@gCR0 = external global %union.anon, align 1
@gCR1 = external global %union.anon, align 1
@gCR2 = external global %union.anon, align 1
@gCR3 = external global %union.anon, align 1
@gCR4 = external global %union.anon, align 1
@gCR8 = external global %union.anon, align 1
@seg_4f8__init = internal constant %seg_4f8__init_type <{ [23 x i8] c"H\83\EC\08H\8B\05\DD\0A \00H\85\C0t\02\FF\D0H\83\C4\08\C3" }>
@seg_510__plt = internal constant %seg_510__plt_type <{ [16 x i8] c"\FF5\AA\0A \00\FF%\AC\0A \00\0F\1F@\00" }>
@seg_520__plt_got = internal constant %seg_520__plt_got_type <{ [8 x i8] c"\FF%\D2\0A \00f\90" }>
@seg_530__text = internal constant %seg_530__text_type <{ [546 x i8] c"1\EDI\89\D1^H\89\E2H\83\E4\F0PTL\8D\05\0A\02\00\00H\8D\0D\93\01\00\00H\8D=]\01\00\00\FF\15~\0A \00\F4\0F\1FD\00\00H\8D=\A9\0A \00H\8D\05\A9\0A \00UH)\F8H\89\E5H\83\F8\0Ev\15H\8B\05N\0A \00H\85\C0t\09]\FF\E0f\0F\1FD\00\00]\C3\0F\1F@\00f.\0F\1F\84\00\00\00\00\00H\8D=i\0A \00H\8D5b\0A \00UH)\FEH\89\E5H\C1\FE\03H\89\F0H\C1\E8?H\01\C6H\D1\FEt\18H\8B\05!\0A \00H\85\C0t\0C]\FF\E0f\0F\1F\84\00\00\00\00\00]\C3\0F\1F@\00f.\0F\1F\84\00\00\00\00\00\80=\19\0A \00\00u'H\83=\F7\09 \00\00UH\89\E5t\0CH\8B=\FA\09 \00\E8\0D\FF\FF\FF\E8H\FF\FF\FF]\C6\05\F0\09 \00\01\F3\C3\0F\1F@\00f.\0F\1F\84\00\00\00\00\00H\8D=\B9\07 \00H\83?\00u\0B\E9^\FF\FF\FFf\0F\1FD\00\00H\8B\05\99\09 \00H\85\C0t\E9UH\89\E5\FF\D0]\E9@\FF\FF\FFUH\89\E5\89}\FC\83}\FC\00\7F\07\B8\01\00\00\00\EB\05\B8\00\00\00\00]\C3UH\89\E5H\C7\C0\0A\00\00\00H\C7\C3\14\00\00\00H\C7\C1\1E\00\00\00H\C7\C2(\00\00\00H\C7\C62\00\00\00\BFZ\00\00\00H\C7\C7<\00\00\00\90]\C3UH\89\E5PSQRVW\B8\00\00\00\00\E8\B6\FF\FF\FFX[YZ^_\BF\0A\00\00\00\E8\8B\FF\FF\FF]\C3f\0F\1F\84\00\00\00\00\00AWAVA\89\FFAUATL\8D%\EE\06 \00UH\8D-\EE\06 \00SI\89\F6I\89\D5L)\E5H\83\EC\08H\C1\FD\03\E8\E7\FD\FF\FFH\85\EDt 1\DB\0F\1F\84\00\00\00\00\00L\89\EAL\89\F6D\89\FFA\FF\14\DCH\83\C3\01H9\DDu\EAH\83\C4\08[]A\5CA]A^A_\C3\90f.\0F\1F\84\00\00\00\00\00\F3\C3" }>
@seg_754__fini = internal constant %seg_754__fini_type <{ [9 x i8] c"H\83\EC\08H\83\C4\08\C3" }>
@seg_760__rodata = internal constant %seg_760__rodata_type <{ [4 x i8] c"\01\00\02\00" }>
@seg_764__eh_frame_hdr = internal constant %seg_764__eh_frame_hdr_type <{ [76 x i8] c"\01\1B\03;H\00\00\00\08\00\00\00\AC\FD\FF\FF\94\00\00\00\BC\FD\FF\FF\BC\00\00\00\CC\FD\FF\FFd\00\00\00\FC\FE\FF\FF\D4\00\00\00\17\FF\FF\FF\F4\00\00\00M\FF\FF\FF\14\01\00\00|\FF\FF\FF4\01\00\00\EC\FF\FF\FF|\01\00\00" }>
@seg_7b0__eh_frame = internal constant %seg_7b0__eh_frame_type <{ [332 x i8] c"\14\00\00\00\00\00\00\00\01zR\00\01x\10\01\1B\0C\07\08\90\01\07\10\14\00\00\00\1C\00\00\00`\FD\FF\FF+\00\00\00\00\00\00\00\00\00\00\00\14\00\00\00\00\00\00\00\01zR\00\01x\10\01\1B\0C\07\08\90\01\00\00$\00\00\00\1C\00\00\00\10\FD\FF\FF\10\00\00\00\00\0E\10F\0E\18J\0F\0Bw\08\80\00?\1A;*3$\22\00\00\00\00\14\00\00\00D\00\00\00\F8\FC\FF\FF\08\00\00\00\00\00\00\00\00\00\00\00\1C\00\00\00\5C\00\00\00 \FE\FF\FF\1B\00\00\00\00A\0E\10\86\02C\0D\06V\0C\07\08\00\00\00\1C\00\00\00|\00\00\00\1B\FE\FF\FF6\00\00\00\00A\0E\10\86\02C\0D\06q\0C\07\08\00\00\00\1C\00\00\00\9C\00\00\001\FE\FF\FF&\00\00\00\00A\0E\10\86\02C\0D\06a\0C\07\08\00\00\00D\00\00\00\BC\00\00\00@\FE\FF\FFe\00\00\00\00B\0E\10\8F\02B\0E\18\8E\03E\0E \8D\04B\0E(\8C\05H\0E0\86\06H\0E8\83\07M\0E@r\0E8A\0E0A\0E(B\0E B\0E\18B\0E\10B\0E\08\00\14\00\00\00\04\01\00\00h\FE\FF\FF\02\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00" }>
@seg_200de0__init_array = internal global %seg_200de0__init_array_type <{ i64 ptrtoint (void ()* @callback_sub_630_frame_dummy to i64), i64 ptrtoint (void ()* @callback_sub_5f0___do_global_dtors_aux to i64) }>
@seg_200df0__jcr = internal global %seg_200df0__jcr_type zeroinitializer
@seg_200fb8__got = internal global %seg_200fb8__got_type <{ [24 x i8] c"\F8\0D \00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00", i64 ptrtoint (i64 (i64)* @_ITM_deregisterTMCloneTable to i64), i64 ptrtoint (i64 (i64, i64, i64, i64, i64, i64, i64, i64)* @__libc_start_main to i64), i64 ptrtoint (i64 ()* @__gmon_start__ to i64), i64 ptrtoint (i64 (i64)* @_Jv_RegisterClasses to i64), i64 ptrtoint (i64 (i64, i64)* @_ITM_registerTMCloneTable to i64), i64 ptrtoint (i64 (i64)* @__cxa_finalize to i64) }>
@seg_201000__data = internal global %seg_201000__data_type <{ [8 x i8] zeroinitializer, i64 add (i64 ptrtoint (%seg_201000__data_type* @seg_201000__data to i64), i64 8) }>
@__bss_start = global %__bss_start_type zeroinitializer
@0 = internal global i1 false
@1 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @callback_sub_630_frame_dummy_wrapper
@2 = internal constant void ()* @__mcsema_attach_call
@3 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @callback_sub_5f0___do_global_dtors_aux_wrapper
@4 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @callback_sub_750___libc_csu_fini_wrapper
@5 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @callback_sub_6e0___libc_csu_init_wrapper
@6 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @main_wrapper
@7 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @get_sign_wrapper
@8 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @.init_proc_wrapper
@9 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @init_var_correspondence_wrapper
@10 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @.term_proc_wrapper
@llvm.global_ctors = appending global [1 x { i32, void ()*, i8* }] [{ i32, void ()*, i8* } { i32 101, void ()* @__mcsema_constructor, i8* null }]
@llvm.global_dtors = appending global [1 x { i32, void ()*, i8* }] [{ i32, void ()*, i8* } { i32 101, void ()* @__mcsema_destructor, i8* null }]

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L17HandleUnsupportedEP6MemoryR5State(%struct.Memory*, %struct.State* dereferenceable(3376))  {
  %3 = tail call %struct.Memory* @__remill_sync_hyper_call(%struct.State* nonnull dereferenceable(3376) %1, %struct.Memory* %0, i32 257) 
  ret %struct.Memory* %3
}

declare %struct.Memory* @__remill_sync_hyper_call(%struct.State* dereferenceable(3376), %struct.Memory*, i32) 

; Function Attrs: alwaysinline norecurse nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L24HandleInvalidInstructionEP6MemoryR5State(%struct.Memory* readnone returned, %struct.State* nocapture dereferenceable(3376))  {
  %3 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 0, i32 0
  store i32 13, i32* %3, align 16
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3ADDI3MnWIhE2MnIhE2InIhEEEP6MemoryS8_R5StateT_T0_T1_(%struct.Memory*, %struct.State* nocapture dereferenceable(3376), i64, i64, i64)  {
  %6 = inttoptr i64 %3 to i8*
  %7 = load i8, i8* %6
  %8 = trunc i64 %4 to i8
  %9 = add i8 %7, %8
  %10 = inttoptr i64 %2 to i8*
  store i8 %9, i8* %10
  %11 = icmp ult i8 %9, %7
  %12 = icmp ult i8 %9, %8
  %13 = or i1 %11, %12
  %14 = zext i1 %13 to i8
  %15 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  store i8 %14, i8* %15, align 1
  %16 = zext i8 %9 to i32
  %17 = tail call i32 @llvm.ctpop.i32(i32 %16) 
  %18 = trunc i32 %17 to i8
  %19 = and i8 %18, 1
  %20 = xor i8 %19, 1
  %21 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 %20, i8* %21, align 1
  %22 = xor i8 %7, %8
  %23 = xor i8 %22, %9
  %24 = lshr i8 %23, 4
  %25 = and i8 %24, 1
  %26 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 %25, i8* %26, align 1
  %27 = icmp eq i8 %9, 0
  %28 = zext i1 %27 to i8
  %29 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  store i8 %28, i8* %29, align 1
  %30 = lshr i8 %9, 7
  %31 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 %30, i8* %31, align 1
  %32 = lshr i8 %7, 7
  %33 = lshr i8 %8, 7
  %34 = xor i8 %30, %32
  %35 = xor i8 %30, %33
  %36 = add nuw nsw i8 %34, %35
  %37 = icmp eq i8 %36, 2
  %38 = zext i1 %37 to i8
  %39 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 %38, i8* %39, align 1
  ret %struct.Memory* %0
}

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare zeroext i8 @__remill_read_memory_8(%struct.Memory*, i64) 

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare %struct.Memory* @__remill_write_memory_8(%struct.Memory*, i64, i8 zeroext) 

; Function Attrs: nounwind readnone
declare i32 @llvm.ctpop.i32(i32) 

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3ADDI3RnWIhE2RnIhE2InIhEEEP6MemoryS8_R5StateT_T0_T1_(%struct.Memory* readnone returned, %struct.State* nocapture dereferenceable(3376), i8* nocapture, i64, i64)  {
  %6 = trunc i64 %3 to i8
  %7 = trunc i64 %4 to i8
  %8 = add i8 %7, %6
  store i8 %8, i8* %2, align 1
  %9 = icmp ult i8 %8, %6
  %10 = icmp ult i8 %8, %7
  %11 = or i1 %9, %10
  %12 = zext i1 %11 to i8
  %13 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  store i8 %12, i8* %13, align 1
  %14 = zext i8 %8 to i32
  %15 = tail call i32 @llvm.ctpop.i32(i32 %14) 
  %16 = trunc i32 %15 to i8
  %17 = and i8 %16, 1
  %18 = xor i8 %17, 1
  %19 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 %18, i8* %19, align 1
  %20 = xor i64 %4, %3
  %21 = trunc i64 %20 to i8
  %22 = xor i8 %21, %8
  %23 = lshr i8 %22, 4
  %24 = and i8 %23, 1
  %25 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 %24, i8* %25, align 1
  %26 = icmp eq i8 %8, 0
  %27 = zext i1 %26 to i8
  %28 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  store i8 %27, i8* %28, align 1
  %29 = lshr i8 %8, 7
  %30 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 %29, i8* %30, align 1
  %31 = lshr i8 %6, 7
  %32 = lshr i8 %7, 7
  %33 = xor i8 %29, %31
  %34 = xor i8 %29, %32
  %35 = add nuw nsw i8 %33, %34
  %36 = icmp eq i8 %35, 2
  %37 = zext i1 %36 to i8
  %38 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 %37, i8* %38, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3ADDI3MnWItE2MnItE2InItEEEP6MemoryS8_R5StateT_T0_T1_(%struct.Memory*, %struct.State* nocapture dereferenceable(3376), i64, i64, i64)  {
  %6 = inttoptr i64 %3 to i16*
  %7 = load i16, i16* %6
  %8 = trunc i64 %4 to i16
  %9 = add i16 %7, %8
  %10 = inttoptr i64 %2 to i16*
  store i16 %9, i16* %10
  %11 = icmp ult i16 %9, %7
  %12 = icmp ult i16 %9, %8
  %13 = or i1 %11, %12
  %14 = zext i1 %13 to i8
  %15 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  store i8 %14, i8* %15, align 1
  %16 = and i16 %9, 255
  %17 = zext i16 %16 to i32
  %18 = tail call i32 @llvm.ctpop.i32(i32 %17) 
  %19 = trunc i32 %18 to i8
  %20 = and i8 %19, 1
  %21 = xor i8 %20, 1
  %22 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 %21, i8* %22, align 1
  %23 = xor i16 %7, %8
  %24 = xor i16 %23, %9
  %25 = lshr i16 %24, 4
  %26 = trunc i16 %25 to i8
  %27 = and i8 %26, 1
  %28 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 %27, i8* %28, align 1
  %29 = icmp eq i16 %9, 0
  %30 = zext i1 %29 to i8
  %31 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  store i8 %30, i8* %31, align 1
  %32 = lshr i16 %9, 15
  %33 = trunc i16 %32 to i8
  %34 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 %33, i8* %34, align 1
  %35 = lshr i16 %7, 15
  %36 = lshr i16 %8, 15
  %37 = xor i16 %32, %35
  %38 = xor i16 %32, %36
  %39 = add nuw nsw i16 %37, %38
  %40 = icmp eq i16 %39, 2
  %41 = zext i1 %40 to i8
  %42 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 %41, i8* %42, align 1
  ret %struct.Memory* %0
}

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare zeroext i16 @__remill_read_memory_16(%struct.Memory*, i64) 

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare %struct.Memory* @__remill_write_memory_16(%struct.Memory*, i64, i16 zeroext) 

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3ADDI3MnWIjE2MnIjE2InIjEEEP6MemoryS8_R5StateT_T0_T1_(%struct.Memory*, %struct.State* nocapture dereferenceable(3376), i64, i64, i64)  {
  %6 = inttoptr i64 %3 to i32*
  %7 = load i32, i32* %6
  %8 = trunc i64 %4 to i32
  %9 = add i32 %7, %8
  %10 = inttoptr i64 %2 to i32*
  store i32 %9, i32* %10
  %11 = icmp ult i32 %9, %7
  %12 = icmp ult i32 %9, %8
  %13 = or i1 %11, %12
  %14 = zext i1 %13 to i8
  %15 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  store i8 %14, i8* %15, align 1
  %16 = and i32 %9, 255
  %17 = tail call i32 @llvm.ctpop.i32(i32 %16) 
  %18 = trunc i32 %17 to i8
  %19 = and i8 %18, 1
  %20 = xor i8 %19, 1
  %21 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 %20, i8* %21, align 1
  %22 = xor i32 %7, %8
  %23 = xor i32 %22, %9
  %24 = lshr i32 %23, 4
  %25 = trunc i32 %24 to i8
  %26 = and i8 %25, 1
  %27 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 %26, i8* %27, align 1
  %28 = icmp eq i32 %9, 0
  %29 = zext i1 %28 to i8
  %30 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  store i8 %29, i8* %30, align 1
  %31 = lshr i32 %9, 31
  %32 = trunc i32 %31 to i8
  %33 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 %32, i8* %33, align 1
  %34 = lshr i32 %7, 31
  %35 = lshr i32 %8, 31
  %36 = xor i32 %31, %34
  %37 = xor i32 %31, %35
  %38 = add nuw nsw i32 %36, %37
  %39 = icmp eq i32 %38, 2
  %40 = zext i1 %39 to i8
  %41 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 %40, i8* %41, align 1
  ret %struct.Memory* %0
}

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare i32 @__remill_read_memory_32(%struct.Memory*, i64) 

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare %struct.Memory* @__remill_write_memory_32(%struct.Memory*, i64, i32) 

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3ADDI3MnWImE2MnImE2InImEEEP6MemoryS8_R5StateT_T0_T1_(%struct.Memory*, %struct.State* nocapture dereferenceable(3376), i64, i64, i64)  {
  %6 = inttoptr i64 %3 to i64*
  %7 = load i64, i64* %6
  %8 = add i64 %7, %4
  %9 = inttoptr i64 %2 to i64*
  store i64 %8, i64* %9
  %10 = icmp ult i64 %8, %7
  %11 = icmp ult i64 %8, %4
  %12 = or i1 %10, %11
  %13 = zext i1 %12 to i8
  %14 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  store i8 %13, i8* %14, align 1
  %15 = trunc i64 %8 to i32
  %16 = and i32 %15, 255
  %17 = tail call i32 @llvm.ctpop.i32(i32 %16) 
  %18 = trunc i32 %17 to i8
  %19 = and i8 %18, 1
  %20 = xor i8 %19, 1
  %21 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 %20, i8* %21, align 1
  %22 = xor i64 %7, %4
  %23 = xor i64 %22, %8
  %24 = lshr i64 %23, 4
  %25 = trunc i64 %24 to i8
  %26 = and i8 %25, 1
  %27 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 %26, i8* %27, align 1
  %28 = icmp eq i64 %8, 0
  %29 = zext i1 %28 to i8
  %30 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  store i8 %29, i8* %30, align 1
  %31 = lshr i64 %8, 63
  %32 = trunc i64 %31 to i8
  %33 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 %32, i8* %33, align 1
  %34 = lshr i64 %7, 63
  %35 = lshr i64 %4, 63
  %36 = xor i64 %31, %34
  %37 = xor i64 %31, %35
  %38 = add nuw nsw i64 %36, %37
  %39 = icmp eq i64 %38, 2
  %40 = zext i1 %39 to i8
  %41 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 %40, i8* %41, align 1
  ret %struct.Memory* %0
}

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare i64 @__remill_read_memory_64(%struct.Memory*, i64) 

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare %struct.Memory* @__remill_write_memory_64(%struct.Memory*, i64, i64) 

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3ADDI3RnWItE2RnItE2InItEEEP6MemoryS8_R5StateT_T0_T1_(%struct.Memory* readnone returned, %struct.State* nocapture dereferenceable(3376), i16* nocapture, i64, i64)  {
  %6 = trunc i64 %3 to i16
  %7 = trunc i64 %4 to i16
  %8 = add i16 %7, %6
  store i16 %8, i16* %2, align 2
  %9 = icmp ult i16 %8, %6
  %10 = icmp ult i16 %8, %7
  %11 = or i1 %9, %10
  %12 = zext i1 %11 to i8
  %13 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  store i8 %12, i8* %13, align 1
  %14 = and i16 %8, 255
  %15 = zext i16 %14 to i32
  %16 = tail call i32 @llvm.ctpop.i32(i32 %15) 
  %17 = trunc i32 %16 to i8
  %18 = and i8 %17, 1
  %19 = xor i8 %18, 1
  %20 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 %19, i8* %20, align 1
  %21 = xor i64 %4, %3
  %22 = trunc i64 %21 to i16
  %23 = xor i16 %22, %8
  %24 = lshr i16 %23, 4
  %25 = trunc i16 %24 to i8
  %26 = and i8 %25, 1
  %27 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 %26, i8* %27, align 1
  %28 = icmp eq i16 %8, 0
  %29 = zext i1 %28 to i8
  %30 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  store i8 %29, i8* %30, align 1
  %31 = lshr i16 %8, 15
  %32 = trunc i16 %31 to i8
  %33 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 %32, i8* %33, align 1
  %34 = lshr i16 %6, 15
  %35 = lshr i16 %7, 15
  %36 = xor i16 %31, %34
  %37 = xor i16 %31, %35
  %38 = add nuw nsw i16 %36, %37
  %39 = icmp eq i16 %38, 2
  %40 = zext i1 %39 to i8
  %41 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 %40, i8* %41, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3ADDI3RnWImE2RnIjE2InIjEEEP6MemoryS8_R5StateT_T0_T1_(%struct.Memory* readnone returned, %struct.State* nocapture dereferenceable(3376), i64* nocapture, i64, i64)  {
  %6 = trunc i64 %3 to i32
  %7 = trunc i64 %4 to i32
  %8 = add i32 %7, %6
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %2, align 8
  %10 = icmp ult i32 %8, %6
  %11 = icmp ult i32 %8, %7
  %12 = or i1 %10, %11
  %13 = zext i1 %12 to i8
  %14 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  store i8 %13, i8* %14, align 1
  %15 = and i32 %8, 255
  %16 = tail call i32 @llvm.ctpop.i32(i32 %15) 
  %17 = trunc i32 %16 to i8
  %18 = and i8 %17, 1
  %19 = xor i8 %18, 1
  %20 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 %19, i8* %20, align 1
  %21 = xor i64 %4, %3
  %22 = trunc i64 %21 to i32
  %23 = xor i32 %22, %8
  %24 = lshr i32 %23, 4
  %25 = trunc i32 %24 to i8
  %26 = and i8 %25, 1
  %27 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 %26, i8* %27, align 1
  %28 = icmp eq i32 %8, 0
  %29 = zext i1 %28 to i8
  %30 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  store i8 %29, i8* %30, align 1
  %31 = lshr i32 %8, 31
  %32 = trunc i32 %31 to i8
  %33 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 %32, i8* %33, align 1
  %34 = lshr i32 %6, 31
  %35 = lshr i32 %7, 31
  %36 = xor i32 %31, %34
  %37 = xor i32 %31, %35
  %38 = add nuw nsw i32 %36, %37
  %39 = icmp eq i32 %38, 2
  %40 = zext i1 %39 to i8
  %41 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 %40, i8* %41, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3ADDI3RnWImE2RnImE2InImEEEP6MemoryS8_R5StateT_T0_T1_(%struct.Memory* readnone returned, %struct.State* nocapture dereferenceable(3376), i64* nocapture, i64, i64)  {
  %6 = add i64 %4, %3
  store i64 %6, i64* %2, align 8
  %7 = icmp ult i64 %6, %3
  %8 = icmp ult i64 %6, %4
  %9 = or i1 %7, %8
  %10 = zext i1 %9 to i8
  %11 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  store i8 %10, i8* %11, align 1
  %12 = trunc i64 %6 to i32
  %13 = and i32 %12, 255
  %14 = tail call i32 @llvm.ctpop.i32(i32 %13) 
  %15 = trunc i32 %14 to i8
  %16 = and i8 %15, 1
  %17 = xor i8 %16, 1
  %18 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 %17, i8* %18, align 1
  %19 = xor i64 %4, %3
  %20 = xor i64 %19, %6
  %21 = lshr i64 %20, 4
  %22 = trunc i64 %21 to i8
  %23 = and i8 %22, 1
  %24 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 %23, i8* %24, align 1
  %25 = icmp eq i64 %6, 0
  %26 = zext i1 %25 to i8
  %27 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  store i8 %26, i8* %27, align 1
  %28 = lshr i64 %6, 63
  %29 = trunc i64 %28 to i8
  %30 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 %29, i8* %30, align 1
  %31 = lshr i64 %3, 63
  %32 = lshr i64 %4, 63
  %33 = xor i64 %28, %31
  %34 = xor i64 %28, %32
  %35 = add nuw nsw i64 %33, %34
  %36 = icmp eq i64 %35, 2
  %37 = zext i1 %36 to i8
  %38 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 %37, i8* %38, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3ADDI3MnWIhE2MnIhE2RnIhEEEP6MemoryS8_R5StateT_T0_T1_(%struct.Memory*, %struct.State* nocapture dereferenceable(3376), i64, i64, i64)  {
  %6 = inttoptr i64 %3 to i8*
  %7 = load i8, i8* %6
  %8 = trunc i64 %4 to i8
  %9 = add i8 %7, %8
  %10 = inttoptr i64 %2 to i8*
  store i8 %9, i8* %10
  %11 = icmp ult i8 %9, %7
  %12 = icmp ult i8 %9, %8
  %13 = or i1 %11, %12
  %14 = zext i1 %13 to i8
  %15 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  store i8 %14, i8* %15, align 1
  %16 = zext i8 %9 to i32
  %17 = tail call i32 @llvm.ctpop.i32(i32 %16) 
  %18 = trunc i32 %17 to i8
  %19 = and i8 %18, 1
  %20 = xor i8 %19, 1
  %21 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 %20, i8* %21, align 1
  %22 = xor i8 %7, %8
  %23 = xor i8 %22, %9
  %24 = lshr i8 %23, 4
  %25 = and i8 %24, 1
  %26 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 %25, i8* %26, align 1
  %27 = icmp eq i8 %9, 0
  %28 = zext i1 %27 to i8
  %29 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  store i8 %28, i8* %29, align 1
  %30 = lshr i8 %9, 7
  %31 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 %30, i8* %31, align 1
  %32 = lshr i8 %7, 7
  %33 = lshr i8 %8, 7
  %34 = xor i8 %30, %32
  %35 = xor i8 %30, %33
  %36 = add nuw nsw i8 %34, %35
  %37 = icmp eq i8 %36, 2
  %38 = zext i1 %37 to i8
  %39 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 %38, i8* %39, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3ADDI3RnWIhE2RnIhES4_EEP6MemoryS6_R5StateT_T0_T1_(%struct.Memory* readnone returned, %struct.State* nocapture dereferenceable(3376), i8* nocapture, i64, i64)  {
  %6 = trunc i64 %3 to i8
  %7 = trunc i64 %4 to i8
  %8 = add i8 %7, %6
  store i8 %8, i8* %2, align 1
  %9 = icmp ult i8 %8, %6
  %10 = icmp ult i8 %8, %7
  %11 = or i1 %9, %10
  %12 = zext i1 %11 to i8
  %13 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  store i8 %12, i8* %13, align 1
  %14 = zext i8 %8 to i32
  %15 = tail call i32 @llvm.ctpop.i32(i32 %14) 
  %16 = trunc i32 %15 to i8
  %17 = and i8 %16, 1
  %18 = xor i8 %17, 1
  %19 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 %18, i8* %19, align 1
  %20 = xor i64 %4, %3
  %21 = trunc i64 %20 to i8
  %22 = xor i8 %21, %8
  %23 = lshr i8 %22, 4
  %24 = and i8 %23, 1
  %25 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 %24, i8* %25, align 1
  %26 = icmp eq i8 %8, 0
  %27 = zext i1 %26 to i8
  %28 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  store i8 %27, i8* %28, align 1
  %29 = lshr i8 %8, 7
  %30 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 %29, i8* %30, align 1
  %31 = lshr i8 %6, 7
  %32 = lshr i8 %7, 7
  %33 = xor i8 %29, %31
  %34 = xor i8 %29, %32
  %35 = add nuw nsw i8 %33, %34
  %36 = icmp eq i8 %35, 2
  %37 = zext i1 %36 to i8
  %38 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 %37, i8* %38, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3ADDI3MnWItE2MnItE2RnItEEEP6MemoryS8_R5StateT_T0_T1_(%struct.Memory*, %struct.State* nocapture dereferenceable(3376), i64, i64, i64)  {
  %6 = inttoptr i64 %3 to i16*
  %7 = load i16, i16* %6
  %8 = trunc i64 %4 to i16
  %9 = add i16 %7, %8
  %10 = inttoptr i64 %2 to i16*
  store i16 %9, i16* %10
  %11 = icmp ult i16 %9, %7
  %12 = icmp ult i16 %9, %8
  %13 = or i1 %11, %12
  %14 = zext i1 %13 to i8
  %15 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  store i8 %14, i8* %15, align 1
  %16 = and i16 %9, 255
  %17 = zext i16 %16 to i32
  %18 = tail call i32 @llvm.ctpop.i32(i32 %17) 
  %19 = trunc i32 %18 to i8
  %20 = and i8 %19, 1
  %21 = xor i8 %20, 1
  %22 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 %21, i8* %22, align 1
  %23 = xor i16 %7, %8
  %24 = xor i16 %23, %9
  %25 = lshr i16 %24, 4
  %26 = trunc i16 %25 to i8
  %27 = and i8 %26, 1
  %28 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 %27, i8* %28, align 1
  %29 = icmp eq i16 %9, 0
  %30 = zext i1 %29 to i8
  %31 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  store i8 %30, i8* %31, align 1
  %32 = lshr i16 %9, 15
  %33 = trunc i16 %32 to i8
  %34 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 %33, i8* %34, align 1
  %35 = lshr i16 %7, 15
  %36 = lshr i16 %8, 15
  %37 = xor i16 %32, %35
  %38 = xor i16 %32, %36
  %39 = add nuw nsw i16 %37, %38
  %40 = icmp eq i16 %39, 2
  %41 = zext i1 %40 to i8
  %42 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 %41, i8* %42, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3ADDI3MnWIjE2MnIjE2RnIjEEEP6MemoryS8_R5StateT_T0_T1_(%struct.Memory*, %struct.State* nocapture dereferenceable(3376), i64, i64, i64)  {
  %6 = inttoptr i64 %3 to i32*
  %7 = load i32, i32* %6
  %8 = trunc i64 %4 to i32
  %9 = add i32 %7, %8
  %10 = inttoptr i64 %2 to i32*
  store i32 %9, i32* %10
  %11 = icmp ult i32 %9, %7
  %12 = icmp ult i32 %9, %8
  %13 = or i1 %11, %12
  %14 = zext i1 %13 to i8
  %15 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  store i8 %14, i8* %15, align 1
  %16 = and i32 %9, 255
  %17 = tail call i32 @llvm.ctpop.i32(i32 %16) 
  %18 = trunc i32 %17 to i8
  %19 = and i8 %18, 1
  %20 = xor i8 %19, 1
  %21 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 %20, i8* %21, align 1
  %22 = xor i32 %7, %8
  %23 = xor i32 %22, %9
  %24 = lshr i32 %23, 4
  %25 = trunc i32 %24 to i8
  %26 = and i8 %25, 1
  %27 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 %26, i8* %27, align 1
  %28 = icmp eq i32 %9, 0
  %29 = zext i1 %28 to i8
  %30 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  store i8 %29, i8* %30, align 1
  %31 = lshr i32 %9, 31
  %32 = trunc i32 %31 to i8
  %33 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 %32, i8* %33, align 1
  %34 = lshr i32 %7, 31
  %35 = lshr i32 %8, 31
  %36 = xor i32 %31, %34
  %37 = xor i32 %31, %35
  %38 = add nuw nsw i32 %36, %37
  %39 = icmp eq i32 %38, 2
  %40 = zext i1 %39 to i8
  %41 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 %40, i8* %41, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3ADDI3MnWImE2MnImE2RnImEEEP6MemoryS8_R5StateT_T0_T1_(%struct.Memory*, %struct.State* nocapture dereferenceable(3376), i64, i64, i64)  {
  %6 = inttoptr i64 %3 to i64*
  %7 = load i64, i64* %6
  %8 = add i64 %7, %4
  %9 = inttoptr i64 %2 to i64*
  store i64 %8, i64* %9
  %10 = icmp ult i64 %8, %7
  %11 = icmp ult i64 %8, %4
  %12 = or i1 %10, %11
  %13 = zext i1 %12 to i8
  %14 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  store i8 %13, i8* %14, align 1
  %15 = trunc i64 %8 to i32
  %16 = and i32 %15, 255
  %17 = tail call i32 @llvm.ctpop.i32(i32 %16) 
  %18 = trunc i32 %17 to i8
  %19 = and i8 %18, 1
  %20 = xor i8 %19, 1
  %21 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 %20, i8* %21, align 1
  %22 = xor i64 %7, %4
  %23 = xor i64 %22, %8
  %24 = lshr i64 %23, 4
  %25 = trunc i64 %24 to i8
  %26 = and i8 %25, 1
  %27 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 %26, i8* %27, align 1
  %28 = icmp eq i64 %8, 0
  %29 = zext i1 %28 to i8
  %30 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  store i8 %29, i8* %30, align 1
  %31 = lshr i64 %8, 63
  %32 = trunc i64 %31 to i8
  %33 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 %32, i8* %33, align 1
  %34 = lshr i64 %7, 63
  %35 = lshr i64 %4, 63
  %36 = xor i64 %31, %34
  %37 = xor i64 %31, %35
  %38 = add nuw nsw i64 %36, %37
  %39 = icmp eq i64 %38, 2
  %40 = zext i1 %39 to i8
  %41 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 %40, i8* %41, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3ADDI3RnWItE2RnItES4_EEP6MemoryS6_R5StateT_T0_T1_(%struct.Memory* readnone returned, %struct.State* nocapture dereferenceable(3376), i16* nocapture, i64, i64)  {
  %6 = trunc i64 %3 to i16
  %7 = trunc i64 %4 to i16
  %8 = add i16 %7, %6
  store i16 %8, i16* %2, align 2
  %9 = icmp ult i16 %8, %6
  %10 = icmp ult i16 %8, %7
  %11 = or i1 %9, %10
  %12 = zext i1 %11 to i8
  %13 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  store i8 %12, i8* %13, align 1
  %14 = and i16 %8, 255
  %15 = zext i16 %14 to i32
  %16 = tail call i32 @llvm.ctpop.i32(i32 %15) 
  %17 = trunc i32 %16 to i8
  %18 = and i8 %17, 1
  %19 = xor i8 %18, 1
  %20 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 %19, i8* %20, align 1
  %21 = xor i64 %4, %3
  %22 = trunc i64 %21 to i16
  %23 = xor i16 %22, %8
  %24 = lshr i16 %23, 4
  %25 = trunc i16 %24 to i8
  %26 = and i8 %25, 1
  %27 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 %26, i8* %27, align 1
  %28 = icmp eq i16 %8, 0
  %29 = zext i1 %28 to i8
  %30 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  store i8 %29, i8* %30, align 1
  %31 = lshr i16 %8, 15
  %32 = trunc i16 %31 to i8
  %33 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 %32, i8* %33, align 1
  %34 = lshr i16 %6, 15
  %35 = lshr i16 %7, 15
  %36 = xor i16 %31, %34
  %37 = xor i16 %31, %35
  %38 = add nuw nsw i16 %36, %37
  %39 = icmp eq i16 %38, 2
  %40 = zext i1 %39 to i8
  %41 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 %40, i8* %41, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3ADDI3RnWImE2RnIjES4_EEP6MemoryS6_R5StateT_T0_T1_(%struct.Memory* readnone returned, %struct.State* nocapture dereferenceable(3376), i64* nocapture, i64, i64)  {
  %6 = trunc i64 %3 to i32
  %7 = trunc i64 %4 to i32
  %8 = add i32 %7, %6
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %2, align 8
  %10 = icmp ult i32 %8, %6
  %11 = icmp ult i32 %8, %7
  %12 = or i1 %10, %11
  %13 = zext i1 %12 to i8
  %14 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  store i8 %13, i8* %14, align 1
  %15 = and i32 %8, 255
  %16 = tail call i32 @llvm.ctpop.i32(i32 %15) 
  %17 = trunc i32 %16 to i8
  %18 = and i8 %17, 1
  %19 = xor i8 %18, 1
  %20 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 %19, i8* %20, align 1
  %21 = xor i64 %4, %3
  %22 = trunc i64 %21 to i32
  %23 = xor i32 %22, %8
  %24 = lshr i32 %23, 4
  %25 = trunc i32 %24 to i8
  %26 = and i8 %25, 1
  %27 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 %26, i8* %27, align 1
  %28 = icmp eq i32 %8, 0
  %29 = zext i1 %28 to i8
  %30 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  store i8 %29, i8* %30, align 1
  %31 = lshr i32 %8, 31
  %32 = trunc i32 %31 to i8
  %33 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 %32, i8* %33, align 1
  %34 = lshr i32 %6, 31
  %35 = lshr i32 %7, 31
  %36 = xor i32 %31, %34
  %37 = xor i32 %31, %35
  %38 = add nuw nsw i32 %36, %37
  %39 = icmp eq i32 %38, 2
  %40 = zext i1 %39 to i8
  %41 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 %40, i8* %41, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3ADDI3RnWImE2RnImES4_EEP6MemoryS6_R5StateT_T0_T1_(%struct.Memory* readnone returned, %struct.State* nocapture dereferenceable(3376), i64* nocapture, i64, i64)  {
  %6 = add i64 %4, %3
  store i64 %6, i64* %2, align 8
  %7 = icmp ult i64 %6, %3
  %8 = icmp ult i64 %6, %4
  %9 = or i1 %7, %8
  %10 = zext i1 %9 to i8
  %11 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  store i8 %10, i8* %11, align 1
  %12 = trunc i64 %6 to i32
  %13 = and i32 %12, 255
  %14 = tail call i32 @llvm.ctpop.i32(i32 %13) 
  %15 = trunc i32 %14 to i8
  %16 = and i8 %15, 1
  %17 = xor i8 %16, 1
  %18 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 %17, i8* %18, align 1
  %19 = xor i64 %4, %3
  %20 = xor i64 %19, %6
  %21 = lshr i64 %20, 4
  %22 = trunc i64 %21 to i8
  %23 = and i8 %22, 1
  %24 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 %23, i8* %24, align 1
  %25 = icmp eq i64 %6, 0
  %26 = zext i1 %25 to i8
  %27 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  store i8 %26, i8* %27, align 1
  %28 = lshr i64 %6, 63
  %29 = trunc i64 %28 to i8
  %30 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 %29, i8* %30, align 1
  %31 = lshr i64 %3, 63
  %32 = lshr i64 %4, 63
  %33 = xor i64 %28, %31
  %34 = xor i64 %28, %32
  %35 = add nuw nsw i64 %33, %34
  %36 = icmp eq i64 %35, 2
  %37 = zext i1 %36 to i8
  %38 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 %37, i8* %38, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3ADDI3RnWIhE2RnIhE2MnIhEEEP6MemoryS8_R5StateT_T0_T1_(%struct.Memory*, %struct.State* nocapture dereferenceable(3376), i8* nocapture, i64, i64)  {
  %6 = trunc i64 %3 to i8
  %7 = inttoptr i64 %4 to i8*
  %8 = load i8, i8* %7
  %9 = add i8 %8, %6
  store i8 %9, i8* %2, align 1
  %10 = icmp ult i8 %9, %6
  %11 = icmp ult i8 %9, %8
  %12 = or i1 %10, %11
  %13 = zext i1 %12 to i8
  %14 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  store i8 %13, i8* %14, align 1
  %15 = zext i8 %9 to i32
  %16 = tail call i32 @llvm.ctpop.i32(i32 %15) 
  %17 = trunc i32 %16 to i8
  %18 = and i8 %17, 1
  %19 = xor i8 %18, 1
  %20 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 %19, i8* %20, align 1
  %21 = xor i8 %8, %6
  %22 = xor i8 %21, %9
  %23 = lshr i8 %22, 4
  %24 = and i8 %23, 1
  %25 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 %24, i8* %25, align 1
  %26 = icmp eq i8 %9, 0
  %27 = zext i1 %26 to i8
  %28 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  store i8 %27, i8* %28, align 1
  %29 = lshr i8 %9, 7
  %30 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 %29, i8* %30, align 1
  %31 = lshr i8 %6, 7
  %32 = lshr i8 %8, 7
  %33 = xor i8 %29, %31
  %34 = xor i8 %29, %32
  %35 = add nuw nsw i8 %33, %34
  %36 = icmp eq i8 %35, 2
  %37 = zext i1 %36 to i8
  %38 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 %37, i8* %38, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3ADDI3RnWItE2RnItE2MnItEEEP6MemoryS8_R5StateT_T0_T1_(%struct.Memory*, %struct.State* nocapture dereferenceable(3376), i16* nocapture, i64, i64)  {
  %6 = trunc i64 %3 to i16
  %7 = inttoptr i64 %4 to i16*
  %8 = load i16, i16* %7
  %9 = add i16 %8, %6
  store i16 %9, i16* %2, align 2
  %10 = icmp ult i16 %9, %6
  %11 = icmp ult i16 %9, %8
  %12 = or i1 %10, %11
  %13 = zext i1 %12 to i8
  %14 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  store i8 %13, i8* %14, align 1
  %15 = and i16 %9, 255
  %16 = zext i16 %15 to i32
  %17 = tail call i32 @llvm.ctpop.i32(i32 %16) 
  %18 = trunc i32 %17 to i8
  %19 = and i8 %18, 1
  %20 = xor i8 %19, 1
  %21 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 %20, i8* %21, align 1
  %22 = xor i16 %8, %6
  %23 = xor i16 %22, %9
  %24 = lshr i16 %23, 4
  %25 = trunc i16 %24 to i8
  %26 = and i8 %25, 1
  %27 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 %26, i8* %27, align 1
  %28 = icmp eq i16 %9, 0
  %29 = zext i1 %28 to i8
  %30 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  store i8 %29, i8* %30, align 1
  %31 = lshr i16 %9, 15
  %32 = trunc i16 %31 to i8
  %33 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 %32, i8* %33, align 1
  %34 = lshr i16 %6, 15
  %35 = lshr i16 %8, 15
  %36 = xor i16 %31, %34
  %37 = xor i16 %31, %35
  %38 = add nuw nsw i16 %36, %37
  %39 = icmp eq i16 %38, 2
  %40 = zext i1 %39 to i8
  %41 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 %40, i8* %41, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3ADDI3RnWImE2RnIjE2MnIjEEEP6MemoryS8_R5StateT_T0_T1_(%struct.Memory*, %struct.State* nocapture dereferenceable(3376), i64* nocapture, i64, i64)  {
  %6 = trunc i64 %3 to i32
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7
  %9 = add i32 %8, %6
  %10 = zext i32 %9 to i64
  store i64 %10, i64* %2, align 8
  %11 = icmp ult i32 %9, %6
  %12 = icmp ult i32 %9, %8
  %13 = or i1 %11, %12
  %14 = zext i1 %13 to i8
  %15 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  store i8 %14, i8* %15, align 1
  %16 = and i32 %9, 255
  %17 = tail call i32 @llvm.ctpop.i32(i32 %16) 
  %18 = trunc i32 %17 to i8
  %19 = and i8 %18, 1
  %20 = xor i8 %19, 1
  %21 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 %20, i8* %21, align 1
  %22 = xor i32 %8, %6
  %23 = xor i32 %22, %9
  %24 = lshr i32 %23, 4
  %25 = trunc i32 %24 to i8
  %26 = and i8 %25, 1
  %27 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 %26, i8* %27, align 1
  %28 = icmp eq i32 %9, 0
  %29 = zext i1 %28 to i8
  %30 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  store i8 %29, i8* %30, align 1
  %31 = lshr i32 %9, 31
  %32 = trunc i32 %31 to i8
  %33 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 %32, i8* %33, align 1
  %34 = lshr i32 %6, 31
  %35 = lshr i32 %8, 31
  %36 = xor i32 %31, %34
  %37 = xor i32 %31, %35
  %38 = add nuw nsw i32 %36, %37
  %39 = icmp eq i32 %38, 2
  %40 = zext i1 %39 to i8
  %41 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 %40, i8* %41, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3ADDI3RnWImE2RnImE2MnImEEEP6MemoryS8_R5StateT_T0_T1_(%struct.Memory*, %struct.State* nocapture dereferenceable(3376), i64* nocapture, i64, i64)  {
  %6 = inttoptr i64 %4 to i64*
  %7 = load i64, i64* %6
  %8 = add i64 %7, %3
  store i64 %8, i64* %2, align 8
  %9 = icmp ult i64 %8, %3
  %10 = icmp ult i64 %8, %7
  %11 = or i1 %9, %10
  %12 = zext i1 %11 to i8
  %13 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  store i8 %12, i8* %13, align 1
  %14 = trunc i64 %8 to i32
  %15 = and i32 %14, 255
  %16 = tail call i32 @llvm.ctpop.i32(i32 %15) 
  %17 = trunc i32 %16 to i8
  %18 = and i8 %17, 1
  %19 = xor i8 %18, 1
  %20 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 %19, i8* %20, align 1
  %21 = xor i64 %7, %3
  %22 = xor i64 %21, %8
  %23 = lshr i64 %22, 4
  %24 = trunc i64 %23 to i8
  %25 = and i8 %24, 1
  %26 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 %25, i8* %26, align 1
  %27 = icmp eq i64 %8, 0
  %28 = zext i1 %27 to i8
  %29 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  store i8 %28, i8* %29, align 1
  %30 = lshr i64 %8, 63
  %31 = trunc i64 %30 to i8
  %32 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 %31, i8* %32, align 1
  %33 = lshr i64 %3, 63
  %34 = lshr i64 %7, 63
  %35 = xor i64 %30, %33
  %36 = xor i64 %30, %34
  %37 = add nuw nsw i64 %35, %36
  %38 = icmp eq i64 %37, 2
  %39 = zext i1 %38 to i8
  %40 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 %39, i8* %40, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L5ADDPSI3VnWI8vec128_tE2VnIS2_E3MVnIS2_EEEP6MemoryS9_R5StateT_T0_T1_(%struct.Memory* returned, %struct.State* nocapture readnone dereferenceable(3376), i8* nocapture, i8* nocapture readonly, i64)  {
  %6 = bitcast i8* %3 to <2 x float>*
  %7 = load <2 x float>, <2 x float>* %6, align 1
  %8 = getelementptr inbounds i8, i8* %3, i64 8
  %9 = bitcast i8* %8 to <2 x float>*
  %10 = load <2 x float>, <2 x float>* %9, align 1
  %11 = inttoptr i64 %4 to float*
  %12 = load float, float* %11
  %13 = add i64 %4, 4
  %14 = inttoptr i64 %13 to float*
  %15 = load float, float* %14
  %16 = add i64 %4, 8
  %17 = inttoptr i64 %16 to float*
  %18 = load float, float* %17
  %19 = add i64 %4, 12
  %20 = inttoptr i64 %19 to float*
  %21 = load float, float* %20
  %22 = shufflevector <2 x float> %7, <2 x float> %10, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %23 = insertelement <4 x float> undef, float %12, i32 0
  %24 = insertelement <4 x float> %23, float %15, i32 1
  %25 = insertelement <4 x float> %24, float %18, i32 2
  %26 = insertelement <4 x float> %25, float %21, i32 3
  %27 = fadd <4 x float> %22, %26
  %28 = bitcast i8* %2 to <4 x float>*
  store <4 x float> %27, <4 x float>* %28, align 1
  ret %struct.Memory* %0
}

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare float @__remill_read_memory_f32(%struct.Memory*, i64) 

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L5ADDPSI3VnWI8vec128_tE2VnIS2_ES5_EEP6MemoryS7_R5StateT_T0_T1_(%struct.Memory* readnone returned, %struct.State* nocapture readnone dereferenceable(3376), i8* nocapture, i8* nocapture readonly, i8* nocapture readonly)  {
  %6 = bitcast i8* %3 to <2 x float>*
  %7 = load <2 x float>, <2 x float>* %6, align 1
  %8 = getelementptr inbounds i8, i8* %3, i64 8
  %9 = bitcast i8* %8 to <2 x float>*
  %10 = load <2 x float>, <2 x float>* %9, align 1
  %11 = bitcast i8* %4 to <2 x float>*
  %12 = load <2 x float>, <2 x float>* %11, align 1
  %13 = getelementptr inbounds i8, i8* %4, i64 8
  %14 = bitcast i8* %13 to <2 x float>*
  %15 = load <2 x float>, <2 x float>* %14, align 1
  %16 = shufflevector <2 x float> %7, <2 x float> %10, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %17 = shufflevector <2 x float> %12, <2 x float> %15, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %18 = fadd <4 x float> %16, %17
  %19 = bitcast i8* %2 to <4 x float>*
  store <4 x float> %18, <4 x float>* %19, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L5ADDPDI3VnWI8vec128_tE2VnIS2_E3MVnIS2_EEEP6MemoryS9_R5StateT_T0_T1_(%struct.Memory* returned, %struct.State* nocapture readnone dereferenceable(3376), i8* nocapture, i8* nocapture readonly, i64)  {
  %6 = bitcast i8* %3 to <2 x double>*
  %7 = load <2 x double>, <2 x double>* %6, align 1
  %8 = inttoptr i64 %4 to double*
  %9 = load double, double* %8
  %10 = add i64 %4, 8
  %11 = inttoptr i64 %10 to double*
  %12 = load double, double* %11
  %13 = insertelement <2 x double> undef, double %9, i32 0
  %14 = insertelement <2 x double> %13, double %12, i32 1
  %15 = fadd <2 x double> %7, %14
  %16 = bitcast i8* %2 to <2 x double>*
  store <2 x double> %15, <2 x double>* %16, align 1
  ret %struct.Memory* %0
}

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare double @__remill_read_memory_f64(%struct.Memory*, i64) 

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L5ADDPDI3VnWI8vec128_tE2VnIS2_ES5_EEP6MemoryS7_R5StateT_T0_T1_(%struct.Memory* readnone returned, %struct.State* nocapture readnone dereferenceable(3376), i8* nocapture, i8* nocapture readonly, i8* nocapture readonly)  {
  %6 = bitcast i8* %3 to <2 x double>*
  %7 = load <2 x double>, <2 x double>* %6, align 1
  %8 = bitcast i8* %4 to <2 x double>*
  %9 = load <2 x double>, <2 x double>* %8, align 1
  %10 = fadd <2 x double> %7, %9
  %11 = bitcast i8* %2 to <2 x double>*
  store <2 x double> %10, <2 x double>* %11, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L5ADDSSI3VnWI8vec128_tE2VnIS2_E3MVnI7vec32_tEEEP6MemorySA_R5StateT_T0_T1_(%struct.Memory* returned, %struct.State* nocapture readnone dereferenceable(3376), i8* nocapture, i8* nocapture readonly, i64)  {
  %6 = bitcast i8* %3 to <2 x float>*
  %7 = load <2 x float>, <2 x float>* %6, align 1
  %8 = getelementptr inbounds i8, i8* %3, i64 8
  %9 = bitcast i8* %8 to <2 x i32>*
  %10 = load <2 x i32>, <2 x i32>* %9, align 1
  %11 = inttoptr i64 %4 to float*
  %12 = load float, float* %11
  %13 = extractelement <2 x float> %7, i32 0
  %14 = fadd float %13, %12
  %15 = bitcast i8* %2 to float*
  store float %14, float* %15, align 1
  %16 = bitcast <2 x float> %7 to <2 x i32>
  %17 = extractelement <2 x i32> %16, i32 1
  %18 = getelementptr inbounds i8, i8* %2, i64 4
  %19 = bitcast i8* %18 to i32*
  store i32 %17, i32* %19, align 1
  %20 = extractelement <2 x i32> %10, i32 0
  %21 = getelementptr inbounds i8, i8* %2, i64 8
  %22 = bitcast i8* %21 to i32*
  store i32 %20, i32* %22, align 1
  %23 = extractelement <2 x i32> %10, i32 1
  %24 = getelementptr inbounds i8, i8* %2, i64 12
  %25 = bitcast i8* %24 to i32*
  store i32 %23, i32* %25, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L5ADDSSI3VnWI8vec128_tE2VnIS2_ES5_EEP6MemoryS7_R5StateT_T0_T1_(%struct.Memory* readnone returned, %struct.State* nocapture readnone dereferenceable(3376), i8* nocapture, i8* nocapture readonly, i8* nocapture readonly)  {
  %6 = bitcast i8* %3 to <2 x float>*
  %7 = load <2 x float>, <2 x float>* %6, align 1
  %8 = getelementptr inbounds i8, i8* %3, i64 8
  %9 = bitcast i8* %8 to <2 x i32>*
  %10 = load <2 x i32>, <2 x i32>* %9, align 1
  %11 = bitcast i8* %4 to <2 x float>*
  %12 = load <2 x float>, <2 x float>* %11, align 1
  %13 = extractelement <2 x float> %7, i32 0
  %14 = extractelement <2 x float> %12, i32 0
  %15 = fadd float %13, %14
  %16 = bitcast i8* %2 to float*
  store float %15, float* %16, align 1
  %17 = bitcast <2 x float> %7 to <2 x i32>
  %18 = extractelement <2 x i32> %17, i32 1
  %19 = getelementptr inbounds i8, i8* %2, i64 4
  %20 = bitcast i8* %19 to i32*
  store i32 %18, i32* %20, align 1
  %21 = extractelement <2 x i32> %10, i32 0
  %22 = getelementptr inbounds i8, i8* %2, i64 8
  %23 = bitcast i8* %22 to i32*
  store i32 %21, i32* %23, align 1
  %24 = extractelement <2 x i32> %10, i32 1
  %25 = getelementptr inbounds i8, i8* %2, i64 12
  %26 = bitcast i8* %25 to i32*
  store i32 %24, i32* %26, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L5ADDSDI3VnWI8vec128_tE2VnIS2_E3MVnI7vec64_tEEEP6MemorySA_R5StateT_T0_T1_(%struct.Memory* returned, %struct.State* nocapture readnone dereferenceable(3376), i8* nocapture, i8* nocapture readonly, i64)  {
  %6 = bitcast i8* %3 to double*
  %7 = load double, double* %6, align 1
  %8 = getelementptr inbounds i8, i8* %3, i64 8
  %9 = bitcast i8* %8 to i64*
  %10 = load i64, i64* %9, align 1
  %11 = inttoptr i64 %4 to double*
  %12 = load double, double* %11
  %13 = fadd double %7, %12
  %14 = bitcast i8* %2 to double*
  store double %13, double* %14, align 1
  %15 = getelementptr inbounds i8, i8* %2, i64 8
  %16 = bitcast i8* %15 to i64*
  store i64 %10, i64* %16, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L5ADDSDI3VnWI8vec128_tE2VnIS2_ES5_EEP6MemoryS7_R5StateT_T0_T1_(%struct.Memory* readnone returned, %struct.State* nocapture readnone dereferenceable(3376), i8* nocapture, i8* nocapture readonly, i8* nocapture readonly)  {
  %6 = bitcast i8* %3 to double*
  %7 = load double, double* %6, align 1
  %8 = getelementptr inbounds i8, i8* %3, i64 8
  %9 = bitcast i8* %8 to i64*
  %10 = load i64, i64* %9, align 1
  %11 = bitcast i8* %4 to double*
  %12 = load double, double* %11, align 1
  %13 = fadd double %7, %12
  %14 = bitcast i8* %2 to double*
  store double %13, double* %14, align 1
  %15 = getelementptr inbounds i8, i8* %2, i64 8
  %16 = bitcast i8* %15 to i64*
  store i64 %10, i64* %16, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3SUBI3MnWIhE2MnIhE2InIhEEEP6MemoryS8_R5StateT_T0_T1_(%struct.Memory*, %struct.State* nocapture dereferenceable(3376), i64, i64, i64)  {
  %6 = inttoptr i64 %3 to i8*
  %7 = load i8, i8* %6
  %8 = trunc i64 %4 to i8
  %9 = sub i8 %7, %8
  %10 = inttoptr i64 %2 to i8*
  store i8 %9, i8* %10
  %11 = icmp ult i8 %7, %8
  %12 = zext i1 %11 to i8
  %13 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  store i8 %12, i8* %13, align 1
  %14 = zext i8 %9 to i32
  %15 = tail call i32 @llvm.ctpop.i32(i32 %14) 
  %16 = trunc i32 %15 to i8
  %17 = and i8 %16, 1
  %18 = xor i8 %17, 1
  %19 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 %18, i8* %19, align 1
  %20 = xor i8 %7, %8
  %21 = xor i8 %20, %9
  %22 = lshr i8 %21, 4
  %23 = and i8 %22, 1
  %24 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 %23, i8* %24, align 1
  %25 = icmp eq i8 %9, 0
  %26 = zext i1 %25 to i8
  %27 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  store i8 %26, i8* %27, align 1
  %28 = lshr i8 %9, 7
  %29 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 %28, i8* %29, align 1
  %30 = lshr i8 %7, 7
  %31 = lshr i8 %8, 7
  %32 = xor i8 %30, %31
  %33 = xor i8 %28, %30
  %34 = add nuw nsw i8 %33, %32
  %35 = icmp eq i8 %34, 2
  %36 = zext i1 %35 to i8
  %37 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 %36, i8* %37, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3SUBI3RnWIhE2RnIhE2InIhEEEP6MemoryS8_R5StateT_T0_T1_(%struct.Memory* readnone returned, %struct.State* nocapture dereferenceable(3376), i8* nocapture, i64, i64)  {
  %6 = trunc i64 %3 to i8
  %7 = trunc i64 %4 to i8
  %8 = sub i8 %6, %7
  store i8 %8, i8* %2, align 1
  %9 = icmp ult i8 %6, %7
  %10 = zext i1 %9 to i8
  %11 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  store i8 %10, i8* %11, align 1
  %12 = zext i8 %8 to i32
  %13 = tail call i32 @llvm.ctpop.i32(i32 %12) 
  %14 = trunc i32 %13 to i8
  %15 = and i8 %14, 1
  %16 = xor i8 %15, 1
  %17 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 %16, i8* %17, align 1
  %18 = xor i64 %4, %3
  %19 = trunc i64 %18 to i8
  %20 = xor i8 %19, %8
  %21 = lshr i8 %20, 4
  %22 = and i8 %21, 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 %22, i8* %23, align 1
  %24 = icmp eq i8 %8, 0
  %25 = zext i1 %24 to i8
  %26 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  store i8 %25, i8* %26, align 1
  %27 = lshr i8 %8, 7
  %28 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 %27, i8* %28, align 1
  %29 = lshr i8 %6, 7
  %30 = lshr i8 %7, 7
  %31 = xor i8 %30, %29
  %32 = xor i8 %27, %29
  %33 = add nuw nsw i8 %32, %31
  %34 = icmp eq i8 %33, 2
  %35 = zext i1 %34 to i8
  %36 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 %35, i8* %36, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3SUBI3MnWItE2MnItE2InItEEEP6MemoryS8_R5StateT_T0_T1_(%struct.Memory*, %struct.State* nocapture dereferenceable(3376), i64, i64, i64)  {
  %6 = inttoptr i64 %3 to i16*
  %7 = load i16, i16* %6
  %8 = trunc i64 %4 to i16
  %9 = sub i16 %7, %8
  %10 = inttoptr i64 %2 to i16*
  store i16 %9, i16* %10
  %11 = icmp ult i16 %7, %8
  %12 = zext i1 %11 to i8
  %13 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  store i8 %12, i8* %13, align 1
  %14 = and i16 %9, 255
  %15 = zext i16 %14 to i32
  %16 = tail call i32 @llvm.ctpop.i32(i32 %15) 
  %17 = trunc i32 %16 to i8
  %18 = and i8 %17, 1
  %19 = xor i8 %18, 1
  %20 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 %19, i8* %20, align 1
  %21 = xor i16 %7, %8
  %22 = xor i16 %21, %9
  %23 = lshr i16 %22, 4
  %24 = trunc i16 %23 to i8
  %25 = and i8 %24, 1
  %26 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 %25, i8* %26, align 1
  %27 = icmp eq i16 %9, 0
  %28 = zext i1 %27 to i8
  %29 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  store i8 %28, i8* %29, align 1
  %30 = lshr i16 %9, 15
  %31 = trunc i16 %30 to i8
  %32 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 %31, i8* %32, align 1
  %33 = lshr i16 %7, 15
  %34 = lshr i16 %8, 15
  %35 = xor i16 %33, %34
  %36 = xor i16 %30, %33
  %37 = add nuw nsw i16 %36, %35
  %38 = icmp eq i16 %37, 2
  %39 = zext i1 %38 to i8
  %40 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 %39, i8* %40, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3SUBI3MnWIjE2MnIjE2InIjEEEP6MemoryS8_R5StateT_T0_T1_(%struct.Memory*, %struct.State* nocapture dereferenceable(3376), i64, i64, i64)  {
  %6 = inttoptr i64 %3 to i32*
  %7 = load i32, i32* %6
  %8 = trunc i64 %4 to i32
  %9 = sub i32 %7, %8
  %10 = inttoptr i64 %2 to i32*
  store i32 %9, i32* %10
  %11 = icmp ult i32 %7, %8
  %12 = zext i1 %11 to i8
  %13 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  store i8 %12, i8* %13, align 1
  %14 = and i32 %9, 255
  %15 = tail call i32 @llvm.ctpop.i32(i32 %14) 
  %16 = trunc i32 %15 to i8
  %17 = and i8 %16, 1
  %18 = xor i8 %17, 1
  %19 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 %18, i8* %19, align 1
  %20 = xor i32 %7, %8
  %21 = xor i32 %20, %9
  %22 = lshr i32 %21, 4
  %23 = trunc i32 %22 to i8
  %24 = and i8 %23, 1
  %25 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 %24, i8* %25, align 1
  %26 = icmp eq i32 %9, 0
  %27 = zext i1 %26 to i8
  %28 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  store i8 %27, i8* %28, align 1
  %29 = lshr i32 %9, 31
  %30 = trunc i32 %29 to i8
  %31 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 %30, i8* %31, align 1
  %32 = lshr i32 %7, 31
  %33 = lshr i32 %8, 31
  %34 = xor i32 %32, %33
  %35 = xor i32 %29, %32
  %36 = add nuw nsw i32 %35, %34
  %37 = icmp eq i32 %36, 2
  %38 = zext i1 %37 to i8
  %39 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 %38, i8* %39, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3SUBI3MnWImE2MnImE2InImEEEP6MemoryS8_R5StateT_T0_T1_(%struct.Memory*, %struct.State* nocapture dereferenceable(3376), i64, i64, i64)  {
  %6 = inttoptr i64 %3 to i64*
  %7 = load i64, i64* %6
  %8 = sub i64 %7, %4
  %9 = inttoptr i64 %2 to i64*
  store i64 %8, i64* %9
  %10 = icmp ult i64 %7, %4
  %11 = zext i1 %10 to i8
  %12 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  store i8 %11, i8* %12, align 1
  %13 = trunc i64 %8 to i32
  %14 = and i32 %13, 255
  %15 = tail call i32 @llvm.ctpop.i32(i32 %14) 
  %16 = trunc i32 %15 to i8
  %17 = and i8 %16, 1
  %18 = xor i8 %17, 1
  %19 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 %18, i8* %19, align 1
  %20 = xor i64 %7, %4
  %21 = xor i64 %20, %8
  %22 = lshr i64 %21, 4
  %23 = trunc i64 %22 to i8
  %24 = and i8 %23, 1
  %25 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 %24, i8* %25, align 1
  %26 = icmp eq i64 %8, 0
  %27 = zext i1 %26 to i8
  %28 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  store i8 %27, i8* %28, align 1
  %29 = lshr i64 %8, 63
  %30 = trunc i64 %29 to i8
  %31 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 %30, i8* %31, align 1
  %32 = lshr i64 %7, 63
  %33 = lshr i64 %4, 63
  %34 = xor i64 %32, %33
  %35 = xor i64 %29, %32
  %36 = add nuw nsw i64 %35, %34
  %37 = icmp eq i64 %36, 2
  %38 = zext i1 %37 to i8
  %39 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 %38, i8* %39, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3SUBI3RnWItE2RnItE2InItEEEP6MemoryS8_R5StateT_T0_T1_(%struct.Memory* readnone returned, %struct.State* nocapture dereferenceable(3376), i16* nocapture, i64, i64)  {
  %6 = trunc i64 %3 to i16
  %7 = trunc i64 %4 to i16
  %8 = sub i16 %6, %7
  store i16 %8, i16* %2, align 2
  %9 = icmp ult i16 %6, %7
  %10 = zext i1 %9 to i8
  %11 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  store i8 %10, i8* %11, align 1
  %12 = and i16 %8, 255
  %13 = zext i16 %12 to i32
  %14 = tail call i32 @llvm.ctpop.i32(i32 %13) 
  %15 = trunc i32 %14 to i8
  %16 = and i8 %15, 1
  %17 = xor i8 %16, 1
  %18 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 %17, i8* %18, align 1
  %19 = xor i64 %4, %3
  %20 = trunc i64 %19 to i16
  %21 = xor i16 %20, %8
  %22 = lshr i16 %21, 4
  %23 = trunc i16 %22 to i8
  %24 = and i8 %23, 1
  %25 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 %24, i8* %25, align 1
  %26 = icmp eq i16 %8, 0
  %27 = zext i1 %26 to i8
  %28 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  store i8 %27, i8* %28, align 1
  %29 = lshr i16 %8, 15
  %30 = trunc i16 %29 to i8
  %31 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 %30, i8* %31, align 1
  %32 = lshr i16 %6, 15
  %33 = lshr i16 %7, 15
  %34 = xor i16 %33, %32
  %35 = xor i16 %29, %32
  %36 = add nuw nsw i16 %35, %34
  %37 = icmp eq i16 %36, 2
  %38 = zext i1 %37 to i8
  %39 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 %38, i8* %39, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3SUBI3RnWImE2RnIjE2InIjEEEP6MemoryS8_R5StateT_T0_T1_(%struct.Memory* readnone returned, %struct.State* nocapture dereferenceable(3376), i64* nocapture, i64, i64)  {
  %6 = trunc i64 %3 to i32
  %7 = trunc i64 %4 to i32
  %8 = sub i32 %6, %7
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %2, align 8
  %10 = icmp ult i32 %6, %7
  %11 = zext i1 %10 to i8
  %12 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  store i8 %11, i8* %12, align 1
  %13 = and i32 %8, 255
  %14 = tail call i32 @llvm.ctpop.i32(i32 %13) 
  %15 = trunc i32 %14 to i8
  %16 = and i8 %15, 1
  %17 = xor i8 %16, 1
  %18 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 %17, i8* %18, align 1
  %19 = xor i64 %4, %3
  %20 = trunc i64 %19 to i32
  %21 = xor i32 %20, %8
  %22 = lshr i32 %21, 4
  %23 = trunc i32 %22 to i8
  %24 = and i8 %23, 1
  %25 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 %24, i8* %25, align 1
  %26 = icmp eq i32 %8, 0
  %27 = zext i1 %26 to i8
  %28 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  store i8 %27, i8* %28, align 1
  %29 = lshr i32 %8, 31
  %30 = trunc i32 %29 to i8
  %31 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 %30, i8* %31, align 1
  %32 = lshr i32 %6, 31
  %33 = lshr i32 %7, 31
  %34 = xor i32 %33, %32
  %35 = xor i32 %29, %32
  %36 = add nuw nsw i32 %35, %34
  %37 = icmp eq i32 %36, 2
  %38 = zext i1 %37 to i8
  %39 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 %38, i8* %39, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3SUBI3RnWImE2RnImE2InImEEEP6MemoryS8_R5StateT_T0_T1_(%struct.Memory* readnone returned, %struct.State* nocapture dereferenceable(3376), i64* nocapture, i64, i64)  {
  %6 = sub i64 %3, %4
  store i64 %6, i64* %2, align 8
  %7 = icmp ult i64 %3, %4
  %8 = zext i1 %7 to i8
  %9 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  store i8 %8, i8* %9, align 1
  %10 = trunc i64 %6 to i32
  %11 = and i32 %10, 255
  %12 = tail call i32 @llvm.ctpop.i32(i32 %11) 
  %13 = trunc i32 %12 to i8
  %14 = and i8 %13, 1
  %15 = xor i8 %14, 1
  %16 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 %15, i8* %16, align 1
  %17 = xor i64 %4, %3
  %18 = xor i64 %17, %6
  %19 = lshr i64 %18, 4
  %20 = trunc i64 %19 to i8
  %21 = and i8 %20, 1
  %22 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 %21, i8* %22, align 1
  %23 = icmp eq i64 %6, 0
  %24 = zext i1 %23 to i8
  %25 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  store i8 %24, i8* %25, align 1
  %26 = lshr i64 %6, 63
  %27 = trunc i64 %26 to i8
  %28 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 %27, i8* %28, align 1
  %29 = lshr i64 %3, 63
  %30 = lshr i64 %4, 63
  %31 = xor i64 %30, %29
  %32 = xor i64 %26, %29
  %33 = add nuw nsw i64 %32, %31
  %34 = icmp eq i64 %33, 2
  %35 = zext i1 %34 to i8
  %36 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 %35, i8* %36, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3SUBI3RnWIhE2RnIhES4_EEP6MemoryS6_R5StateT_T0_T1_(%struct.Memory* readnone returned, %struct.State* nocapture dereferenceable(3376), i8* nocapture, i64, i64)  {
  %6 = trunc i64 %3 to i8
  %7 = trunc i64 %4 to i8
  %8 = sub i8 %6, %7
  store i8 %8, i8* %2, align 1
  %9 = icmp ult i8 %6, %7
  %10 = zext i1 %9 to i8
  %11 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  store i8 %10, i8* %11, align 1
  %12 = zext i8 %8 to i32
  %13 = tail call i32 @llvm.ctpop.i32(i32 %12) 
  %14 = trunc i32 %13 to i8
  %15 = and i8 %14, 1
  %16 = xor i8 %15, 1
  %17 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 %16, i8* %17, align 1
  %18 = xor i64 %4, %3
  %19 = trunc i64 %18 to i8
  %20 = xor i8 %19, %8
  %21 = lshr i8 %20, 4
  %22 = and i8 %21, 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 %22, i8* %23, align 1
  %24 = icmp eq i8 %8, 0
  %25 = zext i1 %24 to i8
  %26 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  store i8 %25, i8* %26, align 1
  %27 = lshr i8 %8, 7
  %28 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 %27, i8* %28, align 1
  %29 = lshr i8 %6, 7
  %30 = lshr i8 %7, 7
  %31 = xor i8 %30, %29
  %32 = xor i8 %27, %29
  %33 = add nuw nsw i8 %32, %31
  %34 = icmp eq i8 %33, 2
  %35 = zext i1 %34 to i8
  %36 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 %35, i8* %36, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3SUBI3MnWIhE2MnIhE2RnIhEEEP6MemoryS8_R5StateT_T0_T1_(%struct.Memory*, %struct.State* nocapture dereferenceable(3376), i64, i64, i64)  {
  %6 = inttoptr i64 %3 to i8*
  %7 = load i8, i8* %6
  %8 = trunc i64 %4 to i8
  %9 = sub i8 %7, %8
  %10 = inttoptr i64 %2 to i8*
  store i8 %9, i8* %10
  %11 = icmp ult i8 %7, %8
  %12 = zext i1 %11 to i8
  %13 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  store i8 %12, i8* %13, align 1
  %14 = zext i8 %9 to i32
  %15 = tail call i32 @llvm.ctpop.i32(i32 %14) 
  %16 = trunc i32 %15 to i8
  %17 = and i8 %16, 1
  %18 = xor i8 %17, 1
  %19 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 %18, i8* %19, align 1
  %20 = xor i8 %7, %8
  %21 = xor i8 %20, %9
  %22 = lshr i8 %21, 4
  %23 = and i8 %22, 1
  %24 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 %23, i8* %24, align 1
  %25 = icmp eq i8 %9, 0
  %26 = zext i1 %25 to i8
  %27 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  store i8 %26, i8* %27, align 1
  %28 = lshr i8 %9, 7
  %29 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 %28, i8* %29, align 1
  %30 = lshr i8 %7, 7
  %31 = lshr i8 %8, 7
  %32 = xor i8 %30, %31
  %33 = xor i8 %28, %30
  %34 = add nuw nsw i8 %33, %32
  %35 = icmp eq i8 %34, 2
  %36 = zext i1 %35 to i8
  %37 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 %36, i8* %37, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3SUBI3MnWItE2MnItE2RnItEEEP6MemoryS8_R5StateT_T0_T1_(%struct.Memory*, %struct.State* nocapture dereferenceable(3376), i64, i64, i64)  {
  %6 = inttoptr i64 %3 to i16*
  %7 = load i16, i16* %6
  %8 = trunc i64 %4 to i16
  %9 = sub i16 %7, %8
  %10 = inttoptr i64 %2 to i16*
  store i16 %9, i16* %10
  %11 = icmp ult i16 %7, %8
  %12 = zext i1 %11 to i8
  %13 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  store i8 %12, i8* %13, align 1
  %14 = and i16 %9, 255
  %15 = zext i16 %14 to i32
  %16 = tail call i32 @llvm.ctpop.i32(i32 %15) 
  %17 = trunc i32 %16 to i8
  %18 = and i8 %17, 1
  %19 = xor i8 %18, 1
  %20 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 %19, i8* %20, align 1
  %21 = xor i16 %7, %8
  %22 = xor i16 %21, %9
  %23 = lshr i16 %22, 4
  %24 = trunc i16 %23 to i8
  %25 = and i8 %24, 1
  %26 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 %25, i8* %26, align 1
  %27 = icmp eq i16 %9, 0
  %28 = zext i1 %27 to i8
  %29 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  store i8 %28, i8* %29, align 1
  %30 = lshr i16 %9, 15
  %31 = trunc i16 %30 to i8
  %32 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 %31, i8* %32, align 1
  %33 = lshr i16 %7, 15
  %34 = lshr i16 %8, 15
  %35 = xor i16 %33, %34
  %36 = xor i16 %30, %33
  %37 = add nuw nsw i16 %36, %35
  %38 = icmp eq i16 %37, 2
  %39 = zext i1 %38 to i8
  %40 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 %39, i8* %40, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3SUBI3MnWIjE2MnIjE2RnIjEEEP6MemoryS8_R5StateT_T0_T1_(%struct.Memory*, %struct.State* nocapture dereferenceable(3376), i64, i64, i64)  {
  %6 = inttoptr i64 %3 to i32*
  %7 = load i32, i32* %6
  %8 = trunc i64 %4 to i32
  %9 = sub i32 %7, %8
  %10 = inttoptr i64 %2 to i32*
  store i32 %9, i32* %10
  %11 = icmp ult i32 %7, %8
  %12 = zext i1 %11 to i8
  %13 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  store i8 %12, i8* %13, align 1
  %14 = and i32 %9, 255
  %15 = tail call i32 @llvm.ctpop.i32(i32 %14) 
  %16 = trunc i32 %15 to i8
  %17 = and i8 %16, 1
  %18 = xor i8 %17, 1
  %19 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 %18, i8* %19, align 1
  %20 = xor i32 %7, %8
  %21 = xor i32 %20, %9
  %22 = lshr i32 %21, 4
  %23 = trunc i32 %22 to i8
  %24 = and i8 %23, 1
  %25 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 %24, i8* %25, align 1
  %26 = icmp eq i32 %9, 0
  %27 = zext i1 %26 to i8
  %28 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  store i8 %27, i8* %28, align 1
  %29 = lshr i32 %9, 31
  %30 = trunc i32 %29 to i8
  %31 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 %30, i8* %31, align 1
  %32 = lshr i32 %7, 31
  %33 = lshr i32 %8, 31
  %34 = xor i32 %32, %33
  %35 = xor i32 %29, %32
  %36 = add nuw nsw i32 %35, %34
  %37 = icmp eq i32 %36, 2
  %38 = zext i1 %37 to i8
  %39 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 %38, i8* %39, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3SUBI3MnWImE2MnImE2RnImEEEP6MemoryS8_R5StateT_T0_T1_(%struct.Memory*, %struct.State* nocapture dereferenceable(3376), i64, i64, i64)  {
  %6 = inttoptr i64 %3 to i64*
  %7 = load i64, i64* %6
  %8 = sub i64 %7, %4
  %9 = inttoptr i64 %2 to i64*
  store i64 %8, i64* %9
  %10 = icmp ult i64 %7, %4
  %11 = zext i1 %10 to i8
  %12 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  store i8 %11, i8* %12, align 1
  %13 = trunc i64 %8 to i32
  %14 = and i32 %13, 255
  %15 = tail call i32 @llvm.ctpop.i32(i32 %14) 
  %16 = trunc i32 %15 to i8
  %17 = and i8 %16, 1
  %18 = xor i8 %17, 1
  %19 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 %18, i8* %19, align 1
  %20 = xor i64 %7, %4
  %21 = xor i64 %20, %8
  %22 = lshr i64 %21, 4
  %23 = trunc i64 %22 to i8
  %24 = and i8 %23, 1
  %25 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 %24, i8* %25, align 1
  %26 = icmp eq i64 %8, 0
  %27 = zext i1 %26 to i8
  %28 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  store i8 %27, i8* %28, align 1
  %29 = lshr i64 %8, 63
  %30 = trunc i64 %29 to i8
  %31 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 %30, i8* %31, align 1
  %32 = lshr i64 %7, 63
  %33 = lshr i64 %4, 63
  %34 = xor i64 %32, %33
  %35 = xor i64 %29, %32
  %36 = add nuw nsw i64 %35, %34
  %37 = icmp eq i64 %36, 2
  %38 = zext i1 %37 to i8
  %39 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 %38, i8* %39, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3SUBI3RnWItE2RnItES4_EEP6MemoryS6_R5StateT_T0_T1_(%struct.Memory* readnone returned, %struct.State* nocapture dereferenceable(3376), i16* nocapture, i64, i64)  {
  %6 = trunc i64 %3 to i16
  %7 = trunc i64 %4 to i16
  %8 = sub i16 %6, %7
  store i16 %8, i16* %2, align 2
  %9 = icmp ult i16 %6, %7
  %10 = zext i1 %9 to i8
  %11 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  store i8 %10, i8* %11, align 1
  %12 = and i16 %8, 255
  %13 = zext i16 %12 to i32
  %14 = tail call i32 @llvm.ctpop.i32(i32 %13) 
  %15 = trunc i32 %14 to i8
  %16 = and i8 %15, 1
  %17 = xor i8 %16, 1
  %18 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 %17, i8* %18, align 1
  %19 = xor i64 %4, %3
  %20 = trunc i64 %19 to i16
  %21 = xor i16 %20, %8
  %22 = lshr i16 %21, 4
  %23 = trunc i16 %22 to i8
  %24 = and i8 %23, 1
  %25 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 %24, i8* %25, align 1
  %26 = icmp eq i16 %8, 0
  %27 = zext i1 %26 to i8
  %28 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  store i8 %27, i8* %28, align 1
  %29 = lshr i16 %8, 15
  %30 = trunc i16 %29 to i8
  %31 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 %30, i8* %31, align 1
  %32 = lshr i16 %6, 15
  %33 = lshr i16 %7, 15
  %34 = xor i16 %33, %32
  %35 = xor i16 %29, %32
  %36 = add nuw nsw i16 %35, %34
  %37 = icmp eq i16 %36, 2
  %38 = zext i1 %37 to i8
  %39 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 %38, i8* %39, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3SUBI3RnWImE2RnIjES4_EEP6MemoryS6_R5StateT_T0_T1_(%struct.Memory* readnone returned, %struct.State* nocapture dereferenceable(3376), i64* nocapture, i64, i64)  {
  %6 = trunc i64 %3 to i32
  %7 = trunc i64 %4 to i32
  %8 = sub i32 %6, %7
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %2, align 8
  %10 = icmp ult i32 %6, %7
  %11 = zext i1 %10 to i8
  %12 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  store i8 %11, i8* %12, align 1
  %13 = and i32 %8, 255
  %14 = tail call i32 @llvm.ctpop.i32(i32 %13) 
  %15 = trunc i32 %14 to i8
  %16 = and i8 %15, 1
  %17 = xor i8 %16, 1
  %18 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 %17, i8* %18, align 1
  %19 = xor i64 %4, %3
  %20 = trunc i64 %19 to i32
  %21 = xor i32 %20, %8
  %22 = lshr i32 %21, 4
  %23 = trunc i32 %22 to i8
  %24 = and i8 %23, 1
  %25 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 %24, i8* %25, align 1
  %26 = icmp eq i32 %8, 0
  %27 = zext i1 %26 to i8
  %28 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  store i8 %27, i8* %28, align 1
  %29 = lshr i32 %8, 31
  %30 = trunc i32 %29 to i8
  %31 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 %30, i8* %31, align 1
  %32 = lshr i32 %6, 31
  %33 = lshr i32 %7, 31
  %34 = xor i32 %33, %32
  %35 = xor i32 %29, %32
  %36 = add nuw nsw i32 %35, %34
  %37 = icmp eq i32 %36, 2
  %38 = zext i1 %37 to i8
  %39 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 %38, i8* %39, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3SUBI3RnWImE2RnImES4_EEP6MemoryS6_R5StateT_T0_T1_(%struct.Memory* readnone returned, %struct.State* nocapture dereferenceable(3376), i64* nocapture, i64, i64)  {
  %6 = sub i64 %3, %4
  store i64 %6, i64* %2, align 8
  %7 = icmp ult i64 %3, %4
  %8 = zext i1 %7 to i8
  %9 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  store i8 %8, i8* %9, align 1
  %10 = trunc i64 %6 to i32
  %11 = and i32 %10, 255
  %12 = tail call i32 @llvm.ctpop.i32(i32 %11) 
  %13 = trunc i32 %12 to i8
  %14 = and i8 %13, 1
  %15 = xor i8 %14, 1
  %16 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 %15, i8* %16, align 1
  %17 = xor i64 %4, %3
  %18 = xor i64 %17, %6
  %19 = lshr i64 %18, 4
  %20 = trunc i64 %19 to i8
  %21 = and i8 %20, 1
  %22 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 %21, i8* %22, align 1
  %23 = icmp eq i64 %6, 0
  %24 = zext i1 %23 to i8
  %25 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  store i8 %24, i8* %25, align 1
  %26 = lshr i64 %6, 63
  %27 = trunc i64 %26 to i8
  %28 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 %27, i8* %28, align 1
  %29 = lshr i64 %3, 63
  %30 = lshr i64 %4, 63
  %31 = xor i64 %30, %29
  %32 = xor i64 %26, %29
  %33 = add nuw nsw i64 %32, %31
  %34 = icmp eq i64 %33, 2
  %35 = zext i1 %34 to i8
  %36 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 %35, i8* %36, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3SUBI3RnWIhE2RnIhE2MnIhEEEP6MemoryS8_R5StateT_T0_T1_(%struct.Memory*, %struct.State* nocapture dereferenceable(3376), i8* nocapture, i64, i64)  {
  %6 = trunc i64 %3 to i8
  %7 = inttoptr i64 %4 to i8*
  %8 = load i8, i8* %7
  %9 = sub i8 %6, %8
  store i8 %9, i8* %2, align 1
  %10 = icmp ult i8 %6, %8
  %11 = zext i1 %10 to i8
  %12 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  store i8 %11, i8* %12, align 1
  %13 = zext i8 %9 to i32
  %14 = tail call i32 @llvm.ctpop.i32(i32 %13) 
  %15 = trunc i32 %14 to i8
  %16 = and i8 %15, 1
  %17 = xor i8 %16, 1
  %18 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 %17, i8* %18, align 1
  %19 = xor i8 %8, %6
  %20 = xor i8 %19, %9
  %21 = lshr i8 %20, 4
  %22 = and i8 %21, 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 %22, i8* %23, align 1
  %24 = icmp eq i8 %9, 0
  %25 = zext i1 %24 to i8
  %26 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  store i8 %25, i8* %26, align 1
  %27 = lshr i8 %9, 7
  %28 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 %27, i8* %28, align 1
  %29 = lshr i8 %6, 7
  %30 = lshr i8 %8, 7
  %31 = xor i8 %30, %29
  %32 = xor i8 %27, %29
  %33 = add nuw nsw i8 %32, %31
  %34 = icmp eq i8 %33, 2
  %35 = zext i1 %34 to i8
  %36 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 %35, i8* %36, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3SUBI3RnWItE2RnItE2MnItEEEP6MemoryS8_R5StateT_T0_T1_(%struct.Memory*, %struct.State* nocapture dereferenceable(3376), i16* nocapture, i64, i64)  {
  %6 = trunc i64 %3 to i16
  %7 = inttoptr i64 %4 to i16*
  %8 = load i16, i16* %7
  %9 = sub i16 %6, %8
  store i16 %9, i16* %2, align 2
  %10 = icmp ult i16 %6, %8
  %11 = zext i1 %10 to i8
  %12 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  store i8 %11, i8* %12, align 1
  %13 = and i16 %9, 255
  %14 = zext i16 %13 to i32
  %15 = tail call i32 @llvm.ctpop.i32(i32 %14) 
  %16 = trunc i32 %15 to i8
  %17 = and i8 %16, 1
  %18 = xor i8 %17, 1
  %19 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 %18, i8* %19, align 1
  %20 = xor i16 %8, %6
  %21 = xor i16 %20, %9
  %22 = lshr i16 %21, 4
  %23 = trunc i16 %22 to i8
  %24 = and i8 %23, 1
  %25 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 %24, i8* %25, align 1
  %26 = icmp eq i16 %9, 0
  %27 = zext i1 %26 to i8
  %28 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  store i8 %27, i8* %28, align 1
  %29 = lshr i16 %9, 15
  %30 = trunc i16 %29 to i8
  %31 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 %30, i8* %31, align 1
  %32 = lshr i16 %6, 15
  %33 = lshr i16 %8, 15
  %34 = xor i16 %33, %32
  %35 = xor i16 %29, %32
  %36 = add nuw nsw i16 %35, %34
  %37 = icmp eq i16 %36, 2
  %38 = zext i1 %37 to i8
  %39 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 %38, i8* %39, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3SUBI3RnWImE2RnIjE2MnIjEEEP6MemoryS8_R5StateT_T0_T1_(%struct.Memory*, %struct.State* nocapture dereferenceable(3376), i64* nocapture, i64, i64)  {
  %6 = trunc i64 %3 to i32
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7
  %9 = sub i32 %6, %8
  %10 = zext i32 %9 to i64
  store i64 %10, i64* %2, align 8
  %11 = icmp ult i32 %6, %8
  %12 = zext i1 %11 to i8
  %13 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  store i8 %12, i8* %13, align 1
  %14 = and i32 %9, 255
  %15 = tail call i32 @llvm.ctpop.i32(i32 %14) 
  %16 = trunc i32 %15 to i8
  %17 = and i8 %16, 1
  %18 = xor i8 %17, 1
  %19 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 %18, i8* %19, align 1
  %20 = xor i32 %8, %6
  %21 = xor i32 %20, %9
  %22 = lshr i32 %21, 4
  %23 = trunc i32 %22 to i8
  %24 = and i8 %23, 1
  %25 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 %24, i8* %25, align 1
  %26 = icmp eq i32 %9, 0
  %27 = zext i1 %26 to i8
  %28 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  store i8 %27, i8* %28, align 1
  %29 = lshr i32 %9, 31
  %30 = trunc i32 %29 to i8
  %31 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 %30, i8* %31, align 1
  %32 = lshr i32 %6, 31
  %33 = lshr i32 %8, 31
  %34 = xor i32 %33, %32
  %35 = xor i32 %29, %32
  %36 = add nuw nsw i32 %35, %34
  %37 = icmp eq i32 %36, 2
  %38 = zext i1 %37 to i8
  %39 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 %38, i8* %39, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3SUBI3RnWImE2RnImE2MnImEEEP6MemoryS8_R5StateT_T0_T1_(%struct.Memory*, %struct.State* nocapture dereferenceable(3376), i64* nocapture, i64, i64)  {
  %6 = inttoptr i64 %4 to i64*
  %7 = load i64, i64* %6
  %8 = sub i64 %3, %7
  store i64 %8, i64* %2, align 8
  %9 = icmp ugt i64 %7, %3
  %10 = zext i1 %9 to i8
  %11 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  store i8 %10, i8* %11, align 1
  %12 = trunc i64 %8 to i32
  %13 = and i32 %12, 255
  %14 = tail call i32 @llvm.ctpop.i32(i32 %13) 
  %15 = trunc i32 %14 to i8
  %16 = and i8 %15, 1
  %17 = xor i8 %16, 1
  %18 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 %17, i8* %18, align 1
  %19 = xor i64 %7, %3
  %20 = xor i64 %19, %8
  %21 = lshr i64 %20, 4
  %22 = trunc i64 %21 to i8
  %23 = and i8 %22, 1
  %24 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 %23, i8* %24, align 1
  %25 = icmp eq i64 %8, 0
  %26 = zext i1 %25 to i8
  %27 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  store i8 %26, i8* %27, align 1
  %28 = lshr i64 %8, 63
  %29 = trunc i64 %28 to i8
  %30 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 %29, i8* %30, align 1
  %31 = lshr i64 %3, 63
  %32 = lshr i64 %7, 63
  %33 = xor i64 %32, %31
  %34 = xor i64 %28, %31
  %35 = add nuw nsw i64 %34, %33
  %36 = icmp eq i64 %35, 2
  %37 = zext i1 %36 to i8
  %38 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 %37, i8* %38, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L5SUBPSI3VnWI8vec128_tE2VnIS2_E3MVnIS2_EEEP6MemoryS9_R5StateT_T0_T1_(%struct.Memory* returned, %struct.State* nocapture readnone dereferenceable(3376), i8* nocapture, i8* nocapture readonly, i64)  {
  %6 = bitcast i8* %3 to <2 x float>*
  %7 = load <2 x float>, <2 x float>* %6, align 1
  %8 = getelementptr inbounds i8, i8* %3, i64 8
  %9 = bitcast i8* %8 to <2 x float>*
  %10 = load <2 x float>, <2 x float>* %9, align 1
  %11 = inttoptr i64 %4 to float*
  %12 = load float, float* %11
  %13 = add i64 %4, 4
  %14 = inttoptr i64 %13 to float*
  %15 = load float, float* %14
  %16 = add i64 %4, 8
  %17 = inttoptr i64 %16 to float*
  %18 = load float, float* %17
  %19 = add i64 %4, 12
  %20 = inttoptr i64 %19 to float*
  %21 = load float, float* %20
  %22 = shufflevector <2 x float> %7, <2 x float> %10, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %23 = insertelement <4 x float> undef, float %12, i32 0
  %24 = insertelement <4 x float> %23, float %15, i32 1
  %25 = insertelement <4 x float> %24, float %18, i32 2
  %26 = insertelement <4 x float> %25, float %21, i32 3
  %27 = fsub <4 x float> %22, %26
  %28 = bitcast i8* %2 to <4 x float>*
  store <4 x float> %27, <4 x float>* %28, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L5SUBPSI3VnWI8vec128_tE2VnIS2_ES5_EEP6MemoryS7_R5StateT_T0_T1_(%struct.Memory* readnone returned, %struct.State* nocapture readnone dereferenceable(3376), i8* nocapture, i8* nocapture readonly, i8* nocapture readonly)  {
  %6 = bitcast i8* %3 to <2 x float>*
  %7 = load <2 x float>, <2 x float>* %6, align 1
  %8 = getelementptr inbounds i8, i8* %3, i64 8
  %9 = bitcast i8* %8 to <2 x float>*
  %10 = load <2 x float>, <2 x float>* %9, align 1
  %11 = bitcast i8* %4 to <2 x float>*
  %12 = load <2 x float>, <2 x float>* %11, align 1
  %13 = getelementptr inbounds i8, i8* %4, i64 8
  %14 = bitcast i8* %13 to <2 x float>*
  %15 = load <2 x float>, <2 x float>* %14, align 1
  %16 = shufflevector <2 x float> %7, <2 x float> %10, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %17 = shufflevector <2 x float> %12, <2 x float> %15, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %18 = fsub <4 x float> %16, %17
  %19 = bitcast i8* %2 to <4 x float>*
  store <4 x float> %18, <4 x float>* %19, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L5SUBPDI3VnWI8vec128_tE2VnIS2_E3MVnIS2_EEEP6MemoryS9_R5StateT_T0_T1_(%struct.Memory* returned, %struct.State* nocapture readnone dereferenceable(3376), i8* nocapture, i8* nocapture readonly, i64)  {
  %6 = bitcast i8* %3 to <2 x double>*
  %7 = load <2 x double>, <2 x double>* %6, align 1
  %8 = inttoptr i64 %4 to double*
  %9 = load double, double* %8
  %10 = add i64 %4, 8
  %11 = inttoptr i64 %10 to double*
  %12 = load double, double* %11
  %13 = insertelement <2 x double> undef, double %9, i32 0
  %14 = insertelement <2 x double> %13, double %12, i32 1
  %15 = fsub <2 x double> %7, %14
  %16 = bitcast i8* %2 to <2 x double>*
  store <2 x double> %15, <2 x double>* %16, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L5SUBPDI3VnWI8vec128_tE2VnIS2_ES5_EEP6MemoryS7_R5StateT_T0_T1_(%struct.Memory* readnone returned, %struct.State* nocapture readnone dereferenceable(3376), i8* nocapture, i8* nocapture readonly, i8* nocapture readonly)  {
  %6 = bitcast i8* %3 to <2 x double>*
  %7 = load <2 x double>, <2 x double>* %6, align 1
  %8 = bitcast i8* %4 to <2 x double>*
  %9 = load <2 x double>, <2 x double>* %8, align 1
  %10 = fsub <2 x double> %7, %9
  %11 = bitcast i8* %2 to <2 x double>*
  store <2 x double> %10, <2 x double>* %11, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L5SUBSSI3VnWI8vec128_tE2VnIS2_E3MVnI7vec32_tEEEP6MemorySA_R5StateT_T0_T1_(%struct.Memory* returned, %struct.State* nocapture readnone dereferenceable(3376), i8* nocapture, i8* nocapture readonly, i64)  {
  %6 = bitcast i8* %3 to <2 x float>*
  %7 = load <2 x float>, <2 x float>* %6, align 1
  %8 = getelementptr inbounds i8, i8* %3, i64 8
  %9 = bitcast i8* %8 to <2 x i32>*
  %10 = load <2 x i32>, <2 x i32>* %9, align 1
  %11 = inttoptr i64 %4 to float*
  %12 = load float, float* %11
  %13 = extractelement <2 x float> %7, i32 0
  %14 = fsub float %13, %12
  %15 = bitcast i8* %2 to float*
  store float %14, float* %15, align 1
  %16 = bitcast <2 x float> %7 to <2 x i32>
  %17 = extractelement <2 x i32> %16, i32 1
  %18 = getelementptr inbounds i8, i8* %2, i64 4
  %19 = bitcast i8* %18 to i32*
  store i32 %17, i32* %19, align 1
  %20 = extractelement <2 x i32> %10, i32 0
  %21 = getelementptr inbounds i8, i8* %2, i64 8
  %22 = bitcast i8* %21 to i32*
  store i32 %20, i32* %22, align 1
  %23 = extractelement <2 x i32> %10, i32 1
  %24 = getelementptr inbounds i8, i8* %2, i64 12
  %25 = bitcast i8* %24 to i32*
  store i32 %23, i32* %25, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L5SUBSSI3VnWI8vec128_tE2VnIS2_ES5_EEP6MemoryS7_R5StateT_T0_T1_(%struct.Memory* readnone returned, %struct.State* nocapture readnone dereferenceable(3376), i8* nocapture, i8* nocapture readonly, i8* nocapture readonly)  {
  %6 = bitcast i8* %3 to <2 x float>*
  %7 = load <2 x float>, <2 x float>* %6, align 1
  %8 = getelementptr inbounds i8, i8* %3, i64 8
  %9 = bitcast i8* %8 to <2 x i32>*
  %10 = load <2 x i32>, <2 x i32>* %9, align 1
  %11 = bitcast i8* %4 to <2 x float>*
  %12 = load <2 x float>, <2 x float>* %11, align 1
  %13 = extractelement <2 x float> %7, i32 0
  %14 = extractelement <2 x float> %12, i32 0
  %15 = fsub float %13, %14
  %16 = bitcast i8* %2 to float*
  store float %15, float* %16, align 1
  %17 = bitcast <2 x float> %7 to <2 x i32>
  %18 = extractelement <2 x i32> %17, i32 1
  %19 = getelementptr inbounds i8, i8* %2, i64 4
  %20 = bitcast i8* %19 to i32*
  store i32 %18, i32* %20, align 1
  %21 = extractelement <2 x i32> %10, i32 0
  %22 = getelementptr inbounds i8, i8* %2, i64 8
  %23 = bitcast i8* %22 to i32*
  store i32 %21, i32* %23, align 1
  %24 = extractelement <2 x i32> %10, i32 1
  %25 = getelementptr inbounds i8, i8* %2, i64 12
  %26 = bitcast i8* %25 to i32*
  store i32 %24, i32* %26, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L5SUBSDI3VnWI8vec128_tE2VnIS2_E3MVnI7vec64_tEEEP6MemorySA_R5StateT_T0_T1_(%struct.Memory* returned, %struct.State* nocapture readnone dereferenceable(3376), i8* nocapture, i8* nocapture readonly, i64)  {
  %6 = bitcast i8* %3 to double*
  %7 = load double, double* %6, align 1
  %8 = getelementptr inbounds i8, i8* %3, i64 8
  %9 = bitcast i8* %8 to i64*
  %10 = load i64, i64* %9, align 1
  %11 = inttoptr i64 %4 to double*
  %12 = load double, double* %11
  %13 = fsub double %7, %12
  %14 = bitcast i8* %2 to double*
  store double %13, double* %14, align 1
  %15 = getelementptr inbounds i8, i8* %2, i64 8
  %16 = bitcast i8* %15 to i64*
  store i64 %10, i64* %16, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L5SUBSDI3VnWI8vec128_tE2VnIS2_ES5_EEP6MemoryS7_R5StateT_T0_T1_(%struct.Memory* readnone returned, %struct.State* nocapture readnone dereferenceable(3376), i8* nocapture, i8* nocapture readonly, i8* nocapture readonly)  {
  %6 = bitcast i8* %3 to double*
  %7 = load double, double* %6, align 1
  %8 = getelementptr inbounds i8, i8* %3, i64 8
  %9 = bitcast i8* %8 to i64*
  %10 = load i64, i64* %9, align 1
  %11 = bitcast i8* %4 to double*
  %12 = load double, double* %11, align 1
  %13 = fsub double %7, %12
  %14 = bitcast i8* %2 to double*
  store double %13, double* %14, align 1
  %15 = getelementptr inbounds i8, i8* %2, i64 8
  %16 = bitcast i8* %15 to i64*
  store i64 %10, i64* %16, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3CMPI2MnIhE2InIhEEEP6MemoryS6_R5StateT_T0_(%struct.Memory*, %struct.State* nocapture dereferenceable(3376), i64, i64)  {
  %5 = inttoptr i64 %2 to i8*
  %6 = load i8, i8* %5
  %7 = trunc i64 %3 to i8
  %8 = sub i8 %6, %7
  %9 = icmp ult i8 %6, %7
  %10 = zext i1 %9 to i8
  %11 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  store i8 %10, i8* %11, align 1
  %12 = zext i8 %8 to i32
  %13 = tail call i32 @llvm.ctpop.i32(i32 %12) 
  %14 = trunc i32 %13 to i8
  %15 = and i8 %14, 1
  %16 = xor i8 %15, 1
  %17 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 %16, i8* %17, align 1
  %18 = xor i8 %6, %7
  %19 = xor i8 %18, %8
  %20 = lshr i8 %19, 4
  %21 = and i8 %20, 1
  %22 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 %21, i8* %22, align 1
  %23 = icmp eq i8 %8, 0
  %24 = zext i1 %23 to i8
  %25 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  store i8 %24, i8* %25, align 1
  %26 = lshr i8 %8, 7
  %27 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 %26, i8* %27, align 1
  %28 = lshr i8 %6, 7
  %29 = lshr i8 %7, 7
  %30 = xor i8 %28, %29
  %31 = xor i8 %26, %28
  %32 = add nuw nsw i8 %31, %30
  %33 = icmp eq i8 %32, 2
  %34 = zext i1 %33 to i8
  %35 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 %34, i8* %35, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3CMPI2RnIhE2InIhEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* readnone returned, %struct.State* nocapture dereferenceable(3376), i64, i64)  {
  %5 = trunc i64 %2 to i8
  %6 = trunc i64 %3 to i8
  %7 = sub i8 %5, %6
  %8 = icmp ult i8 %5, %6
  %9 = zext i1 %8 to i8
  %10 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  store i8 %9, i8* %10, align 1
  %11 = zext i8 %7 to i32
  %12 = tail call i32 @llvm.ctpop.i32(i32 %11) 
  %13 = trunc i32 %12 to i8
  %14 = and i8 %13, 1
  %15 = xor i8 %14, 1
  %16 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 %15, i8* %16, align 1
  %17 = xor i64 %3, %2
  %18 = trunc i64 %17 to i8
  %19 = xor i8 %18, %7
  %20 = lshr i8 %19, 4
  %21 = and i8 %20, 1
  %22 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 %21, i8* %22, align 1
  %23 = icmp eq i8 %7, 0
  %24 = zext i1 %23 to i8
  %25 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  store i8 %24, i8* %25, align 1
  %26 = lshr i8 %7, 7
  %27 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 %26, i8* %27, align 1
  %28 = lshr i8 %5, 7
  %29 = lshr i8 %6, 7
  %30 = xor i8 %29, %28
  %31 = xor i8 %26, %28
  %32 = add nuw nsw i8 %31, %30
  %33 = icmp eq i8 %32, 2
  %34 = zext i1 %33 to i8
  %35 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 %34, i8* %35, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3CMPI2MnItE2InItEEEP6MemoryS6_R5StateT_T0_(%struct.Memory*, %struct.State* nocapture dereferenceable(3376), i64, i64)  {
  %5 = inttoptr i64 %2 to i16*
  %6 = load i16, i16* %5
  %7 = trunc i64 %3 to i16
  %8 = sub i16 %6, %7
  %9 = icmp ult i16 %6, %7
  %10 = zext i1 %9 to i8
  %11 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  store i8 %10, i8* %11, align 1
  %12 = and i16 %8, 255
  %13 = zext i16 %12 to i32
  %14 = tail call i32 @llvm.ctpop.i32(i32 %13) 
  %15 = trunc i32 %14 to i8
  %16 = and i8 %15, 1
  %17 = xor i8 %16, 1
  %18 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 %17, i8* %18, align 1
  %19 = xor i16 %6, %7
  %20 = xor i16 %19, %8
  %21 = lshr i16 %20, 4
  %22 = trunc i16 %21 to i8
  %23 = and i8 %22, 1
  %24 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 %23, i8* %24, align 1
  %25 = icmp eq i16 %8, 0
  %26 = zext i1 %25 to i8
  %27 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  store i8 %26, i8* %27, align 1
  %28 = lshr i16 %8, 15
  %29 = trunc i16 %28 to i8
  %30 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 %29, i8* %30, align 1
  %31 = lshr i16 %6, 15
  %32 = lshr i16 %7, 15
  %33 = xor i16 %31, %32
  %34 = xor i16 %28, %31
  %35 = add nuw nsw i16 %34, %33
  %36 = icmp eq i16 %35, 2
  %37 = zext i1 %36 to i8
  %38 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 %37, i8* %38, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3CMPI2MnIjE2InIjEEEP6MemoryS6_R5StateT_T0_(%struct.Memory*, %struct.State* nocapture dereferenceable(3376), i64, i64)  {
  %5 = inttoptr i64 %2 to i32*
  %6 = load i32, i32* %5
  %7 = trunc i64 %3 to i32
  %8 = sub i32 %6, %7
  %9 = icmp ult i32 %6, %7
  %10 = zext i1 %9 to i8
  %11 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  store i8 %10, i8* %11, align 1
  %12 = and i32 %8, 255
  %13 = tail call i32 @llvm.ctpop.i32(i32 %12) 
  %14 = trunc i32 %13 to i8
  %15 = and i8 %14, 1
  %16 = xor i8 %15, 1
  %17 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 %16, i8* %17, align 1
  %18 = xor i32 %6, %7
  %19 = xor i32 %18, %8
  %20 = lshr i32 %19, 4
  %21 = trunc i32 %20 to i8
  %22 = and i8 %21, 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 %22, i8* %23, align 1
  %24 = icmp eq i32 %8, 0
  %25 = zext i1 %24 to i8
  %26 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  store i8 %25, i8* %26, align 1
  %27 = lshr i32 %8, 31
  %28 = trunc i32 %27 to i8
  %29 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 %28, i8* %29, align 1
  %30 = lshr i32 %6, 31
  %31 = lshr i32 %7, 31
  %32 = xor i32 %30, %31
  %33 = xor i32 %27, %30
  %34 = add nuw nsw i32 %33, %32
  %35 = icmp eq i32 %34, 2
  %36 = zext i1 %35 to i8
  %37 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 %36, i8* %37, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3CMPI2MnImE2InImEEEP6MemoryS6_R5StateT_T0_(%struct.Memory*, %struct.State* nocapture dereferenceable(3376), i64, i64)  {
  %5 = inttoptr i64 %2 to i64*
  %6 = load i64, i64* %5
  %7 = sub i64 %6, %3
  %8 = icmp ult i64 %6, %3
  %9 = zext i1 %8 to i8
  %10 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  store i8 %9, i8* %10, align 1
  %11 = trunc i64 %7 to i32
  %12 = and i32 %11, 255
  %13 = tail call i32 @llvm.ctpop.i32(i32 %12) 
  %14 = trunc i32 %13 to i8
  %15 = and i8 %14, 1
  %16 = xor i8 %15, 1
  %17 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 %16, i8* %17, align 1
  %18 = xor i64 %6, %3
  %19 = xor i64 %18, %7
  %20 = lshr i64 %19, 4
  %21 = trunc i64 %20 to i8
  %22 = and i8 %21, 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 %22, i8* %23, align 1
  %24 = icmp eq i64 %7, 0
  %25 = zext i1 %24 to i8
  %26 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  store i8 %25, i8* %26, align 1
  %27 = lshr i64 %7, 63
  %28 = trunc i64 %27 to i8
  %29 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 %28, i8* %29, align 1
  %30 = lshr i64 %6, 63
  %31 = lshr i64 %3, 63
  %32 = xor i64 %30, %31
  %33 = xor i64 %27, %30
  %34 = add nuw nsw i64 %33, %32
  %35 = icmp eq i64 %34, 2
  %36 = zext i1 %35 to i8
  %37 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 %36, i8* %37, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3CMPI2RnItE2InItEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* readnone returned, %struct.State* nocapture dereferenceable(3376), i64, i64)  {
  %5 = trunc i64 %2 to i16
  %6 = trunc i64 %3 to i16
  %7 = sub i16 %5, %6
  %8 = icmp ult i16 %5, %6
  %9 = zext i1 %8 to i8
  %10 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  store i8 %9, i8* %10, align 1
  %11 = and i16 %7, 255
  %12 = zext i16 %11 to i32
  %13 = tail call i32 @llvm.ctpop.i32(i32 %12) 
  %14 = trunc i32 %13 to i8
  %15 = and i8 %14, 1
  %16 = xor i8 %15, 1
  %17 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 %16, i8* %17, align 1
  %18 = xor i64 %3, %2
  %19 = trunc i64 %18 to i16
  %20 = xor i16 %19, %7
  %21 = lshr i16 %20, 4
  %22 = trunc i16 %21 to i8
  %23 = and i8 %22, 1
  %24 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 %23, i8* %24, align 1
  %25 = icmp eq i16 %7, 0
  %26 = zext i1 %25 to i8
  %27 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  store i8 %26, i8* %27, align 1
  %28 = lshr i16 %7, 15
  %29 = trunc i16 %28 to i8
  %30 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 %29, i8* %30, align 1
  %31 = lshr i16 %5, 15
  %32 = lshr i16 %6, 15
  %33 = xor i16 %32, %31
  %34 = xor i16 %28, %31
  %35 = add nuw nsw i16 %34, %33
  %36 = icmp eq i16 %35, 2
  %37 = zext i1 %36 to i8
  %38 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 %37, i8* %38, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3CMPI2RnIjE2InIjEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* readnone returned, %struct.State* nocapture dereferenceable(3376), i64, i64)  {
  %5 = trunc i64 %2 to i32
  %6 = trunc i64 %3 to i32
  %7 = sub i32 %5, %6
  %8 = icmp ult i32 %5, %6
  %9 = zext i1 %8 to i8
  %10 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  store i8 %9, i8* %10, align 1
  %11 = and i32 %7, 255
  %12 = tail call i32 @llvm.ctpop.i32(i32 %11) 
  %13 = trunc i32 %12 to i8
  %14 = and i8 %13, 1
  %15 = xor i8 %14, 1
  %16 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 %15, i8* %16, align 1
  %17 = xor i64 %3, %2
  %18 = trunc i64 %17 to i32
  %19 = xor i32 %18, %7
  %20 = lshr i32 %19, 4
  %21 = trunc i32 %20 to i8
  %22 = and i8 %21, 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 %22, i8* %23, align 1
  %24 = icmp eq i32 %7, 0
  %25 = zext i1 %24 to i8
  %26 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  store i8 %25, i8* %26, align 1
  %27 = lshr i32 %7, 31
  %28 = trunc i32 %27 to i8
  %29 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 %28, i8* %29, align 1
  %30 = lshr i32 %5, 31
  %31 = lshr i32 %6, 31
  %32 = xor i32 %31, %30
  %33 = xor i32 %27, %30
  %34 = add nuw nsw i32 %33, %32
  %35 = icmp eq i32 %34, 2
  %36 = zext i1 %35 to i8
  %37 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 %36, i8* %37, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3CMPI2RnImE2InImEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* readnone returned, %struct.State* nocapture dereferenceable(3376), i64, i64)  {
  %5 = sub i64 %2, %3
  %6 = icmp ult i64 %2, %3
  %7 = zext i1 %6 to i8
  %8 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  store i8 %7, i8* %8, align 1
  %9 = trunc i64 %5 to i32
  %10 = and i32 %9, 255
  %11 = tail call i32 @llvm.ctpop.i32(i32 %10) 
  %12 = trunc i32 %11 to i8
  %13 = and i8 %12, 1
  %14 = xor i8 %13, 1
  %15 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 %14, i8* %15, align 1
  %16 = xor i64 %3, %2
  %17 = xor i64 %16, %5
  %18 = lshr i64 %17, 4
  %19 = trunc i64 %18 to i8
  %20 = and i8 %19, 1
  %21 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 %20, i8* %21, align 1
  %22 = icmp eq i64 %5, 0
  %23 = zext i1 %22 to i8
  %24 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  store i8 %23, i8* %24, align 1
  %25 = lshr i64 %5, 63
  %26 = trunc i64 %25 to i8
  %27 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 %26, i8* %27, align 1
  %28 = lshr i64 %2, 63
  %29 = lshr i64 %3, 63
  %30 = xor i64 %29, %28
  %31 = xor i64 %25, %28
  %32 = add nuw nsw i64 %31, %30
  %33 = icmp eq i64 %32, 2
  %34 = zext i1 %33 to i8
  %35 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 %34, i8* %35, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3CMPI2RnIhES2_EEP6MemoryS4_R5StateT_T0_(%struct.Memory* readnone returned, %struct.State* nocapture dereferenceable(3376), i64, i64)  {
  %5 = trunc i64 %2 to i8
  %6 = trunc i64 %3 to i8
  %7 = sub i8 %5, %6
  %8 = icmp ult i8 %5, %6
  %9 = zext i1 %8 to i8
  %10 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  store i8 %9, i8* %10, align 1
  %11 = zext i8 %7 to i32
  %12 = tail call i32 @llvm.ctpop.i32(i32 %11) 
  %13 = trunc i32 %12 to i8
  %14 = and i8 %13, 1
  %15 = xor i8 %14, 1
  %16 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 %15, i8* %16, align 1
  %17 = xor i64 %3, %2
  %18 = trunc i64 %17 to i8
  %19 = xor i8 %18, %7
  %20 = lshr i8 %19, 4
  %21 = and i8 %20, 1
  %22 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 %21, i8* %22, align 1
  %23 = icmp eq i8 %7, 0
  %24 = zext i1 %23 to i8
  %25 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  store i8 %24, i8* %25, align 1
  %26 = lshr i8 %7, 7
  %27 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 %26, i8* %27, align 1
  %28 = lshr i8 %5, 7
  %29 = lshr i8 %6, 7
  %30 = xor i8 %29, %28
  %31 = xor i8 %26, %28
  %32 = add nuw nsw i8 %31, %30
  %33 = icmp eq i8 %32, 2
  %34 = zext i1 %33 to i8
  %35 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 %34, i8* %35, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3CMPI2RnItES2_EEP6MemoryS4_R5StateT_T0_(%struct.Memory* readnone returned, %struct.State* nocapture dereferenceable(3376), i64, i64)  {
  %5 = trunc i64 %2 to i16
  %6 = trunc i64 %3 to i16
  %7 = sub i16 %5, %6
  %8 = icmp ult i16 %5, %6
  %9 = zext i1 %8 to i8
  %10 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  store i8 %9, i8* %10, align 1
  %11 = and i16 %7, 255
  %12 = zext i16 %11 to i32
  %13 = tail call i32 @llvm.ctpop.i32(i32 %12) 
  %14 = trunc i32 %13 to i8
  %15 = and i8 %14, 1
  %16 = xor i8 %15, 1
  %17 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 %16, i8* %17, align 1
  %18 = xor i64 %3, %2
  %19 = trunc i64 %18 to i16
  %20 = xor i16 %19, %7
  %21 = lshr i16 %20, 4
  %22 = trunc i16 %21 to i8
  %23 = and i8 %22, 1
  %24 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 %23, i8* %24, align 1
  %25 = icmp eq i16 %7, 0
  %26 = zext i1 %25 to i8
  %27 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  store i8 %26, i8* %27, align 1
  %28 = lshr i16 %7, 15
  %29 = trunc i16 %28 to i8
  %30 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 %29, i8* %30, align 1
  %31 = lshr i16 %5, 15
  %32 = lshr i16 %6, 15
  %33 = xor i16 %32, %31
  %34 = xor i16 %28, %31
  %35 = add nuw nsw i16 %34, %33
  %36 = icmp eq i16 %35, 2
  %37 = zext i1 %36 to i8
  %38 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 %37, i8* %38, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3CMPI2RnIjES2_EEP6MemoryS4_R5StateT_T0_(%struct.Memory* readnone returned, %struct.State* nocapture dereferenceable(3376), i64, i64)  {
  %5 = trunc i64 %2 to i32
  %6 = trunc i64 %3 to i32
  %7 = sub i32 %5, %6
  %8 = icmp ult i32 %5, %6
  %9 = zext i1 %8 to i8
  %10 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  store i8 %9, i8* %10, align 1
  %11 = and i32 %7, 255
  %12 = tail call i32 @llvm.ctpop.i32(i32 %11) 
  %13 = trunc i32 %12 to i8
  %14 = and i8 %13, 1
  %15 = xor i8 %14, 1
  %16 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 %15, i8* %16, align 1
  %17 = xor i64 %3, %2
  %18 = trunc i64 %17 to i32
  %19 = xor i32 %18, %7
  %20 = lshr i32 %19, 4
  %21 = trunc i32 %20 to i8
  %22 = and i8 %21, 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 %22, i8* %23, align 1
  %24 = icmp eq i32 %7, 0
  %25 = zext i1 %24 to i8
  %26 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  store i8 %25, i8* %26, align 1
  %27 = lshr i32 %7, 31
  %28 = trunc i32 %27 to i8
  %29 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 %28, i8* %29, align 1
  %30 = lshr i32 %5, 31
  %31 = lshr i32 %6, 31
  %32 = xor i32 %31, %30
  %33 = xor i32 %27, %30
  %34 = add nuw nsw i32 %33, %32
  %35 = icmp eq i32 %34, 2
  %36 = zext i1 %35 to i8
  %37 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 %36, i8* %37, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3CMPI2RnImES2_EEP6MemoryS4_R5StateT_T0_(%struct.Memory* readnone returned, %struct.State* nocapture dereferenceable(3376), i64, i64)  {
  %5 = sub i64 %2, %3
  %6 = icmp ult i64 %2, %3
  %7 = zext i1 %6 to i8
  %8 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  store i8 %7, i8* %8, align 1
  %9 = trunc i64 %5 to i32
  %10 = and i32 %9, 255
  %11 = tail call i32 @llvm.ctpop.i32(i32 %10) 
  %12 = trunc i32 %11 to i8
  %13 = and i8 %12, 1
  %14 = xor i8 %13, 1
  %15 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 %14, i8* %15, align 1
  %16 = xor i64 %3, %2
  %17 = xor i64 %16, %5
  %18 = lshr i64 %17, 4
  %19 = trunc i64 %18 to i8
  %20 = and i8 %19, 1
  %21 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 %20, i8* %21, align 1
  %22 = icmp eq i64 %5, 0
  %23 = zext i1 %22 to i8
  %24 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  store i8 %23, i8* %24, align 1
  %25 = lshr i64 %5, 63
  %26 = trunc i64 %25 to i8
  %27 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 %26, i8* %27, align 1
  %28 = lshr i64 %2, 63
  %29 = lshr i64 %3, 63
  %30 = xor i64 %29, %28
  %31 = xor i64 %25, %28
  %32 = add nuw nsw i64 %31, %30
  %33 = icmp eq i64 %32, 2
  %34 = zext i1 %33 to i8
  %35 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 %34, i8* %35, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3CMPI2RnIhE2MnIhEEEP6MemoryS6_R5StateT_T0_(%struct.Memory*, %struct.State* nocapture dereferenceable(3376), i64, i64)  {
  %5 = trunc i64 %2 to i8
  %6 = inttoptr i64 %3 to i8*
  %7 = load i8, i8* %6
  %8 = sub i8 %5, %7
  %9 = icmp ult i8 %5, %7
  %10 = zext i1 %9 to i8
  %11 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  store i8 %10, i8* %11, align 1
  %12 = zext i8 %8 to i32
  %13 = tail call i32 @llvm.ctpop.i32(i32 %12) 
  %14 = trunc i32 %13 to i8
  %15 = and i8 %14, 1
  %16 = xor i8 %15, 1
  %17 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 %16, i8* %17, align 1
  %18 = xor i8 %7, %5
  %19 = xor i8 %18, %8
  %20 = lshr i8 %19, 4
  %21 = and i8 %20, 1
  %22 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 %21, i8* %22, align 1
  %23 = icmp eq i8 %8, 0
  %24 = zext i1 %23 to i8
  %25 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  store i8 %24, i8* %25, align 1
  %26 = lshr i8 %8, 7
  %27 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 %26, i8* %27, align 1
  %28 = lshr i8 %5, 7
  %29 = lshr i8 %7, 7
  %30 = xor i8 %29, %28
  %31 = xor i8 %26, %28
  %32 = add nuw nsw i8 %31, %30
  %33 = icmp eq i8 %32, 2
  %34 = zext i1 %33 to i8
  %35 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 %34, i8* %35, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3CMPI2RnItE2MnItEEEP6MemoryS6_R5StateT_T0_(%struct.Memory*, %struct.State* nocapture dereferenceable(3376), i64, i64)  {
  %5 = trunc i64 %2 to i16
  %6 = inttoptr i64 %3 to i16*
  %7 = load i16, i16* %6
  %8 = sub i16 %5, %7
  %9 = icmp ult i16 %5, %7
  %10 = zext i1 %9 to i8
  %11 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  store i8 %10, i8* %11, align 1
  %12 = and i16 %8, 255
  %13 = zext i16 %12 to i32
  %14 = tail call i32 @llvm.ctpop.i32(i32 %13) 
  %15 = trunc i32 %14 to i8
  %16 = and i8 %15, 1
  %17 = xor i8 %16, 1
  %18 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 %17, i8* %18, align 1
  %19 = xor i16 %7, %5
  %20 = xor i16 %19, %8
  %21 = lshr i16 %20, 4
  %22 = trunc i16 %21 to i8
  %23 = and i8 %22, 1
  %24 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 %23, i8* %24, align 1
  %25 = icmp eq i16 %8, 0
  %26 = zext i1 %25 to i8
  %27 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  store i8 %26, i8* %27, align 1
  %28 = lshr i16 %8, 15
  %29 = trunc i16 %28 to i8
  %30 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 %29, i8* %30, align 1
  %31 = lshr i16 %5, 15
  %32 = lshr i16 %7, 15
  %33 = xor i16 %32, %31
  %34 = xor i16 %28, %31
  %35 = add nuw nsw i16 %34, %33
  %36 = icmp eq i16 %35, 2
  %37 = zext i1 %36 to i8
  %38 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 %37, i8* %38, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3CMPI2RnIjE2MnIjEEEP6MemoryS6_R5StateT_T0_(%struct.Memory*, %struct.State* nocapture dereferenceable(3376), i64, i64)  {
  %5 = trunc i64 %2 to i32
  %6 = inttoptr i64 %3 to i32*
  %7 = load i32, i32* %6
  %8 = sub i32 %5, %7
  %9 = icmp ult i32 %5, %7
  %10 = zext i1 %9 to i8
  %11 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  store i8 %10, i8* %11, align 1
  %12 = and i32 %8, 255
  %13 = tail call i32 @llvm.ctpop.i32(i32 %12) 
  %14 = trunc i32 %13 to i8
  %15 = and i8 %14, 1
  %16 = xor i8 %15, 1
  %17 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 %16, i8* %17, align 1
  %18 = xor i32 %7, %5
  %19 = xor i32 %18, %8
  %20 = lshr i32 %19, 4
  %21 = trunc i32 %20 to i8
  %22 = and i8 %21, 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 %22, i8* %23, align 1
  %24 = icmp eq i32 %8, 0
  %25 = zext i1 %24 to i8
  %26 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  store i8 %25, i8* %26, align 1
  %27 = lshr i32 %8, 31
  %28 = trunc i32 %27 to i8
  %29 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 %28, i8* %29, align 1
  %30 = lshr i32 %5, 31
  %31 = lshr i32 %7, 31
  %32 = xor i32 %31, %30
  %33 = xor i32 %27, %30
  %34 = add nuw nsw i32 %33, %32
  %35 = icmp eq i32 %34, 2
  %36 = zext i1 %35 to i8
  %37 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 %36, i8* %37, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3CMPI2RnImE2MnImEEEP6MemoryS6_R5StateT_T0_(%struct.Memory*, %struct.State* nocapture dereferenceable(3376), i64, i64)  {
  %5 = inttoptr i64 %3 to i64*
  %6 = load i64, i64* %5
  %7 = sub i64 %2, %6
  %8 = icmp ugt i64 %6, %2
  %9 = zext i1 %8 to i8
  %10 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  store i8 %9, i8* %10, align 1
  %11 = trunc i64 %7 to i32
  %12 = and i32 %11, 255
  %13 = tail call i32 @llvm.ctpop.i32(i32 %12) 
  %14 = trunc i32 %13 to i8
  %15 = and i8 %14, 1
  %16 = xor i8 %15, 1
  %17 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 %16, i8* %17, align 1
  %18 = xor i64 %6, %2
  %19 = xor i64 %18, %7
  %20 = lshr i64 %19, 4
  %21 = trunc i64 %20 to i8
  %22 = and i8 %21, 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 %22, i8* %23, align 1
  %24 = icmp eq i64 %7, 0
  %25 = zext i1 %24 to i8
  %26 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  store i8 %25, i8* %26, align 1
  %27 = lshr i64 %7, 63
  %28 = trunc i64 %27 to i8
  %29 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 %28, i8* %29, align 1
  %30 = lshr i64 %2, 63
  %31 = lshr i64 %6, 63
  %32 = xor i64 %31, %30
  %33 = xor i64 %27, %30
  %34 = add nuw nsw i64 %33, %32
  %35 = icmp eq i64 %34, 2
  %36 = zext i1 %35 to i8
  %37 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 %36, i8* %37, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L6IMULalI2MnIhEEEP6MemoryS4_R5StateT_(%struct.Memory*, %struct.State* nocapture dereferenceable(3376), i64)  {
  %4 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 1, i32 0
  %5 = bitcast %union.anon* %4 to %struct.anon.2*
  %6 = bitcast %union.anon* %4 to i8*
  %7 = load i8, i8* %6, align 8
  %8 = inttoptr i64 %2 to i8*
  %9 = load i8, i8* %8
  %10 = sext i8 %7 to i16
  %11 = sext i8 %9 to i16
  %12 = mul nsw i16 %11, %10
  %13 = trunc i16 %12 to i8
  store i8 %13, i8* %6, align 1
  %14 = getelementptr inbounds %struct.anon.2, %struct.anon.2* %5, i64 0, i32 1
  %15 = lshr i16 %12, 8
  %16 = trunc i16 %15 to i8
  store i8 %16, i8* %14, align 1
  %17 = shl i16 %12, 8
  %18 = ashr exact i16 %17, 8
  %19 = icmp ne i16 %18, %12
  %20 = zext i1 %19 to i8
  %21 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  store i8 %20, i8* %21, align 1
  %22 = and i16 %12, 255
  %23 = zext i16 %22 to i32
  %24 = tail call i32 @llvm.ctpop.i32(i32 %23) 
  %25 = trunc i32 %24 to i8
  %26 = and i8 %25, 1
  %27 = xor i8 %26, 1
  %28 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 %27, i8* %28, align 1
  %29 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 0, i8* %29, align 1
  %30 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  store i8 0, i8* %30, align 1
  %31 = lshr i8 %13, 7
  %32 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 %31, i8* %32, align 1
  %33 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 %20, i8* %33, align 1
  ret %struct.Memory* %0
}

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare zeroext i8 @__remill_undefined_8() 

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L6IMULalI2RnIhEEEP6MemoryS4_R5StateT_(%struct.Memory* readnone returned, %struct.State* nocapture dereferenceable(3376), i64)  {
  %4 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 1, i32 0
  %5 = bitcast %union.anon* %4 to %struct.anon.2*
  %6 = bitcast %union.anon* %4 to i8*
  %7 = load i8, i8* %6, align 8
  %8 = trunc i64 %2 to i16
  %9 = sext i8 %7 to i16
  %10 = shl i16 %8, 8
  %11 = ashr exact i16 %10, 8
  %12 = mul nsw i16 %9, %11
  %13 = trunc i16 %12 to i8
  store i8 %13, i8* %6, align 1
  %14 = getelementptr inbounds %struct.anon.2, %struct.anon.2* %5, i64 0, i32 1
  %15 = lshr i16 %12, 8
  %16 = trunc i16 %15 to i8
  store i8 %16, i8* %14, align 1
  %17 = shl i16 %12, 8
  %18 = ashr exact i16 %17, 8
  %19 = icmp ne i16 %18, %12
  %20 = zext i1 %19 to i8
  %21 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  store i8 %20, i8* %21, align 1
  %22 = and i16 %12, 255
  %23 = zext i16 %22 to i32
  %24 = tail call i32 @llvm.ctpop.i32(i32 %23) 
  %25 = trunc i32 %24 to i8
  %26 = and i8 %25, 1
  %27 = xor i8 %26, 1
  %28 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 %27, i8* %28, align 1
  %29 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 0, i8* %29, align 1
  %30 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  store i8 0, i8* %30, align 1
  %31 = lshr i8 %13, 7
  %32 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 %31, i8* %32, align 1
  %33 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 %20, i8* %33, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L6IMULaxI2MnItEEEP6MemoryS4_R5StateT_(%struct.Memory*, %struct.State* nocapture dereferenceable(3376), i64)  {
  %4 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 1, i32 0
  %5 = bitcast %union.anon* %4 to i16*
  %6 = load i16, i16* %5, align 8
  %7 = inttoptr i64 %2 to i16*
  %8 = load i16, i16* %7
  %9 = sext i16 %6 to i32
  %10 = sext i16 %8 to i32
  %11 = mul nsw i32 %10, %9
  %12 = trunc i32 %11 to i16
  store i16 %12, i16* %5, align 2
  %13 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 7, i32 0
  %14 = bitcast %union.anon* %13 to i16*
  %15 = lshr i32 %11, 16
  %16 = trunc i32 %15 to i16
  store i16 %16, i16* %14, align 2
  %17 = shl i32 %11, 16
  %18 = ashr exact i32 %17, 16
  %19 = icmp ne i32 %18, %11
  %20 = zext i1 %19 to i8
  %21 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  store i8 %20, i8* %21, align 1
  %22 = and i32 %11, 255
  %23 = tail call i32 @llvm.ctpop.i32(i32 %22) 
  %24 = trunc i32 %23 to i8
  %25 = and i8 %24, 1
  %26 = xor i8 %25, 1
  %27 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 %26, i8* %27, align 1
  %28 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 0, i8* %28, align 1
  %29 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  store i8 0, i8* %29, align 1
  %30 = lshr i16 %12, 15
  %31 = trunc i16 %30 to i8
  %32 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 %31, i8* %32, align 1
  %33 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 %20, i8* %33, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L7IMULeaxI2MnIjEEEP6MemoryS4_R5StateT_(%struct.Memory*, %struct.State* nocapture dereferenceable(3376), i64)  {
  %4 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 1, i32 0
  %5 = bitcast %union.anon* %4 to i32*
  %6 = load i32, i32* %5, align 8
  %7 = inttoptr i64 %2 to i32*
  %8 = load i32, i32* %7
  %9 = sext i32 %6 to i64
  %10 = sext i32 %8 to i64
  %11 = mul nsw i64 %10, %9
  %12 = trunc i64 %11 to i32
  %13 = getelementptr inbounds %union.anon, %union.anon* %4, i64 0, i32 0
  %14 = and i64 %11, 4294967295
  store i64 %14, i64* %13, align 8
  %15 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 7, i32 0, i32 0
  %16 = lshr i64 %11, 32
  store i64 %16, i64* %15, align 8
  %17 = shl i64 %11, 32
  %18 = ashr exact i64 %17, 32
  %19 = icmp ne i64 %18, %11
  %20 = zext i1 %19 to i8
  %21 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  store i8 %20, i8* %21, align 1
  %22 = and i32 %12, 255
  %23 = tail call i32 @llvm.ctpop.i32(i32 %22) 
  %24 = trunc i32 %23 to i8
  %25 = and i8 %24, 1
  %26 = xor i8 %25, 1
  %27 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 %26, i8* %27, align 1
  %28 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 0, i8* %28, align 1
  %29 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  store i8 0, i8* %29, align 1
  %30 = lshr i32 %12, 31
  %31 = trunc i32 %30 to i8
  %32 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 %31, i8* %32, align 1
  %33 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 %20, i8* %33, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L7IMULraxI2MnImEEEP6MemoryS4_R5StateT_(%struct.Memory*, %struct.State* nocapture dereferenceable(3376), i64)  {
  %4 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 1, i32 0, i32 0
  %5 = load i64, i64* %4, align 8
  %6 = inttoptr i64 %2 to i64*
  %7 = load i64, i64* %6
  %8 = sext i64 %5 to i128
  %9 = and i128 %8, -18446744073709551616
  %10 = sext i64 %7 to i128
  %11 = and i128 %10, -18446744073709551616
  %12 = zext i64 %5 to i128
  %13 = or i128 %9, %12
  %14 = zext i64 %7 to i128
  %15 = or i128 %11, %14
  %16 = mul nsw i128 %15, %13
  %17 = trunc i128 %16 to i64
  store i64 %17, i64* %4, align 8
  %18 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 7, i32 0, i32 0
  %19 = lshr i128 %16, 64
  %20 = trunc i128 %19 to i64
  store i64 %20, i64* %18, align 8
  %21 = sext i64 %17 to i128
  %22 = icmp ne i128 %21, %16
  %23 = zext i1 %22 to i8
  %24 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  store i8 %23, i8* %24, align 1
  %25 = trunc i128 %16 to i32
  %26 = and i32 %25, 255
  %27 = tail call i32 @llvm.ctpop.i32(i32 %26) 
  %28 = trunc i32 %27 to i8
  %29 = and i8 %28, 1
  %30 = xor i8 %29, 1
  %31 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 %30, i8* %31, align 1
  %32 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 0, i8* %32, align 1
  %33 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  store i8 0, i8* %33, align 1
  %34 = lshr i64 %17, 63
  %35 = trunc i64 %34 to i8
  %36 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 %35, i8* %36, align 1
  %37 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 %23, i8* %37, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L6IMULaxI2RnItEEEP6MemoryS4_R5StateT_(%struct.Memory* readnone returned, %struct.State* nocapture dereferenceable(3376), i64)  {
  %4 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 1, i32 0
  %5 = bitcast %union.anon* %4 to i16*
  %6 = load i16, i16* %5, align 8
  %7 = trunc i64 %2 to i32
  %8 = sext i16 %6 to i32
  %9 = shl i32 %7, 16
  %10 = ashr exact i32 %9, 16
  %11 = mul nsw i32 %8, %10
  %12 = trunc i32 %11 to i16
  store i16 %12, i16* %5, align 2
  %13 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 7, i32 0
  %14 = bitcast %union.anon* %13 to i16*
  %15 = lshr i32 %11, 16
  %16 = trunc i32 %15 to i16
  store i16 %16, i16* %14, align 2
  %17 = shl i32 %11, 16
  %18 = ashr exact i32 %17, 16
  %19 = icmp ne i32 %18, %11
  %20 = zext i1 %19 to i8
  %21 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  store i8 %20, i8* %21, align 1
  %22 = and i32 %11, 255
  %23 = tail call i32 @llvm.ctpop.i32(i32 %22) 
  %24 = trunc i32 %23 to i8
  %25 = and i8 %24, 1
  %26 = xor i8 %25, 1
  %27 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 %26, i8* %27, align 1
  %28 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 0, i8* %28, align 1
  %29 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  store i8 0, i8* %29, align 1
  %30 = lshr i16 %12, 15
  %31 = trunc i16 %30 to i8
  %32 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 %31, i8* %32, align 1
  %33 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 %20, i8* %33, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L7IMULeaxI2RnIjEEEP6MemoryS4_R5StateT_(%struct.Memory* readnone returned, %struct.State* nocapture dereferenceable(3376), i64)  {
  %4 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 1, i32 0
  %5 = bitcast %union.anon* %4 to i32*
  %6 = load i32, i32* %5, align 8
  %7 = sext i32 %6 to i64
  %8 = shl i64 %2, 32
  %9 = ashr exact i64 %8, 32
  %10 = mul nsw i64 %7, %9
  %11 = trunc i64 %10 to i32
  %12 = getelementptr inbounds %union.anon, %union.anon* %4, i64 0, i32 0
  %13 = and i64 %10, 4294967295
  store i64 %13, i64* %12, align 8
  %14 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 7, i32 0, i32 0
  %15 = lshr i64 %10, 32
  store i64 %15, i64* %14, align 8
  %16 = shl i64 %10, 32
  %17 = ashr exact i64 %16, 32
  %18 = icmp ne i64 %17, %10
  %19 = zext i1 %18 to i8
  %20 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  store i8 %19, i8* %20, align 1
  %21 = and i32 %11, 255
  %22 = tail call i32 @llvm.ctpop.i32(i32 %21) 
  %23 = trunc i32 %22 to i8
  %24 = and i8 %23, 1
  %25 = xor i8 %24, 1
  %26 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 %25, i8* %26, align 1
  %27 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 0, i8* %27, align 1
  %28 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  store i8 0, i8* %28, align 1
  %29 = lshr i32 %11, 31
  %30 = trunc i32 %29 to i8
  %31 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 %30, i8* %31, align 1
  %32 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 %19, i8* %32, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L7IMULraxI2RnImEEEP6MemoryS4_R5StateT_(%struct.Memory* readnone returned, %struct.State* nocapture dereferenceable(3376), i64)  {
  %4 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 1, i32 0, i32 0
  %5 = load i64, i64* %4, align 8
  %6 = sext i64 %5 to i128
  %7 = and i128 %6, -18446744073709551616
  %8 = sext i64 %2 to i128
  %9 = and i128 %8, -18446744073709551616
  %10 = zext i64 %5 to i128
  %11 = or i128 %7, %10
  %12 = zext i64 %2 to i128
  %13 = or i128 %9, %12
  %14 = mul nsw i128 %11, %13
  %15 = trunc i128 %14 to i64
  store i64 %15, i64* %4, align 8
  %16 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 7, i32 0, i32 0
  %17 = lshr i128 %14, 64
  %18 = trunc i128 %17 to i64
  store i64 %18, i64* %16, align 8
  %19 = sext i64 %15 to i128
  %20 = icmp ne i128 %19, %14
  %21 = zext i1 %20 to i8
  %22 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  store i8 %21, i8* %22, align 1
  %23 = trunc i128 %14 to i32
  %24 = and i32 %23, 255
  %25 = tail call i32 @llvm.ctpop.i32(i32 %24) 
  %26 = trunc i32 %25 to i8
  %27 = and i8 %26, 1
  %28 = xor i8 %27, 1
  %29 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 %28, i8* %29, align 1
  %30 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 0, i8* %30, align 1
  %31 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  store i8 0, i8* %31, align 1
  %32 = lshr i64 %15, 63
  %33 = trunc i64 %32 to i8
  %34 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 %33, i8* %34, align 1
  %35 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 %21, i8* %35, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L4IMULI3RnWIhE2MnIhE2InIhEEEP6MemoryS8_R5StateT_T0_T1_(%struct.Memory*, %struct.State* nocapture dereferenceable(3376), i8* nocapture, i64, i64)  {
  %6 = inttoptr i64 %3 to i8*
  %7 = load i8, i8* %6
  %8 = trunc i64 %4 to i16
  %9 = sext i8 %7 to i16
  %10 = shl i16 %8, 8
  %11 = ashr exact i16 %10, 8
  %12 = mul nsw i16 %9, %11
  %13 = trunc i16 %12 to i8
  store i8 %13, i8* %2, align 1
  %14 = shl i16 %12, 8
  %15 = ashr exact i16 %14, 8
  %16 = icmp ne i16 %15, %12
  %17 = zext i1 %16 to i8
  %18 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  store i8 %17, i8* %18, align 1
  %19 = and i16 %12, 255
  %20 = zext i16 %19 to i32
  %21 = tail call i32 @llvm.ctpop.i32(i32 %20) 
  %22 = trunc i32 %21 to i8
  %23 = and i8 %22, 1
  %24 = xor i8 %23, 1
  %25 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 %24, i8* %25, align 1
  %26 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 0, i8* %26, align 1
  %27 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  store i8 0, i8* %27, align 1
  %28 = lshr i8 %13, 7
  %29 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 %28, i8* %29, align 1
  %30 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 %17, i8* %30, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L4IMULI3RnWItE2MnItE2InItEEEP6MemoryS8_R5StateT_T0_T1_(%struct.Memory*, %struct.State* nocapture dereferenceable(3376), i16* nocapture, i64, i64)  {
  %6 = inttoptr i64 %3 to i16*
  %7 = load i16, i16* %6
  %8 = trunc i64 %4 to i32
  %9 = sext i16 %7 to i32
  %10 = shl i32 %8, 16
  %11 = ashr exact i32 %10, 16
  %12 = mul nsw i32 %9, %11
  %13 = trunc i32 %12 to i16
  store i16 %13, i16* %2, align 2
  %14 = shl i32 %12, 16
  %15 = ashr exact i32 %14, 16
  %16 = icmp ne i32 %15, %12
  %17 = zext i1 %16 to i8
  %18 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  store i8 %17, i8* %18, align 1
  %19 = and i32 %12, 255
  %20 = tail call i32 @llvm.ctpop.i32(i32 %19) 
  %21 = trunc i32 %20 to i8
  %22 = and i8 %21, 1
  %23 = xor i8 %22, 1
  %24 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 %23, i8* %24, align 1
  %25 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 0, i8* %25, align 1
  %26 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  store i8 0, i8* %26, align 1
  %27 = lshr i16 %13, 15
  %28 = trunc i16 %27 to i8
  %29 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 %28, i8* %29, align 1
  %30 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 %17, i8* %30, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L4IMULI3RnWImE2MnIjE2InIjEEEP6MemoryS8_R5StateT_T0_T1_(%struct.Memory*, %struct.State* nocapture dereferenceable(3376), i64* nocapture, i64, i64)  {
  %6 = inttoptr i64 %3 to i32*
  %7 = load i32, i32* %6
  %8 = sext i32 %7 to i64
  %9 = shl i64 %4, 32
  %10 = ashr exact i64 %9, 32
  %11 = mul nsw i64 %8, %10
  %12 = trunc i64 %11 to i32
  %13 = and i64 %11, 4294967295
  store i64 %13, i64* %2, align 8
  %14 = shl i64 %11, 32
  %15 = ashr exact i64 %14, 32
  %16 = icmp ne i64 %15, %11
  %17 = zext i1 %16 to i8
  %18 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  store i8 %17, i8* %18, align 1
  %19 = and i32 %12, 255
  %20 = tail call i32 @llvm.ctpop.i32(i32 %19) 
  %21 = trunc i32 %20 to i8
  %22 = and i8 %21, 1
  %23 = xor i8 %22, 1
  %24 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 %23, i8* %24, align 1
  %25 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 0, i8* %25, align 1
  %26 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  store i8 0, i8* %26, align 1
  %27 = lshr i32 %12, 31
  %28 = trunc i32 %27 to i8
  %29 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 %28, i8* %29, align 1
  %30 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 %17, i8* %30, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L4IMULI3RnWImE2MnImE2InImEEEP6MemoryS8_R5StateT_T0_T1_(%struct.Memory*, %struct.State* nocapture dereferenceable(3376), i64* nocapture, i64, i64)  {
  %6 = inttoptr i64 %3 to i64*
  %7 = load i64, i64* %6
  %8 = sext i64 %7 to i128
  %9 = and i128 %8, -18446744073709551616
  %10 = sext i64 %4 to i128
  %11 = and i128 %10, -18446744073709551616
  %12 = zext i64 %7 to i128
  %13 = or i128 %9, %12
  %14 = zext i64 %4 to i128
  %15 = or i128 %11, %14
  %16 = mul nsw i128 %13, %15
  %17 = trunc i128 %16 to i64
  store i64 %17, i64* %2, align 8
  %18 = sext i64 %17 to i128
  %19 = icmp ne i128 %18, %16
  %20 = zext i1 %19 to i8
  %21 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  store i8 %20, i8* %21, align 1
  %22 = trunc i128 %16 to i32
  %23 = and i32 %22, 255
  %24 = tail call i32 @llvm.ctpop.i32(i32 %23) 
  %25 = trunc i32 %24 to i8
  %26 = and i8 %25, 1
  %27 = xor i8 %26, 1
  %28 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 %27, i8* %28, align 1
  %29 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 0, i8* %29, align 1
  %30 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  store i8 0, i8* %30, align 1
  %31 = lshr i64 %17, 63
  %32 = trunc i64 %31 to i8
  %33 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 %32, i8* %33, align 1
  %34 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 %20, i8* %34, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L4IMULI3RnWIhE2RnIhE2InIhEEEP6MemoryS8_R5StateT_T0_T1_(%struct.Memory* readnone returned, %struct.State* nocapture dereferenceable(3376), i8* nocapture, i64, i64)  {
  %6 = trunc i64 %3 to i16
  %7 = trunc i64 %4 to i16
  %8 = shl i16 %6, 8
  %9 = ashr exact i16 %8, 8
  %10 = shl i16 %7, 8
  %11 = ashr exact i16 %10, 8
  %12 = mul nsw i16 %11, %9
  %13 = trunc i16 %12 to i8
  store i8 %13, i8* %2, align 1
  %14 = shl i16 %12, 8
  %15 = ashr exact i16 %14, 8
  %16 = icmp ne i16 %15, %12
  %17 = zext i1 %16 to i8
  %18 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  store i8 %17, i8* %18, align 1
  %19 = and i16 %12, 255
  %20 = zext i16 %19 to i32
  %21 = tail call i32 @llvm.ctpop.i32(i32 %20) 
  %22 = trunc i32 %21 to i8
  %23 = and i8 %22, 1
  %24 = xor i8 %23, 1
  %25 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 %24, i8* %25, align 1
  %26 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 0, i8* %26, align 1
  %27 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  store i8 0, i8* %27, align 1
  %28 = lshr i8 %13, 7
  %29 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 %28, i8* %29, align 1
  %30 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 %17, i8* %30, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L4IMULI3RnWItE2RnItE2InItEEEP6MemoryS8_R5StateT_T0_T1_(%struct.Memory* readnone returned, %struct.State* nocapture dereferenceable(3376), i16* nocapture, i64, i64)  {
  %6 = trunc i64 %3 to i32
  %7 = trunc i64 %4 to i32
  %8 = shl i32 %6, 16
  %9 = ashr exact i32 %8, 16
  %10 = shl i32 %7, 16
  %11 = ashr exact i32 %10, 16
  %12 = mul nsw i32 %11, %9
  %13 = trunc i32 %12 to i16
  store i16 %13, i16* %2, align 2
  %14 = shl i32 %12, 16
  %15 = ashr exact i32 %14, 16
  %16 = icmp ne i32 %15, %12
  %17 = zext i1 %16 to i8
  %18 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  store i8 %17, i8* %18, align 1
  %19 = and i32 %12, 255
  %20 = tail call i32 @llvm.ctpop.i32(i32 %19) 
  %21 = trunc i32 %20 to i8
  %22 = and i8 %21, 1
  %23 = xor i8 %22, 1
  %24 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 %23, i8* %24, align 1
  %25 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 0, i8* %25, align 1
  %26 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  store i8 0, i8* %26, align 1
  %27 = lshr i16 %13, 15
  %28 = trunc i16 %27 to i8
  %29 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 %28, i8* %29, align 1
  %30 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 %17, i8* %30, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L4IMULI3RnWImE2RnIjE2InIjEEEP6MemoryS8_R5StateT_T0_T1_(%struct.Memory* readnone returned, %struct.State* nocapture dereferenceable(3376), i64* nocapture, i64, i64)  {
  %6 = shl i64 %3, 32
  %7 = ashr exact i64 %6, 32
  %8 = shl i64 %4, 32
  %9 = ashr exact i64 %8, 32
  %10 = mul nsw i64 %9, %7
  %11 = trunc i64 %10 to i32
  %12 = and i64 %10, 4294967295
  store i64 %12, i64* %2, align 8
  %13 = shl i64 %10, 32
  %14 = ashr exact i64 %13, 32
  %15 = icmp ne i64 %14, %10
  %16 = zext i1 %15 to i8
  %17 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  store i8 %16, i8* %17, align 1
  %18 = and i32 %11, 255
  %19 = tail call i32 @llvm.ctpop.i32(i32 %18) 
  %20 = trunc i32 %19 to i8
  %21 = and i8 %20, 1
  %22 = xor i8 %21, 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 %22, i8* %23, align 1
  %24 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 0, i8* %24, align 1
  %25 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  store i8 0, i8* %25, align 1
  %26 = lshr i32 %11, 31
  %27 = trunc i32 %26 to i8
  %28 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 %27, i8* %28, align 1
  %29 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 %16, i8* %29, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L4IMULI3RnWImE2RnImE2InImEEEP6MemoryS8_R5StateT_T0_T1_(%struct.Memory* readnone returned, %struct.State* nocapture dereferenceable(3376), i64* nocapture, i64, i64)  {
  %6 = sext i64 %3 to i128
  %7 = and i128 %6, -18446744073709551616
  %8 = sext i64 %4 to i128
  %9 = and i128 %8, -18446744073709551616
  %10 = zext i64 %3 to i128
  %11 = or i128 %7, %10
  %12 = zext i64 %4 to i128
  %13 = or i128 %9, %12
  %14 = mul nsw i128 %13, %11
  %15 = trunc i128 %14 to i64
  store i64 %15, i64* %2, align 8
  %16 = sext i64 %15 to i128
  %17 = icmp ne i128 %16, %14
  %18 = zext i1 %17 to i8
  %19 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  store i8 %18, i8* %19, align 1
  %20 = trunc i128 %14 to i32
  %21 = and i32 %20, 255
  %22 = tail call i32 @llvm.ctpop.i32(i32 %21) 
  %23 = trunc i32 %22 to i8
  %24 = and i8 %23, 1
  %25 = xor i8 %24, 1
  %26 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 %25, i8* %26, align 1
  %27 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 0, i8* %27, align 1
  %28 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  store i8 0, i8* %28, align 1
  %29 = lshr i64 %15, 63
  %30 = trunc i64 %29 to i8
  %31 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 %30, i8* %31, align 1
  %32 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 %18, i8* %32, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L4IMULI3RnWIhE2RnIhE2MnIhEEEP6MemoryS8_R5StateT_T0_T1_(%struct.Memory*, %struct.State* nocapture dereferenceable(3376), i8* nocapture, i64, i64)  {
  %6 = trunc i64 %3 to i16
  %7 = inttoptr i64 %4 to i8*
  %8 = load i8, i8* %7
  %9 = shl i16 %6, 8
  %10 = ashr exact i16 %9, 8
  %11 = sext i8 %8 to i16
  %12 = mul nsw i16 %11, %10
  %13 = trunc i16 %12 to i8
  store i8 %13, i8* %2, align 1
  %14 = shl i16 %12, 8
  %15 = ashr exact i16 %14, 8
  %16 = icmp ne i16 %15, %12
  %17 = zext i1 %16 to i8
  %18 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  store i8 %17, i8* %18, align 1
  %19 = and i16 %12, 255
  %20 = zext i16 %19 to i32
  %21 = tail call i32 @llvm.ctpop.i32(i32 %20) 
  %22 = trunc i32 %21 to i8
  %23 = and i8 %22, 1
  %24 = xor i8 %23, 1
  %25 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 %24, i8* %25, align 1
  %26 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 0, i8* %26, align 1
  %27 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  store i8 0, i8* %27, align 1
  %28 = lshr i8 %13, 7
  %29 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 %28, i8* %29, align 1
  %30 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 %17, i8* %30, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L4IMULI3RnWItE2RnItE2MnItEEEP6MemoryS8_R5StateT_T0_T1_(%struct.Memory*, %struct.State* nocapture dereferenceable(3376), i16* nocapture, i64, i64)  {
  %6 = trunc i64 %3 to i32
  %7 = inttoptr i64 %4 to i16*
  %8 = load i16, i16* %7
  %9 = shl i32 %6, 16
  %10 = ashr exact i32 %9, 16
  %11 = sext i16 %8 to i32
  %12 = mul nsw i32 %11, %10
  %13 = trunc i32 %12 to i16
  store i16 %13, i16* %2, align 2
  %14 = shl i32 %12, 16
  %15 = ashr exact i32 %14, 16
  %16 = icmp ne i32 %15, %12
  %17 = zext i1 %16 to i8
  %18 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  store i8 %17, i8* %18, align 1
  %19 = and i32 %12, 255
  %20 = tail call i32 @llvm.ctpop.i32(i32 %19) 
  %21 = trunc i32 %20 to i8
  %22 = and i8 %21, 1
  %23 = xor i8 %22, 1
  %24 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 %23, i8* %24, align 1
  %25 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 0, i8* %25, align 1
  %26 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  store i8 0, i8* %26, align 1
  %27 = lshr i16 %13, 15
  %28 = trunc i16 %27 to i8
  %29 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 %28, i8* %29, align 1
  %30 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 %17, i8* %30, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L4IMULI3RnWImE2RnIjE2MnIjEEEP6MemoryS8_R5StateT_T0_T1_(%struct.Memory*, %struct.State* nocapture dereferenceable(3376), i64* nocapture, i64, i64)  {
  %6 = inttoptr i64 %4 to i32*
  %7 = load i32, i32* %6
  %8 = shl i64 %3, 32
  %9 = ashr exact i64 %8, 32
  %10 = sext i32 %7 to i64
  %11 = mul nsw i64 %10, %9
  %12 = trunc i64 %11 to i32
  %13 = and i64 %11, 4294967295
  store i64 %13, i64* %2, align 8
  %14 = shl i64 %11, 32
  %15 = ashr exact i64 %14, 32
  %16 = icmp ne i64 %15, %11
  %17 = zext i1 %16 to i8
  %18 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  store i8 %17, i8* %18, align 1
  %19 = and i32 %12, 255
  %20 = tail call i32 @llvm.ctpop.i32(i32 %19) 
  %21 = trunc i32 %20 to i8
  %22 = and i8 %21, 1
  %23 = xor i8 %22, 1
  %24 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 %23, i8* %24, align 1
  %25 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 0, i8* %25, align 1
  %26 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  store i8 0, i8* %26, align 1
  %27 = lshr i32 %12, 31
  %28 = trunc i32 %27 to i8
  %29 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 %28, i8* %29, align 1
  %30 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 %17, i8* %30, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L4IMULI3RnWImE2RnImE2MnImEEEP6MemoryS8_R5StateT_T0_T1_(%struct.Memory*, %struct.State* nocapture dereferenceable(3376), i64* nocapture, i64, i64)  {
  %6 = inttoptr i64 %4 to i64*
  %7 = load i64, i64* %6
  %8 = sext i64 %3 to i128
  %9 = and i128 %8, -18446744073709551616
  %10 = sext i64 %7 to i128
  %11 = and i128 %10, -18446744073709551616
  %12 = zext i64 %3 to i128
  %13 = or i128 %9, %12
  %14 = zext i64 %7 to i128
  %15 = or i128 %11, %14
  %16 = mul nsw i128 %15, %13
  %17 = trunc i128 %16 to i64
  store i64 %17, i64* %2, align 8
  %18 = sext i64 %17 to i128
  %19 = icmp ne i128 %18, %16
  %20 = zext i1 %19 to i8
  %21 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  store i8 %20, i8* %21, align 1
  %22 = trunc i128 %16 to i32
  %23 = and i32 %22, 255
  %24 = tail call i32 @llvm.ctpop.i32(i32 %23) 
  %25 = trunc i32 %24 to i8
  %26 = and i8 %25, 1
  %27 = xor i8 %26, 1
  %28 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 %27, i8* %28, align 1
  %29 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 0, i8* %29, align 1
  %30 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  store i8 0, i8* %30, align 1
  %31 = lshr i64 %17, 63
  %32 = trunc i64 %31 to i8
  %33 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 %32, i8* %33, align 1
  %34 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 %20, i8* %34, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L4IMULI3RnWIhE2RnIhES4_EEP6MemoryS6_R5StateT_T0_T1_(%struct.Memory* readnone returned, %struct.State* nocapture dereferenceable(3376), i8* nocapture, i64, i64)  {
  %6 = trunc i64 %3 to i16
  %7 = trunc i64 %4 to i16
  %8 = shl i16 %6, 8
  %9 = ashr exact i16 %8, 8
  %10 = shl i16 %7, 8
  %11 = ashr exact i16 %10, 8
  %12 = mul nsw i16 %11, %9
  %13 = trunc i16 %12 to i8
  store i8 %13, i8* %2, align 1
  %14 = shl i16 %12, 8
  %15 = ashr exact i16 %14, 8
  %16 = icmp ne i16 %15, %12
  %17 = zext i1 %16 to i8
  %18 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  store i8 %17, i8* %18, align 1
  %19 = and i16 %12, 255
  %20 = zext i16 %19 to i32
  %21 = tail call i32 @llvm.ctpop.i32(i32 %20) 
  %22 = trunc i32 %21 to i8
  %23 = and i8 %22, 1
  %24 = xor i8 %23, 1
  %25 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 %24, i8* %25, align 1
  %26 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 0, i8* %26, align 1
  %27 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  store i8 0, i8* %27, align 1
  %28 = lshr i8 %13, 7
  %29 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 %28, i8* %29, align 1
  %30 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 %17, i8* %30, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L4IMULI3RnWItE2RnItES4_EEP6MemoryS6_R5StateT_T0_T1_(%struct.Memory* readnone returned, %struct.State* nocapture dereferenceable(3376), i16* nocapture, i64, i64)  {
  %6 = trunc i64 %3 to i32
  %7 = trunc i64 %4 to i32
  %8 = shl i32 %6, 16
  %9 = ashr exact i32 %8, 16
  %10 = shl i32 %7, 16
  %11 = ashr exact i32 %10, 16
  %12 = mul nsw i32 %11, %9
  %13 = trunc i32 %12 to i16
  store i16 %13, i16* %2, align 2
  %14 = shl i32 %12, 16
  %15 = ashr exact i32 %14, 16
  %16 = icmp ne i32 %15, %12
  %17 = zext i1 %16 to i8
  %18 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  store i8 %17, i8* %18, align 1
  %19 = and i32 %12, 255
  %20 = tail call i32 @llvm.ctpop.i32(i32 %19) 
  %21 = trunc i32 %20 to i8
  %22 = and i8 %21, 1
  %23 = xor i8 %22, 1
  %24 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 %23, i8* %24, align 1
  %25 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 0, i8* %25, align 1
  %26 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  store i8 0, i8* %26, align 1
  %27 = lshr i16 %13, 15
  %28 = trunc i16 %27 to i8
  %29 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 %28, i8* %29, align 1
  %30 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 %17, i8* %30, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L4IMULI3RnWImE2RnIjES4_EEP6MemoryS6_R5StateT_T0_T1_(%struct.Memory* readnone returned, %struct.State* nocapture dereferenceable(3376), i64* nocapture, i64, i64)  {
  %6 = shl i64 %3, 32
  %7 = ashr exact i64 %6, 32
  %8 = shl i64 %4, 32
  %9 = ashr exact i64 %8, 32
  %10 = mul nsw i64 %9, %7
  %11 = trunc i64 %10 to i32
  %12 = and i64 %10, 4294967295
  store i64 %12, i64* %2, align 8
  %13 = shl i64 %10, 32
  %14 = ashr exact i64 %13, 32
  %15 = icmp ne i64 %14, %10
  %16 = zext i1 %15 to i8
  %17 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  store i8 %16, i8* %17, align 1
  %18 = and i32 %11, 255
  %19 = tail call i32 @llvm.ctpop.i32(i32 %18) 
  %20 = trunc i32 %19 to i8
  %21 = and i8 %20, 1
  %22 = xor i8 %21, 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 %22, i8* %23, align 1
  %24 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 0, i8* %24, align 1
  %25 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  store i8 0, i8* %25, align 1
  %26 = lshr i32 %11, 31
  %27 = trunc i32 %26 to i8
  %28 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 %27, i8* %28, align 1
  %29 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 %16, i8* %29, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L4IMULI3RnWImE2RnImES4_EEP6MemoryS6_R5StateT_T0_T1_(%struct.Memory* readnone returned, %struct.State* nocapture dereferenceable(3376), i64* nocapture, i64, i64)  {
  %6 = sext i64 %3 to i128
  %7 = and i128 %6, -18446744073709551616
  %8 = sext i64 %4 to i128
  %9 = and i128 %8, -18446744073709551616
  %10 = zext i64 %3 to i128
  %11 = or i128 %7, %10
  %12 = zext i64 %4 to i128
  %13 = or i128 %9, %12
  %14 = mul nsw i128 %13, %11
  %15 = trunc i128 %14 to i64
  store i64 %15, i64* %2, align 8
  %16 = sext i64 %15 to i128
  %17 = icmp ne i128 %16, %14
  %18 = zext i1 %17 to i8
  %19 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  store i8 %18, i8* %19, align 1
  %20 = trunc i128 %14 to i32
  %21 = and i32 %20, 255
  %22 = tail call i32 @llvm.ctpop.i32(i32 %21) 
  %23 = trunc i32 %22 to i8
  %24 = and i8 %23, 1
  %25 = xor i8 %24, 1
  %26 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 %25, i8* %26, align 1
  %27 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 0, i8* %27, align 1
  %28 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  store i8 0, i8* %28, align 1
  %29 = lshr i64 %15, 63
  %30 = trunc i64 %29 to i8
  %31 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 %30, i8* %31, align 1
  %32 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 %18, i8* %32, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L5MULalI2RnIhEEEP6MemoryS4_R5StateT_(%struct.Memory* readnone returned, %struct.State* nocapture dereferenceable(3376), i64)  {
  %4 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 1, i32 0
  %5 = bitcast %union.anon* %4 to %struct.anon.2*
  %6 = bitcast %union.anon* %4 to i8*
  %7 = load i8, i8* %6, align 8
  %8 = trunc i64 %2 to i16
  %9 = zext i8 %7 to i16
  %10 = and i16 %8, 255
  %11 = mul nuw i16 %9, %10
  %12 = trunc i16 %11 to i8
  store i8 %12, i8* %6, align 1
  %13 = getelementptr inbounds %struct.anon.2, %struct.anon.2* %5, i64 0, i32 1
  %14 = lshr i16 %11, 8
  %15 = trunc i16 %14 to i8
  store i8 %15, i8* %13, align 1
  %16 = and i16 %11, 255
  %17 = icmp ne i16 %16, %11
  %18 = zext i1 %17 to i8
  %19 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  store i8 %18, i8* %19, align 1
  %20 = zext i16 %16 to i32
  %21 = tail call i32 @llvm.ctpop.i32(i32 %20) 
  %22 = trunc i32 %21 to i8
  %23 = and i8 %22, 1
  %24 = xor i8 %23, 1
  %25 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 %24, i8* %25, align 1
  %26 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 0, i8* %26, align 1
  %27 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  store i8 0, i8* %27, align 1
  %28 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 0, i8* %28, align 1
  %29 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 %18, i8* %29, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L5MULalI2MnIhEEEP6MemoryS4_R5StateT_(%struct.Memory*, %struct.State* nocapture dereferenceable(3376), i64)  {
  %4 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 1, i32 0
  %5 = bitcast %union.anon* %4 to %struct.anon.2*
  %6 = bitcast %union.anon* %4 to i8*
  %7 = load i8, i8* %6, align 8
  %8 = inttoptr i64 %2 to i8*
  %9 = load i8, i8* %8
  %10 = zext i8 %7 to i16
  %11 = zext i8 %9 to i16
  %12 = mul nuw i16 %11, %10
  %13 = trunc i16 %12 to i8
  store i8 %13, i8* %6, align 1
  %14 = getelementptr inbounds %struct.anon.2, %struct.anon.2* %5, i64 0, i32 1
  %15 = lshr i16 %12, 8
  %16 = trunc i16 %15 to i8
  store i8 %16, i8* %14, align 1
  %17 = and i16 %12, 255
  %18 = icmp ne i16 %17, %12
  %19 = zext i1 %18 to i8
  %20 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  store i8 %19, i8* %20, align 1
  %21 = zext i16 %17 to i32
  %22 = tail call i32 @llvm.ctpop.i32(i32 %21) 
  %23 = trunc i32 %22 to i8
  %24 = and i8 %23, 1
  %25 = xor i8 %24, 1
  %26 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 %25, i8* %26, align 1
  %27 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 0, i8* %27, align 1
  %28 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  store i8 0, i8* %28, align 1
  %29 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 0, i8* %29, align 1
  %30 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 %19, i8* %30, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L5MULaxI2MnItEEEP6MemoryS4_R5StateT_(%struct.Memory*, %struct.State* nocapture dereferenceable(3376), i64)  {
  %4 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 1, i32 0
  %5 = bitcast %union.anon* %4 to i16*
  %6 = load i16, i16* %5, align 8
  %7 = inttoptr i64 %2 to i16*
  %8 = load i16, i16* %7
  %9 = zext i16 %6 to i32
  %10 = zext i16 %8 to i32
  %11 = mul nuw i32 %10, %9
  %12 = trunc i32 %11 to i16
  store i16 %12, i16* %5, align 2
  %13 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 7, i32 0
  %14 = bitcast %union.anon* %13 to i16*
  %15 = lshr i32 %11, 16
  %16 = trunc i32 %15 to i16
  store i16 %16, i16* %14, align 2
  %17 = and i32 %11, 65535
  %18 = icmp ne i32 %17, %11
  %19 = zext i1 %18 to i8
  %20 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  store i8 %19, i8* %20, align 1
  %21 = and i32 %11, 255
  %22 = tail call i32 @llvm.ctpop.i32(i32 %21) 
  %23 = trunc i32 %22 to i8
  %24 = and i8 %23, 1
  %25 = xor i8 %24, 1
  %26 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 %25, i8* %26, align 1
  %27 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 0, i8* %27, align 1
  %28 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  store i8 0, i8* %28, align 1
  %29 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 0, i8* %29, align 1
  %30 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 %19, i8* %30, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L6MULeaxI2MnIjEEEP6MemoryS4_R5StateT_(%struct.Memory*, %struct.State* nocapture dereferenceable(3376), i64)  {
  %4 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 1, i32 0
  %5 = bitcast %union.anon* %4 to i32*
  %6 = load i32, i32* %5, align 8
  %7 = inttoptr i64 %2 to i32*
  %8 = load i32, i32* %7
  %9 = zext i32 %6 to i64
  %10 = zext i32 %8 to i64
  %11 = mul nuw i64 %10, %9
  %12 = trunc i64 %11 to i32
  %13 = getelementptr inbounds %union.anon, %union.anon* %4, i64 0, i32 0
  %14 = and i64 %11, 4294967295
  store i64 %14, i64* %13, align 8
  %15 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 7, i32 0, i32 0
  %16 = lshr i64 %11, 32
  store i64 %16, i64* %15, align 8
  %17 = icmp ne i64 %14, %11
  %18 = zext i1 %17 to i8
  %19 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  store i8 %18, i8* %19, align 1
  %20 = and i32 %12, 255
  %21 = tail call i32 @llvm.ctpop.i32(i32 %20) 
  %22 = trunc i32 %21 to i8
  %23 = and i8 %22, 1
  %24 = xor i8 %23, 1
  %25 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 %24, i8* %25, align 1
  %26 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 0, i8* %26, align 1
  %27 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  store i8 0, i8* %27, align 1
  %28 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 0, i8* %28, align 1
  %29 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 %18, i8* %29, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L6MULraxI2MnImEEEP6MemoryS4_R5StateT_(%struct.Memory*, %struct.State* nocapture dereferenceable(3376), i64)  {
  %4 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 1, i32 0, i32 0
  %5 = load i64, i64* %4, align 8
  %6 = inttoptr i64 %2 to i64*
  %7 = load i64, i64* %6
  %8 = zext i64 %5 to i128
  %9 = zext i64 %7 to i128
  %10 = mul nuw i128 %9, %8
  %11 = trunc i128 %10 to i64
  store i64 %11, i64* %4, align 8
  %12 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 7, i32 0, i32 0
  %13 = and i128 %10, 18446744073709551615
  %14 = lshr i128 %10, 64
  %15 = trunc i128 %14 to i64
  store i64 %15, i64* %12, align 8
  %16 = icmp ne i128 %13, %10
  %17 = zext i1 %16 to i8
  %18 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  store i8 %17, i8* %18, align 1
  %19 = trunc i128 %10 to i32
  %20 = and i32 %19, 255
  %21 = tail call i32 @llvm.ctpop.i32(i32 %20) 
  %22 = trunc i32 %21 to i8
  %23 = and i8 %22, 1
  %24 = xor i8 %23, 1
  %25 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 %24, i8* %25, align 1
  %26 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 0, i8* %26, align 1
  %27 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  store i8 0, i8* %27, align 1
  %28 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 0, i8* %28, align 1
  %29 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 %17, i8* %29, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L5MULaxI2RnItEEEP6MemoryS4_R5StateT_(%struct.Memory* readnone returned, %struct.State* nocapture dereferenceable(3376), i64)  {
  %4 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 1, i32 0
  %5 = bitcast %union.anon* %4 to i16*
  %6 = load i16, i16* %5, align 8
  %7 = trunc i64 %2 to i32
  %8 = zext i16 %6 to i32
  %9 = and i32 %7, 65535
  %10 = mul nuw i32 %8, %9
  %11 = trunc i32 %10 to i16
  store i16 %11, i16* %5, align 2
  %12 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 7, i32 0
  %13 = bitcast %union.anon* %12 to i16*
  %14 = lshr i32 %10, 16
  %15 = trunc i32 %14 to i16
  store i16 %15, i16* %13, align 2
  %16 = and i32 %10, 65535
  %17 = icmp ne i32 %16, %10
  %18 = zext i1 %17 to i8
  %19 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  store i8 %18, i8* %19, align 1
  %20 = and i32 %10, 255
  %21 = tail call i32 @llvm.ctpop.i32(i32 %20) 
  %22 = trunc i32 %21 to i8
  %23 = and i8 %22, 1
  %24 = xor i8 %23, 1
  %25 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 %24, i8* %25, align 1
  %26 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 0, i8* %26, align 1
  %27 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  store i8 0, i8* %27, align 1
  %28 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 0, i8* %28, align 1
  %29 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 %18, i8* %29, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L6MULeaxI2RnIjEEEP6MemoryS4_R5StateT_(%struct.Memory* readnone returned, %struct.State* nocapture dereferenceable(3376), i64)  {
  %4 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 1, i32 0
  %5 = bitcast %union.anon* %4 to i32*
  %6 = load i32, i32* %5, align 8
  %7 = zext i32 %6 to i64
  %8 = and i64 %2, 4294967295
  %9 = mul nuw i64 %7, %8
  %10 = trunc i64 %9 to i32
  %11 = getelementptr inbounds %union.anon, %union.anon* %4, i64 0, i32 0
  %12 = and i64 %9, 4294967295
  store i64 %12, i64* %11, align 8
  %13 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 7, i32 0, i32 0
  %14 = lshr i64 %9, 32
  store i64 %14, i64* %13, align 8
  %15 = icmp ne i64 %12, %9
  %16 = zext i1 %15 to i8
  %17 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  store i8 %16, i8* %17, align 1
  %18 = and i32 %10, 255
  %19 = tail call i32 @llvm.ctpop.i32(i32 %18) 
  %20 = trunc i32 %19 to i8
  %21 = and i8 %20, 1
  %22 = xor i8 %21, 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 %22, i8* %23, align 1
  %24 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 0, i8* %24, align 1
  %25 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  store i8 0, i8* %25, align 1
  %26 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 0, i8* %26, align 1
  %27 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 %16, i8* %27, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L6MULraxI2RnImEEEP6MemoryS4_R5StateT_(%struct.Memory* readnone returned, %struct.State* nocapture dereferenceable(3376), i64)  {
  %4 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 1, i32 0, i32 0
  %5 = load i64, i64* %4, align 8
  %6 = zext i64 %5 to i128
  %7 = zext i64 %2 to i128
  %8 = mul nuw i128 %6, %7
  %9 = trunc i128 %8 to i64
  store i64 %9, i64* %4, align 8
  %10 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 7, i32 0, i32 0
  %11 = and i128 %8, 18446744073709551615
  %12 = lshr i128 %8, 64
  %13 = trunc i128 %12 to i64
  store i64 %13, i64* %10, align 8
  %14 = icmp ne i128 %11, %8
  %15 = zext i1 %14 to i8
  %16 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  store i8 %15, i8* %16, align 1
  %17 = trunc i128 %8 to i32
  %18 = and i32 %17, 255
  %19 = tail call i32 @llvm.ctpop.i32(i32 %18) 
  %20 = trunc i32 %19 to i8
  %21 = and i8 %20, 1
  %22 = xor i8 %21, 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 %22, i8* %23, align 1
  %24 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 0, i8* %24, align 1
  %25 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  store i8 0, i8* %25, align 1
  %26 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 0, i8* %26, align 1
  %27 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 %15, i8* %27, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline norecurse nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L4MULXI3RnWImE2RnIjEEEP6MemoryS6_R5StateT_S9_T0_(%struct.Memory* readnone returned, %struct.State* nocapture readonly dereferenceable(3376), i64* nocapture, i64* nocapture, i64)  {
  %6 = and i64 %4, 4294967295
  %7 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 7, i32 0, i32 0
  %8 = load i64, i64* %7, align 8
  %9 = and i64 %8, 4294967295
  %10 = mul nuw i64 %9, %6
  %11 = lshr i64 %10, 32
  store i64 %11, i64* %2, align 8
  %12 = and i64 %10, 4294967295
  store i64 %12, i64* %3, align 8
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L4MULXI3RnWImE2MnIjEEEP6MemoryS6_R5StateT_S9_T0_(%struct.Memory*, %struct.State* nocapture readonly dereferenceable(3376), i64* nocapture, i64* nocapture, i64)  {
  %6 = inttoptr i64 %4 to i32*
  %7 = load i32, i32* %6
  %8 = zext i32 %7 to i64
  %9 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 7, i32 0, i32 0
  %10 = load i64, i64* %9, align 8
  %11 = and i64 %10, 4294967295
  %12 = mul nuw i64 %11, %8
  %13 = lshr i64 %12, 32
  store i64 %13, i64* %2, align 8
  %14 = and i64 %12, 4294967295
  store i64 %14, i64* %3, align 8
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline norecurse nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L4MULXI3RnWImE2RnImEEEP6MemoryS6_R5StateT_S9_T0_(%struct.Memory* readnone returned, %struct.State* nocapture readonly dereferenceable(3376), i64* nocapture, i64* nocapture, i64)  {
  %6 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 7, i32 0, i32 0
  %7 = load i64, i64* %6, align 8
  %8 = zext i64 %4 to i128
  %9 = zext i64 %7 to i128
  %10 = mul nuw i128 %9, %8
  %11 = trunc i128 %10 to i64
  %12 = lshr i128 %10, 64
  %13 = trunc i128 %12 to i64
  store i64 %13, i64* %2, align 8
  store i64 %11, i64* %3, align 8
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L4MULXI3RnWImE2MnImEEEP6MemoryS6_R5StateT_S9_T0_(%struct.Memory*, %struct.State* nocapture readonly dereferenceable(3376), i64* nocapture, i64* nocapture, i64)  {
  %6 = inttoptr i64 %4 to i64*
  %7 = load i64, i64* %6
  %8 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 7, i32 0, i32 0
  %9 = load i64, i64* %8, align 8
  %10 = zext i64 %7 to i128
  %11 = zext i64 %9 to i128
  %12 = mul nuw i128 %11, %10
  %13 = trunc i128 %12 to i64
  %14 = lshr i128 %12, 64
  %15 = trunc i128 %14 to i64
  store i64 %15, i64* %2, align 8
  store i64 %13, i64* %3, align 8
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L5MULPSI3VnWI8vec128_tE2VnIS2_E3MVnIS2_EEEP6MemoryS9_R5StateT_T0_T1_(%struct.Memory* returned, %struct.State* nocapture readnone dereferenceable(3376), i8* nocapture, i8* nocapture readonly, i64)  {
  %6 = bitcast i8* %3 to <2 x float>*
  %7 = load <2 x float>, <2 x float>* %6, align 1
  %8 = getelementptr inbounds i8, i8* %3, i64 8
  %9 = bitcast i8* %8 to <2 x float>*
  %10 = load <2 x float>, <2 x float>* %9, align 1
  %11 = inttoptr i64 %4 to float*
  %12 = load float, float* %11
  %13 = add i64 %4, 4
  %14 = inttoptr i64 %13 to float*
  %15 = load float, float* %14
  %16 = add i64 %4, 8
  %17 = inttoptr i64 %16 to float*
  %18 = load float, float* %17
  %19 = add i64 %4, 12
  %20 = inttoptr i64 %19 to float*
  %21 = load float, float* %20
  %22 = shufflevector <2 x float> %7, <2 x float> %10, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %23 = insertelement <4 x float> undef, float %12, i32 0
  %24 = insertelement <4 x float> %23, float %15, i32 1
  %25 = insertelement <4 x float> %24, float %18, i32 2
  %26 = insertelement <4 x float> %25, float %21, i32 3
  %27 = fmul <4 x float> %22, %26
  %28 = bitcast i8* %2 to <4 x float>*
  store <4 x float> %27, <4 x float>* %28, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L5MULPSI3VnWI8vec128_tE2VnIS2_ES5_EEP6MemoryS7_R5StateT_T0_T1_(%struct.Memory* readnone returned, %struct.State* nocapture readnone dereferenceable(3376), i8* nocapture, i8* nocapture readonly, i8* nocapture readonly)  {
  %6 = bitcast i8* %3 to <2 x float>*
  %7 = load <2 x float>, <2 x float>* %6, align 1
  %8 = getelementptr inbounds i8, i8* %3, i64 8
  %9 = bitcast i8* %8 to <2 x float>*
  %10 = load <2 x float>, <2 x float>* %9, align 1
  %11 = bitcast i8* %4 to <2 x float>*
  %12 = load <2 x float>, <2 x float>* %11, align 1
  %13 = getelementptr inbounds i8, i8* %4, i64 8
  %14 = bitcast i8* %13 to <2 x float>*
  %15 = load <2 x float>, <2 x float>* %14, align 1
  %16 = shufflevector <2 x float> %7, <2 x float> %10, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %17 = shufflevector <2 x float> %12, <2 x float> %15, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %18 = fmul <4 x float> %16, %17
  %19 = bitcast i8* %2 to <4 x float>*
  store <4 x float> %18, <4 x float>* %19, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L5MULPDI3VnWI8vec128_tE2VnIS2_E3MVnIS2_EEEP6MemoryS9_R5StateT_T0_T1_(%struct.Memory* returned, %struct.State* nocapture readnone dereferenceable(3376), i8* nocapture, i8* nocapture readonly, i64)  {
  %6 = bitcast i8* %3 to <2 x double>*
  %7 = load <2 x double>, <2 x double>* %6, align 1
  %8 = inttoptr i64 %4 to double*
  %9 = load double, double* %8
  %10 = add i64 %4, 8
  %11 = inttoptr i64 %10 to double*
  %12 = load double, double* %11
  %13 = insertelement <2 x double> undef, double %9, i32 0
  %14 = insertelement <2 x double> %13, double %12, i32 1
  %15 = fmul <2 x double> %7, %14
  %16 = bitcast i8* %2 to <2 x double>*
  store <2 x double> %15, <2 x double>* %16, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L5MULPDI3VnWI8vec128_tE2VnIS2_ES5_EEP6MemoryS7_R5StateT_T0_T1_(%struct.Memory* readnone returned, %struct.State* nocapture readnone dereferenceable(3376), i8* nocapture, i8* nocapture readonly, i8* nocapture readonly)  {
  %6 = bitcast i8* %3 to <2 x double>*
  %7 = load <2 x double>, <2 x double>* %6, align 1
  %8 = bitcast i8* %4 to <2 x double>*
  %9 = load <2 x double>, <2 x double>* %8, align 1
  %10 = fmul <2 x double> %7, %9
  %11 = bitcast i8* %2 to <2 x double>*
  store <2 x double> %10, <2 x double>* %11, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L5MULSSI3VnWI8vec128_tE2VnIS2_E3MVnIS2_EEEP6MemoryS9_R5StateT_T0_T1_(%struct.Memory* returned, %struct.State* nocapture readnone dereferenceable(3376), i8* nocapture, i8* nocapture readonly, i64)  {
  %6 = bitcast i8* %3 to <2 x float>*
  %7 = load <2 x float>, <2 x float>* %6, align 1
  %8 = getelementptr inbounds i8, i8* %3, i64 8
  %9 = bitcast i8* %8 to <2 x i32>*
  %10 = load <2 x i32>, <2 x i32>* %9, align 1
  %11 = inttoptr i64 %4 to float*
  %12 = load float, float* %11
  %13 = extractelement <2 x float> %7, i32 0
  %14 = fmul float %13, %12
  %15 = bitcast i8* %2 to float*
  store float %14, float* %15, align 1
  %16 = bitcast <2 x float> %7 to <2 x i32>
  %17 = extractelement <2 x i32> %16, i32 1
  %18 = getelementptr inbounds i8, i8* %2, i64 4
  %19 = bitcast i8* %18 to i32*
  store i32 %17, i32* %19, align 1
  %20 = extractelement <2 x i32> %10, i32 0
  %21 = getelementptr inbounds i8, i8* %2, i64 8
  %22 = bitcast i8* %21 to i32*
  store i32 %20, i32* %22, align 1
  %23 = extractelement <2 x i32> %10, i32 1
  %24 = getelementptr inbounds i8, i8* %2, i64 12
  %25 = bitcast i8* %24 to i32*
  store i32 %23, i32* %25, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L5MULSSI3VnWI8vec128_tE2VnIS2_ES5_EEP6MemoryS7_R5StateT_T0_T1_(%struct.Memory* readnone returned, %struct.State* nocapture readnone dereferenceable(3376), i8* nocapture, i8* nocapture readonly, i8* nocapture readonly)  {
  %6 = bitcast i8* %3 to <2 x float>*
  %7 = load <2 x float>, <2 x float>* %6, align 1
  %8 = getelementptr inbounds i8, i8* %3, i64 8
  %9 = bitcast i8* %8 to <2 x i32>*
  %10 = load <2 x i32>, <2 x i32>* %9, align 1
  %11 = bitcast i8* %4 to <2 x float>*
  %12 = load <2 x float>, <2 x float>* %11, align 1
  %13 = extractelement <2 x float> %7, i32 0
  %14 = extractelement <2 x float> %12, i32 0
  %15 = fmul float %13, %14
  %16 = bitcast i8* %2 to float*
  store float %15, float* %16, align 1
  %17 = bitcast <2 x float> %7 to <2 x i32>
  %18 = extractelement <2 x i32> %17, i32 1
  %19 = getelementptr inbounds i8, i8* %2, i64 4
  %20 = bitcast i8* %19 to i32*
  store i32 %18, i32* %20, align 1
  %21 = extractelement <2 x i32> %10, i32 0
  %22 = getelementptr inbounds i8, i8* %2, i64 8
  %23 = bitcast i8* %22 to i32*
  store i32 %21, i32* %23, align 1
  %24 = extractelement <2 x i32> %10, i32 1
  %25 = getelementptr inbounds i8, i8* %2, i64 12
  %26 = bitcast i8* %25 to i32*
  store i32 %24, i32* %26, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L5MULSDI3VnWI8vec128_tE2VnIS2_E3MVnIS2_EEEP6MemoryS9_R5StateT_T0_T1_(%struct.Memory* returned, %struct.State* nocapture readnone dereferenceable(3376), i8* nocapture, i8* nocapture readonly, i64)  {
  %6 = bitcast i8* %3 to double*
  %7 = load double, double* %6, align 1
  %8 = getelementptr inbounds i8, i8* %3, i64 8
  %9 = bitcast i8* %8 to i64*
  %10 = load i64, i64* %9, align 1
  %11 = inttoptr i64 %4 to double*
  %12 = load double, double* %11
  %13 = fmul double %7, %12
  %14 = bitcast i8* %2 to double*
  store double %13, double* %14, align 1
  %15 = getelementptr inbounds i8, i8* %2, i64 8
  %16 = bitcast i8* %15 to i64*
  store i64 %10, i64* %16, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L5MULSDI3VnWI8vec128_tE2VnIS2_ES5_EEP6MemoryS7_R5StateT_T0_T1_(%struct.Memory* readnone returned, %struct.State* nocapture readnone dereferenceable(3376), i8* nocapture, i8* nocapture readonly, i8* nocapture readonly)  {
  %6 = bitcast i8* %3 to double*
  %7 = load double, double* %6, align 1
  %8 = getelementptr inbounds i8, i8* %3, i64 8
  %9 = bitcast i8* %8 to i64*
  %10 = load i64, i64* %9, align 1
  %11 = bitcast i8* %4 to double*
  %12 = load double, double* %11, align 1
  %13 = fmul double %7, %12
  %14 = bitcast i8* %2 to double*
  store double %13, double* %14, align 1
  %15 = getelementptr inbounds i8, i8* %2, i64 8
  %16 = bitcast i8* %15 to i64*
  store i64 %10, i64* %16, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L6IDIVaxI2MnIhEEEP6MemoryS4_R5StateT_(%struct.Memory*, %struct.State* dereferenceable(3376), i64)  {
  %4 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 1, i32 0
  %5 = bitcast %union.anon* %4 to %struct.anon.2*
  %6 = bitcast %union.anon* %4 to i8*
  %7 = load i8, i8* %6, align 8
  %8 = zext i8 %7 to i16
  %9 = getelementptr inbounds %struct.anon.2, %struct.anon.2* %5, i64 0, i32 1
  %10 = load i8, i8* %9, align 1
  %11 = inttoptr i64 %2 to i8*
  %12 = load i8, i8* %11
  %13 = zext i8 %10 to i16
  %14 = shl nuw i16 %13, 8
  %15 = or i16 %14, %8
  %16 = sext i16 %15 to i64
  %17 = sext i8 %12 to i64
  %18 = sdiv i64 %16, %17
  %19 = trunc i64 %18 to i16
  %20 = trunc i64 %18 to i8
  %21 = sext i8 %20 to i16
  %22 = icmp eq i16 %19, %21
  br i1 %22, label %27, label %23

; <label>:23:                                     ; preds = %3
  %24 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 33, i32 0, i32 0
  %25 = load i64, i64* %24, align 8
  %26 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %1, i64 %25, %struct.Memory* %0) 
  br label %36

; <label>:27:                                     ; preds = %3
  %28 = srem i64 %16, %17
  %29 = trunc i64 %28 to i8
  store i8 %20, i8* %6, align 1
  store i8 %29, i8* %9, align 1
  %30 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  store i8 0, i8* %30, align 1
  %31 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 0, i8* %31, align 1
  %32 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 0, i8* %32, align 1
  %33 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  store i8 0, i8* %33, align 1
  %34 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 0, i8* %34, align 1
  %35 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 0, i8* %35, align 1
  br label %36

; <label>:36:                                     ; preds = %27, %23
  %37 = phi %struct.Memory* [ %26, %23 ], [ %0, %27 ]
  ret %struct.Memory* %37
}

; Function Attrs: noduplicate noinline nounwind optnone
declare %struct.Memory* @__remill_error(%struct.State* dereferenceable(3376), i64, %struct.Memory*) 

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L6IDIVaxI2RnIhEEEP6MemoryS4_R5StateT_(%struct.Memory*, %struct.State* dereferenceable(3376), i64)  {
  %4 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 1, i32 0
  %5 = bitcast %union.anon* %4 to %struct.anon.2*
  %6 = bitcast %union.anon* %4 to i8*
  %7 = load i8, i8* %6, align 8
  %8 = zext i8 %7 to i16
  %9 = getelementptr inbounds %struct.anon.2, %struct.anon.2* %5, i64 0, i32 1
  %10 = load i8, i8* %9, align 1
  %11 = zext i8 %10 to i16
  %12 = shl nuw i16 %11, 8
  %13 = or i16 %12, %8
  %14 = sext i16 %13 to i64
  %15 = shl i64 %2, 56
  %16 = ashr exact i64 %15, 56
  %17 = sdiv i64 %14, %16
  %18 = trunc i64 %17 to i16
  %19 = trunc i64 %17 to i8
  %20 = sext i8 %19 to i16
  %21 = icmp eq i16 %18, %20
  br i1 %21, label %26, label %22

; <label>:22:                                     ; preds = %3
  %23 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 33, i32 0, i32 0
  %24 = load i64, i64* %23, align 8
  %25 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %1, i64 %24, %struct.Memory* %0) 
  br label %35

; <label>:26:                                     ; preds = %3
  %27 = srem i64 %14, %16
  %28 = trunc i64 %27 to i8
  store i8 %19, i8* %6, align 1
  store i8 %28, i8* %9, align 1
  %29 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  store i8 0, i8* %29, align 1
  %30 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 0, i8* %30, align 1
  %31 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 0, i8* %31, align 1
  %32 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  store i8 0, i8* %32, align 1
  %33 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 0, i8* %33, align 1
  %34 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 0, i8* %34, align 1
  br label %35

; <label>:35:                                     ; preds = %26, %22
  %36 = phi %struct.Memory* [ %25, %22 ], [ %0, %26 ]
  ret %struct.Memory* %36
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L8IDIVdxaxI2MnItEEEP6MemoryS4_R5StateT_(%struct.Memory*, %struct.State* dereferenceable(3376), i64)  {
  %4 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 1, i32 0
  %5 = bitcast %union.anon* %4 to i16*
  %6 = load i16, i16* %5, align 8
  %7 = zext i16 %6 to i32
  %8 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 7, i32 0
  %9 = bitcast %union.anon* %8 to i16*
  %10 = load i16, i16* %9, align 8
  %11 = inttoptr i64 %2 to i16*
  %12 = load i16, i16* %11
  %13 = zext i16 %10 to i32
  %14 = shl nuw i32 %13, 16
  %15 = or i32 %14, %7
  %16 = sext i32 %15 to i64
  %17 = sext i16 %12 to i64
  %18 = sdiv i64 %16, %17
  %19 = trunc i64 %18 to i32
  %20 = trunc i64 %18 to i16
  %21 = sext i16 %20 to i32
  %22 = icmp eq i32 %19, %21
  br i1 %22, label %27, label %23

; <label>:23:                                     ; preds = %3
  %24 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 33, i32 0, i32 0
  %25 = load i64, i64* %24, align 8
  %26 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %1, i64 %25, %struct.Memory* %0) 
  br label %36

; <label>:27:                                     ; preds = %3
  %28 = srem i64 %16, %17
  %29 = trunc i64 %28 to i16
  store i16 %20, i16* %5, align 2
  store i16 %29, i16* %9, align 2
  %30 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  store i8 0, i8* %30, align 1
  %31 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 0, i8* %31, align 1
  %32 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 0, i8* %32, align 1
  %33 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  store i8 0, i8* %33, align 1
  %34 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 0, i8* %34, align 1
  %35 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 0, i8* %35, align 1
  br label %36

; <label>:36:                                     ; preds = %27, %23
  %37 = phi %struct.Memory* [ %26, %23 ], [ %0, %27 ]
  ret %struct.Memory* %37
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L10IDIVedxeaxI2MnIjEEEP6MemoryS4_R5StateT_(%struct.Memory*, %struct.State* dereferenceable(3376), i64)  {
  %4 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 1, i32 0
  %5 = bitcast %union.anon* %4 to i32*
  %6 = load i32, i32* %5, align 8
  %7 = zext i32 %6 to i64
  %8 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 7, i32 0
  %9 = bitcast %union.anon* %8 to i32*
  %10 = load i32, i32* %9, align 8
  %11 = zext i32 %10 to i64
  %12 = inttoptr i64 %2 to i32*
  %13 = load i32, i32* %12
  %14 = sext i32 %13 to i64
  %15 = shl nuw i64 %11, 32
  %16 = or i64 %15, %7
  %17 = sdiv i64 %16, %14
  %18 = shl i64 %17, 32
  %19 = ashr exact i64 %18, 32
  %20 = icmp eq i64 %17, %19
  br i1 %20, label %25, label %21

; <label>:21:                                     ; preds = %3
  %22 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 33, i32 0, i32 0
  %23 = load i64, i64* %22, align 8
  %24 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %1, i64 %23, %struct.Memory* %0) 
  br label %37

; <label>:25:                                     ; preds = %3
  %26 = srem i64 %16, %14
  %27 = getelementptr inbounds %union.anon, %union.anon* %4, i64 0, i32 0
  %28 = and i64 %17, 4294967295
  store i64 %28, i64* %27, align 8
  %29 = getelementptr inbounds %union.anon, %union.anon* %8, i64 0, i32 0
  %30 = and i64 %26, 4294967295
  store i64 %30, i64* %29, align 8
  %31 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  store i8 0, i8* %31, align 1
  %32 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 0, i8* %32, align 1
  %33 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 0, i8* %33, align 1
  %34 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  store i8 0, i8* %34, align 1
  %35 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 0, i8* %35, align 1
  %36 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 0, i8* %36, align 1
  br label %37

; <label>:37:                                     ; preds = %25, %21
  %38 = phi %struct.Memory* [ %24, %21 ], [ %0, %25 ]
  ret %struct.Memory* %38
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L10IDIVrdxraxI2MnImEEEP6MemoryS4_R5StateT_(%struct.Memory*, %struct.State* dereferenceable(3376), i64)  {
  %4 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 1, i32 0, i32 0
  %5 = load i64, i64* %4, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 7, i32 0, i32 0
  %7 = load i64, i64* %6, align 8
  %8 = inttoptr i64 %2 to i64*
  %9 = load i64, i64* %8
  %10 = sext i64 %9 to i128
  %11 = and i128 %10, -18446744073709551616
  %12 = zext i64 %7 to i128
  %13 = shl nuw i128 %12, 64
  %14 = zext i64 %5 to i128
  %15 = or i128 %13, %14
  %16 = zext i64 %9 to i128
  %17 = or i128 %11, %16
  %18 = sdiv i128 %15, %17
  %19 = trunc i128 %18 to i64
  %20 = and i128 %18, 18446744073709551615
  %21 = sext i64 %19 to i128
  %22 = and i128 %21, -18446744073709551616
  %23 = or i128 %22, %20
  %24 = icmp eq i128 %18, %23
  br i1 %24, label %29, label %25

; <label>:25:                                     ; preds = %3
  %26 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 33, i32 0, i32 0
  %27 = load i64, i64* %26, align 8
  %28 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %1, i64 %27, %struct.Memory* %0) 
  br label %38

; <label>:29:                                     ; preds = %3
  %30 = srem i128 %15, %17
  %31 = trunc i128 %30 to i64
  store i64 %19, i64* %4, align 8
  store i64 %31, i64* %6, align 8
  %32 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  store i8 0, i8* %32, align 1
  %33 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 0, i8* %33, align 1
  %34 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 0, i8* %34, align 1
  %35 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  store i8 0, i8* %35, align 1
  %36 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 0, i8* %36, align 1
  %37 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 0, i8* %37, align 1
  br label %38

; <label>:38:                                     ; preds = %29, %25
  %39 = phi %struct.Memory* [ %28, %25 ], [ %0, %29 ]
  ret %struct.Memory* %39
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L8IDIVdxaxI2RnItEEEP6MemoryS4_R5StateT_(%struct.Memory*, %struct.State* dereferenceable(3376), i64)  {
  %4 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 1, i32 0
  %5 = bitcast %union.anon* %4 to i16*
  %6 = load i16, i16* %5, align 8
  %7 = zext i16 %6 to i32
  %8 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 7, i32 0
  %9 = bitcast %union.anon* %8 to i16*
  %10 = load i16, i16* %9, align 8
  %11 = zext i16 %10 to i32
  %12 = shl nuw i32 %11, 16
  %13 = or i32 %12, %7
  %14 = sext i32 %13 to i64
  %15 = shl i64 %2, 48
  %16 = ashr exact i64 %15, 48
  %17 = sdiv i64 %14, %16
  %18 = trunc i64 %17 to i32
  %19 = trunc i64 %17 to i16
  %20 = sext i16 %19 to i32
  %21 = icmp eq i32 %18, %20
  br i1 %21, label %26, label %22

; <label>:22:                                     ; preds = %3
  %23 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 33, i32 0, i32 0
  %24 = load i64, i64* %23, align 8
  %25 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %1, i64 %24, %struct.Memory* %0) 
  br label %35

; <label>:26:                                     ; preds = %3
  %27 = srem i64 %14, %16
  %28 = trunc i64 %27 to i16
  store i16 %19, i16* %5, align 2
  store i16 %28, i16* %9, align 2
  %29 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  store i8 0, i8* %29, align 1
  %30 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 0, i8* %30, align 1
  %31 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 0, i8* %31, align 1
  %32 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  store i8 0, i8* %32, align 1
  %33 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 0, i8* %33, align 1
  %34 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 0, i8* %34, align 1
  br label %35

; <label>:35:                                     ; preds = %26, %22
  %36 = phi %struct.Memory* [ %25, %22 ], [ %0, %26 ]
  ret %struct.Memory* %36
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_(%struct.Memory*, %struct.State* dereferenceable(3376), i64)  {
  %4 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 1, i32 0
  %5 = bitcast %union.anon* %4 to i32*
  %6 = load i32, i32* %5, align 8
  %7 = zext i32 %6 to i64
  %8 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 7, i32 0
  %9 = bitcast %union.anon* %8 to i32*
  %10 = load i32, i32* %9, align 8
  %11 = zext i32 %10 to i64
  %12 = shl i64 %2, 32
  %13 = ashr exact i64 %12, 32
  %14 = shl nuw i64 %11, 32
  %15 = or i64 %14, %7
  %16 = sdiv i64 %15, %13
  %17 = shl i64 %16, 32
  %18 = ashr exact i64 %17, 32
  %19 = icmp eq i64 %16, %18
  br i1 %19, label %24, label %20

; <label>:20:                                     ; preds = %3
  %21 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 33, i32 0, i32 0
  %22 = load i64, i64* %21, align 8
  %23 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %1, i64 %22, %struct.Memory* %0) 
  br label %36

; <label>:24:                                     ; preds = %3
  %25 = srem i64 %15, %13
  %26 = getelementptr inbounds %union.anon, %union.anon* %4, i64 0, i32 0
  %27 = and i64 %16, 4294967295
  store i64 %27, i64* %26, align 8
  %28 = getelementptr inbounds %union.anon, %union.anon* %8, i64 0, i32 0
  %29 = and i64 %25, 4294967295
  store i64 %29, i64* %28, align 8
  %30 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  store i8 0, i8* %30, align 1
  %31 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 0, i8* %31, align 1
  %32 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 0, i8* %32, align 1
  %33 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  store i8 0, i8* %33, align 1
  %34 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 0, i8* %34, align 1
  %35 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 0, i8* %35, align 1
  br label %36

; <label>:36:                                     ; preds = %24, %20
  %37 = phi %struct.Memory* [ %23, %20 ], [ %0, %24 ]
  ret %struct.Memory* %37
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_(%struct.Memory*, %struct.State* dereferenceable(3376), i64)  {
  %4 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 1, i32 0, i32 0
  %5 = load i64, i64* %4, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 7, i32 0, i32 0
  %7 = load i64, i64* %6, align 8
  %8 = sext i64 %2 to i128
  %9 = and i128 %8, -18446744073709551616
  %10 = zext i64 %7 to i128
  %11 = shl nuw i128 %10, 64
  %12 = zext i64 %5 to i128
  %13 = or i128 %11, %12
  %14 = zext i64 %2 to i128
  %15 = or i128 %9, %14
  %16 = sdiv i128 %13, %15
  %17 = trunc i128 %16 to i64
  %18 = and i128 %16, 18446744073709551615
  %19 = sext i64 %17 to i128
  %20 = and i128 %19, -18446744073709551616
  %21 = or i128 %20, %18
  %22 = icmp eq i128 %16, %21
  br i1 %22, label %27, label %23

; <label>:23:                                     ; preds = %3
  %24 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 33, i32 0, i32 0
  %25 = load i64, i64* %24, align 8
  %26 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %1, i64 %25, %struct.Memory* %0) 
  br label %36

; <label>:27:                                     ; preds = %3
  %28 = srem i128 %13, %15
  %29 = trunc i128 %28 to i64
  store i64 %17, i64* %4, align 8
  store i64 %29, i64* %6, align 8
  %30 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  store i8 0, i8* %30, align 1
  %31 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 0, i8* %31, align 1
  %32 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 0, i8* %32, align 1
  %33 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  store i8 0, i8* %33, align 1
  %34 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 0, i8* %34, align 1
  %35 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 0, i8* %35, align 1
  br label %36

; <label>:36:                                     ; preds = %27, %23
  %37 = phi %struct.Memory* [ %26, %23 ], [ %0, %27 ]
  ret %struct.Memory* %37
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L5DIVaxI2MnIhEEEP6MemoryS4_R5StateT_(%struct.Memory*, %struct.State* dereferenceable(3376), i64)  {
  %4 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 1, i32 0
  %5 = bitcast %union.anon* %4 to %struct.anon.2*
  %6 = bitcast %union.anon* %4 to i8*
  %7 = load i8, i8* %6, align 8
  %8 = zext i8 %7 to i16
  %9 = getelementptr inbounds %struct.anon.2, %struct.anon.2* %5, i64 0, i32 1
  %10 = load i8, i8* %9, align 1
  %11 = inttoptr i64 %2 to i8*
  %12 = load i8, i8* %11
  %13 = zext i8 %12 to i16
  %14 = zext i8 %10 to i16
  %15 = shl nuw i16 %14, 8
  %16 = or i16 %15, %8
  %17 = udiv i16 %16, %13
  %18 = and i16 %17, 255
  %19 = icmp eq i16 %17, %18
  br i1 %19, label %24, label %20

; <label>:20:                                     ; preds = %3
  %21 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 33, i32 0, i32 0
  %22 = load i64, i64* %21, align 8
  %23 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %1, i64 %22, %struct.Memory* %0) 
  br label %34

; <label>:24:                                     ; preds = %3
  %25 = trunc i16 %17 to i8
  %26 = urem i16 %16, %13
  %27 = trunc i16 %26 to i8
  store i8 %25, i8* %6, align 1
  store i8 %27, i8* %9, align 1
  %28 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  store i8 0, i8* %28, align 1
  %29 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 0, i8* %29, align 1
  %30 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 0, i8* %30, align 1
  %31 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  store i8 0, i8* %31, align 1
  %32 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 0, i8* %32, align 1
  %33 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 0, i8* %33, align 1
  br label %34

; <label>:34:                                     ; preds = %24, %20
  %35 = phi %struct.Memory* [ %23, %20 ], [ %0, %24 ]
  ret %struct.Memory* %35
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L5DIVaxI2RnIhEEEP6MemoryS4_R5StateT_(%struct.Memory*, %struct.State* dereferenceable(3376), i64)  {
  %4 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 1, i32 0
  %5 = bitcast %union.anon* %4 to %struct.anon.2*
  %6 = bitcast %union.anon* %4 to i8*
  %7 = load i8, i8* %6, align 8
  %8 = zext i8 %7 to i16
  %9 = getelementptr inbounds %struct.anon.2, %struct.anon.2* %5, i64 0, i32 1
  %10 = load i8, i8* %9, align 1
  %11 = trunc i64 %2 to i16
  %12 = and i16 %11, 255
  %13 = zext i8 %10 to i16
  %14 = shl nuw i16 %13, 8
  %15 = or i16 %14, %8
  %16 = udiv i16 %15, %12
  %17 = and i16 %16, 255
  %18 = icmp eq i16 %16, %17
  br i1 %18, label %23, label %19

; <label>:19:                                     ; preds = %3
  %20 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 33, i32 0, i32 0
  %21 = load i64, i64* %20, align 8
  %22 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %1, i64 %21, %struct.Memory* %0) 
  br label %33

; <label>:23:                                     ; preds = %3
  %24 = trunc i16 %16 to i8
  %25 = urem i16 %15, %12
  %26 = trunc i16 %25 to i8
  store i8 %24, i8* %6, align 1
  store i8 %26, i8* %9, align 1
  %27 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  store i8 0, i8* %27, align 1
  %28 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 0, i8* %28, align 1
  %29 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 0, i8* %29, align 1
  %30 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  store i8 0, i8* %30, align 1
  %31 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 0, i8* %31, align 1
  %32 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 0, i8* %32, align 1
  br label %33

; <label>:33:                                     ; preds = %23, %19
  %34 = phi %struct.Memory* [ %22, %19 ], [ %0, %23 ]
  ret %struct.Memory* %34
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L7DIVdxaxI2MnItEEEP6MemoryS4_R5StateT_(%struct.Memory*, %struct.State* dereferenceable(3376), i64)  {
  %4 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 1, i32 0
  %5 = bitcast %union.anon* %4 to i16*
  %6 = load i16, i16* %5, align 8
  %7 = zext i16 %6 to i32
  %8 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 7, i32 0
  %9 = bitcast %union.anon* %8 to i16*
  %10 = load i16, i16* %9, align 8
  %11 = inttoptr i64 %2 to i16*
  %12 = load i16, i16* %11
  %13 = zext i16 %12 to i32
  %14 = zext i16 %10 to i32
  %15 = shl nuw i32 %14, 16
  %16 = or i32 %15, %7
  %17 = udiv i32 %16, %13
  %18 = and i32 %17, 65535
  %19 = icmp eq i32 %17, %18
  br i1 %19, label %24, label %20

; <label>:20:                                     ; preds = %3
  %21 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 33, i32 0, i32 0
  %22 = load i64, i64* %21, align 8
  %23 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %1, i64 %22, %struct.Memory* %0) 
  br label %34

; <label>:24:                                     ; preds = %3
  %25 = trunc i32 %17 to i16
  %26 = urem i32 %16, %13
  %27 = trunc i32 %26 to i16
  store i16 %25, i16* %5, align 2
  store i16 %27, i16* %9, align 2
  %28 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  store i8 0, i8* %28, align 1
  %29 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 0, i8* %29, align 1
  %30 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 0, i8* %30, align 1
  %31 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  store i8 0, i8* %31, align 1
  %32 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 0, i8* %32, align 1
  %33 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 0, i8* %33, align 1
  br label %34

; <label>:34:                                     ; preds = %24, %20
  %35 = phi %struct.Memory* [ %23, %20 ], [ %0, %24 ]
  ret %struct.Memory* %35
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L9DIVedxeaxI2MnIjEEEP6MemoryS4_R5StateT_(%struct.Memory*, %struct.State* dereferenceable(3376), i64)  {
  %4 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 1, i32 0
  %5 = bitcast %union.anon* %4 to i32*
  %6 = load i32, i32* %5, align 8
  %7 = zext i32 %6 to i64
  %8 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 7, i32 0
  %9 = bitcast %union.anon* %8 to i32*
  %10 = load i32, i32* %9, align 8
  %11 = zext i32 %10 to i64
  %12 = inttoptr i64 %2 to i32*
  %13 = load i32, i32* %12
  %14 = zext i32 %13 to i64
  %15 = shl nuw i64 %11, 32
  %16 = or i64 %15, %7
  %17 = udiv i64 %16, %14
  %18 = and i64 %17, 4294967295
  %19 = icmp eq i64 %17, %18
  br i1 %19, label %24, label %20

; <label>:20:                                     ; preds = %3
  %21 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 33, i32 0, i32 0
  %22 = load i64, i64* %21, align 8
  %23 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %1, i64 %22, %struct.Memory* %0) 
  br label %34

; <label>:24:                                     ; preds = %3
  %25 = urem i64 %16, %14
  %26 = getelementptr inbounds %union.anon, %union.anon* %4, i64 0, i32 0
  store i64 %17, i64* %26, align 8
  %27 = getelementptr inbounds %union.anon, %union.anon* %8, i64 0, i32 0
  store i64 %25, i64* %27, align 8
  %28 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  store i8 0, i8* %28, align 1
  %29 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 0, i8* %29, align 1
  %30 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 0, i8* %30, align 1
  %31 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  store i8 0, i8* %31, align 1
  %32 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 0, i8* %32, align 1
  %33 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 0, i8* %33, align 1
  br label %34

; <label>:34:                                     ; preds = %24, %20
  %35 = phi %struct.Memory* [ %23, %20 ], [ %0, %24 ]
  ret %struct.Memory* %35
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L9DIVrdxraxI2MnImEEEP6MemoryS4_R5StateT_(%struct.Memory*, %struct.State* dereferenceable(3376), i64)  {
  %4 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 1, i32 0, i32 0
  %5 = load i64, i64* %4, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 7, i32 0, i32 0
  %7 = load i64, i64* %6, align 8
  %8 = inttoptr i64 %2 to i64*
  %9 = load i64, i64* %8
  %10 = zext i64 %7 to i128
  %11 = shl nuw i128 %10, 64
  %12 = zext i64 %5 to i128
  %13 = or i128 %11, %12
  %14 = zext i64 %9 to i128
  %15 = udiv i128 %13, %14
  %16 = and i128 %15, 18446744073709551615
  %17 = icmp eq i128 %15, %16
  br i1 %17, label %22, label %18

; <label>:18:                                     ; preds = %3
  %19 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 33, i32 0, i32 0
  %20 = load i64, i64* %19, align 8
  %21 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %1, i64 %20, %struct.Memory* %0) 
  br label %32

; <label>:22:                                     ; preds = %3
  %23 = urem i128 %13, %14
  %24 = trunc i128 %23 to i64
  %25 = trunc i128 %15 to i64
  store i64 %25, i64* %4, align 8
  store i64 %24, i64* %6, align 8
  %26 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  store i8 0, i8* %26, align 1
  %27 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 0, i8* %27, align 1
  %28 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 0, i8* %28, align 1
  %29 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  store i8 0, i8* %29, align 1
  %30 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 0, i8* %30, align 1
  %31 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 0, i8* %31, align 1
  br label %32

; <label>:32:                                     ; preds = %22, %18
  %33 = phi %struct.Memory* [ %21, %18 ], [ %0, %22 ]
  ret %struct.Memory* %33
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L7DIVdxaxI2RnItEEEP6MemoryS4_R5StateT_(%struct.Memory*, %struct.State* dereferenceable(3376), i64)  {
  %4 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 1, i32 0
  %5 = bitcast %union.anon* %4 to i16*
  %6 = load i16, i16* %5, align 8
  %7 = zext i16 %6 to i32
  %8 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 7, i32 0
  %9 = bitcast %union.anon* %8 to i16*
  %10 = load i16, i16* %9, align 8
  %11 = trunc i64 %2 to i32
  %12 = and i32 %11, 65535
  %13 = zext i16 %10 to i32
  %14 = shl nuw i32 %13, 16
  %15 = or i32 %14, %7
  %16 = udiv i32 %15, %12
  %17 = and i32 %16, 65535
  %18 = icmp eq i32 %16, %17
  br i1 %18, label %23, label %19

; <label>:19:                                     ; preds = %3
  %20 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 33, i32 0, i32 0
  %21 = load i64, i64* %20, align 8
  %22 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %1, i64 %21, %struct.Memory* %0) 
  br label %33

; <label>:23:                                     ; preds = %3
  %24 = trunc i32 %16 to i16
  %25 = urem i32 %15, %12
  %26 = trunc i32 %25 to i16
  store i16 %24, i16* %5, align 2
  store i16 %26, i16* %9, align 2
  %27 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  store i8 0, i8* %27, align 1
  %28 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 0, i8* %28, align 1
  %29 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 0, i8* %29, align 1
  %30 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  store i8 0, i8* %30, align 1
  %31 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 0, i8* %31, align 1
  %32 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 0, i8* %32, align 1
  br label %33

; <label>:33:                                     ; preds = %23, %19
  %34 = phi %struct.Memory* [ %22, %19 ], [ %0, %23 ]
  ret %struct.Memory* %34
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L9DIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_(%struct.Memory*, %struct.State* dereferenceable(3376), i64)  {
  %4 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 1, i32 0
  %5 = bitcast %union.anon* %4 to i32*
  %6 = load i32, i32* %5, align 8
  %7 = zext i32 %6 to i64
  %8 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 7, i32 0
  %9 = bitcast %union.anon* %8 to i32*
  %10 = load i32, i32* %9, align 8
  %11 = zext i32 %10 to i64
  %12 = and i64 %2, 4294967295
  %13 = shl nuw i64 %11, 32
  %14 = or i64 %13, %7
  %15 = udiv i64 %14, %12
  %16 = and i64 %15, 4294967295
  %17 = icmp eq i64 %15, %16
  br i1 %17, label %22, label %18

; <label>:18:                                     ; preds = %3
  %19 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 33, i32 0, i32 0
  %20 = load i64, i64* %19, align 8
  %21 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %1, i64 %20, %struct.Memory* %0) 
  br label %32

; <label>:22:                                     ; preds = %3
  %23 = urem i64 %14, %12
  %24 = getelementptr inbounds %union.anon, %union.anon* %4, i64 0, i32 0
  store i64 %15, i64* %24, align 8
  %25 = getelementptr inbounds %union.anon, %union.anon* %8, i64 0, i32 0
  store i64 %23, i64* %25, align 8
  %26 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  store i8 0, i8* %26, align 1
  %27 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 0, i8* %27, align 1
  %28 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 0, i8* %28, align 1
  %29 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  store i8 0, i8* %29, align 1
  %30 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 0, i8* %30, align 1
  %31 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 0, i8* %31, align 1
  br label %32

; <label>:32:                                     ; preds = %22, %18
  %33 = phi %struct.Memory* [ %21, %18 ], [ %0, %22 ]
  ret %struct.Memory* %33
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L9DIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_(%struct.Memory*, %struct.State* dereferenceable(3376), i64)  {
  %4 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 1, i32 0, i32 0
  %5 = load i64, i64* %4, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 7, i32 0, i32 0
  %7 = load i64, i64* %6, align 8
  %8 = zext i64 %7 to i128
  %9 = shl nuw i128 %8, 64
  %10 = zext i64 %5 to i128
  %11 = or i128 %9, %10
  %12 = zext i64 %2 to i128
  %13 = udiv i128 %11, %12
  %14 = and i128 %13, 18446744073709551615
  %15 = icmp eq i128 %13, %14
  br i1 %15, label %20, label %16

; <label>:16:                                     ; preds = %3
  %17 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 33, i32 0, i32 0
  %18 = load i64, i64* %17, align 8
  %19 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %1, i64 %18, %struct.Memory* %0) 
  br label %30

; <label>:20:                                     ; preds = %3
  %21 = urem i128 %11, %12
  %22 = trunc i128 %21 to i64
  %23 = trunc i128 %13 to i64
  store i64 %23, i64* %4, align 8
  store i64 %22, i64* %6, align 8
  %24 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  store i8 0, i8* %24, align 1
  %25 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 0, i8* %25, align 1
  %26 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 0, i8* %26, align 1
  %27 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  store i8 0, i8* %27, align 1
  %28 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 0, i8* %28, align 1
  %29 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 0, i8* %29, align 1
  br label %30

; <label>:30:                                     ; preds = %20, %16
  %31 = phi %struct.Memory* [ %19, %16 ], [ %0, %20 ]
  ret %struct.Memory* %31
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L5DIVPSI3VnWI8vec128_tE2VnIS2_E3MVnIS2_EEEP6MemoryS9_R5StateT_T0_T1_(%struct.Memory* returned, %struct.State* nocapture readnone dereferenceable(3376), i8* nocapture, i8* nocapture readonly, i64)  {
  %6 = bitcast i8* %3 to <2 x float>*
  %7 = load <2 x float>, <2 x float>* %6, align 1
  %8 = getelementptr inbounds i8, i8* %3, i64 8
  %9 = bitcast i8* %8 to <2 x float>*
  %10 = load <2 x float>, <2 x float>* %9, align 1
  %11 = inttoptr i64 %4 to float*
  %12 = load float, float* %11
  %13 = add i64 %4, 4
  %14 = inttoptr i64 %13 to float*
  %15 = load float, float* %14
  %16 = add i64 %4, 8
  %17 = inttoptr i64 %16 to float*
  %18 = load float, float* %17
  %19 = add i64 %4, 12
  %20 = inttoptr i64 %19 to float*
  %21 = load float, float* %20
  %22 = shufflevector <2 x float> %7, <2 x float> %10, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %23 = insertelement <4 x float> undef, float %12, i32 0
  %24 = insertelement <4 x float> %23, float %15, i32 1
  %25 = insertelement <4 x float> %24, float %18, i32 2
  %26 = insertelement <4 x float> %25, float %21, i32 3
  %27 = fdiv <4 x float> %22, %26
  %28 = bitcast i8* %2 to <4 x float>*
  store <4 x float> %27, <4 x float>* %28, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L5DIVPSI3VnWI8vec128_tE2VnIS2_ES5_EEP6MemoryS7_R5StateT_T0_T1_(%struct.Memory* readnone returned, %struct.State* nocapture readnone dereferenceable(3376), i8* nocapture, i8* nocapture readonly, i8* nocapture readonly)  {
  %6 = bitcast i8* %3 to <2 x float>*
  %7 = load <2 x float>, <2 x float>* %6, align 1
  %8 = getelementptr inbounds i8, i8* %3, i64 8
  %9 = bitcast i8* %8 to <2 x float>*
  %10 = load <2 x float>, <2 x float>* %9, align 1
  %11 = bitcast i8* %4 to <2 x float>*
  %12 = load <2 x float>, <2 x float>* %11, align 1
  %13 = getelementptr inbounds i8, i8* %4, i64 8
  %14 = bitcast i8* %13 to <2 x float>*
  %15 = load <2 x float>, <2 x float>* %14, align 1
  %16 = shufflevector <2 x float> %7, <2 x float> %10, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %17 = shufflevector <2 x float> %12, <2 x float> %15, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %18 = fdiv <4 x float> %16, %17
  %19 = bitcast i8* %2 to <4 x float>*
  store <4 x float> %18, <4 x float>* %19, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L5DIVPDI3VnWI8vec128_tE2VnIS2_E3MVnIS2_EEEP6MemoryS9_R5StateT_T0_T1_(%struct.Memory* returned, %struct.State* nocapture readnone dereferenceable(3376), i8* nocapture, i8* nocapture readonly, i64)  {
  %6 = bitcast i8* %3 to <2 x double>*
  %7 = load <2 x double>, <2 x double>* %6, align 1
  %8 = inttoptr i64 %4 to double*
  %9 = load double, double* %8
  %10 = add i64 %4, 8
  %11 = inttoptr i64 %10 to double*
  %12 = load double, double* %11
  %13 = insertelement <2 x double> undef, double %9, i32 0
  %14 = insertelement <2 x double> %13, double %12, i32 1
  %15 = fdiv <2 x double> %7, %14
  %16 = bitcast i8* %2 to <2 x double>*
  store <2 x double> %15, <2 x double>* %16, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L5DIVPDI3VnWI8vec128_tE2VnIS2_ES5_EEP6MemoryS7_R5StateT_T0_T1_(%struct.Memory* readnone returned, %struct.State* nocapture readnone dereferenceable(3376), i8* nocapture, i8* nocapture readonly, i8* nocapture readonly)  {
  %6 = bitcast i8* %3 to <2 x double>*
  %7 = load <2 x double>, <2 x double>* %6, align 1
  %8 = bitcast i8* %4 to <2 x double>*
  %9 = load <2 x double>, <2 x double>* %8, align 1
  %10 = fdiv <2 x double> %7, %9
  %11 = bitcast i8* %2 to <2 x double>*
  store <2 x double> %10, <2 x double>* %11, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L5DIVSSI3VnWI8vec128_tE2VnIS2_E3MVnIS2_EEEP6MemoryS9_R5StateT_T0_T1_(%struct.Memory* returned, %struct.State* nocapture readnone dereferenceable(3376), i8* nocapture, i8* nocapture readonly, i64)  {
  %6 = bitcast i8* %3 to <2 x float>*
  %7 = load <2 x float>, <2 x float>* %6, align 1
  %8 = getelementptr inbounds i8, i8* %3, i64 8
  %9 = bitcast i8* %8 to <2 x i32>*
  %10 = load <2 x i32>, <2 x i32>* %9, align 1
  %11 = inttoptr i64 %4 to float*
  %12 = load float, float* %11
  %13 = extractelement <2 x float> %7, i32 0
  %14 = fdiv float %13, %12
  %15 = bitcast i8* %2 to float*
  store float %14, float* %15, align 1
  %16 = bitcast <2 x float> %7 to <2 x i32>
  %17 = extractelement <2 x i32> %16, i32 1
  %18 = getelementptr inbounds i8, i8* %2, i64 4
  %19 = bitcast i8* %18 to i32*
  store i32 %17, i32* %19, align 1
  %20 = extractelement <2 x i32> %10, i32 0
  %21 = getelementptr inbounds i8, i8* %2, i64 8
  %22 = bitcast i8* %21 to i32*
  store i32 %20, i32* %22, align 1
  %23 = extractelement <2 x i32> %10, i32 1
  %24 = getelementptr inbounds i8, i8* %2, i64 12
  %25 = bitcast i8* %24 to i32*
  store i32 %23, i32* %25, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L5DIVSSI3VnWI8vec128_tE2VnIS2_ES5_EEP6MemoryS7_R5StateT_T0_T1_(%struct.Memory* readnone returned, %struct.State* nocapture readnone dereferenceable(3376), i8* nocapture, i8* nocapture readonly, i8* nocapture readonly)  {
  %6 = bitcast i8* %3 to <2 x float>*
  %7 = load <2 x float>, <2 x float>* %6, align 1
  %8 = getelementptr inbounds i8, i8* %3, i64 8
  %9 = bitcast i8* %8 to <2 x i32>*
  %10 = load <2 x i32>, <2 x i32>* %9, align 1
  %11 = bitcast i8* %4 to <2 x float>*
  %12 = load <2 x float>, <2 x float>* %11, align 1
  %13 = extractelement <2 x float> %7, i32 0
  %14 = extractelement <2 x float> %12, i32 0
  %15 = fdiv float %13, %14
  %16 = bitcast i8* %2 to float*
  store float %15, float* %16, align 1
  %17 = bitcast <2 x float> %7 to <2 x i32>
  %18 = extractelement <2 x i32> %17, i32 1
  %19 = getelementptr inbounds i8, i8* %2, i64 4
  %20 = bitcast i8* %19 to i32*
  store i32 %18, i32* %20, align 1
  %21 = extractelement <2 x i32> %10, i32 0
  %22 = getelementptr inbounds i8, i8* %2, i64 8
  %23 = bitcast i8* %22 to i32*
  store i32 %21, i32* %23, align 1
  %24 = extractelement <2 x i32> %10, i32 1
  %25 = getelementptr inbounds i8, i8* %2, i64 12
  %26 = bitcast i8* %25 to i32*
  store i32 %24, i32* %26, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L5DIVSDI3VnWI8vec128_tE2VnIS2_E3MVnIS2_EEEP6MemoryS9_R5StateT_T0_T1_(%struct.Memory* returned, %struct.State* nocapture readnone dereferenceable(3376), i8* nocapture, i8* nocapture readonly, i64)  {
  %6 = bitcast i8* %3 to double*
  %7 = load double, double* %6, align 1
  %8 = getelementptr inbounds i8, i8* %3, i64 8
  %9 = bitcast i8* %8 to i64*
  %10 = load i64, i64* %9, align 1
  %11 = inttoptr i64 %4 to double*
  %12 = load double, double* %11
  %13 = fdiv double %7, %12
  %14 = bitcast i8* %2 to double*
  store double %13, double* %14, align 1
  %15 = getelementptr inbounds i8, i8* %2, i64 8
  %16 = bitcast i8* %15 to i64*
  store i64 %10, i64* %16, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L5DIVSDI3VnWI8vec128_tE2VnIS2_ES5_EEP6MemoryS7_R5StateT_T0_T1_(%struct.Memory* readnone returned, %struct.State* nocapture readnone dereferenceable(3376), i8* nocapture, i8* nocapture readonly, i8* nocapture readonly)  {
  %6 = bitcast i8* %3 to double*
  %7 = load double, double* %6, align 1
  %8 = getelementptr inbounds i8, i8* %3, i64 8
  %9 = bitcast i8* %8 to i64*
  %10 = load i64, i64* %9, align 1
  %11 = bitcast i8* %4 to double*
  %12 = load double, double* %11, align 1
  %13 = fdiv double %7, %12
  %14 = bitcast i8* %2 to double*
  store double %13, double* %14, align 1
  %15 = getelementptr inbounds i8, i8* %2, i64 8
  %16 = bitcast i8* %15 to i64*
  store i64 %10, i64* %16, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3INCI3MnWIhE2MnIhEEEP6MemoryS6_R5StateT_T0_(%struct.Memory*, %struct.State* nocapture dereferenceable(3376), i64, i64)  {
  %5 = inttoptr i64 %3 to i8*
  %6 = load i8, i8* %5
  %7 = add i8 %6, 1
  %8 = inttoptr i64 %2 to i8*
  store i8 %7, i8* %8
  %9 = zext i8 %7 to i32
  %10 = tail call i32 @llvm.ctpop.i32(i32 %9) 
  %11 = trunc i32 %10 to i8
  %12 = and i8 %11, 1
  %13 = xor i8 %12, 1
  %14 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 %13, i8* %14, align 1
  %15 = xor i8 %7, %6
  %16 = lshr i8 %15, 4
  %17 = and i8 %16, 1
  %18 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 %17, i8* %18, align 1
  %19 = icmp eq i8 %7, 0
  %20 = zext i1 %19 to i8
  %21 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  store i8 %20, i8* %21, align 1
  %22 = lshr i8 %7, 7
  %23 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 %22, i8* %23, align 1
  %24 = lshr i8 %6, 7
  %25 = xor i8 %22, %24
  %26 = add nuw nsw i8 %25, %22
  %27 = icmp eq i8 %26, 2
  %28 = zext i1 %27 to i8
  %29 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 %28, i8* %29, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3INCI3RnWIhE2RnIhEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* readnone returned, %struct.State* nocapture dereferenceable(3376), i8* nocapture, i64)  {
  %5 = trunc i64 %3 to i8
  %6 = add i8 %5, 1
  store i8 %6, i8* %2, align 1
  %7 = zext i8 %6 to i32
  %8 = tail call i32 @llvm.ctpop.i32(i32 %7) 
  %9 = trunc i32 %8 to i8
  %10 = and i8 %9, 1
  %11 = xor i8 %10, 1
  %12 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 %11, i8* %12, align 1
  %13 = xor i8 %6, %5
  %14 = lshr i8 %13, 4
  %15 = and i8 %14, 1
  %16 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 %15, i8* %16, align 1
  %17 = icmp eq i8 %6, 0
  %18 = zext i1 %17 to i8
  %19 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  store i8 %18, i8* %19, align 1
  %20 = lshr i8 %6, 7
  %21 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 %20, i8* %21, align 1
  %22 = lshr i8 %5, 7
  %23 = xor i8 %20, %22
  %24 = add nuw nsw i8 %23, %20
  %25 = icmp eq i8 %24, 2
  %26 = zext i1 %25 to i8
  %27 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 %26, i8* %27, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3INCI3MnWItE2MnItEEEP6MemoryS6_R5StateT_T0_(%struct.Memory*, %struct.State* nocapture dereferenceable(3376), i64, i64)  {
  %5 = inttoptr i64 %3 to i16*
  %6 = load i16, i16* %5
  %7 = add i16 %6, 1
  %8 = inttoptr i64 %2 to i16*
  store i16 %7, i16* %8
  %9 = and i16 %7, 255
  %10 = zext i16 %9 to i32
  %11 = tail call i32 @llvm.ctpop.i32(i32 %10) 
  %12 = trunc i32 %11 to i8
  %13 = and i8 %12, 1
  %14 = xor i8 %13, 1
  %15 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 %14, i8* %15, align 1
  %16 = xor i16 %7, %6
  %17 = lshr i16 %16, 4
  %18 = trunc i16 %17 to i8
  %19 = and i8 %18, 1
  %20 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 %19, i8* %20, align 1
  %21 = icmp eq i16 %7, 0
  %22 = zext i1 %21 to i8
  %23 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  store i8 %22, i8* %23, align 1
  %24 = lshr i16 %7, 15
  %25 = trunc i16 %24 to i8
  %26 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 %25, i8* %26, align 1
  %27 = lshr i16 %6, 15
  %28 = xor i16 %24, %27
  %29 = add nuw nsw i16 %28, %24
  %30 = icmp eq i16 %29, 2
  %31 = zext i1 %30 to i8
  %32 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 %31, i8* %32, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3INCI3MnWIjE2MnIjEEEP6MemoryS6_R5StateT_T0_(%struct.Memory*, %struct.State* nocapture dereferenceable(3376), i64, i64)  {
  %5 = inttoptr i64 %3 to i32*
  %6 = load i32, i32* %5
  %7 = add i32 %6, 1
  %8 = inttoptr i64 %2 to i32*
  store i32 %7, i32* %8
  %9 = and i32 %7, 255
  %10 = tail call i32 @llvm.ctpop.i32(i32 %9) 
  %11 = trunc i32 %10 to i8
  %12 = and i8 %11, 1
  %13 = xor i8 %12, 1
  %14 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 %13, i8* %14, align 1
  %15 = xor i32 %7, %6
  %16 = lshr i32 %15, 4
  %17 = trunc i32 %16 to i8
  %18 = and i8 %17, 1
  %19 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 %18, i8* %19, align 1
  %20 = icmp eq i32 %7, 0
  %21 = zext i1 %20 to i8
  %22 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  store i8 %21, i8* %22, align 1
  %23 = lshr i32 %7, 31
  %24 = trunc i32 %23 to i8
  %25 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 %24, i8* %25, align 1
  %26 = lshr i32 %6, 31
  %27 = xor i32 %23, %26
  %28 = add nuw nsw i32 %27, %23
  %29 = icmp eq i32 %28, 2
  %30 = zext i1 %29 to i8
  %31 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 %30, i8* %31, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3INCI3MnWImE2MnImEEEP6MemoryS6_R5StateT_T0_(%struct.Memory*, %struct.State* nocapture dereferenceable(3376), i64, i64)  {
  %5 = inttoptr i64 %3 to i64*
  %6 = load i64, i64* %5
  %7 = add i64 %6, 1
  %8 = inttoptr i64 %2 to i64*
  store i64 %7, i64* %8
  %9 = trunc i64 %7 to i32
  %10 = and i32 %9, 255
  %11 = tail call i32 @llvm.ctpop.i32(i32 %10) 
  %12 = trunc i32 %11 to i8
  %13 = and i8 %12, 1
  %14 = xor i8 %13, 1
  %15 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 %14, i8* %15, align 1
  %16 = xor i64 %7, %6
  %17 = lshr i64 %16, 4
  %18 = trunc i64 %17 to i8
  %19 = and i8 %18, 1
  %20 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 %19, i8* %20, align 1
  %21 = icmp eq i64 %7, 0
  %22 = zext i1 %21 to i8
  %23 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  store i8 %22, i8* %23, align 1
  %24 = lshr i64 %7, 63
  %25 = trunc i64 %24 to i8
  %26 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 %25, i8* %26, align 1
  %27 = lshr i64 %6, 63
  %28 = xor i64 %24, %27
  %29 = add nuw nsw i64 %28, %24
  %30 = icmp eq i64 %29, 2
  %31 = zext i1 %30 to i8
  %32 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 %31, i8* %32, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3INCI3RnWItE2RnItEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* readnone returned, %struct.State* nocapture dereferenceable(3376), i16* nocapture, i64)  {
  %5 = trunc i64 %3 to i16
  %6 = add i16 %5, 1
  store i16 %6, i16* %2, align 2
  %7 = and i16 %6, 255
  %8 = zext i16 %7 to i32
  %9 = tail call i32 @llvm.ctpop.i32(i32 %8) 
  %10 = trunc i32 %9 to i8
  %11 = and i8 %10, 1
  %12 = xor i8 %11, 1
  %13 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 %12, i8* %13, align 1
  %14 = xor i16 %6, %5
  %15 = lshr i16 %14, 4
  %16 = trunc i16 %15 to i8
  %17 = and i8 %16, 1
  %18 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 %17, i8* %18, align 1
  %19 = icmp eq i16 %6, 0
  %20 = zext i1 %19 to i8
  %21 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  store i8 %20, i8* %21, align 1
  %22 = lshr i16 %6, 15
  %23 = trunc i16 %22 to i8
  %24 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 %23, i8* %24, align 1
  %25 = lshr i16 %5, 15
  %26 = xor i16 %22, %25
  %27 = add nuw nsw i16 %26, %22
  %28 = icmp eq i16 %27, 2
  %29 = zext i1 %28 to i8
  %30 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 %29, i8* %30, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3INCI3RnWImE2RnIjEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* readnone returned, %struct.State* nocapture dereferenceable(3376), i64* nocapture, i64)  {
  %5 = trunc i64 %3 to i32
  %6 = add i32 %5, 1
  %7 = zext i32 %6 to i64
  store i64 %7, i64* %2, align 8
  %8 = and i32 %6, 255
  %9 = tail call i32 @llvm.ctpop.i32(i32 %8) 
  %10 = trunc i32 %9 to i8
  %11 = and i8 %10, 1
  %12 = xor i8 %11, 1
  %13 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 %12, i8* %13, align 1
  %14 = xor i32 %6, %5
  %15 = lshr i32 %14, 4
  %16 = trunc i32 %15 to i8
  %17 = and i8 %16, 1
  %18 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 %17, i8* %18, align 1
  %19 = icmp eq i32 %6, 0
  %20 = zext i1 %19 to i8
  %21 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  store i8 %20, i8* %21, align 1
  %22 = lshr i32 %6, 31
  %23 = trunc i32 %22 to i8
  %24 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 %23, i8* %24, align 1
  %25 = lshr i32 %5, 31
  %26 = xor i32 %22, %25
  %27 = add nuw nsw i32 %26, %22
  %28 = icmp eq i32 %27, 2
  %29 = zext i1 %28 to i8
  %30 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 %29, i8* %30, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3INCI3RnWImE2RnImEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* readnone returned, %struct.State* nocapture dereferenceable(3376), i64* nocapture, i64)  {
  %5 = add i64 %3, 1
  store i64 %5, i64* %2, align 8
  %6 = trunc i64 %5 to i32
  %7 = and i32 %6, 255
  %8 = tail call i32 @llvm.ctpop.i32(i32 %7) 
  %9 = trunc i32 %8 to i8
  %10 = and i8 %9, 1
  %11 = xor i8 %10, 1
  %12 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 %11, i8* %12, align 1
  %13 = xor i64 %5, %3
  %14 = lshr i64 %13, 4
  %15 = trunc i64 %14 to i8
  %16 = and i8 %15, 1
  %17 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 %16, i8* %17, align 1
  %18 = icmp eq i64 %5, 0
  %19 = zext i1 %18 to i8
  %20 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  store i8 %19, i8* %20, align 1
  %21 = lshr i64 %5, 63
  %22 = trunc i64 %21 to i8
  %23 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 %22, i8* %23, align 1
  %24 = lshr i64 %3, 63
  %25 = xor i64 %21, %24
  %26 = add nuw nsw i64 %25, %21
  %27 = icmp eq i64 %26, 2
  %28 = zext i1 %27 to i8
  %29 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 %28, i8* %29, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3DECI3MnWIhE2MnIhEEEP6MemoryS6_R5StateT_T0_(%struct.Memory*, %struct.State* nocapture dereferenceable(3376), i64, i64)  {
  %5 = inttoptr i64 %3 to i8*
  %6 = load i8, i8* %5
  %7 = add i8 %6, -1
  %8 = inttoptr i64 %2 to i8*
  store i8 %7, i8* %8
  %9 = zext i8 %7 to i32
  %10 = tail call i32 @llvm.ctpop.i32(i32 %9) 
  %11 = trunc i32 %10 to i8
  %12 = and i8 %11, 1
  %13 = xor i8 %12, 1
  %14 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 %13, i8* %14, align 1
  %15 = xor i8 %7, %6
  %16 = lshr i8 %15, 4
  %17 = and i8 %16, 1
  %18 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 %17, i8* %18, align 1
  %19 = icmp eq i8 %7, 0
  %20 = zext i1 %19 to i8
  %21 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  store i8 %20, i8* %21, align 1
  %22 = lshr i8 %7, 7
  %23 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 %22, i8* %23, align 1
  %24 = lshr i8 %6, 7
  %25 = xor i8 %22, %24
  %26 = add nuw nsw i8 %25, %24
  %27 = icmp eq i8 %26, 2
  %28 = zext i1 %27 to i8
  %29 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 %28, i8* %29, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3DECI3RnWIhE2RnIhEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* readnone returned, %struct.State* nocapture dereferenceable(3376), i8* nocapture, i64)  {
  %5 = trunc i64 %3 to i8
  %6 = add i8 %5, -1
  store i8 %6, i8* %2, align 1
  %7 = zext i8 %6 to i32
  %8 = tail call i32 @llvm.ctpop.i32(i32 %7) 
  %9 = trunc i32 %8 to i8
  %10 = and i8 %9, 1
  %11 = xor i8 %10, 1
  %12 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 %11, i8* %12, align 1
  %13 = xor i8 %6, %5
  %14 = lshr i8 %13, 4
  %15 = and i8 %14, 1
  %16 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 %15, i8* %16, align 1
  %17 = icmp eq i8 %6, 0
  %18 = zext i1 %17 to i8
  %19 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  store i8 %18, i8* %19, align 1
  %20 = lshr i8 %6, 7
  %21 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 %20, i8* %21, align 1
  %22 = lshr i8 %5, 7
  %23 = xor i8 %20, %22
  %24 = add nuw nsw i8 %23, %22
  %25 = icmp eq i8 %24, 2
  %26 = zext i1 %25 to i8
  %27 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 %26, i8* %27, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3DECI3MnWItE2MnItEEEP6MemoryS6_R5StateT_T0_(%struct.Memory*, %struct.State* nocapture dereferenceable(3376), i64, i64)  {
  %5 = inttoptr i64 %3 to i16*
  %6 = load i16, i16* %5
  %7 = add i16 %6, -1
  %8 = inttoptr i64 %2 to i16*
  store i16 %7, i16* %8
  %9 = and i16 %7, 255
  %10 = zext i16 %9 to i32
  %11 = tail call i32 @llvm.ctpop.i32(i32 %10) 
  %12 = trunc i32 %11 to i8
  %13 = and i8 %12, 1
  %14 = xor i8 %13, 1
  %15 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 %14, i8* %15, align 1
  %16 = xor i16 %7, %6
  %17 = lshr i16 %16, 4
  %18 = trunc i16 %17 to i8
  %19 = and i8 %18, 1
  %20 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 %19, i8* %20, align 1
  %21 = icmp eq i16 %7, 0
  %22 = zext i1 %21 to i8
  %23 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  store i8 %22, i8* %23, align 1
  %24 = lshr i16 %7, 15
  %25 = trunc i16 %24 to i8
  %26 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 %25, i8* %26, align 1
  %27 = lshr i16 %6, 15
  %28 = xor i16 %24, %27
  %29 = add nuw nsw i16 %28, %27
  %30 = icmp eq i16 %29, 2
  %31 = zext i1 %30 to i8
  %32 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 %31, i8* %32, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3DECI3MnWIjE2MnIjEEEP6MemoryS6_R5StateT_T0_(%struct.Memory*, %struct.State* nocapture dereferenceable(3376), i64, i64)  {
  %5 = inttoptr i64 %3 to i32*
  %6 = load i32, i32* %5
  %7 = add i32 %6, -1
  %8 = inttoptr i64 %2 to i32*
  store i32 %7, i32* %8
  %9 = and i32 %7, 255
  %10 = tail call i32 @llvm.ctpop.i32(i32 %9) 
  %11 = trunc i32 %10 to i8
  %12 = and i8 %11, 1
  %13 = xor i8 %12, 1
  %14 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 %13, i8* %14, align 1
  %15 = xor i32 %7, %6
  %16 = lshr i32 %15, 4
  %17 = trunc i32 %16 to i8
  %18 = and i8 %17, 1
  %19 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 %18, i8* %19, align 1
  %20 = icmp eq i32 %7, 0
  %21 = zext i1 %20 to i8
  %22 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  store i8 %21, i8* %22, align 1
  %23 = lshr i32 %7, 31
  %24 = trunc i32 %23 to i8
  %25 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 %24, i8* %25, align 1
  %26 = lshr i32 %6, 31
  %27 = xor i32 %23, %26
  %28 = add nuw nsw i32 %27, %26
  %29 = icmp eq i32 %28, 2
  %30 = zext i1 %29 to i8
  %31 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 %30, i8* %31, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3DECI3MnWImE2MnImEEEP6MemoryS6_R5StateT_T0_(%struct.Memory*, %struct.State* nocapture dereferenceable(3376), i64, i64)  {
  %5 = inttoptr i64 %3 to i64*
  %6 = load i64, i64* %5
  %7 = add i64 %6, -1
  %8 = inttoptr i64 %2 to i64*
  store i64 %7, i64* %8
  %9 = trunc i64 %7 to i32
  %10 = and i32 %9, 255
  %11 = tail call i32 @llvm.ctpop.i32(i32 %10) 
  %12 = trunc i32 %11 to i8
  %13 = and i8 %12, 1
  %14 = xor i8 %13, 1
  %15 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 %14, i8* %15, align 1
  %16 = xor i64 %7, %6
  %17 = lshr i64 %16, 4
  %18 = trunc i64 %17 to i8
  %19 = and i8 %18, 1
  %20 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 %19, i8* %20, align 1
  %21 = icmp eq i64 %7, 0
  %22 = zext i1 %21 to i8
  %23 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  store i8 %22, i8* %23, align 1
  %24 = lshr i64 %7, 63
  %25 = trunc i64 %24 to i8
  %26 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 %25, i8* %26, align 1
  %27 = lshr i64 %6, 63
  %28 = xor i64 %24, %27
  %29 = add nuw nsw i64 %28, %27
  %30 = icmp eq i64 %29, 2
  %31 = zext i1 %30 to i8
  %32 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 %31, i8* %32, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3DECI3RnWItE2RnItEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* readnone returned, %struct.State* nocapture dereferenceable(3376), i16* nocapture, i64)  {
  %5 = trunc i64 %3 to i16
  %6 = add i16 %5, -1
  store i16 %6, i16* %2, align 2
  %7 = and i16 %6, 255
  %8 = zext i16 %7 to i32
  %9 = tail call i32 @llvm.ctpop.i32(i32 %8) 
  %10 = trunc i32 %9 to i8
  %11 = and i8 %10, 1
  %12 = xor i8 %11, 1
  %13 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 %12, i8* %13, align 1
  %14 = xor i16 %6, %5
  %15 = lshr i16 %14, 4
  %16 = trunc i16 %15 to i8
  %17 = and i8 %16, 1
  %18 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 %17, i8* %18, align 1
  %19 = icmp eq i16 %6, 0
  %20 = zext i1 %19 to i8
  %21 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  store i8 %20, i8* %21, align 1
  %22 = lshr i16 %6, 15
  %23 = trunc i16 %22 to i8
  %24 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 %23, i8* %24, align 1
  %25 = lshr i16 %5, 15
  %26 = xor i16 %22, %25
  %27 = add nuw nsw i16 %26, %25
  %28 = icmp eq i16 %27, 2
  %29 = zext i1 %28 to i8
  %30 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 %29, i8* %30, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3DECI3RnWImE2RnIjEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* readnone returned, %struct.State* nocapture dereferenceable(3376), i64* nocapture, i64)  {
  %5 = trunc i64 %3 to i32
  %6 = add i32 %5, -1
  %7 = zext i32 %6 to i64
  store i64 %7, i64* %2, align 8
  %8 = and i32 %6, 255
  %9 = tail call i32 @llvm.ctpop.i32(i32 %8) 
  %10 = trunc i32 %9 to i8
  %11 = and i8 %10, 1
  %12 = xor i8 %11, 1
  %13 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 %12, i8* %13, align 1
  %14 = xor i32 %6, %5
  %15 = lshr i32 %14, 4
  %16 = trunc i32 %15 to i8
  %17 = and i8 %16, 1
  %18 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 %17, i8* %18, align 1
  %19 = icmp eq i32 %6, 0
  %20 = zext i1 %19 to i8
  %21 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  store i8 %20, i8* %21, align 1
  %22 = lshr i32 %6, 31
  %23 = trunc i32 %22 to i8
  %24 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 %23, i8* %24, align 1
  %25 = lshr i32 %5, 31
  %26 = xor i32 %22, %25
  %27 = add nuw nsw i32 %26, %25
  %28 = icmp eq i32 %27, 2
  %29 = zext i1 %28 to i8
  %30 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 %29, i8* %30, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3DECI3RnWImE2RnImEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* readnone returned, %struct.State* nocapture dereferenceable(3376), i64* nocapture, i64)  {
  %5 = add i64 %3, -1
  store i64 %5, i64* %2, align 8
  %6 = trunc i64 %5 to i32
  %7 = and i32 %6, 255
  %8 = tail call i32 @llvm.ctpop.i32(i32 %7) 
  %9 = trunc i32 %8 to i8
  %10 = and i8 %9, 1
  %11 = xor i8 %10, 1
  %12 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 %11, i8* %12, align 1
  %13 = xor i64 %5, %3
  %14 = lshr i64 %13, 4
  %15 = trunc i64 %14 to i8
  %16 = and i8 %15, 1
  %17 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 %16, i8* %17, align 1
  %18 = icmp eq i64 %5, 0
  %19 = zext i1 %18 to i8
  %20 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  store i8 %19, i8* %20, align 1
  %21 = lshr i64 %5, 63
  %22 = trunc i64 %21 to i8
  %23 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 %22, i8* %23, align 1
  %24 = lshr i64 %3, 63
  %25 = xor i64 %21, %24
  %26 = add nuw nsw i64 %25, %24
  %27 = icmp eq i64 %26, 2
  %28 = zext i1 %27 to i8
  %29 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 %28, i8* %29, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3NEGI3MnWIhE2MnIhEEEP6MemoryS6_R5StateT_T0_(%struct.Memory*, %struct.State* nocapture dereferenceable(3376), i64, i64)  {
  %5 = inttoptr i64 %3 to i8*
  %6 = load i8, i8* %5
  %7 = sub i8 0, %6
  %8 = inttoptr i64 %2 to i8*
  store i8 %7, i8* %8
  %9 = icmp ne i8 %6, 0
  %10 = zext i1 %9 to i8
  %11 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  store i8 %10, i8* %11, align 1
  %12 = zext i8 %7 to i32
  %13 = tail call i32 @llvm.ctpop.i32(i32 %12) 
  %14 = trunc i32 %13 to i8
  %15 = and i8 %14, 1
  %16 = xor i8 %15, 1
  %17 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 %16, i8* %17, align 1
  %18 = xor i8 %6, %7
  %19 = lshr i8 %18, 4
  %20 = and i8 %19, 1
  %21 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 %20, i8* %21, align 1
  %22 = icmp eq i8 %6, 0
  %23 = zext i1 %22 to i8
  %24 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  store i8 %23, i8* %24, align 1
  %25 = lshr i8 %7, 7
  %26 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 %25, i8* %26, align 1
  %27 = lshr i8 %6, 7
  %28 = add nuw nsw i8 %25, %27
  %29 = icmp eq i8 %28, 2
  %30 = zext i1 %29 to i8
  %31 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 %30, i8* %31, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3NEGI3RnWIhE2RnIhEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* readnone returned, %struct.State* nocapture dereferenceable(3376), i8* nocapture, i64)  {
  %5 = trunc i64 %3 to i8
  %6 = sub i8 0, %5
  store i8 %6, i8* %2, align 1
  %7 = icmp ne i8 %5, 0
  %8 = zext i1 %7 to i8
  %9 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  store i8 %8, i8* %9, align 1
  %10 = zext i8 %6 to i32
  %11 = tail call i32 @llvm.ctpop.i32(i32 %10) 
  %12 = trunc i32 %11 to i8
  %13 = and i8 %12, 1
  %14 = xor i8 %13, 1
  %15 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 %14, i8* %15, align 1
  %16 = xor i8 %5, %6
  %17 = lshr i8 %16, 4
  %18 = and i8 %17, 1
  %19 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 %18, i8* %19, align 1
  %20 = icmp eq i8 %5, 0
  %21 = zext i1 %20 to i8
  %22 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  store i8 %21, i8* %22, align 1
  %23 = lshr i8 %6, 7
  %24 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 %23, i8* %24, align 1
  %25 = lshr i8 %5, 7
  %26 = add nuw nsw i8 %23, %25
  %27 = icmp eq i8 %26, 2
  %28 = zext i1 %27 to i8
  %29 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 %28, i8* %29, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3NEGI3MnWItE2MnItEEEP6MemoryS6_R5StateT_T0_(%struct.Memory*, %struct.State* nocapture dereferenceable(3376), i64, i64)  {
  %5 = inttoptr i64 %3 to i16*
  %6 = load i16, i16* %5
  %7 = sub i16 0, %6
  %8 = inttoptr i64 %2 to i16*
  store i16 %7, i16* %8
  %9 = icmp ne i16 %6, 0
  %10 = zext i1 %9 to i8
  %11 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  store i8 %10, i8* %11, align 1
  %12 = and i16 %7, 255
  %13 = zext i16 %12 to i32
  %14 = tail call i32 @llvm.ctpop.i32(i32 %13) 
  %15 = trunc i32 %14 to i8
  %16 = and i8 %15, 1
  %17 = xor i8 %16, 1
  %18 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 %17, i8* %18, align 1
  %19 = xor i16 %6, %7
  %20 = lshr i16 %19, 4
  %21 = trunc i16 %20 to i8
  %22 = and i8 %21, 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 %22, i8* %23, align 1
  %24 = icmp eq i16 %6, 0
  %25 = zext i1 %24 to i8
  %26 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  store i8 %25, i8* %26, align 1
  %27 = lshr i16 %7, 15
  %28 = trunc i16 %27 to i8
  %29 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 %28, i8* %29, align 1
  %30 = lshr i16 %6, 15
  %31 = add nuw nsw i16 %27, %30
  %32 = icmp eq i16 %31, 2
  %33 = zext i1 %32 to i8
  %34 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 %33, i8* %34, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3NEGI3MnWIjE2MnIjEEEP6MemoryS6_R5StateT_T0_(%struct.Memory*, %struct.State* nocapture dereferenceable(3376), i64, i64)  {
  %5 = inttoptr i64 %3 to i32*
  %6 = load i32, i32* %5
  %7 = sub i32 0, %6
  %8 = inttoptr i64 %2 to i32*
  store i32 %7, i32* %8
  %9 = icmp ne i32 %6, 0
  %10 = zext i1 %9 to i8
  %11 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  store i8 %10, i8* %11, align 1
  %12 = and i32 %7, 255
  %13 = tail call i32 @llvm.ctpop.i32(i32 %12) 
  %14 = trunc i32 %13 to i8
  %15 = and i8 %14, 1
  %16 = xor i8 %15, 1
  %17 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 %16, i8* %17, align 1
  %18 = xor i32 %6, %7
  %19 = lshr i32 %18, 4
  %20 = trunc i32 %19 to i8
  %21 = and i8 %20, 1
  %22 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 %21, i8* %22, align 1
  %23 = icmp eq i32 %6, 0
  %24 = zext i1 %23 to i8
  %25 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  store i8 %24, i8* %25, align 1
  %26 = lshr i32 %7, 31
  %27 = trunc i32 %26 to i8
  %28 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 %27, i8* %28, align 1
  %29 = lshr i32 %6, 31
  %30 = add nuw nsw i32 %26, %29
  %31 = icmp eq i32 %30, 2
  %32 = zext i1 %31 to i8
  %33 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 %32, i8* %33, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3NEGI3MnWImE2MnImEEEP6MemoryS6_R5StateT_T0_(%struct.Memory*, %struct.State* nocapture dereferenceable(3376), i64, i64)  {
  %5 = inttoptr i64 %3 to i64*
  %6 = load i64, i64* %5
  %7 = sub i64 0, %6
  %8 = inttoptr i64 %2 to i64*
  store i64 %7, i64* %8
  %9 = icmp ne i64 %6, 0
  %10 = zext i1 %9 to i8
  %11 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  store i8 %10, i8* %11, align 1
  %12 = trunc i64 %7 to i32
  %13 = and i32 %12, 255
  %14 = tail call i32 @llvm.ctpop.i32(i32 %13) 
  %15 = trunc i32 %14 to i8
  %16 = and i8 %15, 1
  %17 = xor i8 %16, 1
  %18 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 %17, i8* %18, align 1
  %19 = xor i64 %6, %7
  %20 = lshr i64 %19, 4
  %21 = trunc i64 %20 to i8
  %22 = and i8 %21, 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 %22, i8* %23, align 1
  %24 = icmp eq i64 %6, 0
  %25 = zext i1 %24 to i8
  %26 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  store i8 %25, i8* %26, align 1
  %27 = lshr i64 %7, 63
  %28 = trunc i64 %27 to i8
  %29 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 %28, i8* %29, align 1
  %30 = lshr i64 %6, 63
  %31 = add nuw nsw i64 %27, %30
  %32 = icmp eq i64 %31, 2
  %33 = zext i1 %32 to i8
  %34 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 %33, i8* %34, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3NEGI3RnWItE2RnItEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* readnone returned, %struct.State* nocapture dereferenceable(3376), i16* nocapture, i64)  {
  %5 = trunc i64 %3 to i16
  %6 = sub i16 0, %5
  store i16 %6, i16* %2, align 2
  %7 = icmp ne i16 %5, 0
  %8 = zext i1 %7 to i8
  %9 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  store i8 %8, i8* %9, align 1
  %10 = and i16 %6, 255
  %11 = zext i16 %10 to i32
  %12 = tail call i32 @llvm.ctpop.i32(i32 %11) 
  %13 = trunc i32 %12 to i8
  %14 = and i8 %13, 1
  %15 = xor i8 %14, 1
  %16 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 %15, i8* %16, align 1
  %17 = xor i16 %5, %6
  %18 = lshr i16 %17, 4
  %19 = trunc i16 %18 to i8
  %20 = and i8 %19, 1
  %21 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 %20, i8* %21, align 1
  %22 = icmp eq i16 %5, 0
  %23 = zext i1 %22 to i8
  %24 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  store i8 %23, i8* %24, align 1
  %25 = lshr i16 %6, 15
  %26 = trunc i16 %25 to i8
  %27 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 %26, i8* %27, align 1
  %28 = lshr i16 %5, 15
  %29 = add nuw nsw i16 %25, %28
  %30 = icmp eq i16 %29, 2
  %31 = zext i1 %30 to i8
  %32 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 %31, i8* %32, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3NEGI3RnWImE2RnIjEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* readnone returned, %struct.State* nocapture dereferenceable(3376), i64* nocapture, i64)  {
  %5 = trunc i64 %3 to i32
  %6 = sub i32 0, %5
  %7 = zext i32 %6 to i64
  store i64 %7, i64* %2, align 8
  %8 = icmp ne i32 %5, 0
  %9 = zext i1 %8 to i8
  %10 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  store i8 %9, i8* %10, align 1
  %11 = and i32 %6, 255
  %12 = tail call i32 @llvm.ctpop.i32(i32 %11) 
  %13 = trunc i32 %12 to i8
  %14 = and i8 %13, 1
  %15 = xor i8 %14, 1
  %16 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 %15, i8* %16, align 1
  %17 = xor i32 %5, %6
  %18 = lshr i32 %17, 4
  %19 = trunc i32 %18 to i8
  %20 = and i8 %19, 1
  %21 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 %20, i8* %21, align 1
  %22 = icmp eq i32 %5, 0
  %23 = zext i1 %22 to i8
  %24 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  store i8 %23, i8* %24, align 1
  %25 = lshr i32 %6, 31
  %26 = trunc i32 %25 to i8
  %27 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 %26, i8* %27, align 1
  %28 = lshr i32 %5, 31
  %29 = add nuw nsw i32 %25, %28
  %30 = icmp eq i32 %29, 2
  %31 = zext i1 %30 to i8
  %32 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 %31, i8* %32, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3NEGI3RnWImE2RnImEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* readnone returned, %struct.State* nocapture dereferenceable(3376), i64* nocapture, i64)  {
  %5 = sub i64 0, %3
  store i64 %5, i64* %2, align 8
  %6 = icmp ne i64 %3, 0
  %7 = zext i1 %6 to i8
  %8 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  store i8 %7, i8* %8, align 1
  %9 = trunc i64 %5 to i32
  %10 = and i32 %9, 255
  %11 = tail call i32 @llvm.ctpop.i32(i32 %10) 
  %12 = trunc i32 %11 to i8
  %13 = and i8 %12, 1
  %14 = xor i8 %13, 1
  %15 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 %14, i8* %15, align 1
  %16 = xor i64 %3, %5
  %17 = lshr i64 %16, 4
  %18 = trunc i64 %17 to i8
  %19 = and i8 %18, 1
  %20 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 %19, i8* %20, align 1
  %21 = icmp eq i64 %3, 0
  %22 = zext i1 %21 to i8
  %23 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  store i8 %22, i8* %23, align 1
  %24 = lshr i64 %5, 63
  %25 = trunc i64 %24 to i8
  %26 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 %25, i8* %26, align 1
  %27 = lshr i64 %3, 63
  %28 = add nuw nsw i64 %24, %27
  %29 = icmp eq i64 %28, 2
  %30 = zext i1 %29 to i8
  %31 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 %30, i8* %31, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3SBBI3MnWIhE2MnIhE2InIhEEEP6MemoryS8_R5StateT_T0_T1_(%struct.Memory*, %struct.State* nocapture dereferenceable(3376), i64, i64, i64)  {
  %6 = inttoptr i64 %3 to i8*
  %7 = load i8, i8* %6
  %8 = trunc i64 %4 to i8
  %9 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  %10 = load i8, i8* %9, align 1
  %11 = sub i8 %7, %8
  %12 = sub i8 %11, %10
  %13 = inttoptr i64 %2 to i8*
  store i8 %12, i8* %13
  %14 = icmp ult i8 %7, %8
  %15 = icmp ult i8 %11, %10
  %16 = or i1 %14, %15
  %17 = zext i1 %16 to i8
  store i8 %17, i8* %9, align 1
  %18 = zext i8 %12 to i32
  %19 = tail call i32 @llvm.ctpop.i32(i32 %18) 
  %20 = trunc i32 %19 to i8
  %21 = and i8 %20, 1
  %22 = xor i8 %21, 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 %22, i8* %23, align 1
  %24 = xor i8 %7, %8
  %25 = xor i8 %24, %12
  %26 = lshr i8 %25, 4
  %27 = and i8 %26, 1
  %28 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 %27, i8* %28, align 1
  %29 = icmp eq i8 %12, 0
  %30 = zext i1 %29 to i8
  %31 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  store i8 %30, i8* %31, align 1
  %32 = lshr i8 %12, 7
  %33 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 %32, i8* %33, align 1
  %34 = lshr i8 %7, 7
  %35 = lshr i8 %8, 7
  %36 = xor i8 %34, %35
  %37 = xor i8 %32, %34
  %38 = add nuw nsw i8 %37, %36
  %39 = icmp eq i8 %38, 2
  %40 = zext i1 %39 to i8
  %41 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 %40, i8* %41, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3SBBI3RnWIhE2RnIhE2InIhEEEP6MemoryS8_R5StateT_T0_T1_(%struct.Memory* readnone returned, %struct.State* nocapture dereferenceable(3376), i8* nocapture, i64, i64)  {
  %6 = trunc i64 %3 to i8
  %7 = trunc i64 %4 to i8
  %8 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  %9 = load i8, i8* %8, align 1
  %10 = sub i8 %6, %7
  %11 = sub i8 %10, %9
  store i8 %11, i8* %2, align 1
  %12 = icmp ult i8 %6, %7
  %13 = icmp ult i8 %10, %9
  %14 = or i1 %12, %13
  %15 = zext i1 %14 to i8
  store i8 %15, i8* %8, align 1
  %16 = zext i8 %11 to i32
  %17 = tail call i32 @llvm.ctpop.i32(i32 %16) 
  %18 = trunc i32 %17 to i8
  %19 = and i8 %18, 1
  %20 = xor i8 %19, 1
  %21 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 %20, i8* %21, align 1
  %22 = xor i64 %4, %3
  %23 = trunc i64 %22 to i8
  %24 = xor i8 %11, %23
  %25 = lshr i8 %24, 4
  %26 = and i8 %25, 1
  %27 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 %26, i8* %27, align 1
  %28 = icmp eq i8 %11, 0
  %29 = zext i1 %28 to i8
  %30 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  store i8 %29, i8* %30, align 1
  %31 = lshr i8 %11, 7
  %32 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 %31, i8* %32, align 1
  %33 = lshr i8 %6, 7
  %34 = lshr i8 %7, 7
  %35 = xor i8 %34, %33
  %36 = xor i8 %31, %33
  %37 = add nuw nsw i8 %36, %35
  %38 = icmp eq i8 %37, 2
  %39 = zext i1 %38 to i8
  %40 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 %39, i8* %40, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3SBBI3MnWItE2MnItE2InItEEEP6MemoryS8_R5StateT_T0_T1_(%struct.Memory*, %struct.State* nocapture dereferenceable(3376), i64, i64, i64)  {
  %6 = inttoptr i64 %3 to i16*
  %7 = load i16, i16* %6
  %8 = trunc i64 %4 to i16
  %9 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  %10 = load i8, i8* %9, align 1
  %11 = zext i8 %10 to i16
  %12 = sub i16 %7, %8
  %13 = sub i16 %12, %11
  %14 = inttoptr i64 %2 to i16*
  store i16 %13, i16* %14
  %15 = icmp ult i16 %7, %8
  %16 = icmp ult i16 %12, %11
  %17 = or i1 %15, %16
  %18 = zext i1 %17 to i8
  store i8 %18, i8* %9, align 1
  %19 = and i16 %13, 255
  %20 = zext i16 %19 to i32
  %21 = tail call i32 @llvm.ctpop.i32(i32 %20) 
  %22 = trunc i32 %21 to i8
  %23 = and i8 %22, 1
  %24 = xor i8 %23, 1
  %25 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 %24, i8* %25, align 1
  %26 = xor i16 %7, %8
  %27 = xor i16 %26, %13
  %28 = lshr i16 %27, 4
  %29 = trunc i16 %28 to i8
  %30 = and i8 %29, 1
  %31 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 %30, i8* %31, align 1
  %32 = icmp eq i16 %13, 0
  %33 = zext i1 %32 to i8
  %34 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  store i8 %33, i8* %34, align 1
  %35 = lshr i16 %13, 15
  %36 = trunc i16 %35 to i8
  %37 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 %36, i8* %37, align 1
  %38 = lshr i16 %7, 15
  %39 = lshr i16 %8, 15
  %40 = xor i16 %38, %39
  %41 = xor i16 %35, %38
  %42 = add nuw nsw i16 %41, %40
  %43 = icmp eq i16 %42, 2
  %44 = zext i1 %43 to i8
  %45 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 %44, i8* %45, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3SBBI3MnWIjE2MnIjE2InIjEEEP6MemoryS8_R5StateT_T0_T1_(%struct.Memory*, %struct.State* nocapture dereferenceable(3376), i64, i64, i64)  {
  %6 = inttoptr i64 %3 to i32*
  %7 = load i32, i32* %6
  %8 = trunc i64 %4 to i32
  %9 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  %10 = load i8, i8* %9, align 1
  %11 = zext i8 %10 to i32
  %12 = sub i32 %7, %8
  %13 = sub i32 %12, %11
  %14 = inttoptr i64 %2 to i32*
  store i32 %13, i32* %14
  %15 = icmp ult i32 %7, %8
  %16 = icmp ult i32 %12, %11
  %17 = or i1 %15, %16
  %18 = zext i1 %17 to i8
  store i8 %18, i8* %9, align 1
  %19 = and i32 %13, 255
  %20 = tail call i32 @llvm.ctpop.i32(i32 %19) 
  %21 = trunc i32 %20 to i8
  %22 = and i8 %21, 1
  %23 = xor i8 %22, 1
  %24 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 %23, i8* %24, align 1
  %25 = xor i32 %7, %8
  %26 = xor i32 %25, %13
  %27 = lshr i32 %26, 4
  %28 = trunc i32 %27 to i8
  %29 = and i8 %28, 1
  %30 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 %29, i8* %30, align 1
  %31 = icmp eq i32 %13, 0
  %32 = zext i1 %31 to i8
  %33 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  store i8 %32, i8* %33, align 1
  %34 = lshr i32 %13, 31
  %35 = trunc i32 %34 to i8
  %36 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 %35, i8* %36, align 1
  %37 = lshr i32 %7, 31
  %38 = lshr i32 %8, 31
  %39 = xor i32 %37, %38
  %40 = xor i32 %34, %37
  %41 = add nuw nsw i32 %40, %39
  %42 = icmp eq i32 %41, 2
  %43 = zext i1 %42 to i8
  %44 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 %43, i8* %44, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3SBBI3MnWImE2MnImE2InImEEEP6MemoryS8_R5StateT_T0_T1_(%struct.Memory*, %struct.State* nocapture dereferenceable(3376), i64, i64, i64)  {
  %6 = inttoptr i64 %3 to i64*
  %7 = load i64, i64* %6
  %8 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  %9 = load i8, i8* %8, align 1
  %10 = zext i8 %9 to i64
  %11 = sub i64 %7, %4
  %12 = sub i64 %11, %10
  %13 = inttoptr i64 %2 to i64*
  store i64 %12, i64* %13
  %14 = icmp ult i64 %7, %4
  %15 = icmp ult i64 %11, %10
  %16 = or i1 %14, %15
  %17 = zext i1 %16 to i8
  store i8 %17, i8* %8, align 1
  %18 = trunc i64 %12 to i32
  %19 = and i32 %18, 255
  %20 = tail call i32 @llvm.ctpop.i32(i32 %19) 
  %21 = trunc i32 %20 to i8
  %22 = and i8 %21, 1
  %23 = xor i8 %22, 1
  %24 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 %23, i8* %24, align 1
  %25 = xor i64 %7, %4
  %26 = xor i64 %25, %12
  %27 = lshr i64 %26, 4
  %28 = trunc i64 %27 to i8
  %29 = and i8 %28, 1
  %30 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 %29, i8* %30, align 1
  %31 = icmp eq i64 %12, 0
  %32 = zext i1 %31 to i8
  %33 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  store i8 %32, i8* %33, align 1
  %34 = lshr i64 %12, 63
  %35 = trunc i64 %34 to i8
  %36 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 %35, i8* %36, align 1
  %37 = lshr i64 %7, 63
  %38 = lshr i64 %4, 63
  %39 = xor i64 %37, %38
  %40 = xor i64 %34, %37
  %41 = add nuw nsw i64 %40, %39
  %42 = icmp eq i64 %41, 2
  %43 = zext i1 %42 to i8
  %44 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 %43, i8* %44, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3SBBI3RnWItE2RnItE2InItEEEP6MemoryS8_R5StateT_T0_T1_(%struct.Memory* readnone returned, %struct.State* nocapture dereferenceable(3376), i16* nocapture, i64, i64)  {
  %6 = trunc i64 %3 to i16
  %7 = trunc i64 %4 to i16
  %8 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  %9 = load i8, i8* %8, align 1
  %10 = zext i8 %9 to i16
  %11 = sub i16 %6, %7
  %12 = sub i16 %11, %10
  store i16 %12, i16* %2, align 2
  %13 = icmp ult i16 %6, %7
  %14 = icmp ult i16 %11, %10
  %15 = or i1 %13, %14
  %16 = zext i1 %15 to i8
  store i8 %16, i8* %8, align 1
  %17 = and i16 %12, 255
  %18 = zext i16 %17 to i32
  %19 = tail call i32 @llvm.ctpop.i32(i32 %18) 
  %20 = trunc i32 %19 to i8
  %21 = and i8 %20, 1
  %22 = xor i8 %21, 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 %22, i8* %23, align 1
  %24 = xor i64 %4, %3
  %25 = trunc i64 %24 to i16
  %26 = xor i16 %12, %25
  %27 = lshr i16 %26, 4
  %28 = trunc i16 %27 to i8
  %29 = and i8 %28, 1
  %30 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 %29, i8* %30, align 1
  %31 = icmp eq i16 %12, 0
  %32 = zext i1 %31 to i8
  %33 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  store i8 %32, i8* %33, align 1
  %34 = lshr i16 %12, 15
  %35 = trunc i16 %34 to i8
  %36 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 %35, i8* %36, align 1
  %37 = lshr i16 %6, 15
  %38 = lshr i16 %7, 15
  %39 = xor i16 %38, %37
  %40 = xor i16 %34, %37
  %41 = add nuw nsw i16 %40, %39
  %42 = icmp eq i16 %41, 2
  %43 = zext i1 %42 to i8
  %44 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 %43, i8* %44, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3SBBI3RnWImE2RnIjE2InIjEEEP6MemoryS8_R5StateT_T0_T1_(%struct.Memory* readnone returned, %struct.State* nocapture dereferenceable(3376), i64* nocapture, i64, i64)  {
  %6 = trunc i64 %3 to i32
  %7 = trunc i64 %4 to i32
  %8 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  %9 = load i8, i8* %8, align 1
  %10 = zext i8 %9 to i32
  %11 = sub i32 %6, %7
  %12 = sub i32 %11, %10
  %13 = zext i32 %12 to i64
  store i64 %13, i64* %2, align 8
  %14 = icmp ult i32 %6, %7
  %15 = icmp ult i32 %11, %10
  %16 = or i1 %14, %15
  %17 = zext i1 %16 to i8
  store i8 %17, i8* %8, align 1
  %18 = and i32 %12, 255
  %19 = tail call i32 @llvm.ctpop.i32(i32 %18) 
  %20 = trunc i32 %19 to i8
  %21 = and i8 %20, 1
  %22 = xor i8 %21, 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 %22, i8* %23, align 1
  %24 = xor i64 %4, %3
  %25 = trunc i64 %24 to i32
  %26 = xor i32 %12, %25
  %27 = lshr i32 %26, 4
  %28 = trunc i32 %27 to i8
  %29 = and i8 %28, 1
  %30 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 %29, i8* %30, align 1
  %31 = icmp eq i32 %12, 0
  %32 = zext i1 %31 to i8
  %33 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  store i8 %32, i8* %33, align 1
  %34 = lshr i32 %12, 31
  %35 = trunc i32 %34 to i8
  %36 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 %35, i8* %36, align 1
  %37 = lshr i32 %6, 31
  %38 = lshr i32 %7, 31
  %39 = xor i32 %38, %37
  %40 = xor i32 %34, %37
  %41 = add nuw nsw i32 %40, %39
  %42 = icmp eq i32 %41, 2
  %43 = zext i1 %42 to i8
  %44 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 %43, i8* %44, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3SBBI3RnWImE2RnImE2InImEEEP6MemoryS8_R5StateT_T0_T1_(%struct.Memory* readnone returned, %struct.State* nocapture dereferenceable(3376), i64* nocapture, i64, i64)  {
  %6 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  %7 = load i8, i8* %6, align 1
  %8 = zext i8 %7 to i64
  %9 = sub i64 %3, %4
  %10 = sub i64 %9, %8
  store i64 %10, i64* %2, align 8
  %11 = icmp ult i64 %3, %4
  %12 = icmp ult i64 %9, %8
  %13 = or i1 %11, %12
  %14 = zext i1 %13 to i8
  store i8 %14, i8* %6, align 1
  %15 = trunc i64 %10 to i32
  %16 = and i32 %15, 255
  %17 = tail call i32 @llvm.ctpop.i32(i32 %16) 
  %18 = trunc i32 %17 to i8
  %19 = and i8 %18, 1
  %20 = xor i8 %19, 1
  %21 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 %20, i8* %21, align 1
  %22 = xor i64 %4, %3
  %23 = xor i64 %22, %10
  %24 = lshr i64 %23, 4
  %25 = trunc i64 %24 to i8
  %26 = and i8 %25, 1
  %27 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 %26, i8* %27, align 1
  %28 = icmp eq i64 %10, 0
  %29 = zext i1 %28 to i8
  %30 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  store i8 %29, i8* %30, align 1
  %31 = lshr i64 %10, 63
  %32 = trunc i64 %31 to i8
  %33 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 %32, i8* %33, align 1
  %34 = lshr i64 %3, 63
  %35 = lshr i64 %4, 63
  %36 = xor i64 %35, %34
  %37 = xor i64 %31, %34
  %38 = add nuw nsw i64 %37, %36
  %39 = icmp eq i64 %38, 2
  %40 = zext i1 %39 to i8
  %41 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 %40, i8* %41, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3SBBI3RnWIhE2RnIhES4_EEP6MemoryS6_R5StateT_T0_T1_(%struct.Memory* readnone returned, %struct.State* nocapture dereferenceable(3376), i8* nocapture, i64, i64)  {
  %6 = trunc i64 %3 to i8
  %7 = trunc i64 %4 to i8
  %8 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  %9 = load i8, i8* %8, align 1
  %10 = sub i8 %6, %7
  %11 = sub i8 %10, %9
  store i8 %11, i8* %2, align 1
  %12 = icmp ult i8 %6, %7
  %13 = icmp ult i8 %10, %9
  %14 = or i1 %12, %13
  %15 = zext i1 %14 to i8
  store i8 %15, i8* %8, align 1
  %16 = zext i8 %11 to i32
  %17 = tail call i32 @llvm.ctpop.i32(i32 %16) 
  %18 = trunc i32 %17 to i8
  %19 = and i8 %18, 1
  %20 = xor i8 %19, 1
  %21 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 %20, i8* %21, align 1
  %22 = xor i64 %4, %3
  %23 = trunc i64 %22 to i8
  %24 = xor i8 %11, %23
  %25 = lshr i8 %24, 4
  %26 = and i8 %25, 1
  %27 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 %26, i8* %27, align 1
  %28 = icmp eq i8 %11, 0
  %29 = zext i1 %28 to i8
  %30 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  store i8 %29, i8* %30, align 1
  %31 = lshr i8 %11, 7
  %32 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 %31, i8* %32, align 1
  %33 = lshr i8 %6, 7
  %34 = lshr i8 %7, 7
  %35 = xor i8 %34, %33
  %36 = xor i8 %31, %33
  %37 = add nuw nsw i8 %36, %35
  %38 = icmp eq i8 %37, 2
  %39 = zext i1 %38 to i8
  %40 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 %39, i8* %40, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3SBBI3MnWIhE2MnIhE2RnIhEEEP6MemoryS8_R5StateT_T0_T1_(%struct.Memory*, %struct.State* nocapture dereferenceable(3376), i64, i64, i64)  {
  %6 = inttoptr i64 %3 to i8*
  %7 = load i8, i8* %6
  %8 = trunc i64 %4 to i8
  %9 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  %10 = load i8, i8* %9, align 1
  %11 = sub i8 %7, %8
  %12 = sub i8 %11, %10
  %13 = inttoptr i64 %2 to i8*
  store i8 %12, i8* %13
  %14 = icmp ult i8 %7, %8
  %15 = icmp ult i8 %11, %10
  %16 = or i1 %14, %15
  %17 = zext i1 %16 to i8
  store i8 %17, i8* %9, align 1
  %18 = zext i8 %12 to i32
  %19 = tail call i32 @llvm.ctpop.i32(i32 %18) 
  %20 = trunc i32 %19 to i8
  %21 = and i8 %20, 1
  %22 = xor i8 %21, 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 %22, i8* %23, align 1
  %24 = xor i8 %7, %8
  %25 = xor i8 %24, %12
  %26 = lshr i8 %25, 4
  %27 = and i8 %26, 1
  %28 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 %27, i8* %28, align 1
  %29 = icmp eq i8 %12, 0
  %30 = zext i1 %29 to i8
  %31 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  store i8 %30, i8* %31, align 1
  %32 = lshr i8 %12, 7
  %33 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 %32, i8* %33, align 1
  %34 = lshr i8 %7, 7
  %35 = lshr i8 %8, 7
  %36 = xor i8 %34, %35
  %37 = xor i8 %32, %34
  %38 = add nuw nsw i8 %37, %36
  %39 = icmp eq i8 %38, 2
  %40 = zext i1 %39 to i8
  %41 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 %40, i8* %41, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3SBBI3MnWItE2MnItE2RnItEEEP6MemoryS8_R5StateT_T0_T1_(%struct.Memory*, %struct.State* nocapture dereferenceable(3376), i64, i64, i64)  {
  %6 = inttoptr i64 %3 to i16*
  %7 = load i16, i16* %6
  %8 = trunc i64 %4 to i16
  %9 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  %10 = load i8, i8* %9, align 1
  %11 = zext i8 %10 to i16
  %12 = sub i16 %7, %8
  %13 = sub i16 %12, %11
  %14 = inttoptr i64 %2 to i16*
  store i16 %13, i16* %14
  %15 = icmp ult i16 %7, %8
  %16 = icmp ult i16 %12, %11
  %17 = or i1 %15, %16
  %18 = zext i1 %17 to i8
  store i8 %18, i8* %9, align 1
  %19 = and i16 %13, 255
  %20 = zext i16 %19 to i32
  %21 = tail call i32 @llvm.ctpop.i32(i32 %20) 
  %22 = trunc i32 %21 to i8
  %23 = and i8 %22, 1
  %24 = xor i8 %23, 1
  %25 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 %24, i8* %25, align 1
  %26 = xor i16 %7, %8
  %27 = xor i16 %26, %13
  %28 = lshr i16 %27, 4
  %29 = trunc i16 %28 to i8
  %30 = and i8 %29, 1
  %31 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 %30, i8* %31, align 1
  %32 = icmp eq i16 %13, 0
  %33 = zext i1 %32 to i8
  %34 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  store i8 %33, i8* %34, align 1
  %35 = lshr i16 %13, 15
  %36 = trunc i16 %35 to i8
  %37 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 %36, i8* %37, align 1
  %38 = lshr i16 %7, 15
  %39 = lshr i16 %8, 15
  %40 = xor i16 %38, %39
  %41 = xor i16 %35, %38
  %42 = add nuw nsw i16 %41, %40
  %43 = icmp eq i16 %42, 2
  %44 = zext i1 %43 to i8
  %45 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 %44, i8* %45, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3SBBI3MnWIjE2MnIjE2RnIjEEEP6MemoryS8_R5StateT_T0_T1_(%struct.Memory*, %struct.State* nocapture dereferenceable(3376), i64, i64, i64)  {
  %6 = inttoptr i64 %3 to i32*
  %7 = load i32, i32* %6
  %8 = trunc i64 %4 to i32
  %9 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  %10 = load i8, i8* %9, align 1
  %11 = zext i8 %10 to i32
  %12 = sub i32 %7, %8
  %13 = sub i32 %12, %11
  %14 = inttoptr i64 %2 to i32*
  store i32 %13, i32* %14
  %15 = icmp ult i32 %7, %8
  %16 = icmp ult i32 %12, %11
  %17 = or i1 %15, %16
  %18 = zext i1 %17 to i8
  store i8 %18, i8* %9, align 1
  %19 = and i32 %13, 255
  %20 = tail call i32 @llvm.ctpop.i32(i32 %19) 
  %21 = trunc i32 %20 to i8
  %22 = and i8 %21, 1
  %23 = xor i8 %22, 1
  %24 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 %23, i8* %24, align 1
  %25 = xor i32 %7, %8
  %26 = xor i32 %25, %13
  %27 = lshr i32 %26, 4
  %28 = trunc i32 %27 to i8
  %29 = and i8 %28, 1
  %30 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 %29, i8* %30, align 1
  %31 = icmp eq i32 %13, 0
  %32 = zext i1 %31 to i8
  %33 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  store i8 %32, i8* %33, align 1
  %34 = lshr i32 %13, 31
  %35 = trunc i32 %34 to i8
  %36 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 %35, i8* %36, align 1
  %37 = lshr i32 %7, 31
  %38 = lshr i32 %8, 31
  %39 = xor i32 %37, %38
  %40 = xor i32 %34, %37
  %41 = add nuw nsw i32 %40, %39
  %42 = icmp eq i32 %41, 2
  %43 = zext i1 %42 to i8
  %44 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 %43, i8* %44, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3SBBI3MnWImE2MnImE2RnImEEEP6MemoryS8_R5StateT_T0_T1_(%struct.Memory*, %struct.State* nocapture dereferenceable(3376), i64, i64, i64)  {
  %6 = inttoptr i64 %3 to i64*
  %7 = load i64, i64* %6
  %8 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  %9 = load i8, i8* %8, align 1
  %10 = zext i8 %9 to i64
  %11 = sub i64 %7, %4
  %12 = sub i64 %11, %10
  %13 = inttoptr i64 %2 to i64*
  store i64 %12, i64* %13
  %14 = icmp ult i64 %7, %4
  %15 = icmp ult i64 %11, %10
  %16 = or i1 %14, %15
  %17 = zext i1 %16 to i8
  store i8 %17, i8* %8, align 1
  %18 = trunc i64 %12 to i32
  %19 = and i32 %18, 255
  %20 = tail call i32 @llvm.ctpop.i32(i32 %19) 
  %21 = trunc i32 %20 to i8
  %22 = and i8 %21, 1
  %23 = xor i8 %22, 1
  %24 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 %23, i8* %24, align 1
  %25 = xor i64 %7, %4
  %26 = xor i64 %25, %12
  %27 = lshr i64 %26, 4
  %28 = trunc i64 %27 to i8
  %29 = and i8 %28, 1
  %30 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 %29, i8* %30, align 1
  %31 = icmp eq i64 %12, 0
  %32 = zext i1 %31 to i8
  %33 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  store i8 %32, i8* %33, align 1
  %34 = lshr i64 %12, 63
  %35 = trunc i64 %34 to i8
  %36 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 %35, i8* %36, align 1
  %37 = lshr i64 %7, 63
  %38 = lshr i64 %4, 63
  %39 = xor i64 %37, %38
  %40 = xor i64 %34, %37
  %41 = add nuw nsw i64 %40, %39
  %42 = icmp eq i64 %41, 2
  %43 = zext i1 %42 to i8
  %44 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 %43, i8* %44, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3SBBI3RnWItE2RnItES4_EEP6MemoryS6_R5StateT_T0_T1_(%struct.Memory* readnone returned, %struct.State* nocapture dereferenceable(3376), i16* nocapture, i64, i64)  {
  %6 = trunc i64 %3 to i16
  %7 = trunc i64 %4 to i16
  %8 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  %9 = load i8, i8* %8, align 1
  %10 = zext i8 %9 to i16
  %11 = sub i16 %6, %7
  %12 = sub i16 %11, %10
  store i16 %12, i16* %2, align 2
  %13 = icmp ult i16 %6, %7
  %14 = icmp ult i16 %11, %10
  %15 = or i1 %13, %14
  %16 = zext i1 %15 to i8
  store i8 %16, i8* %8, align 1
  %17 = and i16 %12, 255
  %18 = zext i16 %17 to i32
  %19 = tail call i32 @llvm.ctpop.i32(i32 %18) 
  %20 = trunc i32 %19 to i8
  %21 = and i8 %20, 1
  %22 = xor i8 %21, 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 %22, i8* %23, align 1
  %24 = xor i64 %4, %3
  %25 = trunc i64 %24 to i16
  %26 = xor i16 %12, %25
  %27 = lshr i16 %26, 4
  %28 = trunc i16 %27 to i8
  %29 = and i8 %28, 1
  %30 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 %29, i8* %30, align 1
  %31 = icmp eq i16 %12, 0
  %32 = zext i1 %31 to i8
  %33 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  store i8 %32, i8* %33, align 1
  %34 = lshr i16 %12, 15
  %35 = trunc i16 %34 to i8
  %36 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 %35, i8* %36, align 1
  %37 = lshr i16 %6, 15
  %38 = lshr i16 %7, 15
  %39 = xor i16 %38, %37
  %40 = xor i16 %34, %37
  %41 = add nuw nsw i16 %40, %39
  %42 = icmp eq i16 %41, 2
  %43 = zext i1 %42 to i8
  %44 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 %43, i8* %44, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3SBBI3RnWImE2RnIjES4_EEP6MemoryS6_R5StateT_T0_T1_(%struct.Memory* readnone returned, %struct.State* nocapture dereferenceable(3376), i64* nocapture, i64, i64)  {
  %6 = trunc i64 %3 to i32
  %7 = trunc i64 %4 to i32
  %8 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  %9 = load i8, i8* %8, align 1
  %10 = zext i8 %9 to i32
  %11 = sub i32 %6, %7
  %12 = sub i32 %11, %10
  %13 = zext i32 %12 to i64
  store i64 %13, i64* %2, align 8
  %14 = icmp ult i32 %6, %7
  %15 = icmp ult i32 %11, %10
  %16 = or i1 %14, %15
  %17 = zext i1 %16 to i8
  store i8 %17, i8* %8, align 1
  %18 = and i32 %12, 255
  %19 = tail call i32 @llvm.ctpop.i32(i32 %18) 
  %20 = trunc i32 %19 to i8
  %21 = and i8 %20, 1
  %22 = xor i8 %21, 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 %22, i8* %23, align 1
  %24 = xor i64 %4, %3
  %25 = trunc i64 %24 to i32
  %26 = xor i32 %12, %25
  %27 = lshr i32 %26, 4
  %28 = trunc i32 %27 to i8
  %29 = and i8 %28, 1
  %30 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 %29, i8* %30, align 1
  %31 = icmp eq i32 %12, 0
  %32 = zext i1 %31 to i8
  %33 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  store i8 %32, i8* %33, align 1
  %34 = lshr i32 %12, 31
  %35 = trunc i32 %34 to i8
  %36 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 %35, i8* %36, align 1
  %37 = lshr i32 %6, 31
  %38 = lshr i32 %7, 31
  %39 = xor i32 %38, %37
  %40 = xor i32 %34, %37
  %41 = add nuw nsw i32 %40, %39
  %42 = icmp eq i32 %41, 2
  %43 = zext i1 %42 to i8
  %44 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 %43, i8* %44, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3SBBI3RnWImE2RnImES4_EEP6MemoryS6_R5StateT_T0_T1_(%struct.Memory* readnone returned, %struct.State* nocapture dereferenceable(3376), i64* nocapture, i64, i64)  {
  %6 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  %7 = load i8, i8* %6, align 1
  %8 = zext i8 %7 to i64
  %9 = sub i64 %3, %4
  %10 = sub i64 %9, %8
  store i64 %10, i64* %2, align 8
  %11 = icmp ult i64 %3, %4
  %12 = icmp ult i64 %9, %8
  %13 = or i1 %11, %12
  %14 = zext i1 %13 to i8
  store i8 %14, i8* %6, align 1
  %15 = trunc i64 %10 to i32
  %16 = and i32 %15, 255
  %17 = tail call i32 @llvm.ctpop.i32(i32 %16) 
  %18 = trunc i32 %17 to i8
  %19 = and i8 %18, 1
  %20 = xor i8 %19, 1
  %21 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 %20, i8* %21, align 1
  %22 = xor i64 %4, %3
  %23 = xor i64 %22, %10
  %24 = lshr i64 %23, 4
  %25 = trunc i64 %24 to i8
  %26 = and i8 %25, 1
  %27 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 %26, i8* %27, align 1
  %28 = icmp eq i64 %10, 0
  %29 = zext i1 %28 to i8
  %30 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  store i8 %29, i8* %30, align 1
  %31 = lshr i64 %10, 63
  %32 = trunc i64 %31 to i8
  %33 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 %32, i8* %33, align 1
  %34 = lshr i64 %3, 63
  %35 = lshr i64 %4, 63
  %36 = xor i64 %35, %34
  %37 = xor i64 %31, %34
  %38 = add nuw nsw i64 %37, %36
  %39 = icmp eq i64 %38, 2
  %40 = zext i1 %39 to i8
  %41 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 %40, i8* %41, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3SBBI3RnWIhE2RnIhE2MnIhEEEP6MemoryS8_R5StateT_T0_T1_(%struct.Memory*, %struct.State* nocapture dereferenceable(3376), i8* nocapture, i64, i64)  {
  %6 = trunc i64 %3 to i8
  %7 = inttoptr i64 %4 to i8*
  %8 = load i8, i8* %7
  %9 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  %10 = load i8, i8* %9, align 1
  %11 = sub i8 %6, %8
  %12 = sub i8 %11, %10
  store i8 %12, i8* %2, align 1
  %13 = icmp ult i8 %6, %8
  %14 = icmp ult i8 %11, %10
  %15 = or i1 %13, %14
  %16 = zext i1 %15 to i8
  store i8 %16, i8* %9, align 1
  %17 = zext i8 %12 to i32
  %18 = tail call i32 @llvm.ctpop.i32(i32 %17) 
  %19 = trunc i32 %18 to i8
  %20 = and i8 %19, 1
  %21 = xor i8 %20, 1
  %22 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 %21, i8* %22, align 1
  %23 = xor i8 %8, %6
  %24 = xor i8 %23, %12
  %25 = lshr i8 %24, 4
  %26 = and i8 %25, 1
  %27 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 %26, i8* %27, align 1
  %28 = icmp eq i8 %12, 0
  %29 = zext i1 %28 to i8
  %30 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  store i8 %29, i8* %30, align 1
  %31 = lshr i8 %12, 7
  %32 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 %31, i8* %32, align 1
  %33 = lshr i8 %6, 7
  %34 = lshr i8 %8, 7
  %35 = xor i8 %34, %33
  %36 = xor i8 %31, %33
  %37 = add nuw nsw i8 %36, %35
  %38 = icmp eq i8 %37, 2
  %39 = zext i1 %38 to i8
  %40 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 %39, i8* %40, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3SBBI3RnWItE2RnItE2MnItEEEP6MemoryS8_R5StateT_T0_T1_(%struct.Memory*, %struct.State* nocapture dereferenceable(3376), i16* nocapture, i64, i64)  {
  %6 = trunc i64 %3 to i16
  %7 = inttoptr i64 %4 to i16*
  %8 = load i16, i16* %7
  %9 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  %10 = load i8, i8* %9, align 1
  %11 = zext i8 %10 to i16
  %12 = sub i16 %6, %8
  %13 = sub i16 %12, %11
  store i16 %13, i16* %2, align 2
  %14 = icmp ult i16 %6, %8
  %15 = icmp ult i16 %12, %11
  %16 = or i1 %14, %15
  %17 = zext i1 %16 to i8
  store i8 %17, i8* %9, align 1
  %18 = and i16 %13, 255
  %19 = zext i16 %18 to i32
  %20 = tail call i32 @llvm.ctpop.i32(i32 %19) 
  %21 = trunc i32 %20 to i8
  %22 = and i8 %21, 1
  %23 = xor i8 %22, 1
  %24 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 %23, i8* %24, align 1
  %25 = xor i16 %8, %6
  %26 = xor i16 %25, %13
  %27 = lshr i16 %26, 4
  %28 = trunc i16 %27 to i8
  %29 = and i8 %28, 1
  %30 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 %29, i8* %30, align 1
  %31 = icmp eq i16 %13, 0
  %32 = zext i1 %31 to i8
  %33 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  store i8 %32, i8* %33, align 1
  %34 = lshr i16 %13, 15
  %35 = trunc i16 %34 to i8
  %36 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 %35, i8* %36, align 1
  %37 = lshr i16 %6, 15
  %38 = lshr i16 %8, 15
  %39 = xor i16 %38, %37
  %40 = xor i16 %34, %37
  %41 = add nuw nsw i16 %40, %39
  %42 = icmp eq i16 %41, 2
  %43 = zext i1 %42 to i8
  %44 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 %43, i8* %44, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3SBBI3RnWImE2RnIjE2MnIjEEEP6MemoryS8_R5StateT_T0_T1_(%struct.Memory*, %struct.State* nocapture dereferenceable(3376), i64* nocapture, i64, i64)  {
  %6 = trunc i64 %3 to i32
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7
  %9 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  %10 = load i8, i8* %9, align 1
  %11 = zext i8 %10 to i32
  %12 = sub i32 %6, %8
  %13 = sub i32 %12, %11
  %14 = zext i32 %13 to i64
  store i64 %14, i64* %2, align 8
  %15 = icmp ult i32 %6, %8
  %16 = icmp ult i32 %12, %11
  %17 = or i1 %15, %16
  %18 = zext i1 %17 to i8
  store i8 %18, i8* %9, align 1
  %19 = and i32 %13, 255
  %20 = tail call i32 @llvm.ctpop.i32(i32 %19) 
  %21 = trunc i32 %20 to i8
  %22 = and i8 %21, 1
  %23 = xor i8 %22, 1
  %24 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 %23, i8* %24, align 1
  %25 = xor i32 %8, %6
  %26 = xor i32 %25, %13
  %27 = lshr i32 %26, 4
  %28 = trunc i32 %27 to i8
  %29 = and i8 %28, 1
  %30 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 %29, i8* %30, align 1
  %31 = icmp eq i32 %13, 0
  %32 = zext i1 %31 to i8
  %33 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  store i8 %32, i8* %33, align 1
  %34 = lshr i32 %13, 31
  %35 = trunc i32 %34 to i8
  %36 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 %35, i8* %36, align 1
  %37 = lshr i32 %6, 31
  %38 = lshr i32 %8, 31
  %39 = xor i32 %38, %37
  %40 = xor i32 %34, %37
  %41 = add nuw nsw i32 %40, %39
  %42 = icmp eq i32 %41, 2
  %43 = zext i1 %42 to i8
  %44 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 %43, i8* %44, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3SBBI3RnWImE2RnImE2MnImEEEP6MemoryS8_R5StateT_T0_T1_(%struct.Memory*, %struct.State* nocapture dereferenceable(3376), i64* nocapture, i64, i64)  {
  %6 = inttoptr i64 %4 to i64*
  %7 = load i64, i64* %6
  %8 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  %9 = load i8, i8* %8, align 1
  %10 = zext i8 %9 to i64
  %11 = sub i64 %3, %7
  %12 = sub i64 %11, %10
  store i64 %12, i64* %2, align 8
  %13 = icmp ugt i64 %7, %3
  %14 = icmp ult i64 %11, %10
  %15 = or i1 %13, %14
  %16 = zext i1 %15 to i8
  store i8 %16, i8* %8, align 1
  %17 = trunc i64 %12 to i32
  %18 = and i32 %17, 255
  %19 = tail call i32 @llvm.ctpop.i32(i32 %18) 
  %20 = trunc i32 %19 to i8
  %21 = and i8 %20, 1
  %22 = xor i8 %21, 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 %22, i8* %23, align 1
  %24 = xor i64 %7, %3
  %25 = xor i64 %24, %12
  %26 = lshr i64 %25, 4
  %27 = trunc i64 %26 to i8
  %28 = and i8 %27, 1
  %29 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 %28, i8* %29, align 1
  %30 = icmp eq i64 %12, 0
  %31 = zext i1 %30 to i8
  %32 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  store i8 %31, i8* %32, align 1
  %33 = lshr i64 %12, 63
  %34 = trunc i64 %33 to i8
  %35 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 %34, i8* %35, align 1
  %36 = lshr i64 %3, 63
  %37 = lshr i64 %7, 63
  %38 = xor i64 %37, %36
  %39 = xor i64 %33, %36
  %40 = add nuw nsw i64 %39, %38
  %41 = icmp eq i64 %40, 2
  %42 = zext i1 %41 to i8
  %43 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 %42, i8* %43, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3ADCI3MnWIhE2MnIhE2InIhEEEP6MemoryS8_R5StateT_T0_T1_(%struct.Memory*, %struct.State* nocapture dereferenceable(3376), i64, i64, i64)  {
  %6 = inttoptr i64 %3 to i8*
  %7 = load i8, i8* %6
  %8 = trunc i64 %4 to i8
  %9 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  %10 = load i8, i8* %9, align 1
  %11 = add i8 %7, %8
  %12 = add i8 %10, %11
  %13 = inttoptr i64 %2 to i8*
  store i8 %12, i8* %13
  %14 = icmp ult i8 %11, %7
  %15 = icmp ult i8 %11, %8
  %16 = or i1 %14, %15
  br i1 %16, label %21, label %17

; <label>:17:                                     ; preds = %5
  %18 = icmp ult i8 %12, %11
  %19 = icmp ult i8 %12, %10
  %20 = or i1 %18, %19
  br label %21

; <label>:21:                                     ; preds = %17, %5
  %22 = phi i1 [ true, %5 ], [ %20, %17 ]
  %23 = zext i1 %22 to i8
  store i8 %23, i8* %9, align 1
  %24 = zext i8 %12 to i32
  %25 = tail call i32 @llvm.ctpop.i32(i32 %24) 
  %26 = trunc i32 %25 to i8
  %27 = and i8 %26, 1
  %28 = xor i8 %27, 1
  %29 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 %28, i8* %29, align 1
  %30 = xor i8 %7, %8
  %31 = xor i8 %30, %12
  %32 = lshr i8 %31, 4
  %33 = and i8 %32, 1
  %34 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 %33, i8* %34, align 1
  %35 = icmp eq i8 %12, 0
  %36 = zext i1 %35 to i8
  %37 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  store i8 %36, i8* %37, align 1
  %38 = lshr i8 %12, 7
  %39 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 %38, i8* %39, align 1
  %40 = lshr i8 %7, 7
  %41 = lshr i8 %8, 7
  %42 = xor i8 %38, %40
  %43 = xor i8 %38, %41
  %44 = add nuw nsw i8 %42, %43
  %45 = icmp eq i8 %44, 2
  %46 = zext i1 %45 to i8
  %47 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 %46, i8* %47, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3ADCI3RnWIhE2RnIhE2InIhEEEP6MemoryS8_R5StateT_T0_T1_(%struct.Memory* readnone returned, %struct.State* nocapture dereferenceable(3376), i8* nocapture, i64, i64)  {
  %6 = trunc i64 %3 to i8
  %7 = trunc i64 %4 to i8
  %8 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  %9 = load i8, i8* %8, align 1
  %10 = add i8 %7, %6
  %11 = add i8 %9, %10
  store i8 %11, i8* %2, align 1
  %12 = icmp ult i8 %10, %6
  %13 = icmp ult i8 %10, %7
  %14 = or i1 %12, %13
  br i1 %14, label %19, label %15

; <label>:15:                                     ; preds = %5
  %16 = icmp ult i8 %11, %10
  %17 = icmp ult i8 %11, %9
  %18 = or i1 %16, %17
  br label %19

; <label>:19:                                     ; preds = %15, %5
  %20 = phi i1 [ true, %5 ], [ %18, %15 ]
  %21 = zext i1 %20 to i8
  store i8 %21, i8* %8, align 1
  %22 = zext i8 %11 to i32
  %23 = tail call i32 @llvm.ctpop.i32(i32 %22) 
  %24 = trunc i32 %23 to i8
  %25 = and i8 %24, 1
  %26 = xor i8 %25, 1
  %27 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 %26, i8* %27, align 1
  %28 = xor i64 %4, %3
  %29 = trunc i64 %28 to i8
  %30 = xor i8 %11, %29
  %31 = lshr i8 %30, 4
  %32 = and i8 %31, 1
  %33 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 %32, i8* %33, align 1
  %34 = icmp eq i8 %11, 0
  %35 = zext i1 %34 to i8
  %36 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  store i8 %35, i8* %36, align 1
  %37 = lshr i8 %11, 7
  %38 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 %37, i8* %38, align 1
  %39 = lshr i8 %6, 7
  %40 = lshr i8 %7, 7
  %41 = xor i8 %37, %39
  %42 = xor i8 %37, %40
  %43 = add nuw nsw i8 %41, %42
  %44 = icmp eq i8 %43, 2
  %45 = zext i1 %44 to i8
  %46 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 %45, i8* %46, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3ADCI3MnWItE2MnItE2InItEEEP6MemoryS8_R5StateT_T0_T1_(%struct.Memory*, %struct.State* nocapture dereferenceable(3376), i64, i64, i64)  {
  %6 = inttoptr i64 %3 to i16*
  %7 = load i16, i16* %6
  %8 = trunc i64 %4 to i16
  %9 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  %10 = load i8, i8* %9, align 1
  %11 = zext i8 %10 to i16
  %12 = add i16 %7, %8
  %13 = add i16 %11, %12
  %14 = inttoptr i64 %2 to i16*
  store i16 %13, i16* %14
  %15 = icmp ult i16 %12, %7
  %16 = icmp ult i16 %12, %8
  %17 = or i1 %15, %16
  br i1 %17, label %22, label %18

; <label>:18:                                     ; preds = %5
  %19 = icmp ult i16 %13, %12
  %20 = icmp ult i16 %13, %11
  %21 = or i1 %19, %20
  br label %22

; <label>:22:                                     ; preds = %18, %5
  %23 = phi i1 [ true, %5 ], [ %21, %18 ]
  %24 = zext i1 %23 to i8
  store i8 %24, i8* %9, align 1
  %25 = and i16 %13, 255
  %26 = zext i16 %25 to i32
  %27 = tail call i32 @llvm.ctpop.i32(i32 %26) 
  %28 = trunc i32 %27 to i8
  %29 = and i8 %28, 1
  %30 = xor i8 %29, 1
  %31 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 %30, i8* %31, align 1
  %32 = xor i16 %7, %8
  %33 = xor i16 %32, %13
  %34 = lshr i16 %33, 4
  %35 = trunc i16 %34 to i8
  %36 = and i8 %35, 1
  %37 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 %36, i8* %37, align 1
  %38 = icmp eq i16 %13, 0
  %39 = zext i1 %38 to i8
  %40 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  store i8 %39, i8* %40, align 1
  %41 = lshr i16 %13, 15
  %42 = trunc i16 %41 to i8
  %43 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 %42, i8* %43, align 1
  %44 = lshr i16 %7, 15
  %45 = lshr i16 %8, 15
  %46 = xor i16 %41, %44
  %47 = xor i16 %41, %45
  %48 = add nuw nsw i16 %46, %47
  %49 = icmp eq i16 %48, 2
  %50 = zext i1 %49 to i8
  %51 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 %50, i8* %51, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3ADCI3MnWIjE2MnIjE2InIjEEEP6MemoryS8_R5StateT_T0_T1_(%struct.Memory*, %struct.State* nocapture dereferenceable(3376), i64, i64, i64)  {
  %6 = inttoptr i64 %3 to i32*
  %7 = load i32, i32* %6
  %8 = trunc i64 %4 to i32
  %9 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  %10 = load i8, i8* %9, align 1
  %11 = zext i8 %10 to i32
  %12 = add i32 %7, %8
  %13 = add i32 %11, %12
  %14 = inttoptr i64 %2 to i32*
  store i32 %13, i32* %14
  %15 = icmp ult i32 %12, %7
  %16 = icmp ult i32 %12, %8
  %17 = or i1 %15, %16
  br i1 %17, label %22, label %18

; <label>:18:                                     ; preds = %5
  %19 = icmp ult i32 %13, %12
  %20 = icmp ult i32 %13, %11
  %21 = or i1 %19, %20
  br label %22

; <label>:22:                                     ; preds = %18, %5
  %23 = phi i1 [ true, %5 ], [ %21, %18 ]
  %24 = zext i1 %23 to i8
  store i8 %24, i8* %9, align 1
  %25 = and i32 %13, 255
  %26 = tail call i32 @llvm.ctpop.i32(i32 %25) 
  %27 = trunc i32 %26 to i8
  %28 = and i8 %27, 1
  %29 = xor i8 %28, 1
  %30 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 %29, i8* %30, align 1
  %31 = xor i32 %7, %8
  %32 = xor i32 %31, %13
  %33 = lshr i32 %32, 4
  %34 = trunc i32 %33 to i8
  %35 = and i8 %34, 1
  %36 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 %35, i8* %36, align 1
  %37 = icmp eq i32 %13, 0
  %38 = zext i1 %37 to i8
  %39 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  store i8 %38, i8* %39, align 1
  %40 = lshr i32 %13, 31
  %41 = trunc i32 %40 to i8
  %42 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 %41, i8* %42, align 1
  %43 = lshr i32 %7, 31
  %44 = lshr i32 %8, 31
  %45 = xor i32 %40, %43
  %46 = xor i32 %40, %44
  %47 = add nuw nsw i32 %45, %46
  %48 = icmp eq i32 %47, 2
  %49 = zext i1 %48 to i8
  %50 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 %49, i8* %50, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3ADCI3MnWImE2MnImE2InImEEEP6MemoryS8_R5StateT_T0_T1_(%struct.Memory*, %struct.State* nocapture dereferenceable(3376), i64, i64, i64)  {
  %6 = inttoptr i64 %3 to i64*
  %7 = load i64, i64* %6
  %8 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  %9 = load i8, i8* %8, align 1
  %10 = zext i8 %9 to i64
  %11 = add i64 %7, %4
  %12 = add i64 %10, %11
  %13 = inttoptr i64 %2 to i64*
  store i64 %12, i64* %13
  %14 = icmp ult i64 %11, %7
  %15 = icmp ult i64 %11, %4
  %16 = or i1 %14, %15
  br i1 %16, label %21, label %17

; <label>:17:                                     ; preds = %5
  %18 = icmp ult i64 %12, %11
  %19 = icmp ult i64 %12, %10
  %20 = or i1 %18, %19
  br label %21

; <label>:21:                                     ; preds = %17, %5
  %22 = phi i1 [ true, %5 ], [ %20, %17 ]
  %23 = zext i1 %22 to i8
  store i8 %23, i8* %8, align 1
  %24 = trunc i64 %12 to i32
  %25 = and i32 %24, 255
  %26 = tail call i32 @llvm.ctpop.i32(i32 %25) 
  %27 = trunc i32 %26 to i8
  %28 = and i8 %27, 1
  %29 = xor i8 %28, 1
  %30 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 %29, i8* %30, align 1
  %31 = xor i64 %7, %4
  %32 = xor i64 %31, %12
  %33 = lshr i64 %32, 4
  %34 = trunc i64 %33 to i8
  %35 = and i8 %34, 1
  %36 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 %35, i8* %36, align 1
  %37 = icmp eq i64 %12, 0
  %38 = zext i1 %37 to i8
  %39 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  store i8 %38, i8* %39, align 1
  %40 = lshr i64 %12, 63
  %41 = trunc i64 %40 to i8
  %42 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 %41, i8* %42, align 1
  %43 = lshr i64 %7, 63
  %44 = lshr i64 %4, 63
  %45 = xor i64 %40, %43
  %46 = xor i64 %40, %44
  %47 = add nuw nsw i64 %45, %46
  %48 = icmp eq i64 %47, 2
  %49 = zext i1 %48 to i8
  %50 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 %49, i8* %50, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3ADCI3RnWItE2RnItE2InItEEEP6MemoryS8_R5StateT_T0_T1_(%struct.Memory* readnone returned, %struct.State* nocapture dereferenceable(3376), i16* nocapture, i64, i64)  {
  %6 = trunc i64 %3 to i16
  %7 = trunc i64 %4 to i16
  %8 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  %9 = load i8, i8* %8, align 1
  %10 = zext i8 %9 to i16
  %11 = add i16 %7, %6
  %12 = add i16 %10, %11
  store i16 %12, i16* %2, align 2
  %13 = icmp ult i16 %11, %6
  %14 = icmp ult i16 %11, %7
  %15 = or i1 %13, %14
  br i1 %15, label %20, label %16

; <label>:16:                                     ; preds = %5
  %17 = icmp ult i16 %12, %11
  %18 = icmp ult i16 %12, %10
  %19 = or i1 %17, %18
  br label %20

; <label>:20:                                     ; preds = %16, %5
  %21 = phi i1 [ true, %5 ], [ %19, %16 ]
  %22 = zext i1 %21 to i8
  store i8 %22, i8* %8, align 1
  %23 = and i16 %12, 255
  %24 = zext i16 %23 to i32
  %25 = tail call i32 @llvm.ctpop.i32(i32 %24) 
  %26 = trunc i32 %25 to i8
  %27 = and i8 %26, 1
  %28 = xor i8 %27, 1
  %29 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 %28, i8* %29, align 1
  %30 = xor i64 %4, %3
  %31 = trunc i64 %30 to i16
  %32 = xor i16 %12, %31
  %33 = lshr i16 %32, 4
  %34 = trunc i16 %33 to i8
  %35 = and i8 %34, 1
  %36 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 %35, i8* %36, align 1
  %37 = icmp eq i16 %12, 0
  %38 = zext i1 %37 to i8
  %39 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  store i8 %38, i8* %39, align 1
  %40 = lshr i16 %12, 15
  %41 = trunc i16 %40 to i8
  %42 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 %41, i8* %42, align 1
  %43 = lshr i16 %6, 15
  %44 = lshr i16 %7, 15
  %45 = xor i16 %40, %43
  %46 = xor i16 %40, %44
  %47 = add nuw nsw i16 %45, %46
  %48 = icmp eq i16 %47, 2
  %49 = zext i1 %48 to i8
  %50 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 %49, i8* %50, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3ADCI3RnWImE2RnIjE2InIjEEEP6MemoryS8_R5StateT_T0_T1_(%struct.Memory* readnone returned, %struct.State* nocapture dereferenceable(3376), i64* nocapture, i64, i64)  {
  %6 = trunc i64 %3 to i32
  %7 = trunc i64 %4 to i32
  %8 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  %9 = load i8, i8* %8, align 1
  %10 = zext i8 %9 to i32
  %11 = add i32 %7, %6
  %12 = add i32 %10, %11
  %13 = zext i32 %12 to i64
  store i64 %13, i64* %2, align 8
  %14 = icmp ult i32 %11, %6
  %15 = icmp ult i32 %11, %7
  %16 = or i1 %14, %15
  br i1 %16, label %21, label %17

; <label>:17:                                     ; preds = %5
  %18 = icmp ult i32 %12, %11
  %19 = icmp ult i32 %12, %10
  %20 = or i1 %18, %19
  br label %21

; <label>:21:                                     ; preds = %17, %5
  %22 = phi i1 [ true, %5 ], [ %20, %17 ]
  %23 = zext i1 %22 to i8
  store i8 %23, i8* %8, align 1
  %24 = and i32 %12, 255
  %25 = tail call i32 @llvm.ctpop.i32(i32 %24) 
  %26 = trunc i32 %25 to i8
  %27 = and i8 %26, 1
  %28 = xor i8 %27, 1
  %29 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 %28, i8* %29, align 1
  %30 = xor i64 %4, %3
  %31 = trunc i64 %30 to i32
  %32 = xor i32 %12, %31
  %33 = lshr i32 %32, 4
  %34 = trunc i32 %33 to i8
  %35 = and i8 %34, 1
  %36 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 %35, i8* %36, align 1
  %37 = icmp eq i32 %12, 0
  %38 = zext i1 %37 to i8
  %39 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  store i8 %38, i8* %39, align 1
  %40 = lshr i32 %12, 31
  %41 = trunc i32 %40 to i8
  %42 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 %41, i8* %42, align 1
  %43 = lshr i32 %6, 31
  %44 = lshr i32 %7, 31
  %45 = xor i32 %40, %43
  %46 = xor i32 %40, %44
  %47 = add nuw nsw i32 %45, %46
  %48 = icmp eq i32 %47, 2
  %49 = zext i1 %48 to i8
  %50 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 %49, i8* %50, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3ADCI3RnWImE2RnImE2InImEEEP6MemoryS8_R5StateT_T0_T1_(%struct.Memory* readnone returned, %struct.State* nocapture dereferenceable(3376), i64* nocapture, i64, i64)  {
  %6 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  %7 = load i8, i8* %6, align 1
  %8 = zext i8 %7 to i64
  %9 = add i64 %4, %3
  %10 = add i64 %8, %9
  store i64 %10, i64* %2, align 8
  %11 = icmp ult i64 %9, %3
  %12 = icmp ult i64 %9, %4
  %13 = or i1 %11, %12
  br i1 %13, label %18, label %14

; <label>:14:                                     ; preds = %5
  %15 = icmp ult i64 %10, %9
  %16 = icmp ult i64 %10, %8
  %17 = or i1 %15, %16
  br label %18

; <label>:18:                                     ; preds = %14, %5
  %19 = phi i1 [ true, %5 ], [ %17, %14 ]
  %20 = zext i1 %19 to i8
  store i8 %20, i8* %6, align 1
  %21 = trunc i64 %10 to i32
  %22 = and i32 %21, 255
  %23 = tail call i32 @llvm.ctpop.i32(i32 %22) 
  %24 = trunc i32 %23 to i8
  %25 = and i8 %24, 1
  %26 = xor i8 %25, 1
  %27 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 %26, i8* %27, align 1
  %28 = xor i64 %4, %3
  %29 = xor i64 %28, %10
  %30 = lshr i64 %29, 4
  %31 = trunc i64 %30 to i8
  %32 = and i8 %31, 1
  %33 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 %32, i8* %33, align 1
  %34 = icmp eq i64 %10, 0
  %35 = zext i1 %34 to i8
  %36 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  store i8 %35, i8* %36, align 1
  %37 = lshr i64 %10, 63
  %38 = trunc i64 %37 to i8
  %39 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 %38, i8* %39, align 1
  %40 = lshr i64 %3, 63
  %41 = lshr i64 %4, 63
  %42 = xor i64 %37, %40
  %43 = xor i64 %37, %41
  %44 = add nuw nsw i64 %42, %43
  %45 = icmp eq i64 %44, 2
  %46 = zext i1 %45 to i8
  %47 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 %46, i8* %47, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3ADCI3MnWIhE2MnIhE2RnIhEEEP6MemoryS8_R5StateT_T0_T1_(%struct.Memory*, %struct.State* nocapture dereferenceable(3376), i64, i64, i64)  {
  %6 = inttoptr i64 %3 to i8*
  %7 = load i8, i8* %6
  %8 = trunc i64 %4 to i8
  %9 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  %10 = load i8, i8* %9, align 1
  %11 = add i8 %7, %8
  %12 = add i8 %10, %11
  %13 = inttoptr i64 %2 to i8*
  store i8 %12, i8* %13
  %14 = icmp ult i8 %11, %7
  %15 = icmp ult i8 %11, %8
  %16 = or i1 %14, %15
  br i1 %16, label %21, label %17

; <label>:17:                                     ; preds = %5
  %18 = icmp ult i8 %12, %11
  %19 = icmp ult i8 %12, %10
  %20 = or i1 %18, %19
  br label %21

; <label>:21:                                     ; preds = %17, %5
  %22 = phi i1 [ true, %5 ], [ %20, %17 ]
  %23 = zext i1 %22 to i8
  store i8 %23, i8* %9, align 1
  %24 = zext i8 %12 to i32
  %25 = tail call i32 @llvm.ctpop.i32(i32 %24) 
  %26 = trunc i32 %25 to i8
  %27 = and i8 %26, 1
  %28 = xor i8 %27, 1
  %29 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 %28, i8* %29, align 1
  %30 = xor i8 %7, %8
  %31 = xor i8 %30, %12
  %32 = lshr i8 %31, 4
  %33 = and i8 %32, 1
  %34 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 %33, i8* %34, align 1
  %35 = icmp eq i8 %12, 0
  %36 = zext i1 %35 to i8
  %37 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  store i8 %36, i8* %37, align 1
  %38 = lshr i8 %12, 7
  %39 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 %38, i8* %39, align 1
  %40 = lshr i8 %7, 7
  %41 = lshr i8 %8, 7
  %42 = xor i8 %38, %40
  %43 = xor i8 %38, %41
  %44 = add nuw nsw i8 %42, %43
  %45 = icmp eq i8 %44, 2
  %46 = zext i1 %45 to i8
  %47 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 %46, i8* %47, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3ADCI3RnWIhE2RnIhES4_EEP6MemoryS6_R5StateT_T0_T1_(%struct.Memory* readnone returned, %struct.State* nocapture dereferenceable(3376), i8* nocapture, i64, i64)  {
  %6 = trunc i64 %3 to i8
  %7 = trunc i64 %4 to i8
  %8 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  %9 = load i8, i8* %8, align 1
  %10 = add i8 %7, %6
  %11 = add i8 %9, %10
  store i8 %11, i8* %2, align 1
  %12 = icmp ult i8 %10, %6
  %13 = icmp ult i8 %10, %7
  %14 = or i1 %12, %13
  br i1 %14, label %19, label %15

; <label>:15:                                     ; preds = %5
  %16 = icmp ult i8 %11, %10
  %17 = icmp ult i8 %11, %9
  %18 = or i1 %16, %17
  br label %19

; <label>:19:                                     ; preds = %15, %5
  %20 = phi i1 [ true, %5 ], [ %18, %15 ]
  %21 = zext i1 %20 to i8
  store i8 %21, i8* %8, align 1
  %22 = zext i8 %11 to i32
  %23 = tail call i32 @llvm.ctpop.i32(i32 %22) 
  %24 = trunc i32 %23 to i8
  %25 = and i8 %24, 1
  %26 = xor i8 %25, 1
  %27 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 %26, i8* %27, align 1
  %28 = xor i64 %4, %3
  %29 = trunc i64 %28 to i8
  %30 = xor i8 %11, %29
  %31 = lshr i8 %30, 4
  %32 = and i8 %31, 1
  %33 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 %32, i8* %33, align 1
  %34 = icmp eq i8 %11, 0
  %35 = zext i1 %34 to i8
  %36 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  store i8 %35, i8* %36, align 1
  %37 = lshr i8 %11, 7
  %38 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 %37, i8* %38, align 1
  %39 = lshr i8 %6, 7
  %40 = lshr i8 %7, 7
  %41 = xor i8 %37, %39
  %42 = xor i8 %37, %40
  %43 = add nuw nsw i8 %41, %42
  %44 = icmp eq i8 %43, 2
  %45 = zext i1 %44 to i8
  %46 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 %45, i8* %46, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3ADCI3MnWItE2MnItE2RnItEEEP6MemoryS8_R5StateT_T0_T1_(%struct.Memory*, %struct.State* nocapture dereferenceable(3376), i64, i64, i64)  {
  %6 = inttoptr i64 %3 to i16*
  %7 = load i16, i16* %6
  %8 = trunc i64 %4 to i16
  %9 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  %10 = load i8, i8* %9, align 1
  %11 = zext i8 %10 to i16
  %12 = add i16 %7, %8
  %13 = add i16 %11, %12
  %14 = inttoptr i64 %2 to i16*
  store i16 %13, i16* %14
  %15 = icmp ult i16 %12, %7
  %16 = icmp ult i16 %12, %8
  %17 = or i1 %15, %16
  br i1 %17, label %22, label %18

; <label>:18:                                     ; preds = %5
  %19 = icmp ult i16 %13, %12
  %20 = icmp ult i16 %13, %11
  %21 = or i1 %19, %20
  br label %22

; <label>:22:                                     ; preds = %18, %5
  %23 = phi i1 [ true, %5 ], [ %21, %18 ]
  %24 = zext i1 %23 to i8
  store i8 %24, i8* %9, align 1
  %25 = and i16 %13, 255
  %26 = zext i16 %25 to i32
  %27 = tail call i32 @llvm.ctpop.i32(i32 %26) 
  %28 = trunc i32 %27 to i8
  %29 = and i8 %28, 1
  %30 = xor i8 %29, 1
  %31 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 %30, i8* %31, align 1
  %32 = xor i16 %7, %8
  %33 = xor i16 %32, %13
  %34 = lshr i16 %33, 4
  %35 = trunc i16 %34 to i8
  %36 = and i8 %35, 1
  %37 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 %36, i8* %37, align 1
  %38 = icmp eq i16 %13, 0
  %39 = zext i1 %38 to i8
  %40 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  store i8 %39, i8* %40, align 1
  %41 = lshr i16 %13, 15
  %42 = trunc i16 %41 to i8
  %43 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 %42, i8* %43, align 1
  %44 = lshr i16 %7, 15
  %45 = lshr i16 %8, 15
  %46 = xor i16 %41, %44
  %47 = xor i16 %41, %45
  %48 = add nuw nsw i16 %46, %47
  %49 = icmp eq i16 %48, 2
  %50 = zext i1 %49 to i8
  %51 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 %50, i8* %51, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3ADCI3MnWIjE2MnIjE2RnIjEEEP6MemoryS8_R5StateT_T0_T1_(%struct.Memory*, %struct.State* nocapture dereferenceable(3376), i64, i64, i64)  {
  %6 = inttoptr i64 %3 to i32*
  %7 = load i32, i32* %6
  %8 = trunc i64 %4 to i32
  %9 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  %10 = load i8, i8* %9, align 1
  %11 = zext i8 %10 to i32
  %12 = add i32 %7, %8
  %13 = add i32 %11, %12
  %14 = inttoptr i64 %2 to i32*
  store i32 %13, i32* %14
  %15 = icmp ult i32 %12, %7
  %16 = icmp ult i32 %12, %8
  %17 = or i1 %15, %16
  br i1 %17, label %22, label %18

; <label>:18:                                     ; preds = %5
  %19 = icmp ult i32 %13, %12
  %20 = icmp ult i32 %13, %11
  %21 = or i1 %19, %20
  br label %22

; <label>:22:                                     ; preds = %18, %5
  %23 = phi i1 [ true, %5 ], [ %21, %18 ]
  %24 = zext i1 %23 to i8
  store i8 %24, i8* %9, align 1
  %25 = and i32 %13, 255
  %26 = tail call i32 @llvm.ctpop.i32(i32 %25) 
  %27 = trunc i32 %26 to i8
  %28 = and i8 %27, 1
  %29 = xor i8 %28, 1
  %30 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 %29, i8* %30, align 1
  %31 = xor i32 %7, %8
  %32 = xor i32 %31, %13
  %33 = lshr i32 %32, 4
  %34 = trunc i32 %33 to i8
  %35 = and i8 %34, 1
  %36 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 %35, i8* %36, align 1
  %37 = icmp eq i32 %13, 0
  %38 = zext i1 %37 to i8
  %39 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  store i8 %38, i8* %39, align 1
  %40 = lshr i32 %13, 31
  %41 = trunc i32 %40 to i8
  %42 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 %41, i8* %42, align 1
  %43 = lshr i32 %7, 31
  %44 = lshr i32 %8, 31
  %45 = xor i32 %40, %43
  %46 = xor i32 %40, %44
  %47 = add nuw nsw i32 %45, %46
  %48 = icmp eq i32 %47, 2
  %49 = zext i1 %48 to i8
  %50 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 %49, i8* %50, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3ADCI3MnWImE2MnImE2RnImEEEP6MemoryS8_R5StateT_T0_T1_(%struct.Memory*, %struct.State* nocapture dereferenceable(3376), i64, i64, i64)  {
  %6 = inttoptr i64 %3 to i64*
  %7 = load i64, i64* %6
  %8 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  %9 = load i8, i8* %8, align 1
  %10 = zext i8 %9 to i64
  %11 = add i64 %7, %4
  %12 = add i64 %10, %11
  %13 = inttoptr i64 %2 to i64*
  store i64 %12, i64* %13
  %14 = icmp ult i64 %11, %7
  %15 = icmp ult i64 %11, %4
  %16 = or i1 %14, %15
  br i1 %16, label %21, label %17

; <label>:17:                                     ; preds = %5
  %18 = icmp ult i64 %12, %11
  %19 = icmp ult i64 %12, %10
  %20 = or i1 %18, %19
  br label %21

; <label>:21:                                     ; preds = %17, %5
  %22 = phi i1 [ true, %5 ], [ %20, %17 ]
  %23 = zext i1 %22 to i8
  store i8 %23, i8* %8, align 1
  %24 = trunc i64 %12 to i32
  %25 = and i32 %24, 255
  %26 = tail call i32 @llvm.ctpop.i32(i32 %25) 
  %27 = trunc i32 %26 to i8
  %28 = and i8 %27, 1
  %29 = xor i8 %28, 1
  %30 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 %29, i8* %30, align 1
  %31 = xor i64 %7, %4
  %32 = xor i64 %31, %12
  %33 = lshr i64 %32, 4
  %34 = trunc i64 %33 to i8
  %35 = and i8 %34, 1
  %36 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 %35, i8* %36, align 1
  %37 = icmp eq i64 %12, 0
  %38 = zext i1 %37 to i8
  %39 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  store i8 %38, i8* %39, align 1
  %40 = lshr i64 %12, 63
  %41 = trunc i64 %40 to i8
  %42 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 %41, i8* %42, align 1
  %43 = lshr i64 %7, 63
  %44 = lshr i64 %4, 63
  %45 = xor i64 %40, %43
  %46 = xor i64 %40, %44
  %47 = add nuw nsw i64 %45, %46
  %48 = icmp eq i64 %47, 2
  %49 = zext i1 %48 to i8
  %50 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 %49, i8* %50, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3ADCI3RnWItE2RnItES4_EEP6MemoryS6_R5StateT_T0_T1_(%struct.Memory* readnone returned, %struct.State* nocapture dereferenceable(3376), i16* nocapture, i64, i64)  {
  %6 = trunc i64 %3 to i16
  %7 = trunc i64 %4 to i16
  %8 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  %9 = load i8, i8* %8, align 1
  %10 = zext i8 %9 to i16
  %11 = add i16 %7, %6
  %12 = add i16 %10, %11
  store i16 %12, i16* %2, align 2
  %13 = icmp ult i16 %11, %6
  %14 = icmp ult i16 %11, %7
  %15 = or i1 %13, %14
  br i1 %15, label %20, label %16

; <label>:16:                                     ; preds = %5
  %17 = icmp ult i16 %12, %11
  %18 = icmp ult i16 %12, %10
  %19 = or i1 %17, %18
  br label %20

; <label>:20:                                     ; preds = %16, %5
  %21 = phi i1 [ true, %5 ], [ %19, %16 ]
  %22 = zext i1 %21 to i8
  store i8 %22, i8* %8, align 1
  %23 = and i16 %12, 255
  %24 = zext i16 %23 to i32
  %25 = tail call i32 @llvm.ctpop.i32(i32 %24) 
  %26 = trunc i32 %25 to i8
  %27 = and i8 %26, 1
  %28 = xor i8 %27, 1
  %29 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 %28, i8* %29, align 1
  %30 = xor i64 %4, %3
  %31 = trunc i64 %30 to i16
  %32 = xor i16 %12, %31
  %33 = lshr i16 %32, 4
  %34 = trunc i16 %33 to i8
  %35 = and i8 %34, 1
  %36 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 %35, i8* %36, align 1
  %37 = icmp eq i16 %12, 0
  %38 = zext i1 %37 to i8
  %39 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  store i8 %38, i8* %39, align 1
  %40 = lshr i16 %12, 15
  %41 = trunc i16 %40 to i8
  %42 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 %41, i8* %42, align 1
  %43 = lshr i16 %6, 15
  %44 = lshr i16 %7, 15
  %45 = xor i16 %40, %43
  %46 = xor i16 %40, %44
  %47 = add nuw nsw i16 %45, %46
  %48 = icmp eq i16 %47, 2
  %49 = zext i1 %48 to i8
  %50 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 %49, i8* %50, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3ADCI3RnWImE2RnIjES4_EEP6MemoryS6_R5StateT_T0_T1_(%struct.Memory* readnone returned, %struct.State* nocapture dereferenceable(3376), i64* nocapture, i64, i64)  {
  %6 = trunc i64 %3 to i32
  %7 = trunc i64 %4 to i32
  %8 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  %9 = load i8, i8* %8, align 1
  %10 = zext i8 %9 to i32
  %11 = add i32 %7, %6
  %12 = add i32 %10, %11
  %13 = zext i32 %12 to i64
  store i64 %13, i64* %2, align 8
  %14 = icmp ult i32 %11, %6
  %15 = icmp ult i32 %11, %7
  %16 = or i1 %14, %15
  br i1 %16, label %21, label %17

; <label>:17:                                     ; preds = %5
  %18 = icmp ult i32 %12, %11
  %19 = icmp ult i32 %12, %10
  %20 = or i1 %18, %19
  br label %21

; <label>:21:                                     ; preds = %17, %5
  %22 = phi i1 [ true, %5 ], [ %20, %17 ]
  %23 = zext i1 %22 to i8
  store i8 %23, i8* %8, align 1
  %24 = and i32 %12, 255
  %25 = tail call i32 @llvm.ctpop.i32(i32 %24) 
  %26 = trunc i32 %25 to i8
  %27 = and i8 %26, 1
  %28 = xor i8 %27, 1
  %29 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 %28, i8* %29, align 1
  %30 = xor i64 %4, %3
  %31 = trunc i64 %30 to i32
  %32 = xor i32 %12, %31
  %33 = lshr i32 %32, 4
  %34 = trunc i32 %33 to i8
  %35 = and i8 %34, 1
  %36 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 %35, i8* %36, align 1
  %37 = icmp eq i32 %12, 0
  %38 = zext i1 %37 to i8
  %39 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  store i8 %38, i8* %39, align 1
  %40 = lshr i32 %12, 31
  %41 = trunc i32 %40 to i8
  %42 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 %41, i8* %42, align 1
  %43 = lshr i32 %6, 31
  %44 = lshr i32 %7, 31
  %45 = xor i32 %40, %43
  %46 = xor i32 %40, %44
  %47 = add nuw nsw i32 %45, %46
  %48 = icmp eq i32 %47, 2
  %49 = zext i1 %48 to i8
  %50 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 %49, i8* %50, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3ADCI3RnWImE2RnImES4_EEP6MemoryS6_R5StateT_T0_T1_(%struct.Memory* readnone returned, %struct.State* nocapture dereferenceable(3376), i64* nocapture, i64, i64)  {
  %6 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  %7 = load i8, i8* %6, align 1
  %8 = zext i8 %7 to i64
  %9 = add i64 %4, %3
  %10 = add i64 %8, %9
  store i64 %10, i64* %2, align 8
  %11 = icmp ult i64 %9, %3
  %12 = icmp ult i64 %9, %4
  %13 = or i1 %11, %12
  br i1 %13, label %18, label %14

; <label>:14:                                     ; preds = %5
  %15 = icmp ult i64 %10, %9
  %16 = icmp ult i64 %10, %8
  %17 = or i1 %15, %16
  br label %18

; <label>:18:                                     ; preds = %14, %5
  %19 = phi i1 [ true, %5 ], [ %17, %14 ]
  %20 = zext i1 %19 to i8
  store i8 %20, i8* %6, align 1
  %21 = trunc i64 %10 to i32
  %22 = and i32 %21, 255
  %23 = tail call i32 @llvm.ctpop.i32(i32 %22) 
  %24 = trunc i32 %23 to i8
  %25 = and i8 %24, 1
  %26 = xor i8 %25, 1
  %27 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 %26, i8* %27, align 1
  %28 = xor i64 %4, %3
  %29 = xor i64 %28, %10
  %30 = lshr i64 %29, 4
  %31 = trunc i64 %30 to i8
  %32 = and i8 %31, 1
  %33 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 %32, i8* %33, align 1
  %34 = icmp eq i64 %10, 0
  %35 = zext i1 %34 to i8
  %36 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  store i8 %35, i8* %36, align 1
  %37 = lshr i64 %10, 63
  %38 = trunc i64 %37 to i8
  %39 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 %38, i8* %39, align 1
  %40 = lshr i64 %3, 63
  %41 = lshr i64 %4, 63
  %42 = xor i64 %37, %40
  %43 = xor i64 %37, %41
  %44 = add nuw nsw i64 %42, %43
  %45 = icmp eq i64 %44, 2
  %46 = zext i1 %45 to i8
  %47 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 %46, i8* %47, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3ADCI3RnWIhE2RnIhE2MnIhEEEP6MemoryS8_R5StateT_T0_T1_(%struct.Memory*, %struct.State* nocapture dereferenceable(3376), i8* nocapture, i64, i64)  {
  %6 = trunc i64 %3 to i8
  %7 = inttoptr i64 %4 to i8*
  %8 = load i8, i8* %7
  %9 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  %10 = load i8, i8* %9, align 1
  %11 = add i8 %8, %6
  %12 = add i8 %10, %11
  store i8 %12, i8* %2, align 1
  %13 = icmp ult i8 %11, %6
  %14 = icmp ult i8 %11, %8
  %15 = or i1 %13, %14
  br i1 %15, label %20, label %16

; <label>:16:                                     ; preds = %5
  %17 = icmp ult i8 %12, %11
  %18 = icmp ult i8 %12, %10
  %19 = or i1 %17, %18
  br label %20

; <label>:20:                                     ; preds = %16, %5
  %21 = phi i1 [ true, %5 ], [ %19, %16 ]
  %22 = zext i1 %21 to i8
  store i8 %22, i8* %9, align 1
  %23 = zext i8 %12 to i32
  %24 = tail call i32 @llvm.ctpop.i32(i32 %23) 
  %25 = trunc i32 %24 to i8
  %26 = and i8 %25, 1
  %27 = xor i8 %26, 1
  %28 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 %27, i8* %28, align 1
  %29 = xor i8 %8, %6
  %30 = xor i8 %29, %12
  %31 = lshr i8 %30, 4
  %32 = and i8 %31, 1
  %33 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 %32, i8* %33, align 1
  %34 = icmp eq i8 %12, 0
  %35 = zext i1 %34 to i8
  %36 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  store i8 %35, i8* %36, align 1
  %37 = lshr i8 %12, 7
  %38 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 %37, i8* %38, align 1
  %39 = lshr i8 %6, 7
  %40 = lshr i8 %8, 7
  %41 = xor i8 %37, %39
  %42 = xor i8 %37, %40
  %43 = add nuw nsw i8 %41, %42
  %44 = icmp eq i8 %43, 2
  %45 = zext i1 %44 to i8
  %46 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 %45, i8* %46, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3ADCI3RnWItE2RnItE2MnItEEEP6MemoryS8_R5StateT_T0_T1_(%struct.Memory*, %struct.State* nocapture dereferenceable(3376), i16* nocapture, i64, i64)  {
  %6 = trunc i64 %3 to i16
  %7 = inttoptr i64 %4 to i16*
  %8 = load i16, i16* %7
  %9 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  %10 = load i8, i8* %9, align 1
  %11 = zext i8 %10 to i16
  %12 = add i16 %8, %6
  %13 = add i16 %11, %12
  store i16 %13, i16* %2, align 2
  %14 = icmp ult i16 %12, %6
  %15 = icmp ult i16 %12, %8
  %16 = or i1 %14, %15
  br i1 %16, label %21, label %17

; <label>:17:                                     ; preds = %5
  %18 = icmp ult i16 %13, %12
  %19 = icmp ult i16 %13, %11
  %20 = or i1 %18, %19
  br label %21

; <label>:21:                                     ; preds = %17, %5
  %22 = phi i1 [ true, %5 ], [ %20, %17 ]
  %23 = zext i1 %22 to i8
  store i8 %23, i8* %9, align 1
  %24 = and i16 %13, 255
  %25 = zext i16 %24 to i32
  %26 = tail call i32 @llvm.ctpop.i32(i32 %25) 
  %27 = trunc i32 %26 to i8
  %28 = and i8 %27, 1
  %29 = xor i8 %28, 1
  %30 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 %29, i8* %30, align 1
  %31 = xor i16 %8, %6
  %32 = xor i16 %31, %13
  %33 = lshr i16 %32, 4
  %34 = trunc i16 %33 to i8
  %35 = and i8 %34, 1
  %36 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 %35, i8* %36, align 1
  %37 = icmp eq i16 %13, 0
  %38 = zext i1 %37 to i8
  %39 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  store i8 %38, i8* %39, align 1
  %40 = lshr i16 %13, 15
  %41 = trunc i16 %40 to i8
  %42 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 %41, i8* %42, align 1
  %43 = lshr i16 %6, 15
  %44 = lshr i16 %8, 15
  %45 = xor i16 %40, %43
  %46 = xor i16 %40, %44
  %47 = add nuw nsw i16 %45, %46
  %48 = icmp eq i16 %47, 2
  %49 = zext i1 %48 to i8
  %50 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 %49, i8* %50, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3ADCI3RnWImE2RnIjE2MnIjEEEP6MemoryS8_R5StateT_T0_T1_(%struct.Memory*, %struct.State* nocapture dereferenceable(3376), i64* nocapture, i64, i64)  {
  %6 = trunc i64 %3 to i32
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7
  %9 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  %10 = load i8, i8* %9, align 1
  %11 = zext i8 %10 to i32
  %12 = add i32 %8, %6
  %13 = add i32 %11, %12
  %14 = zext i32 %13 to i64
  store i64 %14, i64* %2, align 8
  %15 = icmp ult i32 %12, %6
  %16 = icmp ult i32 %12, %8
  %17 = or i1 %15, %16
  br i1 %17, label %22, label %18

; <label>:18:                                     ; preds = %5
  %19 = icmp ult i32 %13, %12
  %20 = icmp ult i32 %13, %11
  %21 = or i1 %19, %20
  br label %22

; <label>:22:                                     ; preds = %18, %5
  %23 = phi i1 [ true, %5 ], [ %21, %18 ]
  %24 = zext i1 %23 to i8
  store i8 %24, i8* %9, align 1
  %25 = and i32 %13, 255
  %26 = tail call i32 @llvm.ctpop.i32(i32 %25) 
  %27 = trunc i32 %26 to i8
  %28 = and i8 %27, 1
  %29 = xor i8 %28, 1
  %30 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 %29, i8* %30, align 1
  %31 = xor i32 %8, %6
  %32 = xor i32 %31, %13
  %33 = lshr i32 %32, 4
  %34 = trunc i32 %33 to i8
  %35 = and i8 %34, 1
  %36 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 %35, i8* %36, align 1
  %37 = icmp eq i32 %13, 0
  %38 = zext i1 %37 to i8
  %39 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  store i8 %38, i8* %39, align 1
  %40 = lshr i32 %13, 31
  %41 = trunc i32 %40 to i8
  %42 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 %41, i8* %42, align 1
  %43 = lshr i32 %6, 31
  %44 = lshr i32 %8, 31
  %45 = xor i32 %40, %43
  %46 = xor i32 %40, %44
  %47 = add nuw nsw i32 %45, %46
  %48 = icmp eq i32 %47, 2
  %49 = zext i1 %48 to i8
  %50 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 %49, i8* %50, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3ADCI3RnWImE2RnImE2MnImEEEP6MemoryS8_R5StateT_T0_T1_(%struct.Memory*, %struct.State* nocapture dereferenceable(3376), i64* nocapture, i64, i64)  {
  %6 = inttoptr i64 %4 to i64*
  %7 = load i64, i64* %6
  %8 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  %9 = load i8, i8* %8, align 1
  %10 = zext i8 %9 to i64
  %11 = add i64 %7, %3
  %12 = add i64 %10, %11
  store i64 %12, i64* %2, align 8
  %13 = icmp ult i64 %11, %3
  %14 = icmp ult i64 %11, %7
  %15 = or i1 %13, %14
  br i1 %15, label %20, label %16

; <label>:16:                                     ; preds = %5
  %17 = icmp ult i64 %12, %11
  %18 = icmp ult i64 %12, %10
  %19 = or i1 %17, %18
  br label %20

; <label>:20:                                     ; preds = %16, %5
  %21 = phi i1 [ true, %5 ], [ %19, %16 ]
  %22 = zext i1 %21 to i8
  store i8 %22, i8* %8, align 1
  %23 = trunc i64 %12 to i32
  %24 = and i32 %23, 255
  %25 = tail call i32 @llvm.ctpop.i32(i32 %24) 
  %26 = trunc i32 %25 to i8
  %27 = and i8 %26, 1
  %28 = xor i8 %27, 1
  %29 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 %28, i8* %29, align 1
  %30 = xor i64 %7, %3
  %31 = xor i64 %30, %12
  %32 = lshr i64 %31, 4
  %33 = trunc i64 %32 to i8
  %34 = and i8 %33, 1
  %35 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 %34, i8* %35, align 1
  %36 = icmp eq i64 %12, 0
  %37 = zext i1 %36 to i8
  %38 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  store i8 %37, i8* %38, align 1
  %39 = lshr i64 %12, 63
  %40 = trunc i64 %39 to i8
  %41 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 %40, i8* %41, align 1
  %42 = lshr i64 %3, 63
  %43 = lshr i64 %7, 63
  %44 = xor i64 %39, %42
  %45 = xor i64 %39, %43
  %46 = add nuw nsw i64 %44, %45
  %47 = icmp eq i64 %46, 2
  %48 = zext i1 %47 to i8
  %49 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 %48, i8* %49, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind readonly
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L4SETBI3MnWIhEEEP6MemoryS4_R5StateT_(%struct.Memory* readnone, %struct.State* nocapture readonly dereferenceable(3376), i64)  {
  %4 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  %5 = load i8, i8* %4, align 1
  %6 = inttoptr i64 %2 to i8*
  store i8 %5, i8* %6
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline norecurse nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L4SETBI3RnWIhEEEP6MemoryS4_R5StateT_(%struct.Memory* readnone returned, %struct.State* nocapture readonly dereferenceable(3376), i8* nocapture)  {
  %4 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  %5 = load i8, i8* %4, align 1
  store i8 %5, i8* %2, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind readonly
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L4SETLI3MnWIhEEEP6MemoryS4_R5StateT_(%struct.Memory* readnone, %struct.State* nocapture readonly dereferenceable(3376), i64)  {
  %4 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = xor i1 %6, %9
  %11 = zext i1 %10 to i8
  %12 = inttoptr i64 %2 to i8*
  store i8 %11, i8* %12
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline norecurse nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L4SETLI3RnWIhEEEP6MemoryS4_R5StateT_(%struct.Memory* readnone returned, %struct.State* nocapture readonly dereferenceable(3376), i8* nocapture)  {
  %4 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = xor i1 %6, %9
  %11 = zext i1 %10 to i8
  store i8 %11, i8* %2, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind readonly
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L4SETOI3MnWIhEEEP6MemoryS4_R5StateT_(%struct.Memory* readnone, %struct.State* nocapture readonly dereferenceable(3376), i64)  {
  %4 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  %5 = load i8, i8* %4, align 1
  %6 = inttoptr i64 %2 to i8*
  store i8 %5, i8* %6
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline norecurse nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L4SETOI3RnWIhEEEP6MemoryS4_R5StateT_(%struct.Memory* readnone returned, %struct.State* nocapture readonly dereferenceable(3376), i8* nocapture)  {
  %4 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  %5 = load i8, i8* %4, align 1
  store i8 %5, i8* %2, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind readonly
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L4SETPI3MnWIhEEEP6MemoryS4_R5StateT_(%struct.Memory* readnone, %struct.State* nocapture readonly dereferenceable(3376), i64)  {
  %4 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  %5 = load i8, i8* %4, align 1
  %6 = inttoptr i64 %2 to i8*
  store i8 %5, i8* %6
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline norecurse nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L4SETPI3RnWIhEEEP6MemoryS4_R5StateT_(%struct.Memory* readnone returned, %struct.State* nocapture readonly dereferenceable(3376), i8* nocapture)  {
  %4 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  %5 = load i8, i8* %4, align 1
  store i8 %5, i8* %2, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind readonly
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L4SETZI3MnWIhEEEP6MemoryS4_R5StateT_(%struct.Memory* readnone, %struct.State* nocapture readonly dereferenceable(3376), i64)  {
  %4 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = inttoptr i64 %2 to i8*
  store i8 %5, i8* %6
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline norecurse nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L4SETZI3RnWIhEEEP6MemoryS4_R5StateT_(%struct.Memory* readnone returned, %struct.State* nocapture readonly dereferenceable(3376), i8* nocapture)  {
  %4 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  store i8 %5, i8* %2, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind readonly
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L4SETSI3MnWIhEEEP6MemoryS4_R5StateT_(%struct.Memory* readnone, %struct.State* nocapture readonly dereferenceable(3376), i64)  {
  %4 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  %5 = load i8, i8* %4, align 1
  %6 = inttoptr i64 %2 to i8*
  store i8 %5, i8* %6
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline norecurse nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L4SETSI3RnWIhEEEP6MemoryS4_R5StateT_(%struct.Memory* readnone returned, %struct.State* nocapture readonly dereferenceable(3376), i8* nocapture)  {
  %4 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  %5 = load i8, i8* %4, align 1
  store i8 %5, i8* %2, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind readonly
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L5SETNOI3MnWIhEEEP6MemoryS4_R5StateT_(%struct.Memory* readnone, %struct.State* nocapture readonly dereferenceable(3376), i64)  {
  %4 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  %5 = load i8, i8* %4, align 1
  %6 = icmp eq i8 %5, 0
  %7 = zext i1 %6 to i8
  %8 = inttoptr i64 %2 to i8*
  store i8 %7, i8* %8
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline norecurse nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L5SETNOI3RnWIhEEEP6MemoryS4_R5StateT_(%struct.Memory* readnone returned, %struct.State* nocapture readonly dereferenceable(3376), i8* nocapture)  {
  %4 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  %5 = load i8, i8* %4, align 1
  %6 = icmp eq i8 %5, 0
  %7 = zext i1 %6 to i8
  store i8 %7, i8* %2, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind readonly
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L5SETNLI3MnWIhEEEP6MemoryS4_R5StateT_(%struct.Memory* readnone, %struct.State* nocapture readonly dereferenceable(3376), i64)  {
  %4 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = xor i1 %6, %9
  %11 = xor i1 %10, true
  %12 = zext i1 %11 to i8
  %13 = inttoptr i64 %2 to i8*
  store i8 %12, i8* %13
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline norecurse nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L5SETNLI3RnWIhEEEP6MemoryS4_R5StateT_(%struct.Memory* readnone returned, %struct.State* nocapture readonly dereferenceable(3376), i8* nocapture)  {
  %4 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = xor i1 %6, %9
  %11 = xor i1 %10, true
  %12 = zext i1 %11 to i8
  store i8 %12, i8* %2, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind readonly
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L5SETNBI3MnWIhEEEP6MemoryS4_R5StateT_(%struct.Memory* readnone, %struct.State* nocapture readonly dereferenceable(3376), i64)  {
  %4 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  %5 = load i8, i8* %4, align 1
  %6 = icmp eq i8 %5, 0
  %7 = zext i1 %6 to i8
  %8 = inttoptr i64 %2 to i8*
  store i8 %7, i8* %8
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline norecurse nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L5SETNBI3RnWIhEEEP6MemoryS4_R5StateT_(%struct.Memory* readnone returned, %struct.State* nocapture readonly dereferenceable(3376), i8* nocapture)  {
  %4 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  %5 = load i8, i8* %4, align 1
  %6 = icmp eq i8 %5, 0
  %7 = zext i1 %6 to i8
  store i8 %7, i8* %2, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind readonly
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L5SETNZI3MnWIhEEEP6MemoryS4_R5StateT_(%struct.Memory* readnone, %struct.State* nocapture readonly dereferenceable(3376), i64)  {
  %4 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp eq i8 %5, 0
  %7 = zext i1 %6 to i8
  %8 = inttoptr i64 %2 to i8*
  store i8 %7, i8* %8
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline norecurse nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L5SETNZI3RnWIhEEEP6MemoryS4_R5StateT_(%struct.Memory* readnone returned, %struct.State* nocapture readonly dereferenceable(3376), i8* nocapture)  {
  %4 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp eq i8 %5, 0
  %7 = zext i1 %6 to i8
  store i8 %7, i8* %2, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind readonly
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L5SETNSI3MnWIhEEEP6MemoryS4_R5StateT_(%struct.Memory* readnone, %struct.State* nocapture readonly dereferenceable(3376), i64)  {
  %4 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  %5 = load i8, i8* %4, align 1
  %6 = icmp eq i8 %5, 0
  %7 = zext i1 %6 to i8
  %8 = inttoptr i64 %2 to i8*
  store i8 %7, i8* %8
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline norecurse nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L5SETNSI3RnWIhEEEP6MemoryS4_R5StateT_(%struct.Memory* readnone returned, %struct.State* nocapture readonly dereferenceable(3376), i8* nocapture)  {
  %4 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  %5 = load i8, i8* %4, align 1
  %6 = icmp eq i8 %5, 0
  %7 = zext i1 %6 to i8
  store i8 %7, i8* %2, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind readonly
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L5SETNPI3MnWIhEEEP6MemoryS4_R5StateT_(%struct.Memory* readnone, %struct.State* nocapture readonly dereferenceable(3376), i64)  {
  %4 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  %5 = load i8, i8* %4, align 1
  %6 = icmp eq i8 %5, 0
  %7 = zext i1 %6 to i8
  %8 = inttoptr i64 %2 to i8*
  store i8 %7, i8* %8
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline norecurse nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L5SETNPI3RnWIhEEEP6MemoryS4_R5StateT_(%struct.Memory* readnone returned, %struct.State* nocapture readonly dereferenceable(3376), i8* nocapture)  {
  %4 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  %5 = load i8, i8* %4, align 1
  %6 = icmp eq i8 %5, 0
  %7 = zext i1 %6 to i8
  store i8 %7, i8* %2, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind readonly
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L6SETNBEI3MnWIhEEEP6MemoryS4_R5StateT_(%struct.Memory* readnone, %struct.State* nocapture readonly dereferenceable(3376), i64)  {
  %4 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  %5 = load i8, i8* %4, align 1
  %6 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  %7 = load i8, i8* %6, align 1
  %8 = or i8 %7, %5
  %9 = icmp eq i8 %8, 0
  %10 = zext i1 %9 to i8
  %11 = inttoptr i64 %2 to i8*
  store i8 %10, i8* %11
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline norecurse nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L6SETNBEI3RnWIhEEEP6MemoryS4_R5StateT_(%struct.Memory* readnone returned, %struct.State* nocapture readonly dereferenceable(3376), i8* nocapture)  {
  %4 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  %5 = load i8, i8* %4, align 1
  %6 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  %7 = load i8, i8* %6, align 1
  %8 = or i8 %7, %5
  %9 = icmp eq i8 %8, 0
  %10 = zext i1 %9 to i8
  store i8 %10, i8* %2, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind readonly
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L5SETLEI3MnWIhEEEP6MemoryS4_R5StateT_(%struct.Memory* readnone, %struct.State* nocapture readonly dereferenceable(3376), i64)  {
  %4 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  %11 = load i8, i8* %10, align 1
  %12 = icmp ne i8 %11, 0
  %13 = xor i1 %9, %12
  %14 = or i1 %6, %13
  %15 = zext i1 %14 to i8
  %16 = inttoptr i64 %2 to i8*
  store i8 %15, i8* %16
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline norecurse nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L5SETLEI3RnWIhEEEP6MemoryS4_R5StateT_(%struct.Memory* readnone returned, %struct.State* nocapture readonly dereferenceable(3376), i8* nocapture)  {
  %4 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  %11 = load i8, i8* %10, align 1
  %12 = icmp ne i8 %11, 0
  %13 = xor i1 %9, %12
  %14 = or i1 %6, %13
  %15 = zext i1 %14 to i8
  store i8 %15, i8* %2, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind readonly
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L6SETNLEI3MnWIhEEEP6MemoryS4_R5StateT_(%struct.Memory* readnone, %struct.State* nocapture readonly dereferenceable(3376), i64)  {
  %4 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp eq i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  %11 = load i8, i8* %10, align 1
  %12 = icmp ne i8 %11, 0
  %13 = xor i1 %9, %12
  %14 = xor i1 %13, true
  %15 = and i1 %6, %14
  %16 = zext i1 %15 to i8
  %17 = inttoptr i64 %2 to i8*
  store i8 %16, i8* %17
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline norecurse nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L6SETNLEI3RnWIhEEEP6MemoryS4_R5StateT_(%struct.Memory* readnone returned, %struct.State* nocapture readonly dereferenceable(3376), i8* nocapture)  {
  %4 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp eq i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  %11 = load i8, i8* %10, align 1
  %12 = icmp ne i8 %11, 0
  %13 = xor i1 %9, %12
  %14 = xor i1 %13, true
  %15 = and i1 %6, %14
  %16 = zext i1 %15 to i8
  store i8 %16, i8* %2, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind readonly
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L5SETBEI3MnWIhEEEP6MemoryS4_R5StateT_(%struct.Memory* readnone, %struct.State* nocapture readonly dereferenceable(3376), i64)  {
  %4 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  %5 = load i8, i8* %4, align 1
  %6 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  %7 = load i8, i8* %6, align 1
  %8 = or i8 %7, %5
  %9 = icmp ne i8 %8, 0
  %10 = zext i1 %9 to i8
  %11 = inttoptr i64 %2 to i8*
  store i8 %10, i8* %11
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline norecurse nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L5SETBEI3RnWIhEEEP6MemoryS4_R5StateT_(%struct.Memory* readnone returned, %struct.State* nocapture readonly dereferenceable(3376), i8* nocapture)  {
  %4 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  %5 = load i8, i8* %4, align 1
  %6 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  %7 = load i8, i8* %6, align 1
  %8 = or i8 %7, %5
  %9 = icmp ne i8 %8, 0
  %10 = zext i1 %9 to i8
  store i8 %10, i8* %2, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L5BTmemI2MnIhE2InIhEEEP6MemoryS6_R5StateT_T0_(%struct.Memory*, %struct.State* nocapture dereferenceable(3376), i64, i64)  {
  %5 = and i64 %3, 7
  %6 = shl i64 1, %5
  %7 = trunc i64 %6 to i8
  %8 = lshr i64 %3, 3
  %9 = and i64 %8, 31
  %10 = add i64 %9, %2
  %11 = inttoptr i64 %10 to i8*
  %12 = load i8, i8* %11
  %13 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  %14 = and i8 %12, %7
  %15 = icmp ne i8 %14, 0
  %16 = zext i1 %15 to i8
  store i8 %16, i8* %13, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L5BTmemI2MnItE2InItEEEP6MemoryS6_R5StateT_T0_(%struct.Memory*, %struct.State* nocapture dereferenceable(3376), i64, i64)  {
  %5 = and i64 %3, 15
  %6 = shl i64 1, %5
  %7 = trunc i64 %6 to i16
  %8 = lshr i64 %3, 3
  %9 = and i64 %8, 8190
  %10 = add i64 %9, %2
  %11 = inttoptr i64 %10 to i16*
  %12 = load i16, i16* %11
  %13 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  %14 = and i16 %12, %7
  %15 = icmp ne i16 %14, 0
  %16 = zext i1 %15 to i8
  store i8 %16, i8* %13, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L5BTmemI2MnIjE2InIjEEEP6MemoryS6_R5StateT_T0_(%struct.Memory*, %struct.State* nocapture dereferenceable(3376), i64, i64)  {
  %5 = and i64 %3, 31
  %6 = shl i64 1, %5
  %7 = trunc i64 %6 to i32
  %8 = lshr i64 %3, 3
  %9 = and i64 %8, 536870908
  %10 = add i64 %9, %2
  %11 = inttoptr i64 %10 to i32*
  %12 = load i32, i32* %11
  %13 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  %14 = and i32 %12, %7
  %15 = icmp ne i32 %14, 0
  %16 = zext i1 %15 to i8
  store i8 %16, i8* %13, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L5BTmemI2MnImE2InImEEEP6MemoryS6_R5StateT_T0_(%struct.Memory*, %struct.State* nocapture dereferenceable(3376), i64, i64)  {
  %5 = and i64 %3, 63
  %6 = shl i64 1, %5
  %7 = lshr i64 %3, 6
  %8 = shl nuw nsw i64 %7, 3
  %9 = add i64 %8, %2
  %10 = inttoptr i64 %9 to i64*
  %11 = load i64, i64* %10
  %12 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  %13 = and i64 %11, %6
  %14 = icmp ne i64 %13, 0
  %15 = zext i1 %14 to i8
  store i8 %15, i8* %12, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline norecurse nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L5BTregI2RnIhE2InIhEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* readnone returned, %struct.State* nocapture dereferenceable(3376), i64, i64)  {
  %5 = and i64 %3, 7
  %6 = shl i64 1, %5
  %7 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  %8 = and i64 %6, %2
  %9 = icmp ne i64 %8, 0
  %10 = zext i1 %9 to i8
  store i8 %10, i8* %7, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline norecurse nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L5BTregI2RnItE2InItEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* readnone returned, %struct.State* nocapture dereferenceable(3376), i64, i64)  {
  %5 = and i64 %3, 15
  %6 = shl i64 1, %5
  %7 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  %8 = and i64 %6, %2
  %9 = icmp ne i64 %8, 0
  %10 = zext i1 %9 to i8
  store i8 %10, i8* %7, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline norecurse nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L5BTregI2RnIjE2InIjEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* readnone returned, %struct.State* nocapture dereferenceable(3376), i64, i64)  {
  %5 = and i64 %3, 31
  %6 = shl i64 1, %5
  %7 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  %8 = and i64 %6, %2
  %9 = icmp ne i64 %8, 0
  %10 = zext i1 %9 to i8
  store i8 %10, i8* %7, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline norecurse nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L5BTregI2RnImE2InImEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* readnone returned, %struct.State* nocapture dereferenceable(3376), i64, i64)  {
  %5 = and i64 %3, 63
  %6 = shl i64 1, %5
  %7 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  %8 = and i64 %6, %2
  %9 = icmp ne i64 %8, 0
  %10 = zext i1 %9 to i8
  store i8 %10, i8* %7, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L5BTmemI2MnIhE2RnIhEEEP6MemoryS6_R5StateT_T0_(%struct.Memory*, %struct.State* nocapture dereferenceable(3376), i64, i64)  {
  %5 = and i64 %3, 7
  %6 = shl i64 1, %5
  %7 = trunc i64 %6 to i8
  %8 = lshr i64 %3, 3
  %9 = and i64 %8, 31
  %10 = add i64 %9, %2
  %11 = inttoptr i64 %10 to i8*
  %12 = load i8, i8* %11
  %13 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  %14 = and i8 %12, %7
  %15 = icmp ne i8 %14, 0
  %16 = zext i1 %15 to i8
  store i8 %16, i8* %13, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L5BTmemI2MnItE2RnItEEEP6MemoryS6_R5StateT_T0_(%struct.Memory*, %struct.State* nocapture dereferenceable(3376), i64, i64)  {
  %5 = and i64 %3, 15
  %6 = shl i64 1, %5
  %7 = trunc i64 %6 to i16
  %8 = lshr i64 %3, 3
  %9 = and i64 %8, 8190
  %10 = add i64 %9, %2
  %11 = inttoptr i64 %10 to i16*
  %12 = load i16, i16* %11
  %13 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  %14 = and i16 %12, %7
  %15 = icmp ne i16 %14, 0
  %16 = zext i1 %15 to i8
  store i8 %16, i8* %13, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L5BTmemI2MnIjE2RnIjEEEP6MemoryS6_R5StateT_T0_(%struct.Memory*, %struct.State* nocapture dereferenceable(3376), i64, i64)  {
  %5 = and i64 %3, 31
  %6 = shl i64 1, %5
  %7 = trunc i64 %6 to i32
  %8 = lshr i64 %3, 3
  %9 = and i64 %8, 536870908
  %10 = add i64 %9, %2
  %11 = inttoptr i64 %10 to i32*
  %12 = load i32, i32* %11
  %13 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  %14 = and i32 %12, %7
  %15 = icmp ne i32 %14, 0
  %16 = zext i1 %15 to i8
  store i8 %16, i8* %13, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L5BTmemI2MnImE2RnImEEEP6MemoryS6_R5StateT_T0_(%struct.Memory*, %struct.State* nocapture dereferenceable(3376), i64, i64)  {
  %5 = and i64 %3, 63
  %6 = shl i64 1, %5
  %7 = lshr i64 %3, 6
  %8 = shl nuw nsw i64 %7, 3
  %9 = add i64 %8, %2
  %10 = inttoptr i64 %9 to i64*
  %11 = load i64, i64* %10
  %12 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  %13 = and i64 %11, %6
  %14 = icmp ne i64 %13, 0
  %15 = zext i1 %14 to i8
  store i8 %15, i8* %12, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline norecurse nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L5BTregI2RnIhES2_EEP6MemoryS4_R5StateT_T0_(%struct.Memory* readnone returned, %struct.State* nocapture dereferenceable(3376), i64, i64)  {
  %5 = and i64 %3, 7
  %6 = shl i64 1, %5
  %7 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  %8 = and i64 %6, %2
  %9 = icmp ne i64 %8, 0
  %10 = zext i1 %9 to i8
  store i8 %10, i8* %7, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline norecurse nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L5BTregI2RnItES2_EEP6MemoryS4_R5StateT_T0_(%struct.Memory* readnone returned, %struct.State* nocapture dereferenceable(3376), i64, i64)  {
  %5 = and i64 %3, 15
  %6 = shl i64 1, %5
  %7 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  %8 = and i64 %6, %2
  %9 = icmp ne i64 %8, 0
  %10 = zext i1 %9 to i8
  store i8 %10, i8* %7, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline norecurse nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L5BTregI2RnIjES2_EEP6MemoryS4_R5StateT_T0_(%struct.Memory* readnone returned, %struct.State* nocapture dereferenceable(3376), i64, i64)  {
  %5 = and i64 %3, 31
  %6 = shl i64 1, %5
  %7 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  %8 = and i64 %6, %2
  %9 = icmp ne i64 %8, 0
  %10 = zext i1 %9 to i8
  store i8 %10, i8* %7, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline norecurse nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L5BTregI2RnImES2_EEP6MemoryS4_R5StateT_T0_(%struct.Memory* readnone returned, %struct.State* nocapture dereferenceable(3376), i64, i64)  {
  %5 = and i64 %3, 63
  %6 = shl i64 1, %5
  %7 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  %8 = and i64 %6, %2
  %9 = icmp ne i64 %8, 0
  %10 = zext i1 %9 to i8
  store i8 %10, i8* %7, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L6BTSmemI3MnWIhE2MnIhE2InIhEEEP6MemoryS8_R5StateT_T0_T1_(%struct.Memory*, %struct.State* nocapture dereferenceable(3376), i64, i64, i64)  {
  %6 = and i64 %4, 7
  %7 = shl i64 1, %6
  %8 = trunc i64 %7 to i8
  %9 = lshr i64 %4, 3
  %10 = and i64 %9, 31
  %11 = add i64 %10, %3
  %12 = inttoptr i64 %11 to i8*
  %13 = load i8, i8* %12
  %14 = add i64 %10, %2
  %15 = or i8 %13, %8
  %16 = inttoptr i64 %14 to i8*
  store i8 %15, i8* %16
  %17 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  %18 = and i8 %13, %8
  %19 = icmp ne i8 %18, 0
  %20 = zext i1 %19 to i8
  store i8 %20, i8* %17, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L6BTSmemI3MnWItE2MnItE2InItEEEP6MemoryS8_R5StateT_T0_T1_(%struct.Memory*, %struct.State* nocapture dereferenceable(3376), i64, i64, i64)  {
  %6 = and i64 %4, 15
  %7 = shl i64 1, %6
  %8 = trunc i64 %7 to i16
  %9 = lshr i64 %4, 3
  %10 = and i64 %9, 8190
  %11 = add i64 %10, %3
  %12 = inttoptr i64 %11 to i16*
  %13 = load i16, i16* %12
  %14 = add i64 %10, %2
  %15 = or i16 %13, %8
  %16 = inttoptr i64 %14 to i16*
  store i16 %15, i16* %16
  %17 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  %18 = and i16 %13, %8
  %19 = icmp ne i16 %18, 0
  %20 = zext i1 %19 to i8
  store i8 %20, i8* %17, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L6BTSmemI3MnWIjE2MnIjE2InIjEEEP6MemoryS8_R5StateT_T0_T1_(%struct.Memory*, %struct.State* nocapture dereferenceable(3376), i64, i64, i64)  {
  %6 = and i64 %4, 31
  %7 = shl i64 1, %6
  %8 = trunc i64 %7 to i32
  %9 = lshr i64 %4, 3
  %10 = and i64 %9, 536870908
  %11 = add i64 %10, %3
  %12 = inttoptr i64 %11 to i32*
  %13 = load i32, i32* %12
  %14 = add i64 %10, %2
  %15 = or i32 %13, %8
  %16 = inttoptr i64 %14 to i32*
  store i32 %15, i32* %16
  %17 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  %18 = and i32 %13, %8
  %19 = icmp ne i32 %18, 0
  %20 = zext i1 %19 to i8
  store i8 %20, i8* %17, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L6BTSmemI3MnWImE2MnImE2InImEEEP6MemoryS8_R5StateT_T0_T1_(%struct.Memory*, %struct.State* nocapture dereferenceable(3376), i64, i64, i64)  {
  %6 = and i64 %4, 63
  %7 = shl i64 1, %6
  %8 = lshr i64 %4, 6
  %9 = shl nuw nsw i64 %8, 3
  %10 = add i64 %9, %3
  %11 = inttoptr i64 %10 to i64*
  %12 = load i64, i64* %11
  %13 = add i64 %9, %2
  %14 = or i64 %12, %7
  %15 = inttoptr i64 %13 to i64*
  store i64 %14, i64* %15
  %16 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  %17 = and i64 %12, %7
  %18 = icmp ne i64 %17, 0
  %19 = zext i1 %18 to i8
  store i8 %19, i8* %16, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline norecurse nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L6BTSregI3RnWIhE2RnIhE2InIhEEEP6MemoryS8_R5StateT_T0_T1_(%struct.Memory* readnone returned, %struct.State* nocapture dereferenceable(3376), i8* nocapture, i64, i64)  {
  %6 = and i64 %4, 7
  %7 = shl i64 1, %6
  %8 = or i64 %7, %3
  %9 = trunc i64 %8 to i8
  store i8 %9, i8* %2, align 1
  %10 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  %11 = and i64 %7, %3
  %12 = icmp ne i64 %11, 0
  %13 = zext i1 %12 to i8
  store i8 %13, i8* %10, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline norecurse nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L6BTSregI3RnWItE2RnItE2InItEEEP6MemoryS8_R5StateT_T0_T1_(%struct.Memory* readnone returned, %struct.State* nocapture dereferenceable(3376), i16* nocapture, i64, i64)  {
  %6 = and i64 %4, 15
  %7 = shl i64 1, %6
  %8 = or i64 %7, %3
  %9 = trunc i64 %8 to i16
  store i16 %9, i16* %2, align 2
  %10 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  %11 = and i64 %7, %3
  %12 = icmp ne i64 %11, 0
  %13 = zext i1 %12 to i8
  store i8 %13, i8* %10, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline norecurse nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L6BTSregI3RnWImE2RnIjE2InIjEEEP6MemoryS8_R5StateT_T0_T1_(%struct.Memory* readnone returned, %struct.State* nocapture dereferenceable(3376), i64* nocapture, i64, i64)  {
  %6 = and i64 %4, 31
  %7 = shl i64 1, %6
  %8 = and i64 %3, 4294967295
  %9 = or i64 %7, %8
  store i64 %9, i64* %2, align 8
  %10 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  %11 = and i64 %7, %3
  %12 = icmp ne i64 %11, 0
  %13 = zext i1 %12 to i8
  store i8 %13, i8* %10, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline norecurse nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L6BTSregI3RnWImE2RnImE2InImEEEP6MemoryS8_R5StateT_T0_T1_(%struct.Memory* readnone returned, %struct.State* nocapture dereferenceable(3376), i64* nocapture, i64, i64)  {
  %6 = and i64 %4, 63
  %7 = shl i64 1, %6
  %8 = or i64 %7, %3
  store i64 %8, i64* %2, align 8
  %9 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  %10 = and i64 %7, %3
  %11 = icmp ne i64 %10, 0
  %12 = zext i1 %11 to i8
  store i8 %12, i8* %9, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L6BTSmemI3MnWIhE2MnIhE2RnIhEEEP6MemoryS8_R5StateT_T0_T1_(%struct.Memory*, %struct.State* nocapture dereferenceable(3376), i64, i64, i64)  {
  %6 = and i64 %4, 7
  %7 = shl i64 1, %6
  %8 = trunc i64 %7 to i8
  %9 = lshr i64 %4, 3
  %10 = and i64 %9, 31
  %11 = add i64 %10, %3
  %12 = inttoptr i64 %11 to i8*
  %13 = load i8, i8* %12
  %14 = add i64 %10, %2
  %15 = or i8 %13, %8
  %16 = inttoptr i64 %14 to i8*
  store i8 %15, i8* %16
  %17 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  %18 = and i8 %13, %8
  %19 = icmp ne i8 %18, 0
  %20 = zext i1 %19 to i8
  store i8 %20, i8* %17, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L6BTSmemI3MnWItE2MnItE2RnItEEEP6MemoryS8_R5StateT_T0_T1_(%struct.Memory*, %struct.State* nocapture dereferenceable(3376), i64, i64, i64)  {
  %6 = and i64 %4, 15
  %7 = shl i64 1, %6
  %8 = trunc i64 %7 to i16
  %9 = lshr i64 %4, 3
  %10 = and i64 %9, 8190
  %11 = add i64 %10, %3
  %12 = inttoptr i64 %11 to i16*
  %13 = load i16, i16* %12
  %14 = add i64 %10, %2
  %15 = or i16 %13, %8
  %16 = inttoptr i64 %14 to i16*
  store i16 %15, i16* %16
  %17 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  %18 = and i16 %13, %8
  %19 = icmp ne i16 %18, 0
  %20 = zext i1 %19 to i8
  store i8 %20, i8* %17, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L6BTSmemI3MnWIjE2MnIjE2RnIjEEEP6MemoryS8_R5StateT_T0_T1_(%struct.Memory*, %struct.State* nocapture dereferenceable(3376), i64, i64, i64)  {
  %6 = and i64 %4, 31
  %7 = shl i64 1, %6
  %8 = trunc i64 %7 to i32
  %9 = lshr i64 %4, 3
  %10 = and i64 %9, 536870908
  %11 = add i64 %10, %3
  %12 = inttoptr i64 %11 to i32*
  %13 = load i32, i32* %12
  %14 = add i64 %10, %2
  %15 = or i32 %13, %8
  %16 = inttoptr i64 %14 to i32*
  store i32 %15, i32* %16
  %17 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  %18 = and i32 %13, %8
  %19 = icmp ne i32 %18, 0
  %20 = zext i1 %19 to i8
  store i8 %20, i8* %17, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L6BTSmemI3MnWImE2MnImE2RnImEEEP6MemoryS8_R5StateT_T0_T1_(%struct.Memory*, %struct.State* nocapture dereferenceable(3376), i64, i64, i64)  {
  %6 = and i64 %4, 63
  %7 = shl i64 1, %6
  %8 = lshr i64 %4, 6
  %9 = shl nuw nsw i64 %8, 3
  %10 = add i64 %9, %3
  %11 = inttoptr i64 %10 to i64*
  %12 = load i64, i64* %11
  %13 = add i64 %9, %2
  %14 = or i64 %12, %7
  %15 = inttoptr i64 %13 to i64*
  store i64 %14, i64* %15
  %16 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  %17 = and i64 %12, %7
  %18 = icmp ne i64 %17, 0
  %19 = zext i1 %18 to i8
  store i8 %19, i8* %16, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline norecurse nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L6BTSregI3RnWIhE2RnIhES4_EEP6MemoryS6_R5StateT_T0_T1_(%struct.Memory* readnone returned, %struct.State* nocapture dereferenceable(3376), i8* nocapture, i64, i64)  {
  %6 = and i64 %4, 7
  %7 = shl i64 1, %6
  %8 = or i64 %7, %3
  %9 = trunc i64 %8 to i8
  store i8 %9, i8* %2, align 1
  %10 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  %11 = and i64 %7, %3
  %12 = icmp ne i64 %11, 0
  %13 = zext i1 %12 to i8
  store i8 %13, i8* %10, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline norecurse nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L6BTSregI3RnWItE2RnItES4_EEP6MemoryS6_R5StateT_T0_T1_(%struct.Memory* readnone returned, %struct.State* nocapture dereferenceable(3376), i16* nocapture, i64, i64)  {
  %6 = and i64 %4, 15
  %7 = shl i64 1, %6
  %8 = or i64 %7, %3
  %9 = trunc i64 %8 to i16
  store i16 %9, i16* %2, align 2
  %10 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  %11 = and i64 %7, %3
  %12 = icmp ne i64 %11, 0
  %13 = zext i1 %12 to i8
  store i8 %13, i8* %10, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline norecurse nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L6BTSregI3RnWImE2RnIjES4_EEP6MemoryS6_R5StateT_T0_T1_(%struct.Memory* readnone returned, %struct.State* nocapture dereferenceable(3376), i64* nocapture, i64, i64)  {
  %6 = and i64 %4, 31
  %7 = shl i64 1, %6
  %8 = and i64 %3, 4294967295
  %9 = or i64 %7, %8
  store i64 %9, i64* %2, align 8
  %10 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  %11 = and i64 %7, %3
  %12 = icmp ne i64 %11, 0
  %13 = zext i1 %12 to i8
  store i8 %13, i8* %10, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline norecurse nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L6BTSregI3RnWImE2RnImES4_EEP6MemoryS6_R5StateT_T0_T1_(%struct.Memory* readnone returned, %struct.State* nocapture dereferenceable(3376), i64* nocapture, i64, i64)  {
  %6 = and i64 %4, 63
  %7 = shl i64 1, %6
  %8 = or i64 %7, %3
  store i64 %8, i64* %2, align 8
  %9 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  %10 = and i64 %7, %3
  %11 = icmp ne i64 %10, 0
  %12 = zext i1 %11 to i8
  store i8 %12, i8* %9, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L6BTRmemI3MnWIhE2MnIhE2InIhEEEP6MemoryS8_R5StateT_T0_T1_(%struct.Memory*, %struct.State* nocapture dereferenceable(3376), i64, i64, i64)  {
  %6 = and i64 %4, 7
  %7 = shl i64 1, %6
  %8 = trunc i64 %7 to i8
  %9 = lshr i64 %4, 3
  %10 = and i64 %9, 31
  %11 = add i64 %10, %3
  %12 = inttoptr i64 %11 to i8*
  %13 = load i8, i8* %12
  %14 = add i64 %10, %2
  %15 = xor i8 %8, -1
  %16 = and i8 %13, %15
  %17 = inttoptr i64 %14 to i8*
  store i8 %16, i8* %17
  %18 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  %19 = and i8 %13, %8
  %20 = icmp ne i8 %19, 0
  %21 = zext i1 %20 to i8
  store i8 %21, i8* %18, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L6BTRmemI3MnWItE2MnItE2InItEEEP6MemoryS8_R5StateT_T0_T1_(%struct.Memory*, %struct.State* nocapture dereferenceable(3376), i64, i64, i64)  {
  %6 = and i64 %4, 15
  %7 = shl i64 1, %6
  %8 = trunc i64 %7 to i16
  %9 = lshr i64 %4, 3
  %10 = and i64 %9, 8190
  %11 = add i64 %10, %3
  %12 = inttoptr i64 %11 to i16*
  %13 = load i16, i16* %12
  %14 = add i64 %10, %2
  %15 = xor i16 %8, -1
  %16 = and i16 %13, %15
  %17 = inttoptr i64 %14 to i16*
  store i16 %16, i16* %17
  %18 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  %19 = and i16 %13, %8
  %20 = icmp ne i16 %19, 0
  %21 = zext i1 %20 to i8
  store i8 %21, i8* %18, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L6BTRmemI3MnWIjE2MnIjE2InIjEEEP6MemoryS8_R5StateT_T0_T1_(%struct.Memory*, %struct.State* nocapture dereferenceable(3376), i64, i64, i64)  {
  %6 = and i64 %4, 31
  %7 = shl i64 1, %6
  %8 = trunc i64 %7 to i32
  %9 = lshr i64 %4, 3
  %10 = and i64 %9, 536870908
  %11 = add i64 %10, %3
  %12 = inttoptr i64 %11 to i32*
  %13 = load i32, i32* %12
  %14 = add i64 %10, %2
  %15 = xor i32 %8, -1
  %16 = and i32 %13, %15
  %17 = inttoptr i64 %14 to i32*
  store i32 %16, i32* %17
  %18 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  %19 = and i32 %13, %8
  %20 = icmp ne i32 %19, 0
  %21 = zext i1 %20 to i8
  store i8 %21, i8* %18, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L6BTRmemI3MnWImE2MnImE2InImEEEP6MemoryS8_R5StateT_T0_T1_(%struct.Memory*, %struct.State* nocapture dereferenceable(3376), i64, i64, i64)  {
  %6 = and i64 %4, 63
  %7 = shl i64 1, %6
  %8 = lshr i64 %4, 6
  %9 = shl nuw nsw i64 %8, 3
  %10 = add i64 %9, %3
  %11 = inttoptr i64 %10 to i64*
  %12 = load i64, i64* %11
  %13 = add i64 %9, %2
  %14 = xor i64 %7, -1
  %15 = and i64 %12, %14
  %16 = inttoptr i64 %13 to i64*
  store i64 %15, i64* %16
  %17 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  %18 = and i64 %12, %7
  %19 = icmp ne i64 %18, 0
  %20 = zext i1 %19 to i8
  store i8 %20, i8* %17, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline norecurse nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L6BTRregI3RnWIhE2RnIhE2InIhEEEP6MemoryS8_R5StateT_T0_T1_(%struct.Memory* readnone returned, %struct.State* nocapture dereferenceable(3376), i8* nocapture, i64, i64)  {
  %6 = trunc i64 %3 to i8
  %7 = and i64 %4, 7
  %8 = shl i64 1, %7
  %9 = trunc i64 %8 to i8
  %10 = xor i8 %9, -1
  %11 = and i8 %6, %10
  store i8 %11, i8* %2, align 1
  %12 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  %13 = and i64 %8, %3
  %14 = icmp ne i64 %13, 0
  %15 = zext i1 %14 to i8
  store i8 %15, i8* %12, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline norecurse nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L6BTRregI3RnWItE2RnItE2InItEEEP6MemoryS8_R5StateT_T0_T1_(%struct.Memory* readnone returned, %struct.State* nocapture dereferenceable(3376), i16* nocapture, i64, i64)  {
  %6 = trunc i64 %3 to i16
  %7 = and i64 %4, 15
  %8 = shl i64 1, %7
  %9 = trunc i64 %8 to i16
  %10 = xor i16 %9, -1
  %11 = and i16 %6, %10
  store i16 %11, i16* %2, align 2
  %12 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  %13 = and i64 %8, %3
  %14 = icmp ne i64 %13, 0
  %15 = zext i1 %14 to i8
  store i8 %15, i8* %12, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline norecurse nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L6BTRregI3RnWImE2RnIjE2InIjEEEP6MemoryS8_R5StateT_T0_T1_(%struct.Memory* readnone returned, %struct.State* nocapture dereferenceable(3376), i64* nocapture, i64, i64)  {
  %6 = and i64 %4, 31
  %7 = shl i64 1, %6
  %8 = xor i64 %7, 4294967295
  %9 = and i64 %8, %3
  store i64 %9, i64* %2, align 8
  %10 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  %11 = and i64 %7, %3
  %12 = icmp ne i64 %11, 0
  %13 = zext i1 %12 to i8
  store i8 %13, i8* %10, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline norecurse nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L6BTRregI3RnWImE2RnImE2InImEEEP6MemoryS8_R5StateT_T0_T1_(%struct.Memory* readnone returned, %struct.State* nocapture dereferenceable(3376), i64* nocapture, i64, i64)  {
  %6 = and i64 %4, 63
  %7 = shl i64 1, %6
  %8 = xor i64 %7, -1
  %9 = and i64 %8, %3
  store i64 %9, i64* %2, align 8
  %10 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  %11 = and i64 %7, %3
  %12 = icmp ne i64 %11, 0
  %13 = zext i1 %12 to i8
  store i8 %13, i8* %10, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L6BTRmemI3MnWIhE2MnIhE2RnIhEEEP6MemoryS8_R5StateT_T0_T1_(%struct.Memory*, %struct.State* nocapture dereferenceable(3376), i64, i64, i64)  {
  %6 = and i64 %4, 7
  %7 = shl i64 1, %6
  %8 = trunc i64 %7 to i8
  %9 = lshr i64 %4, 3
  %10 = and i64 %9, 31
  %11 = add i64 %10, %3
  %12 = inttoptr i64 %11 to i8*
  %13 = load i8, i8* %12
  %14 = add i64 %10, %2
  %15 = xor i8 %8, -1
  %16 = and i8 %13, %15
  %17 = inttoptr i64 %14 to i8*
  store i8 %16, i8* %17
  %18 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  %19 = and i8 %13, %8
  %20 = icmp ne i8 %19, 0
  %21 = zext i1 %20 to i8
  store i8 %21, i8* %18, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L6BTRmemI3MnWItE2MnItE2RnItEEEP6MemoryS8_R5StateT_T0_T1_(%struct.Memory*, %struct.State* nocapture dereferenceable(3376), i64, i64, i64)  {
  %6 = and i64 %4, 15
  %7 = shl i64 1, %6
  %8 = trunc i64 %7 to i16
  %9 = lshr i64 %4, 3
  %10 = and i64 %9, 8190
  %11 = add i64 %10, %3
  %12 = inttoptr i64 %11 to i16*
  %13 = load i16, i16* %12
  %14 = add i64 %10, %2
  %15 = xor i16 %8, -1
  %16 = and i16 %13, %15
  %17 = inttoptr i64 %14 to i16*
  store i16 %16, i16* %17
  %18 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  %19 = and i16 %13, %8
  %20 = icmp ne i16 %19, 0
  %21 = zext i1 %20 to i8
  store i8 %21, i8* %18, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L6BTRmemI3MnWIjE2MnIjE2RnIjEEEP6MemoryS8_R5StateT_T0_T1_(%struct.Memory*, %struct.State* nocapture dereferenceable(3376), i64, i64, i64)  {
  %6 = and i64 %4, 31
  %7 = shl i64 1, %6
  %8 = trunc i64 %7 to i32
  %9 = lshr i64 %4, 3
  %10 = and i64 %9, 536870908
  %11 = add i64 %10, %3
  %12 = inttoptr i64 %11 to i32*
  %13 = load i32, i32* %12
  %14 = add i64 %10, %2
  %15 = xor i32 %8, -1
  %16 = and i32 %13, %15
  %17 = inttoptr i64 %14 to i32*
  store i32 %16, i32* %17
  %18 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  %19 = and i32 %13, %8
  %20 = icmp ne i32 %19, 0
  %21 = zext i1 %20 to i8
  store i8 %21, i8* %18, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L6BTRmemI3MnWImE2MnImE2RnImEEEP6MemoryS8_R5StateT_T0_T1_(%struct.Memory*, %struct.State* nocapture dereferenceable(3376), i64, i64, i64)  {
  %6 = and i64 %4, 63
  %7 = shl i64 1, %6
  %8 = lshr i64 %4, 6
  %9 = shl nuw nsw i64 %8, 3
  %10 = add i64 %9, %3
  %11 = inttoptr i64 %10 to i64*
  %12 = load i64, i64* %11
  %13 = add i64 %9, %2
  %14 = xor i64 %7, -1
  %15 = and i64 %12, %14
  %16 = inttoptr i64 %13 to i64*
  store i64 %15, i64* %16
  %17 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  %18 = and i64 %12, %7
  %19 = icmp ne i64 %18, 0
  %20 = zext i1 %19 to i8
  store i8 %20, i8* %17, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline norecurse nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L6BTRregI3RnWIhE2RnIhES4_EEP6MemoryS6_R5StateT_T0_T1_(%struct.Memory* readnone returned, %struct.State* nocapture dereferenceable(3376), i8* nocapture, i64, i64)  {
  %6 = trunc i64 %3 to i8
  %7 = and i64 %4, 7
  %8 = shl i64 1, %7
  %9 = trunc i64 %8 to i8
  %10 = xor i8 %9, -1
  %11 = and i8 %6, %10
  store i8 %11, i8* %2, align 1
  %12 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  %13 = and i64 %8, %3
  %14 = icmp ne i64 %13, 0
  %15 = zext i1 %14 to i8
  store i8 %15, i8* %12, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline norecurse nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L6BTRregI3RnWItE2RnItES4_EEP6MemoryS6_R5StateT_T0_T1_(%struct.Memory* readnone returned, %struct.State* nocapture dereferenceable(3376), i16* nocapture, i64, i64)  {
  %6 = trunc i64 %3 to i16
  %7 = and i64 %4, 15
  %8 = shl i64 1, %7
  %9 = trunc i64 %8 to i16
  %10 = xor i16 %9, -1
  %11 = and i16 %6, %10
  store i16 %11, i16* %2, align 2
  %12 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  %13 = and i64 %8, %3
  %14 = icmp ne i64 %13, 0
  %15 = zext i1 %14 to i8
  store i8 %15, i8* %12, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline norecurse nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L6BTRregI3RnWImE2RnIjES4_EEP6MemoryS6_R5StateT_T0_T1_(%struct.Memory* readnone returned, %struct.State* nocapture dereferenceable(3376), i64* nocapture, i64, i64)  {
  %6 = and i64 %4, 31
  %7 = shl i64 1, %6
  %8 = xor i64 %7, 4294967295
  %9 = and i64 %8, %3
  store i64 %9, i64* %2, align 8
  %10 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  %11 = and i64 %7, %3
  %12 = icmp ne i64 %11, 0
  %13 = zext i1 %12 to i8
  store i8 %13, i8* %10, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline norecurse nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L6BTRregI3RnWImE2RnImES4_EEP6MemoryS6_R5StateT_T0_T1_(%struct.Memory* readnone returned, %struct.State* nocapture dereferenceable(3376), i64* nocapture, i64, i64)  {
  %6 = and i64 %4, 63
  %7 = shl i64 1, %6
  %8 = xor i64 %7, -1
  %9 = and i64 %8, %3
  store i64 %9, i64* %2, align 8
  %10 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  %11 = and i64 %7, %3
  %12 = icmp ne i64 %11, 0
  %13 = zext i1 %12 to i8
  store i8 %13, i8* %10, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L6BTCmemI3MnWIhE2MnIhE2InIhEEEP6MemoryS8_R5StateT_T0_T1_(%struct.Memory*, %struct.State* nocapture dereferenceable(3376), i64, i64, i64)  {
  %6 = and i64 %4, 7
  %7 = shl i64 1, %6
  %8 = trunc i64 %7 to i8
  %9 = lshr i64 %4, 3
  %10 = and i64 %9, 31
  %11 = add i64 %10, %3
  %12 = inttoptr i64 %11 to i8*
  %13 = load i8, i8* %12
  %14 = add i64 %10, %2
  %15 = xor i8 %13, %8
  %16 = inttoptr i64 %14 to i8*
  store i8 %15, i8* %16
  %17 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  %18 = and i8 %13, %8
  %19 = icmp ne i8 %18, 0
  %20 = zext i1 %19 to i8
  store i8 %20, i8* %17, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L6BTCmemI3MnWItE2MnItE2InItEEEP6MemoryS8_R5StateT_T0_T1_(%struct.Memory*, %struct.State* nocapture dereferenceable(3376), i64, i64, i64)  {
  %6 = and i64 %4, 15
  %7 = shl i64 1, %6
  %8 = trunc i64 %7 to i16
  %9 = lshr i64 %4, 3
  %10 = and i64 %9, 8190
  %11 = add i64 %10, %3
  %12 = inttoptr i64 %11 to i16*
  %13 = load i16, i16* %12
  %14 = add i64 %10, %2
  %15 = xor i16 %13, %8
  %16 = inttoptr i64 %14 to i16*
  store i16 %15, i16* %16
  %17 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  %18 = and i16 %13, %8
  %19 = icmp ne i16 %18, 0
  %20 = zext i1 %19 to i8
  store i8 %20, i8* %17, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L6BTCmemI3MnWIjE2MnIjE2InIjEEEP6MemoryS8_R5StateT_T0_T1_(%struct.Memory*, %struct.State* nocapture dereferenceable(3376), i64, i64, i64)  {
  %6 = and i64 %4, 31
  %7 = shl i64 1, %6
  %8 = trunc i64 %7 to i32
  %9 = lshr i64 %4, 3
  %10 = and i64 %9, 536870908
  %11 = add i64 %10, %3
  %12 = inttoptr i64 %11 to i32*
  %13 = load i32, i32* %12
  %14 = add i64 %10, %2
  %15 = xor i32 %13, %8
  %16 = inttoptr i64 %14 to i32*
  store i32 %15, i32* %16
  %17 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  %18 = and i32 %13, %8
  %19 = icmp ne i32 %18, 0
  %20 = zext i1 %19 to i8
  store i8 %20, i8* %17, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L6BTCmemI3MnWImE2MnImE2InImEEEP6MemoryS8_R5StateT_T0_T1_(%struct.Memory*, %struct.State* nocapture dereferenceable(3376), i64, i64, i64)  {
  %6 = and i64 %4, 63
  %7 = shl i64 1, %6
  %8 = lshr i64 %4, 6
  %9 = shl nuw nsw i64 %8, 3
  %10 = add i64 %9, %3
  %11 = inttoptr i64 %10 to i64*
  %12 = load i64, i64* %11
  %13 = add i64 %9, %2
  %14 = xor i64 %12, %7
  %15 = inttoptr i64 %13 to i64*
  store i64 %14, i64* %15
  %16 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  %17 = and i64 %12, %7
  %18 = icmp ne i64 %17, 0
  %19 = zext i1 %18 to i8
  store i8 %19, i8* %16, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline norecurse nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L6BTCregI3RnWIhE2RnIhE2InIhEEEP6MemoryS8_R5StateT_T0_T1_(%struct.Memory* readnone returned, %struct.State* nocapture dereferenceable(3376), i8* nocapture, i64, i64)  {
  %6 = and i64 %4, 7
  %7 = shl i64 1, %6
  %8 = xor i64 %7, %3
  %9 = trunc i64 %8 to i8
  store i8 %9, i8* %2, align 1
  %10 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  %11 = and i64 %7, %3
  %12 = icmp ne i64 %11, 0
  %13 = zext i1 %12 to i8
  store i8 %13, i8* %10, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline norecurse nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L6BTCregI3RnWItE2RnItE2InItEEEP6MemoryS8_R5StateT_T0_T1_(%struct.Memory* readnone returned, %struct.State* nocapture dereferenceable(3376), i16* nocapture, i64, i64)  {
  %6 = and i64 %4, 15
  %7 = shl i64 1, %6
  %8 = xor i64 %7, %3
  %9 = trunc i64 %8 to i16
  store i16 %9, i16* %2, align 2
  %10 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  %11 = and i64 %7, %3
  %12 = icmp ne i64 %11, 0
  %13 = zext i1 %12 to i8
  store i8 %13, i8* %10, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline norecurse nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L6BTCregI3RnWImE2RnIjE2InIjEEEP6MemoryS8_R5StateT_T0_T1_(%struct.Memory* readnone returned, %struct.State* nocapture dereferenceable(3376), i64* nocapture, i64, i64)  {
  %6 = and i64 %4, 31
  %7 = shl i64 1, %6
  %8 = and i64 %3, 4294967295
  %9 = xor i64 %7, %8
  store i64 %9, i64* %2, align 8
  %10 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  %11 = and i64 %7, %3
  %12 = icmp ne i64 %11, 0
  %13 = zext i1 %12 to i8
  store i8 %13, i8* %10, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline norecurse nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L6BTCregI3RnWImE2RnImE2InImEEEP6MemoryS8_R5StateT_T0_T1_(%struct.Memory* readnone returned, %struct.State* nocapture dereferenceable(3376), i64* nocapture, i64, i64)  {
  %6 = and i64 %4, 63
  %7 = shl i64 1, %6
  %8 = xor i64 %7, %3
  store i64 %8, i64* %2, align 8
  %9 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  %10 = and i64 %7, %3
  %11 = icmp ne i64 %10, 0
  %12 = zext i1 %11 to i8
  store i8 %12, i8* %9, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L6BTCmemI3MnWIhE2MnIhE2RnIhEEEP6MemoryS8_R5StateT_T0_T1_(%struct.Memory*, %struct.State* nocapture dereferenceable(3376), i64, i64, i64)  {
  %6 = and i64 %4, 7
  %7 = shl i64 1, %6
  %8 = trunc i64 %7 to i8
  %9 = lshr i64 %4, 3
  %10 = and i64 %9, 31
  %11 = add i64 %10, %3
  %12 = inttoptr i64 %11 to i8*
  %13 = load i8, i8* %12
  %14 = add i64 %10, %2
  %15 = xor i8 %13, %8
  %16 = inttoptr i64 %14 to i8*
  store i8 %15, i8* %16
  %17 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  %18 = and i8 %13, %8
  %19 = icmp ne i8 %18, 0
  %20 = zext i1 %19 to i8
  store i8 %20, i8* %17, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L6BTCmemI3MnWItE2MnItE2RnItEEEP6MemoryS8_R5StateT_T0_T1_(%struct.Memory*, %struct.State* nocapture dereferenceable(3376), i64, i64, i64)  {
  %6 = and i64 %4, 15
  %7 = shl i64 1, %6
  %8 = trunc i64 %7 to i16
  %9 = lshr i64 %4, 3
  %10 = and i64 %9, 8190
  %11 = add i64 %10, %3
  %12 = inttoptr i64 %11 to i16*
  %13 = load i16, i16* %12
  %14 = add i64 %10, %2
  %15 = xor i16 %13, %8
  %16 = inttoptr i64 %14 to i16*
  store i16 %15, i16* %16
  %17 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  %18 = and i16 %13, %8
  %19 = icmp ne i16 %18, 0
  %20 = zext i1 %19 to i8
  store i8 %20, i8* %17, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L6BTCmemI3MnWIjE2MnIjE2RnIjEEEP6MemoryS8_R5StateT_T0_T1_(%struct.Memory*, %struct.State* nocapture dereferenceable(3376), i64, i64, i64)  {
  %6 = and i64 %4, 31
  %7 = shl i64 1, %6
  %8 = trunc i64 %7 to i32
  %9 = lshr i64 %4, 3
  %10 = and i64 %9, 536870908
  %11 = add i64 %10, %3
  %12 = inttoptr i64 %11 to i32*
  %13 = load i32, i32* %12
  %14 = add i64 %10, %2
  %15 = xor i32 %13, %8
  %16 = inttoptr i64 %14 to i32*
  store i32 %15, i32* %16
  %17 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  %18 = and i32 %13, %8
  %19 = icmp ne i32 %18, 0
  %20 = zext i1 %19 to i8
  store i8 %20, i8* %17, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L6BTCmemI3MnWImE2MnImE2RnImEEEP6MemoryS8_R5StateT_T0_T1_(%struct.Memory*, %struct.State* nocapture dereferenceable(3376), i64, i64, i64)  {
  %6 = and i64 %4, 63
  %7 = shl i64 1, %6
  %8 = lshr i64 %4, 6
  %9 = shl nuw nsw i64 %8, 3
  %10 = add i64 %9, %3
  %11 = inttoptr i64 %10 to i64*
  %12 = load i64, i64* %11
  %13 = add i64 %9, %2
  %14 = xor i64 %12, %7
  %15 = inttoptr i64 %13 to i64*
  store i64 %14, i64* %15
  %16 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  %17 = and i64 %12, %7
  %18 = icmp ne i64 %17, 0
  %19 = zext i1 %18 to i8
  store i8 %19, i8* %16, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline norecurse nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L6BTCregI3RnWIhE2RnIhES4_EEP6MemoryS6_R5StateT_T0_T1_(%struct.Memory* readnone returned, %struct.State* nocapture dereferenceable(3376), i8* nocapture, i64, i64)  {
  %6 = and i64 %4, 7
  %7 = shl i64 1, %6
  %8 = xor i64 %7, %3
  %9 = trunc i64 %8 to i8
  store i8 %9, i8* %2, align 1
  %10 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  %11 = and i64 %7, %3
  %12 = icmp ne i64 %11, 0
  %13 = zext i1 %12 to i8
  store i8 %13, i8* %10, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline norecurse nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L6BTCregI3RnWItE2RnItES4_EEP6MemoryS6_R5StateT_T0_T1_(%struct.Memory* readnone returned, %struct.State* nocapture dereferenceable(3376), i16* nocapture, i64, i64)  {
  %6 = and i64 %4, 15
  %7 = shl i64 1, %6
  %8 = xor i64 %7, %3
  %9 = trunc i64 %8 to i16
  store i16 %9, i16* %2, align 2
  %10 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  %11 = and i64 %7, %3
  %12 = icmp ne i64 %11, 0
  %13 = zext i1 %12 to i8
  store i8 %13, i8* %10, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline norecurse nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L6BTCregI3RnWImE2RnIjES4_EEP6MemoryS6_R5StateT_T0_T1_(%struct.Memory* readnone returned, %struct.State* nocapture dereferenceable(3376), i64* nocapture, i64, i64)  {
  %6 = and i64 %4, 31
  %7 = shl i64 1, %6
  %8 = and i64 %3, 4294967295
  %9 = xor i64 %7, %8
  store i64 %9, i64* %2, align 8
  %10 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  %11 = and i64 %7, %3
  %12 = icmp ne i64 %11, 0
  %13 = zext i1 %12 to i8
  store i8 %13, i8* %10, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline norecurse nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L6BTCregI3RnWImE2RnImES4_EEP6MemoryS6_R5StateT_T0_T1_(%struct.Memory* readnone returned, %struct.State* nocapture dereferenceable(3376), i64* nocapture, i64, i64)  {
  %6 = and i64 %4, 63
  %7 = shl i64 1, %6
  %8 = xor i64 %7, %3
  store i64 %8, i64* %2, align 8
  %9 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  %10 = and i64 %7, %3
  %11 = icmp ne i64 %10, 0
  %12 = zext i1 %11 to i8
  store i8 %12, i8* %9, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline norecurse nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L8BSWAP_16EP6MemoryR5State3RnWItE2RnItE(%struct.Memory* readnone returned, %struct.State* nocapture readnone dereferenceable(3376), i16* nocapture, i64)  {
  store i16 0, i16* %2, align 2
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L8BSWAP_32EP6MemoryR5State3RnWImE2RnIjE(%struct.Memory* readnone returned, %struct.State* nocapture readnone dereferenceable(3376), i64* nocapture, i64)  {
  %5 = trunc i64 %3 to i32
  %6 = tail call i32 @llvm.bswap.i32(i32 %5)
  %7 = zext i32 %6 to i64
  store i64 %7, i64* %2, align 8
  ret %struct.Memory* %0
}

; Function Attrs: nounwind readnone
declare i32 @llvm.bswap.i32(i32) 

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L8BSWAP_64EP6MemoryR5State3RnWImE2RnImE(%struct.Memory* readnone returned, %struct.State* nocapture readnone dereferenceable(3376), i64* nocapture, i64)  {
  %5 = tail call i64 @llvm.bswap.i64(i64 %3)
  store i64 %5, i64* %2, align 8
  ret %struct.Memory* %0
}

; Function Attrs: nounwind readnone
declare i64 @llvm.bswap.i64(i64) 

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L5TZCNTI3RnWIhE2MnIhEEEP6MemoryS6_R5StateT_T0_(%struct.Memory*, %struct.State* nocapture dereferenceable(3376), i8* nocapture, i64)  {
  %5 = inttoptr i64 %3 to i8*
  %6 = load i8, i8* %5
  %7 = zext i8 %6 to i32
  %8 = tail call i32 @llvm.cttz.i32(i32 %7, i1 true) 
  %9 = trunc i32 %8 to i8
  %10 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  %11 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 0, i8* %11, align 1
  %12 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 0, i8* %12, align 1
  %13 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  %14 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 0, i8* %14, align 1
  %15 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 0, i8* %15, align 1
  %16 = and i8 %6, 1
  store i8 %16, i8* %13, align 1
  %17 = icmp eq i8 %6, 0
  %18 = zext i1 %17 to i8
  store i8 %18, i8* %10, align 1
  %19 = select i1 %17, i8 8, i8 %9
  store i8 %19, i8* %2, align 1
  ret %struct.Memory* %0
}

; Function Attrs: nounwind readnone
declare i32 @llvm.cttz.i32(i32, i1) 

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L5TZCNTI3RnWItE2MnItEEEP6MemoryS6_R5StateT_T0_(%struct.Memory*, %struct.State* nocapture dereferenceable(3376), i16* nocapture, i64)  {
  %5 = inttoptr i64 %3 to i16*
  %6 = load i16, i16* %5
  %7 = zext i16 %6 to i32
  %8 = tail call i32 @llvm.cttz.i32(i32 %7, i1 true) 
  %9 = trunc i32 %8 to i16
  %10 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  %11 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 0, i8* %11, align 1
  %12 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 0, i8* %12, align 1
  %13 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  %14 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 0, i8* %14, align 1
  %15 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 0, i8* %15, align 1
  %16 = trunc i16 %6 to i8
  %17 = and i8 %16, 1
  store i8 %17, i8* %13, align 1
  %18 = icmp eq i16 %6, 0
  %19 = zext i1 %18 to i8
  store i8 %19, i8* %10, align 1
  %20 = select i1 %18, i16 16, i16 %9
  store i16 %20, i16* %2, align 2
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L5TZCNTI3RnWImE2MnIjEEEP6MemoryS6_R5StateT_T0_(%struct.Memory*, %struct.State* nocapture dereferenceable(3376), i64* nocapture, i64)  {
  %5 = inttoptr i64 %3 to i32*
  %6 = load i32, i32* %5
  %7 = tail call i32 @llvm.cttz.i32(i32 %6, i1 false) 
  %8 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  %9 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 0, i8* %9, align 1
  %10 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 0, i8* %10, align 1
  %11 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  %12 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 0, i8* %12, align 1
  %13 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 0, i8* %13, align 1
  %14 = trunc i32 %6 to i8
  %15 = and i8 %14, 1
  store i8 %15, i8* %11, align 1
  %16 = icmp eq i32 %6, 0
  %17 = zext i1 %16 to i8
  store i8 %17, i8* %8, align 1
  %18 = zext i32 %7 to i64
  store i64 %18, i64* %2, align 8
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L5TZCNTI3RnWImE2MnImEEEP6MemoryS6_R5StateT_T0_(%struct.Memory*, %struct.State* nocapture dereferenceable(3376), i64* nocapture, i64)  {
  %5 = inttoptr i64 %3 to i64*
  %6 = load i64, i64* %5
  %7 = tail call i64 @llvm.cttz.i64(i64 %6, i1 false) 
  %8 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  %9 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 0, i8* %9, align 1
  %10 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 0, i8* %10, align 1
  %11 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  %12 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 0, i8* %12, align 1
  %13 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 0, i8* %13, align 1
  %14 = trunc i64 %6 to i8
  %15 = and i8 %14, 1
  store i8 %15, i8* %11, align 1
  %16 = icmp eq i64 %6, 0
  %17 = zext i1 %16 to i8
  store i8 %17, i8* %8, align 1
  store i64 %7, i64* %2, align 8
  ret %struct.Memory* %0
}

; Function Attrs: nounwind readnone
declare i64 @llvm.cttz.i64(i64, i1) 

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L5TZCNTI3RnWIhE2RnIhEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* readnone returned, %struct.State* nocapture dereferenceable(3376), i8* nocapture, i64)  {
  %5 = trunc i64 %3 to i8
  %6 = trunc i64 %3 to i32
  %7 = and i32 %6, 255
  %8 = tail call i32 @llvm.cttz.i32(i32 %7, i1 true) 
  %9 = trunc i32 %8 to i8
  %10 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  %11 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 0, i8* %11, align 1
  %12 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 0, i8* %12, align 1
  %13 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  %14 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 0, i8* %14, align 1
  %15 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 0, i8* %15, align 1
  %16 = and i8 %5, 1
  store i8 %16, i8* %13, align 1
  %17 = icmp eq i8 %5, 0
  %18 = zext i1 %17 to i8
  store i8 %18, i8* %10, align 1
  %19 = select i1 %17, i8 8, i8 %9
  store i8 %19, i8* %2, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L5TZCNTI3RnWItE2RnItEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* readnone returned, %struct.State* nocapture dereferenceable(3376), i16* nocapture, i64)  {
  %5 = trunc i64 %3 to i16
  %6 = trunc i64 %3 to i32
  %7 = and i32 %6, 65535
  %8 = tail call i32 @llvm.cttz.i32(i32 %7, i1 true) 
  %9 = trunc i32 %8 to i16
  %10 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  %11 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 0, i8* %11, align 1
  %12 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 0, i8* %12, align 1
  %13 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  %14 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 0, i8* %14, align 1
  %15 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 0, i8* %15, align 1
  %16 = trunc i64 %3 to i8
  %17 = and i8 %16, 1
  store i8 %17, i8* %13, align 1
  %18 = icmp eq i16 %5, 0
  %19 = zext i1 %18 to i8
  store i8 %19, i8* %10, align 1
  %20 = select i1 %18, i16 16, i16 %9
  store i16 %20, i16* %2, align 2
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L5TZCNTI3RnWImE2RnIjEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* readnone returned, %struct.State* nocapture dereferenceable(3376), i64* nocapture, i64)  {
  %5 = trunc i64 %3 to i32
  %6 = tail call i32 @llvm.cttz.i32(i32 %5, i1 false) 
  %7 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  %8 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 0, i8* %8, align 1
  %9 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 0, i8* %9, align 1
  %10 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  %11 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 0, i8* %11, align 1
  %12 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 0, i8* %12, align 1
  %13 = trunc i64 %3 to i8
  %14 = and i8 %13, 1
  store i8 %14, i8* %10, align 1
  %15 = icmp eq i32 %5, 0
  %16 = zext i1 %15 to i8
  store i8 %16, i8* %7, align 1
  %17 = zext i32 %6 to i64
  store i64 %17, i64* %2, align 8
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L5TZCNTI3RnWImE2RnImEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* readnone returned, %struct.State* nocapture dereferenceable(3376), i64* nocapture, i64)  {
  %5 = tail call i64 @llvm.cttz.i64(i64 %3, i1 false) 
  %6 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  %7 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 0, i8* %7, align 1
  %8 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 0, i8* %8, align 1
  %9 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  %10 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 0, i8* %10, align 1
  %11 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 0, i8* %11, align 1
  %12 = trunc i64 %3 to i8
  %13 = and i8 %12, 1
  store i8 %13, i8* %9, align 1
  %14 = icmp eq i64 %3, 0
  %15 = zext i1 %14 to i8
  store i8 %15, i8* %6, align 1
  store i64 %5, i64* %2, align 8
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L5LZCNTI3RnWIhE2MnIhEEEP6MemoryS6_R5StateT_T0_(%struct.Memory*, %struct.State* nocapture dereferenceable(3376), i8* nocapture, i64)  {
  %5 = inttoptr i64 %3 to i8*
  %6 = load i8, i8* %5
  %7 = zext i8 %6 to i32
  %8 = tail call i32 @llvm.ctlz.i32(i32 %7, i1 true) 
  %9 = add nuw nsw i32 %8, 232
  %10 = trunc i32 %9 to i8
  %11 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  %12 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 0, i8* %12, align 1
  %13 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 0, i8* %13, align 1
  %14 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  %15 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 0, i8* %15, align 1
  %16 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 0, i8* %16, align 1
  %17 = lshr i8 %6, 7
  store i8 %17, i8* %14, align 1
  %18 = icmp eq i8 %6, 0
  %19 = zext i1 %18 to i8
  store i8 %19, i8* %11, align 1
  %20 = select i1 %18, i8 8, i8 %10
  store i8 %20, i8* %2, align 1
  ret %struct.Memory* %0
}

; Function Attrs: nounwind readnone
declare i32 @llvm.ctlz.i32(i32, i1) 

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L5LZCNTI3RnWItE2MnItEEEP6MemoryS6_R5StateT_T0_(%struct.Memory*, %struct.State* nocapture dereferenceable(3376), i16* nocapture, i64)  {
  %5 = inttoptr i64 %3 to i16*
  %6 = load i16, i16* %5
  %7 = zext i16 %6 to i32
  %8 = tail call i32 @llvm.ctlz.i32(i32 %7, i1 true) 
  %9 = add nuw nsw i32 %8, 65520
  %10 = trunc i32 %9 to i16
  %11 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  %12 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 0, i8* %12, align 1
  %13 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 0, i8* %13, align 1
  %14 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  %15 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 0, i8* %15, align 1
  %16 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 0, i8* %16, align 1
  %17 = lshr i16 %6, 15
  %18 = trunc i16 %17 to i8
  store i8 %18, i8* %14, align 1
  %19 = icmp eq i16 %6, 0
  %20 = zext i1 %19 to i8
  store i8 %20, i8* %11, align 1
  %21 = select i1 %19, i16 16, i16 %10
  store i16 %21, i16* %2, align 2
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L5LZCNTI3RnWImE2MnIjEEEP6MemoryS6_R5StateT_T0_(%struct.Memory*, %struct.State* nocapture dereferenceable(3376), i64* nocapture, i64)  {
  %5 = inttoptr i64 %3 to i32*
  %6 = load i32, i32* %5
  %7 = tail call i32 @llvm.ctlz.i32(i32 %6, i1 false) 
  %8 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  %9 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 0, i8* %9, align 1
  %10 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 0, i8* %10, align 1
  %11 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  %12 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 0, i8* %12, align 1
  %13 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 0, i8* %13, align 1
  %14 = lshr i32 %6, 31
  %15 = trunc i32 %14 to i8
  store i8 %15, i8* %11, align 1
  %16 = icmp eq i32 %6, 0
  %17 = zext i1 %16 to i8
  store i8 %17, i8* %8, align 1
  %18 = zext i32 %7 to i64
  store i64 %18, i64* %2, align 8
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L5LZCNTI3RnWImE2MnImEEEP6MemoryS6_R5StateT_T0_(%struct.Memory*, %struct.State* nocapture dereferenceable(3376), i64* nocapture, i64)  {
  %5 = inttoptr i64 %3 to i64*
  %6 = load i64, i64* %5
  %7 = tail call i64 @llvm.ctlz.i64(i64 %6, i1 false) 
  %8 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  %9 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 0, i8* %9, align 1
  %10 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 0, i8* %10, align 1
  %11 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  %12 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 0, i8* %12, align 1
  %13 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 0, i8* %13, align 1
  %14 = lshr i64 %6, 63
  %15 = trunc i64 %14 to i8
  store i8 %15, i8* %11, align 1
  %16 = icmp eq i64 %6, 0
  %17 = zext i1 %16 to i8
  store i8 %17, i8* %8, align 1
  store i64 %7, i64* %2, align 8
  ret %struct.Memory* %0
}

; Function Attrs: nounwind readnone
declare i64 @llvm.ctlz.i64(i64, i1) 

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L5LZCNTI3RnWIhE2RnIhEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* readnone returned, %struct.State* nocapture dereferenceable(3376), i8* nocapture, i64)  {
  %5 = trunc i64 %3 to i8
  %6 = trunc i64 %3 to i32
  %7 = and i32 %6, 255
  %8 = tail call i32 @llvm.ctlz.i32(i32 %7, i1 true) 
  %9 = add nuw nsw i32 %8, 232
  %10 = trunc i32 %9 to i8
  %11 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  %12 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 0, i8* %12, align 1
  %13 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 0, i8* %13, align 1
  %14 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  %15 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 0, i8* %15, align 1
  %16 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 0, i8* %16, align 1
  %17 = lshr i8 %5, 7
  store i8 %17, i8* %14, align 1
  %18 = icmp eq i8 %5, 0
  %19 = zext i1 %18 to i8
  store i8 %19, i8* %11, align 1
  %20 = select i1 %18, i8 8, i8 %10
  store i8 %20, i8* %2, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L5LZCNTI3RnWItE2RnItEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* readnone returned, %struct.State* nocapture dereferenceable(3376), i16* nocapture, i64)  {
  %5 = trunc i64 %3 to i16
  %6 = trunc i64 %3 to i32
  %7 = and i32 %6, 65535
  %8 = tail call i32 @llvm.ctlz.i32(i32 %7, i1 true) 
  %9 = add nuw nsw i32 %8, 65520
  %10 = trunc i32 %9 to i16
  %11 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  %12 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 0, i8* %12, align 1
  %13 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 0, i8* %13, align 1
  %14 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  %15 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 0, i8* %15, align 1
  %16 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 0, i8* %16, align 1
  %17 = lshr i16 %5, 15
  %18 = trunc i16 %17 to i8
  store i8 %18, i8* %14, align 1
  %19 = icmp eq i16 %5, 0
  %20 = zext i1 %19 to i8
  store i8 %20, i8* %11, align 1
  %21 = select i1 %19, i16 16, i16 %10
  store i16 %21, i16* %2, align 2
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L5LZCNTI3RnWImE2RnIjEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* readnone returned, %struct.State* nocapture dereferenceable(3376), i64* nocapture, i64)  {
  %5 = trunc i64 %3 to i32
  %6 = tail call i32 @llvm.ctlz.i32(i32 %5, i1 false) 
  %7 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  %8 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 0, i8* %8, align 1
  %9 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 0, i8* %9, align 1
  %10 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  %11 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 0, i8* %11, align 1
  %12 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 0, i8* %12, align 1
  %13 = lshr i32 %5, 31
  %14 = trunc i32 %13 to i8
  store i8 %14, i8* %10, align 1
  %15 = icmp eq i32 %5, 0
  %16 = zext i1 %15 to i8
  store i8 %16, i8* %7, align 1
  %17 = zext i32 %6 to i64
  store i64 %17, i64* %2, align 8
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L5LZCNTI3RnWImE2RnImEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* readnone returned, %struct.State* nocapture dereferenceable(3376), i64* nocapture, i64)  {
  %5 = tail call i64 @llvm.ctlz.i64(i64 %3, i1 false) 
  %6 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  %7 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 0, i8* %7, align 1
  %8 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 0, i8* %8, align 1
  %9 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  %10 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 0, i8* %10, align 1
  %11 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 0, i8* %11, align 1
  %12 = lshr i64 %3, 63
  %13 = trunc i64 %12 to i8
  store i8 %13, i8* %9, align 1
  %14 = icmp eq i64 %3, 0
  %15 = zext i1 %14 to i8
  store i8 %15, i8* %6, align 1
  store i64 %5, i64* %2, align 8
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3BSRI3RnWIhE2MnIhEEEP6MemoryS6_R5StateT_T0_(%struct.Memory*, %struct.State* nocapture dereferenceable(3376), i8* nocapture, i64)  {
  %5 = inttoptr i64 %3 to i8*
  %6 = load i8, i8* %5
  %7 = zext i8 %6 to i32
  %8 = tail call i32 @llvm.ctlz.i32(i32 %7, i1 true) 
  %9 = add nuw nsw i32 %8, 232
  %10 = trunc i32 %9 to i8
  %11 = sub i8 8, %10
  %12 = add i8 %11, -1
  %13 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  %14 = icmp eq i8 %6, 0
  %15 = zext i1 %14 to i8
  store i8 %15, i8* %13, align 1
  %16 = load i8, i8* %2, align 1
  %17 = select i1 %14, i8 %16, i8 %12
  %18 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 0, i8* %18, align 1
  %19 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 0, i8* %19, align 1
  %20 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  %21 = zext i8 %12 to i32
  %22 = tail call i32 @llvm.ctpop.i32(i32 %21) 
  %23 = trunc i32 %22 to i8
  %24 = and i8 %23, 1
  %25 = xor i8 %24, 1
  store i8 %25, i8* %20, align 1
  %26 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 0, i8* %26, align 1
  %27 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  store i8 0, i8* %27, align 1
  store i8 %17, i8* %2, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3BSRI3RnWItE2MnItEEEP6MemoryS6_R5StateT_T0_(%struct.Memory*, %struct.State* nocapture dereferenceable(3376), i16* nocapture, i64)  {
  %5 = inttoptr i64 %3 to i16*
  %6 = load i16, i16* %5
  %7 = zext i16 %6 to i32
  %8 = tail call i32 @llvm.ctlz.i32(i32 %7, i1 true) 
  %9 = add nuw nsw i32 %8, 65520
  %10 = trunc i32 %9 to i16
  %11 = sub i16 16, %10
  %12 = add i16 %11, -1
  %13 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  %14 = icmp eq i16 %6, 0
  %15 = zext i1 %14 to i8
  store i8 %15, i8* %13, align 1
  %16 = load i16, i16* %2, align 2
  %17 = select i1 %14, i16 %16, i16 %12
  %18 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 0, i8* %18, align 1
  %19 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 0, i8* %19, align 1
  %20 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  %21 = and i16 %12, 255
  %22 = zext i16 %21 to i32
  %23 = tail call i32 @llvm.ctpop.i32(i32 %22) 
  %24 = trunc i32 %23 to i8
  %25 = and i8 %24, 1
  %26 = xor i8 %25, 1
  store i8 %26, i8* %20, align 1
  %27 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 0, i8* %27, align 1
  %28 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  store i8 0, i8* %28, align 1
  store i16 %17, i16* %2, align 2
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3BSRI3RnWImE2MnIjEEEP6MemoryS6_R5StateT_T0_(%struct.Memory*, %struct.State* nocapture dereferenceable(3376), i64* nocapture, i64)  {
  %5 = inttoptr i64 %3 to i32*
  %6 = load i32, i32* %5
  %7 = tail call i32 @llvm.ctlz.i32(i32 %6, i1 true) 
  %8 = sub nsw i32 32, %7
  %9 = add nsw i32 %8, -1
  %10 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  %11 = icmp eq i32 %6, 0
  %12 = zext i1 %11 to i8
  store i8 %12, i8* %10, align 1
  %13 = load i64, i64* %2, align 8
  %14 = zext i32 %9 to i64
  %15 = select i1 %11, i64 %13, i64 %14
  %16 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 0, i8* %16, align 1
  %17 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 0, i8* %17, align 1
  %18 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  %19 = and i32 %9, 255
  %20 = tail call i32 @llvm.ctpop.i32(i32 %19) 
  %21 = trunc i32 %20 to i8
  %22 = and i8 %21, 1
  %23 = xor i8 %22, 1
  store i8 %23, i8* %18, align 1
  %24 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 0, i8* %24, align 1
  %25 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  store i8 0, i8* %25, align 1
  store i64 %15, i64* %2, align 8
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3BSRI3RnWImE2MnImEEEP6MemoryS6_R5StateT_T0_(%struct.Memory*, %struct.State* nocapture dereferenceable(3376), i64* nocapture, i64)  {
  %5 = inttoptr i64 %3 to i64*
  %6 = load i64, i64* %5
  %7 = tail call i64 @llvm.ctlz.i64(i64 %6, i1 true) 
  %8 = sub nsw i64 64, %7
  %9 = add nsw i64 %8, -1
  %10 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  %11 = icmp eq i64 %6, 0
  %12 = zext i1 %11 to i8
  store i8 %12, i8* %10, align 1
  %13 = load i64, i64* %2, align 8
  %14 = select i1 %11, i64 %13, i64 %9
  %15 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 0, i8* %15, align 1
  %16 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 0, i8* %16, align 1
  %17 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  %18 = trunc i64 %9 to i32
  %19 = and i32 %18, 255
  %20 = tail call i32 @llvm.ctpop.i32(i32 %19) 
  %21 = trunc i32 %20 to i8
  %22 = and i8 %21, 1
  %23 = xor i8 %22, 1
  store i8 %23, i8* %17, align 1
  %24 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 0, i8* %24, align 1
  %25 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  store i8 0, i8* %25, align 1
  store i64 %14, i64* %2, align 8
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3BSRI3RnWIhE2RnIhEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* readnone returned, %struct.State* nocapture dereferenceable(3376), i8* nocapture, i64)  {
  %5 = trunc i64 %3 to i8
  %6 = trunc i64 %3 to i32
  %7 = and i32 %6, 255
  %8 = tail call i32 @llvm.ctlz.i32(i32 %7, i1 true) 
  %9 = add nuw nsw i32 %8, 232
  %10 = trunc i32 %9 to i8
  %11 = sub i8 8, %10
  %12 = add i8 %11, -1
  %13 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  %14 = icmp eq i8 %5, 0
  %15 = zext i1 %14 to i8
  store i8 %15, i8* %13, align 1
  %16 = load i8, i8* %2, align 1
  %17 = select i1 %14, i8 %16, i8 %12
  %18 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 0, i8* %18, align 1
  %19 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 0, i8* %19, align 1
  %20 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  %21 = zext i8 %12 to i32
  %22 = tail call i32 @llvm.ctpop.i32(i32 %21) 
  %23 = trunc i32 %22 to i8
  %24 = and i8 %23, 1
  %25 = xor i8 %24, 1
  store i8 %25, i8* %20, align 1
  %26 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 0, i8* %26, align 1
  %27 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  store i8 0, i8* %27, align 1
  store i8 %17, i8* %2, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3BSRI3RnWItE2RnItEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* readnone returned, %struct.State* nocapture dereferenceable(3376), i16* nocapture, i64)  {
  %5 = trunc i64 %3 to i16
  %6 = trunc i64 %3 to i32
  %7 = and i32 %6, 65535
  %8 = tail call i32 @llvm.ctlz.i32(i32 %7, i1 true) 
  %9 = add nuw nsw i32 %8, 65520
  %10 = trunc i32 %9 to i16
  %11 = sub i16 16, %10
  %12 = add i16 %11, -1
  %13 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  %14 = icmp eq i16 %5, 0
  %15 = zext i1 %14 to i8
  store i8 %15, i8* %13, align 1
  %16 = load i16, i16* %2, align 2
  %17 = select i1 %14, i16 %16, i16 %12
  %18 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 0, i8* %18, align 1
  %19 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 0, i8* %19, align 1
  %20 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  %21 = and i16 %12, 255
  %22 = zext i16 %21 to i32
  %23 = tail call i32 @llvm.ctpop.i32(i32 %22) 
  %24 = trunc i32 %23 to i8
  %25 = and i8 %24, 1
  %26 = xor i8 %25, 1
  store i8 %26, i8* %20, align 1
  %27 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 0, i8* %27, align 1
  %28 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  store i8 0, i8* %28, align 1
  store i16 %17, i16* %2, align 2
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3BSRI3RnWImE2RnIjEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* readnone returned, %struct.State* nocapture dereferenceable(3376), i64* nocapture, i64)  {
  %5 = trunc i64 %3 to i32
  %6 = tail call i32 @llvm.ctlz.i32(i32 %5, i1 true) 
  %7 = sub nsw i32 32, %6
  %8 = add nsw i32 %7, -1
  %9 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  %10 = icmp eq i32 %5, 0
  %11 = zext i1 %10 to i8
  store i8 %11, i8* %9, align 1
  %12 = load i64, i64* %2, align 8
  %13 = zext i32 %8 to i64
  %14 = select i1 %10, i64 %12, i64 %13
  %15 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 0, i8* %15, align 1
  %16 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 0, i8* %16, align 1
  %17 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  %18 = and i32 %8, 255
  %19 = tail call i32 @llvm.ctpop.i32(i32 %18) 
  %20 = trunc i32 %19 to i8
  %21 = and i8 %20, 1
  %22 = xor i8 %21, 1
  store i8 %22, i8* %17, align 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 0, i8* %23, align 1
  %24 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  store i8 0, i8* %24, align 1
  store i64 %14, i64* %2, align 8
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3BSRI3RnWImE2RnImEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* readnone returned, %struct.State* nocapture dereferenceable(3376), i64* nocapture, i64)  {
  %5 = tail call i64 @llvm.ctlz.i64(i64 %3, i1 true) 
  %6 = sub nsw i64 64, %5
  %7 = add nsw i64 %6, -1
  %8 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  %9 = icmp eq i64 %3, 0
  %10 = zext i1 %9 to i8
  store i8 %10, i8* %8, align 1
  %11 = load i64, i64* %2, align 8
  %12 = select i1 %9, i64 %11, i64 %7
  %13 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 0, i8* %13, align 1
  %14 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 0, i8* %14, align 1
  %15 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  %16 = trunc i64 %7 to i32
  %17 = and i32 %16, 255
  %18 = tail call i32 @llvm.ctpop.i32(i32 %17) 
  %19 = trunc i32 %18 to i8
  %20 = and i8 %19, 1
  %21 = xor i8 %20, 1
  store i8 %21, i8* %15, align 1
  %22 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 0, i8* %22, align 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  store i8 0, i8* %23, align 1
  store i64 %12, i64* %2, align 8
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3BSFI3RnWIhE2MnIhEEEP6MemoryS6_R5StateT_T0_(%struct.Memory*, %struct.State* nocapture dereferenceable(3376), i8* nocapture, i64)  {
  %5 = inttoptr i64 %3 to i8*
  %6 = load i8, i8* %5
  %7 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  %8 = icmp eq i8 %6, 0
  %9 = zext i1 %8 to i8
  store i8 %9, i8* %7, align 1
  %10 = load i8, i8* %2, align 1
  %11 = zext i8 %6 to i32
  %12 = tail call i32 @llvm.cttz.i32(i32 %11, i1 true) 
  %13 = trunc i32 %12 to i8
  %14 = select i1 %8, i8 %10, i8 %13
  %15 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 0, i8* %15, align 1
  %16 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 0, i8* %16, align 1
  %17 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  %18 = zext i8 %14 to i32
  %19 = tail call i32 @llvm.ctpop.i32(i32 %18) 
  %20 = trunc i32 %19 to i8
  %21 = and i8 %20, 1
  %22 = xor i8 %21, 1
  store i8 %22, i8* %17, align 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 0, i8* %23, align 1
  %24 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  store i8 0, i8* %24, align 1
  store i8 %14, i8* %2, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3BSFI3RnWItE2MnItEEEP6MemoryS6_R5StateT_T0_(%struct.Memory*, %struct.State* nocapture dereferenceable(3376), i16* nocapture, i64)  {
  %5 = inttoptr i64 %3 to i16*
  %6 = load i16, i16* %5
  %7 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  %8 = icmp eq i16 %6, 0
  %9 = zext i1 %8 to i8
  store i8 %9, i8* %7, align 1
  %10 = load i16, i16* %2, align 2
  %11 = zext i16 %6 to i32
  %12 = tail call i32 @llvm.cttz.i32(i32 %11, i1 true) 
  %13 = trunc i32 %12 to i16
  %14 = select i1 %8, i16 %10, i16 %13
  %15 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 0, i8* %15, align 1
  %16 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 0, i8* %16, align 1
  %17 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  %18 = and i16 %14, 255
  %19 = zext i16 %18 to i32
  %20 = tail call i32 @llvm.ctpop.i32(i32 %19) 
  %21 = trunc i32 %20 to i8
  %22 = and i8 %21, 1
  %23 = xor i8 %22, 1
  store i8 %23, i8* %17, align 1
  %24 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 0, i8* %24, align 1
  %25 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  store i8 0, i8* %25, align 1
  store i16 %14, i16* %2, align 2
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3BSFI3RnWImE2MnIjEEEP6MemoryS6_R5StateT_T0_(%struct.Memory*, %struct.State* nocapture dereferenceable(3376), i64* nocapture, i64)  {
  %5 = inttoptr i64 %3 to i32*
  %6 = load i32, i32* %5
  %7 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  %8 = icmp eq i32 %6, 0
  %9 = zext i1 %8 to i8
  store i8 %9, i8* %7, align 1
  %10 = load i64, i64* %2, align 8
  %11 = tail call i32 @llvm.cttz.i32(i32 %6, i1 true) 
  %12 = zext i32 %11 to i64
  %13 = select i1 %8, i64 %10, i64 %12
  %14 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 0, i8* %14, align 1
  %15 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 0, i8* %15, align 1
  %16 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  %17 = trunc i64 %13 to i32
  %18 = and i32 %17, 255
  %19 = tail call i32 @llvm.ctpop.i32(i32 %18) 
  %20 = trunc i32 %19 to i8
  %21 = and i8 %20, 1
  %22 = xor i8 %21, 1
  store i8 %22, i8* %16, align 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 0, i8* %23, align 1
  %24 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  store i8 0, i8* %24, align 1
  store i64 %13, i64* %2, align 8
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3BSFI3RnWImE2MnImEEEP6MemoryS6_R5StateT_T0_(%struct.Memory*, %struct.State* nocapture dereferenceable(3376), i64* nocapture, i64)  {
  %5 = inttoptr i64 %3 to i64*
  %6 = load i64, i64* %5
  %7 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  %8 = icmp eq i64 %6, 0
  %9 = zext i1 %8 to i8
  store i8 %9, i8* %7, align 1
  %10 = load i64, i64* %2, align 8
  %11 = tail call i64 @llvm.cttz.i64(i64 %6, i1 true) 
  %12 = select i1 %8, i64 %10, i64 %11
  %13 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 0, i8* %13, align 1
  %14 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 0, i8* %14, align 1
  %15 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  %16 = trunc i64 %12 to i32
  %17 = and i32 %16, 255
  %18 = tail call i32 @llvm.ctpop.i32(i32 %17) 
  %19 = trunc i32 %18 to i8
  %20 = and i8 %19, 1
  %21 = xor i8 %20, 1
  store i8 %21, i8* %15, align 1
  %22 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 0, i8* %22, align 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  store i8 0, i8* %23, align 1
  store i64 %12, i64* %2, align 8
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3BSFI3RnWIhE2RnIhEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* readnone returned, %struct.State* nocapture dereferenceable(3376), i8* nocapture, i64)  {
  %5 = trunc i64 %3 to i8
  %6 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  %7 = icmp eq i8 %5, 0
  %8 = zext i1 %7 to i8
  store i8 %8, i8* %6, align 1
  %9 = load i8, i8* %2, align 1
  %10 = trunc i64 %3 to i32
  %11 = and i32 %10, 255
  %12 = tail call i32 @llvm.cttz.i32(i32 %11, i1 true) 
  %13 = trunc i32 %12 to i8
  %14 = select i1 %7, i8 %9, i8 %13
  %15 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 0, i8* %15, align 1
  %16 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 0, i8* %16, align 1
  %17 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  %18 = zext i8 %14 to i32
  %19 = tail call i32 @llvm.ctpop.i32(i32 %18) 
  %20 = trunc i32 %19 to i8
  %21 = and i8 %20, 1
  %22 = xor i8 %21, 1
  store i8 %22, i8* %17, align 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 0, i8* %23, align 1
  %24 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  store i8 0, i8* %24, align 1
  store i8 %14, i8* %2, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3BSFI3RnWItE2RnItEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* readnone returned, %struct.State* nocapture dereferenceable(3376), i16* nocapture, i64)  {
  %5 = trunc i64 %3 to i16
  %6 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  %7 = icmp eq i16 %5, 0
  %8 = zext i1 %7 to i8
  store i8 %8, i8* %6, align 1
  %9 = load i16, i16* %2, align 2
  %10 = trunc i64 %3 to i32
  %11 = and i32 %10, 65535
  %12 = tail call i32 @llvm.cttz.i32(i32 %11, i1 true) 
  %13 = trunc i32 %12 to i16
  %14 = select i1 %7, i16 %9, i16 %13
  %15 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 0, i8* %15, align 1
  %16 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 0, i8* %16, align 1
  %17 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  %18 = and i16 %14, 255
  %19 = zext i16 %18 to i32
  %20 = tail call i32 @llvm.ctpop.i32(i32 %19) 
  %21 = trunc i32 %20 to i8
  %22 = and i8 %21, 1
  %23 = xor i8 %22, 1
  store i8 %23, i8* %17, align 1
  %24 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 0, i8* %24, align 1
  %25 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  store i8 0, i8* %25, align 1
  store i16 %14, i16* %2, align 2
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3BSFI3RnWImE2RnIjEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* readnone returned, %struct.State* nocapture dereferenceable(3376), i64* nocapture, i64)  {
  %5 = trunc i64 %3 to i32
  %6 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  %7 = icmp eq i32 %5, 0
  %8 = zext i1 %7 to i8
  store i8 %8, i8* %6, align 1
  %9 = load i64, i64* %2, align 8
  %10 = tail call i32 @llvm.cttz.i32(i32 %5, i1 true) 
  %11 = zext i32 %10 to i64
  %12 = select i1 %7, i64 %9, i64 %11
  %13 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 0, i8* %13, align 1
  %14 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 0, i8* %14, align 1
  %15 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  %16 = trunc i64 %12 to i32
  %17 = and i32 %16, 255
  %18 = tail call i32 @llvm.ctpop.i32(i32 %17) 
  %19 = trunc i32 %18 to i8
  %20 = and i8 %19, 1
  %21 = xor i8 %20, 1
  store i8 %21, i8* %15, align 1
  %22 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 0, i8* %22, align 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  store i8 0, i8* %23, align 1
  store i64 %12, i64* %2, align 8
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3BSFI3RnWImE2RnImEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* readnone returned, %struct.State* nocapture dereferenceable(3376), i64* nocapture, i64)  {
  %5 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  %6 = icmp eq i64 %3, 0
  %7 = zext i1 %6 to i8
  store i8 %7, i8* %5, align 1
  %8 = load i64, i64* %2, align 8
  %9 = tail call i64 @llvm.cttz.i64(i64 %3, i1 true) 
  %10 = select i1 %6, i64 %8, i64 %9
  %11 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 0, i8* %11, align 1
  %12 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 0, i8* %12, align 1
  %13 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  %14 = trunc i64 %10 to i32
  %15 = and i32 %14, 255
  %16 = tail call i32 @llvm.ctpop.i32(i32 %15) 
  %17 = trunc i32 %16 to i8
  %18 = and i8 %17, 1
  %19 = xor i8 %18, 1
  store i8 %19, i8* %13, align 1
  %20 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 0, i8* %20, align 1
  %21 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  store i8 0, i8* %21, align 1
  store i64 %10, i64* %2, align 8
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L4CALLI2InImEEEP6MemoryS4_R5StateT_S2_(%struct.Memory* readnone, %struct.State* nocapture dereferenceable(3376), i64, i64)  {
  %5 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 13, i32 0, i32 0
  %6 = load i64, i64* %5, align 8
  %7 = add i64 %6, -8
  %8 = inttoptr i64 %7 to i64*
  store i64 %3, i64* %8
  store i64 %7, i64* %5, align 8
  %9 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %2, i64* %9, align 8
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L4CALLI2MnImEEEP6MemoryS4_R5StateT_2InImE(%struct.Memory*, %struct.State* nocapture dereferenceable(3376), i64, i64)  {
  %5 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 13, i32 0, i32 0
  %6 = load i64, i64* %5, align 8
  %7 = add i64 %6, -8
  %8 = inttoptr i64 %7 to i64*
  store i64 %3, i64* %8
  store i64 %7, i64* %5, align 8
  %9 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 33, i32 0, i32 0
  %10 = inttoptr i64 %2 to i64*
  %11 = load i64, i64* %10
  store i64 %11, i64* %9, align 8
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L4CALLI2RnImEEEP6MemoryS4_R5StateT_2InImE(%struct.Memory* readnone, %struct.State* nocapture dereferenceable(3376), i64, i64)  {
  %5 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 13, i32 0, i32 0
  %6 = load i64, i64* %5, align 8
  %7 = add i64 %6, -8
  %8 = inttoptr i64 %7 to i64*
  store i64 %3, i64* %8
  store i64 %7, i64* %5, align 8
  %9 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %2, i64* %9, align 8
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L7RET_IMMEP6MemoryR5State2InItE(%struct.Memory* returned, %struct.State* nocapture dereferenceable(3376), i64)  {
  %4 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 33, i32 0, i32 0
  %5 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 13, i32 0, i32 0
  %6 = load i64, i64* %5, align 8
  %7 = inttoptr i64 %6 to i64*
  %8 = load i64, i64* %7
  store i64 %8, i64* %4, align 8
  %9 = and i64 %2, 65535
  %10 = add nuw nsw i64 %9, 8
  %11 = add i64 %10, %6
  store i64 %11, i64* %5, align 8
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3RETEP6MemoryR5State(%struct.Memory* returned, %struct.State* nocapture dereferenceable(3376))  {
  %3 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 33, i32 0, i32 0
  %4 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 13, i32 0, i32 0
  %5 = load i64, i64* %4, align 8
  %6 = inttoptr i64 %5 to i64*
  %7 = load i64, i64* %6
  store i64 %7, i64* %3, align 8
  %8 = add i64 %5, 8
  store i64 %8, i64* %4, align 8
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L5IRETQEP6MemoryR5State(%struct.Memory*, %struct.State* nocapture dereferenceable(3376))  {
  %3 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 13, i32 0, i32 0
  %4 = load i64, i64* %3, align 8
  %5 = add i64 %4, 8
  %6 = inttoptr i64 %4 to i64*
  %7 = load i64, i64* %6
  %8 = add i64 %4, 16
  %9 = inttoptr i64 %5 to i64*
  %10 = load i64, i64* %9
  %11 = trunc i64 %10 to i16
  %12 = add i64 %4, 24
  %13 = inttoptr i64 %8 to i64*
  %14 = load i64, i64* %13
  %15 = trunc i64 %14 to i32
  %16 = lshr i64 %14, 32
  %17 = trunc i64 %16 to i32
  %18 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %7, i64* %18, align 8
  %19 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 4, i32 11, i32 0
  store i16 %11, i16* %19, align 2
  %20 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 3
  %21 = bitcast %union.anon* %20 to i8*
  %22 = bitcast %union.anon* %20 to i32*
  store i32 %15, i32* %22, align 8
  %23 = getelementptr inbounds i8, i8* %21, i64 4
  %24 = bitcast i8* %23 to i32*
  store i32 %17, i32* %24, align 4
  %25 = lshr i32 %15, 4
  %26 = trunc i32 %25 to i8
  %27 = and i8 %26, 1
  %28 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 %27, i8* %28, align 1
  %29 = trunc i64 %14 to i8
  %30 = and i8 %29, 1
  %31 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  store i8 %30, i8* %31, align 1
  %32 = lshr i32 %15, 10
  %33 = trunc i32 %32 to i8
  %34 = and i8 %33, 1
  %35 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 11
  store i8 %34, i8* %35, align 1
  %36 = lshr i32 %15, 11
  %37 = trunc i32 %36 to i8
  %38 = and i8 %37, 1
  %39 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 %38, i8* %39, align 1
  %40 = lshr i32 %15, 2
  %41 = trunc i32 %40 to i8
  %42 = and i8 %41, 1
  %43 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 %42, i8* %43, align 1
  %44 = lshr i32 %15, 7
  %45 = trunc i32 %44 to i8
  %46 = and i8 %45, 1
  %47 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 %46, i8* %47, align 1
  %48 = lshr i32 %15, 6
  %49 = trunc i32 %48 to i8
  %50 = and i8 %49, 1
  %51 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  store i8 %50, i8* %51, align 1
  %52 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 0, i32 0
  store i32 6, i32* %52, align 16
  %53 = add i64 %4, 32
  %54 = inttoptr i64 %12 to i64*
  %55 = load i64, i64* %54
  %56 = inttoptr i64 %53 to i64*
  %57 = load i64, i64* %56
  %58 = trunc i64 %57 to i16
  store i64 %55, i64* %3, align 8
  %59 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 4, i32 1, i32 0
  store i16 %58, i16* %59, align 2
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L6CMOVBEI3RnWIhE2MnIhEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* returned, %struct.State* nocapture readonly dereferenceable(3376), i8* nocapture, i64)  {
  %5 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  %6 = load i8, i8* %5, align 1
  %7 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  %8 = load i8, i8* %7, align 1
  %9 = or i8 %8, %6
  %10 = icmp ne i8 %9, 0
  %11 = inttoptr i64 %3 to i8*
  %12 = load i8, i8* %11
  %13 = load i8, i8* %2, align 1
  %14 = select i1 %10, i8 %12, i8 %13
  store i8 %14, i8* %2, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L6CMOVBEI3RnWItE2MnItEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* returned, %struct.State* nocapture readonly dereferenceable(3376), i16* nocapture, i64)  {
  %5 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  %6 = load i8, i8* %5, align 1
  %7 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  %8 = load i8, i8* %7, align 1
  %9 = or i8 %8, %6
  %10 = icmp ne i8 %9, 0
  %11 = inttoptr i64 %3 to i16*
  %12 = load i16, i16* %11
  %13 = load i16, i16* %2, align 2
  %14 = select i1 %10, i16 %12, i16 %13
  store i16 %14, i16* %2, align 2
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L6CMOVBEI3RnWImE2MnIjEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* returned, %struct.State* nocapture readonly dereferenceable(3376), i64* nocapture, i64)  {
  %5 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  %6 = load i8, i8* %5, align 1
  %7 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  %8 = load i8, i8* %7, align 1
  %9 = or i8 %8, %6
  %10 = icmp ne i8 %9, 0
  %11 = inttoptr i64 %3 to i32*
  %12 = load i32, i32* %11
  %13 = load i64, i64* %2, align 8
  %14 = trunc i64 %13 to i32
  %15 = select i1 %10, i32 %12, i32 %14
  %16 = zext i32 %15 to i64
  store i64 %16, i64* %2, align 8
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L6CMOVBEI3RnWImE2MnImEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* returned, %struct.State* nocapture readonly dereferenceable(3376), i64* nocapture, i64)  {
  %5 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  %6 = load i8, i8* %5, align 1
  %7 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  %8 = load i8, i8* %7, align 1
  %9 = or i8 %8, %6
  %10 = icmp ne i8 %9, 0
  %11 = inttoptr i64 %3 to i64*
  %12 = load i64, i64* %11
  %13 = load i64, i64* %2, align 8
  %14 = select i1 %10, i64 %12, i64 %13
  store i64 %14, i64* %2, align 8
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline norecurse nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L6CMOVBEI3RnWIhE2RnIhEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* readnone returned, %struct.State* nocapture readonly dereferenceable(3376), i8* nocapture, i64)  {
  %5 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  %6 = load i8, i8* %5, align 1
  %7 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  %8 = load i8, i8* %7, align 1
  %9 = or i8 %8, %6
  %10 = icmp ne i8 %9, 0
  %11 = trunc i64 %3 to i8
  %12 = load i8, i8* %2, align 1
  %13 = select i1 %10, i8 %11, i8 %12
  store i8 %13, i8* %2, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline norecurse nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L6CMOVBEI3RnWItE2RnItEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* readnone returned, %struct.State* nocapture readonly dereferenceable(3376), i16* nocapture, i64)  {
  %5 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  %6 = load i8, i8* %5, align 1
  %7 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  %8 = load i8, i8* %7, align 1
  %9 = or i8 %8, %6
  %10 = icmp ne i8 %9, 0
  %11 = trunc i64 %3 to i16
  %12 = load i16, i16* %2, align 2
  %13 = select i1 %10, i16 %11, i16 %12
  store i16 %13, i16* %2, align 2
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline norecurse nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L6CMOVBEI3RnWImE2RnIjEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* readnone returned, %struct.State* nocapture readonly dereferenceable(3376), i64* nocapture, i64)  {
  %5 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  %6 = load i8, i8* %5, align 1
  %7 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  %8 = load i8, i8* %7, align 1
  %9 = or i8 %8, %6
  %10 = icmp ne i8 %9, 0
  %11 = load i64, i64* %2, align 8
  %12 = select i1 %10, i64 %3, i64 %11
  %13 = and i64 %12, 4294967295
  store i64 %13, i64* %2, align 8
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline norecurse nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L6CMOVBEI3RnWImE2RnImEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* readnone returned, %struct.State* nocapture readonly dereferenceable(3376), i64* nocapture, i64)  {
  %5 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  %6 = load i8, i8* %5, align 1
  %7 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  %8 = load i8, i8* %7, align 1
  %9 = or i8 %8, %6
  %10 = icmp ne i8 %9, 0
  %11 = load i64, i64* %2, align 8
  %12 = select i1 %10, i64 %3, i64 %11
  store i64 %12, i64* %2, align 8
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L6CMOVLEI3RnWIhE2MnIhEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* returned, %struct.State* nocapture readonly dereferenceable(3376), i8* nocapture, i64)  {
  %5 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  %6 = load i8, i8* %5, align 1
  %7 = icmp ne i8 %6, 0
  %8 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  %9 = load i8, i8* %8, align 1
  %10 = icmp ne i8 %9, 0
  %11 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  %12 = load i8, i8* %11, align 1
  %13 = icmp ne i8 %12, 0
  %14 = xor i1 %10, %13
  %15 = or i1 %7, %14
  %16 = inttoptr i64 %3 to i8*
  %17 = load i8, i8* %16
  %18 = load i8, i8* %2, align 1
  %19 = select i1 %15, i8 %17, i8 %18
  store i8 %19, i8* %2, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L6CMOVLEI3RnWItE2MnItEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* returned, %struct.State* nocapture readonly dereferenceable(3376), i16* nocapture, i64)  {
  %5 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  %6 = load i8, i8* %5, align 1
  %7 = icmp ne i8 %6, 0
  %8 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  %9 = load i8, i8* %8, align 1
  %10 = icmp ne i8 %9, 0
  %11 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  %12 = load i8, i8* %11, align 1
  %13 = icmp ne i8 %12, 0
  %14 = xor i1 %10, %13
  %15 = or i1 %7, %14
  %16 = inttoptr i64 %3 to i16*
  %17 = load i16, i16* %16
  %18 = load i16, i16* %2, align 2
  %19 = select i1 %15, i16 %17, i16 %18
  store i16 %19, i16* %2, align 2
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L6CMOVLEI3RnWImE2MnIjEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* returned, %struct.State* nocapture readonly dereferenceable(3376), i64* nocapture, i64)  {
  %5 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  %6 = load i8, i8* %5, align 1
  %7 = icmp ne i8 %6, 0
  %8 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  %9 = load i8, i8* %8, align 1
  %10 = icmp ne i8 %9, 0
  %11 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  %12 = load i8, i8* %11, align 1
  %13 = icmp ne i8 %12, 0
  %14 = xor i1 %10, %13
  %15 = or i1 %7, %14
  %16 = inttoptr i64 %3 to i32*
  %17 = load i32, i32* %16
  %18 = load i64, i64* %2, align 8
  %19 = trunc i64 %18 to i32
  %20 = select i1 %15, i32 %17, i32 %19
  %21 = zext i32 %20 to i64
  store i64 %21, i64* %2, align 8
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L6CMOVLEI3RnWImE2MnImEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* returned, %struct.State* nocapture readonly dereferenceable(3376), i64* nocapture, i64)  {
  %5 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  %6 = load i8, i8* %5, align 1
  %7 = icmp ne i8 %6, 0
  %8 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  %9 = load i8, i8* %8, align 1
  %10 = icmp ne i8 %9, 0
  %11 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  %12 = load i8, i8* %11, align 1
  %13 = icmp ne i8 %12, 0
  %14 = xor i1 %10, %13
  %15 = or i1 %7, %14
  %16 = inttoptr i64 %3 to i64*
  %17 = load i64, i64* %16
  %18 = load i64, i64* %2, align 8
  %19 = select i1 %15, i64 %17, i64 %18
  store i64 %19, i64* %2, align 8
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline norecurse nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L6CMOVLEI3RnWIhE2RnIhEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* readnone returned, %struct.State* nocapture readonly dereferenceable(3376), i8* nocapture, i64)  {
  %5 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  %6 = load i8, i8* %5, align 1
  %7 = icmp ne i8 %6, 0
  %8 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  %9 = load i8, i8* %8, align 1
  %10 = icmp ne i8 %9, 0
  %11 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  %12 = load i8, i8* %11, align 1
  %13 = icmp ne i8 %12, 0
  %14 = xor i1 %10, %13
  %15 = or i1 %7, %14
  %16 = trunc i64 %3 to i8
  %17 = load i8, i8* %2, align 1
  %18 = select i1 %15, i8 %16, i8 %17
  store i8 %18, i8* %2, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline norecurse nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L6CMOVLEI3RnWItE2RnItEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* readnone returned, %struct.State* nocapture readonly dereferenceable(3376), i16* nocapture, i64)  {
  %5 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  %6 = load i8, i8* %5, align 1
  %7 = icmp ne i8 %6, 0
  %8 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  %9 = load i8, i8* %8, align 1
  %10 = icmp ne i8 %9, 0
  %11 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  %12 = load i8, i8* %11, align 1
  %13 = icmp ne i8 %12, 0
  %14 = xor i1 %10, %13
  %15 = or i1 %7, %14
  %16 = trunc i64 %3 to i16
  %17 = load i16, i16* %2, align 2
  %18 = select i1 %15, i16 %16, i16 %17
  store i16 %18, i16* %2, align 2
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline norecurse nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L6CMOVLEI3RnWImE2RnIjEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* readnone returned, %struct.State* nocapture readonly dereferenceable(3376), i64* nocapture, i64)  {
  %5 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  %6 = load i8, i8* %5, align 1
  %7 = icmp ne i8 %6, 0
  %8 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  %9 = load i8, i8* %8, align 1
  %10 = icmp ne i8 %9, 0
  %11 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  %12 = load i8, i8* %11, align 1
  %13 = icmp ne i8 %12, 0
  %14 = xor i1 %10, %13
  %15 = or i1 %7, %14
  %16 = load i64, i64* %2, align 8
  %17 = select i1 %15, i64 %3, i64 %16
  %18 = and i64 %17, 4294967295
  store i64 %18, i64* %2, align 8
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline norecurse nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L6CMOVLEI3RnWImE2RnImEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* readnone returned, %struct.State* nocapture readonly dereferenceable(3376), i64* nocapture, i64)  {
  %5 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  %6 = load i8, i8* %5, align 1
  %7 = icmp ne i8 %6, 0
  %8 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  %9 = load i8, i8* %8, align 1
  %10 = icmp ne i8 %9, 0
  %11 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  %12 = load i8, i8* %11, align 1
  %13 = icmp ne i8 %12, 0
  %14 = xor i1 %10, %13
  %15 = or i1 %7, %14
  %16 = load i64, i64* %2, align 8
  %17 = select i1 %15, i64 %3, i64 %16
  store i64 %17, i64* %2, align 8
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L7CMOVNLEI3RnWIhE2MnIhEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* returned, %struct.State* nocapture readonly dereferenceable(3376), i8* nocapture, i64)  {
  %5 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  %6 = load i8, i8* %5, align 1
  %7 = icmp eq i8 %6, 0
  %8 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  %9 = load i8, i8* %8, align 1
  %10 = icmp ne i8 %9, 0
  %11 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  %12 = load i8, i8* %11, align 1
  %13 = icmp ne i8 %12, 0
  %14 = xor i1 %10, %13
  %15 = xor i1 %14, true
  %16 = and i1 %7, %15
  %17 = inttoptr i64 %3 to i8*
  %18 = load i8, i8* %17
  %19 = load i8, i8* %2, align 1
  %20 = select i1 %16, i8 %18, i8 %19
  store i8 %20, i8* %2, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L7CMOVNLEI3RnWItE2MnItEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* returned, %struct.State* nocapture readonly dereferenceable(3376), i16* nocapture, i64)  {
  %5 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  %6 = load i8, i8* %5, align 1
  %7 = icmp eq i8 %6, 0
  %8 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  %9 = load i8, i8* %8, align 1
  %10 = icmp ne i8 %9, 0
  %11 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  %12 = load i8, i8* %11, align 1
  %13 = icmp ne i8 %12, 0
  %14 = xor i1 %10, %13
  %15 = xor i1 %14, true
  %16 = and i1 %7, %15
  %17 = inttoptr i64 %3 to i16*
  %18 = load i16, i16* %17
  %19 = load i16, i16* %2, align 2
  %20 = select i1 %16, i16 %18, i16 %19
  store i16 %20, i16* %2, align 2
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L7CMOVNLEI3RnWImE2MnIjEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* returned, %struct.State* nocapture readonly dereferenceable(3376), i64* nocapture, i64)  {
  %5 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  %6 = load i8, i8* %5, align 1
  %7 = icmp eq i8 %6, 0
  %8 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  %9 = load i8, i8* %8, align 1
  %10 = icmp ne i8 %9, 0
  %11 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  %12 = load i8, i8* %11, align 1
  %13 = icmp ne i8 %12, 0
  %14 = xor i1 %10, %13
  %15 = xor i1 %14, true
  %16 = and i1 %7, %15
  %17 = inttoptr i64 %3 to i32*
  %18 = load i32, i32* %17
  %19 = load i64, i64* %2, align 8
  %20 = trunc i64 %19 to i32
  %21 = select i1 %16, i32 %18, i32 %20
  %22 = zext i32 %21 to i64
  store i64 %22, i64* %2, align 8
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L7CMOVNLEI3RnWImE2MnImEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* returned, %struct.State* nocapture readonly dereferenceable(3376), i64* nocapture, i64)  {
  %5 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  %6 = load i8, i8* %5, align 1
  %7 = icmp eq i8 %6, 0
  %8 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  %9 = load i8, i8* %8, align 1
  %10 = icmp ne i8 %9, 0
  %11 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  %12 = load i8, i8* %11, align 1
  %13 = icmp ne i8 %12, 0
  %14 = xor i1 %10, %13
  %15 = xor i1 %14, true
  %16 = and i1 %7, %15
  %17 = inttoptr i64 %3 to i64*
  %18 = load i64, i64* %17
  %19 = load i64, i64* %2, align 8
  %20 = select i1 %16, i64 %18, i64 %19
  store i64 %20, i64* %2, align 8
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline norecurse nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L7CMOVNLEI3RnWIhE2RnIhEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* readnone returned, %struct.State* nocapture readonly dereferenceable(3376), i8* nocapture, i64)  {
  %5 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  %6 = load i8, i8* %5, align 1
  %7 = icmp eq i8 %6, 0
  %8 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  %9 = load i8, i8* %8, align 1
  %10 = icmp ne i8 %9, 0
  %11 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  %12 = load i8, i8* %11, align 1
  %13 = icmp ne i8 %12, 0
  %14 = xor i1 %10, %13
  %15 = xor i1 %14, true
  %16 = and i1 %7, %15
  %17 = trunc i64 %3 to i8
  %18 = load i8, i8* %2, align 1
  %19 = select i1 %16, i8 %17, i8 %18
  store i8 %19, i8* %2, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline norecurse nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L7CMOVNLEI3RnWItE2RnItEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* readnone returned, %struct.State* nocapture readonly dereferenceable(3376), i16* nocapture, i64)  {
  %5 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  %6 = load i8, i8* %5, align 1
  %7 = icmp eq i8 %6, 0
  %8 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  %9 = load i8, i8* %8, align 1
  %10 = icmp ne i8 %9, 0
  %11 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  %12 = load i8, i8* %11, align 1
  %13 = icmp ne i8 %12, 0
  %14 = xor i1 %10, %13
  %15 = xor i1 %14, true
  %16 = and i1 %7, %15
  %17 = trunc i64 %3 to i16
  %18 = load i16, i16* %2, align 2
  %19 = select i1 %16, i16 %17, i16 %18
  store i16 %19, i16* %2, align 2
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline norecurse nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L7CMOVNLEI3RnWImE2RnIjEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* readnone returned, %struct.State* nocapture readonly dereferenceable(3376), i64* nocapture, i64)  {
  %5 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  %6 = load i8, i8* %5, align 1
  %7 = icmp eq i8 %6, 0
  %8 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  %9 = load i8, i8* %8, align 1
  %10 = icmp ne i8 %9, 0
  %11 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  %12 = load i8, i8* %11, align 1
  %13 = icmp ne i8 %12, 0
  %14 = xor i1 %10, %13
  %15 = xor i1 %14, true
  %16 = and i1 %7, %15
  %17 = load i64, i64* %2, align 8
  %18 = select i1 %16, i64 %3, i64 %17
  %19 = and i64 %18, 4294967295
  store i64 %19, i64* %2, align 8
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline norecurse nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L7CMOVNLEI3RnWImE2RnImEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* readnone returned, %struct.State* nocapture readonly dereferenceable(3376), i64* nocapture, i64)  {
  %5 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  %6 = load i8, i8* %5, align 1
  %7 = icmp eq i8 %6, 0
  %8 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  %9 = load i8, i8* %8, align 1
  %10 = icmp ne i8 %9, 0
  %11 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  %12 = load i8, i8* %11, align 1
  %13 = icmp ne i8 %12, 0
  %14 = xor i1 %10, %13
  %15 = xor i1 %14, true
  %16 = and i1 %7, %15
  %17 = load i64, i64* %2, align 8
  %18 = select i1 %16, i64 %3, i64 %17
  store i64 %18, i64* %2, align 8
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L6CMOVNPI3RnWIhE2MnIhEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* returned, %struct.State* nocapture readonly dereferenceable(3376), i8* nocapture, i64)  {
  %5 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  %6 = load i8, i8* %5, align 1
  %7 = icmp eq i8 %6, 0
  %8 = inttoptr i64 %3 to i8*
  %9 = load i8, i8* %8
  %10 = load i8, i8* %2, align 1
  %11 = select i1 %7, i8 %9, i8 %10
  store i8 %11, i8* %2, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L6CMOVNPI3RnWItE2MnItEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* returned, %struct.State* nocapture readonly dereferenceable(3376), i16* nocapture, i64)  {
  %5 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  %6 = load i8, i8* %5, align 1
  %7 = icmp eq i8 %6, 0
  %8 = inttoptr i64 %3 to i16*
  %9 = load i16, i16* %8
  %10 = load i16, i16* %2, align 2
  %11 = select i1 %7, i16 %9, i16 %10
  store i16 %11, i16* %2, align 2
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L6CMOVNPI3RnWImE2MnIjEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* returned, %struct.State* nocapture readonly dereferenceable(3376), i64* nocapture, i64)  {
  %5 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  %6 = load i8, i8* %5, align 1
  %7 = icmp eq i8 %6, 0
  %8 = inttoptr i64 %3 to i32*
  %9 = load i32, i32* %8
  %10 = load i64, i64* %2, align 8
  %11 = trunc i64 %10 to i32
  %12 = select i1 %7, i32 %9, i32 %11
  %13 = zext i32 %12 to i64
  store i64 %13, i64* %2, align 8
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L6CMOVNPI3RnWImE2MnImEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* returned, %struct.State* nocapture readonly dereferenceable(3376), i64* nocapture, i64)  {
  %5 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  %6 = load i8, i8* %5, align 1
  %7 = icmp eq i8 %6, 0
  %8 = inttoptr i64 %3 to i64*
  %9 = load i64, i64* %8
  %10 = load i64, i64* %2, align 8
  %11 = select i1 %7, i64 %9, i64 %10
  store i64 %11, i64* %2, align 8
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline norecurse nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L6CMOVNPI3RnWIhE2RnIhEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* readnone returned, %struct.State* nocapture readonly dereferenceable(3376), i8* nocapture, i64)  {
  %5 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  %6 = load i8, i8* %5, align 1
  %7 = icmp eq i8 %6, 0
  %8 = trunc i64 %3 to i8
  %9 = load i8, i8* %2, align 1
  %10 = select i1 %7, i8 %8, i8 %9
  store i8 %10, i8* %2, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline norecurse nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L6CMOVNPI3RnWItE2RnItEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* readnone returned, %struct.State* nocapture readonly dereferenceable(3376), i16* nocapture, i64)  {
  %5 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  %6 = load i8, i8* %5, align 1
  %7 = icmp eq i8 %6, 0
  %8 = trunc i64 %3 to i16
  %9 = load i16, i16* %2, align 2
  %10 = select i1 %7, i16 %8, i16 %9
  store i16 %10, i16* %2, align 2
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline norecurse nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L6CMOVNPI3RnWImE2RnIjEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* readnone returned, %struct.State* nocapture readonly dereferenceable(3376), i64* nocapture, i64)  {
  %5 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  %6 = load i8, i8* %5, align 1
  %7 = icmp eq i8 %6, 0
  %8 = load i64, i64* %2, align 8
  %9 = select i1 %7, i64 %3, i64 %8
  %10 = and i64 %9, 4294967295
  store i64 %10, i64* %2, align 8
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline norecurse nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L6CMOVNPI3RnWImE2RnImEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* readnone returned, %struct.State* nocapture readonly dereferenceable(3376), i64* nocapture, i64)  {
  %5 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  %6 = load i8, i8* %5, align 1
  %7 = icmp eq i8 %6, 0
  %8 = load i64, i64* %2, align 8
  %9 = select i1 %7, i64 %3, i64 %8
  store i64 %9, i64* %2, align 8
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L6CMOVNZI3RnWIhE2MnIhEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* returned, %struct.State* nocapture readonly dereferenceable(3376), i8* nocapture, i64)  {
  %5 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  %6 = load i8, i8* %5, align 1
  %7 = icmp eq i8 %6, 0
  %8 = inttoptr i64 %3 to i8*
  %9 = load i8, i8* %8
  %10 = load i8, i8* %2, align 1
  %11 = select i1 %7, i8 %9, i8 %10
  store i8 %11, i8* %2, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L6CMOVNZI3RnWItE2MnItEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* returned, %struct.State* nocapture readonly dereferenceable(3376), i16* nocapture, i64)  {
  %5 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  %6 = load i8, i8* %5, align 1
  %7 = icmp eq i8 %6, 0
  %8 = inttoptr i64 %3 to i16*
  %9 = load i16, i16* %8
  %10 = load i16, i16* %2, align 2
  %11 = select i1 %7, i16 %9, i16 %10
  store i16 %11, i16* %2, align 2
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L6CMOVNZI3RnWImE2MnIjEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* returned, %struct.State* nocapture readonly dereferenceable(3376), i64* nocapture, i64)  {
  %5 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  %6 = load i8, i8* %5, align 1
  %7 = icmp eq i8 %6, 0
  %8 = inttoptr i64 %3 to i32*
  %9 = load i32, i32* %8
  %10 = load i64, i64* %2, align 8
  %11 = trunc i64 %10 to i32
  %12 = select i1 %7, i32 %9, i32 %11
  %13 = zext i32 %12 to i64
  store i64 %13, i64* %2, align 8
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L6CMOVNZI3RnWImE2MnImEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* returned, %struct.State* nocapture readonly dereferenceable(3376), i64* nocapture, i64)  {
  %5 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  %6 = load i8, i8* %5, align 1
  %7 = icmp eq i8 %6, 0
  %8 = inttoptr i64 %3 to i64*
  %9 = load i64, i64* %8
  %10 = load i64, i64* %2, align 8
  %11 = select i1 %7, i64 %9, i64 %10
  store i64 %11, i64* %2, align 8
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline norecurse nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L6CMOVNZI3RnWIhE2RnIhEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* readnone returned, %struct.State* nocapture readonly dereferenceable(3376), i8* nocapture, i64)  {
  %5 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  %6 = load i8, i8* %5, align 1
  %7 = icmp eq i8 %6, 0
  %8 = trunc i64 %3 to i8
  %9 = load i8, i8* %2, align 1
  %10 = select i1 %7, i8 %8, i8 %9
  store i8 %10, i8* %2, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline norecurse nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L6CMOVNZI3RnWItE2RnItEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* readnone returned, %struct.State* nocapture readonly dereferenceable(3376), i16* nocapture, i64)  {
  %5 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  %6 = load i8, i8* %5, align 1
  %7 = icmp eq i8 %6, 0
  %8 = trunc i64 %3 to i16
  %9 = load i16, i16* %2, align 2
  %10 = select i1 %7, i16 %8, i16 %9
  store i16 %10, i16* %2, align 2
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline norecurse nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L6CMOVNZI3RnWImE2RnIjEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* readnone returned, %struct.State* nocapture readonly dereferenceable(3376), i64* nocapture, i64)  {
  %5 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  %6 = load i8, i8* %5, align 1
  %7 = icmp eq i8 %6, 0
  %8 = load i64, i64* %2, align 8
  %9 = select i1 %7, i64 %3, i64 %8
  %10 = and i64 %9, 4294967295
  store i64 %10, i64* %2, align 8
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline norecurse nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L6CMOVNZI3RnWImE2RnImEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* readnone returned, %struct.State* nocapture readonly dereferenceable(3376), i64* nocapture, i64)  {
  %5 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  %6 = load i8, i8* %5, align 1
  %7 = icmp eq i8 %6, 0
  %8 = load i64, i64* %2, align 8
  %9 = select i1 %7, i64 %3, i64 %8
  store i64 %9, i64* %2, align 8
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L6CMOVNSI3RnWIhE2MnIhEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* returned, %struct.State* nocapture readonly dereferenceable(3376), i8* nocapture, i64)  {
  %5 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  %6 = load i8, i8* %5, align 1
  %7 = icmp eq i8 %6, 0
  %8 = inttoptr i64 %3 to i8*
  %9 = load i8, i8* %8
  %10 = load i8, i8* %2, align 1
  %11 = select i1 %7, i8 %9, i8 %10
  store i8 %11, i8* %2, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L6CMOVNSI3RnWItE2MnItEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* returned, %struct.State* nocapture readonly dereferenceable(3376), i16* nocapture, i64)  {
  %5 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  %6 = load i8, i8* %5, align 1
  %7 = icmp eq i8 %6, 0
  %8 = inttoptr i64 %3 to i16*
  %9 = load i16, i16* %8
  %10 = load i16, i16* %2, align 2
  %11 = select i1 %7, i16 %9, i16 %10
  store i16 %11, i16* %2, align 2
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L6CMOVNSI3RnWImE2MnIjEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* returned, %struct.State* nocapture readonly dereferenceable(3376), i64* nocapture, i64)  {
  %5 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  %6 = load i8, i8* %5, align 1
  %7 = icmp eq i8 %6, 0
  %8 = inttoptr i64 %3 to i32*
  %9 = load i32, i32* %8
  %10 = load i64, i64* %2, align 8
  %11 = trunc i64 %10 to i32
  %12 = select i1 %7, i32 %9, i32 %11
  %13 = zext i32 %12 to i64
  store i64 %13, i64* %2, align 8
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L6CMOVNSI3RnWImE2MnImEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* returned, %struct.State* nocapture readonly dereferenceable(3376), i64* nocapture, i64)  {
  %5 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  %6 = load i8, i8* %5, align 1
  %7 = icmp eq i8 %6, 0
  %8 = inttoptr i64 %3 to i64*
  %9 = load i64, i64* %8
  %10 = load i64, i64* %2, align 8
  %11 = select i1 %7, i64 %9, i64 %10
  store i64 %11, i64* %2, align 8
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline norecurse nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L6CMOVNSI3RnWIhE2RnIhEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* readnone returned, %struct.State* nocapture readonly dereferenceable(3376), i8* nocapture, i64)  {
  %5 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  %6 = load i8, i8* %5, align 1
  %7 = icmp eq i8 %6, 0
  %8 = trunc i64 %3 to i8
  %9 = load i8, i8* %2, align 1
  %10 = select i1 %7, i8 %8, i8 %9
  store i8 %10, i8* %2, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline norecurse nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L6CMOVNSI3RnWItE2RnItEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* readnone returned, %struct.State* nocapture readonly dereferenceable(3376), i16* nocapture, i64)  {
  %5 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  %6 = load i8, i8* %5, align 1
  %7 = icmp eq i8 %6, 0
  %8 = trunc i64 %3 to i16
  %9 = load i16, i16* %2, align 2
  %10 = select i1 %7, i16 %8, i16 %9
  store i16 %10, i16* %2, align 2
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline norecurse nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L6CMOVNSI3RnWImE2RnIjEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* readnone returned, %struct.State* nocapture readonly dereferenceable(3376), i64* nocapture, i64)  {
  %5 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  %6 = load i8, i8* %5, align 1
  %7 = icmp eq i8 %6, 0
  %8 = load i64, i64* %2, align 8
  %9 = select i1 %7, i64 %3, i64 %8
  %10 = and i64 %9, 4294967295
  store i64 %10, i64* %2, align 8
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline norecurse nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L6CMOVNSI3RnWImE2RnImEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* readnone returned, %struct.State* nocapture readonly dereferenceable(3376), i64* nocapture, i64)  {
  %5 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  %6 = load i8, i8* %5, align 1
  %7 = icmp eq i8 %6, 0
  %8 = load i64, i64* %2, align 8
  %9 = select i1 %7, i64 %3, i64 %8
  store i64 %9, i64* %2, align 8
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L6CMOVNOI3RnWIhE2MnIhEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* returned, %struct.State* nocapture readonly dereferenceable(3376), i8* nocapture, i64)  {
  %5 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  %6 = load i8, i8* %5, align 1
  %7 = icmp eq i8 %6, 0
  %8 = inttoptr i64 %3 to i8*
  %9 = load i8, i8* %8
  %10 = load i8, i8* %2, align 1
  %11 = select i1 %7, i8 %9, i8 %10
  store i8 %11, i8* %2, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L6CMOVNOI3RnWItE2MnItEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* returned, %struct.State* nocapture readonly dereferenceable(3376), i16* nocapture, i64)  {
  %5 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  %6 = load i8, i8* %5, align 1
  %7 = icmp eq i8 %6, 0
  %8 = inttoptr i64 %3 to i16*
  %9 = load i16, i16* %8
  %10 = load i16, i16* %2, align 2
  %11 = select i1 %7, i16 %9, i16 %10
  store i16 %11, i16* %2, align 2
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L6CMOVNOI3RnWImE2MnIjEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* returned, %struct.State* nocapture readonly dereferenceable(3376), i64* nocapture, i64)  {
  %5 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  %6 = load i8, i8* %5, align 1
  %7 = icmp eq i8 %6, 0
  %8 = inttoptr i64 %3 to i32*
  %9 = load i32, i32* %8
  %10 = load i64, i64* %2, align 8
  %11 = trunc i64 %10 to i32
  %12 = select i1 %7, i32 %9, i32 %11
  %13 = zext i32 %12 to i64
  store i64 %13, i64* %2, align 8
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L6CMOVNOI3RnWImE2MnImEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* returned, %struct.State* nocapture readonly dereferenceable(3376), i64* nocapture, i64)  {
  %5 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  %6 = load i8, i8* %5, align 1
  %7 = icmp eq i8 %6, 0
  %8 = inttoptr i64 %3 to i64*
  %9 = load i64, i64* %8
  %10 = load i64, i64* %2, align 8
  %11 = select i1 %7, i64 %9, i64 %10
  store i64 %11, i64* %2, align 8
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline norecurse nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L6CMOVNOI3RnWIhE2RnIhEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* readnone returned, %struct.State* nocapture readonly dereferenceable(3376), i8* nocapture, i64)  {
  %5 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  %6 = load i8, i8* %5, align 1
  %7 = icmp eq i8 %6, 0
  %8 = trunc i64 %3 to i8
  %9 = load i8, i8* %2, align 1
  %10 = select i1 %7, i8 %8, i8 %9
  store i8 %10, i8* %2, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline norecurse nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L6CMOVNOI3RnWItE2RnItEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* readnone returned, %struct.State* nocapture readonly dereferenceable(3376), i16* nocapture, i64)  {
  %5 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  %6 = load i8, i8* %5, align 1
  %7 = icmp eq i8 %6, 0
  %8 = trunc i64 %3 to i16
  %9 = load i16, i16* %2, align 2
  %10 = select i1 %7, i16 %8, i16 %9
  store i16 %10, i16* %2, align 2
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline norecurse nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L6CMOVNOI3RnWImE2RnIjEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* readnone returned, %struct.State* nocapture readonly dereferenceable(3376), i64* nocapture, i64)  {
  %5 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  %6 = load i8, i8* %5, align 1
  %7 = icmp eq i8 %6, 0
  %8 = load i64, i64* %2, align 8
  %9 = select i1 %7, i64 %3, i64 %8
  %10 = and i64 %9, 4294967295
  store i64 %10, i64* %2, align 8
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline norecurse nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L6CMOVNOI3RnWImE2RnImEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* readnone returned, %struct.State* nocapture readonly dereferenceable(3376), i64* nocapture, i64)  {
  %5 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  %6 = load i8, i8* %5, align 1
  %7 = icmp eq i8 %6, 0
  %8 = load i64, i64* %2, align 8
  %9 = select i1 %7, i64 %3, i64 %8
  store i64 %9, i64* %2, align 8
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L6CMOVNLI3RnWIhE2MnIhEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* returned, %struct.State* nocapture readonly dereferenceable(3376), i8* nocapture, i64)  {
  %5 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  %6 = load i8, i8* %5, align 1
  %7 = icmp ne i8 %6, 0
  %8 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  %9 = load i8, i8* %8, align 1
  %10 = icmp ne i8 %9, 0
  %11 = xor i1 %7, %10
  %12 = inttoptr i64 %3 to i8*
  %13 = load i8, i8* %12
  %14 = load i8, i8* %2, align 1
  %15 = select i1 %11, i8 %14, i8 %13
  store i8 %15, i8* %2, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L6CMOVNLI3RnWItE2MnItEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* returned, %struct.State* nocapture readonly dereferenceable(3376), i16* nocapture, i64)  {
  %5 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  %6 = load i8, i8* %5, align 1
  %7 = icmp ne i8 %6, 0
  %8 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  %9 = load i8, i8* %8, align 1
  %10 = icmp ne i8 %9, 0
  %11 = xor i1 %7, %10
  %12 = inttoptr i64 %3 to i16*
  %13 = load i16, i16* %12
  %14 = load i16, i16* %2, align 2
  %15 = select i1 %11, i16 %14, i16 %13
  store i16 %15, i16* %2, align 2
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L6CMOVNLI3RnWImE2MnIjEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* returned, %struct.State* nocapture readonly dereferenceable(3376), i64* nocapture, i64)  {
  %5 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  %6 = load i8, i8* %5, align 1
  %7 = icmp ne i8 %6, 0
  %8 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  %9 = load i8, i8* %8, align 1
  %10 = icmp ne i8 %9, 0
  %11 = xor i1 %7, %10
  %12 = inttoptr i64 %3 to i32*
  %13 = load i32, i32* %12
  %14 = load i64, i64* %2, align 8
  %15 = trunc i64 %14 to i32
  %16 = select i1 %11, i32 %15, i32 %13
  %17 = zext i32 %16 to i64
  store i64 %17, i64* %2, align 8
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L6CMOVNLI3RnWImE2MnImEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* returned, %struct.State* nocapture readonly dereferenceable(3376), i64* nocapture, i64)  {
  %5 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  %6 = load i8, i8* %5, align 1
  %7 = icmp ne i8 %6, 0
  %8 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  %9 = load i8, i8* %8, align 1
  %10 = icmp ne i8 %9, 0
  %11 = xor i1 %7, %10
  %12 = inttoptr i64 %3 to i64*
  %13 = load i64, i64* %12
  %14 = load i64, i64* %2, align 8
  %15 = select i1 %11, i64 %14, i64 %13
  store i64 %15, i64* %2, align 8
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline norecurse nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L6CMOVNLI3RnWIhE2RnIhEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* readnone returned, %struct.State* nocapture readonly dereferenceable(3376), i8* nocapture, i64)  {
  %5 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  %6 = load i8, i8* %5, align 1
  %7 = icmp ne i8 %6, 0
  %8 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  %9 = load i8, i8* %8, align 1
  %10 = icmp ne i8 %9, 0
  %11 = xor i1 %7, %10
  %12 = trunc i64 %3 to i8
  %13 = load i8, i8* %2, align 1
  %14 = select i1 %11, i8 %13, i8 %12
  store i8 %14, i8* %2, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline norecurse nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L6CMOVNLI3RnWItE2RnItEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* readnone returned, %struct.State* nocapture readonly dereferenceable(3376), i16* nocapture, i64)  {
  %5 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  %6 = load i8, i8* %5, align 1
  %7 = icmp ne i8 %6, 0
  %8 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  %9 = load i8, i8* %8, align 1
  %10 = icmp ne i8 %9, 0
  %11 = xor i1 %7, %10
  %12 = trunc i64 %3 to i16
  %13 = load i16, i16* %2, align 2
  %14 = select i1 %11, i16 %13, i16 %12
  store i16 %14, i16* %2, align 2
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline norecurse nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L6CMOVNLI3RnWImE2RnIjEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* readnone returned, %struct.State* nocapture readonly dereferenceable(3376), i64* nocapture, i64)  {
  %5 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  %6 = load i8, i8* %5, align 1
  %7 = icmp ne i8 %6, 0
  %8 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  %9 = load i8, i8* %8, align 1
  %10 = icmp ne i8 %9, 0
  %11 = xor i1 %7, %10
  %12 = load i64, i64* %2, align 8
  %13 = select i1 %11, i64 %12, i64 %3
  %14 = and i64 %13, 4294967295
  store i64 %14, i64* %2, align 8
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline norecurse nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L6CMOVNLI3RnWImE2RnImEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* readnone returned, %struct.State* nocapture readonly dereferenceable(3376), i64* nocapture, i64)  {
  %5 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  %6 = load i8, i8* %5, align 1
  %7 = icmp ne i8 %6, 0
  %8 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  %9 = load i8, i8* %8, align 1
  %10 = icmp ne i8 %9, 0
  %11 = xor i1 %7, %10
  %12 = load i64, i64* %2, align 8
  %13 = select i1 %11, i64 %12, i64 %3
  store i64 %13, i64* %2, align 8
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L6CMOVNBI3RnWIhE2MnIhEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* returned, %struct.State* nocapture readonly dereferenceable(3376), i8* nocapture, i64)  {
  %5 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  %6 = load i8, i8* %5, align 1
  %7 = icmp eq i8 %6, 0
  %8 = inttoptr i64 %3 to i8*
  %9 = load i8, i8* %8
  %10 = load i8, i8* %2, align 1
  %11 = select i1 %7, i8 %9, i8 %10
  store i8 %11, i8* %2, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L6CMOVNBI3RnWItE2MnItEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* returned, %struct.State* nocapture readonly dereferenceable(3376), i16* nocapture, i64)  {
  %5 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  %6 = load i8, i8* %5, align 1
  %7 = icmp eq i8 %6, 0
  %8 = inttoptr i64 %3 to i16*
  %9 = load i16, i16* %8
  %10 = load i16, i16* %2, align 2
  %11 = select i1 %7, i16 %9, i16 %10
  store i16 %11, i16* %2, align 2
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L6CMOVNBI3RnWImE2MnIjEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* returned, %struct.State* nocapture readonly dereferenceable(3376), i64* nocapture, i64)  {
  %5 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  %6 = load i8, i8* %5, align 1
  %7 = icmp eq i8 %6, 0
  %8 = inttoptr i64 %3 to i32*
  %9 = load i32, i32* %8
  %10 = load i64, i64* %2, align 8
  %11 = trunc i64 %10 to i32
  %12 = select i1 %7, i32 %9, i32 %11
  %13 = zext i32 %12 to i64
  store i64 %13, i64* %2, align 8
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L6CMOVNBI3RnWImE2MnImEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* returned, %struct.State* nocapture readonly dereferenceable(3376), i64* nocapture, i64)  {
  %5 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  %6 = load i8, i8* %5, align 1
  %7 = icmp eq i8 %6, 0
  %8 = inttoptr i64 %3 to i64*
  %9 = load i64, i64* %8
  %10 = load i64, i64* %2, align 8
  %11 = select i1 %7, i64 %9, i64 %10
  store i64 %11, i64* %2, align 8
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline norecurse nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L6CMOVNBI3RnWIhE2RnIhEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* readnone returned, %struct.State* nocapture readonly dereferenceable(3376), i8* nocapture, i64)  {
  %5 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  %6 = load i8, i8* %5, align 1
  %7 = icmp eq i8 %6, 0
  %8 = trunc i64 %3 to i8
  %9 = load i8, i8* %2, align 1
  %10 = select i1 %7, i8 %8, i8 %9
  store i8 %10, i8* %2, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline norecurse nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L6CMOVNBI3RnWItE2RnItEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* readnone returned, %struct.State* nocapture readonly dereferenceable(3376), i16* nocapture, i64)  {
  %5 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  %6 = load i8, i8* %5, align 1
  %7 = icmp eq i8 %6, 0
  %8 = trunc i64 %3 to i16
  %9 = load i16, i16* %2, align 2
  %10 = select i1 %7, i16 %8, i16 %9
  store i16 %10, i16* %2, align 2
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline norecurse nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L6CMOVNBI3RnWImE2RnIjEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* readnone returned, %struct.State* nocapture readonly dereferenceable(3376), i64* nocapture, i64)  {
  %5 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  %6 = load i8, i8* %5, align 1
  %7 = icmp eq i8 %6, 0
  %8 = load i64, i64* %2, align 8
  %9 = select i1 %7, i64 %3, i64 %8
  %10 = and i64 %9, 4294967295
  store i64 %10, i64* %2, align 8
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline norecurse nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L6CMOVNBI3RnWImE2RnImEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* readnone returned, %struct.State* nocapture readonly dereferenceable(3376), i64* nocapture, i64)  {
  %5 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  %6 = load i8, i8* %5, align 1
  %7 = icmp eq i8 %6, 0
  %8 = load i64, i64* %2, align 8
  %9 = select i1 %7, i64 %3, i64 %8
  store i64 %9, i64* %2, align 8
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L5CMOVOI3RnWIhE2MnIhEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* returned, %struct.State* nocapture readonly dereferenceable(3376), i8* nocapture, i64)  {
  %5 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  %6 = load i8, i8* %5, align 1
  %7 = icmp ne i8 %6, 0
  %8 = inttoptr i64 %3 to i8*
  %9 = load i8, i8* %8
  %10 = load i8, i8* %2, align 1
  %11 = select i1 %7, i8 %9, i8 %10
  store i8 %11, i8* %2, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L5CMOVOI3RnWItE2MnItEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* returned, %struct.State* nocapture readonly dereferenceable(3376), i16* nocapture, i64)  {
  %5 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  %6 = load i8, i8* %5, align 1
  %7 = icmp ne i8 %6, 0
  %8 = inttoptr i64 %3 to i16*
  %9 = load i16, i16* %8
  %10 = load i16, i16* %2, align 2
  %11 = select i1 %7, i16 %9, i16 %10
  store i16 %11, i16* %2, align 2
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L5CMOVOI3RnWImE2MnIjEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* returned, %struct.State* nocapture readonly dereferenceable(3376), i64* nocapture, i64)  {
  %5 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  %6 = load i8, i8* %5, align 1
  %7 = icmp ne i8 %6, 0
  %8 = inttoptr i64 %3 to i32*
  %9 = load i32, i32* %8
  %10 = load i64, i64* %2, align 8
  %11 = trunc i64 %10 to i32
  %12 = select i1 %7, i32 %9, i32 %11
  %13 = zext i32 %12 to i64
  store i64 %13, i64* %2, align 8
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L5CMOVOI3RnWImE2MnImEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* returned, %struct.State* nocapture readonly dereferenceable(3376), i64* nocapture, i64)  {
  %5 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  %6 = load i8, i8* %5, align 1
  %7 = icmp ne i8 %6, 0
  %8 = inttoptr i64 %3 to i64*
  %9 = load i64, i64* %8
  %10 = load i64, i64* %2, align 8
  %11 = select i1 %7, i64 %9, i64 %10
  store i64 %11, i64* %2, align 8
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline norecurse nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L5CMOVOI3RnWIhE2RnIhEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* readnone returned, %struct.State* nocapture readonly dereferenceable(3376), i8* nocapture, i64)  {
  %5 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  %6 = load i8, i8* %5, align 1
  %7 = icmp ne i8 %6, 0
  %8 = trunc i64 %3 to i8
  %9 = load i8, i8* %2, align 1
  %10 = select i1 %7, i8 %8, i8 %9
  store i8 %10, i8* %2, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline norecurse nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L5CMOVOI3RnWItE2RnItEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* readnone returned, %struct.State* nocapture readonly dereferenceable(3376), i16* nocapture, i64)  {
  %5 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  %6 = load i8, i8* %5, align 1
  %7 = icmp ne i8 %6, 0
  %8 = trunc i64 %3 to i16
  %9 = load i16, i16* %2, align 2
  %10 = select i1 %7, i16 %8, i16 %9
  store i16 %10, i16* %2, align 2
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline norecurse nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L5CMOVOI3RnWImE2RnIjEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* readnone returned, %struct.State* nocapture readonly dereferenceable(3376), i64* nocapture, i64)  {
  %5 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  %6 = load i8, i8* %5, align 1
  %7 = icmp ne i8 %6, 0
  %8 = load i64, i64* %2, align 8
  %9 = select i1 %7, i64 %3, i64 %8
  %10 = and i64 %9, 4294967295
  store i64 %10, i64* %2, align 8
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline norecurse nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L5CMOVOI3RnWImE2RnImEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* readnone returned, %struct.State* nocapture readonly dereferenceable(3376), i64* nocapture, i64)  {
  %5 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  %6 = load i8, i8* %5, align 1
  %7 = icmp ne i8 %6, 0
  %8 = load i64, i64* %2, align 8
  %9 = select i1 %7, i64 %3, i64 %8
  store i64 %9, i64* %2, align 8
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L5CMOVZI3RnWIhE2MnIhEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* returned, %struct.State* nocapture readonly dereferenceable(3376), i8* nocapture, i64)  {
  %5 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  %6 = load i8, i8* %5, align 1
  %7 = icmp ne i8 %6, 0
  %8 = inttoptr i64 %3 to i8*
  %9 = load i8, i8* %8
  %10 = load i8, i8* %2, align 1
  %11 = select i1 %7, i8 %9, i8 %10
  store i8 %11, i8* %2, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L5CMOVZI3RnWItE2MnItEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* returned, %struct.State* nocapture readonly dereferenceable(3376), i16* nocapture, i64)  {
  %5 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  %6 = load i8, i8* %5, align 1
  %7 = icmp ne i8 %6, 0
  %8 = inttoptr i64 %3 to i16*
  %9 = load i16, i16* %8
  %10 = load i16, i16* %2, align 2
  %11 = select i1 %7, i16 %9, i16 %10
  store i16 %11, i16* %2, align 2
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L5CMOVZI3RnWImE2MnIjEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* returned, %struct.State* nocapture readonly dereferenceable(3376), i64* nocapture, i64)  {
  %5 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  %6 = load i8, i8* %5, align 1
  %7 = icmp ne i8 %6, 0
  %8 = inttoptr i64 %3 to i32*
  %9 = load i32, i32* %8
  %10 = load i64, i64* %2, align 8
  %11 = trunc i64 %10 to i32
  %12 = select i1 %7, i32 %9, i32 %11
  %13 = zext i32 %12 to i64
  store i64 %13, i64* %2, align 8
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L5CMOVZI3RnWImE2MnImEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* returned, %struct.State* nocapture readonly dereferenceable(3376), i64* nocapture, i64)  {
  %5 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  %6 = load i8, i8* %5, align 1
  %7 = icmp ne i8 %6, 0
  %8 = inttoptr i64 %3 to i64*
  %9 = load i64, i64* %8
  %10 = load i64, i64* %2, align 8
  %11 = select i1 %7, i64 %9, i64 %10
  store i64 %11, i64* %2, align 8
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline norecurse nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L5CMOVZI3RnWIhE2RnIhEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* readnone returned, %struct.State* nocapture readonly dereferenceable(3376), i8* nocapture, i64)  {
  %5 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  %6 = load i8, i8* %5, align 1
  %7 = icmp ne i8 %6, 0
  %8 = trunc i64 %3 to i8
  %9 = load i8, i8* %2, align 1
  %10 = select i1 %7, i8 %8, i8 %9
  store i8 %10, i8* %2, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline norecurse nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L5CMOVZI3RnWItE2RnItEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* readnone returned, %struct.State* nocapture readonly dereferenceable(3376), i16* nocapture, i64)  {
  %5 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  %6 = load i8, i8* %5, align 1
  %7 = icmp ne i8 %6, 0
  %8 = trunc i64 %3 to i16
  %9 = load i16, i16* %2, align 2
  %10 = select i1 %7, i16 %8, i16 %9
  store i16 %10, i16* %2, align 2
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline norecurse nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L5CMOVZI3RnWImE2RnIjEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* readnone returned, %struct.State* nocapture readonly dereferenceable(3376), i64* nocapture, i64)  {
  %5 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  %6 = load i8, i8* %5, align 1
  %7 = icmp ne i8 %6, 0
  %8 = load i64, i64* %2, align 8
  %9 = select i1 %7, i64 %3, i64 %8
  %10 = and i64 %9, 4294967295
  store i64 %10, i64* %2, align 8
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline norecurse nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L5CMOVZI3RnWImE2RnImEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* readnone returned, %struct.State* nocapture readonly dereferenceable(3376), i64* nocapture, i64)  {
  %5 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  %6 = load i8, i8* %5, align 1
  %7 = icmp ne i8 %6, 0
  %8 = load i64, i64* %2, align 8
  %9 = select i1 %7, i64 %3, i64 %8
  store i64 %9, i64* %2, align 8
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L5CMOVPI3RnWIhE2MnIhEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* returned, %struct.State* nocapture readonly dereferenceable(3376), i8* nocapture, i64)  {
  %5 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  %6 = load i8, i8* %5, align 1
  %7 = icmp ne i8 %6, 0
  %8 = inttoptr i64 %3 to i8*
  %9 = load i8, i8* %8
  %10 = load i8, i8* %2, align 1
  %11 = select i1 %7, i8 %9, i8 %10
  store i8 %11, i8* %2, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L5CMOVPI3RnWItE2MnItEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* returned, %struct.State* nocapture readonly dereferenceable(3376), i16* nocapture, i64)  {
  %5 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  %6 = load i8, i8* %5, align 1
  %7 = icmp ne i8 %6, 0
  %8 = inttoptr i64 %3 to i16*
  %9 = load i16, i16* %8
  %10 = load i16, i16* %2, align 2
  %11 = select i1 %7, i16 %9, i16 %10
  store i16 %11, i16* %2, align 2
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L5CMOVPI3RnWImE2MnIjEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* returned, %struct.State* nocapture readonly dereferenceable(3376), i64* nocapture, i64)  {
  %5 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  %6 = load i8, i8* %5, align 1
  %7 = icmp ne i8 %6, 0
  %8 = inttoptr i64 %3 to i32*
  %9 = load i32, i32* %8
  %10 = load i64, i64* %2, align 8
  %11 = trunc i64 %10 to i32
  %12 = select i1 %7, i32 %9, i32 %11
  %13 = zext i32 %12 to i64
  store i64 %13, i64* %2, align 8
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L5CMOVPI3RnWImE2MnImEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* returned, %struct.State* nocapture readonly dereferenceable(3376), i64* nocapture, i64)  {
  %5 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  %6 = load i8, i8* %5, align 1
  %7 = icmp ne i8 %6, 0
  %8 = inttoptr i64 %3 to i64*
  %9 = load i64, i64* %8
  %10 = load i64, i64* %2, align 8
  %11 = select i1 %7, i64 %9, i64 %10
  store i64 %11, i64* %2, align 8
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline norecurse nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L5CMOVPI3RnWIhE2RnIhEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* readnone returned, %struct.State* nocapture readonly dereferenceable(3376), i8* nocapture, i64)  {
  %5 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  %6 = load i8, i8* %5, align 1
  %7 = icmp ne i8 %6, 0
  %8 = trunc i64 %3 to i8
  %9 = load i8, i8* %2, align 1
  %10 = select i1 %7, i8 %8, i8 %9
  store i8 %10, i8* %2, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline norecurse nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L5CMOVPI3RnWItE2RnItEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* readnone returned, %struct.State* nocapture readonly dereferenceable(3376), i16* nocapture, i64)  {
  %5 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  %6 = load i8, i8* %5, align 1
  %7 = icmp ne i8 %6, 0
  %8 = trunc i64 %3 to i16
  %9 = load i16, i16* %2, align 2
  %10 = select i1 %7, i16 %8, i16 %9
  store i16 %10, i16* %2, align 2
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline norecurse nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L5CMOVPI3RnWImE2RnIjEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* readnone returned, %struct.State* nocapture readonly dereferenceable(3376), i64* nocapture, i64)  {
  %5 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  %6 = load i8, i8* %5, align 1
  %7 = icmp ne i8 %6, 0
  %8 = load i64, i64* %2, align 8
  %9 = select i1 %7, i64 %3, i64 %8
  %10 = and i64 %9, 4294967295
  store i64 %10, i64* %2, align 8
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline norecurse nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L5CMOVPI3RnWImE2RnImEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* readnone returned, %struct.State* nocapture readonly dereferenceable(3376), i64* nocapture, i64)  {
  %5 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  %6 = load i8, i8* %5, align 1
  %7 = icmp ne i8 %6, 0
  %8 = load i64, i64* %2, align 8
  %9 = select i1 %7, i64 %3, i64 %8
  store i64 %9, i64* %2, align 8
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L5CMOVSI3RnWIhE2MnIhEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* returned, %struct.State* nocapture readonly dereferenceable(3376), i8* nocapture, i64)  {
  %5 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  %6 = load i8, i8* %5, align 1
  %7 = icmp ne i8 %6, 0
  %8 = inttoptr i64 %3 to i8*
  %9 = load i8, i8* %8
  %10 = load i8, i8* %2, align 1
  %11 = select i1 %7, i8 %9, i8 %10
  store i8 %11, i8* %2, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L5CMOVSI3RnWItE2MnItEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* returned, %struct.State* nocapture readonly dereferenceable(3376), i16* nocapture, i64)  {
  %5 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  %6 = load i8, i8* %5, align 1
  %7 = icmp ne i8 %6, 0
  %8 = inttoptr i64 %3 to i16*
  %9 = load i16, i16* %8
  %10 = load i16, i16* %2, align 2
  %11 = select i1 %7, i16 %9, i16 %10
  store i16 %11, i16* %2, align 2
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L5CMOVSI3RnWImE2MnIjEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* returned, %struct.State* nocapture readonly dereferenceable(3376), i64* nocapture, i64)  {
  %5 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  %6 = load i8, i8* %5, align 1
  %7 = icmp ne i8 %6, 0
  %8 = inttoptr i64 %3 to i32*
  %9 = load i32, i32* %8
  %10 = load i64, i64* %2, align 8
  %11 = trunc i64 %10 to i32
  %12 = select i1 %7, i32 %9, i32 %11
  %13 = zext i32 %12 to i64
  store i64 %13, i64* %2, align 8
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L5CMOVSI3RnWImE2MnImEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* returned, %struct.State* nocapture readonly dereferenceable(3376), i64* nocapture, i64)  {
  %5 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  %6 = load i8, i8* %5, align 1
  %7 = icmp ne i8 %6, 0
  %8 = inttoptr i64 %3 to i64*
  %9 = load i64, i64* %8
  %10 = load i64, i64* %2, align 8
  %11 = select i1 %7, i64 %9, i64 %10
  store i64 %11, i64* %2, align 8
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline norecurse nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L5CMOVSI3RnWIhE2RnIhEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* readnone returned, %struct.State* nocapture readonly dereferenceable(3376), i8* nocapture, i64)  {
  %5 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  %6 = load i8, i8* %5, align 1
  %7 = icmp ne i8 %6, 0
  %8 = trunc i64 %3 to i8
  %9 = load i8, i8* %2, align 1
  %10 = select i1 %7, i8 %8, i8 %9
  store i8 %10, i8* %2, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline norecurse nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L5CMOVSI3RnWItE2RnItEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* readnone returned, %struct.State* nocapture readonly dereferenceable(3376), i16* nocapture, i64)  {
  %5 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  %6 = load i8, i8* %5, align 1
  %7 = icmp ne i8 %6, 0
  %8 = trunc i64 %3 to i16
  %9 = load i16, i16* %2, align 2
  %10 = select i1 %7, i16 %8, i16 %9
  store i16 %10, i16* %2, align 2
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline norecurse nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L5CMOVSI3RnWImE2RnIjEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* readnone returned, %struct.State* nocapture readonly dereferenceable(3376), i64* nocapture, i64)  {
  %5 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  %6 = load i8, i8* %5, align 1
  %7 = icmp ne i8 %6, 0
  %8 = load i64, i64* %2, align 8
  %9 = select i1 %7, i64 %3, i64 %8
  %10 = and i64 %9, 4294967295
  store i64 %10, i64* %2, align 8
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline norecurse nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L5CMOVSI3RnWImE2RnImEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* readnone returned, %struct.State* nocapture readonly dereferenceable(3376), i64* nocapture, i64)  {
  %5 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  %6 = load i8, i8* %5, align 1
  %7 = icmp ne i8 %6, 0
  %8 = load i64, i64* %2, align 8
  %9 = select i1 %7, i64 %3, i64 %8
  store i64 %9, i64* %2, align 8
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L5CMOVLI3RnWIhE2MnIhEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* returned, %struct.State* nocapture readonly dereferenceable(3376), i8* nocapture, i64)  {
  %5 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  %6 = load i8, i8* %5, align 1
  %7 = icmp ne i8 %6, 0
  %8 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  %9 = load i8, i8* %8, align 1
  %10 = icmp ne i8 %9, 0
  %11 = xor i1 %7, %10
  %12 = inttoptr i64 %3 to i8*
  %13 = load i8, i8* %12
  %14 = load i8, i8* %2, align 1
  %15 = select i1 %11, i8 %13, i8 %14
  store i8 %15, i8* %2, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L5CMOVLI3RnWItE2MnItEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* returned, %struct.State* nocapture readonly dereferenceable(3376), i16* nocapture, i64)  {
  %5 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  %6 = load i8, i8* %5, align 1
  %7 = icmp ne i8 %6, 0
  %8 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  %9 = load i8, i8* %8, align 1
  %10 = icmp ne i8 %9, 0
  %11 = xor i1 %7, %10
  %12 = inttoptr i64 %3 to i16*
  %13 = load i16, i16* %12
  %14 = load i16, i16* %2, align 2
  %15 = select i1 %11, i16 %13, i16 %14
  store i16 %15, i16* %2, align 2
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L5CMOVLI3RnWImE2MnIjEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* returned, %struct.State* nocapture readonly dereferenceable(3376), i64* nocapture, i64)  {
  %5 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  %6 = load i8, i8* %5, align 1
  %7 = icmp ne i8 %6, 0
  %8 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  %9 = load i8, i8* %8, align 1
  %10 = icmp ne i8 %9, 0
  %11 = xor i1 %7, %10
  %12 = inttoptr i64 %3 to i32*
  %13 = load i32, i32* %12
  %14 = load i64, i64* %2, align 8
  %15 = trunc i64 %14 to i32
  %16 = select i1 %11, i32 %13, i32 %15
  %17 = zext i32 %16 to i64
  store i64 %17, i64* %2, align 8
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L5CMOVLI3RnWImE2MnImEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* returned, %struct.State* nocapture readonly dereferenceable(3376), i64* nocapture, i64)  {
  %5 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  %6 = load i8, i8* %5, align 1
  %7 = icmp ne i8 %6, 0
  %8 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  %9 = load i8, i8* %8, align 1
  %10 = icmp ne i8 %9, 0
  %11 = xor i1 %7, %10
  %12 = inttoptr i64 %3 to i64*
  %13 = load i64, i64* %12
  %14 = load i64, i64* %2, align 8
  %15 = select i1 %11, i64 %13, i64 %14
  store i64 %15, i64* %2, align 8
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline norecurse nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L5CMOVLI3RnWIhE2RnIhEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* readnone returned, %struct.State* nocapture readonly dereferenceable(3376), i8* nocapture, i64)  {
  %5 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  %6 = load i8, i8* %5, align 1
  %7 = icmp ne i8 %6, 0
  %8 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  %9 = load i8, i8* %8, align 1
  %10 = icmp ne i8 %9, 0
  %11 = xor i1 %7, %10
  %12 = trunc i64 %3 to i8
  %13 = load i8, i8* %2, align 1
  %14 = select i1 %11, i8 %12, i8 %13
  store i8 %14, i8* %2, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline norecurse nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L5CMOVLI3RnWItE2RnItEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* readnone returned, %struct.State* nocapture readonly dereferenceable(3376), i16* nocapture, i64)  {
  %5 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  %6 = load i8, i8* %5, align 1
  %7 = icmp ne i8 %6, 0
  %8 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  %9 = load i8, i8* %8, align 1
  %10 = icmp ne i8 %9, 0
  %11 = xor i1 %7, %10
  %12 = trunc i64 %3 to i16
  %13 = load i16, i16* %2, align 2
  %14 = select i1 %11, i16 %12, i16 %13
  store i16 %14, i16* %2, align 2
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline norecurse nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L5CMOVLI3RnWImE2RnIjEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* readnone returned, %struct.State* nocapture readonly dereferenceable(3376), i64* nocapture, i64)  {
  %5 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  %6 = load i8, i8* %5, align 1
  %7 = icmp ne i8 %6, 0
  %8 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  %9 = load i8, i8* %8, align 1
  %10 = icmp ne i8 %9, 0
  %11 = xor i1 %7, %10
  %12 = load i64, i64* %2, align 8
  %13 = select i1 %11, i64 %3, i64 %12
  %14 = and i64 %13, 4294967295
  store i64 %14, i64* %2, align 8
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline norecurse nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L5CMOVLI3RnWImE2RnImEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* readnone returned, %struct.State* nocapture readonly dereferenceable(3376), i64* nocapture, i64)  {
  %5 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  %6 = load i8, i8* %5, align 1
  %7 = icmp ne i8 %6, 0
  %8 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  %9 = load i8, i8* %8, align 1
  %10 = icmp ne i8 %9, 0
  %11 = xor i1 %7, %10
  %12 = load i64, i64* %2, align 8
  %13 = select i1 %11, i64 %3, i64 %12
  store i64 %13, i64* %2, align 8
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L5CMOVBI3RnWIhE2MnIhEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* returned, %struct.State* nocapture readonly dereferenceable(3376), i8* nocapture, i64)  {
  %5 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  %6 = load i8, i8* %5, align 1
  %7 = icmp ne i8 %6, 0
  %8 = inttoptr i64 %3 to i8*
  %9 = load i8, i8* %8
  %10 = load i8, i8* %2, align 1
  %11 = select i1 %7, i8 %9, i8 %10
  store i8 %11, i8* %2, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L5CMOVBI3RnWItE2MnItEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* returned, %struct.State* nocapture readonly dereferenceable(3376), i16* nocapture, i64)  {
  %5 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  %6 = load i8, i8* %5, align 1
  %7 = icmp ne i8 %6, 0
  %8 = inttoptr i64 %3 to i16*
  %9 = load i16, i16* %8
  %10 = load i16, i16* %2, align 2
  %11 = select i1 %7, i16 %9, i16 %10
  store i16 %11, i16* %2, align 2
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L5CMOVBI3RnWImE2MnIjEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* returned, %struct.State* nocapture readonly dereferenceable(3376), i64* nocapture, i64)  {
  %5 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  %6 = load i8, i8* %5, align 1
  %7 = icmp ne i8 %6, 0
  %8 = inttoptr i64 %3 to i32*
  %9 = load i32, i32* %8
  %10 = load i64, i64* %2, align 8
  %11 = trunc i64 %10 to i32
  %12 = select i1 %7, i32 %9, i32 %11
  %13 = zext i32 %12 to i64
  store i64 %13, i64* %2, align 8
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L5CMOVBI3RnWImE2MnImEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* returned, %struct.State* nocapture readonly dereferenceable(3376), i64* nocapture, i64)  {
  %5 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  %6 = load i8, i8* %5, align 1
  %7 = icmp ne i8 %6, 0
  %8 = inttoptr i64 %3 to i64*
  %9 = load i64, i64* %8
  %10 = load i64, i64* %2, align 8
  %11 = select i1 %7, i64 %9, i64 %10
  store i64 %11, i64* %2, align 8
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline norecurse nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L5CMOVBI3RnWIhE2RnIhEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* readnone returned, %struct.State* nocapture readonly dereferenceable(3376), i8* nocapture, i64)  {
  %5 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  %6 = load i8, i8* %5, align 1
  %7 = icmp ne i8 %6, 0
  %8 = trunc i64 %3 to i8
  %9 = load i8, i8* %2, align 1
  %10 = select i1 %7, i8 %8, i8 %9
  store i8 %10, i8* %2, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline norecurse nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L5CMOVBI3RnWItE2RnItEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* readnone returned, %struct.State* nocapture readonly dereferenceable(3376), i16* nocapture, i64)  {
  %5 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  %6 = load i8, i8* %5, align 1
  %7 = icmp ne i8 %6, 0
  %8 = trunc i64 %3 to i16
  %9 = load i16, i16* %2, align 2
  %10 = select i1 %7, i16 %8, i16 %9
  store i16 %10, i16* %2, align 2
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline norecurse nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L5CMOVBI3RnWImE2RnIjEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* readnone returned, %struct.State* nocapture readonly dereferenceable(3376), i64* nocapture, i64)  {
  %5 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  %6 = load i8, i8* %5, align 1
  %7 = icmp ne i8 %6, 0
  %8 = load i64, i64* %2, align 8
  %9 = select i1 %7, i64 %3, i64 %8
  %10 = and i64 %9, 4294967295
  store i64 %10, i64* %2, align 8
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline norecurse nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L5CMOVBI3RnWImE2RnImEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* readnone returned, %struct.State* nocapture readonly dereferenceable(3376), i64* nocapture, i64)  {
  %5 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  %6 = load i8, i8* %5, align 1
  %7 = icmp ne i8 %6, 0
  %8 = load i64, i64* %2, align 8
  %9 = select i1 %7, i64 %3, i64 %8
  store i64 %9, i64* %2, align 8
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L7CMOVNBEI3RnWIhE2MnIhEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* returned, %struct.State* nocapture readonly dereferenceable(3376), i8* nocapture, i64)  {
  %5 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  %6 = load i8, i8* %5, align 1
  %7 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  %8 = load i8, i8* %7, align 1
  %9 = or i8 %8, %6
  %10 = icmp eq i8 %9, 0
  %11 = inttoptr i64 %3 to i8*
  %12 = load i8, i8* %11
  %13 = load i8, i8* %2, align 1
  %14 = select i1 %10, i8 %12, i8 %13
  store i8 %14, i8* %2, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L7CMOVNBEI3RnWItE2MnItEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* returned, %struct.State* nocapture readonly dereferenceable(3376), i16* nocapture, i64)  {
  %5 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  %6 = load i8, i8* %5, align 1
  %7 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  %8 = load i8, i8* %7, align 1
  %9 = or i8 %8, %6
  %10 = icmp eq i8 %9, 0
  %11 = inttoptr i64 %3 to i16*
  %12 = load i16, i16* %11
  %13 = load i16, i16* %2, align 2
  %14 = select i1 %10, i16 %12, i16 %13
  store i16 %14, i16* %2, align 2
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L7CMOVNBEI3RnWImE2MnIjEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* returned, %struct.State* nocapture readonly dereferenceable(3376), i64* nocapture, i64)  {
  %5 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  %6 = load i8, i8* %5, align 1
  %7 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  %8 = load i8, i8* %7, align 1
  %9 = or i8 %8, %6
  %10 = icmp eq i8 %9, 0
  %11 = inttoptr i64 %3 to i32*
  %12 = load i32, i32* %11
  %13 = load i64, i64* %2, align 8
  %14 = trunc i64 %13 to i32
  %15 = select i1 %10, i32 %12, i32 %14
  %16 = zext i32 %15 to i64
  store i64 %16, i64* %2, align 8
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L7CMOVNBEI3RnWImE2MnImEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* returned, %struct.State* nocapture readonly dereferenceable(3376), i64* nocapture, i64)  {
  %5 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  %6 = load i8, i8* %5, align 1
  %7 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  %8 = load i8, i8* %7, align 1
  %9 = or i8 %8, %6
  %10 = icmp eq i8 %9, 0
  %11 = inttoptr i64 %3 to i64*
  %12 = load i64, i64* %11
  %13 = load i64, i64* %2, align 8
  %14 = select i1 %10, i64 %12, i64 %13
  store i64 %14, i64* %2, align 8
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline norecurse nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L7CMOVNBEI3RnWIhE2RnIhEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* readnone returned, %struct.State* nocapture readonly dereferenceable(3376), i8* nocapture, i64)  {
  %5 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  %6 = load i8, i8* %5, align 1
  %7 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  %8 = load i8, i8* %7, align 1
  %9 = or i8 %8, %6
  %10 = icmp eq i8 %9, 0
  %11 = trunc i64 %3 to i8
  %12 = load i8, i8* %2, align 1
  %13 = select i1 %10, i8 %11, i8 %12
  store i8 %13, i8* %2, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline norecurse nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L7CMOVNBEI3RnWItE2RnItEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* readnone returned, %struct.State* nocapture readonly dereferenceable(3376), i16* nocapture, i64)  {
  %5 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  %6 = load i8, i8* %5, align 1
  %7 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  %8 = load i8, i8* %7, align 1
  %9 = or i8 %8, %6
  %10 = icmp eq i8 %9, 0
  %11 = trunc i64 %3 to i16
  %12 = load i16, i16* %2, align 2
  %13 = select i1 %10, i16 %11, i16 %12
  store i16 %13, i16* %2, align 2
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline norecurse nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L7CMOVNBEI3RnWImE2RnIjEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* readnone returned, %struct.State* nocapture readonly dereferenceable(3376), i64* nocapture, i64)  {
  %5 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  %6 = load i8, i8* %5, align 1
  %7 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  %8 = load i8, i8* %7, align 1
  %9 = or i8 %8, %6
  %10 = icmp eq i8 %9, 0
  %11 = load i64, i64* %2, align 8
  %12 = select i1 %10, i64 %3, i64 %11
  %13 = and i64 %12, 4294967295
  store i64 %13, i64* %2, align 8
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline norecurse nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L7CMOVNBEI3RnWImE2RnImEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* readnone returned, %struct.State* nocapture readonly dereferenceable(3376), i64* nocapture, i64)  {
  %5 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  %6 = load i8, i8* %5, align 1
  %7 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  %8 = load i8, i8* %7, align 1
  %9 = or i8 %8, %6
  %10 = icmp eq i8 %9, 0
  %11 = load i64, i64* %2, align 8
  %12 = select i1 %10, i64 %3, i64 %11
  store i64 %12, i64* %2, align 8
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline norecurse nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L4JNLEEP6MemoryR5State3RnWIhE2InImES7_(%struct.Memory* readnone returned, %struct.State* nocapture dereferenceable(3376), i8* nocapture, i64, i64)  {
  %6 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  %7 = load i8, i8* %6, align 1
  %8 = icmp eq i8 %7, 0
  %9 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  %10 = load i8, i8* %9, align 1
  %11 = icmp ne i8 %10, 0
  %12 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  %13 = load i8, i8* %12, align 1
  %14 = icmp ne i8 %13, 0
  %15 = xor i1 %11, %14
  %16 = xor i1 %15, true
  %17 = and i1 %8, %16
  %18 = zext i1 %17 to i8
  store i8 %18, i8* %2, align 1
  %19 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 33, i32 0, i32 0
  %20 = select i1 %17, i64 %3, i64 %4
  store i64 %20, i64* %19, align 8
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline norecurse nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3JNSEP6MemoryR5State3RnWIhE2InImES7_(%struct.Memory* readnone returned, %struct.State* nocapture dereferenceable(3376), i8* nocapture, i64, i64)  {
  %6 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  %7 = load i8, i8* %6, align 1
  %8 = icmp eq i8 %7, 0
  %9 = zext i1 %8 to i8
  store i8 %9, i8* %2, align 1
  %10 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 33, i32 0, i32 0
  %11 = select i1 %8, i64 %3, i64 %4
  store i64 %11, i64* %10, align 8
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline norecurse nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L2JLEP6MemoryR5State3RnWIhE2InImES7_(%struct.Memory* readnone returned, %struct.State* nocapture dereferenceable(3376), i8* nocapture, i64, i64)  {
  %6 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  %7 = load i8, i8* %6, align 1
  %8 = icmp ne i8 %7, 0
  %9 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  %10 = load i8, i8* %9, align 1
  %11 = icmp ne i8 %10, 0
  %12 = xor i1 %8, %11
  %13 = zext i1 %12 to i8
  store i8 %13, i8* %2, align 1
  %14 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 33, i32 0, i32 0
  %15 = select i1 %12, i64 %3, i64 %4
  store i64 %15, i64* %14, align 8
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline norecurse nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3JNPEP6MemoryR5State3RnWIhE2InImES7_(%struct.Memory* readnone returned, %struct.State* nocapture dereferenceable(3376), i8* nocapture, i64, i64)  {
  %6 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  %7 = load i8, i8* %6, align 1
  %8 = icmp eq i8 %7, 0
  %9 = zext i1 %8 to i8
  store i8 %9, i8* %2, align 1
  %10 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 33, i32 0, i32 0
  %11 = select i1 %8, i64 %3, i64 %4
  store i64 %11, i64* %10, align 8
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline norecurse nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3JNZEP6MemoryR5State3RnWIhE2InImES7_(%struct.Memory* readnone returned, %struct.State* nocapture dereferenceable(3376), i8* nocapture, i64, i64)  {
  %6 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  %7 = load i8, i8* %6, align 1
  %8 = icmp eq i8 %7, 0
  %9 = zext i1 %8 to i8
  store i8 %9, i8* %2, align 1
  %10 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 33, i32 0, i32 0
  %11 = select i1 %8, i64 %3, i64 %4
  store i64 %11, i64* %10, align 8
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline norecurse nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3JNBEP6MemoryR5State3RnWIhE2InImES7_(%struct.Memory* readnone returned, %struct.State* nocapture dereferenceable(3376), i8* nocapture, i64, i64)  {
  %6 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  %7 = load i8, i8* %6, align 1
  %8 = icmp eq i8 %7, 0
  %9 = zext i1 %8 to i8
  store i8 %9, i8* %2, align 1
  %10 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 33, i32 0, i32 0
  %11 = select i1 %8, i64 %3, i64 %4
  store i64 %11, i64* %10, align 8
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline norecurse nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3JNOEP6MemoryR5State3RnWIhE2InImES7_(%struct.Memory* readnone returned, %struct.State* nocapture dereferenceable(3376), i8* nocapture, i64, i64)  {
  %6 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  %7 = load i8, i8* %6, align 1
  %8 = icmp eq i8 %7, 0
  %9 = zext i1 %8 to i8
  store i8 %9, i8* %2, align 1
  %10 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 33, i32 0, i32 0
  %11 = select i1 %8, i64 %3, i64 %4
  store i64 %11, i64* %10, align 8
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline norecurse nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3JNLEP6MemoryR5State3RnWIhE2InImES7_(%struct.Memory* readnone returned, %struct.State* nocapture dereferenceable(3376), i8* nocapture, i64, i64)  {
  %6 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  %7 = load i8, i8* %6, align 1
  %8 = icmp ne i8 %7, 0
  %9 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  %10 = load i8, i8* %9, align 1
  %11 = icmp ne i8 %10, 0
  %12 = xor i1 %8, %11
  %13 = xor i1 %12, true
  %14 = zext i1 %13 to i8
  store i8 %14, i8* %2, align 1
  %15 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 33, i32 0, i32 0
  %16 = select i1 %12, i64 %4, i64 %3
  store i64 %16, i64* %15, align 8
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline norecurse nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L4JNBEEP6MemoryR5State3RnWIhE2InImES7_(%struct.Memory* readnone returned, %struct.State* nocapture dereferenceable(3376), i8* nocapture, i64, i64)  {
  %6 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  %7 = load i8, i8* %6, align 1
  %8 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  %9 = load i8, i8* %8, align 1
  %10 = or i8 %9, %7
  %11 = icmp eq i8 %10, 0
  %12 = zext i1 %11 to i8
  store i8 %12, i8* %2, align 1
  %13 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 33, i32 0, i32 0
  %14 = select i1 %11, i64 %3, i64 %4
  store i64 %14, i64* %13, align 8
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline norecurse nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3JBEEP6MemoryR5State3RnWIhE2InImES7_(%struct.Memory* readnone returned, %struct.State* nocapture dereferenceable(3376), i8* nocapture, i64, i64)  {
  %6 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  %7 = load i8, i8* %6, align 1
  %8 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  %9 = load i8, i8* %8, align 1
  %10 = or i8 %9, %7
  %11 = icmp ne i8 %10, 0
  %12 = zext i1 %11 to i8
  store i8 %12, i8* %2, align 1
  %13 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 33, i32 0, i32 0
  %14 = select i1 %11, i64 %3, i64 %4
  store i64 %14, i64* %13, align 8
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline norecurse nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L2JZEP6MemoryR5State3RnWIhE2InImES7_(%struct.Memory* readnone returned, %struct.State* nocapture dereferenceable(3376), i8* nocapture, i64, i64)  {
  %6 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  %7 = load i8, i8* %6, align 1
  store i8 %7, i8* %2, align 1
  %8 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 33, i32 0, i32 0
  %9 = icmp ne i8 %7, 0
  %10 = select i1 %9, i64 %3, i64 %4
  store i64 %10, i64* %8, align 8
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline norecurse nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L2JPEP6MemoryR5State3RnWIhE2InImES7_(%struct.Memory* readnone returned, %struct.State* nocapture dereferenceable(3376), i8* nocapture, i64, i64)  {
  %6 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  %7 = load i8, i8* %6, align 1
  store i8 %7, i8* %2, align 1
  %8 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 33, i32 0, i32 0
  %9 = icmp ne i8 %7, 0
  %10 = select i1 %9, i64 %3, i64 %4
  store i64 %10, i64* %8, align 8
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline norecurse nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L2JSEP6MemoryR5State3RnWIhE2InImES7_(%struct.Memory* readnone returned, %struct.State* nocapture dereferenceable(3376), i8* nocapture, i64, i64)  {
  %6 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  %7 = load i8, i8* %6, align 1
  store i8 %7, i8* %2, align 1
  %8 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 33, i32 0, i32 0
  %9 = icmp ne i8 %7, 0
  %10 = select i1 %9, i64 %3, i64 %4
  store i64 %10, i64* %8, align 8
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline norecurse nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L2JOEP6MemoryR5State3RnWIhE2InImES7_(%struct.Memory* readnone returned, %struct.State* nocapture dereferenceable(3376), i8* nocapture, i64, i64)  {
  %6 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  %7 = load i8, i8* %6, align 1
  store i8 %7, i8* %2, align 1
  %8 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 33, i32 0, i32 0
  %9 = icmp ne i8 %7, 0
  %10 = select i1 %9, i64 %3, i64 %4
  store i64 %10, i64* %8, align 8
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline norecurse nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L2JBEP6MemoryR5State3RnWIhE2InImES7_(%struct.Memory* readnone returned, %struct.State* nocapture dereferenceable(3376), i8* nocapture, i64, i64)  {
  %6 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  %7 = load i8, i8* %6, align 1
  store i8 %7, i8* %2, align 1
  %8 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 33, i32 0, i32 0
  %9 = icmp ne i8 %7, 0
  %10 = select i1 %9, i64 %3, i64 %4
  store i64 %10, i64* %8, align 8
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline norecurse nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3JLEEP6MemoryR5State3RnWIhE2InImES7_(%struct.Memory* readnone returned, %struct.State* nocapture dereferenceable(3376), i8* nocapture, i64, i64)  {
  %6 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  %7 = load i8, i8* %6, align 1
  %8 = icmp ne i8 %7, 0
  %9 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  %10 = load i8, i8* %9, align 1
  %11 = icmp ne i8 %10, 0
  %12 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  %13 = load i8, i8* %12, align 1
  %14 = icmp ne i8 %13, 0
  %15 = xor i1 %11, %14
  %16 = or i1 %8, %15
  %17 = zext i1 %16 to i8
  store i8 %17, i8* %2, align 1
  %18 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 33, i32 0, i32 0
  %19 = select i1 %16, i64 %3, i64 %4
  store i64 %19, i64* %18, align 8
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline norecurse nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L4JCXZEP6MemoryR5State3RnWIhE2InImES7_(%struct.Memory* readnone returned, %struct.State* nocapture dereferenceable(3376), i8* nocapture, i64, i64)  {
  %6 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 5, i32 0
  %7 = bitcast %union.anon* %6 to i16*
  %8 = load i16, i16* %7, align 8
  %9 = icmp eq i16 %8, 0
  %10 = zext i1 %9 to i8
  store i8 %10, i8* %2, align 1
  %11 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 33, i32 0, i32 0
  %12 = select i1 %9, i64 %3, i64 %4
  store i64 %12, i64* %11, align 8
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline norecurse nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L5JECXZEP6MemoryR5State3RnWIhE2InImES7_(%struct.Memory* readnone returned, %struct.State* nocapture dereferenceable(3376), i8* nocapture, i64, i64)  {
  %6 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 5, i32 0
  %7 = bitcast %union.anon* %6 to i32*
  %8 = load i32, i32* %7, align 8
  %9 = icmp eq i32 %8, 0
  %10 = zext i1 %9 to i8
  store i8 %10, i8* %2, align 1
  %11 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 33, i32 0, i32 0
  %12 = select i1 %9, i64 %3, i64 %4
  store i64 %12, i64* %11, align 8
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline norecurse nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L5JRCXZEP6MemoryR5State3RnWIhE2InImES7_(%struct.Memory* readnone returned, %struct.State* nocapture dereferenceable(3376), i8* nocapture, i64, i64)  {
  %6 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 5, i32 0, i32 0
  %7 = load i64, i64* %6, align 8
  %8 = icmp eq i64 %7, 0
  %9 = zext i1 %8 to i8
  store i8 %9, i8* %2, align 1
  %10 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 33, i32 0, i32 0
  %11 = select i1 %8, i64 %3, i64 %4
  store i64 %11, i64* %10, align 8
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline norecurse nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L4LOOPEP6MemoryR5State3RnWIhE2InImES7_(%struct.Memory* readnone returned, %struct.State* nocapture dereferenceable(3376), i8* nocapture, i64, i64)  {
  %6 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 5, i32 0, i32 0
  %7 = load i64, i64* %6, align 8
  %8 = add i64 %7, -1
  %9 = icmp ne i64 %8, 0
  %10 = zext i1 %9 to i8
  store i8 %10, i8* %2, align 1
  store i64 %8, i64* %6, align 8
  %11 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 33, i32 0, i32 0
  %12 = select i1 %9, i64 %3, i64 %4
  store i64 %12, i64* %11, align 8
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline norecurse nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L5LOOPEEP6MemoryR5State3RnWIhE2InImES7_(%struct.Memory* readnone returned, %struct.State* nocapture dereferenceable(3376), i8* nocapture, i64, i64)  {
  %6 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 5, i32 0, i32 0
  %7 = load i64, i64* %6, align 8
  %8 = add i64 %7, -1
  %9 = icmp ne i64 %8, 0
  %10 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  %11 = load i8, i8* %10, align 1
  %12 = icmp ne i8 %11, 0
  %13 = and i1 %9, %12
  %14 = zext i1 %13 to i8
  store i8 %14, i8* %2, align 1
  store i64 %8, i64* %6, align 8
  %15 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 33, i32 0, i32 0
  %16 = select i1 %13, i64 %3, i64 %4
  store i64 %16, i64* %15, align 8
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline norecurse nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L6LOOPNEEP6MemoryR5State3RnWIhE2InImES7_(%struct.Memory* readnone returned, %struct.State* nocapture dereferenceable(3376), i8* nocapture, i64, i64)  {
  %6 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 5, i32 0, i32 0
  %7 = load i64, i64* %6, align 8
  %8 = add i64 %7, -1
  %9 = icmp ne i64 %8, 0
  %10 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  %11 = load i8, i8* %10, align 1
  %12 = icmp eq i8 %11, 0
  %13 = and i1 %9, %12
  %14 = zext i1 %13 to i8
  store i8 %14, i8* %2, align 1
  store i64 %8, i64* %6, align 8
  %15 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 33, i32 0, i32 0
  %16 = select i1 %13, i64 %3, i64 %4
  store i64 %16, i64* %15, align 8
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline norecurse nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L6CBW_ALEP6MemoryR5State(%struct.Memory* readnone returned, %struct.State* nocapture dereferenceable(3376))  {
  %3 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 1, i32 0
  %4 = bitcast %union.anon* %3 to i16*
  %5 = bitcast %union.anon* %3 to i8*
  %6 = load i8, i8* %5, align 8
  %7 = sext i8 %6 to i16
  store i16 %7, i16* %4, align 2
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline norecurse nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L7CWDE_AXEP6MemoryR5State(%struct.Memory* readnone returned, %struct.State* nocapture dereferenceable(3376))  {
  %3 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 1, i32 0
  %4 = getelementptr inbounds %union.anon, %union.anon* %3, i64 0, i32 0
  %5 = bitcast %union.anon* %3 to i16*
  %6 = load i16, i16* %5, align 8
  %7 = sext i16 %6 to i64
  %8 = and i64 %7, 4294967295
  store i64 %8, i64* %4, align 8
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline norecurse nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L8CDQE_EAXEP6MemoryR5State(%struct.Memory* readnone returned, %struct.State* nocapture dereferenceable(3376))  {
  %3 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 1, i32 0
  %4 = getelementptr inbounds %union.anon, %union.anon* %3, i64 0, i32 0
  %5 = bitcast %union.anon* %3 to i32*
  %6 = load i32, i32* %5, align 8
  %7 = sext i32 %6 to i64
  store i64 %7, i64* %4, align 8
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline norecurse nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L6CWD_AXEP6MemoryR5State(%struct.Memory* readnone returned, %struct.State* nocapture dereferenceable(3376))  {
  %3 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 7, i32 0
  %4 = bitcast %union.anon* %3 to i16*
  %5 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 1, i32 0
  %6 = bitcast %union.anon* %5 to i16*
  %7 = load i16, i16* %6, align 8
  %8 = sext i16 %7 to i64
  %9 = lshr i64 %8, 16
  %10 = trunc i64 %9 to i16
  store i16 %10, i16* %4, align 2
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline norecurse nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L7CDQ_EAXEP6MemoryR5State(%struct.Memory* readnone returned, %struct.State* nocapture dereferenceable(3376))  {
  %3 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 7, i32 0, i32 0
  %4 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 1, i32 0
  %5 = bitcast %union.anon* %4 to i32*
  %6 = load i32, i32* %5, align 8
  %7 = sext i32 %6 to i64
  %8 = lshr i64 %7, 32
  store i64 %8, i64* %3, align 8
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline norecurse nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L7CQO_RAXEP6MemoryR5State(%struct.Memory* readnone returned, %struct.State* nocapture dereferenceable(3376))  {
  %3 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 7, i32 0, i32 0
  %4 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 1, i32 0, i32 0
  %5 = load i64, i64* %4, align 8
  %6 = ashr i64 %5, 63
  store i64 %6, i64* %3, align 8
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L8CVTPI2PDI3MVnI7vec64_tEEEP6MemoryS5_R5State3VnWI8vec128_tET_(%struct.Memory* returned, %struct.State* nocapture readnone dereferenceable(3376), i8* nocapture, i64)  {
  %5 = inttoptr i64 %3 to i32*
  %6 = load i32, i32* %5
  %7 = add i64 %3, 4
  %8 = inttoptr i64 %7 to i32*
  %9 = load i32, i32* %8
  %10 = sitofp i32 %6 to double
  %11 = sitofp i32 %9 to double
  %12 = getelementptr inbounds i8, i8* %2, i64 8
  %13 = bitcast i8* %2 to double*
  store double %10, double* %13, align 1
  %14 = bitcast i8* %12 to double*
  store double %11, double* %14, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L8CVTPI2PDI3RVnI7vec64_tEEEP6MemoryS5_R5State3VnWI8vec128_tET_(%struct.Memory* readnone returned, %struct.State* nocapture readnone dereferenceable(3376), i8* nocapture, i64)  {
  %5 = trunc i64 %3 to i32
  %6 = lshr i64 %3, 32
  %7 = trunc i64 %6 to i32
  %8 = sitofp i32 %5 to double
  %9 = sitofp i32 %7 to double
  %10 = getelementptr inbounds i8, i8* %2, i64 8
  %11 = bitcast i8* %2 to double*
  store double %8, double* %11, align 1
  %12 = bitcast i8* %10 to double*
  store double %9, double* %12, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L8CVTPI2PSI3MVnI7vec64_tEEEP6MemoryS5_R5State3VnWI8vec128_tET_(%struct.Memory* returned, %struct.State* nocapture readnone dereferenceable(3376), i8* nocapture, i64)  {
  %5 = inttoptr i64 %3 to i32*
  %6 = load i32, i32* %5
  %7 = add i64 %3, 4
  %8 = inttoptr i64 %7 to i32*
  %9 = load i32, i32* %8
  %10 = sitofp i32 %6 to float
  %11 = sitofp i32 %9 to float
  %12 = getelementptr inbounds i8, i8* %2, i64 8
  %13 = bitcast i8* %12 to <2 x i32>*
  %14 = load <2 x i32>, <2 x i32>* %13, align 1
  %15 = bitcast i8* %2 to float*
  store float %10, float* %15, align 1
  %16 = getelementptr inbounds i8, i8* %2, i64 4
  %17 = bitcast i8* %16 to float*
  store float %11, float* %17, align 1
  %18 = extractelement <2 x i32> %14, i32 0
  %19 = bitcast i8* %12 to i32*
  store i32 %18, i32* %19, align 1
  %20 = extractelement <2 x i32> %14, i32 1
  %21 = getelementptr inbounds i8, i8* %2, i64 12
  %22 = bitcast i8* %21 to i32*
  store i32 %20, i32* %22, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L8CVTPI2PSI3RVnI7vec64_tEEEP6MemoryS5_R5State3VnWI8vec128_tET_(%struct.Memory* readnone returned, %struct.State* nocapture readnone dereferenceable(3376), i8* nocapture, i64)  {
  %5 = trunc i64 %3 to i32
  %6 = lshr i64 %3, 32
  %7 = trunc i64 %6 to i32
  %8 = sitofp i32 %5 to float
  %9 = sitofp i32 %7 to float
  %10 = getelementptr inbounds i8, i8* %2, i64 8
  %11 = bitcast i8* %10 to <2 x i32>*
  %12 = load <2 x i32>, <2 x i32>* %11, align 1
  %13 = bitcast i8* %2 to float*
  store float %8, float* %13, align 1
  %14 = getelementptr inbounds i8, i8* %2, i64 4
  %15 = bitcast i8* %14 to float*
  store float %9, float* %15, align 1
  %16 = extractelement <2 x i32> %12, i32 0
  %17 = bitcast i8* %10 to i32*
  store i32 %16, i32* %17, align 1
  %18 = extractelement <2 x i32> %12, i32 1
  %19 = getelementptr inbounds i8, i8* %2, i64 12
  %20 = bitcast i8* %19 to i32*
  store i32 %18, i32* %20, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L8CVTDQ2PDI3VnWI8vec128_tE3MVnI7vec64_tELm2EEEP6MemoryS8_R5StateT_T0_(%struct.Memory* returned, %struct.State* nocapture readnone dereferenceable(3376), i8* nocapture, i64)  {
  %5 = inttoptr i64 %3 to i32*
  %6 = load i32, i32* %5
  %7 = add i64 %3, 4
  %8 = inttoptr i64 %7 to i32*
  %9 = load i32, i32* %8
  %10 = sitofp i32 %6 to double
  %11 = sitofp i32 %9 to double
  %12 = bitcast i8* %2 to double*
  store double %10, double* %12, align 1
  %13 = getelementptr inbounds i8, i8* %2, i64 8
  %14 = bitcast i8* %13 to double*
  store double %11, double* %14, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L8CVTDQ2PDI3VnWI8vec128_tE2VnIS2_ELm2EEEP6MemoryS7_R5StateT_T0_(%struct.Memory* readnone returned, %struct.State* nocapture readnone dereferenceable(3376), i8* nocapture, i8* nocapture readonly)  {
  %5 = bitcast i8* %3 to i64*
  %6 = load i64, i64* %5, align 1
  %7 = trunc i64 %6 to i32
  %8 = sitofp i32 %7 to double
  %9 = lshr i64 %6, 32
  %10 = trunc i64 %9 to i32
  %11 = sitofp i32 %10 to double
  %12 = bitcast i8* %2 to double*
  store double %8, double* %12, align 1
  %13 = getelementptr inbounds i8, i8* %2, i64 8
  %14 = bitcast i8* %13 to double*
  store double %11, double* %14, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L8CVTDQ2PSI3VnWI8vec128_tE3MVnIS2_ELm4EEEP6MemoryS7_R5StateT_T0_(%struct.Memory* returned, %struct.State* nocapture readnone dereferenceable(3376), i8* nocapture, i64)  {
  %5 = alloca { <2 x float>, <2 x float> }, align 8
  %6 = inttoptr i64 %3 to i32*
  %7 = load i32, i32* %6
  %8 = add i64 %3, 4
  %9 = inttoptr i64 %8 to i32*
  %10 = load i32, i32* %9
  %11 = add i64 %3, 8
  %12 = inttoptr i64 %11 to i32*
  %13 = load i32, i32* %12
  %14 = add i64 %3, 12
  %15 = inttoptr i64 %14 to i32*
  %16 = load i32, i32* %15
  %17 = bitcast { <2 x float>, <2 x float> }* %5 to i8*
  %18 = bitcast { <2 x float>, <2 x float> }* %5 to <2 x i32>*
  %19 = getelementptr inbounds { <2 x float>, <2 x float> }, { <2 x float>, <2 x float> }* %5, i64 0, i32 1
  %20 = bitcast <2 x float>* %19 to <2 x i32>*
  %21 = bitcast { <2 x float>, <2 x float> }* %5 to [4 x float]*
  %22 = getelementptr inbounds { <2 x float>, <2 x float> }, { <2 x float>, <2 x float> }* %5, i64 0, i32 1, i64 0
  %23 = sitofp i32 %7 to float
  call void @llvm.lifetime.start(i64 16, i8* nonnull %17)
  store <2 x i32> zeroinitializer, <2 x i32>* %18, align 8
  store <2 x i32> zeroinitializer, <2 x i32>* %20, align 8
  %24 = getelementptr inbounds { <2 x float>, <2 x float> }, { <2 x float>, <2 x float> }* %5, i64 0, i32 0, i64 0
  store float %23, float* %24, align 8
  %25 = bitcast { <2 x float>, <2 x float> }* %5 to i64*
  %26 = load i64, i64* %25, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %17)
  %27 = sitofp i32 %10 to float
  call void @llvm.lifetime.start(i64 16, i8* nonnull %17)
  %28 = bitcast { <2 x float>, <2 x float> }* %5 to i64*
  store i64 %26, i64* %28, align 8
  store <2 x i32> zeroinitializer, <2 x i32>* %20, align 8
  %29 = getelementptr inbounds [4 x float], [4 x float]* %21, i64 0, i64 1
  store float %27, float* %29, align 4
  %30 = bitcast { <2 x float>, <2 x float> }* %5 to <2 x i32>*
  %31 = load <2 x i32>, <2 x i32>* %30, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %17)
  %32 = sitofp i32 %13 to float
  call void @llvm.lifetime.start(i64 16, i8* nonnull %17)
  store <2 x i32> %31, <2 x i32>* %18, align 8
  store <2 x i32> zeroinitializer, <2 x i32>* %20, align 8
  %33 = getelementptr inbounds { <2 x float>, <2 x float> }, { <2 x float>, <2 x float> }* %5, i64 0, i32 1, i64 0
  store float %32, float* %33, align 8
  %34 = bitcast float* %22 to i64*
  %35 = load i64, i64* %34, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %17)
  %36 = sitofp i32 %16 to float
  call void @llvm.lifetime.start(i64 16, i8* nonnull %17)
  store <2 x i32> %31, <2 x i32>* %18, align 8
  %37 = bitcast <2 x float>* %19 to i64*
  store i64 %35, i64* %37, align 8
  %38 = getelementptr inbounds [4 x float], [4 x float]* %21, i64 0, i64 3
  store float %36, float* %38, align 4
  %39 = bitcast float* %22 to <2 x i32>*
  %40 = load <2 x i32>, <2 x i32>* %39, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %17)
  %41 = extractelement <2 x i32> %31, i32 0
  %42 = bitcast i8* %2 to i32*
  store i32 %41, i32* %42, align 1
  %43 = extractelement <2 x i32> %31, i32 1
  %44 = getelementptr inbounds i8, i8* %2, i64 4
  %45 = bitcast i8* %44 to i32*
  store i32 %43, i32* %45, align 1
  %46 = extractelement <2 x i32> %40, i32 0
  %47 = getelementptr inbounds i8, i8* %2, i64 8
  %48 = bitcast i8* %47 to i32*
  store i32 %46, i32* %48, align 1
  %49 = extractelement <2 x i32> %40, i32 1
  %50 = getelementptr inbounds i8, i8* %2, i64 12
  %51 = bitcast i8* %50 to i32*
  store i32 %49, i32* %51, align 1
  ret %struct.Memory* %0
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start(i64, i8* nocapture) 

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end(i64, i8* nocapture) 

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L8CVTDQ2PSI3VnWI8vec128_tE2VnIS2_ELm4EEEP6MemoryS7_R5StateT_T0_(%struct.Memory* readnone returned, %struct.State* nocapture readnone dereferenceable(3376), i8* nocapture, i8* nocapture readonly)  {
  %5 = alloca { <2 x float>, <2 x float> }, align 8
  %6 = bitcast i8* %3 to i64*
  %7 = load i64, i64* %6, align 1
  %8 = getelementptr inbounds i8, i8* %3, i64 8
  %9 = bitcast i8* %8 to i64*
  %10 = load i64, i64* %9, align 1
  %11 = bitcast { <2 x float>, <2 x float> }* %5 to i8*
  %12 = bitcast { <2 x float>, <2 x float> }* %5 to <2 x i32>*
  %13 = getelementptr inbounds { <2 x float>, <2 x float> }, { <2 x float>, <2 x float> }* %5, i64 0, i32 1
  %14 = bitcast <2 x float>* %13 to <2 x i32>*
  %15 = bitcast { <2 x float>, <2 x float> }* %5 to [4 x float]*
  %16 = getelementptr inbounds { <2 x float>, <2 x float> }, { <2 x float>, <2 x float> }* %5, i64 0, i32 1, i64 0
  %17 = trunc i64 %7 to i32
  %18 = sitofp i32 %17 to float
  call void @llvm.lifetime.start(i64 16, i8* nonnull %11)
  store <2 x i32> zeroinitializer, <2 x i32>* %12, align 8
  store <2 x i32> zeroinitializer, <2 x i32>* %14, align 8
  %19 = getelementptr inbounds { <2 x float>, <2 x float> }, { <2 x float>, <2 x float> }* %5, i64 0, i32 0, i64 0
  store float %18, float* %19, align 8
  %20 = bitcast { <2 x float>, <2 x float> }* %5 to i64*
  %21 = load i64, i64* %20, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %11)
  %22 = lshr i64 %7, 32
  %23 = trunc i64 %22 to i32
  %24 = sitofp i32 %23 to float
  call void @llvm.lifetime.start(i64 16, i8* nonnull %11)
  %25 = bitcast { <2 x float>, <2 x float> }* %5 to i64*
  store i64 %21, i64* %25, align 8
  store <2 x i32> zeroinitializer, <2 x i32>* %14, align 8
  %26 = getelementptr inbounds [4 x float], [4 x float]* %15, i64 0, i64 1
  store float %24, float* %26, align 4
  %27 = bitcast { <2 x float>, <2 x float> }* %5 to <2 x i32>*
  %28 = load <2 x i32>, <2 x i32>* %27, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %11)
  %29 = trunc i64 %10 to i32
  %30 = sitofp i32 %29 to float
  call void @llvm.lifetime.start(i64 16, i8* nonnull %11)
  store <2 x i32> %28, <2 x i32>* %12, align 8
  store <2 x i32> zeroinitializer, <2 x i32>* %14, align 8
  %31 = getelementptr inbounds { <2 x float>, <2 x float> }, { <2 x float>, <2 x float> }* %5, i64 0, i32 1, i64 0
  store float %30, float* %31, align 8
  %32 = bitcast float* %16 to i64*
  %33 = load i64, i64* %32, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %11)
  %34 = lshr i64 %10, 32
  %35 = trunc i64 %34 to i32
  %36 = sitofp i32 %35 to float
  call void @llvm.lifetime.start(i64 16, i8* nonnull %11)
  store <2 x i32> %28, <2 x i32>* %12, align 8
  %37 = bitcast <2 x float>* %13 to i64*
  store i64 %33, i64* %37, align 8
  %38 = getelementptr inbounds [4 x float], [4 x float]* %15, i64 0, i64 3
  store float %36, float* %38, align 4
  %39 = bitcast float* %16 to <2 x i32>*
  %40 = load <2 x i32>, <2 x i32>* %39, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %11)
  %41 = extractelement <2 x i32> %28, i32 0
  %42 = bitcast i8* %2 to i32*
  store i32 %41, i32* %42, align 1
  %43 = extractelement <2 x i32> %28, i32 1
  %44 = getelementptr inbounds i8, i8* %2, i64 4
  %45 = bitcast i8* %44 to i32*
  store i32 %43, i32* %45, align 1
  %46 = extractelement <2 x i32> %40, i32 0
  %47 = getelementptr inbounds i8, i8* %2, i64 8
  %48 = bitcast i8* %47 to i32*
  store i32 %46, i32* %48, align 1
  %49 = extractelement <2 x i32> %40, i32 1
  %50 = getelementptr inbounds i8, i8* %2, i64 12
  %51 = bitcast i8* %50 to i32*
  store i32 %49, i32* %51, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L8CVTPD2DQI3VnWI8vec128_tE3MVnIS2_ELm2EXadL_ZNS_L17FRoundUsingMode64EdEEEEP6MemoryS7_R5StateT_T0_(%struct.Memory* returned, %struct.State* nocapture readnone dereferenceable(3376), i8* nocapture, i64)  {
  %5 = alloca <2 x i64>, align 16
  %6 = bitcast <2 x i64>* %5 to { i64, i64 }*
  %7 = inttoptr i64 %3 to double*
  %8 = load double, double* %7
  %9 = add i64 %3, 8
  %10 = inttoptr i64 %9 to double*
  %11 = load double, double* %10
  %12 = bitcast <2 x i64>* %5 to i8*
  %13 = getelementptr inbounds <2 x i64>, <2 x i64>* %5, i64 0, i64 0
  %14 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %6, i64 0, i32 1
  %15 = bitcast <2 x i64>* %5 to [4 x i32]*
  %16 = tail call double @llvm.nearbyint.f64(double %8) 
  %17 = tail call double @llvm.fabs.f64(double %16) 
  %18 = fcmp ogt double %17, 0x41DFFFFFFFC00000
  %19 = fptosi double %16 to i32
  %20 = select i1 %18, i32 -2147483648, i32 %19
  call void @llvm.lifetime.start(i64 16, i8* nonnull %12)
  store <2 x i64> zeroinitializer, <2 x i64>* %5, align 16
  %21 = bitcast <2 x i64>* %5 to i32*
  store i32 %20, i32* %21, align 16
  %22 = load i64, i64* %13, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %12)
  %23 = tail call double @llvm.nearbyint.f64(double %11) 
  %24 = tail call double @llvm.fabs.f64(double %23) 
  %25 = fcmp ogt double %24, 0x41DFFFFFFFC00000
  %26 = fptosi double %23 to i32
  %27 = select i1 %25, i32 -2147483648, i32 %26
  call void @llvm.lifetime.start(i64 16, i8* nonnull %12)
  store i64 %22, i64* %13, align 16
  store i64 0, i64* %14, align 8
  %28 = getelementptr inbounds [4 x i32], [4 x i32]* %15, i64 0, i64 1
  store i32 %27, i32* %28, align 4
  %29 = load i64, i64* %13, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %12)
  %30 = lshr i64 %29, 32
  %31 = trunc i64 %29 to i32
  %32 = trunc i64 %30 to i32
  %33 = bitcast i8* %2 to i32*
  store i32 %31, i32* %33, align 1
  %34 = getelementptr inbounds i8, i8* %2, i64 4
  %35 = bitcast i8* %34 to i32*
  store i32 %32, i32* %35, align 1
  %36 = getelementptr inbounds i8, i8* %2, i64 8
  %37 = bitcast i8* %36 to i32*
  store i32 0, i32* %37, align 1
  %38 = getelementptr inbounds i8, i8* %2, i64 12
  %39 = bitcast i8* %38 to i32*
  store i32 0, i32* %39, align 1
  ret %struct.Memory* %0
}

; Function Attrs: nounwind readnone
declare double @llvm.nearbyint.f64(double) 

; Function Attrs: nounwind readnone
declare double @llvm.fabs.f64(double) 

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L8CVTPD2DQI3VnWI8vec128_tE2VnIS2_ELm2EXadL_ZNS_L17FRoundUsingMode64EdEEEEP6MemoryS7_R5StateT_T0_(%struct.Memory* readnone returned, %struct.State* nocapture readnone dereferenceable(3376), i8* nocapture, i8* nocapture readonly)  {
  %5 = alloca <2 x i64>, align 16
  %6 = bitcast <2 x i64>* %5 to { i64, i64 }*
  %7 = bitcast i8* %3 to double*
  %8 = load double, double* %7, align 1
  %9 = getelementptr inbounds i8, i8* %3, i64 8
  %10 = bitcast i8* %9 to double*
  %11 = load double, double* %10, align 1
  %12 = bitcast <2 x i64>* %5 to i8*
  %13 = getelementptr inbounds <2 x i64>, <2 x i64>* %5, i64 0, i64 0
  %14 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %6, i64 0, i32 1
  %15 = bitcast <2 x i64>* %5 to [4 x i32]*
  %16 = tail call double @llvm.nearbyint.f64(double %8) 
  %17 = tail call double @llvm.fabs.f64(double %16) 
  %18 = fcmp ogt double %17, 0x41DFFFFFFFC00000
  %19 = fptosi double %16 to i32
  %20 = select i1 %18, i32 -2147483648, i32 %19
  call void @llvm.lifetime.start(i64 16, i8* nonnull %12)
  store <2 x i64> zeroinitializer, <2 x i64>* %5, align 16
  %21 = bitcast <2 x i64>* %5 to i32*
  store i32 %20, i32* %21, align 16
  %22 = load i64, i64* %13, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %12)
  %23 = tail call double @llvm.nearbyint.f64(double %11) 
  %24 = tail call double @llvm.fabs.f64(double %23) 
  %25 = fcmp ogt double %24, 0x41DFFFFFFFC00000
  %26 = fptosi double %23 to i32
  %27 = select i1 %25, i32 -2147483648, i32 %26
  call void @llvm.lifetime.start(i64 16, i8* nonnull %12)
  store i64 %22, i64* %13, align 16
  store i64 0, i64* %14, align 8
  %28 = getelementptr inbounds [4 x i32], [4 x i32]* %15, i64 0, i64 1
  store i32 %27, i32* %28, align 4
  %29 = load i64, i64* %13, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %12)
  %30 = lshr i64 %29, 32
  %31 = trunc i64 %29 to i32
  %32 = trunc i64 %30 to i32
  %33 = bitcast i8* %2 to i32*
  store i32 %31, i32* %33, align 1
  %34 = getelementptr inbounds i8, i8* %2, i64 4
  %35 = bitcast i8* %34 to i32*
  store i32 %32, i32* %35, align 1
  %36 = getelementptr inbounds i8, i8* %2, i64 8
  %37 = bitcast i8* %36 to i32*
  store i32 0, i32* %37, align 1
  %38 = getelementptr inbounds i8, i8* %2, i64 12
  %39 = bitcast i8* %38 to i32*
  store i32 0, i32* %39, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L8CVTPD2DQI3VnWI8vec128_tE3MVnIS2_ELm2EXadL_ZNS_L18FTruncTowardZero64EdEEEEP6MemoryS7_R5StateT_T0_(%struct.Memory* returned, %struct.State* nocapture readnone dereferenceable(3376), i8* nocapture, i64)  {
  %5 = alloca <2 x i64>, align 16
  %6 = bitcast <2 x i64>* %5 to { i64, i64 }*
  %7 = inttoptr i64 %3 to double*
  %8 = load double, double* %7
  %9 = add i64 %3, 8
  %10 = inttoptr i64 %9 to double*
  %11 = load double, double* %10
  %12 = bitcast <2 x i64>* %5 to i8*
  %13 = getelementptr inbounds <2 x i64>, <2 x i64>* %5, i64 0, i64 0
  %14 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %6, i64 0, i32 1
  %15 = bitcast <2 x i64>* %5 to [4 x i32]*
  %16 = tail call double @llvm.trunc.f64(double %8) 
  %17 = tail call double @llvm.fabs.f64(double %16) 
  %18 = fcmp ogt double %17, 0x41DFFFFFFFC00000
  %19 = fptosi double %16 to i32
  %20 = select i1 %18, i32 -2147483648, i32 %19
  call void @llvm.lifetime.start(i64 16, i8* nonnull %12)
  store <2 x i64> zeroinitializer, <2 x i64>* %5, align 16
  %21 = bitcast <2 x i64>* %5 to i32*
  store i32 %20, i32* %21, align 16
  %22 = load i64, i64* %13, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %12)
  %23 = tail call double @llvm.trunc.f64(double %11) 
  %24 = tail call double @llvm.fabs.f64(double %23) 
  %25 = fcmp ogt double %24, 0x41DFFFFFFFC00000
  %26 = fptosi double %23 to i32
  %27 = select i1 %25, i32 -2147483648, i32 %26
  call void @llvm.lifetime.start(i64 16, i8* nonnull %12)
  store i64 %22, i64* %13, align 16
  store i64 0, i64* %14, align 8
  %28 = getelementptr inbounds [4 x i32], [4 x i32]* %15, i64 0, i64 1
  store i32 %27, i32* %28, align 4
  %29 = load i64, i64* %13, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %12)
  %30 = lshr i64 %29, 32
  %31 = trunc i64 %29 to i32
  %32 = trunc i64 %30 to i32
  %33 = bitcast i8* %2 to i32*
  store i32 %31, i32* %33, align 1
  %34 = getelementptr inbounds i8, i8* %2, i64 4
  %35 = bitcast i8* %34 to i32*
  store i32 %32, i32* %35, align 1
  %36 = getelementptr inbounds i8, i8* %2, i64 8
  %37 = bitcast i8* %36 to i32*
  store i32 0, i32* %37, align 1
  %38 = getelementptr inbounds i8, i8* %2, i64 12
  %39 = bitcast i8* %38 to i32*
  store i32 0, i32* %39, align 1
  ret %struct.Memory* %0
}

; Function Attrs: nounwind readnone
declare double @llvm.trunc.f64(double) 

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L8CVTPD2DQI3VnWI8vec128_tE2VnIS2_ELm2EXadL_ZNS_L18FTruncTowardZero64EdEEEEP6MemoryS7_R5StateT_T0_(%struct.Memory* readnone returned, %struct.State* nocapture readnone dereferenceable(3376), i8* nocapture, i8* nocapture readonly)  {
  %5 = alloca <2 x i64>, align 16
  %6 = bitcast <2 x i64>* %5 to { i64, i64 }*
  %7 = bitcast i8* %3 to double*
  %8 = load double, double* %7, align 1
  %9 = getelementptr inbounds i8, i8* %3, i64 8
  %10 = bitcast i8* %9 to double*
  %11 = load double, double* %10, align 1
  %12 = bitcast <2 x i64>* %5 to i8*
  %13 = getelementptr inbounds <2 x i64>, <2 x i64>* %5, i64 0, i64 0
  %14 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %6, i64 0, i32 1
  %15 = bitcast <2 x i64>* %5 to [4 x i32]*
  %16 = tail call double @llvm.trunc.f64(double %8) 
  %17 = tail call double @llvm.fabs.f64(double %16) 
  %18 = fcmp ogt double %17, 0x41DFFFFFFFC00000
  %19 = fptosi double %16 to i32
  %20 = select i1 %18, i32 -2147483648, i32 %19
  call void @llvm.lifetime.start(i64 16, i8* nonnull %12)
  store <2 x i64> zeroinitializer, <2 x i64>* %5, align 16
  %21 = bitcast <2 x i64>* %5 to i32*
  store i32 %20, i32* %21, align 16
  %22 = load i64, i64* %13, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %12)
  %23 = tail call double @llvm.trunc.f64(double %11) 
  %24 = tail call double @llvm.fabs.f64(double %23) 
  %25 = fcmp ogt double %24, 0x41DFFFFFFFC00000
  %26 = fptosi double %23 to i32
  %27 = select i1 %25, i32 -2147483648, i32 %26
  call void @llvm.lifetime.start(i64 16, i8* nonnull %12)
  store i64 %22, i64* %13, align 16
  store i64 0, i64* %14, align 8
  %28 = getelementptr inbounds [4 x i32], [4 x i32]* %15, i64 0, i64 1
  store i32 %27, i32* %28, align 4
  %29 = load i64, i64* %13, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %12)
  %30 = lshr i64 %29, 32
  %31 = trunc i64 %29 to i32
  %32 = trunc i64 %30 to i32
  %33 = bitcast i8* %2 to i32*
  store i32 %31, i32* %33, align 1
  %34 = getelementptr inbounds i8, i8* %2, i64 4
  %35 = bitcast i8* %34 to i32*
  store i32 %32, i32* %35, align 1
  %36 = getelementptr inbounds i8, i8* %2, i64 8
  %37 = bitcast i8* %36 to i32*
  store i32 0, i32* %37, align 1
  %38 = getelementptr inbounds i8, i8* %2, i64 12
  %39 = bitcast i8* %38 to i32*
  store i32 0, i32* %39, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L8CVTPS2DQI3VnWI8vec128_tE3MVnIS2_ELm4EXadL_ZNS_L17FRoundUsingMode32EfEEEEP6MemoryS7_R5StateT_T0_(%struct.Memory* returned, %struct.State* nocapture readnone dereferenceable(3376), i8* nocapture, i64)  {
  %5 = alloca <2 x i64>, align 16
  %6 = bitcast <2 x i64>* %5 to { i64, i64 }*
  %7 = inttoptr i64 %3 to float*
  %8 = load float, float* %7
  %9 = add i64 %3, 4
  %10 = inttoptr i64 %9 to float*
  %11 = load float, float* %10
  %12 = add i64 %3, 8
  %13 = inttoptr i64 %12 to float*
  %14 = load float, float* %13
  %15 = add i64 %3, 12
  %16 = inttoptr i64 %15 to float*
  %17 = load float, float* %16
  %18 = bitcast <2 x i64>* %5 to i8*
  %19 = getelementptr inbounds <2 x i64>, <2 x i64>* %5, i64 0, i64 0
  %20 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %6, i64 0, i32 1
  %21 = bitcast <2 x i64>* %5 to [4 x i32]*
  %22 = tail call float @llvm.nearbyint.f32(float %8) 
  %23 = tail call float @llvm.fabs.f32(float %22) 
  %24 = fcmp ogt float %23, 0x41E0000000000000
  %25 = fptosi float %22 to i32
  %26 = select i1 %24, i32 -2147483648, i32 %25
  call void @llvm.lifetime.start(i64 16, i8* nonnull %18)
  store <2 x i64> zeroinitializer, <2 x i64>* %5, align 16
  %27 = bitcast <2 x i64>* %5 to i32*
  store i32 %26, i32* %27, align 16
  %28 = load i64, i64* %19, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %18)
  %29 = tail call float @llvm.nearbyint.f32(float %11) 
  %30 = tail call float @llvm.fabs.f32(float %29) 
  %31 = fcmp ogt float %30, 0x41E0000000000000
  %32 = fptosi float %29 to i32
  %33 = select i1 %31, i32 -2147483648, i32 %32
  call void @llvm.lifetime.start(i64 16, i8* nonnull %18)
  store i64 %28, i64* %19, align 16
  store i64 0, i64* %20, align 8
  %34 = getelementptr inbounds [4 x i32], [4 x i32]* %21, i64 0, i64 1
  store i32 %33, i32* %34, align 4
  %35 = load i64, i64* %19, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %18)
  %36 = tail call float @llvm.nearbyint.f32(float %14) 
  %37 = tail call float @llvm.fabs.f32(float %36) 
  %38 = fcmp ogt float %37, 0x41E0000000000000
  %39 = fptosi float %36 to i32
  %40 = select i1 %38, i32 -2147483648, i32 %39
  call void @llvm.lifetime.start(i64 16, i8* nonnull %18)
  store i64 %35, i64* %19, align 16
  store i64 0, i64* %20, align 8
  %41 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %6, i64 0, i32 1
  %42 = bitcast i64* %41 to i32*
  store i32 %40, i32* %42, align 8
  %43 = load i64, i64* %20, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %18)
  %44 = tail call float @llvm.nearbyint.f32(float %17) 
  %45 = tail call float @llvm.fabs.f32(float %44) 
  %46 = fcmp ogt float %45, 0x41E0000000000000
  %47 = fptosi float %44 to i32
  %48 = select i1 %46, i32 -2147483648, i32 %47
  call void @llvm.lifetime.start(i64 16, i8* nonnull %18)
  store i64 %35, i64* %19, align 16
  store i64 %43, i64* %20, align 8
  %49 = getelementptr inbounds [4 x i32], [4 x i32]* %21, i64 0, i64 3
  store i32 %48, i32* %49, align 4
  %50 = load i64, i64* %20, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %18)
  %51 = lshr i64 %35, 32
  %52 = trunc i64 %35 to i32
  %53 = trunc i64 %51 to i32
  %54 = bitcast i8* %2 to i32*
  store i32 %52, i32* %54, align 1
  %55 = getelementptr inbounds i8, i8* %2, i64 4
  %56 = bitcast i8* %55 to i32*
  store i32 %53, i32* %56, align 1
  %57 = trunc i64 %50 to i32
  %58 = getelementptr inbounds i8, i8* %2, i64 8
  %59 = bitcast i8* %58 to i32*
  store i32 %57, i32* %59, align 1
  %60 = lshr i64 %50, 32
  %61 = trunc i64 %60 to i32
  %62 = getelementptr inbounds i8, i8* %2, i64 12
  %63 = bitcast i8* %62 to i32*
  store i32 %61, i32* %63, align 1
  ret %struct.Memory* %0
}

; Function Attrs: nounwind readnone
declare float @llvm.nearbyint.f32(float) 

; Function Attrs: nounwind readnone
declare float @llvm.fabs.f32(float) 

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L8CVTPS2DQI3VnWI8vec128_tE2VnIS2_ELm4EXadL_ZNS_L17FRoundUsingMode32EfEEEEP6MemoryS7_R5StateT_T0_(%struct.Memory* readnone returned, %struct.State* nocapture readnone dereferenceable(3376), i8* nocapture, i8* nocapture readonly)  {
  %5 = alloca <2 x i64>, align 16
  %6 = bitcast <2 x i64>* %5 to { i64, i64 }*
  %7 = bitcast i8* %3 to i64*
  %8 = load i64, i64* %7, align 1
  %9 = getelementptr inbounds i8, i8* %3, i64 8
  %10 = bitcast i8* %9 to i64*
  %11 = load i64, i64* %10, align 1
  %12 = bitcast <2 x i64>* %5 to i8*
  %13 = getelementptr inbounds <2 x i64>, <2 x i64>* %5, i64 0, i64 0
  %14 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %6, i64 0, i32 1
  %15 = bitcast <2 x i64>* %5 to [4 x i32]*
  %16 = trunc i64 %8 to i32
  %17 = bitcast i32 %16 to float
  %18 = tail call float @llvm.nearbyint.f32(float %17) 
  %19 = tail call float @llvm.fabs.f32(float %18) 
  %20 = fcmp ogt float %19, 0x41E0000000000000
  %21 = fptosi float %18 to i32
  %22 = select i1 %20, i32 -2147483648, i32 %21
  call void @llvm.lifetime.start(i64 16, i8* nonnull %12)
  store <2 x i64> zeroinitializer, <2 x i64>* %5, align 16
  %23 = bitcast <2 x i64>* %5 to i32*
  store i32 %22, i32* %23, align 16
  %24 = load i64, i64* %13, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %12)
  %25 = lshr i64 %8, 32
  %26 = trunc i64 %25 to i32
  %27 = bitcast i32 %26 to float
  %28 = tail call float @llvm.nearbyint.f32(float %27) 
  %29 = tail call float @llvm.fabs.f32(float %28) 
  %30 = fcmp ogt float %29, 0x41E0000000000000
  %31 = fptosi float %28 to i32
  %32 = select i1 %30, i32 -2147483648, i32 %31
  call void @llvm.lifetime.start(i64 16, i8* nonnull %12)
  store i64 %24, i64* %13, align 16
  store i64 0, i64* %14, align 8
  %33 = getelementptr inbounds [4 x i32], [4 x i32]* %15, i64 0, i64 1
  store i32 %32, i32* %33, align 4
  %34 = load i64, i64* %13, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %12)
  %35 = trunc i64 %11 to i32
  %36 = bitcast i32 %35 to float
  %37 = tail call float @llvm.nearbyint.f32(float %36) 
  %38 = tail call float @llvm.fabs.f32(float %37) 
  %39 = fcmp ogt float %38, 0x41E0000000000000
  %40 = fptosi float %37 to i32
  %41 = select i1 %39, i32 -2147483648, i32 %40
  call void @llvm.lifetime.start(i64 16, i8* nonnull %12)
  store i64 %34, i64* %13, align 16
  store i64 0, i64* %14, align 8
  %42 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %6, i64 0, i32 1
  %43 = bitcast i64* %42 to i32*
  store i32 %41, i32* %43, align 8
  %44 = load i64, i64* %14, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %12)
  %45 = lshr i64 %11, 32
  %46 = trunc i64 %45 to i32
  %47 = bitcast i32 %46 to float
  %48 = tail call float @llvm.nearbyint.f32(float %47) 
  %49 = tail call float @llvm.fabs.f32(float %48) 
  %50 = fcmp ogt float %49, 0x41E0000000000000
  %51 = fptosi float %48 to i32
  %52 = select i1 %50, i32 -2147483648, i32 %51
  call void @llvm.lifetime.start(i64 16, i8* nonnull %12)
  store i64 %34, i64* %13, align 16
  store i64 %44, i64* %14, align 8
  %53 = getelementptr inbounds [4 x i32], [4 x i32]* %15, i64 0, i64 3
  store i32 %52, i32* %53, align 4
  %54 = load i64, i64* %14, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %12)
  %55 = lshr i64 %34, 32
  %56 = trunc i64 %34 to i32
  %57 = trunc i64 %55 to i32
  %58 = bitcast i8* %2 to i32*
  store i32 %56, i32* %58, align 1
  %59 = getelementptr inbounds i8, i8* %2, i64 4
  %60 = bitcast i8* %59 to i32*
  store i32 %57, i32* %60, align 1
  %61 = trunc i64 %54 to i32
  %62 = getelementptr inbounds i8, i8* %2, i64 8
  %63 = bitcast i8* %62 to i32*
  store i32 %61, i32* %63, align 1
  %64 = lshr i64 %54, 32
  %65 = trunc i64 %64 to i32
  %66 = getelementptr inbounds i8, i8* %2, i64 12
  %67 = bitcast i8* %66 to i32*
  store i32 %65, i32* %67, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L8CVTPS2DQI3VnWI8vec128_tE3MVnIS2_ELm4EXadL_ZNS_L18FTruncTowardZero32EfEEEEP6MemoryS7_R5StateT_T0_(%struct.Memory* returned, %struct.State* nocapture readnone dereferenceable(3376), i8* nocapture, i64)  {
  %5 = alloca <2 x i64>, align 16
  %6 = bitcast <2 x i64>* %5 to { i64, i64 }*
  %7 = inttoptr i64 %3 to float*
  %8 = load float, float* %7
  %9 = add i64 %3, 4
  %10 = inttoptr i64 %9 to float*
  %11 = load float, float* %10
  %12 = add i64 %3, 8
  %13 = inttoptr i64 %12 to float*
  %14 = load float, float* %13
  %15 = add i64 %3, 12
  %16 = inttoptr i64 %15 to float*
  %17 = load float, float* %16
  %18 = bitcast <2 x i64>* %5 to i8*
  %19 = getelementptr inbounds <2 x i64>, <2 x i64>* %5, i64 0, i64 0
  %20 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %6, i64 0, i32 1
  %21 = bitcast <2 x i64>* %5 to [4 x i32]*
  %22 = tail call float @llvm.trunc.f32(float %8) 
  %23 = tail call float @llvm.fabs.f32(float %22) 
  %24 = fcmp ogt float %23, 0x41E0000000000000
  %25 = fptosi float %22 to i32
  %26 = select i1 %24, i32 -2147483648, i32 %25
  call void @llvm.lifetime.start(i64 16, i8* nonnull %18)
  store <2 x i64> zeroinitializer, <2 x i64>* %5, align 16
  %27 = bitcast <2 x i64>* %5 to i32*
  store i32 %26, i32* %27, align 16
  %28 = load i64, i64* %19, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %18)
  %29 = tail call float @llvm.trunc.f32(float %11) 
  %30 = tail call float @llvm.fabs.f32(float %29) 
  %31 = fcmp ogt float %30, 0x41E0000000000000
  %32 = fptosi float %29 to i32
  %33 = select i1 %31, i32 -2147483648, i32 %32
  call void @llvm.lifetime.start(i64 16, i8* nonnull %18)
  store i64 %28, i64* %19, align 16
  store i64 0, i64* %20, align 8
  %34 = getelementptr inbounds [4 x i32], [4 x i32]* %21, i64 0, i64 1
  store i32 %33, i32* %34, align 4
  %35 = load i64, i64* %19, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %18)
  %36 = tail call float @llvm.trunc.f32(float %14) 
  %37 = tail call float @llvm.fabs.f32(float %36) 
  %38 = fcmp ogt float %37, 0x41E0000000000000
  %39 = fptosi float %36 to i32
  %40 = select i1 %38, i32 -2147483648, i32 %39
  call void @llvm.lifetime.start(i64 16, i8* nonnull %18)
  store i64 %35, i64* %19, align 16
  store i64 0, i64* %20, align 8
  %41 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %6, i64 0, i32 1
  %42 = bitcast i64* %41 to i32*
  store i32 %40, i32* %42, align 8
  %43 = load i64, i64* %20, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %18)
  %44 = tail call float @llvm.trunc.f32(float %17) 
  %45 = tail call float @llvm.fabs.f32(float %44) 
  %46 = fcmp ogt float %45, 0x41E0000000000000
  %47 = fptosi float %44 to i32
  %48 = select i1 %46, i32 -2147483648, i32 %47
  call void @llvm.lifetime.start(i64 16, i8* nonnull %18)
  store i64 %35, i64* %19, align 16
  store i64 %43, i64* %20, align 8
  %49 = getelementptr inbounds [4 x i32], [4 x i32]* %21, i64 0, i64 3
  store i32 %48, i32* %49, align 4
  %50 = load i64, i64* %20, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %18)
  %51 = lshr i64 %35, 32
  %52 = trunc i64 %35 to i32
  %53 = trunc i64 %51 to i32
  %54 = bitcast i8* %2 to i32*
  store i32 %52, i32* %54, align 1
  %55 = getelementptr inbounds i8, i8* %2, i64 4
  %56 = bitcast i8* %55 to i32*
  store i32 %53, i32* %56, align 1
  %57 = trunc i64 %50 to i32
  %58 = getelementptr inbounds i8, i8* %2, i64 8
  %59 = bitcast i8* %58 to i32*
  store i32 %57, i32* %59, align 1
  %60 = lshr i64 %50, 32
  %61 = trunc i64 %60 to i32
  %62 = getelementptr inbounds i8, i8* %2, i64 12
  %63 = bitcast i8* %62 to i32*
  store i32 %61, i32* %63, align 1
  ret %struct.Memory* %0
}

; Function Attrs: nounwind readnone
declare float @llvm.trunc.f32(float) 

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L8CVTPS2DQI3VnWI8vec128_tE2VnIS2_ELm4EXadL_ZNS_L18FTruncTowardZero32EfEEEEP6MemoryS7_R5StateT_T0_(%struct.Memory* readnone returned, %struct.State* nocapture readnone dereferenceable(3376), i8* nocapture, i8* nocapture readonly)  {
  %5 = alloca <2 x i64>, align 16
  %6 = bitcast <2 x i64>* %5 to { i64, i64 }*
  %7 = bitcast i8* %3 to i64*
  %8 = load i64, i64* %7, align 1
  %9 = getelementptr inbounds i8, i8* %3, i64 8
  %10 = bitcast i8* %9 to i64*
  %11 = load i64, i64* %10, align 1
  %12 = bitcast <2 x i64>* %5 to i8*
  %13 = getelementptr inbounds <2 x i64>, <2 x i64>* %5, i64 0, i64 0
  %14 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %6, i64 0, i32 1
  %15 = bitcast <2 x i64>* %5 to [4 x i32]*
  %16 = trunc i64 %8 to i32
  %17 = bitcast i32 %16 to float
  %18 = tail call float @llvm.trunc.f32(float %17) 
  %19 = tail call float @llvm.fabs.f32(float %18) 
  %20 = fcmp ogt float %19, 0x41E0000000000000
  %21 = fptosi float %18 to i32
  %22 = select i1 %20, i32 -2147483648, i32 %21
  call void @llvm.lifetime.start(i64 16, i8* nonnull %12)
  store <2 x i64> zeroinitializer, <2 x i64>* %5, align 16
  %23 = bitcast <2 x i64>* %5 to i32*
  store i32 %22, i32* %23, align 16
  %24 = load i64, i64* %13, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %12)
  %25 = lshr i64 %8, 32
  %26 = trunc i64 %25 to i32
  %27 = bitcast i32 %26 to float
  %28 = tail call float @llvm.trunc.f32(float %27) 
  %29 = tail call float @llvm.fabs.f32(float %28) 
  %30 = fcmp ogt float %29, 0x41E0000000000000
  %31 = fptosi float %28 to i32
  %32 = select i1 %30, i32 -2147483648, i32 %31
  call void @llvm.lifetime.start(i64 16, i8* nonnull %12)
  store i64 %24, i64* %13, align 16
  store i64 0, i64* %14, align 8
  %33 = getelementptr inbounds [4 x i32], [4 x i32]* %15, i64 0, i64 1
  store i32 %32, i32* %33, align 4
  %34 = load i64, i64* %13, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %12)
  %35 = trunc i64 %11 to i32
  %36 = bitcast i32 %35 to float
  %37 = tail call float @llvm.trunc.f32(float %36) 
  %38 = tail call float @llvm.fabs.f32(float %37) 
  %39 = fcmp ogt float %38, 0x41E0000000000000
  %40 = fptosi float %37 to i32
  %41 = select i1 %39, i32 -2147483648, i32 %40
  call void @llvm.lifetime.start(i64 16, i8* nonnull %12)
  store i64 %34, i64* %13, align 16
  store i64 0, i64* %14, align 8
  %42 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %6, i64 0, i32 1
  %43 = bitcast i64* %42 to i32*
  store i32 %41, i32* %43, align 8
  %44 = load i64, i64* %14, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %12)
  %45 = lshr i64 %11, 32
  %46 = trunc i64 %45 to i32
  %47 = bitcast i32 %46 to float
  %48 = tail call float @llvm.trunc.f32(float %47) 
  %49 = tail call float @llvm.fabs.f32(float %48) 
  %50 = fcmp ogt float %49, 0x41E0000000000000
  %51 = fptosi float %48 to i32
  %52 = select i1 %50, i32 -2147483648, i32 %51
  call void @llvm.lifetime.start(i64 16, i8* nonnull %12)
  store i64 %34, i64* %13, align 16
  store i64 %44, i64* %14, align 8
  %53 = getelementptr inbounds [4 x i32], [4 x i32]* %15, i64 0, i64 3
  store i32 %52, i32* %53, align 4
  %54 = load i64, i64* %14, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %12)
  %55 = lshr i64 %34, 32
  %56 = trunc i64 %34 to i32
  %57 = trunc i64 %55 to i32
  %58 = bitcast i8* %2 to i32*
  store i32 %56, i32* %58, align 1
  %59 = getelementptr inbounds i8, i8* %2, i64 4
  %60 = bitcast i8* %59 to i32*
  store i32 %57, i32* %60, align 1
  %61 = trunc i64 %54 to i32
  %62 = getelementptr inbounds i8, i8* %2, i64 8
  %63 = bitcast i8* %62 to i32*
  store i32 %61, i32* %63, align 1
  %64 = lshr i64 %54, 32
  %65 = trunc i64 %64 to i32
  %66 = getelementptr inbounds i8, i8* %2, i64 12
  %67 = bitcast i8* %66 to i32*
  store i32 %65, i32* %67, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L11CVTSS2SI_32I3MVnI7vec32_tEXadL_ZNS_L17FRoundUsingMode32EfEEEEP6MemoryS5_R5State3RnWImET_(%struct.Memory* returned, %struct.State* nocapture readnone dereferenceable(3376), i64* nocapture, i64)  {
  %5 = inttoptr i64 %3 to float*
  %6 = load float, float* %5
  %7 = tail call float @llvm.nearbyint.f32(float %6) 
  %8 = tail call float @llvm.fabs.f32(float %7) 
  %9 = fcmp ogt float %8, 0x41E0000000000000
  %10 = fptosi float %7 to i32
  %11 = zext i32 %10 to i64
  %12 = select i1 %9, i64 2147483648, i64 %11
  store i64 %12, i64* %2, align 8
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L11CVTSS2SI_32I2VnI8vec128_tEXadL_ZNS_L17FRoundUsingMode32EfEEEEP6MemoryS5_R5State3RnWImET_(%struct.Memory* readnone returned, %struct.State* nocapture readnone dereferenceable(3376), i64* nocapture, i8* nocapture readonly)  {
  %5 = bitcast i8* %3 to <2 x float>*
  %6 = load <2 x float>, <2 x float>* %5, align 1
  %7 = extractelement <2 x float> %6, i32 0
  %8 = tail call float @llvm.nearbyint.f32(float %7) 
  %9 = tail call float @llvm.fabs.f32(float %8) 
  %10 = fcmp ogt float %9, 0x41E0000000000000
  %11 = fptosi float %8 to i32
  %12 = zext i32 %11 to i64
  %13 = select i1 %10, i64 2147483648, i64 %12
  store i64 %13, i64* %2, align 8
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L11CVTSS2SI_64I3MVnI7vec32_tEXadL_ZNS_L17FRoundUsingMode32EfEEEEP6MemoryS5_R5State3RnWImET_(%struct.Memory* returned, %struct.State* nocapture readnone dereferenceable(3376), i64* nocapture, i64)  {
  %5 = inttoptr i64 %3 to float*
  %6 = load float, float* %5
  %7 = tail call float @llvm.nearbyint.f32(float %6) 
  %8 = fptosi float %7 to i64
  store i64 %8, i64* %2, align 8
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L11CVTSS2SI_64I2VnI8vec128_tEXadL_ZNS_L17FRoundUsingMode32EfEEEEP6MemoryS5_R5State3RnWImET_(%struct.Memory* readnone returned, %struct.State* nocapture readnone dereferenceable(3376), i64* nocapture, i8* nocapture readonly)  {
  %5 = bitcast i8* %3 to <2 x float>*
  %6 = load <2 x float>, <2 x float>* %5, align 1
  %7 = extractelement <2 x float> %6, i32 0
  %8 = tail call float @llvm.nearbyint.f32(float %7) 
  %9 = fptosi float %8 to i64
  store i64 %9, i64* %2, align 8
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L11CVTSS2SI_32I3MVnI7vec32_tEXadL_ZNS_L18FTruncTowardZero32EfEEEEP6MemoryS5_R5State3RnWImET_(%struct.Memory* returned, %struct.State* nocapture readnone dereferenceable(3376), i64* nocapture, i64)  {
  %5 = inttoptr i64 %3 to float*
  %6 = load float, float* %5
  %7 = tail call float @llvm.trunc.f32(float %6) 
  %8 = tail call float @llvm.fabs.f32(float %7) 
  %9 = fcmp ogt float %8, 0x41E0000000000000
  %10 = fptosi float %7 to i32
  %11 = zext i32 %10 to i64
  %12 = select i1 %9, i64 2147483648, i64 %11
  store i64 %12, i64* %2, align 8
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L11CVTSS2SI_32I2VnI8vec128_tEXadL_ZNS_L18FTruncTowardZero32EfEEEEP6MemoryS5_R5State3RnWImET_(%struct.Memory* readnone returned, %struct.State* nocapture readnone dereferenceable(3376), i64* nocapture, i8* nocapture readonly)  {
  %5 = bitcast i8* %3 to <2 x float>*
  %6 = load <2 x float>, <2 x float>* %5, align 1
  %7 = extractelement <2 x float> %6, i32 0
  %8 = tail call float @llvm.trunc.f32(float %7) 
  %9 = tail call float @llvm.fabs.f32(float %8) 
  %10 = fcmp ogt float %9, 0x41E0000000000000
  %11 = fptosi float %8 to i32
  %12 = zext i32 %11 to i64
  %13 = select i1 %10, i64 2147483648, i64 %12
  store i64 %13, i64* %2, align 8
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L11CVTSS2SI_64I3MVnI7vec32_tEXadL_ZNS_L18FTruncTowardZero32EfEEEEP6MemoryS5_R5State3RnWImET_(%struct.Memory* returned, %struct.State* nocapture readnone dereferenceable(3376), i64* nocapture, i64)  {
  %5 = inttoptr i64 %3 to float*
  %6 = load float, float* %5
  %7 = tail call float @llvm.trunc.f32(float %6) 
  %8 = fptosi float %7 to i64
  store i64 %8, i64* %2, align 8
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L11CVTSS2SI_64I2VnI8vec128_tEXadL_ZNS_L18FTruncTowardZero32EfEEEEP6MemoryS5_R5State3RnWImET_(%struct.Memory* readnone returned, %struct.State* nocapture readnone dereferenceable(3376), i64* nocapture, i8* nocapture readonly)  {
  %5 = bitcast i8* %3 to <2 x float>*
  %6 = load <2 x float>, <2 x float>* %5, align 1
  %7 = extractelement <2 x float> %6, i32 0
  %8 = tail call float @llvm.trunc.f32(float %7) 
  %9 = fptosi float %8 to i64
  store i64 %9, i64* %2, align 8
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L11CVTSD2SI_32I3MVnI7vec64_tEXadL_ZNS_L17FRoundUsingMode64EdEEEEP6MemoryS5_R5State3RnWImET_(%struct.Memory* returned, %struct.State* nocapture readnone dereferenceable(3376), i64* nocapture, i64)  {
  %5 = inttoptr i64 %3 to double*
  %6 = load double, double* %5
  %7 = tail call double @llvm.nearbyint.f64(double %6) 
  %8 = tail call double @llvm.fabs.f64(double %7) 
  %9 = fcmp ogt double %8, 0x41DFFFFFFFC00000
  %10 = fptosi double %7 to i32
  %11 = zext i32 %10 to i64
  %12 = select i1 %9, i64 2147483648, i64 %11
  store i64 %12, i64* %2, align 8
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L11CVTSD2SI_32I2VnI8vec128_tEXadL_ZNS_L17FRoundUsingMode64EdEEEEP6MemoryS5_R5State3RnWImET_(%struct.Memory* readnone returned, %struct.State* nocapture readnone dereferenceable(3376), i64* nocapture, i8* nocapture readonly)  {
  %5 = bitcast i8* %3 to double*
  %6 = load double, double* %5, align 1
  %7 = tail call double @llvm.nearbyint.f64(double %6) 
  %8 = tail call double @llvm.fabs.f64(double %7) 
  %9 = fcmp ogt double %8, 0x41DFFFFFFFC00000
  %10 = fptosi double %7 to i32
  %11 = zext i32 %10 to i64
  %12 = select i1 %9, i64 2147483648, i64 %11
  store i64 %12, i64* %2, align 8
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L11CVTSD2SI_64I3MVnI7vec64_tEXadL_ZNS_L17FRoundUsingMode64EdEEEEP6MemoryS5_R5State3RnWImET_(%struct.Memory* returned, %struct.State* nocapture readnone dereferenceable(3376), i64* nocapture, i64)  {
  %5 = inttoptr i64 %3 to double*
  %6 = load double, double* %5
  %7 = tail call double @llvm.nearbyint.f64(double %6) 
  %8 = tail call double @llvm.fabs.f64(double %7) 
  %9 = fcmp ogt double %8, 0x43E0000000000000
  %10 = fptosi double %7 to i64
  %11 = select i1 %9, i64 -9223372036854775808, i64 %10
  store i64 %11, i64* %2, align 8
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L11CVTSD2SI_64I2VnI8vec128_tEXadL_ZNS_L17FRoundUsingMode64EdEEEEP6MemoryS5_R5State3RnWImET_(%struct.Memory* readnone returned, %struct.State* nocapture readnone dereferenceable(3376), i64* nocapture, i8* nocapture readonly)  {
  %5 = bitcast i8* %3 to double*
  %6 = load double, double* %5, align 1
  %7 = tail call double @llvm.nearbyint.f64(double %6) 
  %8 = tail call double @llvm.fabs.f64(double %7) 
  %9 = fcmp ogt double %8, 0x43E0000000000000
  %10 = fptosi double %7 to i64
  %11 = select i1 %9, i64 -9223372036854775808, i64 %10
  store i64 %11, i64* %2, align 8
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L11CVTSD2SI_32I3MVnI7vec64_tEXadL_ZNS_L18FTruncTowardZero64EdEEEEP6MemoryS5_R5State3RnWImET_(%struct.Memory* returned, %struct.State* nocapture readnone dereferenceable(3376), i64* nocapture, i64)  {
  %5 = inttoptr i64 %3 to double*
  %6 = load double, double* %5
  %7 = tail call double @llvm.trunc.f64(double %6) 
  %8 = tail call double @llvm.fabs.f64(double %7) 
  %9 = fcmp ogt double %8, 0x41DFFFFFFFC00000
  %10 = fptosi double %7 to i32
  %11 = zext i32 %10 to i64
  %12 = select i1 %9, i64 2147483648, i64 %11
  store i64 %12, i64* %2, align 8
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L11CVTSD2SI_32I2VnI8vec128_tEXadL_ZNS_L18FTruncTowardZero64EdEEEEP6MemoryS5_R5State3RnWImET_(%struct.Memory* readnone returned, %struct.State* nocapture readnone dereferenceable(3376), i64* nocapture, i8* nocapture readonly)  {
  %5 = bitcast i8* %3 to double*
  %6 = load double, double* %5, align 1
  %7 = tail call double @llvm.trunc.f64(double %6) 
  %8 = tail call double @llvm.fabs.f64(double %7) 
  %9 = fcmp ogt double %8, 0x41DFFFFFFFC00000
  %10 = fptosi double %7 to i32
  %11 = zext i32 %10 to i64
  %12 = select i1 %9, i64 2147483648, i64 %11
  store i64 %12, i64* %2, align 8
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L11CVTSD2SI_64I3MVnI7vec64_tEXadL_ZNS_L18FTruncTowardZero64EdEEEEP6MemoryS5_R5State3RnWImET_(%struct.Memory* returned, %struct.State* nocapture readnone dereferenceable(3376), i64* nocapture, i64)  {
  %5 = inttoptr i64 %3 to double*
  %6 = load double, double* %5
  %7 = tail call double @llvm.trunc.f64(double %6) 
  %8 = tail call double @llvm.fabs.f64(double %7) 
  %9 = fcmp ogt double %8, 0x43E0000000000000
  %10 = fptosi double %7 to i64
  %11 = select i1 %9, i64 -9223372036854775808, i64 %10
  store i64 %11, i64* %2, align 8
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L11CVTSD2SI_64I2VnI8vec128_tEXadL_ZNS_L18FTruncTowardZero64EdEEEEP6MemoryS5_R5State3RnWImET_(%struct.Memory* readnone returned, %struct.State* nocapture readnone dereferenceable(3376), i64* nocapture, i8* nocapture readonly)  {
  %5 = bitcast i8* %3 to double*
  %6 = load double, double* %5, align 1
  %7 = tail call double @llvm.trunc.f64(double %6) 
  %8 = tail call double @llvm.fabs.f64(double %7) 
  %9 = fcmp ogt double %8, 0x43E0000000000000
  %10 = fptosi double %7 to i64
  %11 = select i1 %9, i64 -9223372036854775808, i64 %10
  store i64 %11, i64* %2, align 8
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L8CVTSD2SSI3MVnI7vec64_tEEEP6MemoryS5_R5State3VnWI8vec128_tET_(%struct.Memory* returned, %struct.State* nocapture readnone dereferenceable(3376), i8* nocapture, i64)  {
  %5 = bitcast i8* %2 to <2 x i32>*
  %6 = load <2 x i32>, <2 x i32>* %5, align 1
  %7 = getelementptr inbounds i8, i8* %2, i64 8
  %8 = bitcast i8* %7 to <2 x i32>*
  %9 = load <2 x i32>, <2 x i32>* %8, align 1
  %10 = inttoptr i64 %3 to double*
  %11 = load double, double* %10
  %12 = fptrunc double %11 to float
  %13 = bitcast i8* %2 to float*
  store float %12, float* %13, align 1
  %14 = extractelement <2 x i32> %6, i32 1
  %15 = getelementptr inbounds i8, i8* %2, i64 4
  %16 = bitcast i8* %15 to i32*
  store i32 %14, i32* %16, align 1
  %17 = extractelement <2 x i32> %9, i32 0
  %18 = bitcast i8* %7 to i32*
  store i32 %17, i32* %18, align 1
  %19 = extractelement <2 x i32> %9, i32 1
  %20 = getelementptr inbounds i8, i8* %2, i64 12
  %21 = bitcast i8* %20 to i32*
  store i32 %19, i32* %21, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L8CVTSD2SSI2VnI8vec128_tEEEP6MemoryS5_R5State3VnWIS2_ET_(%struct.Memory* readnone returned, %struct.State* nocapture readnone dereferenceable(3376), i8* nocapture, i8* nocapture readonly)  {
  %5 = bitcast i8* %2 to <2 x i32>*
  %6 = load <2 x i32>, <2 x i32>* %5, align 1
  %7 = getelementptr inbounds i8, i8* %2, i64 8
  %8 = bitcast i8* %7 to <2 x i32>*
  %9 = load <2 x i32>, <2 x i32>* %8, align 1
  %10 = bitcast i8* %3 to double*
  %11 = load double, double* %10, align 1
  %12 = fptrunc double %11 to float
  %13 = bitcast i8* %2 to float*
  store float %12, float* %13, align 1
  %14 = extractelement <2 x i32> %6, i32 1
  %15 = getelementptr inbounds i8, i8* %2, i64 4
  %16 = bitcast i8* %15 to i32*
  store i32 %14, i32* %16, align 1
  %17 = extractelement <2 x i32> %9, i32 0
  %18 = bitcast i8* %7 to i32*
  store i32 %17, i32* %18, align 1
  %19 = extractelement <2 x i32> %9, i32 1
  %20 = getelementptr inbounds i8, i8* %2, i64 12
  %21 = bitcast i8* %20 to i32*
  store i32 %19, i32* %21, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L8CVTSI2SSI2MnIjEEEP6MemoryS4_R5State3VnWI8vec128_tET_(%struct.Memory*, %struct.State* nocapture readnone dereferenceable(3376), i8* nocapture, i64)  {
  %5 = bitcast i8* %2 to <2 x i32>*
  %6 = load <2 x i32>, <2 x i32>* %5, align 1
  %7 = getelementptr inbounds i8, i8* %2, i64 8
  %8 = bitcast i8* %7 to <2 x i32>*
  %9 = load <2 x i32>, <2 x i32>* %8, align 1
  %10 = inttoptr i64 %3 to i32*
  %11 = load i32, i32* %10
  %12 = sitofp i32 %11 to float
  %13 = bitcast i8* %2 to float*
  store float %12, float* %13, align 1
  %14 = extractelement <2 x i32> %6, i32 1
  %15 = getelementptr inbounds i8, i8* %2, i64 4
  %16 = bitcast i8* %15 to i32*
  store i32 %14, i32* %16, align 1
  %17 = extractelement <2 x i32> %9, i32 0
  %18 = bitcast i8* %7 to i32*
  store i32 %17, i32* %18, align 1
  %19 = extractelement <2 x i32> %9, i32 1
  %20 = getelementptr inbounds i8, i8* %2, i64 12
  %21 = bitcast i8* %20 to i32*
  store i32 %19, i32* %21, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L8CVTSI2SSI2RnIjEEEP6MemoryS4_R5State3VnWI8vec128_tET_(%struct.Memory* readnone returned, %struct.State* nocapture readnone dereferenceable(3376), i8* nocapture, i64)  {
  %5 = bitcast i8* %2 to <2 x i32>*
  %6 = load <2 x i32>, <2 x i32>* %5, align 1
  %7 = getelementptr inbounds i8, i8* %2, i64 8
  %8 = bitcast i8* %7 to <2 x i32>*
  %9 = load <2 x i32>, <2 x i32>* %8, align 1
  %10 = trunc i64 %3 to i32
  %11 = sitofp i32 %10 to float
  %12 = bitcast i8* %2 to float*
  store float %11, float* %12, align 1
  %13 = extractelement <2 x i32> %6, i32 1
  %14 = getelementptr inbounds i8, i8* %2, i64 4
  %15 = bitcast i8* %14 to i32*
  store i32 %13, i32* %15, align 1
  %16 = extractelement <2 x i32> %9, i32 0
  %17 = bitcast i8* %7 to i32*
  store i32 %16, i32* %17, align 1
  %18 = extractelement <2 x i32> %9, i32 1
  %19 = getelementptr inbounds i8, i8* %2, i64 12
  %20 = bitcast i8* %19 to i32*
  store i32 %18, i32* %20, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L8CVTSI2SSI2MnImEEEP6MemoryS4_R5State3VnWI8vec128_tET_(%struct.Memory*, %struct.State* nocapture readnone dereferenceable(3376), i8* nocapture, i64)  {
  %5 = bitcast i8* %2 to <2 x i32>*
  %6 = load <2 x i32>, <2 x i32>* %5, align 1
  %7 = getelementptr inbounds i8, i8* %2, i64 8
  %8 = bitcast i8* %7 to <2 x i32>*
  %9 = load <2 x i32>, <2 x i32>* %8, align 1
  %10 = inttoptr i64 %3 to i64*
  %11 = load i64, i64* %10
  %12 = sitofp i64 %11 to float
  %13 = bitcast i8* %2 to float*
  store float %12, float* %13, align 1
  %14 = extractelement <2 x i32> %6, i32 1
  %15 = getelementptr inbounds i8, i8* %2, i64 4
  %16 = bitcast i8* %15 to i32*
  store i32 %14, i32* %16, align 1
  %17 = extractelement <2 x i32> %9, i32 0
  %18 = bitcast i8* %7 to i32*
  store i32 %17, i32* %18, align 1
  %19 = extractelement <2 x i32> %9, i32 1
  %20 = getelementptr inbounds i8, i8* %2, i64 12
  %21 = bitcast i8* %20 to i32*
  store i32 %19, i32* %21, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L8CVTSI2SSI2RnImEEEP6MemoryS4_R5State3VnWI8vec128_tET_(%struct.Memory* readnone returned, %struct.State* nocapture readnone dereferenceable(3376), i8* nocapture, i64)  {
  %5 = bitcast i8* %2 to <2 x i32>*
  %6 = load <2 x i32>, <2 x i32>* %5, align 1
  %7 = getelementptr inbounds i8, i8* %2, i64 8
  %8 = bitcast i8* %7 to <2 x i32>*
  %9 = load <2 x i32>, <2 x i32>* %8, align 1
  %10 = sitofp i64 %3 to float
  %11 = bitcast i8* %2 to float*
  store float %10, float* %11, align 1
  %12 = extractelement <2 x i32> %6, i32 1
  %13 = getelementptr inbounds i8, i8* %2, i64 4
  %14 = bitcast i8* %13 to i32*
  store i32 %12, i32* %14, align 1
  %15 = extractelement <2 x i32> %9, i32 0
  %16 = bitcast i8* %7 to i32*
  store i32 %15, i32* %16, align 1
  %17 = extractelement <2 x i32> %9, i32 1
  %18 = getelementptr inbounds i8, i8* %2, i64 12
  %19 = bitcast i8* %18 to i32*
  store i32 %17, i32* %19, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L8CVTSI2SDI2MnIjEEEP6MemoryS4_R5State3VnWI8vec128_tET_(%struct.Memory*, %struct.State* nocapture readnone dereferenceable(3376), i8* nocapture, i64)  {
  %5 = inttoptr i64 %3 to i32*
  %6 = load i32, i32* %5
  %7 = sitofp i32 %6 to double
  %8 = bitcast i8* %2 to double*
  store double %7, double* %8, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L8CVTSI2SDI2RnIjEEEP6MemoryS4_R5State3VnWI8vec128_tET_(%struct.Memory* readnone returned, %struct.State* nocapture readnone dereferenceable(3376), i8* nocapture, i64)  {
  %5 = trunc i64 %3 to i32
  %6 = sitofp i32 %5 to double
  %7 = bitcast i8* %2 to double*
  store double %6, double* %7, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L8CVTSI2SDI2MnImEEEP6MemoryS4_R5State3VnWI8vec128_tET_(%struct.Memory*, %struct.State* nocapture readnone dereferenceable(3376), i8* nocapture, i64)  {
  %5 = inttoptr i64 %3 to i64*
  %6 = load i64, i64* %5
  %7 = sitofp i64 %6 to double
  %8 = bitcast i8* %2 to double*
  store double %7, double* %8, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L8CVTSI2SDI2RnImEEEP6MemoryS4_R5State3VnWI8vec128_tET_(%struct.Memory* readnone returned, %struct.State* nocapture readnone dereferenceable(3376), i8* nocapture, i64)  {
  %5 = sitofp i64 %3 to double
  %6 = bitcast i8* %2 to double*
  store double %5, double* %6, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L8CVTSS2SDI3MVnI7vec32_tEEEP6MemoryS5_R5State3VnWI8vec128_tET_(%struct.Memory* returned, %struct.State* nocapture readnone dereferenceable(3376), i8* nocapture, i64)  {
  %5 = inttoptr i64 %3 to float*
  %6 = load float, float* %5
  %7 = fpext float %6 to double
  %8 = bitcast i8* %2 to double*
  store double %7, double* %8, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L8CVTSS2SDI2VnI8vec128_tEEEP6MemoryS5_R5State3VnWIS2_ET_(%struct.Memory* readnone returned, %struct.State* nocapture readnone dereferenceable(3376), i8* nocapture, i8* nocapture readonly)  {
  %5 = bitcast i8* %3 to <2 x float>*
  %6 = load <2 x float>, <2 x float>* %5, align 1
  %7 = extractelement <2 x float> %6, i32 0
  %8 = fpext float %7 to double
  %9 = bitcast i8* %2 to double*
  store double %8, double* %9, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L8CVTPS2PDI3VnWI8vec128_tE3MVnI7vec64_tELm2EEEP6MemoryS8_R5StateT_T0_(%struct.Memory* returned, %struct.State* nocapture readnone dereferenceable(3376), i8* nocapture, i64)  {
  %5 = inttoptr i64 %3 to float*
  %6 = load float, float* %5
  %7 = add i64 %3, 4
  %8 = inttoptr i64 %7 to float*
  %9 = load float, float* %8
  %10 = insertelement <2 x float> undef, float %6, i32 0
  %11 = insertelement <2 x float> %10, float %9, i32 1
  %12 = fpext <2 x float> %11 to <2 x double>
  %13 = bitcast i8* %2 to <2 x double>*
  store <2 x double> %12, <2 x double>* %13, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L8CVTPS2PDI3VnWI8vec128_tE2VnIS2_ELm2EEEP6MemoryS7_R5StateT_T0_(%struct.Memory* readnone returned, %struct.State* nocapture readnone dereferenceable(3376), i8* nocapture, i8* nocapture readonly)  {
  %5 = bitcast i8* %3 to i64*
  %6 = load i64, i64* %5, align 1
  %7 = trunc i64 %6 to i32
  %8 = bitcast i32 %7 to float
  %9 = fpext float %8 to double
  %10 = lshr i64 %6, 32
  %11 = trunc i64 %10 to i32
  %12 = bitcast i32 %11 to float
  %13 = fpext float %12 to double
  %14 = bitcast i8* %2 to double*
  store double %9, double* %14, align 1
  %15 = getelementptr inbounds i8, i8* %2, i64 8
  %16 = bitcast i8* %15 to double*
  store double %13, double* %16, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L8CVTPD2PSI3VnWI8vec128_tE3MVnIS2_ELm2EEEP6MemoryS7_R5StateT_T0_(%struct.Memory* returned, %struct.State* nocapture readnone dereferenceable(3376), i8* nocapture, i64)  {
  %5 = alloca { <2 x float>, <2 x float> }, align 8
  %6 = inttoptr i64 %3 to double*
  %7 = load double, double* %6
  %8 = add i64 %3, 8
  %9 = inttoptr i64 %8 to double*
  %10 = load double, double* %9
  %11 = bitcast { <2 x float>, <2 x float> }* %5 to i8*
  %12 = bitcast { <2 x float>, <2 x float> }* %5 to <2 x i32>*
  %13 = getelementptr inbounds { <2 x float>, <2 x float> }, { <2 x float>, <2 x float> }* %5, i64 0, i32 1
  %14 = bitcast <2 x float>* %13 to <2 x i32>*
  %15 = bitcast { <2 x float>, <2 x float> }* %5 to [4 x float]*
  %16 = fptrunc double %7 to float
  call void @llvm.lifetime.start(i64 16, i8* nonnull %11)
  store <2 x i32> zeroinitializer, <2 x i32>* %12, align 8
  store <2 x i32> zeroinitializer, <2 x i32>* %14, align 8
  %17 = getelementptr inbounds { <2 x float>, <2 x float> }, { <2 x float>, <2 x float> }* %5, i64 0, i32 0, i64 0
  store float %16, float* %17, align 8
  %18 = bitcast { <2 x float>, <2 x float> }* %5 to i64*
  %19 = load i64, i64* %18, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %11)
  %20 = fptrunc double %10 to float
  call void @llvm.lifetime.start(i64 16, i8* nonnull %11)
  %21 = bitcast { <2 x float>, <2 x float> }* %5 to i64*
  store i64 %19, i64* %21, align 8
  store <2 x i32> zeroinitializer, <2 x i32>* %14, align 8
  %22 = getelementptr inbounds [4 x float], [4 x float]* %15, i64 0, i64 1
  store float %20, float* %22, align 4
  %23 = bitcast { <2 x float>, <2 x float> }* %5 to <2 x i32>*
  %24 = load <2 x i32>, <2 x i32>* %23, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %11)
  %25 = extractelement <2 x i32> %24, i32 0
  %26 = bitcast i8* %2 to i32*
  store i32 %25, i32* %26, align 1
  %27 = extractelement <2 x i32> %24, i32 1
  %28 = getelementptr inbounds i8, i8* %2, i64 4
  %29 = bitcast i8* %28 to i32*
  store i32 %27, i32* %29, align 1
  %30 = getelementptr inbounds i8, i8* %2, i64 8
  %31 = bitcast i8* %30 to i32*
  store i32 0, i32* %31, align 1
  %32 = getelementptr inbounds i8, i8* %2, i64 12
  %33 = bitcast i8* %32 to i32*
  store i32 0, i32* %33, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L8CVTPD2PSI3VnWI8vec128_tE2VnIS2_ELm2EEEP6MemoryS7_R5StateT_T0_(%struct.Memory* readnone returned, %struct.State* nocapture readnone dereferenceable(3376), i8* nocapture, i8* nocapture readonly)  {
  %5 = alloca { <2 x float>, <2 x float> }, align 8
  %6 = bitcast i8* %3 to double*
  %7 = load double, double* %6, align 1
  %8 = getelementptr inbounds i8, i8* %3, i64 8
  %9 = bitcast i8* %8 to double*
  %10 = load double, double* %9, align 1
  %11 = bitcast { <2 x float>, <2 x float> }* %5 to i8*
  %12 = bitcast { <2 x float>, <2 x float> }* %5 to <2 x i32>*
  %13 = getelementptr inbounds { <2 x float>, <2 x float> }, { <2 x float>, <2 x float> }* %5, i64 0, i32 1
  %14 = bitcast <2 x float>* %13 to <2 x i32>*
  %15 = bitcast { <2 x float>, <2 x float> }* %5 to [4 x float]*
  %16 = fptrunc double %7 to float
  call void @llvm.lifetime.start(i64 16, i8* nonnull %11)
  store <2 x i32> zeroinitializer, <2 x i32>* %12, align 8
  store <2 x i32> zeroinitializer, <2 x i32>* %14, align 8
  %17 = getelementptr inbounds { <2 x float>, <2 x float> }, { <2 x float>, <2 x float> }* %5, i64 0, i32 0, i64 0
  store float %16, float* %17, align 8
  %18 = bitcast { <2 x float>, <2 x float> }* %5 to i64*
  %19 = load i64, i64* %18, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %11)
  %20 = fptrunc double %10 to float
  call void @llvm.lifetime.start(i64 16, i8* nonnull %11)
  %21 = bitcast { <2 x float>, <2 x float> }* %5 to i64*
  store i64 %19, i64* %21, align 8
  store <2 x i32> zeroinitializer, <2 x i32>* %14, align 8
  %22 = getelementptr inbounds [4 x float], [4 x float]* %15, i64 0, i64 1
  store float %20, float* %22, align 4
  %23 = bitcast { <2 x float>, <2 x float> }* %5 to <2 x i32>*
  %24 = load <2 x i32>, <2 x i32>* %23, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %11)
  %25 = extractelement <2 x i32> %24, i32 0
  %26 = bitcast i8* %2 to i32*
  store i32 %25, i32* %26, align 1
  %27 = extractelement <2 x i32> %24, i32 1
  %28 = getelementptr inbounds i8, i8* %2, i64 4
  %29 = bitcast i8* %28 to i32*
  store i32 %27, i32* %29, align 1
  %30 = getelementptr inbounds i8, i8* %2, i64 8
  %31 = bitcast i8* %30 to i32*
  store i32 0, i32* %31, align 1
  %32 = getelementptr inbounds i8, i8* %2, i64 12
  %33 = bitcast i8* %32 to i32*
  store i32 0, i32* %33, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline norecurse nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3MOVI3RnWIhE2InIhEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* readnone returned, %struct.State* nocapture readnone dereferenceable(3376), i8* nocapture, i64)  {
  %5 = trunc i64 %3 to i8
  store i8 %5, i8* %2, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind readnone
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3MOVI3MnWIhE2InIhEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* readnone, %struct.State* nocapture readnone dereferenceable(3376), i64, i64)  {
  %5 = trunc i64 %3 to i8
  %6 = inttoptr i64 %2 to i8*
  store i8 %5, i8* %6
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline norecurse nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3MOVI3RnWItE2InItEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* readnone returned, %struct.State* nocapture readnone dereferenceable(3376), i16* nocapture, i64)  {
  %5 = trunc i64 %3 to i16
  store i16 %5, i16* %2, align 2
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline norecurse nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3MOVI3RnWImE2InIjEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* readnone returned, %struct.State* nocapture readnone dereferenceable(3376), i64* nocapture, i64)  {
  %5 = and i64 %3, 4294967295
  store i64 %5, i64* %2, align 8
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline norecurse nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3MOVI3RnWImE2InImEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* readnone returned, %struct.State* nocapture readnone dereferenceable(3376), i64* nocapture, i64)  {
  store i64 %3, i64* %2, align 8
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind readnone
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3MOVI3MnWItE2InItEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* readnone, %struct.State* nocapture readnone dereferenceable(3376), i64, i64)  {
  %5 = trunc i64 %3 to i16
  %6 = inttoptr i64 %2 to i16*
  store i16 %5, i16* %6
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind readnone
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3MOVI3MnWIjE2InIjEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* readnone, %struct.State* nocapture readnone dereferenceable(3376), i64, i64)  {
  %5 = trunc i64 %3 to i32
  %6 = inttoptr i64 %2 to i32*
  store i32 %5, i32* %6
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind readnone
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3MOVI3MnWImE2InImEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* readnone, %struct.State* nocapture readnone dereferenceable(3376), i64, i64)  {
  %5 = inttoptr i64 %2 to i64*
  store i64 %3, i64* %5
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline norecurse nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3MOVI3RnWIhE2RnIhEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* readnone returned, %struct.State* nocapture readnone dereferenceable(3376), i8* nocapture, i64)  {
  %5 = trunc i64 %3 to i8
  store i8 %5, i8* %2, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind readnone
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3MOVI3MnWIhE2RnIhEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* readnone, %struct.State* nocapture readnone dereferenceable(3376), i64, i64)  {
  %5 = trunc i64 %3 to i8
  %6 = inttoptr i64 %2 to i8*
  store i8 %5, i8* %6
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind readnone
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3MOVI3MnWItE2RnItEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* readnone, %struct.State* nocapture readnone dereferenceable(3376), i64, i64)  {
  %5 = trunc i64 %3 to i16
  %6 = inttoptr i64 %2 to i16*
  store i16 %5, i16* %6
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind readnone
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3MOVI3MnWIjE2RnIjEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* readnone, %struct.State* nocapture readnone dereferenceable(3376), i64, i64)  {
  %5 = trunc i64 %3 to i32
  %6 = inttoptr i64 %2 to i32*
  store i32 %5, i32* %6
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind readnone
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3MOVI3MnWImE2RnImEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* readnone, %struct.State* nocapture readnone dereferenceable(3376), i64, i64)  {
  %5 = inttoptr i64 %2 to i64*
  store i64 %3, i64* %5
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline norecurse nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3MOVI3RnWItE2RnItEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* readnone returned, %struct.State* nocapture readnone dereferenceable(3376), i16* nocapture, i64)  {
  %5 = trunc i64 %3 to i16
  store i16 %5, i16* %2, align 2
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline norecurse nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3MOVI3RnWImE2RnIjEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* readnone returned, %struct.State* nocapture readnone dereferenceable(3376), i64* nocapture, i64)  {
  %5 = and i64 %3, 4294967295
  store i64 %5, i64* %2, align 8
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline norecurse nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3MOVI3RnWImE2RnImEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* readnone returned, %struct.State* nocapture readnone dereferenceable(3376), i64* nocapture, i64)  {
  store i64 %3, i64* %2, align 8
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3MOVI3RnWIhE2MnIhEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* returned, %struct.State* nocapture readnone dereferenceable(3376), i8* nocapture, i64)  {
  %5 = inttoptr i64 %3 to i8*
  %6 = load i8, i8* %5
  store i8 %6, i8* %2, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3MOVI3RnWItE2MnItEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* returned, %struct.State* nocapture readnone dereferenceable(3376), i16* nocapture, i64)  {
  %5 = inttoptr i64 %3 to i16*
  %6 = load i16, i16* %5
  store i16 %6, i16* %2, align 2
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3MOVI3RnWImE2MnIjEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* returned, %struct.State* nocapture readnone dereferenceable(3376), i64* nocapture, i64)  {
  %5 = inttoptr i64 %3 to i32*
  %6 = load i32, i32* %5
  %7 = zext i32 %6 to i64
  store i64 %7, i64* %2, align 8
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3MOVI3RnWImE2MnImEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* returned, %struct.State* nocapture readnone dereferenceable(3376), i64* nocapture, i64)  {
  %5 = inttoptr i64 %3 to i64*
  %6 = load i64, i64* %5
  store i64 %6, i64* %2, align 8
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L4XCHGI3MnWIhE2MnIhE3RnWIhE2RnIhEEEP6MemorySA_R5StateT_T0_T1_T2_(%struct.Memory*, %struct.State* nocapture readnone dereferenceable(3376), i64, i64, i8* nocapture, i64)  {
  %7 = inttoptr i64 %3 to i8*
  %8 = load i8, i8* %7
  %9 = trunc i64 %5 to i8
  %10 = inttoptr i64 %2 to i8*
  store i8 %9, i8* %10
  store i8 %8, i8* %4, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline norecurse nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L4XCHGI3RnWIhE2RnIhES2_S4_EEP6MemoryS6_R5StateT_T0_T1_T2_(%struct.Memory* readnone returned, %struct.State* nocapture readnone dereferenceable(3376), i8* nocapture, i64, i8* nocapture, i64)  {
  %7 = trunc i64 %3 to i8
  %8 = trunc i64 %5 to i8
  store i8 %8, i8* %2, align 1
  store i8 %7, i8* %4, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L4XCHGI3MnWItE2MnItE3RnWItE2RnItEEEP6MemorySA_R5StateT_T0_T1_T2_(%struct.Memory*, %struct.State* nocapture readnone dereferenceable(3376), i64, i64, i16* nocapture, i64)  {
  %7 = inttoptr i64 %3 to i16*
  %8 = load i16, i16* %7
  %9 = trunc i64 %5 to i16
  %10 = inttoptr i64 %2 to i16*
  store i16 %9, i16* %10
  store i16 %8, i16* %4, align 2
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L4XCHGI3MnWIjE2MnIjE3RnWImE2RnIjEEEP6MemorySA_R5StateT_T0_T1_T2_(%struct.Memory*, %struct.State* nocapture readnone dereferenceable(3376), i64, i64, i64* nocapture, i64)  {
  %7 = inttoptr i64 %3 to i32*
  %8 = load i32, i32* %7
  %9 = trunc i64 %5 to i32
  %10 = inttoptr i64 %2 to i32*
  store i32 %9, i32* %10
  %11 = zext i32 %8 to i64
  store i64 %11, i64* %4, align 8
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L4XCHGI3MnWImE2MnImE3RnWImE2RnImEEEP6MemorySA_R5StateT_T0_T1_T2_(%struct.Memory*, %struct.State* nocapture readnone dereferenceable(3376), i64, i64, i64* nocapture, i64)  {
  %7 = inttoptr i64 %3 to i64*
  %8 = load i64, i64* %7
  %9 = inttoptr i64 %2 to i64*
  store i64 %5, i64* %9
  store i64 %8, i64* %4, align 8
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline norecurse nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L4XCHGI3RnWItE2RnItES2_S4_EEP6MemoryS6_R5StateT_T0_T1_T2_(%struct.Memory* readnone returned, %struct.State* nocapture readnone dereferenceable(3376), i16* nocapture, i64, i16* nocapture, i64)  {
  %7 = trunc i64 %3 to i16
  %8 = trunc i64 %5 to i16
  store i16 %8, i16* %2, align 2
  store i16 %7, i16* %4, align 2
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline norecurse nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L4XCHGI3RnWImE2RnIjES2_S4_EEP6MemoryS6_R5StateT_T0_T1_T2_(%struct.Memory* readnone returned, %struct.State* nocapture readnone dereferenceable(3376), i64* nocapture, i64, i64* nocapture, i64)  {
  %7 = and i64 %5, 4294967295
  store i64 %7, i64* %2, align 8
  %8 = and i64 %3, 4294967295
  store i64 %8, i64* %4, align 8
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline norecurse nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L4XCHGI3RnWImE2RnImES2_S4_EEP6MemoryS6_R5StateT_T0_T1_T2_(%struct.Memory* readnone returned, %struct.State* nocapture readnone dereferenceable(3376), i64* nocapture, i64, i64* nocapture, i64)  {
  store i64 %5, i64* %2, align 8
  store i64 %3, i64* %4, align 8
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L4MOVQI4RVnWI7vec64_tE3MVnIS2_EEEP6MemoryS7_R5StateT_T0_(%struct.Memory* returned, %struct.State* nocapture readnone dereferenceable(3376), i64* nocapture, i64)  {
  %5 = inttoptr i64 %3 to i64*
  %6 = load i64, i64* %5
  store i64 %6, i64* %2, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L4MOVQI4RVnWI7vec64_tE3RVnIS2_EEEP6MemoryS7_R5StateT_T0_(%struct.Memory* readnone returned, %struct.State* nocapture readnone dereferenceable(3376), i64* nocapture, i64)  {
  store i64 %3, i64* %2, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind readnone
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L4MOVQI4MVnWI7vec64_tE3RVnIS2_EEEP6MemoryS7_R5StateT_T0_(%struct.Memory* readnone, %struct.State* nocapture readnone dereferenceable(3376), i64, i64)  {
  %5 = inttoptr i64 %2 to i64*
  store i64 %3, i64* %5
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L4MOVQI3VnWI8vec128_tE3MVnI7vec64_tEEEP6MemoryS8_R5StateT_T0_(%struct.Memory* returned, %struct.State* nocapture readnone dereferenceable(3376), i8* nocapture, i64)  {
  %5 = inttoptr i64 %3 to i64*
  %6 = load i64, i64* %5
  %7 = bitcast i8* %2 to i64*
  store i64 %6, i64* %7, align 1
  %8 = getelementptr inbounds i8, i8* %2, i64 8
  %9 = bitcast i8* %8 to i64*
  store i64 0, i64* %9, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L4MOVQI3VnWI8vec128_tE3RVnI7vec64_tEEEP6MemoryS8_R5StateT_T0_(%struct.Memory* readnone returned, %struct.State* nocapture readnone dereferenceable(3376), i8* nocapture, i64)  {
  %5 = bitcast i8* %2 to i64*
  store i64 %3, i64* %5, align 1
  %6 = getelementptr inbounds i8, i8* %2, i64 8
  %7 = bitcast i8* %6 to i64*
  store i64 0, i64* %7, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind readonly
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L4MOVQI4MVnWI7vec64_tE2VnI8vec128_tEEEP6MemoryS8_R5StateT_T0_(%struct.Memory* readnone, %struct.State* nocapture readnone dereferenceable(3376), i64, i8* nocapture readonly)  {
  %5 = bitcast i8* %3 to i64*
  %6 = load i64, i64* %5, align 1
  %7 = inttoptr i64 %2 to i64*
  store i64 %6, i64* %7
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L4MOVQI4RVnWI7vec64_tE2VnI8vec128_tEEEP6MemoryS8_R5StateT_T0_(%struct.Memory* readnone returned, %struct.State* nocapture readnone dereferenceable(3376), i64* nocapture, i8* nocapture readonly)  {
  %5 = bitcast i8* %3 to i64*
  %6 = load i64, i64* %5, align 1
  store i64 %6, i64* %2, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L4MOVQI3VnWI8vec128_tE2VnIS2_EEEP6MemoryS7_R5StateT_T0_(%struct.Memory* readnone returned, %struct.State* nocapture readnone dereferenceable(3376), i8* nocapture, i8* nocapture readonly)  {
  %5 = bitcast i8* %3 to i64*
  %6 = load i64, i64* %5, align 1
  %7 = bitcast i8* %2 to i64*
  store i64 %6, i64* %7, align 1
  %8 = getelementptr inbounds i8, i8* %2, i64 8
  %9 = bitcast i8* %8 to i64*
  store i64 0, i64* %9, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L4MOVDI4RVnWI7vec64_tE3MVnI7vec32_tEEEP6MemoryS8_R5StateT_T0_(%struct.Memory* returned, %struct.State* nocapture readnone dereferenceable(3376), i64* nocapture, i64)  {
  %5 = inttoptr i64 %3 to i32*
  %6 = load i32, i32* %5
  %7 = bitcast i64* %2 to [2 x i32]*
  %8 = bitcast i64* %2 to i32*
  store i32 %6, i32* %8, align 1
  %9 = getelementptr inbounds [2 x i32], [2 x i32]* %7, i64 0, i64 1
  store i32 0, i32* %9, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L4MOVDI4RVnWI7vec64_tE3RVnI7vec32_tEEEP6MemoryS8_R5StateT_T0_(%struct.Memory* readnone returned, %struct.State* nocapture readnone dereferenceable(3376), i64* nocapture, i64)  {
  %5 = trunc i64 %3 to i32
  %6 = bitcast i64* %2 to [2 x i32]*
  %7 = bitcast i64* %2 to i32*
  store i32 %5, i32* %7, align 1
  %8 = getelementptr inbounds [2 x i32], [2 x i32]* %6, i64 0, i64 1
  store i32 0, i32* %8, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind readnone
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L4MOVDI4MVnWI7vec32_tE3RVnIS2_EEEP6MemoryS7_R5StateT_T0_(%struct.Memory* readnone, %struct.State* nocapture readnone dereferenceable(3376), i64, i64)  {
  %5 = trunc i64 %3 to i32
  %6 = inttoptr i64 %2 to i32*
  store i32 %5, i32* %6
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L4MOVDI3VnWI8vec128_tE3MVnI7vec32_tEEEP6MemoryS8_R5StateT_T0_(%struct.Memory* returned, %struct.State* nocapture readnone dereferenceable(3376), i8* nocapture, i64)  {
  %5 = inttoptr i64 %3 to i32*
  %6 = load i32, i32* %5
  %7 = bitcast i8* %2 to i32*
  store i32 %6, i32* %7, align 1
  %8 = getelementptr inbounds i8, i8* %2, i64 4
  %9 = bitcast i8* %8 to i32*
  store i32 0, i32* %9, align 1
  %10 = getelementptr inbounds i8, i8* %2, i64 8
  %11 = bitcast i8* %10 to i32*
  store i32 0, i32* %11, align 1
  %12 = getelementptr inbounds i8, i8* %2, i64 12
  %13 = bitcast i8* %12 to i32*
  store i32 0, i32* %13, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L4MOVDI3VnWI8vec128_tE3RVnI7vec32_tEEEP6MemoryS8_R5StateT_T0_(%struct.Memory* readnone returned, %struct.State* nocapture readnone dereferenceable(3376), i8* nocapture, i64)  {
  %5 = trunc i64 %3 to i32
  %6 = bitcast i8* %2 to i32*
  store i32 %5, i32* %6, align 1
  %7 = getelementptr inbounds i8, i8* %2, i64 4
  %8 = bitcast i8* %7 to i32*
  store i32 0, i32* %8, align 1
  %9 = getelementptr inbounds i8, i8* %2, i64 8
  %10 = bitcast i8* %9 to i32*
  store i32 0, i32* %10, align 1
  %11 = getelementptr inbounds i8, i8* %2, i64 12
  %12 = bitcast i8* %11 to i32*
  store i32 0, i32* %12, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind readonly
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L4MOVDI4MVnWI7vec32_tE2VnI8vec128_tEEEP6MemoryS8_R5StateT_T0_(%struct.Memory* readnone, %struct.State* nocapture readnone dereferenceable(3376), i64, i8* nocapture readonly)  {
  %5 = bitcast i8* %3 to i64*
  %6 = load i64, i64* %5, align 1
  %7 = trunc i64 %6 to i32
  %8 = inttoptr i64 %2 to i32*
  store i32 %7, i32* %8
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L4MOVDI4RVnWI7vec64_tE2VnI8vec128_tEEEP6MemoryS8_R5StateT_T0_(%struct.Memory* readnone returned, %struct.State* nocapture readnone dereferenceable(3376), i64* nocapture, i8* nocapture readonly)  {
  %5 = bitcast i8* %3 to i64*
  %6 = load i64, i64* %5, align 1
  %7 = trunc i64 %6 to i32
  %8 = bitcast i64* %2 to [2 x i32]*
  %9 = bitcast i64* %2 to i32*
  store i32 %7, i32* %9, align 1
  %10 = getelementptr inbounds [2 x i32], [2 x i32]* %8, i64 0, i64 1
  store i32 0, i32* %10, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L6MOVxPSI3VnWI8vec128_tE3MVnIS2_EEEP6MemoryS7_R5StateT_T0_(%struct.Memory* returned, %struct.State* nocapture readnone dereferenceable(3376), i8* nocapture, i64)  {
  %5 = inttoptr i64 %3 to float*
  %6 = load float, float* %5
  %7 = add i64 %3, 4
  %8 = inttoptr i64 %7 to float*
  %9 = load float, float* %8
  %10 = add i64 %3, 8
  %11 = inttoptr i64 %10 to float*
  %12 = load float, float* %11
  %13 = add i64 %3, 12
  %14 = inttoptr i64 %13 to float*
  %15 = load float, float* %14
  %16 = bitcast i8* %2 to float*
  store float %6, float* %16, align 1
  %17 = getelementptr inbounds i8, i8* %2, i64 4
  %18 = bitcast i8* %17 to float*
  store float %9, float* %18, align 1
  %19 = getelementptr inbounds i8, i8* %2, i64 8
  %20 = bitcast i8* %19 to float*
  store float %12, float* %20, align 1
  %21 = getelementptr inbounds i8, i8* %2, i64 12
  %22 = bitcast i8* %21 to float*
  store float %15, float* %22, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L6MOVxPSI3VnWI8vec128_tE2VnIS2_EEEP6MemoryS7_R5StateT_T0_(%struct.Memory* readnone returned, %struct.State* nocapture readnone dereferenceable(3376), i8* nocapture, i8* nocapture readonly)  {
  %5 = bitcast i8* %3 to <2 x i32>*
  %6 = load <2 x i32>, <2 x i32>* %5, align 1
  %7 = getelementptr inbounds i8, i8* %3, i64 8
  %8 = bitcast i8* %7 to <2 x i32>*
  %9 = load <2 x i32>, <2 x i32>* %8, align 1
  %10 = extractelement <2 x i32> %6, i32 0
  %11 = bitcast i8* %2 to i32*
  store i32 %10, i32* %11, align 1
  %12 = extractelement <2 x i32> %6, i32 1
  %13 = getelementptr inbounds i8, i8* %2, i64 4
  %14 = bitcast i8* %13 to i32*
  store i32 %12, i32* %14, align 1
  %15 = extractelement <2 x i32> %9, i32 0
  %16 = getelementptr inbounds i8, i8* %2, i64 8
  %17 = bitcast i8* %16 to i32*
  store i32 %15, i32* %17, align 1
  %18 = extractelement <2 x i32> %9, i32 1
  %19 = getelementptr inbounds i8, i8* %2, i64 12
  %20 = bitcast i8* %19 to i32*
  store i32 %18, i32* %20, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind readonly
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L6MOVxPSI4MVnWI8vec128_tE2VnIS2_EEEP6MemoryS7_R5StateT_T0_(%struct.Memory* readnone, %struct.State* nocapture readnone dereferenceable(3376), i64, i8* nocapture readonly)  {
  %5 = bitcast i8* %3 to <2 x float>*
  %6 = load <2 x float>, <2 x float>* %5, align 1
  %7 = getelementptr inbounds i8, i8* %3, i64 8
  %8 = bitcast i8* %7 to <2 x float>*
  %9 = load <2 x float>, <2 x float>* %8, align 1
  %10 = extractelement <2 x float> %6, i32 0
  %11 = inttoptr i64 %2 to float*
  store float %10, float* %11
  %12 = add i64 %2, 4
  %13 = extractelement <2 x float> %6, i32 1
  %14 = inttoptr i64 %12 to float*
  store float %13, float* %14
  %15 = add i64 %2, 8
  %16 = extractelement <2 x float> %9, i32 0
  %17 = inttoptr i64 %15 to float*
  store float %16, float* %17
  %18 = add i64 %2, 12
  %19 = extractelement <2 x float> %9, i32 1
  %20 = inttoptr i64 %18 to float*
  store float %19, float* %20
  ret %struct.Memory* %0
}

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare %struct.Memory* @__remill_write_memory_f32(%struct.Memory*, i64, float) 

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L6MOVxPDI3VnWI8vec128_tE3MVnIS2_EEEP6MemoryS7_R5StateT_T0_(%struct.Memory* returned, %struct.State* nocapture readnone dereferenceable(3376), i8* nocapture, i64)  {
  %5 = inttoptr i64 %3 to double*
  %6 = load double, double* %5
  %7 = add i64 %3, 8
  %8 = inttoptr i64 %7 to double*
  %9 = load double, double* %8
  %10 = bitcast i8* %2 to double*
  store double %6, double* %10, align 1
  %11 = getelementptr inbounds i8, i8* %2, i64 8
  %12 = bitcast i8* %11 to double*
  store double %9, double* %12, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L6MOVxPDI3VnWI8vec128_tE2VnIS2_EEEP6MemoryS7_R5StateT_T0_(%struct.Memory* readnone returned, %struct.State* nocapture readnone dereferenceable(3376), i8* nocapture, i8* nocapture readonly)  {
  %5 = bitcast i8* %3 to <2 x i64>*
  %6 = load <2 x i64>, <2 x i64>* %5, align 1
  %7 = bitcast i8* %2 to <2 x i64>*
  store <2 x i64> %6, <2 x i64>* %7, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind readonly
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L6MOVxPDI4MVnWI8vec128_tE2VnIS2_EEEP6MemoryS7_R5StateT_T0_(%struct.Memory* readnone, %struct.State* nocapture readnone dereferenceable(3376), i64, i8* nocapture readonly)  {
  %5 = bitcast i8* %3 to double*
  %6 = load double, double* %5, align 1
  %7 = getelementptr inbounds i8, i8* %3, i64 8
  %8 = bitcast i8* %7 to double*
  %9 = load double, double* %8, align 1
  %10 = inttoptr i64 %2 to double*
  store double %6, double* %10
  %11 = add i64 %2, 8
  %12 = inttoptr i64 %11 to double*
  store double %9, double* %12
  ret %struct.Memory* %0
}

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare %struct.Memory* @__remill_write_memory_f64(%struct.Memory*, i64, double) 

; Function Attrs: alwaysinline nounwind readonly
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L6MOVDQxI4MVnWI8vec128_tE2VnIS2_EEEP6MemoryS7_R5StateT_T0_(%struct.Memory* readnone, %struct.State* nocapture readnone dereferenceable(3376), i64, i8* nocapture readonly)  {
  %5 = bitcast i8* %3 to i64*
  %6 = load i64, i64* %5, align 1
  %7 = getelementptr inbounds i8, i8* %3, i64 8
  %8 = bitcast i8* %7 to i64*
  %9 = load i64, i64* %8, align 1
  %10 = inttoptr i64 %2 to i64*
  store i64 %6, i64* %10
  %11 = add i64 %2, 8
  %12 = inttoptr i64 %11 to i64*
  store i64 %9, i64* %12
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L6MOVDQxI3VnWI8vec128_tE3MVnIS2_EEEP6MemoryS7_R5StateT_T0_(%struct.Memory* returned, %struct.State* nocapture readnone dereferenceable(3376), i8* nocapture, i64)  {
  %5 = inttoptr i64 %3 to i64*
  %6 = load i64, i64* %5
  %7 = add i64 %3, 8
  %8 = inttoptr i64 %7 to i64*
  %9 = load i64, i64* %8
  %10 = zext i64 %9 to i128
  %11 = shl nuw i128 %10, 64
  %12 = zext i64 %6 to i128
  %13 = or i128 %11, %12
  %14 = bitcast i8* %2 to i128*
  store i128 %13, i128* %14, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L6MOVDQxI3VnWI8vec128_tE2VnIS2_EEEP6MemoryS7_R5StateT_T0_(%struct.Memory* readnone returned, %struct.State* nocapture readnone dereferenceable(3376), i8* nocapture, i8* nocapture readonly)  {
  %5 = bitcast i8* %3 to i64*
  %6 = load i64, i64* %5, align 1
  %7 = getelementptr inbounds i8, i8* %3, i64 8
  %8 = bitcast i8* %7 to i64*
  %9 = load i64, i64* %8, align 1
  %10 = zext i64 %9 to i128
  %11 = shl nuw i128 %10, 64
  %12 = zext i64 %6 to i128
  %13 = or i128 %11, %12
  %14 = bitcast i8* %2 to i128*
  store i128 %13, i128* %14, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind readonly
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L6MOVLPSI4MVnWI7vec64_tE2VnI8vec128_tEEEP6MemoryS8_R5StateT_T0_(%struct.Memory*, %struct.State* nocapture readnone dereferenceable(3376), i64, i8* nocapture readonly)  {
  %5 = bitcast i8* %3 to <2 x float>*
  %6 = load <2 x float>, <2 x float>* %5, align 1
  %7 = extractelement <2 x float> %6, i32 0
  %8 = extractelement <2 x float> %6, i32 1
  %9 = add i64 %2, 4
  %10 = inttoptr i64 %2 to float*
  store float %7, float* %10
  %11 = inttoptr i64 %9 to float*
  store float %8, float* %11
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L6MOVLPSI3VnWI8vec128_tE3MVnI7vec64_tEEEP6MemoryS8_R5StateT_T0_(%struct.Memory* returned, %struct.State* nocapture readnone dereferenceable(3376), i8* nocapture, i64)  {
  %5 = inttoptr i64 %3 to float*
  %6 = load float, float* %5
  %7 = add i64 %3, 4
  %8 = inttoptr i64 %7 to float*
  %9 = load float, float* %8
  %10 = getelementptr inbounds i8, i8* %2, i64 8
  %11 = bitcast i8* %10 to <2 x i32>*
  %12 = load <2 x i32>, <2 x i32>* %11, align 1
  %13 = bitcast i8* %2 to float*
  store float %6, float* %13, align 1
  %14 = getelementptr inbounds i8, i8* %2, i64 4
  %15 = bitcast i8* %14 to float*
  store float %9, float* %15, align 1
  %16 = extractelement <2 x i32> %12, i32 0
  %17 = bitcast i8* %10 to i32*
  store i32 %16, i32* %17, align 1
  %18 = extractelement <2 x i32> %12, i32 1
  %19 = getelementptr inbounds i8, i8* %2, i64 12
  %20 = bitcast i8* %19 to i32*
  store i32 %18, i32* %20, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L7MOVLHPSI3VnWI8vec128_tE2VnIS2_EEEP6MemoryS7_R5StateT_T0_(%struct.Memory* readnone returned, %struct.State* nocapture readnone dereferenceable(3376), i8* nocapture, i8* nocapture readonly)  {
  %5 = getelementptr inbounds i8, i8* %2, i64 8
  %6 = bitcast i8* %3 to i64*
  %7 = load i64, i64* %6, align 1
  %8 = bitcast i8* %5 to i64*
  store i64 %7, i64* %8, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L6MOVLPDI3VnWI8vec128_tE3MVnI7vec64_tEEEP6MemoryS8_R5StateT_T0_(%struct.Memory* returned, %struct.State* nocapture readnone dereferenceable(3376), i8* nocapture, i64)  {
  %5 = inttoptr i64 %3 to double*
  %6 = load double, double* %5
  %7 = bitcast i8* %2 to double*
  store double %6, double* %7, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind readonly
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L6MOVLPDI4MVnWI7vec64_tE2VnI8vec128_tEEEP6MemoryS8_R5StateT_T0_(%struct.Memory* readnone, %struct.State* nocapture readnone dereferenceable(3376), i64, i8* nocapture readonly)  {
  %5 = bitcast i8* %3 to double*
  %6 = load double, double* %5, align 1
  %7 = inttoptr i64 %2 to double*
  store double %6, double* %7
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L5MOVSDEP6MemoryR5State3VnWI8vec128_tE2VnIS5_E(%struct.Memory* readnone returned, %struct.State* nocapture readnone dereferenceable(3376), i8* nocapture, i8* nocapture readonly)  {
  %5 = bitcast i8* %3 to i64*
  %6 = load i64, i64* %5, align 1
  %7 = bitcast i8* %2 to i64*
  store i64 %6, i64* %7, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L9MOVSD_MEMI3VnWI8vec128_tE3MVnI7vec64_tEEEP6MemoryS8_R5StateT_T0_(%struct.Memory* returned, %struct.State* nocapture readnone dereferenceable(3376), i8* nocapture, i64)  {
  %5 = inttoptr i64 %3 to double*
  %6 = load double, double* %5
  %7 = bitcast i8* %2 to double*
  store double %6, double* %7, align 1
  %8 = getelementptr inbounds i8, i8* %2, i64 8
  %9 = bitcast i8* %8 to double*
  store double 0.000000e+00, double* %9, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind readonly
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L9MOVSD_MEMI4MVnWI7vec64_tE2VnI8vec128_tEEEP6MemoryS8_R5StateT_T0_(%struct.Memory* readnone, %struct.State* nocapture readnone dereferenceable(3376), i64, i8* nocapture readonly)  {
  %5 = bitcast i8* %3 to double*
  %6 = load double, double* %5, align 1
  %7 = inttoptr i64 %2 to double*
  store double %6, double* %7
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L9MOVSS_MEMI3VnWI8vec128_tE3MVnI7vec32_tEEEP6MemoryS8_R5StateT_T0_(%struct.Memory* returned, %struct.State* nocapture readnone dereferenceable(3376), i8* nocapture, i64)  {
  %5 = inttoptr i64 %3 to float*
  %6 = load float, float* %5
  %7 = bitcast i8* %2 to float*
  store float %6, float* %7, align 1
  %8 = getelementptr inbounds i8, i8* %2, i64 4
  %9 = bitcast i8* %8 to float*
  store float 0.000000e+00, float* %9, align 1
  %10 = getelementptr inbounds i8, i8* %2, i64 8
  %11 = bitcast i8* %10 to float*
  store float 0.000000e+00, float* %11, align 1
  %12 = getelementptr inbounds i8, i8* %2, i64 12
  %13 = bitcast i8* %12 to float*
  store float 0.000000e+00, float* %13, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind readonly
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L9MOVSS_MEMI4MVnWI7vec32_tE2VnI8vec128_tEEEP6MemoryS8_R5StateT_T0_(%struct.Memory* readnone, %struct.State* nocapture readnone dereferenceable(3376), i64, i8* nocapture readonly)  {
  %5 = bitcast i8* %3 to <2 x float>*
  %6 = load <2 x float>, <2 x float>* %5, align 1
  %7 = extractelement <2 x float> %6, i32 0
  %8 = inttoptr i64 %2 to float*
  store float %7, float* %8
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L5MOVSSEP6MemoryR5State3VnWI8vec128_tE2VnIS5_E(%struct.Memory* readnone returned, %struct.State* nocapture readnone dereferenceable(3376), i8* nocapture, i8* nocapture readonly)  {
  %5 = bitcast i8* %2 to <2 x i32>*
  %6 = load <2 x i32>, <2 x i32>* %5, align 1
  %7 = getelementptr inbounds i8, i8* %2, i64 8
  %8 = bitcast i8* %7 to <2 x i32>*
  %9 = load <2 x i32>, <2 x i32>* %8, align 1
  %10 = bitcast i8* %3 to <2 x i32>*
  %11 = load <2 x i32>, <2 x i32>* %10, align 1
  %12 = extractelement <2 x i32> %11, i32 0
  %13 = bitcast i8* %2 to i32*
  store i32 %12, i32* %13, align 1
  %14 = extractelement <2 x i32> %6, i32 1
  %15 = getelementptr inbounds i8, i8* %2, i64 4
  %16 = bitcast i8* %15 to i32*
  store i32 %14, i32* %16, align 1
  %17 = extractelement <2 x i32> %9, i32 0
  %18 = bitcast i8* %7 to i32*
  store i32 %17, i32* %18, align 1
  %19 = extractelement <2 x i32> %9, i32 1
  %20 = getelementptr inbounds i8, i8* %2, i64 12
  %21 = bitcast i8* %20 to i32*
  store i32 %19, i32* %21, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L6MOVHPDEP6MemoryR5State3VnWI8vec128_tE3MVnI7vec64_tE(%struct.Memory* returned, %struct.State* nocapture readnone dereferenceable(3376), i8* nocapture, i64)  {
  %5 = getelementptr inbounds i8, i8* %2, i64 8
  %6 = inttoptr i64 %3 to double*
  %7 = load double, double* %6
  %8 = bitcast i8* %5 to double*
  store double %7, double* %8, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind readonly
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L12MOVHPD_STOREEP6MemoryR5State4MVnWI7vec64_tE2VnI8vec128_tE(%struct.Memory* readnone, %struct.State* nocapture readnone dereferenceable(3376), i64, i8* nocapture readonly)  {
  %5 = getelementptr inbounds i8, i8* %3, i64 8
  %6 = bitcast i8* %5 to double*
  %7 = load double, double* %6, align 1
  %8 = inttoptr i64 %2 to double*
  store double %7, double* %8
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L6MOVHPSEP6MemoryR5State3VnWI8vec128_tE3MVnI7vec64_tE(%struct.Memory* returned, %struct.State* nocapture readnone dereferenceable(3376), i8* nocapture, i64)  {
  %5 = bitcast i8* %2 to <2 x i32>*
  %6 = load <2 x i32>, <2 x i32>* %5, align 1
  %7 = getelementptr inbounds i8, i8* %2, i64 8
  %8 = inttoptr i64 %3 to float*
  %9 = load float, float* %8
  %10 = add i64 %3, 4
  %11 = inttoptr i64 %10 to float*
  %12 = load float, float* %11
  %13 = extractelement <2 x i32> %6, i32 0
  %14 = bitcast i8* %2 to i32*
  store i32 %13, i32* %14, align 1
  %15 = extractelement <2 x i32> %6, i32 1
  %16 = getelementptr inbounds i8, i8* %2, i64 4
  %17 = bitcast i8* %16 to i32*
  store i32 %15, i32* %17, align 1
  %18 = bitcast i8* %7 to float*
  store float %9, float* %18, align 1
  %19 = getelementptr inbounds i8, i8* %2, i64 12
  %20 = bitcast i8* %19 to float*
  store float %12, float* %20, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind readonly
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L12MOVHPS_STOREEP6MemoryR5State4MVnWI7vec64_tE2VnI8vec128_tE(%struct.Memory* readnone, %struct.State* nocapture readnone dereferenceable(3376), i64, i8* nocapture readonly)  {
  %5 = getelementptr inbounds i8, i8* %3, i64 8
  %6 = bitcast i8* %5 to <2 x float>*
  %7 = load <2 x float>, <2 x float>* %6, align 1
  %8 = extractelement <2 x float> %7, i32 0
  %9 = extractelement <2 x float> %7, i32 1
  %10 = inttoptr i64 %2 to float*
  store float %8, float* %10
  %11 = add i64 %2, 4
  %12 = inttoptr i64 %11 to float*
  store float %9, float* %12
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline norecurse nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3MOVI3RnWImE2RnItEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* readnone returned, %struct.State* nocapture readnone dereferenceable(3376), i64* nocapture, i64)  {
  %5 = and i64 %3, 65535
  store i64 %5, i64* %2, align 8
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L6MOV_ESI2MnItEEEP6MemoryS4_R5State3RnWItET_(%struct.Memory*, %struct.State* dereferenceable(3376), i16* nocapture, i64)  {
  %5 = inttoptr i64 %3 to i16*
  %6 = load i16, i16* %5
  store i16 %6, i16* %2, align 2
  %7 = tail call %struct.Memory* @__remill_sync_hyper_call(%struct.State* nonnull dereferenceable(3376) %1, %struct.Memory* %0, i32 266) 
  ret %struct.Memory* %7
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L6MOV_SSI2MnItEEEP6MemoryS4_R5State3RnWItET_(%struct.Memory*, %struct.State* dereferenceable(3376), i16* nocapture, i64)  {
  %5 = inttoptr i64 %3 to i16*
  %6 = load i16, i16* %5
  store i16 %6, i16* %2, align 2
  %7 = tail call %struct.Memory* @__remill_sync_hyper_call(%struct.State* nonnull dereferenceable(3376) %1, %struct.Memory* %0, i32 267) 
  ret %struct.Memory* %7
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L6MOV_DSI2MnItEEEP6MemoryS4_R5State3RnWItET_(%struct.Memory*, %struct.State* dereferenceable(3376), i16* nocapture, i64)  {
  %5 = inttoptr i64 %3 to i16*
  %6 = load i16, i16* %5
  store i16 %6, i16* %2, align 2
  %7 = tail call %struct.Memory* @__remill_sync_hyper_call(%struct.State* nonnull dereferenceable(3376) %1, %struct.Memory* %0, i32 268) 
  ret %struct.Memory* %7
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L6MOV_FSI2MnItEEEP6MemoryS4_R5State3RnWItET_(%struct.Memory*, %struct.State* dereferenceable(3376), i16* nocapture, i64)  {
  %5 = inttoptr i64 %3 to i16*
  %6 = load i16, i16* %5
  store i16 %6, i16* %2, align 2
  %7 = tail call %struct.Memory* @__remill_sync_hyper_call(%struct.State* nonnull dereferenceable(3376) %1, %struct.Memory* %0, i32 269) 
  ret %struct.Memory* %7
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L6MOV_GSI2MnItEEEP6MemoryS4_R5State3RnWItET_(%struct.Memory*, %struct.State* dereferenceable(3376), i16* nocapture, i64)  {
  %5 = inttoptr i64 %3 to i16*
  %6 = load i16, i16* %5
  store i16 %6, i16* %2, align 2
  %7 = tail call %struct.Memory* @__remill_sync_hyper_call(%struct.State* nonnull dereferenceable(3376) %1, %struct.Memory* %0, i32 270) 
  ret %struct.Memory* %7
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L6MOV_ESI2RnItEEEP6MemoryS4_R5State3RnWItET_(%struct.Memory*, %struct.State* dereferenceable(3376), i16* nocapture, i64)  {
  %5 = trunc i64 %3 to i16
  store i16 %5, i16* %2, align 2
  %6 = tail call %struct.Memory* @__remill_sync_hyper_call(%struct.State* nonnull dereferenceable(3376) %1, %struct.Memory* %0, i32 266) 
  ret %struct.Memory* %6
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L6MOV_SSI2RnItEEEP6MemoryS4_R5State3RnWItET_(%struct.Memory*, %struct.State* dereferenceable(3376), i16* nocapture, i64)  {
  %5 = trunc i64 %3 to i16
  store i16 %5, i16* %2, align 2
  %6 = tail call %struct.Memory* @__remill_sync_hyper_call(%struct.State* nonnull dereferenceable(3376) %1, %struct.Memory* %0, i32 267) 
  ret %struct.Memory* %6
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L6MOV_DSI2RnItEEEP6MemoryS4_R5State3RnWItET_(%struct.Memory*, %struct.State* dereferenceable(3376), i16* nocapture, i64)  {
  %5 = trunc i64 %3 to i16
  store i16 %5, i16* %2, align 2
  %6 = tail call %struct.Memory* @__remill_sync_hyper_call(%struct.State* nonnull dereferenceable(3376) %1, %struct.Memory* %0, i32 268) 
  ret %struct.Memory* %6
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L6MOV_FSI2RnItEEEP6MemoryS4_R5State3RnWItET_(%struct.Memory*, %struct.State* dereferenceable(3376), i16* nocapture, i64)  {
  %5 = trunc i64 %3 to i16
  store i16 %5, i16* %2, align 2
  %6 = tail call %struct.Memory* @__remill_sync_hyper_call(%struct.State* nonnull dereferenceable(3376) %1, %struct.Memory* %0, i32 269) 
  ret %struct.Memory* %6
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L6MOV_GSI2RnItEEEP6MemoryS4_R5State3RnWItET_(%struct.Memory*, %struct.State* dereferenceable(3376), i16* nocapture, i64)  {
  %5 = trunc i64 %3 to i16
  store i16 %5, i16* %2, align 2
  %6 = tail call %struct.Memory* @__remill_sync_hyper_call(%struct.State* nonnull dereferenceable(3376) %1, %struct.Memory* %0, i32 270) 
  ret %struct.Memory* %6
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L5MOVZXI3RnWItE2MnIhEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* returned, %struct.State* nocapture readnone dereferenceable(3376), i16* nocapture, i64)  {
  %5 = inttoptr i64 %3 to i8*
  %6 = load i8, i8* %5
  %7 = zext i8 %6 to i16
  store i16 %7, i16* %2, align 2
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L5MOVZXI3RnWImE2MnIhEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* returned, %struct.State* nocapture readnone dereferenceable(3376), i64* nocapture, i64)  {
  %5 = inttoptr i64 %3 to i8*
  %6 = load i8, i8* %5
  %7 = zext i8 %6 to i64
  store i64 %7, i64* %2, align 8
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline norecurse nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L5MOVZXI3RnWItE2RnIhEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* readnone returned, %struct.State* nocapture readnone dereferenceable(3376), i16* nocapture, i64)  {
  %5 = trunc i64 %3 to i16
  %6 = and i16 %5, 255
  store i16 %6, i16* %2, align 2
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline norecurse nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L5MOVZXI3RnWImE2RnIhEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* readnone returned, %struct.State* nocapture readnone dereferenceable(3376), i64* nocapture, i64)  {
  %5 = and i64 %3, 255
  store i64 %5, i64* %2, align 8
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L5MOVZXI3RnWImE2MnItEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* returned, %struct.State* nocapture readnone dereferenceable(3376), i64* nocapture, i64)  {
  %5 = inttoptr i64 %3 to i16*
  %6 = load i16, i16* %5
  %7 = zext i16 %6 to i64
  store i64 %7, i64* %2, align 8
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline norecurse nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L5MOVZXI3RnWImE2RnItEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* readnone returned, %struct.State* nocapture readnone dereferenceable(3376), i64* nocapture, i64)  {
  %5 = and i64 %3, 65535
  store i64 %5, i64* %2, align 8
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L5MOVSXI3RnWItE2MnIhEsEEP6MemoryS6_R5StateT_T0_(%struct.Memory* returned, %struct.State* nocapture readnone dereferenceable(3376), i16* nocapture, i64)  {
  %5 = inttoptr i64 %3 to i8*
  %6 = load i8, i8* %5
  %7 = sext i8 %6 to i16
  store i16 %7, i16* %2, align 2
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L5MOVSXI3RnWImE2MnIhEiEEP6MemoryS6_R5StateT_T0_(%struct.Memory* returned, %struct.State* nocapture readnone dereferenceable(3376), i64* nocapture, i64)  {
  %5 = inttoptr i64 %3 to i8*
  %6 = load i8, i8* %5
  %7 = sext i8 %6 to i64
  %8 = and i64 %7, 4294967295
  store i64 %8, i64* %2, align 8
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L5MOVSXI3RnWImE2MnIhElEEP6MemoryS6_R5StateT_T0_(%struct.Memory* returned, %struct.State* nocapture readnone dereferenceable(3376), i64* nocapture, i64)  {
  %5 = inttoptr i64 %3 to i8*
  %6 = load i8, i8* %5
  %7 = sext i8 %6 to i64
  store i64 %7, i64* %2, align 8
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline norecurse nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L5MOVSXI3RnWItE2RnIhEsEEP6MemoryS6_R5StateT_T0_(%struct.Memory* readnone returned, %struct.State* nocapture readnone dereferenceable(3376), i16* nocapture, i64)  {
  %5 = trunc i64 %3 to i16
  %6 = shl i16 %5, 8
  %7 = ashr exact i16 %6, 8
  store i16 %7, i16* %2, align 2
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline norecurse nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L5MOVSXI3RnWImE2RnIhEiEEP6MemoryS6_R5StateT_T0_(%struct.Memory* readnone returned, %struct.State* nocapture readnone dereferenceable(3376), i64* nocapture, i64)  {
  %5 = trunc i64 %3 to i32
  %6 = shl i32 %5, 24
  %7 = ashr exact i32 %6, 24
  %8 = zext i32 %7 to i64
  store i64 %8, i64* %2, align 8
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline norecurse nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L5MOVSXI3RnWImE2RnIhElEEP6MemoryS6_R5StateT_T0_(%struct.Memory* readnone returned, %struct.State* nocapture readnone dereferenceable(3376), i64* nocapture, i64)  {
  %5 = shl i64 %3, 56
  %6 = ashr exact i64 %5, 56
  store i64 %6, i64* %2, align 8
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L5MOVSXI3RnWImE2MnItEiEEP6MemoryS6_R5StateT_T0_(%struct.Memory* returned, %struct.State* nocapture readnone dereferenceable(3376), i64* nocapture, i64)  {
  %5 = inttoptr i64 %3 to i16*
  %6 = load i16, i16* %5
  %7 = sext i16 %6 to i64
  %8 = and i64 %7, 4294967295
  store i64 %8, i64* %2, align 8
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L5MOVSXI3RnWImE2MnItElEEP6MemoryS6_R5StateT_T0_(%struct.Memory* returned, %struct.State* nocapture readnone dereferenceable(3376), i64* nocapture, i64)  {
  %5 = inttoptr i64 %3 to i16*
  %6 = load i16, i16* %5
  %7 = sext i16 %6 to i64
  store i64 %7, i64* %2, align 8
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline norecurse nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L5MOVSXI3RnWImE2RnItEiEEP6MemoryS6_R5StateT_T0_(%struct.Memory* readnone returned, %struct.State* nocapture readnone dereferenceable(3376), i64* nocapture, i64)  {
  %5 = trunc i64 %3 to i32
  %6 = shl i32 %5, 16
  %7 = ashr exact i32 %6, 16
  %8 = zext i32 %7 to i64
  store i64 %8, i64* %2, align 8
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline norecurse nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L5MOVSXI3RnWImE2RnItElEEP6MemoryS6_R5StateT_T0_(%struct.Memory* readnone returned, %struct.State* nocapture readnone dereferenceable(3376), i64* nocapture, i64)  {
  %5 = shl i64 %3, 48
  %6 = ashr exact i64 %5, 48
  store i64 %6, i64* %2, align 8
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L5MOVSXI3RnWImE2MnIjElEEP6MemoryS6_R5StateT_T0_(%struct.Memory* returned, %struct.State* nocapture readnone dereferenceable(3376), i64* nocapture, i64)  {
  %5 = inttoptr i64 %3 to i32*
  %6 = load i32, i32* %5
  %7 = sext i32 %6 to i64
  store i64 %7, i64* %2, align 8
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline norecurse nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L5MOVSXI3RnWImE2RnIjElEEP6MemoryS6_R5StateT_T0_(%struct.Memory* readnone returned, %struct.State* nocapture readnone dereferenceable(3376), i64* nocapture, i64)  {
  %5 = shl i64 %3, 32
  %6 = ashr exact i64 %5, 32
  store i64 %6, i64* %2, align 8
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline norecurse nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L10DoINT_IMMbEP6MemoryR5State2InIhE(%struct.Memory* readnone returned, %struct.State* nocapture dereferenceable(3376), i64)  {
  %4 = trunc i64 %2 to i32
  %5 = and i32 %4, 255
  %6 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 0, i32 2
  %7 = bitcast %union.anon* %6 to i32*
  store i32 %5, i32* %7, align 8
  %8 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 0, i32 0
  store i32 4, i32* %8, align 16
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline norecurse nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L6DoINT1EP6MemoryR5State(%struct.Memory* readnone returned, %struct.State* nocapture dereferenceable(3376))  {
  %3 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 0, i32 2
  %4 = bitcast %union.anon* %3 to i32*
  store i32 1, i32* %4, align 8
  %5 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 0, i32 0
  store i32 1, i32* %5, align 16
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline norecurse nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L6DoINT3EP6MemoryR5State(%struct.Memory* readnone returned, %struct.State* nocapture dereferenceable(3376))  {
  %3 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 0, i32 2
  %4 = bitcast %union.anon* %3 to i32*
  store i32 3, i32* %4, align 8
  %5 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 0, i32 0
  store i32 2, i32* %5, align 16
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline norecurse nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L5DoCLDEP6MemoryR5State(%struct.Memory* readnone returned, %struct.State* nocapture dereferenceable(3376))  {
  %3 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 11
  store i8 0, i8* %3, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline norecurse nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L5DoSTDEP6MemoryR5State(%struct.Memory* readnone returned, %struct.State* nocapture dereferenceable(3376))  {
  %3 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 11
  store i8 1, i8* %3, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline norecurse nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L5DoCLCEP6MemoryR5State(%struct.Memory* readnone returned, %struct.State* nocapture dereferenceable(3376))  {
  %3 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  store i8 0, i8* %3, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline norecurse nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L5DoCMCEP6MemoryR5State(%struct.Memory* readnone returned, %struct.State* nocapture dereferenceable(3376))  {
  %3 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  %4 = load i8, i8* %3, align 1
  %5 = icmp eq i8 %4, 0
  %6 = zext i1 %5 to i8
  store i8 %6, i8* %3, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline norecurse nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L5DoSTCEP6MemoryR5State(%struct.Memory* readnone returned, %struct.State* nocapture dereferenceable(3376))  {
  %3 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  store i8 1, i8* %3, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline norecurse nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L6DoSALCEP6MemoryR5State(%struct.Memory* readnone returned, %struct.State* nocapture dereferenceable(3376))  {
  %3 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 1, i32 0
  %4 = bitcast %union.anon* %3 to i8*
  %5 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  %6 = load i8, i8* %5, align 1
  store i8 %6, i8* %4, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline norecurse nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L6DoSAHFEP6MemoryR5State(%struct.Memory* readnone returned, %struct.State* nocapture dereferenceable(3376))  {
  %3 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 1, i32 0
  %4 = bitcast %union.anon* %3 to %struct.anon.2*
  %5 = getelementptr inbounds %struct.anon.2, %struct.anon.2* %4, i64 0, i32 1
  %6 = load i8, i8* %5, align 1
  %7 = and i8 %6, 1
  %8 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  store i8 %7, i8* %8, align 1
  %9 = lshr i8 %6, 2
  %10 = and i8 %9, 1
  %11 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 %10, i8* %11, align 1
  %12 = lshr i8 %6, 4
  %13 = and i8 %12, 1
  %14 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 %13, i8* %14, align 1
  %15 = lshr i8 %6, 7
  %16 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 %15, i8* %16, align 1
  %17 = lshr i8 %6, 6
  %18 = and i8 %17, 1
  %19 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  store i8 %18, i8* %19, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline norecurse nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L6DoLAHFEP6MemoryR5State(%struct.Memory* readnone returned, %struct.State* nocapture dereferenceable(3376))  {
  %3 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  %4 = load i8, i8* %3, align 1
  %5 = and i8 %4, 1
  %6 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  %7 = load i8, i8* %6, align 1
  %8 = shl i8 %7, 2
  %9 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  %10 = load i8, i8* %9, align 1
  %11 = shl i8 %10, 4
  %12 = and i8 %8, 4
  %13 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  %14 = load i8, i8* %13, align 1
  %15 = shl i8 %14, 6
  %16 = and i8 %11, 16
  %17 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  %18 = load i8, i8* %17, align 1
  %19 = shl i8 %18, 7
  %20 = and i8 %15, 64
  %21 = or i8 %5, %12
  %22 = or i8 %21, %16
  %23 = or i8 %22, %20
  %24 = or i8 %23, %19
  %25 = or i8 %24, 2
  %26 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 1, i32 0
  %27 = bitcast %union.anon* %26 to %struct.anon.2*
  %28 = getelementptr inbounds %struct.anon.2, %struct.anon.2* %27, i64 0, i32 1
  store i8 %25, i8* %28, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L6DoCLACEP6MemoryR5State(%struct.Memory*, %struct.State* dereferenceable(3376))  {
  %3 = tail call %struct.Memory* @__remill_sync_hyper_call(%struct.State* nonnull dereferenceable(3376) %1, %struct.Memory* %0, i32 1) 
  %4 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 3
  %5 = bitcast %union.anon* %4 to i32*
  %6 = load i32, i32* %5, align 16
  %7 = and i32 %6, -262145
  store i32 %7, i32* %5, align 16
  ret %struct.Memory* %3
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L6DoSTACEP6MemoryR5State(%struct.Memory*, %struct.State* dereferenceable(3376))  {
  %3 = tail call %struct.Memory* @__remill_sync_hyper_call(%struct.State* nonnull dereferenceable(3376) %1, %struct.Memory* %0, i32 1) 
  %4 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 3
  %5 = bitcast %union.anon* %4 to i32*
  %6 = load i32, i32* %5, align 16
  %7 = or i32 %6, 262144
  store i32 %7, i32* %5, align 16
  ret %struct.Memory* %3
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L5DoCLIEP6MemoryR5State(%struct.Memory*, %struct.State* dereferenceable(3376))  {
  %3 = tail call %struct.Memory* @__remill_sync_hyper_call(%struct.State* nonnull dereferenceable(3376) %1, %struct.Memory* %0, i32 1) 
  %4 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 3
  %5 = bitcast %union.anon* %4 to i32*
  %6 = load i32, i32* %5, align 16
  %7 = and i32 %6, -513
  store i32 %7, i32* %5, align 16
  ret %struct.Memory* %3
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L5DoSTIEP6MemoryR5State(%struct.Memory*, %struct.State* dereferenceable(3376))  {
  %3 = tail call %struct.Memory* @__remill_sync_hyper_call(%struct.State* nonnull dereferenceable(3376) %1, %struct.Memory* %0, i32 1) 
  %4 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 3
  %5 = bitcast %union.anon* %4 to i32*
  %6 = load i32, i32* %5, align 16
  %7 = or i32 %6, 512
  store i32 %7, i32* %5, align 16
  ret %struct.Memory* %3
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3IN8I2InIhEEEP6MemoryS4_R5State3RnWIhET_(%struct.Memory*, %struct.State* dereferenceable(3376), i8* nocapture, i64)  {
  %5 = tail call %struct.Memory* @__remill_sync_hyper_call(%struct.State* nonnull dereferenceable(3376) %1, %struct.Memory* %0, i32 1) 
  %6 = and i64 %3, 255
  %7 = tail call zeroext i8 @__remill_read_io_port_8(%struct.Memory* %5, i64 %6) 
  store i8 %7, i8* %2, align 1
  ret %struct.Memory* %5
}

; Function Attrs: nounwind readnone
declare zeroext i8 @__remill_read_io_port_8(%struct.Memory*, i64) local_unnamed_addr 

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3IN8I2RnItEEEP6MemoryS4_R5State3RnWIhET_(%struct.Memory*, %struct.State* dereferenceable(3376), i8* nocapture, i64)  {
  %5 = tail call %struct.Memory* @__remill_sync_hyper_call(%struct.State* nonnull dereferenceable(3376) %1, %struct.Memory* %0, i32 1) 
  %6 = and i64 %3, 65535
  %7 = tail call zeroext i8 @__remill_read_io_port_8(%struct.Memory* %5, i64 %6) 
  store i8 %7, i8* %2, align 1
  ret %struct.Memory* %5
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L4IN16I2InIhEEEP6MemoryS4_R5State3RnWItET_(%struct.Memory*, %struct.State* dereferenceable(3376), i16* nocapture, i64)  {
  %5 = tail call %struct.Memory* @__remill_sync_hyper_call(%struct.State* nonnull dereferenceable(3376) %1, %struct.Memory* %0, i32 1) 
  %6 = and i64 %3, 255
  %7 = tail call zeroext i16 @__remill_read_io_port_16(%struct.Memory* %5, i64 %6) 
  store i16 %7, i16* %2, align 2
  ret %struct.Memory* %5
}

; Function Attrs: nounwind readnone
declare zeroext i16 @__remill_read_io_port_16(%struct.Memory*, i64) local_unnamed_addr 

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L4IN16I2RnItEEEP6MemoryS4_R5State3RnWItET_(%struct.Memory*, %struct.State* dereferenceable(3376), i16* nocapture, i64)  {
  %5 = tail call %struct.Memory* @__remill_sync_hyper_call(%struct.State* nonnull dereferenceable(3376) %1, %struct.Memory* %0, i32 1) 
  %6 = and i64 %3, 65535
  %7 = tail call zeroext i16 @__remill_read_io_port_16(%struct.Memory* %5, i64 %6) 
  store i16 %7, i16* %2, align 2
  ret %struct.Memory* %5
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L4IN32I2InIhEEEP6MemoryS4_R5State3RnWImET_(%struct.Memory*, %struct.State* dereferenceable(3376), i64* nocapture, i64)  {
  %5 = tail call %struct.Memory* @__remill_sync_hyper_call(%struct.State* nonnull dereferenceable(3376) %1, %struct.Memory* %0, i32 1) 
  %6 = and i64 %3, 255
  %7 = tail call i32 @__remill_read_io_port_32(%struct.Memory* %5, i64 %6) 
  %8 = zext i32 %7 to i64
  store i64 %8, i64* %2, align 8
  ret %struct.Memory* %5
}

; Function Attrs: nounwind readnone
declare i32 @__remill_read_io_port_32(%struct.Memory*, i64) local_unnamed_addr 

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L4IN32I2RnItEEEP6MemoryS4_R5State3RnWImET_(%struct.Memory*, %struct.State* dereferenceable(3376), i64* nocapture, i64)  {
  %5 = tail call %struct.Memory* @__remill_sync_hyper_call(%struct.State* nonnull dereferenceable(3376) %1, %struct.Memory* %0, i32 1) 
  %6 = and i64 %3, 65535
  %7 = tail call i32 @__remill_read_io_port_32(%struct.Memory* %5, i64 %6) 
  %8 = zext i32 %7 to i64
  store i64 %8, i64* %2, align 8
  ret %struct.Memory* %5
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L4OUT8I2InIhEEEP6MemoryS4_R5StateT_2RnIhE(%struct.Memory*, %struct.State* dereferenceable(3376), i64, i64)  {
  %5 = tail call %struct.Memory* @__remill_sync_hyper_call(%struct.State* nonnull dereferenceable(3376) %1, %struct.Memory* %0, i32 1) 
  %6 = and i64 %2, 255
  %7 = trunc i64 %3 to i8
  %8 = tail call %struct.Memory* @__remill_write_io_port_8(%struct.Memory* %5, i64 %6, i8 zeroext %7) 
  ret %struct.Memory* %8
}

; Function Attrs: nounwind readnone
declare %struct.Memory* @__remill_write_io_port_8(%struct.Memory*, i64, i8 zeroext) local_unnamed_addr 

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L4OUT8I2RnItEEEP6MemoryS4_R5StateT_S1_IhE(%struct.Memory*, %struct.State* dereferenceable(3376), i64, i64)  {
  %5 = tail call %struct.Memory* @__remill_sync_hyper_call(%struct.State* nonnull dereferenceable(3376) %1, %struct.Memory* %0, i32 1) 
  %6 = and i64 %2, 65535
  %7 = trunc i64 %3 to i8
  %8 = tail call %struct.Memory* @__remill_write_io_port_8(%struct.Memory* %5, i64 %6, i8 zeroext %7) 
  ret %struct.Memory* %8
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L5OUT16I2InIhEEEP6MemoryS4_R5StateT_2RnItE(%struct.Memory*, %struct.State* dereferenceable(3376), i64, i64)  {
  %5 = tail call %struct.Memory* @__remill_sync_hyper_call(%struct.State* nonnull dereferenceable(3376) %1, %struct.Memory* %0, i32 1) 
  %6 = and i64 %2, 255
  %7 = trunc i64 %3 to i16
  %8 = tail call %struct.Memory* @__remill_write_io_port_16(%struct.Memory* %5, i64 %6, i16 zeroext %7) 
  ret %struct.Memory* %8
}

; Function Attrs: nounwind readnone
declare %struct.Memory* @__remill_write_io_port_16(%struct.Memory*, i64, i16 zeroext) local_unnamed_addr 

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L5OUT16I2RnItEEEP6MemoryS4_R5StateT_S2_(%struct.Memory*, %struct.State* dereferenceable(3376), i64, i64)  {
  %5 = tail call %struct.Memory* @__remill_sync_hyper_call(%struct.State* nonnull dereferenceable(3376) %1, %struct.Memory* %0, i32 1) 
  %6 = and i64 %2, 65535
  %7 = trunc i64 %3 to i16
  %8 = tail call %struct.Memory* @__remill_write_io_port_16(%struct.Memory* %5, i64 %6, i16 zeroext %7) 
  ret %struct.Memory* %8
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L5OUT32I2InIhEEEP6MemoryS4_R5StateT_2RnIjE(%struct.Memory*, %struct.State* dereferenceable(3376), i64, i64)  {
  %5 = tail call %struct.Memory* @__remill_sync_hyper_call(%struct.State* nonnull dereferenceable(3376) %1, %struct.Memory* %0, i32 1) 
  %6 = and i64 %2, 255
  %7 = trunc i64 %3 to i32
  %8 = tail call %struct.Memory* @__remill_write_io_port_32(%struct.Memory* %5, i64 %6, i32 %7) 
  ret %struct.Memory* %8
}

; Function Attrs: nounwind readnone
declare %struct.Memory* @__remill_write_io_port_32(%struct.Memory*, i64, i32) local_unnamed_addr 

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L5OUT32I2RnItEEEP6MemoryS4_R5StateT_S1_IjE(%struct.Memory*, %struct.State* dereferenceable(3376), i64, i64)  {
  %5 = tail call %struct.Memory* @__remill_sync_hyper_call(%struct.State* nonnull dereferenceable(3376) %1, %struct.Memory* %0, i32 1) 
  %6 = and i64 %2, 65535
  %7 = trunc i64 %3 to i32
  %8 = tail call %struct.Memory* @__remill_write_io_port_32(%struct.Memory* %5, i64 %6, i32 %7) 
  ret %struct.Memory* %8
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3ANDI3MnWIhE2MnIhE2InIhEEEP6MemoryS8_R5StateT_T0_T1_(%struct.Memory*, %struct.State* nocapture dereferenceable(3376), i64, i64, i64)  {
  %6 = inttoptr i64 %3 to i8*
  %7 = load i8, i8* %6
  %8 = trunc i64 %4 to i8
  %9 = and i8 %7, %8
  %10 = inttoptr i64 %2 to i8*
  store i8 %9, i8* %10
  %11 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  store i8 0, i8* %11, align 1
  %12 = zext i8 %9 to i32
  %13 = tail call i32 @llvm.ctpop.i32(i32 %12) 
  %14 = trunc i32 %13 to i8
  %15 = and i8 %14, 1
  %16 = xor i8 %15, 1
  %17 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 %16, i8* %17, align 1
  %18 = icmp eq i8 %9, 0
  %19 = zext i1 %18 to i8
  %20 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  store i8 %19, i8* %20, align 1
  %21 = lshr i8 %9, 7
  %22 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 %21, i8* %22, align 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 0, i8* %23, align 1
  %24 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 0, i8* %24, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3ANDI3RnWIhE2RnIhE2InIhEEEP6MemoryS8_R5StateT_T0_T1_(%struct.Memory* readnone returned, %struct.State* nocapture dereferenceable(3376), i8* nocapture, i64, i64)  {
  %6 = and i64 %4, %3
  %7 = trunc i64 %6 to i8
  store i8 %7, i8* %2, align 1
  %8 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  store i8 0, i8* %8, align 1
  %9 = trunc i64 %6 to i32
  %10 = and i32 %9, 255
  %11 = tail call i32 @llvm.ctpop.i32(i32 %10) 
  %12 = trunc i32 %11 to i8
  %13 = and i8 %12, 1
  %14 = xor i8 %13, 1
  %15 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 %14, i8* %15, align 1
  %16 = icmp eq i8 %7, 0
  %17 = zext i1 %16 to i8
  %18 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  store i8 %17, i8* %18, align 1
  %19 = lshr i8 %7, 7
  %20 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 %19, i8* %20, align 1
  %21 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 0, i8* %21, align 1
  %22 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 0, i8* %22, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3ANDI3MnWItE2MnItE2InItEEEP6MemoryS8_R5StateT_T0_T1_(%struct.Memory*, %struct.State* nocapture dereferenceable(3376), i64, i64, i64)  {
  %6 = inttoptr i64 %3 to i16*
  %7 = load i16, i16* %6
  %8 = trunc i64 %4 to i16
  %9 = and i16 %7, %8
  %10 = inttoptr i64 %2 to i16*
  store i16 %9, i16* %10
  %11 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  store i8 0, i8* %11, align 1
  %12 = and i16 %9, 255
  %13 = zext i16 %12 to i32
  %14 = tail call i32 @llvm.ctpop.i32(i32 %13) 
  %15 = trunc i32 %14 to i8
  %16 = and i8 %15, 1
  %17 = xor i8 %16, 1
  %18 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 %17, i8* %18, align 1
  %19 = icmp eq i16 %9, 0
  %20 = zext i1 %19 to i8
  %21 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  store i8 %20, i8* %21, align 1
  %22 = lshr i16 %9, 15
  %23 = trunc i16 %22 to i8
  %24 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 %23, i8* %24, align 1
  %25 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 0, i8* %25, align 1
  %26 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 0, i8* %26, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3ANDI3MnWIjE2MnIjE2InIjEEEP6MemoryS8_R5StateT_T0_T1_(%struct.Memory*, %struct.State* nocapture dereferenceable(3376), i64, i64, i64)  {
  %6 = inttoptr i64 %3 to i32*
  %7 = load i32, i32* %6
  %8 = trunc i64 %4 to i32
  %9 = and i32 %7, %8
  %10 = inttoptr i64 %2 to i32*
  store i32 %9, i32* %10
  %11 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  store i8 0, i8* %11, align 1
  %12 = and i32 %9, 255
  %13 = tail call i32 @llvm.ctpop.i32(i32 %12) 
  %14 = trunc i32 %13 to i8
  %15 = and i8 %14, 1
  %16 = xor i8 %15, 1
  %17 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 %16, i8* %17, align 1
  %18 = icmp eq i32 %9, 0
  %19 = zext i1 %18 to i8
  %20 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  store i8 %19, i8* %20, align 1
  %21 = lshr i32 %9, 31
  %22 = trunc i32 %21 to i8
  %23 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 %22, i8* %23, align 1
  %24 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 0, i8* %24, align 1
  %25 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 0, i8* %25, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3ANDI3MnWImE2MnImE2InImEEEP6MemoryS8_R5StateT_T0_T1_(%struct.Memory*, %struct.State* nocapture dereferenceable(3376), i64, i64, i64)  {
  %6 = inttoptr i64 %3 to i64*
  %7 = load i64, i64* %6
  %8 = and i64 %7, %4
  %9 = inttoptr i64 %2 to i64*
  store i64 %8, i64* %9
  %10 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  store i8 0, i8* %10, align 1
  %11 = trunc i64 %8 to i32
  %12 = and i32 %11, 255
  %13 = tail call i32 @llvm.ctpop.i32(i32 %12) 
  %14 = trunc i32 %13 to i8
  %15 = and i8 %14, 1
  %16 = xor i8 %15, 1
  %17 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 %16, i8* %17, align 1
  %18 = icmp eq i64 %8, 0
  %19 = zext i1 %18 to i8
  %20 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  store i8 %19, i8* %20, align 1
  %21 = lshr i64 %8, 63
  %22 = trunc i64 %21 to i8
  %23 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 %22, i8* %23, align 1
  %24 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 0, i8* %24, align 1
  %25 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 0, i8* %25, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3ANDI3RnWItE2RnItE2InItEEEP6MemoryS8_R5StateT_T0_T1_(%struct.Memory* readnone returned, %struct.State* nocapture dereferenceable(3376), i16* nocapture, i64, i64)  {
  %6 = and i64 %4, %3
  %7 = trunc i64 %6 to i16
  store i16 %7, i16* %2, align 2
  %8 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  store i8 0, i8* %8, align 1
  %9 = and i16 %7, 255
  %10 = zext i16 %9 to i32
  %11 = tail call i32 @llvm.ctpop.i32(i32 %10) 
  %12 = trunc i32 %11 to i8
  %13 = and i8 %12, 1
  %14 = xor i8 %13, 1
  %15 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 %14, i8* %15, align 1
  %16 = icmp eq i16 %7, 0
  %17 = zext i1 %16 to i8
  %18 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  store i8 %17, i8* %18, align 1
  %19 = lshr i16 %7, 15
  %20 = trunc i16 %19 to i8
  %21 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 %20, i8* %21, align 1
  %22 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 0, i8* %22, align 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 0, i8* %23, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3ANDI3RnWImE2RnIjE2InIjEEEP6MemoryS8_R5StateT_T0_T1_(%struct.Memory* readnone returned, %struct.State* nocapture dereferenceable(3376), i64* nocapture, i64, i64)  {
  %6 = and i64 %4, %3
  %7 = trunc i64 %6 to i32
  %8 = and i64 %6, 4294967295
  store i64 %8, i64* %2, align 8
  %9 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  store i8 0, i8* %9, align 1
  %10 = and i32 %7, 255
  %11 = tail call i32 @llvm.ctpop.i32(i32 %10) 
  %12 = trunc i32 %11 to i8
  %13 = and i8 %12, 1
  %14 = xor i8 %13, 1
  %15 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 %14, i8* %15, align 1
  %16 = icmp eq i32 %7, 0
  %17 = zext i1 %16 to i8
  %18 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  store i8 %17, i8* %18, align 1
  %19 = lshr i32 %7, 31
  %20 = trunc i32 %19 to i8
  %21 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 %20, i8* %21, align 1
  %22 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 0, i8* %22, align 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 0, i8* %23, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3ANDI3RnWImE2RnImE2InImEEEP6MemoryS8_R5StateT_T0_T1_(%struct.Memory* readnone returned, %struct.State* nocapture dereferenceable(3376), i64* nocapture, i64, i64)  {
  %6 = and i64 %4, %3
  store i64 %6, i64* %2, align 8
  %7 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  store i8 0, i8* %7, align 1
  %8 = trunc i64 %6 to i32
  %9 = and i32 %8, 255
  %10 = tail call i32 @llvm.ctpop.i32(i32 %9) 
  %11 = trunc i32 %10 to i8
  %12 = and i8 %11, 1
  %13 = xor i8 %12, 1
  %14 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 %13, i8* %14, align 1
  %15 = icmp eq i64 %6, 0
  %16 = zext i1 %15 to i8
  %17 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  store i8 %16, i8* %17, align 1
  %18 = lshr i64 %6, 63
  %19 = trunc i64 %18 to i8
  %20 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 %19, i8* %20, align 1
  %21 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 0, i8* %21, align 1
  %22 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 0, i8* %22, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3ANDI3MnWIhE2MnIhE2RnIhEEEP6MemoryS8_R5StateT_T0_T1_(%struct.Memory*, %struct.State* nocapture dereferenceable(3376), i64, i64, i64)  {
  %6 = inttoptr i64 %3 to i8*
  %7 = load i8, i8* %6
  %8 = trunc i64 %4 to i8
  %9 = and i8 %7, %8
  %10 = inttoptr i64 %2 to i8*
  store i8 %9, i8* %10
  %11 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  store i8 0, i8* %11, align 1
  %12 = zext i8 %9 to i32
  %13 = tail call i32 @llvm.ctpop.i32(i32 %12) 
  %14 = trunc i32 %13 to i8
  %15 = and i8 %14, 1
  %16 = xor i8 %15, 1
  %17 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 %16, i8* %17, align 1
  %18 = icmp eq i8 %9, 0
  %19 = zext i1 %18 to i8
  %20 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  store i8 %19, i8* %20, align 1
  %21 = lshr i8 %9, 7
  %22 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 %21, i8* %22, align 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 0, i8* %23, align 1
  %24 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 0, i8* %24, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3ANDI3RnWIhE2RnIhES4_EEP6MemoryS6_R5StateT_T0_T1_(%struct.Memory* readnone returned, %struct.State* nocapture dereferenceable(3376), i8* nocapture, i64, i64)  {
  %6 = and i64 %4, %3
  %7 = trunc i64 %6 to i8
  store i8 %7, i8* %2, align 1
  %8 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  store i8 0, i8* %8, align 1
  %9 = trunc i64 %6 to i32
  %10 = and i32 %9, 255
  %11 = tail call i32 @llvm.ctpop.i32(i32 %10) 
  %12 = trunc i32 %11 to i8
  %13 = and i8 %12, 1
  %14 = xor i8 %13, 1
  %15 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 %14, i8* %15, align 1
  %16 = icmp eq i8 %7, 0
  %17 = zext i1 %16 to i8
  %18 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  store i8 %17, i8* %18, align 1
  %19 = lshr i8 %7, 7
  %20 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 %19, i8* %20, align 1
  %21 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 0, i8* %21, align 1
  %22 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 0, i8* %22, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3ANDI3MnWItE2MnItE2RnItEEEP6MemoryS8_R5StateT_T0_T1_(%struct.Memory*, %struct.State* nocapture dereferenceable(3376), i64, i64, i64)  {
  %6 = inttoptr i64 %3 to i16*
  %7 = load i16, i16* %6
  %8 = trunc i64 %4 to i16
  %9 = and i16 %7, %8
  %10 = inttoptr i64 %2 to i16*
  store i16 %9, i16* %10
  %11 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  store i8 0, i8* %11, align 1
  %12 = and i16 %9, 255
  %13 = zext i16 %12 to i32
  %14 = tail call i32 @llvm.ctpop.i32(i32 %13) 
  %15 = trunc i32 %14 to i8
  %16 = and i8 %15, 1
  %17 = xor i8 %16, 1
  %18 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 %17, i8* %18, align 1
  %19 = icmp eq i16 %9, 0
  %20 = zext i1 %19 to i8
  %21 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  store i8 %20, i8* %21, align 1
  %22 = lshr i16 %9, 15
  %23 = trunc i16 %22 to i8
  %24 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 %23, i8* %24, align 1
  %25 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 0, i8* %25, align 1
  %26 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 0, i8* %26, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3ANDI3MnWIjE2MnIjE2RnIjEEEP6MemoryS8_R5StateT_T0_T1_(%struct.Memory*, %struct.State* nocapture dereferenceable(3376), i64, i64, i64)  {
  %6 = inttoptr i64 %3 to i32*
  %7 = load i32, i32* %6
  %8 = trunc i64 %4 to i32
  %9 = and i32 %7, %8
  %10 = inttoptr i64 %2 to i32*
  store i32 %9, i32* %10
  %11 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  store i8 0, i8* %11, align 1
  %12 = and i32 %9, 255
  %13 = tail call i32 @llvm.ctpop.i32(i32 %12) 
  %14 = trunc i32 %13 to i8
  %15 = and i8 %14, 1
  %16 = xor i8 %15, 1
  %17 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 %16, i8* %17, align 1
  %18 = icmp eq i32 %9, 0
  %19 = zext i1 %18 to i8
  %20 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  store i8 %19, i8* %20, align 1
  %21 = lshr i32 %9, 31
  %22 = trunc i32 %21 to i8
  %23 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 %22, i8* %23, align 1
  %24 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 0, i8* %24, align 1
  %25 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 0, i8* %25, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3ANDI3MnWImE2MnImE2RnImEEEP6MemoryS8_R5StateT_T0_T1_(%struct.Memory*, %struct.State* nocapture dereferenceable(3376), i64, i64, i64)  {
  %6 = inttoptr i64 %3 to i64*
  %7 = load i64, i64* %6
  %8 = and i64 %7, %4
  %9 = inttoptr i64 %2 to i64*
  store i64 %8, i64* %9
  %10 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  store i8 0, i8* %10, align 1
  %11 = trunc i64 %8 to i32
  %12 = and i32 %11, 255
  %13 = tail call i32 @llvm.ctpop.i32(i32 %12) 
  %14 = trunc i32 %13 to i8
  %15 = and i8 %14, 1
  %16 = xor i8 %15, 1
  %17 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 %16, i8* %17, align 1
  %18 = icmp eq i64 %8, 0
  %19 = zext i1 %18 to i8
  %20 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  store i8 %19, i8* %20, align 1
  %21 = lshr i64 %8, 63
  %22 = trunc i64 %21 to i8
  %23 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 %22, i8* %23, align 1
  %24 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 0, i8* %24, align 1
  %25 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 0, i8* %25, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3ANDI3RnWItE2RnItES4_EEP6MemoryS6_R5StateT_T0_T1_(%struct.Memory* readnone returned, %struct.State* nocapture dereferenceable(3376), i16* nocapture, i64, i64)  {
  %6 = and i64 %4, %3
  %7 = trunc i64 %6 to i16
  store i16 %7, i16* %2, align 2
  %8 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  store i8 0, i8* %8, align 1
  %9 = and i16 %7, 255
  %10 = zext i16 %9 to i32
  %11 = tail call i32 @llvm.ctpop.i32(i32 %10) 
  %12 = trunc i32 %11 to i8
  %13 = and i8 %12, 1
  %14 = xor i8 %13, 1
  %15 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 %14, i8* %15, align 1
  %16 = icmp eq i16 %7, 0
  %17 = zext i1 %16 to i8
  %18 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  store i8 %17, i8* %18, align 1
  %19 = lshr i16 %7, 15
  %20 = trunc i16 %19 to i8
  %21 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 %20, i8* %21, align 1
  %22 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 0, i8* %22, align 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 0, i8* %23, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3ANDI3RnWImE2RnIjES4_EEP6MemoryS6_R5StateT_T0_T1_(%struct.Memory* readnone returned, %struct.State* nocapture dereferenceable(3376), i64* nocapture, i64, i64)  {
  %6 = and i64 %4, %3
  %7 = trunc i64 %6 to i32
  %8 = and i64 %6, 4294967295
  store i64 %8, i64* %2, align 8
  %9 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  store i8 0, i8* %9, align 1
  %10 = and i32 %7, 255
  %11 = tail call i32 @llvm.ctpop.i32(i32 %10) 
  %12 = trunc i32 %11 to i8
  %13 = and i8 %12, 1
  %14 = xor i8 %13, 1
  %15 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 %14, i8* %15, align 1
  %16 = icmp eq i32 %7, 0
  %17 = zext i1 %16 to i8
  %18 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  store i8 %17, i8* %18, align 1
  %19 = lshr i32 %7, 31
  %20 = trunc i32 %19 to i8
  %21 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 %20, i8* %21, align 1
  %22 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 0, i8* %22, align 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 0, i8* %23, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3ANDI3RnWImE2RnImES4_EEP6MemoryS6_R5StateT_T0_T1_(%struct.Memory* readnone returned, %struct.State* nocapture dereferenceable(3376), i64* nocapture, i64, i64)  {
  %6 = and i64 %4, %3
  store i64 %6, i64* %2, align 8
  %7 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  store i8 0, i8* %7, align 1
  %8 = trunc i64 %6 to i32
  %9 = and i32 %8, 255
  %10 = tail call i32 @llvm.ctpop.i32(i32 %9) 
  %11 = trunc i32 %10 to i8
  %12 = and i8 %11, 1
  %13 = xor i8 %12, 1
  %14 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 %13, i8* %14, align 1
  %15 = icmp eq i64 %6, 0
  %16 = zext i1 %15 to i8
  %17 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  store i8 %16, i8* %17, align 1
  %18 = lshr i64 %6, 63
  %19 = trunc i64 %18 to i8
  %20 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 %19, i8* %20, align 1
  %21 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 0, i8* %21, align 1
  %22 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 0, i8* %22, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3ANDI3RnWIhE2RnIhE2MnIhEEEP6MemoryS8_R5StateT_T0_T1_(%struct.Memory*, %struct.State* nocapture dereferenceable(3376), i8* nocapture, i64, i64)  {
  %6 = trunc i64 %3 to i8
  %7 = inttoptr i64 %4 to i8*
  %8 = load i8, i8* %7
  %9 = and i8 %8, %6
  store i8 %9, i8* %2, align 1
  %10 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  store i8 0, i8* %10, align 1
  %11 = zext i8 %9 to i32
  %12 = tail call i32 @llvm.ctpop.i32(i32 %11) 
  %13 = trunc i32 %12 to i8
  %14 = and i8 %13, 1
  %15 = xor i8 %14, 1
  %16 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 %15, i8* %16, align 1
  %17 = icmp eq i8 %9, 0
  %18 = zext i1 %17 to i8
  %19 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  store i8 %18, i8* %19, align 1
  %20 = lshr i8 %9, 7
  %21 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 %20, i8* %21, align 1
  %22 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 0, i8* %22, align 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 0, i8* %23, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3ANDI3RnWItE2RnItE2MnItEEEP6MemoryS8_R5StateT_T0_T1_(%struct.Memory*, %struct.State* nocapture dereferenceable(3376), i16* nocapture, i64, i64)  {
  %6 = trunc i64 %3 to i16
  %7 = inttoptr i64 %4 to i16*
  %8 = load i16, i16* %7
  %9 = and i16 %8, %6
  store i16 %9, i16* %2, align 2
  %10 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  store i8 0, i8* %10, align 1
  %11 = and i16 %9, 255
  %12 = zext i16 %11 to i32
  %13 = tail call i32 @llvm.ctpop.i32(i32 %12) 
  %14 = trunc i32 %13 to i8
  %15 = and i8 %14, 1
  %16 = xor i8 %15, 1
  %17 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 %16, i8* %17, align 1
  %18 = icmp eq i16 %9, 0
  %19 = zext i1 %18 to i8
  %20 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  store i8 %19, i8* %20, align 1
  %21 = lshr i16 %9, 15
  %22 = trunc i16 %21 to i8
  %23 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 %22, i8* %23, align 1
  %24 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 0, i8* %24, align 1
  %25 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 0, i8* %25, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3ANDI3RnWImE2RnIjE2MnIjEEEP6MemoryS8_R5StateT_T0_T1_(%struct.Memory*, %struct.State* nocapture dereferenceable(3376), i64* nocapture, i64, i64)  {
  %6 = trunc i64 %3 to i32
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7
  %9 = and i32 %8, %6
  %10 = zext i32 %9 to i64
  store i64 %10, i64* %2, align 8
  %11 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  store i8 0, i8* %11, align 1
  %12 = and i32 %9, 255
  %13 = tail call i32 @llvm.ctpop.i32(i32 %12) 
  %14 = trunc i32 %13 to i8
  %15 = and i8 %14, 1
  %16 = xor i8 %15, 1
  %17 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 %16, i8* %17, align 1
  %18 = icmp eq i32 %9, 0
  %19 = zext i1 %18 to i8
  %20 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  store i8 %19, i8* %20, align 1
  %21 = lshr i32 %9, 31
  %22 = trunc i32 %21 to i8
  %23 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 %22, i8* %23, align 1
  %24 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 0, i8* %24, align 1
  %25 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 0, i8* %25, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3ANDI3RnWImE2RnImE2MnImEEEP6MemoryS8_R5StateT_T0_T1_(%struct.Memory*, %struct.State* nocapture dereferenceable(3376), i64* nocapture, i64, i64)  {
  %6 = inttoptr i64 %4 to i64*
  %7 = load i64, i64* %6
  %8 = and i64 %7, %3
  store i64 %8, i64* %2, align 8
  %9 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  store i8 0, i8* %9, align 1
  %10 = trunc i64 %8 to i32
  %11 = and i32 %10, 255
  %12 = tail call i32 @llvm.ctpop.i32(i32 %11) 
  %13 = trunc i32 %12 to i8
  %14 = and i8 %13, 1
  %15 = xor i8 %14, 1
  %16 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 %15, i8* %16, align 1
  %17 = icmp eq i64 %8, 0
  %18 = zext i1 %17 to i8
  %19 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  store i8 %18, i8* %19, align 1
  %20 = lshr i64 %8, 63
  %21 = trunc i64 %20 to i8
  %22 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 %21, i8* %22, align 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 0, i8* %23, align 1
  %24 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 0, i8* %24, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L2ORI3MnWIhE2MnIhE2InIhEEEP6MemoryS8_R5StateT_T0_T1_(%struct.Memory*, %struct.State* nocapture dereferenceable(3376), i64, i64, i64)  {
  %6 = inttoptr i64 %3 to i8*
  %7 = load i8, i8* %6
  %8 = trunc i64 %4 to i8
  %9 = or i8 %7, %8
  %10 = inttoptr i64 %2 to i8*
  store i8 %9, i8* %10
  %11 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  store i8 0, i8* %11, align 1
  %12 = zext i8 %9 to i32
  %13 = tail call i32 @llvm.ctpop.i32(i32 %12) 
  %14 = trunc i32 %13 to i8
  %15 = and i8 %14, 1
  %16 = xor i8 %15, 1
  %17 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 %16, i8* %17, align 1
  %18 = icmp eq i8 %9, 0
  %19 = zext i1 %18 to i8
  %20 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  store i8 %19, i8* %20, align 1
  %21 = lshr i8 %9, 7
  %22 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 %21, i8* %22, align 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 0, i8* %23, align 1
  %24 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 0, i8* %24, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L2ORI3RnWIhE2RnIhE2InIhEEEP6MemoryS8_R5StateT_T0_T1_(%struct.Memory* readnone returned, %struct.State* nocapture dereferenceable(3376), i8* nocapture, i64, i64)  {
  %6 = or i64 %4, %3
  %7 = trunc i64 %6 to i8
  store i8 %7, i8* %2, align 1
  %8 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  store i8 0, i8* %8, align 1
  %9 = trunc i64 %6 to i32
  %10 = and i32 %9, 255
  %11 = tail call i32 @llvm.ctpop.i32(i32 %10) 
  %12 = trunc i32 %11 to i8
  %13 = and i8 %12, 1
  %14 = xor i8 %13, 1
  %15 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 %14, i8* %15, align 1
  %16 = icmp eq i8 %7, 0
  %17 = zext i1 %16 to i8
  %18 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  store i8 %17, i8* %18, align 1
  %19 = lshr i8 %7, 7
  %20 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 %19, i8* %20, align 1
  %21 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 0, i8* %21, align 1
  %22 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 0, i8* %22, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L2ORI3MnWItE2MnItE2InItEEEP6MemoryS8_R5StateT_T0_T1_(%struct.Memory*, %struct.State* nocapture dereferenceable(3376), i64, i64, i64)  {
  %6 = inttoptr i64 %3 to i16*
  %7 = load i16, i16* %6
  %8 = trunc i64 %4 to i16
  %9 = or i16 %7, %8
  %10 = inttoptr i64 %2 to i16*
  store i16 %9, i16* %10
  %11 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  store i8 0, i8* %11, align 1
  %12 = and i16 %9, 255
  %13 = zext i16 %12 to i32
  %14 = tail call i32 @llvm.ctpop.i32(i32 %13) 
  %15 = trunc i32 %14 to i8
  %16 = and i8 %15, 1
  %17 = xor i8 %16, 1
  %18 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 %17, i8* %18, align 1
  %19 = icmp eq i16 %9, 0
  %20 = zext i1 %19 to i8
  %21 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  store i8 %20, i8* %21, align 1
  %22 = lshr i16 %9, 15
  %23 = trunc i16 %22 to i8
  %24 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 %23, i8* %24, align 1
  %25 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 0, i8* %25, align 1
  %26 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 0, i8* %26, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L2ORI3MnWIjE2MnIjE2InIjEEEP6MemoryS8_R5StateT_T0_T1_(%struct.Memory*, %struct.State* nocapture dereferenceable(3376), i64, i64, i64)  {
  %6 = inttoptr i64 %3 to i32*
  %7 = load i32, i32* %6
  %8 = trunc i64 %4 to i32
  %9 = or i32 %7, %8
  %10 = inttoptr i64 %2 to i32*
  store i32 %9, i32* %10
  %11 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  store i8 0, i8* %11, align 1
  %12 = and i32 %9, 255
  %13 = tail call i32 @llvm.ctpop.i32(i32 %12) 
  %14 = trunc i32 %13 to i8
  %15 = and i8 %14, 1
  %16 = xor i8 %15, 1
  %17 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 %16, i8* %17, align 1
  %18 = icmp eq i32 %9, 0
  %19 = zext i1 %18 to i8
  %20 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  store i8 %19, i8* %20, align 1
  %21 = lshr i32 %9, 31
  %22 = trunc i32 %21 to i8
  %23 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 %22, i8* %23, align 1
  %24 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 0, i8* %24, align 1
  %25 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 0, i8* %25, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L2ORI3MnWImE2MnImE2InImEEEP6MemoryS8_R5StateT_T0_T1_(%struct.Memory*, %struct.State* nocapture dereferenceable(3376), i64, i64, i64)  {
  %6 = inttoptr i64 %3 to i64*
  %7 = load i64, i64* %6
  %8 = or i64 %7, %4
  %9 = inttoptr i64 %2 to i64*
  store i64 %8, i64* %9
  %10 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  store i8 0, i8* %10, align 1
  %11 = trunc i64 %8 to i32
  %12 = and i32 %11, 255
  %13 = tail call i32 @llvm.ctpop.i32(i32 %12) 
  %14 = trunc i32 %13 to i8
  %15 = and i8 %14, 1
  %16 = xor i8 %15, 1
  %17 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 %16, i8* %17, align 1
  %18 = icmp eq i64 %8, 0
  %19 = zext i1 %18 to i8
  %20 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  store i8 %19, i8* %20, align 1
  %21 = lshr i64 %8, 63
  %22 = trunc i64 %21 to i8
  %23 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 %22, i8* %23, align 1
  %24 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 0, i8* %24, align 1
  %25 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 0, i8* %25, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L2ORI3RnWItE2RnItE2InItEEEP6MemoryS8_R5StateT_T0_T1_(%struct.Memory* readnone returned, %struct.State* nocapture dereferenceable(3376), i16* nocapture, i64, i64)  {
  %6 = or i64 %4, %3
  %7 = trunc i64 %6 to i16
  store i16 %7, i16* %2, align 2
  %8 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  store i8 0, i8* %8, align 1
  %9 = and i16 %7, 255
  %10 = zext i16 %9 to i32
  %11 = tail call i32 @llvm.ctpop.i32(i32 %10) 
  %12 = trunc i32 %11 to i8
  %13 = and i8 %12, 1
  %14 = xor i8 %13, 1
  %15 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 %14, i8* %15, align 1
  %16 = icmp eq i16 %7, 0
  %17 = zext i1 %16 to i8
  %18 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  store i8 %17, i8* %18, align 1
  %19 = lshr i16 %7, 15
  %20 = trunc i16 %19 to i8
  %21 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 %20, i8* %21, align 1
  %22 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 0, i8* %22, align 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 0, i8* %23, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L2ORI3RnWImE2RnIjE2InIjEEEP6MemoryS8_R5StateT_T0_T1_(%struct.Memory* readnone returned, %struct.State* nocapture dereferenceable(3376), i64* nocapture, i64, i64)  {
  %6 = or i64 %4, %3
  %7 = trunc i64 %6 to i32
  %8 = and i64 %6, 4294967295
  store i64 %8, i64* %2, align 8
  %9 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  store i8 0, i8* %9, align 1
  %10 = and i32 %7, 255
  %11 = tail call i32 @llvm.ctpop.i32(i32 %10) 
  %12 = trunc i32 %11 to i8
  %13 = and i8 %12, 1
  %14 = xor i8 %13, 1
  %15 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 %14, i8* %15, align 1
  %16 = icmp eq i32 %7, 0
  %17 = zext i1 %16 to i8
  %18 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  store i8 %17, i8* %18, align 1
  %19 = lshr i32 %7, 31
  %20 = trunc i32 %19 to i8
  %21 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 %20, i8* %21, align 1
  %22 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 0, i8* %22, align 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 0, i8* %23, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L2ORI3RnWImE2RnImE2InImEEEP6MemoryS8_R5StateT_T0_T1_(%struct.Memory* readnone returned, %struct.State* nocapture dereferenceable(3376), i64* nocapture, i64, i64)  {
  %6 = or i64 %4, %3
  store i64 %6, i64* %2, align 8
  %7 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  store i8 0, i8* %7, align 1
  %8 = trunc i64 %6 to i32
  %9 = and i32 %8, 255
  %10 = tail call i32 @llvm.ctpop.i32(i32 %9) 
  %11 = trunc i32 %10 to i8
  %12 = and i8 %11, 1
  %13 = xor i8 %12, 1
  %14 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 %13, i8* %14, align 1
  %15 = icmp eq i64 %6, 0
  %16 = zext i1 %15 to i8
  %17 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  store i8 %16, i8* %17, align 1
  %18 = lshr i64 %6, 63
  %19 = trunc i64 %18 to i8
  %20 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 %19, i8* %20, align 1
  %21 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 0, i8* %21, align 1
  %22 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 0, i8* %22, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L2ORI3MnWIhE2MnIhE2RnIhEEEP6MemoryS8_R5StateT_T0_T1_(%struct.Memory*, %struct.State* nocapture dereferenceable(3376), i64, i64, i64)  {
  %6 = inttoptr i64 %3 to i8*
  %7 = load i8, i8* %6
  %8 = trunc i64 %4 to i8
  %9 = or i8 %7, %8
  %10 = inttoptr i64 %2 to i8*
  store i8 %9, i8* %10
  %11 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  store i8 0, i8* %11, align 1
  %12 = zext i8 %9 to i32
  %13 = tail call i32 @llvm.ctpop.i32(i32 %12) 
  %14 = trunc i32 %13 to i8
  %15 = and i8 %14, 1
  %16 = xor i8 %15, 1
  %17 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 %16, i8* %17, align 1
  %18 = icmp eq i8 %9, 0
  %19 = zext i1 %18 to i8
  %20 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  store i8 %19, i8* %20, align 1
  %21 = lshr i8 %9, 7
  %22 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 %21, i8* %22, align 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 0, i8* %23, align 1
  %24 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 0, i8* %24, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L2ORI3RnWIhE2RnIhES4_EEP6MemoryS6_R5StateT_T0_T1_(%struct.Memory* readnone returned, %struct.State* nocapture dereferenceable(3376), i8* nocapture, i64, i64)  {
  %6 = or i64 %4, %3
  %7 = trunc i64 %6 to i8
  store i8 %7, i8* %2, align 1
  %8 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  store i8 0, i8* %8, align 1
  %9 = trunc i64 %6 to i32
  %10 = and i32 %9, 255
  %11 = tail call i32 @llvm.ctpop.i32(i32 %10) 
  %12 = trunc i32 %11 to i8
  %13 = and i8 %12, 1
  %14 = xor i8 %13, 1
  %15 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 %14, i8* %15, align 1
  %16 = icmp eq i8 %7, 0
  %17 = zext i1 %16 to i8
  %18 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  store i8 %17, i8* %18, align 1
  %19 = lshr i8 %7, 7
  %20 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 %19, i8* %20, align 1
  %21 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 0, i8* %21, align 1
  %22 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 0, i8* %22, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L2ORI3MnWItE2MnItE2RnItEEEP6MemoryS8_R5StateT_T0_T1_(%struct.Memory*, %struct.State* nocapture dereferenceable(3376), i64, i64, i64)  {
  %6 = inttoptr i64 %3 to i16*
  %7 = load i16, i16* %6
  %8 = trunc i64 %4 to i16
  %9 = or i16 %7, %8
  %10 = inttoptr i64 %2 to i16*
  store i16 %9, i16* %10
  %11 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  store i8 0, i8* %11, align 1
  %12 = and i16 %9, 255
  %13 = zext i16 %12 to i32
  %14 = tail call i32 @llvm.ctpop.i32(i32 %13) 
  %15 = trunc i32 %14 to i8
  %16 = and i8 %15, 1
  %17 = xor i8 %16, 1
  %18 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 %17, i8* %18, align 1
  %19 = icmp eq i16 %9, 0
  %20 = zext i1 %19 to i8
  %21 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  store i8 %20, i8* %21, align 1
  %22 = lshr i16 %9, 15
  %23 = trunc i16 %22 to i8
  %24 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 %23, i8* %24, align 1
  %25 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 0, i8* %25, align 1
  %26 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 0, i8* %26, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L2ORI3MnWIjE2MnIjE2RnIjEEEP6MemoryS8_R5StateT_T0_T1_(%struct.Memory*, %struct.State* nocapture dereferenceable(3376), i64, i64, i64)  {
  %6 = inttoptr i64 %3 to i32*
  %7 = load i32, i32* %6
  %8 = trunc i64 %4 to i32
  %9 = or i32 %7, %8
  %10 = inttoptr i64 %2 to i32*
  store i32 %9, i32* %10
  %11 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  store i8 0, i8* %11, align 1
  %12 = and i32 %9, 255
  %13 = tail call i32 @llvm.ctpop.i32(i32 %12) 
  %14 = trunc i32 %13 to i8
  %15 = and i8 %14, 1
  %16 = xor i8 %15, 1
  %17 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 %16, i8* %17, align 1
  %18 = icmp eq i32 %9, 0
  %19 = zext i1 %18 to i8
  %20 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  store i8 %19, i8* %20, align 1
  %21 = lshr i32 %9, 31
  %22 = trunc i32 %21 to i8
  %23 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 %22, i8* %23, align 1
  %24 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 0, i8* %24, align 1
  %25 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 0, i8* %25, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L2ORI3MnWImE2MnImE2RnImEEEP6MemoryS8_R5StateT_T0_T1_(%struct.Memory*, %struct.State* nocapture dereferenceable(3376), i64, i64, i64)  {
  %6 = inttoptr i64 %3 to i64*
  %7 = load i64, i64* %6
  %8 = or i64 %7, %4
  %9 = inttoptr i64 %2 to i64*
  store i64 %8, i64* %9
  %10 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  store i8 0, i8* %10, align 1
  %11 = trunc i64 %8 to i32
  %12 = and i32 %11, 255
  %13 = tail call i32 @llvm.ctpop.i32(i32 %12) 
  %14 = trunc i32 %13 to i8
  %15 = and i8 %14, 1
  %16 = xor i8 %15, 1
  %17 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 %16, i8* %17, align 1
  %18 = icmp eq i64 %8, 0
  %19 = zext i1 %18 to i8
  %20 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  store i8 %19, i8* %20, align 1
  %21 = lshr i64 %8, 63
  %22 = trunc i64 %21 to i8
  %23 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 %22, i8* %23, align 1
  %24 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 0, i8* %24, align 1
  %25 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 0, i8* %25, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L2ORI3RnWItE2RnItES4_EEP6MemoryS6_R5StateT_T0_T1_(%struct.Memory* readnone returned, %struct.State* nocapture dereferenceable(3376), i16* nocapture, i64, i64)  {
  %6 = or i64 %4, %3
  %7 = trunc i64 %6 to i16
  store i16 %7, i16* %2, align 2
  %8 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  store i8 0, i8* %8, align 1
  %9 = and i16 %7, 255
  %10 = zext i16 %9 to i32
  %11 = tail call i32 @llvm.ctpop.i32(i32 %10) 
  %12 = trunc i32 %11 to i8
  %13 = and i8 %12, 1
  %14 = xor i8 %13, 1
  %15 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 %14, i8* %15, align 1
  %16 = icmp eq i16 %7, 0
  %17 = zext i1 %16 to i8
  %18 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  store i8 %17, i8* %18, align 1
  %19 = lshr i16 %7, 15
  %20 = trunc i16 %19 to i8
  %21 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 %20, i8* %21, align 1
  %22 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 0, i8* %22, align 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 0, i8* %23, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L2ORI3RnWImE2RnIjES4_EEP6MemoryS6_R5StateT_T0_T1_(%struct.Memory* readnone returned, %struct.State* nocapture dereferenceable(3376), i64* nocapture, i64, i64)  {
  %6 = or i64 %4, %3
  %7 = trunc i64 %6 to i32
  %8 = and i64 %6, 4294967295
  store i64 %8, i64* %2, align 8
  %9 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  store i8 0, i8* %9, align 1
  %10 = and i32 %7, 255
  %11 = tail call i32 @llvm.ctpop.i32(i32 %10) 
  %12 = trunc i32 %11 to i8
  %13 = and i8 %12, 1
  %14 = xor i8 %13, 1
  %15 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 %14, i8* %15, align 1
  %16 = icmp eq i32 %7, 0
  %17 = zext i1 %16 to i8
  %18 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  store i8 %17, i8* %18, align 1
  %19 = lshr i32 %7, 31
  %20 = trunc i32 %19 to i8
  %21 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 %20, i8* %21, align 1
  %22 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 0, i8* %22, align 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 0, i8* %23, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L2ORI3RnWImE2RnImES4_EEP6MemoryS6_R5StateT_T0_T1_(%struct.Memory* readnone returned, %struct.State* nocapture dereferenceable(3376), i64* nocapture, i64, i64)  {
  %6 = or i64 %4, %3
  store i64 %6, i64* %2, align 8
  %7 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  store i8 0, i8* %7, align 1
  %8 = trunc i64 %6 to i32
  %9 = and i32 %8, 255
  %10 = tail call i32 @llvm.ctpop.i32(i32 %9) 
  %11 = trunc i32 %10 to i8
  %12 = and i8 %11, 1
  %13 = xor i8 %12, 1
  %14 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 %13, i8* %14, align 1
  %15 = icmp eq i64 %6, 0
  %16 = zext i1 %15 to i8
  %17 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  store i8 %16, i8* %17, align 1
  %18 = lshr i64 %6, 63
  %19 = trunc i64 %18 to i8
  %20 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 %19, i8* %20, align 1
  %21 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 0, i8* %21, align 1
  %22 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 0, i8* %22, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L2ORI3RnWIhE2RnIhE2MnIhEEEP6MemoryS8_R5StateT_T0_T1_(%struct.Memory*, %struct.State* nocapture dereferenceable(3376), i8* nocapture, i64, i64)  {
  %6 = trunc i64 %3 to i8
  %7 = inttoptr i64 %4 to i8*
  %8 = load i8, i8* %7
  %9 = or i8 %8, %6
  store i8 %9, i8* %2, align 1
  %10 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  store i8 0, i8* %10, align 1
  %11 = zext i8 %9 to i32
  %12 = tail call i32 @llvm.ctpop.i32(i32 %11) 
  %13 = trunc i32 %12 to i8
  %14 = and i8 %13, 1
  %15 = xor i8 %14, 1
  %16 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 %15, i8* %16, align 1
  %17 = icmp eq i8 %9, 0
  %18 = zext i1 %17 to i8
  %19 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  store i8 %18, i8* %19, align 1
  %20 = lshr i8 %9, 7
  %21 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 %20, i8* %21, align 1
  %22 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 0, i8* %22, align 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 0, i8* %23, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L2ORI3RnWItE2RnItE2MnItEEEP6MemoryS8_R5StateT_T0_T1_(%struct.Memory*, %struct.State* nocapture dereferenceable(3376), i16* nocapture, i64, i64)  {
  %6 = trunc i64 %3 to i16
  %7 = inttoptr i64 %4 to i16*
  %8 = load i16, i16* %7
  %9 = or i16 %8, %6
  store i16 %9, i16* %2, align 2
  %10 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  store i8 0, i8* %10, align 1
  %11 = and i16 %9, 255
  %12 = zext i16 %11 to i32
  %13 = tail call i32 @llvm.ctpop.i32(i32 %12) 
  %14 = trunc i32 %13 to i8
  %15 = and i8 %14, 1
  %16 = xor i8 %15, 1
  %17 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 %16, i8* %17, align 1
  %18 = icmp eq i16 %9, 0
  %19 = zext i1 %18 to i8
  %20 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  store i8 %19, i8* %20, align 1
  %21 = lshr i16 %9, 15
  %22 = trunc i16 %21 to i8
  %23 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 %22, i8* %23, align 1
  %24 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 0, i8* %24, align 1
  %25 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 0, i8* %25, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L2ORI3RnWImE2RnIjE2MnIjEEEP6MemoryS8_R5StateT_T0_T1_(%struct.Memory*, %struct.State* nocapture dereferenceable(3376), i64* nocapture, i64, i64)  {
  %6 = trunc i64 %3 to i32
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7
  %9 = or i32 %8, %6
  %10 = zext i32 %9 to i64
  store i64 %10, i64* %2, align 8
  %11 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  store i8 0, i8* %11, align 1
  %12 = and i32 %9, 255
  %13 = tail call i32 @llvm.ctpop.i32(i32 %12) 
  %14 = trunc i32 %13 to i8
  %15 = and i8 %14, 1
  %16 = xor i8 %15, 1
  %17 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 %16, i8* %17, align 1
  %18 = icmp eq i32 %9, 0
  %19 = zext i1 %18 to i8
  %20 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  store i8 %19, i8* %20, align 1
  %21 = lshr i32 %9, 31
  %22 = trunc i32 %21 to i8
  %23 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 %22, i8* %23, align 1
  %24 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 0, i8* %24, align 1
  %25 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 0, i8* %25, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L2ORI3RnWImE2RnImE2MnImEEEP6MemoryS8_R5StateT_T0_T1_(%struct.Memory*, %struct.State* nocapture dereferenceable(3376), i64* nocapture, i64, i64)  {
  %6 = inttoptr i64 %4 to i64*
  %7 = load i64, i64* %6
  %8 = or i64 %7, %3
  store i64 %8, i64* %2, align 8
  %9 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  store i8 0, i8* %9, align 1
  %10 = trunc i64 %8 to i32
  %11 = and i32 %10, 255
  %12 = tail call i32 @llvm.ctpop.i32(i32 %11) 
  %13 = trunc i32 %12 to i8
  %14 = and i8 %13, 1
  %15 = xor i8 %14, 1
  %16 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 %15, i8* %16, align 1
  %17 = icmp eq i64 %8, 0
  %18 = zext i1 %17 to i8
  %19 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  store i8 %18, i8* %19, align 1
  %20 = lshr i64 %8, 63
  %21 = trunc i64 %20 to i8
  %22 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 %21, i8* %22, align 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 0, i8* %23, align 1
  %24 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 0, i8* %24, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3XORI3MnWIhE2MnIhE2InIhEEEP6MemoryS8_R5StateT_T0_T1_(%struct.Memory*, %struct.State* nocapture dereferenceable(3376), i64, i64, i64)  {
  %6 = inttoptr i64 %3 to i8*
  %7 = load i8, i8* %6
  %8 = trunc i64 %4 to i8
  %9 = xor i8 %7, %8
  %10 = inttoptr i64 %2 to i8*
  store i8 %9, i8* %10
  %11 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  store i8 0, i8* %11, align 1
  %12 = zext i8 %9 to i32
  %13 = tail call i32 @llvm.ctpop.i32(i32 %12) 
  %14 = trunc i32 %13 to i8
  %15 = and i8 %14, 1
  %16 = xor i8 %15, 1
  %17 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 %16, i8* %17, align 1
  %18 = icmp eq i8 %9, 0
  %19 = zext i1 %18 to i8
  %20 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  store i8 %19, i8* %20, align 1
  %21 = lshr i8 %9, 7
  %22 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 %21, i8* %22, align 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 0, i8* %23, align 1
  %24 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 0, i8* %24, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3XORI3RnWIhE2RnIhE2InIhEEEP6MemoryS8_R5StateT_T0_T1_(%struct.Memory* readnone returned, %struct.State* nocapture dereferenceable(3376), i8* nocapture, i64, i64)  {
  %6 = xor i64 %4, %3
  %7 = trunc i64 %6 to i8
  store i8 %7, i8* %2, align 1
  %8 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  store i8 0, i8* %8, align 1
  %9 = trunc i64 %6 to i32
  %10 = and i32 %9, 255
  %11 = tail call i32 @llvm.ctpop.i32(i32 %10) 
  %12 = trunc i32 %11 to i8
  %13 = and i8 %12, 1
  %14 = xor i8 %13, 1
  %15 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 %14, i8* %15, align 1
  %16 = icmp eq i8 %7, 0
  %17 = zext i1 %16 to i8
  %18 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  store i8 %17, i8* %18, align 1
  %19 = lshr i8 %7, 7
  %20 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 %19, i8* %20, align 1
  %21 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 0, i8* %21, align 1
  %22 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 0, i8* %22, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3XORI3MnWItE2MnItE2InItEEEP6MemoryS8_R5StateT_T0_T1_(%struct.Memory*, %struct.State* nocapture dereferenceable(3376), i64, i64, i64)  {
  %6 = inttoptr i64 %3 to i16*
  %7 = load i16, i16* %6
  %8 = trunc i64 %4 to i16
  %9 = xor i16 %7, %8
  %10 = inttoptr i64 %2 to i16*
  store i16 %9, i16* %10
  %11 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  store i8 0, i8* %11, align 1
  %12 = and i16 %9, 255
  %13 = zext i16 %12 to i32
  %14 = tail call i32 @llvm.ctpop.i32(i32 %13) 
  %15 = trunc i32 %14 to i8
  %16 = and i8 %15, 1
  %17 = xor i8 %16, 1
  %18 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 %17, i8* %18, align 1
  %19 = icmp eq i16 %9, 0
  %20 = zext i1 %19 to i8
  %21 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  store i8 %20, i8* %21, align 1
  %22 = lshr i16 %9, 15
  %23 = trunc i16 %22 to i8
  %24 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 %23, i8* %24, align 1
  %25 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 0, i8* %25, align 1
  %26 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 0, i8* %26, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3XORI3MnWIjE2MnIjE2InIjEEEP6MemoryS8_R5StateT_T0_T1_(%struct.Memory*, %struct.State* nocapture dereferenceable(3376), i64, i64, i64)  {
  %6 = inttoptr i64 %3 to i32*
  %7 = load i32, i32* %6
  %8 = trunc i64 %4 to i32
  %9 = xor i32 %7, %8
  %10 = inttoptr i64 %2 to i32*
  store i32 %9, i32* %10
  %11 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  store i8 0, i8* %11, align 1
  %12 = and i32 %9, 255
  %13 = tail call i32 @llvm.ctpop.i32(i32 %12) 
  %14 = trunc i32 %13 to i8
  %15 = and i8 %14, 1
  %16 = xor i8 %15, 1
  %17 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 %16, i8* %17, align 1
  %18 = icmp eq i32 %9, 0
  %19 = zext i1 %18 to i8
  %20 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  store i8 %19, i8* %20, align 1
  %21 = lshr i32 %9, 31
  %22 = trunc i32 %21 to i8
  %23 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 %22, i8* %23, align 1
  %24 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 0, i8* %24, align 1
  %25 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 0, i8* %25, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3XORI3MnWImE2MnImE2InImEEEP6MemoryS8_R5StateT_T0_T1_(%struct.Memory*, %struct.State* nocapture dereferenceable(3376), i64, i64, i64)  {
  %6 = inttoptr i64 %3 to i64*
  %7 = load i64, i64* %6
  %8 = xor i64 %7, %4
  %9 = inttoptr i64 %2 to i64*
  store i64 %8, i64* %9
  %10 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  store i8 0, i8* %10, align 1
  %11 = trunc i64 %8 to i32
  %12 = and i32 %11, 255
  %13 = tail call i32 @llvm.ctpop.i32(i32 %12) 
  %14 = trunc i32 %13 to i8
  %15 = and i8 %14, 1
  %16 = xor i8 %15, 1
  %17 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 %16, i8* %17, align 1
  %18 = icmp eq i64 %8, 0
  %19 = zext i1 %18 to i8
  %20 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  store i8 %19, i8* %20, align 1
  %21 = lshr i64 %8, 63
  %22 = trunc i64 %21 to i8
  %23 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 %22, i8* %23, align 1
  %24 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 0, i8* %24, align 1
  %25 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 0, i8* %25, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3XORI3RnWItE2RnItE2InItEEEP6MemoryS8_R5StateT_T0_T1_(%struct.Memory* readnone returned, %struct.State* nocapture dereferenceable(3376), i16* nocapture, i64, i64)  {
  %6 = xor i64 %4, %3
  %7 = trunc i64 %6 to i16
  store i16 %7, i16* %2, align 2
  %8 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  store i8 0, i8* %8, align 1
  %9 = and i16 %7, 255
  %10 = zext i16 %9 to i32
  %11 = tail call i32 @llvm.ctpop.i32(i32 %10) 
  %12 = trunc i32 %11 to i8
  %13 = and i8 %12, 1
  %14 = xor i8 %13, 1
  %15 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 %14, i8* %15, align 1
  %16 = icmp eq i16 %7, 0
  %17 = zext i1 %16 to i8
  %18 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  store i8 %17, i8* %18, align 1
  %19 = lshr i16 %7, 15
  %20 = trunc i16 %19 to i8
  %21 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 %20, i8* %21, align 1
  %22 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 0, i8* %22, align 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 0, i8* %23, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3XORI3RnWImE2RnIjE2InIjEEEP6MemoryS8_R5StateT_T0_T1_(%struct.Memory* readnone returned, %struct.State* nocapture dereferenceable(3376), i64* nocapture, i64, i64)  {
  %6 = xor i64 %4, %3
  %7 = trunc i64 %6 to i32
  %8 = and i64 %6, 4294967295
  store i64 %8, i64* %2, align 8
  %9 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  store i8 0, i8* %9, align 1
  %10 = and i32 %7, 255
  %11 = tail call i32 @llvm.ctpop.i32(i32 %10) 
  %12 = trunc i32 %11 to i8
  %13 = and i8 %12, 1
  %14 = xor i8 %13, 1
  %15 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 %14, i8* %15, align 1
  %16 = icmp eq i32 %7, 0
  %17 = zext i1 %16 to i8
  %18 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  store i8 %17, i8* %18, align 1
  %19 = lshr i32 %7, 31
  %20 = trunc i32 %19 to i8
  %21 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 %20, i8* %21, align 1
  %22 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 0, i8* %22, align 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 0, i8* %23, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3XORI3RnWImE2RnImE2InImEEEP6MemoryS8_R5StateT_T0_T1_(%struct.Memory* readnone returned, %struct.State* nocapture dereferenceable(3376), i64* nocapture, i64, i64)  {
  %6 = xor i64 %4, %3
  store i64 %6, i64* %2, align 8
  %7 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  store i8 0, i8* %7, align 1
  %8 = trunc i64 %6 to i32
  %9 = and i32 %8, 255
  %10 = tail call i32 @llvm.ctpop.i32(i32 %9) 
  %11 = trunc i32 %10 to i8
  %12 = and i8 %11, 1
  %13 = xor i8 %12, 1
  %14 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 %13, i8* %14, align 1
  %15 = icmp eq i64 %6, 0
  %16 = zext i1 %15 to i8
  %17 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  store i8 %16, i8* %17, align 1
  %18 = lshr i64 %6, 63
  %19 = trunc i64 %18 to i8
  %20 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 %19, i8* %20, align 1
  %21 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 0, i8* %21, align 1
  %22 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 0, i8* %22, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3XORI3MnWIhE2MnIhE2RnIhEEEP6MemoryS8_R5StateT_T0_T1_(%struct.Memory*, %struct.State* nocapture dereferenceable(3376), i64, i64, i64)  {
  %6 = inttoptr i64 %3 to i8*
  %7 = load i8, i8* %6
  %8 = trunc i64 %4 to i8
  %9 = xor i8 %7, %8
  %10 = inttoptr i64 %2 to i8*
  store i8 %9, i8* %10
  %11 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  store i8 0, i8* %11, align 1
  %12 = zext i8 %9 to i32
  %13 = tail call i32 @llvm.ctpop.i32(i32 %12) 
  %14 = trunc i32 %13 to i8
  %15 = and i8 %14, 1
  %16 = xor i8 %15, 1
  %17 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 %16, i8* %17, align 1
  %18 = icmp eq i8 %9, 0
  %19 = zext i1 %18 to i8
  %20 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  store i8 %19, i8* %20, align 1
  %21 = lshr i8 %9, 7
  %22 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 %21, i8* %22, align 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 0, i8* %23, align 1
  %24 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 0, i8* %24, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3XORI3RnWIhE2RnIhES4_EEP6MemoryS6_R5StateT_T0_T1_(%struct.Memory* readnone returned, %struct.State* nocapture dereferenceable(3376), i8* nocapture, i64, i64)  {
  %6 = xor i64 %4, %3
  %7 = trunc i64 %6 to i8
  store i8 %7, i8* %2, align 1
  %8 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  store i8 0, i8* %8, align 1
  %9 = trunc i64 %6 to i32
  %10 = and i32 %9, 255
  %11 = tail call i32 @llvm.ctpop.i32(i32 %10) 
  %12 = trunc i32 %11 to i8
  %13 = and i8 %12, 1
  %14 = xor i8 %13, 1
  %15 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 %14, i8* %15, align 1
  %16 = icmp eq i8 %7, 0
  %17 = zext i1 %16 to i8
  %18 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  store i8 %17, i8* %18, align 1
  %19 = lshr i8 %7, 7
  %20 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 %19, i8* %20, align 1
  %21 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 0, i8* %21, align 1
  %22 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 0, i8* %22, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3XORI3MnWItE2MnItE2RnItEEEP6MemoryS8_R5StateT_T0_T1_(%struct.Memory*, %struct.State* nocapture dereferenceable(3376), i64, i64, i64)  {
  %6 = inttoptr i64 %3 to i16*
  %7 = load i16, i16* %6
  %8 = trunc i64 %4 to i16
  %9 = xor i16 %7, %8
  %10 = inttoptr i64 %2 to i16*
  store i16 %9, i16* %10
  %11 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  store i8 0, i8* %11, align 1
  %12 = and i16 %9, 255
  %13 = zext i16 %12 to i32
  %14 = tail call i32 @llvm.ctpop.i32(i32 %13) 
  %15 = trunc i32 %14 to i8
  %16 = and i8 %15, 1
  %17 = xor i8 %16, 1
  %18 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 %17, i8* %18, align 1
  %19 = icmp eq i16 %9, 0
  %20 = zext i1 %19 to i8
  %21 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  store i8 %20, i8* %21, align 1
  %22 = lshr i16 %9, 15
  %23 = trunc i16 %22 to i8
  %24 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 %23, i8* %24, align 1
  %25 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 0, i8* %25, align 1
  %26 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 0, i8* %26, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3XORI3MnWIjE2MnIjE2RnIjEEEP6MemoryS8_R5StateT_T0_T1_(%struct.Memory*, %struct.State* nocapture dereferenceable(3376), i64, i64, i64)  {
  %6 = inttoptr i64 %3 to i32*
  %7 = load i32, i32* %6
  %8 = trunc i64 %4 to i32
  %9 = xor i32 %7, %8
  %10 = inttoptr i64 %2 to i32*
  store i32 %9, i32* %10
  %11 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  store i8 0, i8* %11, align 1
  %12 = and i32 %9, 255
  %13 = tail call i32 @llvm.ctpop.i32(i32 %12) 
  %14 = trunc i32 %13 to i8
  %15 = and i8 %14, 1
  %16 = xor i8 %15, 1
  %17 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 %16, i8* %17, align 1
  %18 = icmp eq i32 %9, 0
  %19 = zext i1 %18 to i8
  %20 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  store i8 %19, i8* %20, align 1
  %21 = lshr i32 %9, 31
  %22 = trunc i32 %21 to i8
  %23 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 %22, i8* %23, align 1
  %24 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 0, i8* %24, align 1
  %25 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 0, i8* %25, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3XORI3MnWImE2MnImE2RnImEEEP6MemoryS8_R5StateT_T0_T1_(%struct.Memory*, %struct.State* nocapture dereferenceable(3376), i64, i64, i64)  {
  %6 = inttoptr i64 %3 to i64*
  %7 = load i64, i64* %6
  %8 = xor i64 %7, %4
  %9 = inttoptr i64 %2 to i64*
  store i64 %8, i64* %9
  %10 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  store i8 0, i8* %10, align 1
  %11 = trunc i64 %8 to i32
  %12 = and i32 %11, 255
  %13 = tail call i32 @llvm.ctpop.i32(i32 %12) 
  %14 = trunc i32 %13 to i8
  %15 = and i8 %14, 1
  %16 = xor i8 %15, 1
  %17 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 %16, i8* %17, align 1
  %18 = icmp eq i64 %8, 0
  %19 = zext i1 %18 to i8
  %20 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  store i8 %19, i8* %20, align 1
  %21 = lshr i64 %8, 63
  %22 = trunc i64 %21 to i8
  %23 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 %22, i8* %23, align 1
  %24 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 0, i8* %24, align 1
  %25 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 0, i8* %25, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3XORI3RnWItE2RnItES4_EEP6MemoryS6_R5StateT_T0_T1_(%struct.Memory* readnone returned, %struct.State* nocapture dereferenceable(3376), i16* nocapture, i64, i64)  {
  %6 = xor i64 %4, %3
  %7 = trunc i64 %6 to i16
  store i16 %7, i16* %2, align 2
  %8 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  store i8 0, i8* %8, align 1
  %9 = and i16 %7, 255
  %10 = zext i16 %9 to i32
  %11 = tail call i32 @llvm.ctpop.i32(i32 %10) 
  %12 = trunc i32 %11 to i8
  %13 = and i8 %12, 1
  %14 = xor i8 %13, 1
  %15 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 %14, i8* %15, align 1
  %16 = icmp eq i16 %7, 0
  %17 = zext i1 %16 to i8
  %18 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  store i8 %17, i8* %18, align 1
  %19 = lshr i16 %7, 15
  %20 = trunc i16 %19 to i8
  %21 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 %20, i8* %21, align 1
  %22 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 0, i8* %22, align 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 0, i8* %23, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3XORI3RnWImE2RnIjES4_EEP6MemoryS6_R5StateT_T0_T1_(%struct.Memory* readnone returned, %struct.State* nocapture dereferenceable(3376), i64* nocapture, i64, i64)  {
  %6 = xor i64 %4, %3
  %7 = trunc i64 %6 to i32
  %8 = and i64 %6, 4294967295
  store i64 %8, i64* %2, align 8
  %9 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  store i8 0, i8* %9, align 1
  %10 = and i32 %7, 255
  %11 = tail call i32 @llvm.ctpop.i32(i32 %10) 
  %12 = trunc i32 %11 to i8
  %13 = and i8 %12, 1
  %14 = xor i8 %13, 1
  %15 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 %14, i8* %15, align 1
  %16 = icmp eq i32 %7, 0
  %17 = zext i1 %16 to i8
  %18 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  store i8 %17, i8* %18, align 1
  %19 = lshr i32 %7, 31
  %20 = trunc i32 %19 to i8
  %21 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 %20, i8* %21, align 1
  %22 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 0, i8* %22, align 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 0, i8* %23, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3XORI3RnWImE2RnImES4_EEP6MemoryS6_R5StateT_T0_T1_(%struct.Memory* readnone returned, %struct.State* nocapture dereferenceable(3376), i64* nocapture, i64, i64)  {
  %6 = xor i64 %4, %3
  store i64 %6, i64* %2, align 8
  %7 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  store i8 0, i8* %7, align 1
  %8 = trunc i64 %6 to i32
  %9 = and i32 %8, 255
  %10 = tail call i32 @llvm.ctpop.i32(i32 %9) 
  %11 = trunc i32 %10 to i8
  %12 = and i8 %11, 1
  %13 = xor i8 %12, 1
  %14 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 %13, i8* %14, align 1
  %15 = icmp eq i64 %6, 0
  %16 = zext i1 %15 to i8
  %17 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  store i8 %16, i8* %17, align 1
  %18 = lshr i64 %6, 63
  %19 = trunc i64 %18 to i8
  %20 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 %19, i8* %20, align 1
  %21 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 0, i8* %21, align 1
  %22 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 0, i8* %22, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3XORI3RnWIhE2RnIhE2MnIhEEEP6MemoryS8_R5StateT_T0_T1_(%struct.Memory*, %struct.State* nocapture dereferenceable(3376), i8* nocapture, i64, i64)  {
  %6 = trunc i64 %3 to i8
  %7 = inttoptr i64 %4 to i8*
  %8 = load i8, i8* %7
  %9 = xor i8 %8, %6
  store i8 %9, i8* %2, align 1
  %10 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  store i8 0, i8* %10, align 1
  %11 = zext i8 %9 to i32
  %12 = tail call i32 @llvm.ctpop.i32(i32 %11) 
  %13 = trunc i32 %12 to i8
  %14 = and i8 %13, 1
  %15 = xor i8 %14, 1
  %16 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 %15, i8* %16, align 1
  %17 = icmp eq i8 %9, 0
  %18 = zext i1 %17 to i8
  %19 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  store i8 %18, i8* %19, align 1
  %20 = lshr i8 %9, 7
  %21 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 %20, i8* %21, align 1
  %22 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 0, i8* %22, align 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 0, i8* %23, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3XORI3RnWItE2RnItE2MnItEEEP6MemoryS8_R5StateT_T0_T1_(%struct.Memory*, %struct.State* nocapture dereferenceable(3376), i16* nocapture, i64, i64)  {
  %6 = trunc i64 %3 to i16
  %7 = inttoptr i64 %4 to i16*
  %8 = load i16, i16* %7
  %9 = xor i16 %8, %6
  store i16 %9, i16* %2, align 2
  %10 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  store i8 0, i8* %10, align 1
  %11 = and i16 %9, 255
  %12 = zext i16 %11 to i32
  %13 = tail call i32 @llvm.ctpop.i32(i32 %12) 
  %14 = trunc i32 %13 to i8
  %15 = and i8 %14, 1
  %16 = xor i8 %15, 1
  %17 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 %16, i8* %17, align 1
  %18 = icmp eq i16 %9, 0
  %19 = zext i1 %18 to i8
  %20 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  store i8 %19, i8* %20, align 1
  %21 = lshr i16 %9, 15
  %22 = trunc i16 %21 to i8
  %23 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 %22, i8* %23, align 1
  %24 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 0, i8* %24, align 1
  %25 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 0, i8* %25, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3XORI3RnWImE2RnIjE2MnIjEEEP6MemoryS8_R5StateT_T0_T1_(%struct.Memory*, %struct.State* nocapture dereferenceable(3376), i64* nocapture, i64, i64)  {
  %6 = trunc i64 %3 to i32
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7
  %9 = xor i32 %8, %6
  %10 = zext i32 %9 to i64
  store i64 %10, i64* %2, align 8
  %11 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  store i8 0, i8* %11, align 1
  %12 = and i32 %9, 255
  %13 = tail call i32 @llvm.ctpop.i32(i32 %12) 
  %14 = trunc i32 %13 to i8
  %15 = and i8 %14, 1
  %16 = xor i8 %15, 1
  %17 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 %16, i8* %17, align 1
  %18 = icmp eq i32 %9, 0
  %19 = zext i1 %18 to i8
  %20 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  store i8 %19, i8* %20, align 1
  %21 = lshr i32 %9, 31
  %22 = trunc i32 %21 to i8
  %23 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 %22, i8* %23, align 1
  %24 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 0, i8* %24, align 1
  %25 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 0, i8* %25, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3XORI3RnWImE2RnImE2MnImEEEP6MemoryS8_R5StateT_T0_T1_(%struct.Memory*, %struct.State* nocapture dereferenceable(3376), i64* nocapture, i64, i64)  {
  %6 = inttoptr i64 %4 to i64*
  %7 = load i64, i64* %6
  %8 = xor i64 %7, %3
  store i64 %8, i64* %2, align 8
  %9 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  store i8 0, i8* %9, align 1
  %10 = trunc i64 %8 to i32
  %11 = and i32 %10, 255
  %12 = tail call i32 @llvm.ctpop.i32(i32 %11) 
  %13 = trunc i32 %12 to i8
  %14 = and i8 %13, 1
  %15 = xor i8 %14, 1
  %16 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 %15, i8* %16, align 1
  %17 = icmp eq i64 %8, 0
  %18 = zext i1 %17 to i8
  %19 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  store i8 %18, i8* %19, align 1
  %20 = lshr i64 %8, 63
  %21 = trunc i64 %20 to i8
  %22 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 %21, i8* %22, align 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 0, i8* %23, align 1
  %24 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 0, i8* %24, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind readnone
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3NOTI3MnWIhE2MnIhEEEP6MemoryS6_R5StateT_T0_(%struct.Memory*, %struct.State* nocapture readnone dereferenceable(3376), i64, i64)  {
  %5 = inttoptr i64 %3 to i8*
  %6 = load i8, i8* %5
  %7 = xor i8 %6, -1
  %8 = inttoptr i64 %2 to i8*
  store i8 %7, i8* %8
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline norecurse nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3NOTI3RnWIhE2RnIhEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* readnone returned, %struct.State* nocapture readnone dereferenceable(3376), i8* nocapture, i64)  {
  %5 = trunc i64 %3 to i8
  %6 = xor i8 %5, -1
  store i8 %6, i8* %2, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind readnone
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3NOTI3MnWItE2MnItEEEP6MemoryS6_R5StateT_T0_(%struct.Memory*, %struct.State* nocapture readnone dereferenceable(3376), i64, i64)  {
  %5 = inttoptr i64 %3 to i16*
  %6 = load i16, i16* %5
  %7 = xor i16 %6, -1
  %8 = inttoptr i64 %2 to i16*
  store i16 %7, i16* %8
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind readnone
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3NOTI3MnWIjE2MnIjEEEP6MemoryS6_R5StateT_T0_(%struct.Memory*, %struct.State* nocapture readnone dereferenceable(3376), i64, i64)  {
  %5 = inttoptr i64 %3 to i32*
  %6 = load i32, i32* %5
  %7 = xor i32 %6, -1
  %8 = inttoptr i64 %2 to i32*
  store i32 %7, i32* %8
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind readnone
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3NOTI3MnWImE2MnImEEEP6MemoryS6_R5StateT_T0_(%struct.Memory*, %struct.State* nocapture readnone dereferenceable(3376), i64, i64)  {
  %5 = inttoptr i64 %3 to i64*
  %6 = load i64, i64* %5
  %7 = xor i64 %6, -1
  %8 = inttoptr i64 %2 to i64*
  store i64 %7, i64* %8
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline norecurse nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3NOTI3RnWItE2RnItEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* readnone returned, %struct.State* nocapture readnone dereferenceable(3376), i16* nocapture, i64)  {
  %5 = trunc i64 %3 to i16
  %6 = xor i16 %5, -1
  store i16 %6, i16* %2, align 2
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline norecurse nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3NOTI3RnWImE2RnIjEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* readnone returned, %struct.State* nocapture readnone dereferenceable(3376), i64* nocapture, i64)  {
  %5 = and i64 %3, 4294967295
  %6 = xor i64 %5, 4294967295
  store i64 %6, i64* %2, align 8
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline norecurse nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3NOTI3RnWImE2RnImEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* readnone returned, %struct.State* nocapture readnone dereferenceable(3376), i64* nocapture, i64)  {
  %5 = xor i64 %3, -1
  store i64 %5, i64* %2, align 8
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L4TESTI2MnIhE2InIhEEEP6MemoryS6_R5StateT_T0_(%struct.Memory*, %struct.State* nocapture dereferenceable(3376), i64, i64)  {
  %5 = inttoptr i64 %2 to i8*
  %6 = load i8, i8* %5
  %7 = trunc i64 %3 to i8
  %8 = and i8 %6, %7
  %9 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  store i8 0, i8* %9, align 1
  %10 = zext i8 %8 to i32
  %11 = tail call i32 @llvm.ctpop.i32(i32 %10) 
  %12 = trunc i32 %11 to i8
  %13 = and i8 %12, 1
  %14 = xor i8 %13, 1
  %15 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 %14, i8* %15, align 1
  %16 = icmp eq i8 %8, 0
  %17 = zext i1 %16 to i8
  %18 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  store i8 %17, i8* %18, align 1
  %19 = lshr i8 %8, 7
  %20 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 %19, i8* %20, align 1
  %21 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 0, i8* %21, align 1
  %22 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 0, i8* %22, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L4TESTI2RnIhE2InIhEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* readnone returned, %struct.State* nocapture dereferenceable(3376), i64, i64)  {
  %5 = and i64 %3, %2
  %6 = trunc i64 %5 to i8
  %7 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  store i8 0, i8* %7, align 1
  %8 = trunc i64 %5 to i32
  %9 = and i32 %8, 255
  %10 = tail call i32 @llvm.ctpop.i32(i32 %9) 
  %11 = trunc i32 %10 to i8
  %12 = and i8 %11, 1
  %13 = xor i8 %12, 1
  %14 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 %13, i8* %14, align 1
  %15 = icmp eq i8 %6, 0
  %16 = zext i1 %15 to i8
  %17 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  store i8 %16, i8* %17, align 1
  %18 = lshr i8 %6, 7
  %19 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 %18, i8* %19, align 1
  %20 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 0, i8* %20, align 1
  %21 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 0, i8* %21, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L4TESTI2MnItE2InItEEEP6MemoryS6_R5StateT_T0_(%struct.Memory*, %struct.State* nocapture dereferenceable(3376), i64, i64)  {
  %5 = inttoptr i64 %2 to i16*
  %6 = load i16, i16* %5
  %7 = trunc i64 %3 to i16
  %8 = and i16 %6, %7
  %9 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  store i8 0, i8* %9, align 1
  %10 = and i16 %8, 255
  %11 = zext i16 %10 to i32
  %12 = tail call i32 @llvm.ctpop.i32(i32 %11) 
  %13 = trunc i32 %12 to i8
  %14 = and i8 %13, 1
  %15 = xor i8 %14, 1
  %16 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 %15, i8* %16, align 1
  %17 = icmp eq i16 %8, 0
  %18 = zext i1 %17 to i8
  %19 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  store i8 %18, i8* %19, align 1
  %20 = lshr i16 %8, 15
  %21 = trunc i16 %20 to i8
  %22 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 %21, i8* %22, align 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 0, i8* %23, align 1
  %24 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 0, i8* %24, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L4TESTI2MnIjE2InIjEEEP6MemoryS6_R5StateT_T0_(%struct.Memory*, %struct.State* nocapture dereferenceable(3376), i64, i64)  {
  %5 = inttoptr i64 %2 to i32*
  %6 = load i32, i32* %5
  %7 = trunc i64 %3 to i32
  %8 = and i32 %6, %7
  %9 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  store i8 0, i8* %9, align 1
  %10 = and i32 %8, 255
  %11 = tail call i32 @llvm.ctpop.i32(i32 %10) 
  %12 = trunc i32 %11 to i8
  %13 = and i8 %12, 1
  %14 = xor i8 %13, 1
  %15 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 %14, i8* %15, align 1
  %16 = icmp eq i32 %8, 0
  %17 = zext i1 %16 to i8
  %18 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  store i8 %17, i8* %18, align 1
  %19 = lshr i32 %8, 31
  %20 = trunc i32 %19 to i8
  %21 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 %20, i8* %21, align 1
  %22 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 0, i8* %22, align 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 0, i8* %23, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L4TESTI2MnImE2InImEEEP6MemoryS6_R5StateT_T0_(%struct.Memory*, %struct.State* nocapture dereferenceable(3376), i64, i64)  {
  %5 = inttoptr i64 %2 to i64*
  %6 = load i64, i64* %5
  %7 = and i64 %6, %3
  %8 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  store i8 0, i8* %8, align 1
  %9 = trunc i64 %7 to i32
  %10 = and i32 %9, 255
  %11 = tail call i32 @llvm.ctpop.i32(i32 %10) 
  %12 = trunc i32 %11 to i8
  %13 = and i8 %12, 1
  %14 = xor i8 %13, 1
  %15 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 %14, i8* %15, align 1
  %16 = icmp eq i64 %7, 0
  %17 = zext i1 %16 to i8
  %18 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  store i8 %17, i8* %18, align 1
  %19 = lshr i64 %7, 63
  %20 = trunc i64 %19 to i8
  %21 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 %20, i8* %21, align 1
  %22 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 0, i8* %22, align 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 0, i8* %23, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L4TESTI2RnItE2InItEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* readnone returned, %struct.State* nocapture dereferenceable(3376), i64, i64)  {
  %5 = and i64 %3, %2
  %6 = trunc i64 %5 to i16
  %7 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  store i8 0, i8* %7, align 1
  %8 = and i16 %6, 255
  %9 = zext i16 %8 to i32
  %10 = tail call i32 @llvm.ctpop.i32(i32 %9) 
  %11 = trunc i32 %10 to i8
  %12 = and i8 %11, 1
  %13 = xor i8 %12, 1
  %14 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 %13, i8* %14, align 1
  %15 = icmp eq i16 %6, 0
  %16 = zext i1 %15 to i8
  %17 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  store i8 %16, i8* %17, align 1
  %18 = lshr i16 %6, 15
  %19 = trunc i16 %18 to i8
  %20 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 %19, i8* %20, align 1
  %21 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 0, i8* %21, align 1
  %22 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 0, i8* %22, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L4TESTI2RnIjE2InIjEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* readnone returned, %struct.State* nocapture dereferenceable(3376), i64, i64)  {
  %5 = and i64 %3, %2
  %6 = trunc i64 %5 to i32
  %7 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  store i8 0, i8* %7, align 1
  %8 = and i32 %6, 255
  %9 = tail call i32 @llvm.ctpop.i32(i32 %8) 
  %10 = trunc i32 %9 to i8
  %11 = and i8 %10, 1
  %12 = xor i8 %11, 1
  %13 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 %12, i8* %13, align 1
  %14 = icmp eq i32 %6, 0
  %15 = zext i1 %14 to i8
  %16 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  store i8 %15, i8* %16, align 1
  %17 = lshr i32 %6, 31
  %18 = trunc i32 %17 to i8
  %19 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 %18, i8* %19, align 1
  %20 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 0, i8* %20, align 1
  %21 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 0, i8* %21, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L4TESTI2RnImE2InImEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* readnone returned, %struct.State* nocapture dereferenceable(3376), i64, i64)  {
  %5 = and i64 %3, %2
  %6 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  store i8 0, i8* %6, align 1
  %7 = trunc i64 %5 to i32
  %8 = and i32 %7, 255
  %9 = tail call i32 @llvm.ctpop.i32(i32 %8) 
  %10 = trunc i32 %9 to i8
  %11 = and i8 %10, 1
  %12 = xor i8 %11, 1
  %13 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 %12, i8* %13, align 1
  %14 = icmp eq i64 %5, 0
  %15 = zext i1 %14 to i8
  %16 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  store i8 %15, i8* %16, align 1
  %17 = lshr i64 %5, 63
  %18 = trunc i64 %17 to i8
  %19 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 %18, i8* %19, align 1
  %20 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 0, i8* %20, align 1
  %21 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 0, i8* %21, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L4TESTI2MnIhE2RnIhEEEP6MemoryS6_R5StateT_T0_(%struct.Memory*, %struct.State* nocapture dereferenceable(3376), i64, i64)  {
  %5 = inttoptr i64 %2 to i8*
  %6 = load i8, i8* %5
  %7 = trunc i64 %3 to i8
  %8 = and i8 %6, %7
  %9 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  store i8 0, i8* %9, align 1
  %10 = zext i8 %8 to i32
  %11 = tail call i32 @llvm.ctpop.i32(i32 %10) 
  %12 = trunc i32 %11 to i8
  %13 = and i8 %12, 1
  %14 = xor i8 %13, 1
  %15 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 %14, i8* %15, align 1
  %16 = icmp eq i8 %8, 0
  %17 = zext i1 %16 to i8
  %18 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  store i8 %17, i8* %18, align 1
  %19 = lshr i8 %8, 7
  %20 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 %19, i8* %20, align 1
  %21 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 0, i8* %21, align 1
  %22 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 0, i8* %22, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L4TESTI2RnIhES2_EEP6MemoryS4_R5StateT_T0_(%struct.Memory* readnone returned, %struct.State* nocapture dereferenceable(3376), i64, i64)  {
  %5 = and i64 %3, %2
  %6 = trunc i64 %5 to i8
  %7 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  store i8 0, i8* %7, align 1
  %8 = trunc i64 %5 to i32
  %9 = and i32 %8, 255
  %10 = tail call i32 @llvm.ctpop.i32(i32 %9) 
  %11 = trunc i32 %10 to i8
  %12 = and i8 %11, 1
  %13 = xor i8 %12, 1
  %14 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 %13, i8* %14, align 1
  %15 = icmp eq i8 %6, 0
  %16 = zext i1 %15 to i8
  %17 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  store i8 %16, i8* %17, align 1
  %18 = lshr i8 %6, 7
  %19 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 %18, i8* %19, align 1
  %20 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 0, i8* %20, align 1
  %21 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 0, i8* %21, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L4TESTI2MnItE2RnItEEEP6MemoryS6_R5StateT_T0_(%struct.Memory*, %struct.State* nocapture dereferenceable(3376), i64, i64)  {
  %5 = inttoptr i64 %2 to i16*
  %6 = load i16, i16* %5
  %7 = trunc i64 %3 to i16
  %8 = and i16 %6, %7
  %9 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  store i8 0, i8* %9, align 1
  %10 = and i16 %8, 255
  %11 = zext i16 %10 to i32
  %12 = tail call i32 @llvm.ctpop.i32(i32 %11) 
  %13 = trunc i32 %12 to i8
  %14 = and i8 %13, 1
  %15 = xor i8 %14, 1
  %16 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 %15, i8* %16, align 1
  %17 = icmp eq i16 %8, 0
  %18 = zext i1 %17 to i8
  %19 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  store i8 %18, i8* %19, align 1
  %20 = lshr i16 %8, 15
  %21 = trunc i16 %20 to i8
  %22 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 %21, i8* %22, align 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 0, i8* %23, align 1
  %24 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 0, i8* %24, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L4TESTI2MnIjE2RnIjEEEP6MemoryS6_R5StateT_T0_(%struct.Memory*, %struct.State* nocapture dereferenceable(3376), i64, i64)  {
  %5 = inttoptr i64 %2 to i32*
  %6 = load i32, i32* %5
  %7 = trunc i64 %3 to i32
  %8 = and i32 %6, %7
  %9 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  store i8 0, i8* %9, align 1
  %10 = and i32 %8, 255
  %11 = tail call i32 @llvm.ctpop.i32(i32 %10) 
  %12 = trunc i32 %11 to i8
  %13 = and i8 %12, 1
  %14 = xor i8 %13, 1
  %15 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 %14, i8* %15, align 1
  %16 = icmp eq i32 %8, 0
  %17 = zext i1 %16 to i8
  %18 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  store i8 %17, i8* %18, align 1
  %19 = lshr i32 %8, 31
  %20 = trunc i32 %19 to i8
  %21 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 %20, i8* %21, align 1
  %22 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 0, i8* %22, align 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 0, i8* %23, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L4TESTI2MnImE2RnImEEEP6MemoryS6_R5StateT_T0_(%struct.Memory*, %struct.State* nocapture dereferenceable(3376), i64, i64)  {
  %5 = inttoptr i64 %2 to i64*
  %6 = load i64, i64* %5
  %7 = and i64 %6, %3
  %8 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  store i8 0, i8* %8, align 1
  %9 = trunc i64 %7 to i32
  %10 = and i32 %9, 255
  %11 = tail call i32 @llvm.ctpop.i32(i32 %10) 
  %12 = trunc i32 %11 to i8
  %13 = and i8 %12, 1
  %14 = xor i8 %13, 1
  %15 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 %14, i8* %15, align 1
  %16 = icmp eq i64 %7, 0
  %17 = zext i1 %16 to i8
  %18 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  store i8 %17, i8* %18, align 1
  %19 = lshr i64 %7, 63
  %20 = trunc i64 %19 to i8
  %21 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 %20, i8* %21, align 1
  %22 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 0, i8* %22, align 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 0, i8* %23, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L4TESTI2RnItES2_EEP6MemoryS4_R5StateT_T0_(%struct.Memory* readnone returned, %struct.State* nocapture dereferenceable(3376), i64, i64)  {
  %5 = and i64 %3, %2
  %6 = trunc i64 %5 to i16
  %7 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  store i8 0, i8* %7, align 1
  %8 = and i16 %6, 255
  %9 = zext i16 %8 to i32
  %10 = tail call i32 @llvm.ctpop.i32(i32 %9) 
  %11 = trunc i32 %10 to i8
  %12 = and i8 %11, 1
  %13 = xor i8 %12, 1
  %14 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 %13, i8* %14, align 1
  %15 = icmp eq i16 %6, 0
  %16 = zext i1 %15 to i8
  %17 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  store i8 %16, i8* %17, align 1
  %18 = lshr i16 %6, 15
  %19 = trunc i16 %18 to i8
  %20 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 %19, i8* %20, align 1
  %21 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 0, i8* %21, align 1
  %22 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 0, i8* %22, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L4TESTI2RnIjES2_EEP6MemoryS4_R5StateT_T0_(%struct.Memory* readnone returned, %struct.State* nocapture dereferenceable(3376), i64, i64)  {
  %5 = and i64 %3, %2
  %6 = trunc i64 %5 to i32
  %7 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  store i8 0, i8* %7, align 1
  %8 = and i32 %6, 255
  %9 = tail call i32 @llvm.ctpop.i32(i32 %8) 
  %10 = trunc i32 %9 to i8
  %11 = and i8 %10, 1
  %12 = xor i8 %11, 1
  %13 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 %12, i8* %13, align 1
  %14 = icmp eq i32 %6, 0
  %15 = zext i1 %14 to i8
  %16 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  store i8 %15, i8* %16, align 1
  %17 = lshr i32 %6, 31
  %18 = trunc i32 %17 to i8
  %19 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 %18, i8* %19, align 1
  %20 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 0, i8* %20, align 1
  %21 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 0, i8* %21, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L4TESTI2RnImES2_EEP6MemoryS4_R5StateT_T0_(%struct.Memory* readnone returned, %struct.State* nocapture dereferenceable(3376), i64, i64)  {
  %5 = and i64 %3, %2
  %6 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  store i8 0, i8* %6, align 1
  %7 = trunc i64 %5 to i32
  %8 = and i32 %7, 255
  %9 = tail call i32 @llvm.ctpop.i32(i32 %8) 
  %10 = trunc i32 %9 to i8
  %11 = and i8 %10, 1
  %12 = xor i8 %11, 1
  %13 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 %12, i8* %13, align 1
  %14 = icmp eq i64 %5, 0
  %15 = zext i1 %14 to i8
  %16 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  store i8 %15, i8* %16, align 1
  %17 = lshr i64 %5, 63
  %18 = trunc i64 %17 to i8
  %19 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 %18, i8* %19, align 1
  %20 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 0, i8* %20, align 1
  %21 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 0, i8* %21, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L7PXOR_64I4RVnWI7vec64_tE3RVnIS2_E3MVnIS2_EEEP6MemoryS9_R5StateT_T0_T1_(%struct.Memory* returned, %struct.State* nocapture readnone dereferenceable(3376), i64* nocapture, i64, i64)  {
  %6 = inttoptr i64 %4 to i64*
  %7 = load i64, i64* %6
  %8 = xor i64 %7, %3
  store i64 %8, i64* %2, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L7PXOR_64I4RVnWI7vec64_tE3RVnIS2_ES5_EEP6MemoryS7_R5StateT_T0_T1_(%struct.Memory* readnone returned, %struct.State* nocapture readnone dereferenceable(3376), i64* nocapture, i64, i64)  {
  %6 = xor i64 %4, %3
  store i64 %6, i64* %2, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L7PXOR_64I3VnWI8vec128_tE2VnIS2_E3MVnIS2_EEEP6MemoryS9_R5StateT_T0_T1_(%struct.Memory* returned, %struct.State* nocapture readnone dereferenceable(3376), i8* nocapture, i8* nocapture readonly, i64)  {
  %6 = bitcast i8* %3 to <2 x i64>*
  %7 = load <2 x i64>, <2 x i64>* %6, align 1
  %8 = inttoptr i64 %4 to i64*
  %9 = load i64, i64* %8
  %10 = add i64 %4, 8
  %11 = inttoptr i64 %10 to i64*
  %12 = load i64, i64* %11
  %13 = insertelement <2 x i64> undef, i64 %9, i32 0
  %14 = insertelement <2 x i64> %13, i64 %12, i32 1
  %15 = xor <2 x i64> %14, %7
  %16 = bitcast i8* %2 to <2 x i64>*
  store <2 x i64> %15, <2 x i64>* %16, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L7PXOR_64I3VnWI8vec128_tE2VnIS2_ES5_EEP6MemoryS7_R5StateT_T0_T1_(%struct.Memory* readnone returned, %struct.State* nocapture readnone dereferenceable(3376), i8* nocapture, i8* nocapture readonly, i8* nocapture readonly)  {
  %6 = bitcast i8* %3 to <2 x i64>*
  %7 = load <2 x i64>, <2 x i64>* %6, align 1
  %8 = bitcast i8* %4 to <2 x i64>*
  %9 = load <2 x i64>, <2 x i64>* %8, align 1
  %10 = xor <2 x i64> %9, %7
  %11 = bitcast i8* %2 to <2 x i64>*
  store <2 x i64> %10, <2 x i64>* %11, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L4PXORI3VnWI8vec128_tE2VnIS2_E3MVnIS2_EEEP6MemoryS9_R5StateT_T0_T1_(%struct.Memory* returned, %struct.State* nocapture readnone dereferenceable(3376), i8* nocapture, i8* nocapture readonly, i64)  {
  %6 = bitcast i8* %3 to i64*
  %7 = load i64, i64* %6, align 1
  %8 = getelementptr inbounds i8, i8* %3, i64 8
  %9 = bitcast i8* %8 to i64*
  %10 = load i64, i64* %9, align 1
  %11 = trunc i64 %7 to i32
  %12 = lshr i64 %7, 32
  %13 = trunc i64 %12 to i32
  %14 = inttoptr i64 %4 to i32*
  %15 = load i32, i32* %14
  %16 = add i64 %4, 4
  %17 = inttoptr i64 %16 to i32*
  %18 = load i32, i32* %17
  %19 = add i64 %4, 8
  %20 = inttoptr i64 %19 to i32*
  %21 = load i32, i32* %20
  %22 = add i64 %4, 12
  %23 = inttoptr i64 %22 to i32*
  %24 = load i32, i32* %23
  %25 = xor i32 %15, %11
  %26 = xor i32 %18, %13
  %27 = trunc i64 %10 to i32
  %28 = xor i32 %21, %27
  %29 = lshr i64 %10, 32
  %30 = trunc i64 %29 to i32
  %31 = xor i32 %24, %30
  %32 = bitcast i8* %2 to i32*
  store i32 %25, i32* %32, align 1
  %33 = getelementptr inbounds i8, i8* %2, i64 4
  %34 = bitcast i8* %33 to i32*
  store i32 %26, i32* %34, align 1
  %35 = getelementptr inbounds i8, i8* %2, i64 8
  %36 = bitcast i8* %35 to i32*
  store i32 %28, i32* %36, align 1
  %37 = getelementptr inbounds i8, i8* %2, i64 12
  %38 = bitcast i8* %37 to i32*
  store i32 %31, i32* %38, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L4PXORI3VnWI8vec128_tE2VnIS2_ES5_EEP6MemoryS7_R5StateT_T0_T1_(%struct.Memory* readnone returned, %struct.State* nocapture readnone dereferenceable(3376), i8* nocapture, i8* nocapture readonly, i8* nocapture readonly)  {
  %6 = bitcast i8* %3 to i64*
  %7 = load i64, i64* %6, align 1
  %8 = getelementptr inbounds i8, i8* %3, i64 8
  %9 = bitcast i8* %8 to i64*
  %10 = load i64, i64* %9, align 1
  %11 = bitcast i8* %4 to i64*
  %12 = load i64, i64* %11, align 1
  %13 = getelementptr inbounds i8, i8* %4, i64 8
  %14 = bitcast i8* %13 to i64*
  %15 = load i64, i64* %14, align 1
  %16 = xor i64 %12, %7
  %17 = xor i64 %15, %10
  %18 = trunc i64 %16 to i32
  %19 = lshr i64 %16, 32
  %20 = trunc i64 %19 to i32
  %21 = bitcast i8* %2 to i32*
  store i32 %18, i32* %21, align 1
  %22 = getelementptr inbounds i8, i8* %2, i64 4
  %23 = bitcast i8* %22 to i32*
  store i32 %20, i32* %23, align 1
  %24 = trunc i64 %17 to i32
  %25 = getelementptr inbounds i8, i8* %2, i64 8
  %26 = bitcast i8* %25 to i32*
  store i32 %24, i32* %26, align 1
  %27 = lshr i64 %17, 32
  %28 = trunc i64 %27 to i32
  %29 = getelementptr inbounds i8, i8* %2, i64 12
  %30 = bitcast i8* %29 to i32*
  store i32 %28, i32* %30, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L7PAND_64I4RVnWI7vec64_tE3RVnIS2_E3MVnIS2_EEEP6MemoryS9_R5StateT_T0_T1_(%struct.Memory* returned, %struct.State* nocapture readnone dereferenceable(3376), i64* nocapture, i64, i64)  {
  %6 = inttoptr i64 %4 to i64*
  %7 = load i64, i64* %6
  %8 = and i64 %7, %3
  store i64 %8, i64* %2, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L7PAND_64I4RVnWI7vec64_tE3RVnIS2_ES5_EEP6MemoryS7_R5StateT_T0_T1_(%struct.Memory* readnone returned, %struct.State* nocapture readnone dereferenceable(3376), i64* nocapture, i64, i64)  {
  %6 = and i64 %4, %3
  store i64 %6, i64* %2, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L4PANDI3VnWI8vec128_tE2VnIS2_E3MVnIS2_EEEP6MemoryS9_R5StateT_T0_T1_(%struct.Memory* returned, %struct.State* nocapture readnone dereferenceable(3376), i8* nocapture, i8* nocapture readonly, i64)  {
  %6 = bitcast i8* %3 to i64*
  %7 = load i64, i64* %6, align 1
  %8 = getelementptr inbounds i8, i8* %3, i64 8
  %9 = bitcast i8* %8 to i64*
  %10 = load i64, i64* %9, align 1
  %11 = trunc i64 %7 to i32
  %12 = lshr i64 %7, 32
  %13 = trunc i64 %12 to i32
  %14 = inttoptr i64 %4 to i32*
  %15 = load i32, i32* %14
  %16 = add i64 %4, 4
  %17 = inttoptr i64 %16 to i32*
  %18 = load i32, i32* %17
  %19 = add i64 %4, 8
  %20 = inttoptr i64 %19 to i32*
  %21 = load i32, i32* %20
  %22 = add i64 %4, 12
  %23 = inttoptr i64 %22 to i32*
  %24 = load i32, i32* %23
  %25 = and i32 %15, %11
  %26 = and i32 %18, %13
  %27 = trunc i64 %10 to i32
  %28 = and i32 %21, %27
  %29 = lshr i64 %10, 32
  %30 = trunc i64 %29 to i32
  %31 = and i32 %24, %30
  %32 = bitcast i8* %2 to i32*
  store i32 %25, i32* %32, align 1
  %33 = getelementptr inbounds i8, i8* %2, i64 4
  %34 = bitcast i8* %33 to i32*
  store i32 %26, i32* %34, align 1
  %35 = getelementptr inbounds i8, i8* %2, i64 8
  %36 = bitcast i8* %35 to i32*
  store i32 %28, i32* %36, align 1
  %37 = getelementptr inbounds i8, i8* %2, i64 12
  %38 = bitcast i8* %37 to i32*
  store i32 %31, i32* %38, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L4PANDI3VnWI8vec128_tE2VnIS2_ES5_EEP6MemoryS7_R5StateT_T0_T1_(%struct.Memory* readnone returned, %struct.State* nocapture readnone dereferenceable(3376), i8* nocapture, i8* nocapture readonly, i8* nocapture readonly)  {
  %6 = bitcast i8* %3 to i64*
  %7 = load i64, i64* %6, align 1
  %8 = getelementptr inbounds i8, i8* %3, i64 8
  %9 = bitcast i8* %8 to i64*
  %10 = load i64, i64* %9, align 1
  %11 = bitcast i8* %4 to i64*
  %12 = load i64, i64* %11, align 1
  %13 = getelementptr inbounds i8, i8* %4, i64 8
  %14 = bitcast i8* %13 to i64*
  %15 = load i64, i64* %14, align 1
  %16 = and i64 %12, %7
  %17 = and i64 %15, %10
  %18 = trunc i64 %16 to i32
  %19 = lshr i64 %16, 32
  %20 = trunc i64 %19 to i32
  %21 = bitcast i8* %2 to i32*
  store i32 %18, i32* %21, align 1
  %22 = getelementptr inbounds i8, i8* %2, i64 4
  %23 = bitcast i8* %22 to i32*
  store i32 %20, i32* %23, align 1
  %24 = trunc i64 %17 to i32
  %25 = getelementptr inbounds i8, i8* %2, i64 8
  %26 = bitcast i8* %25 to i32*
  store i32 %24, i32* %26, align 1
  %27 = lshr i64 %17, 32
  %28 = trunc i64 %27 to i32
  %29 = getelementptr inbounds i8, i8* %2, i64 12
  %30 = bitcast i8* %29 to i32*
  store i32 %28, i32* %30, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L7PAND_64I3VnWI8vec128_tE2VnIS2_E3MVnIS2_EEEP6MemoryS9_R5StateT_T0_T1_(%struct.Memory* returned, %struct.State* nocapture readnone dereferenceable(3376), i8* nocapture, i8* nocapture readonly, i64)  {
  %6 = bitcast i8* %3 to <2 x i64>*
  %7 = load <2 x i64>, <2 x i64>* %6, align 1
  %8 = inttoptr i64 %4 to i64*
  %9 = load i64, i64* %8
  %10 = add i64 %4, 8
  %11 = inttoptr i64 %10 to i64*
  %12 = load i64, i64* %11
  %13 = insertelement <2 x i64> undef, i64 %9, i32 0
  %14 = insertelement <2 x i64> %13, i64 %12, i32 1
  %15 = and <2 x i64> %14, %7
  %16 = bitcast i8* %2 to <2 x i64>*
  store <2 x i64> %15, <2 x i64>* %16, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L7PAND_64I3VnWI8vec128_tE2VnIS2_ES5_EEP6MemoryS7_R5StateT_T0_T1_(%struct.Memory* readnone returned, %struct.State* nocapture readnone dereferenceable(3376), i8* nocapture, i8* nocapture readonly, i8* nocapture readonly)  {
  %6 = bitcast i8* %3 to <2 x i64>*
  %7 = load <2 x i64>, <2 x i64>* %6, align 1
  %8 = bitcast i8* %4 to <2 x i64>*
  %9 = load <2 x i64>, <2 x i64>* %8, align 1
  %10 = and <2 x i64> %9, %7
  %11 = bitcast i8* %2 to <2 x i64>*
  store <2 x i64> %10, <2 x i64>* %11, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L8PANDN_64I4RVnWI7vec64_tE3RVnIS2_E3MVnIS2_EEEP6MemoryS9_R5StateT_T0_T1_(%struct.Memory* returned, %struct.State* nocapture readnone dereferenceable(3376), i64* nocapture, i64, i64)  {
  %6 = inttoptr i64 %4 to i64*
  %7 = load i64, i64* %6
  %8 = xor i64 %7, -1
  %9 = and i64 %8, %3
  store i64 %9, i64* %2, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L8PANDN_64I4RVnWI7vec64_tE3RVnIS2_ES5_EEP6MemoryS7_R5StateT_T0_T1_(%struct.Memory* readnone returned, %struct.State* nocapture readnone dereferenceable(3376), i64* nocapture, i64, i64)  {
  %6 = xor i64 %4, -1
  %7 = and i64 %6, %3
  store i64 %7, i64* %2, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L5PANDNI3VnWI8vec128_tE2VnIS2_E3MVnIS2_EEEP6MemoryS9_R5StateT_T0_T1_(%struct.Memory* returned, %struct.State* nocapture readnone dereferenceable(3376), i8* nocapture, i8* nocapture readonly, i64)  {
  %6 = bitcast i8* %3 to i64*
  %7 = load i64, i64* %6, align 1
  %8 = getelementptr inbounds i8, i8* %3, i64 8
  %9 = bitcast i8* %8 to i64*
  %10 = load i64, i64* %9, align 1
  %11 = trunc i64 %7 to i32
  %12 = lshr i64 %7, 32
  %13 = trunc i64 %12 to i32
  %14 = inttoptr i64 %4 to i32*
  %15 = load i32, i32* %14
  %16 = add i64 %4, 4
  %17 = inttoptr i64 %16 to i32*
  %18 = load i32, i32* %17
  %19 = add i64 %4, 8
  %20 = inttoptr i64 %19 to i32*
  %21 = load i32, i32* %20
  %22 = add i64 %4, 12
  %23 = inttoptr i64 %22 to i32*
  %24 = load i32, i32* %23
  %25 = xor i32 %15, -1
  %26 = and i32 %11, %25
  %27 = xor i32 %18, -1
  %28 = and i32 %13, %27
  %29 = trunc i64 %10 to i32
  %30 = xor i32 %21, -1
  %31 = and i32 %29, %30
  %32 = lshr i64 %10, 32
  %33 = trunc i64 %32 to i32
  %34 = xor i32 %24, -1
  %35 = and i32 %33, %34
  %36 = bitcast i8* %2 to i32*
  store i32 %26, i32* %36, align 1
  %37 = getelementptr inbounds i8, i8* %2, i64 4
  %38 = bitcast i8* %37 to i32*
  store i32 %28, i32* %38, align 1
  %39 = getelementptr inbounds i8, i8* %2, i64 8
  %40 = bitcast i8* %39 to i32*
  store i32 %31, i32* %40, align 1
  %41 = getelementptr inbounds i8, i8* %2, i64 12
  %42 = bitcast i8* %41 to i32*
  store i32 %35, i32* %42, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L5PANDNI3VnWI8vec128_tE2VnIS2_ES5_EEP6MemoryS7_R5StateT_T0_T1_(%struct.Memory* readnone returned, %struct.State* nocapture readnone dereferenceable(3376), i8* nocapture, i8* nocapture readonly, i8* nocapture readonly)  {
  %6 = bitcast i8* %3 to i64*
  %7 = load i64, i64* %6, align 1
  %8 = getelementptr inbounds i8, i8* %3, i64 8
  %9 = bitcast i8* %8 to i64*
  %10 = load i64, i64* %9, align 1
  %11 = bitcast i8* %4 to i64*
  %12 = load i64, i64* %11, align 1
  %13 = getelementptr inbounds i8, i8* %4, i64 8
  %14 = bitcast i8* %13 to i64*
  %15 = load i64, i64* %14, align 1
  %16 = and i64 %12, -4294967296
  %17 = xor i64 %12, 4294967295
  %18 = and i64 %17, %7
  %19 = xor i64 %16, -4294967296
  %20 = xor i64 %15, 4294967295
  %21 = and i64 %20, %10
  %22 = xor i64 %15, -4294967296
  %23 = and i64 %22, %10
  %24 = and i64 %19, %7
  %25 = trunc i64 %18 to i32
  %26 = lshr exact i64 %24, 32
  %27 = trunc i64 %26 to i32
  %28 = bitcast i8* %2 to i32*
  store i32 %25, i32* %28, align 1
  %29 = getelementptr inbounds i8, i8* %2, i64 4
  %30 = bitcast i8* %29 to i32*
  store i32 %27, i32* %30, align 1
  %31 = trunc i64 %21 to i32
  %32 = getelementptr inbounds i8, i8* %2, i64 8
  %33 = bitcast i8* %32 to i32*
  store i32 %31, i32* %33, align 1
  %34 = lshr i64 %23, 32
  %35 = trunc i64 %34 to i32
  %36 = getelementptr inbounds i8, i8* %2, i64 12
  %37 = bitcast i8* %36 to i32*
  store i32 %35, i32* %37, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L8PANDN_64I3VnWI8vec128_tE2VnIS2_E3MVnIS2_EEEP6MemoryS9_R5StateT_T0_T1_(%struct.Memory* returned, %struct.State* nocapture readnone dereferenceable(3376), i8* nocapture, i8* nocapture readonly, i64)  {
  %6 = bitcast i8* %3 to <2 x i64>*
  %7 = load <2 x i64>, <2 x i64>* %6, align 1
  %8 = inttoptr i64 %4 to i64*
  %9 = load i64, i64* %8
  %10 = add i64 %4, 8
  %11 = inttoptr i64 %10 to i64*
  %12 = load i64, i64* %11
  %13 = insertelement <2 x i64> undef, i64 %9, i32 0
  %14 = insertelement <2 x i64> %13, i64 %12, i32 1
  %15 = xor <2 x i64> %14, <i64 -1, i64 -1>
  %16 = and <2 x i64> %7, %15
  %17 = bitcast i8* %2 to <2 x i64>*
  store <2 x i64> %16, <2 x i64>* %17, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L8PANDN_64I3VnWI8vec128_tE2VnIS2_ES5_EEP6MemoryS7_R5StateT_T0_T1_(%struct.Memory* readnone returned, %struct.State* nocapture readnone dereferenceable(3376), i8* nocapture, i8* nocapture readonly, i8* nocapture readonly)  {
  %6 = bitcast i8* %3 to <2 x i64>*
  %7 = load <2 x i64>, <2 x i64>* %6, align 1
  %8 = bitcast i8* %4 to <2 x i64>*
  %9 = load <2 x i64>, <2 x i64>* %8, align 1
  %10 = xor <2 x i64> %9, <i64 -1, i64 -1>
  %11 = and <2 x i64> %7, %10
  %12 = bitcast i8* %2 to <2 x i64>*
  store <2 x i64> %11, <2 x i64>* %12, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L6POR_64I4RVnWI7vec64_tE3RVnIS2_E3MVnIS2_EEEP6MemoryS9_R5StateT_T0_T1_(%struct.Memory* returned, %struct.State* nocapture readnone dereferenceable(3376), i64* nocapture, i64, i64)  {
  %6 = inttoptr i64 %4 to i64*
  %7 = load i64, i64* %6
  %8 = or i64 %7, %3
  store i64 %8, i64* %2, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L6POR_64I4RVnWI7vec64_tE3RVnIS2_ES5_EEP6MemoryS7_R5StateT_T0_T1_(%struct.Memory* readnone returned, %struct.State* nocapture readnone dereferenceable(3376), i64* nocapture, i64, i64)  {
  %6 = or i64 %4, %3
  store i64 %6, i64* %2, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3PORI3VnWI8vec128_tE2VnIS2_E3MVnIS2_EEEP6MemoryS9_R5StateT_T0_T1_(%struct.Memory* returned, %struct.State* nocapture readnone dereferenceable(3376), i8* nocapture, i8* nocapture readonly, i64)  {
  %6 = bitcast i8* %3 to i64*
  %7 = load i64, i64* %6, align 1
  %8 = getelementptr inbounds i8, i8* %3, i64 8
  %9 = bitcast i8* %8 to i64*
  %10 = load i64, i64* %9, align 1
  %11 = trunc i64 %7 to i32
  %12 = lshr i64 %7, 32
  %13 = trunc i64 %12 to i32
  %14 = inttoptr i64 %4 to i32*
  %15 = load i32, i32* %14
  %16 = add i64 %4, 4
  %17 = inttoptr i64 %16 to i32*
  %18 = load i32, i32* %17
  %19 = add i64 %4, 8
  %20 = inttoptr i64 %19 to i32*
  %21 = load i32, i32* %20
  %22 = add i64 %4, 12
  %23 = inttoptr i64 %22 to i32*
  %24 = load i32, i32* %23
  %25 = or i32 %15, %11
  %26 = or i32 %18, %13
  %27 = trunc i64 %10 to i32
  %28 = or i32 %21, %27
  %29 = lshr i64 %10, 32
  %30 = trunc i64 %29 to i32
  %31 = or i32 %24, %30
  %32 = bitcast i8* %2 to i32*
  store i32 %25, i32* %32, align 1
  %33 = getelementptr inbounds i8, i8* %2, i64 4
  %34 = bitcast i8* %33 to i32*
  store i32 %26, i32* %34, align 1
  %35 = getelementptr inbounds i8, i8* %2, i64 8
  %36 = bitcast i8* %35 to i32*
  store i32 %28, i32* %36, align 1
  %37 = getelementptr inbounds i8, i8* %2, i64 12
  %38 = bitcast i8* %37 to i32*
  store i32 %31, i32* %38, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3PORI3VnWI8vec128_tE2VnIS2_ES5_EEP6MemoryS7_R5StateT_T0_T1_(%struct.Memory* readnone returned, %struct.State* nocapture readnone dereferenceable(3376), i8* nocapture, i8* nocapture readonly, i8* nocapture readonly)  {
  %6 = bitcast i8* %3 to i64*
  %7 = load i64, i64* %6, align 1
  %8 = getelementptr inbounds i8, i8* %3, i64 8
  %9 = bitcast i8* %8 to i64*
  %10 = load i64, i64* %9, align 1
  %11 = bitcast i8* %4 to i64*
  %12 = load i64, i64* %11, align 1
  %13 = getelementptr inbounds i8, i8* %4, i64 8
  %14 = bitcast i8* %13 to i64*
  %15 = load i64, i64* %14, align 1
  %16 = or i64 %12, %7
  %17 = or i64 %15, %10
  %18 = trunc i64 %16 to i32
  %19 = lshr i64 %16, 32
  %20 = trunc i64 %19 to i32
  %21 = bitcast i8* %2 to i32*
  store i32 %18, i32* %21, align 1
  %22 = getelementptr inbounds i8, i8* %2, i64 4
  %23 = bitcast i8* %22 to i32*
  store i32 %20, i32* %23, align 1
  %24 = trunc i64 %17 to i32
  %25 = getelementptr inbounds i8, i8* %2, i64 8
  %26 = bitcast i8* %25 to i32*
  store i32 %24, i32* %26, align 1
  %27 = lshr i64 %17, 32
  %28 = trunc i64 %27 to i32
  %29 = getelementptr inbounds i8, i8* %2, i64 12
  %30 = bitcast i8* %29 to i32*
  store i32 %28, i32* %30, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L6POR_64I3VnWI8vec128_tE2VnIS2_E3MVnIS2_EEEP6MemoryS9_R5StateT_T0_T1_(%struct.Memory* returned, %struct.State* nocapture readnone dereferenceable(3376), i8* nocapture, i8* nocapture readonly, i64)  {
  %6 = bitcast i8* %3 to <2 x i64>*
  %7 = load <2 x i64>, <2 x i64>* %6, align 1
  %8 = inttoptr i64 %4 to i64*
  %9 = load i64, i64* %8
  %10 = add i64 %4, 8
  %11 = inttoptr i64 %10 to i64*
  %12 = load i64, i64* %11
  %13 = insertelement <2 x i64> undef, i64 %9, i32 0
  %14 = insertelement <2 x i64> %13, i64 %12, i32 1
  %15 = or <2 x i64> %14, %7
  %16 = bitcast i8* %2 to <2 x i64>*
  store <2 x i64> %15, <2 x i64>* %16, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L6POR_64I3VnWI8vec128_tE2VnIS2_ES5_EEP6MemoryS7_R5StateT_T0_T1_(%struct.Memory* readnone returned, %struct.State* nocapture readnone dereferenceable(3376), i8* nocapture, i8* nocapture readonly, i8* nocapture readonly)  {
  %6 = bitcast i8* %3 to <2 x i64>*
  %7 = load <2 x i64>, <2 x i64>* %6, align 1
  %8 = bitcast i8* %4 to <2 x i64>*
  %9 = load <2 x i64>, <2 x i64>* %8, align 1
  %10 = or <2 x i64> %9, %7
  %11 = bitcast i8* %2 to <2 x i64>*
  store <2 x i64> %10, <2 x i64>* %11, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L5PTESTI2VnI8vec128_tE3MVnIS2_EEEP6MemoryS7_R5StateT_T0_(%struct.Memory* returned, %struct.State* nocapture dereferenceable(3376), i8* nocapture readonly, i64)  {
  %5 = bitcast i8* %2 to i64*
  %6 = load i64, i64* %5, align 1
  %7 = getelementptr inbounds i8, i8* %2, i64 8
  %8 = bitcast i8* %7 to i64*
  %9 = load i64, i64* %8, align 1
  %10 = trunc i64 %6 to i32
  %11 = lshr i64 %6, 32
  %12 = trunc i64 %11 to i32
  %13 = inttoptr i64 %3 to i32*
  %14 = load i32, i32* %13
  %15 = add i64 %3, 4
  %16 = inttoptr i64 %15 to i32*
  %17 = load i32, i32* %16
  %18 = add i64 %3, 8
  %19 = inttoptr i64 %18 to i32*
  %20 = load i32, i32* %19
  %21 = add i64 %3, 12
  %22 = inttoptr i64 %21 to i32*
  %23 = load i32, i32* %22
  %24 = and i32 %14, %10
  %25 = and i32 %17, %12
  %26 = trunc i64 %9 to i32
  %27 = and i32 %20, %26
  %28 = lshr i64 %9, 32
  %29 = trunc i64 %28 to i32
  %30 = and i32 %23, %29
  %31 = xor i32 %10, -1
  %32 = and i32 %14, %31
  %33 = xor i32 %12, -1
  %34 = and i32 %17, %33
  %35 = xor i32 %26, -1
  %36 = and i32 %20, %35
  %37 = xor i32 %29, -1
  %38 = and i32 %23, %37
  %39 = or i32 %25, %24
  %40 = or i32 %39, %27
  %41 = or i32 %40, %30
  %42 = or i32 %34, %32
  %43 = or i32 %42, %36
  %44 = or i32 %43, %38
  %45 = icmp eq i32 %41, 0
  %46 = zext i1 %45 to i8
  %47 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  store i8 %46, i8* %47, align 1
  %48 = icmp eq i32 %44, 0
  %49 = zext i1 %48 to i8
  %50 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  store i8 %49, i8* %50, align 1
  %51 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 0, i8* %51, align 1
  %52 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 0, i8* %52, align 1
  %53 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 0, i8* %53, align 1
  %54 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 0, i8* %54, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L5PTESTI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_(%struct.Memory* readnone returned, %struct.State* nocapture dereferenceable(3376), i8* nocapture readonly, i8* nocapture readonly)  {
  %5 = bitcast i8* %2 to i64*
  %6 = load i64, i64* %5, align 1
  %7 = getelementptr inbounds i8, i8* %2, i64 8
  %8 = bitcast i8* %7 to i64*
  %9 = load i64, i64* %8, align 1
  %10 = lshr i64 %6, 32
  %11 = bitcast i8* %3 to i64*
  %12 = load i64, i64* %11, align 1
  %13 = getelementptr inbounds i8, i8* %3, i64 8
  %14 = bitcast i8* %13 to i64*
  %15 = load i64, i64* %14, align 1
  %16 = lshr i64 %12, 32
  %17 = and i64 %12, %6
  %18 = and i64 %16, %10
  %19 = and i64 %15, %9
  %20 = lshr i64 %15, 32
  %21 = lshr i64 %9, 32
  %22 = and i64 %20, %21
  %23 = xor i64 %6, 4294967295
  %24 = and i64 %12, %23
  %25 = xor i64 %10, 4294967295
  %26 = and i64 %16, %25
  %27 = xor i64 %9, 4294967295
  %28 = and i64 %15, %27
  %29 = xor i64 %21, 4294967295
  %30 = and i64 %20, %29
  %31 = or i64 %18, %17
  %32 = or i64 %31, %19
  %33 = or i64 %32, %22
  %34 = trunc i64 %33 to i32
  %35 = or i64 %26, %24
  %36 = or i64 %35, %28
  %37 = or i64 %36, %30
  %38 = trunc i64 %37 to i32
  %39 = icmp eq i32 %34, 0
  %40 = zext i1 %39 to i8
  %41 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  store i8 %40, i8* %41, align 1
  %42 = icmp eq i32 %38, 0
  %43 = zext i1 %42 to i8
  %44 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  store i8 %43, i8* %44, align 1
  %45 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 0, i8* %45, align 1
  %46 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 0, i8* %46, align 1
  %47 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 0, i8* %47, align 1
  %48 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 0, i8* %48, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline norecurse nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3LEAI3RnWItE2MnIhEtEEP6MemoryS6_R5StateT_T0_(%struct.Memory* readnone returned, %struct.State* nocapture readnone dereferenceable(3376), i16* nocapture, i64)  {
  %5 = trunc i64 %3 to i16
  store i16 %5, i16* %2, align 2
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline norecurse nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3LEAI3RnWImE2MnIhEjEEP6MemoryS6_R5StateT_T0_(%struct.Memory* readnone returned, %struct.State* nocapture readnone dereferenceable(3376), i64* nocapture, i64)  {
  %5 = and i64 %3, 4294967295
  store i64 %5, i64* %2, align 8
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline norecurse nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3LEAI3RnWImE2MnIhEmEEP6MemoryS6_R5StateT_T0_(%struct.Memory* readnone returned, %struct.State* nocapture readnone dereferenceable(3376), i64* nocapture, i64)  {
  store i64 %3, i64* %2, align 8
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L11LEAVE_16BITEP6MemoryR5State(%struct.Memory*, %struct.State* nocapture dereferenceable(3376))  {
  %3 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %3, align 8
  %5 = inttoptr i64 %4 to i64*
  %6 = load i64, i64* %5
  store i64 %6, i64* %3, align 8
  %7 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 13, i32 0, i32 0
  %8 = add i64 %4, 2
  store i64 %8, i64* %7, align 8
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L10LEAVE_FULLI2InImEEEP6MemoryS4_R5State(%struct.Memory*, %struct.State* nocapture dereferenceable(3376))  {
  %3 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %3, align 8
  %5 = inttoptr i64 %4 to i64*
  %6 = load i64, i64* %5
  store i64 %6, i64* %3, align 8
  %7 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 13, i32 0, i32 0
  %8 = add i64 %4, 8
  store i64 %8, i64* %7, align 8
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L5ENTERItEEP6MemoryS2_R5State2InItES5_IhE(%struct.Memory*, %struct.State* nocapture dereferenceable(3376), i64, i64)  {
  %5 = and i64 %2, 65535
  %6 = and i64 %3, 31
  %7 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 13, i32 0, i32 0
  %8 = load i64, i64* %7, align 8
  %9 = add i64 %8, -2
  %10 = shl nuw nsw i64 %6, 1
  %11 = sub i64 %9, %10
  %12 = sub i64 %11, %5
  %13 = inttoptr i64 %12 to i16*
  %14 = load i16, i16* %13
  %15 = inttoptr i64 %12 to i16*
  store i16 %14, i16* %15
  %16 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 15, i32 0, i32 0
  %17 = load i64, i64* %16, align 8
  store i64 %9, i64* %7, align 8
  %18 = trunc i64 %17 to i16
  %19 = inttoptr i64 %9 to i16*
  store i16 %18, i16* %19
  %20 = trunc i64 %3 to i5
  switch i5 %20, label %21 [
    i5 0, label %43
    i5 1, label %38
  ]

; <label>:21:                                     ; preds = %4
  %22 = add nsw i64 %6, -1
  %23 = icmp eq i64 %22, 0
  br i1 %23, label %38, label %24

; <label>:24:                                     ; preds = %21
  br label %25

; <label>:25:                                     ; preds = %25, %24
  %26 = phi i64 [ %30, %25 ], [ %17, %24 ]
  %27 = phi i64 [ %31, %25 ], [ %9, %24 ]
  %28 = phi i64 [ %35, %25 ], [ 1, %24 ]
  %29 = phi %struct.Memory* [ %29, %25 ], [ %0, %24 ]
  %30 = add i64 %26, -2
  %31 = add i64 %27, -2
  %32 = inttoptr i64 %30 to i16*
  %33 = load i16, i16* %32
  %34 = inttoptr i64 %31 to i16*
  store i16 %33, i16* %34
  %35 = add i64 %28, 1
  %36 = icmp ugt i64 %35, %22
  br i1 %36, label %37, label %25

; <label>:37:                                     ; preds = %25
  br label %38

; <label>:38:                                     ; preds = %37, %21, %4
  %39 = phi %struct.Memory* [ %0, %4 ], [ %0, %21 ], [ %29, %37 ]
  %40 = phi i64 [ %9, %4 ], [ %9, %21 ], [ %31, %37 ]
  %41 = add i64 %40, -2
  %42 = inttoptr i64 %41 to i64*
  store i64 %9, i64* %42
  br label %43

; <label>:43:                                     ; preds = %38, %4
  %44 = phi %struct.Memory* [ %39, %38 ], [ %0, %4 ]
  %45 = phi i64 [ %41, %38 ], [ %9, %4 ]
  store i64 %9, i64* %16, align 8
  %46 = sub i64 %45, %5
  store i64 %46, i64* %7, align 8
  ret %struct.Memory* %44
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L5ENTERImEEP6MemoryS2_R5State2InItES5_IhE(%struct.Memory*, %struct.State* nocapture dereferenceable(3376), i64, i64)  {
  %5 = and i64 %2, 65535
  %6 = and i64 %3, 31
  %7 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 13, i32 0, i32 0
  %8 = load i64, i64* %7, align 8
  %9 = add i64 %8, -8
  %10 = shl nuw nsw i64 %6, 3
  %11 = sub i64 %9, %10
  %12 = sub i64 %11, %5
  %13 = inttoptr i64 %12 to i64*
  %14 = load i64, i64* %13
  %15 = inttoptr i64 %12 to i64*
  store i64 %14, i64* %15
  %16 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 15, i32 0, i32 0
  %17 = load i64, i64* %16, align 8
  store i64 %9, i64* %7, align 8
  %18 = inttoptr i64 %9 to i64*
  store i64 %17, i64* %18
  %19 = trunc i64 %3 to i5
  switch i5 %19, label %20 [
    i5 0, label %42
    i5 1, label %37
  ]

; <label>:20:                                     ; preds = %4
  %21 = add nsw i64 %6, -1
  %22 = icmp eq i64 %21, 0
  br i1 %22, label %37, label %23

; <label>:23:                                     ; preds = %20
  br label %24

; <label>:24:                                     ; preds = %24, %23
  %25 = phi i64 [ %29, %24 ], [ %17, %23 ]
  %26 = phi i64 [ %30, %24 ], [ %9, %23 ]
  %27 = phi i64 [ %34, %24 ], [ 1, %23 ]
  %28 = phi %struct.Memory* [ %28, %24 ], [ %0, %23 ]
  %29 = add i64 %25, -8
  %30 = add i64 %26, -8
  %31 = inttoptr i64 %29 to i64*
  %32 = load i64, i64* %31
  %33 = inttoptr i64 %30 to i64*
  store i64 %32, i64* %33
  %34 = add i64 %27, 1
  %35 = icmp ugt i64 %34, %21
  br i1 %35, label %36, label %24

; <label>:36:                                     ; preds = %24
  br label %37

; <label>:37:                                     ; preds = %36, %20, %4
  %38 = phi %struct.Memory* [ %0, %4 ], [ %0, %20 ], [ %28, %36 ]
  %39 = phi i64 [ %9, %4 ], [ %9, %20 ], [ %30, %36 ]
  %40 = add i64 %39, -8
  %41 = inttoptr i64 %40 to i64*
  store i64 %9, i64* %41
  br label %42

; <label>:42:                                     ; preds = %37, %4
  %43 = phi %struct.Memory* [ %38, %37 ], [ %0, %4 ]
  %44 = phi i64 [ %40, %37 ], [ %9, %4 ]
  store i64 %9, i64* %16, align 8
  %45 = sub i64 %44, %5
  store i64 %45, i64* %7, align 8
  ret %struct.Memory* %43
}

; Function Attrs: alwaysinline norecurse nounwind readnone
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L9DoNothingEP6MemoryR5State(%struct.Memory* readnone returned, %struct.State* nocapture readnone dereferenceable(3376))  {
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline norecurse nounwind readnone
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L22DoCLFLUSH_MEMmprefetchEP6MemoryR5State2MnIhE(%struct.Memory* readnone returned, %struct.State* nocapture readnone dereferenceable(3376), i64)  {
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind readnone
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L8DoMFENCEEP6MemoryR5State(%struct.Memory* readnone, %struct.State* nocapture readnone dereferenceable(3376))  {
  ret %struct.Memory* %0
}

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare %struct.Memory* @__remill_barrier_store_load(%struct.Memory*) 

; Function Attrs: alwaysinline nounwind readnone
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L8DoSFENCEEP6MemoryR5State(%struct.Memory* readnone, %struct.State* nocapture readnone dereferenceable(3376))  {
  ret %struct.Memory* %0
}

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare %struct.Memory* @__remill_barrier_store_store(%struct.Memory*) 

; Function Attrs: alwaysinline nounwind readnone
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L8DoLFENCEEP6MemoryR5State(%struct.Memory* readnone, %struct.State* nocapture readnone dereferenceable(3376))  {
  ret %struct.Memory* %0
}

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare %struct.Memory* @__remill_barrier_load_load(%struct.Memory*) 

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L6DoXLATEP6MemoryR5State(%struct.Memory*, %struct.State* nocapture dereferenceable(3376))  {
  %3 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 3, i32 0, i32 0
  %4 = load i64, i64* %3, align 8
  %5 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 1, i32 0
  %6 = bitcast %union.anon* %5 to i8*
  %7 = load i8, i8* %6, align 8
  %8 = zext i8 %7 to i64
  %9 = add i64 %8, %4
  %10 = inttoptr i64 %9 to i8*
  %11 = load i8, i8* %10
  store i8 %11, i8* %6, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L7DoCPUIDEP6MemoryR5State(%struct.Memory*, %struct.State* dereferenceable(3376))  {
  %3 = tail call %struct.Memory* @__remill_sync_hyper_call(%struct.State* nonnull dereferenceable(3376) %1, %struct.Memory* %0, i32 258) 
  ret %struct.Memory* %3
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L9PUNPCKHBWI4RVnWI7vec64_tE3RVnIS2_E3MVnIS2_EEEP6MemoryS9_R5StateT_T0_T1_(%struct.Memory* returned, %struct.State* nocapture readnone dereferenceable(3376), i64* nocapture, i64, i64)  {
  %6 = alloca i64, align 8
  %7 = alloca i64, align 8
  %8 = alloca i64, align 8
  %9 = bitcast i64* %8 to %struct.uint8v8_t*
  %10 = alloca i64, align 8
  %11 = bitcast i64* %10 to %struct.uint8v8_t*
  %12 = bitcast i64* %8 to i8*
  call void @llvm.lifetime.start(i64 8, i8* nonnull %12) 
  store i64 %3, i64* %8, align 8
  %13 = bitcast i64* %10 to i8*
  call void @llvm.lifetime.start(i64 8, i8* nonnull %13) 
  %14 = inttoptr i64 %4 to i8*
  %15 = load i8, i8* %14
  %16 = add i64 %4, 1
  %17 = inttoptr i64 %16 to i8*
  %18 = load i8, i8* %17
  %19 = add i64 %4, 2
  %20 = inttoptr i64 %19 to i8*
  %21 = load i8, i8* %20
  %22 = add i64 %4, 3
  %23 = inttoptr i64 %22 to i8*
  %24 = load i8, i8* %23
  %25 = add i64 %4, 4
  %26 = inttoptr i64 %25 to i8*
  %27 = load i8, i8* %26
  %28 = add i64 %4, 5
  %29 = inttoptr i64 %28 to i8*
  %30 = load i8, i8* %29
  %31 = add i64 %4, 6
  %32 = inttoptr i64 %31 to i8*
  %33 = load i8, i8* %32
  %34 = add i64 %4, 7
  %35 = inttoptr i64 %34 to i8*
  %36 = load i8, i8* %35
  %37 = zext i8 %36 to i64
  %38 = shl nuw i64 %37, 56
  %39 = zext i8 %33 to i64
  %40 = shl nuw nsw i64 %39, 48
  %41 = zext i8 %30 to i64
  %42 = shl nuw nsw i64 %41, 40
  %43 = zext i8 %27 to i64
  %44 = shl nuw nsw i64 %43, 32
  %45 = zext i8 %24 to i64
  %46 = shl nuw nsw i64 %45, 24
  %47 = zext i8 %21 to i64
  %48 = shl nuw nsw i64 %47, 16
  %49 = zext i8 %18 to i64
  %50 = shl nuw nsw i64 %49, 8
  %51 = zext i8 %15 to i64
  %52 = or i64 %50, %51
  %53 = or i64 %52, %48
  %54 = or i64 %53, %46
  %55 = or i64 %54, %44
  %56 = or i64 %55, %42
  %57 = or i64 %56, %40
  %58 = or i64 %57, %38
  store i64 %58, i64* %10, align 8
  %59 = bitcast i64* %6 to i8*
  %60 = bitcast i64* %6 to [8 x i8]*
  %61 = bitcast i64* %7 to i8*
  %62 = bitcast i64* %7 to [8 x i8]*
  %63 = lshr i64 %58, 56
  %64 = trunc i64 %63 to i8
  call void @llvm.lifetime.start(i64 8, i8* nonnull %59)
  store i64 0, i64* %6, align 8
  %65 = getelementptr inbounds [8 x i8], [8 x i8]* %60, i64 0, i64 7
  store i8 %64, i8* %65, align 1
  %66 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %59)
  %67 = lshr i64 %3, 56
  %68 = trunc i64 %67 to i8
  call void @llvm.lifetime.start(i64 8, i8* nonnull %61)
  store i64 %66, i64* %7, align 8
  %69 = getelementptr inbounds [8 x i8], [8 x i8]* %62, i64 0, i64 6
  store i8 %68, i8* %69, align 2
  %70 = load i64, i64* %7, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %61)
  %71 = lshr i64 %57, 48
  %72 = trunc i64 %71 to i8
  call void @llvm.lifetime.start(i64 8, i8* nonnull %59)
  store i64 %70, i64* %6, align 8
  %73 = getelementptr inbounds [8 x i8], [8 x i8]* %60, i64 0, i64 5
  store i8 %72, i8* %73, align 1
  %74 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %59)
  %75 = getelementptr inbounds %struct.uint8v8_t, %struct.uint8v8_t* %9, i64 0, i32 0, i64 6
  %76 = load i8, i8* %75, align 2
  call void @llvm.lifetime.start(i64 8, i8* nonnull %61)
  store i64 %74, i64* %7, align 8
  %77 = getelementptr inbounds [8 x i8], [8 x i8]* %62, i64 0, i64 4
  store i8 %76, i8* %77, align 4
  %78 = load i64, i64* %7, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %61)
  %79 = lshr i64 %56, 40
  %80 = trunc i64 %79 to i8
  call void @llvm.lifetime.start(i64 8, i8* nonnull %59)
  store i64 %78, i64* %6, align 8
  %81 = getelementptr inbounds [8 x i8], [8 x i8]* %60, i64 0, i64 3
  store i8 %80, i8* %81, align 1
  %82 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %59)
  %83 = getelementptr inbounds %struct.uint8v8_t, %struct.uint8v8_t* %9, i64 0, i32 0, i64 5
  %84 = load i8, i8* %83, align 1
  call void @llvm.lifetime.start(i64 8, i8* nonnull %61)
  store i64 %82, i64* %7, align 8
  %85 = getelementptr inbounds [8 x i8], [8 x i8]* %62, i64 0, i64 2
  store i8 %84, i8* %85, align 2
  %86 = load i64, i64* %7, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %61)
  %87 = getelementptr inbounds %struct.uint8v8_t, %struct.uint8v8_t* %11, i64 0, i32 0, i64 4
  %88 = load i8, i8* %87, align 4
  call void @llvm.lifetime.start(i64 8, i8* nonnull %59)
  store i64 %86, i64* %6, align 8
  %89 = getelementptr inbounds [8 x i8], [8 x i8]* %60, i64 0, i64 1
  store i8 %88, i8* %89, align 1
  %90 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %59)
  %91 = getelementptr inbounds %struct.uint8v8_t, %struct.uint8v8_t* %9, i64 0, i32 0, i64 4
  %92 = load i8, i8* %91, align 4
  call void @llvm.lifetime.start(i64 8, i8* nonnull %61)
  store i64 %90, i64* %7, align 8
  %93 = bitcast i64* %7 to i8*
  store i8 %92, i8* %93, align 8
  %94 = load i64, i64* %7, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %61)
  %95 = lshr i64 %94, 8
  %96 = lshr i64 %94, 16
  %97 = lshr i64 %94, 24
  %98 = lshr i64 %94, 32
  %99 = lshr i64 %94, 40
  %100 = lshr i64 %94, 48
  %101 = lshr i64 %94, 56
  %102 = trunc i64 %94 to i8
  %103 = trunc i64 %95 to i8
  %104 = trunc i64 %96 to i8
  %105 = trunc i64 %97 to i8
  %106 = trunc i64 %98 to i8
  %107 = trunc i64 %99 to i8
  %108 = trunc i64 %100 to i8
  %109 = trunc i64 %101 to i8
  %110 = bitcast i64* %2 to [8 x i8]*
  %111 = bitcast i64* %2 to i8*
  store i8 %102, i8* %111, align 1
  %112 = getelementptr inbounds [8 x i8], [8 x i8]* %110, i64 0, i64 1
  store i8 %103, i8* %112, align 1
  %113 = getelementptr inbounds [8 x i8], [8 x i8]* %110, i64 0, i64 2
  store i8 %104, i8* %113, align 1
  %114 = getelementptr inbounds [8 x i8], [8 x i8]* %110, i64 0, i64 3
  store i8 %105, i8* %114, align 1
  %115 = getelementptr inbounds [8 x i8], [8 x i8]* %110, i64 0, i64 4
  store i8 %106, i8* %115, align 1
  %116 = getelementptr inbounds [8 x i8], [8 x i8]* %110, i64 0, i64 5
  store i8 %107, i8* %116, align 1
  %117 = getelementptr inbounds [8 x i8], [8 x i8]* %110, i64 0, i64 6
  store i8 %108, i8* %117, align 1
  %118 = getelementptr inbounds [8 x i8], [8 x i8]* %110, i64 0, i64 7
  store i8 %109, i8* %118, align 1
  call void @llvm.lifetime.end(i64 8, i8* nonnull %13) 
  call void @llvm.lifetime.end(i64 8, i8* nonnull %12) 
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L9PUNPCKHBWI4RVnWI7vec64_tE3RVnIS2_ES5_EEP6MemoryS7_R5StateT_T0_T1_(%struct.Memory* readnone returned, %struct.State* nocapture readnone dereferenceable(3376), i64* nocapture, i64, i64)  {
  %6 = alloca i64, align 8
  %7 = alloca i64, align 8
  %8 = alloca i64, align 8
  %9 = bitcast i64* %8 to %struct.uint8v8_t*
  %10 = alloca i64, align 8
  %11 = bitcast i64* %10 to %struct.uint8v8_t*
  %12 = bitcast i64* %8 to i8*
  call void @llvm.lifetime.start(i64 8, i8* nonnull %12) 
  store i64 %3, i64* %8, align 8
  %13 = bitcast i64* %10 to i8*
  call void @llvm.lifetime.start(i64 8, i8* nonnull %13) 
  store i64 %4, i64* %10, align 8
  %14 = bitcast i64* %6 to i8*
  %15 = bitcast i64* %6 to [8 x i8]*
  %16 = bitcast i64* %7 to i8*
  %17 = bitcast i64* %7 to [8 x i8]*
  %18 = lshr i64 %4, 56
  %19 = trunc i64 %18 to i8
  call void @llvm.lifetime.start(i64 8, i8* nonnull %14)
  store i64 0, i64* %6, align 8
  %20 = getelementptr inbounds [8 x i8], [8 x i8]* %15, i64 0, i64 7
  store i8 %19, i8* %20, align 1
  %21 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %14)
  %22 = lshr i64 %3, 56
  %23 = trunc i64 %22 to i8
  call void @llvm.lifetime.start(i64 8, i8* nonnull %16)
  store i64 %21, i64* %7, align 8
  %24 = getelementptr inbounds [8 x i8], [8 x i8]* %17, i64 0, i64 6
  store i8 %23, i8* %24, align 2
  %25 = load i64, i64* %7, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %16)
  %26 = lshr i64 %4, 48
  %27 = trunc i64 %26 to i8
  call void @llvm.lifetime.start(i64 8, i8* nonnull %14)
  store i64 %25, i64* %6, align 8
  %28 = getelementptr inbounds [8 x i8], [8 x i8]* %15, i64 0, i64 5
  store i8 %27, i8* %28, align 1
  %29 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %14)
  %30 = lshr i64 %3, 48
  %31 = trunc i64 %30 to i8
  call void @llvm.lifetime.start(i64 8, i8* nonnull %16)
  store i64 %29, i64* %7, align 8
  %32 = getelementptr inbounds [8 x i8], [8 x i8]* %17, i64 0, i64 4
  store i8 %31, i8* %32, align 4
  %33 = load i64, i64* %7, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %16)
  %34 = lshr i64 %4, 40
  %35 = trunc i64 %34 to i8
  call void @llvm.lifetime.start(i64 8, i8* nonnull %14)
  store i64 %33, i64* %6, align 8
  %36 = getelementptr inbounds [8 x i8], [8 x i8]* %15, i64 0, i64 3
  store i8 %35, i8* %36, align 1
  %37 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %14)
  %38 = getelementptr inbounds %struct.uint8v8_t, %struct.uint8v8_t* %9, i64 0, i32 0, i64 5
  %39 = load i8, i8* %38, align 1
  call void @llvm.lifetime.start(i64 8, i8* nonnull %16)
  store i64 %37, i64* %7, align 8
  %40 = getelementptr inbounds [8 x i8], [8 x i8]* %17, i64 0, i64 2
  store i8 %39, i8* %40, align 2
  %41 = load i64, i64* %7, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %16)
  %42 = getelementptr inbounds %struct.uint8v8_t, %struct.uint8v8_t* %11, i64 0, i32 0, i64 4
  %43 = load i8, i8* %42, align 4
  call void @llvm.lifetime.start(i64 8, i8* nonnull %14)
  store i64 %41, i64* %6, align 8
  %44 = getelementptr inbounds [8 x i8], [8 x i8]* %15, i64 0, i64 1
  store i8 %43, i8* %44, align 1
  %45 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %14)
  %46 = getelementptr inbounds %struct.uint8v8_t, %struct.uint8v8_t* %9, i64 0, i32 0, i64 4
  %47 = load i8, i8* %46, align 4
  call void @llvm.lifetime.start(i64 8, i8* nonnull %16)
  store i64 %45, i64* %7, align 8
  %48 = bitcast i64* %7 to i8*
  store i8 %47, i8* %48, align 8
  %49 = load i64, i64* %7, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %16)
  %50 = lshr i64 %49, 8
  %51 = lshr i64 %49, 16
  %52 = lshr i64 %49, 24
  %53 = lshr i64 %49, 32
  %54 = lshr i64 %49, 40
  %55 = lshr i64 %49, 48
  %56 = lshr i64 %49, 56
  %57 = trunc i64 %49 to i8
  %58 = trunc i64 %50 to i8
  %59 = trunc i64 %51 to i8
  %60 = trunc i64 %52 to i8
  %61 = trunc i64 %53 to i8
  %62 = trunc i64 %54 to i8
  %63 = trunc i64 %55 to i8
  %64 = trunc i64 %56 to i8
  %65 = bitcast i64* %2 to [8 x i8]*
  %66 = bitcast i64* %2 to i8*
  store i8 %57, i8* %66, align 1
  %67 = getelementptr inbounds [8 x i8], [8 x i8]* %65, i64 0, i64 1
  store i8 %58, i8* %67, align 1
  %68 = getelementptr inbounds [8 x i8], [8 x i8]* %65, i64 0, i64 2
  store i8 %59, i8* %68, align 1
  %69 = getelementptr inbounds [8 x i8], [8 x i8]* %65, i64 0, i64 3
  store i8 %60, i8* %69, align 1
  %70 = getelementptr inbounds [8 x i8], [8 x i8]* %65, i64 0, i64 4
  store i8 %61, i8* %70, align 1
  %71 = getelementptr inbounds [8 x i8], [8 x i8]* %65, i64 0, i64 5
  store i8 %62, i8* %71, align 1
  %72 = getelementptr inbounds [8 x i8], [8 x i8]* %65, i64 0, i64 6
  store i8 %63, i8* %72, align 1
  %73 = getelementptr inbounds [8 x i8], [8 x i8]* %65, i64 0, i64 7
  store i8 %64, i8* %73, align 1
  call void @llvm.lifetime.end(i64 8, i8* nonnull %13) 
  call void @llvm.lifetime.end(i64 8, i8* nonnull %12) 
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L9PUNPCKHBWI3VnWI8vec128_tE2VnIS2_E3MVnIS2_EEEP6MemoryS9_R5StateT_T0_T1_(%struct.Memory* returned, %struct.State* nocapture readnone dereferenceable(3376), i8* nocapture, i8* nocapture readonly, i64)  {
  %6 = alloca <2 x i64>, align 16
  %7 = bitcast <2 x i64>* %6 to { i64, i64 }*
  %8 = alloca { i64, i64 }, align 8
  %9 = alloca <2 x i64>, align 16
  %10 = bitcast <2 x i64>* %9 to { i64, i64 }*
  %11 = bitcast <2 x i64>* %9 to %struct.uint8v16_t*
  %12 = alloca <2 x i64>, align 16
  %13 = bitcast <2 x i64>* %12 to { i64, i64 }*
  %14 = bitcast <2 x i64>* %12 to %struct.uint8v16_t*
  %15 = bitcast <2 x i64>* %9 to i8*
  call void @llvm.lifetime.start(i64 16, i8* nonnull %15) 
  %16 = bitcast i8* %3 to <2 x i64>*
  %17 = load <2 x i64>, <2 x i64>* %16, align 1
  store <2 x i64> %17, <2 x i64>* %9, align 16
  %18 = bitcast <2 x i64>* %12 to i8*
  call void @llvm.lifetime.start(i64 16, i8* nonnull %18) 
  %19 = inttoptr i64 %4 to i8*
  %20 = load i8, i8* %19
  %21 = add i64 %4, 1
  %22 = inttoptr i64 %21 to i8*
  %23 = load i8, i8* %22
  %24 = add i64 %4, 2
  %25 = inttoptr i64 %24 to i8*
  %26 = load i8, i8* %25
  %27 = add i64 %4, 3
  %28 = inttoptr i64 %27 to i8*
  %29 = load i8, i8* %28
  %30 = add i64 %4, 4
  %31 = inttoptr i64 %30 to i8*
  %32 = load i8, i8* %31
  %33 = add i64 %4, 5
  %34 = inttoptr i64 %33 to i8*
  %35 = load i8, i8* %34
  %36 = add i64 %4, 6
  %37 = inttoptr i64 %36 to i8*
  %38 = load i8, i8* %37
  %39 = add i64 %4, 7
  %40 = inttoptr i64 %39 to i8*
  %41 = load i8, i8* %40
  %42 = add i64 %4, 8
  %43 = inttoptr i64 %42 to i8*
  %44 = load i8, i8* %43
  %45 = add i64 %4, 9
  %46 = inttoptr i64 %45 to i8*
  %47 = load i8, i8* %46
  %48 = add i64 %4, 10
  %49 = inttoptr i64 %48 to i8*
  %50 = load i8, i8* %49
  %51 = add i64 %4, 11
  %52 = inttoptr i64 %51 to i8*
  %53 = load i8, i8* %52
  %54 = add i64 %4, 12
  %55 = inttoptr i64 %54 to i8*
  %56 = load i8, i8* %55
  %57 = add i64 %4, 13
  %58 = inttoptr i64 %57 to i8*
  %59 = load i8, i8* %58
  %60 = add i64 %4, 14
  %61 = inttoptr i64 %60 to i8*
  %62 = load i8, i8* %61
  %63 = add i64 %4, 15
  %64 = inttoptr i64 %63 to i8*
  %65 = load i8, i8* %64
  %66 = insertelement <2 x i8> undef, i8 %41, i32 0
  %67 = insertelement <2 x i8> %66, i8 %65, i32 1
  %68 = zext <2 x i8> %67 to <2 x i64>
  %69 = shl nuw <2 x i64> %68, <i64 56, i64 56>
  %70 = insertelement <2 x i8> undef, i8 %38, i32 0
  %71 = insertelement <2 x i8> %70, i8 %62, i32 1
  %72 = zext <2 x i8> %71 to <2 x i64>
  %73 = shl nuw nsw <2 x i64> %72, <i64 48, i64 48>
  %74 = insertelement <2 x i8> undef, i8 %35, i32 0
  %75 = insertelement <2 x i8> %74, i8 %59, i32 1
  %76 = zext <2 x i8> %75 to <2 x i64>
  %77 = shl nuw nsw <2 x i64> %76, <i64 40, i64 40>
  %78 = insertelement <2 x i8> undef, i8 %32, i32 0
  %79 = insertelement <2 x i8> %78, i8 %56, i32 1
  %80 = zext <2 x i8> %79 to <2 x i64>
  %81 = shl nuw nsw <2 x i64> %80, <i64 32, i64 32>
  %82 = insertelement <2 x i8> undef, i8 %29, i32 0
  %83 = insertelement <2 x i8> %82, i8 %53, i32 1
  %84 = zext <2 x i8> %83 to <2 x i64>
  %85 = shl nuw nsw <2 x i64> %84, <i64 24, i64 24>
  %86 = insertelement <2 x i8> undef, i8 %26, i32 0
  %87 = insertelement <2 x i8> %86, i8 %50, i32 1
  %88 = zext <2 x i8> %87 to <2 x i64>
  %89 = shl nuw nsw <2 x i64> %88, <i64 16, i64 16>
  %90 = insertelement <2 x i8> undef, i8 %23, i32 0
  %91 = insertelement <2 x i8> %90, i8 %47, i32 1
  %92 = zext <2 x i8> %91 to <2 x i64>
  %93 = shl nuw nsw <2 x i64> %92, <i64 8, i64 8>
  %94 = insertelement <2 x i8> undef, i8 %20, i32 0
  %95 = insertelement <2 x i8> %94, i8 %44, i32 1
  %96 = zext <2 x i8> %95 to <2 x i64>
  %97 = or <2 x i64> %93, %96
  %98 = or <2 x i64> %97, %89
  %99 = or <2 x i64> %98, %85
  %100 = or <2 x i64> %99, %81
  %101 = or <2 x i64> %100, %77
  %102 = or <2 x i64> %101, %73
  %103 = or <2 x i64> %102, %69
  store <2 x i64> %103, <2 x i64>* %12, align 16
  %104 = bitcast <2 x i64>* %6 to i8*
  %105 = getelementptr inbounds <2 x i64>, <2 x i64>* %6, i64 0, i64 0
  %106 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %7, i64 0, i32 1
  %107 = bitcast <2 x i64>* %6 to [16 x i8]*
  %108 = bitcast { i64, i64 }* %8 to i8*
  %109 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %8, i64 0, i32 0
  %110 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %8, i64 0, i32 1
  %111 = bitcast { i64, i64 }* %8 to [16 x i8]*
  %112 = extractelement <2 x i64> %103, i32 1
  %113 = lshr i64 %112, 56
  %114 = trunc i64 %113 to i8
  call void @llvm.lifetime.start(i64 16, i8* nonnull %104)
  store <2 x i64> zeroinitializer, <2 x i64>* %6, align 16
  %115 = getelementptr inbounds [16 x i8], [16 x i8]* %107, i64 0, i64 15
  store i8 %114, i8* %115, align 1
  %116 = load i64, i64* %106, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %104)
  %117 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %11, i64 0, i32 0, i64 15
  %118 = load i8, i8* %117, align 1
  call void @llvm.lifetime.start(i64 16, i8* nonnull %108)
  store i64 0, i64* %109, align 8
  store i64 %116, i64* %110, align 8
  %119 = getelementptr inbounds [16 x i8], [16 x i8]* %111, i64 0, i64 14
  store i8 %118, i8* %119, align 2
  %120 = load i64, i64* %110, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %108)
  %121 = extractelement <2 x i64> %102, i32 1
  %122 = lshr i64 %121, 48
  %123 = trunc i64 %122 to i8
  call void @llvm.lifetime.start(i64 16, i8* nonnull %104)
  store i64 0, i64* %105, align 16
  store i64 %120, i64* %106, align 8
  %124 = getelementptr inbounds [16 x i8], [16 x i8]* %107, i64 0, i64 13
  store i8 %123, i8* %124, align 1
  %125 = load i64, i64* %106, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %104)
  %126 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %11, i64 0, i32 0, i64 14
  %127 = load i8, i8* %126, align 2
  call void @llvm.lifetime.start(i64 16, i8* nonnull %108)
  store i64 0, i64* %109, align 8
  store i64 %125, i64* %110, align 8
  %128 = getelementptr inbounds [16 x i8], [16 x i8]* %111, i64 0, i64 12
  store i8 %127, i8* %128, align 4
  %129 = load i64, i64* %110, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %108)
  %130 = extractelement <2 x i64> %101, i32 1
  %131 = lshr i64 %130, 40
  %132 = trunc i64 %131 to i8
  call void @llvm.lifetime.start(i64 16, i8* nonnull %104)
  store i64 0, i64* %105, align 16
  store i64 %129, i64* %106, align 8
  %133 = getelementptr inbounds [16 x i8], [16 x i8]* %107, i64 0, i64 11
  store i8 %132, i8* %133, align 1
  %134 = load i64, i64* %106, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %104)
  %135 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %11, i64 0, i32 0, i64 13
  %136 = load i8, i8* %135, align 1
  call void @llvm.lifetime.start(i64 16, i8* nonnull %108)
  store i64 0, i64* %109, align 8
  store i64 %134, i64* %110, align 8
  %137 = getelementptr inbounds [16 x i8], [16 x i8]* %111, i64 0, i64 10
  store i8 %136, i8* %137, align 2
  %138 = load i64, i64* %110, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %108)
  %139 = extractelement <2 x i64> %100, i32 1
  %140 = lshr i64 %139, 32
  %141 = trunc i64 %140 to i8
  call void @llvm.lifetime.start(i64 16, i8* nonnull %104)
  store i64 0, i64* %105, align 16
  store i64 %138, i64* %106, align 8
  %142 = getelementptr inbounds [16 x i8], [16 x i8]* %107, i64 0, i64 9
  store i8 %141, i8* %142, align 1
  %143 = load i64, i64* %106, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %104)
  %144 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %11, i64 0, i32 0, i64 12
  %145 = load i8, i8* %144, align 4
  call void @llvm.lifetime.start(i64 16, i8* nonnull %108)
  store i64 0, i64* %109, align 8
  store i64 %143, i64* %110, align 8
  %146 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %8, i64 0, i32 1
  %147 = bitcast i64* %146 to i8*
  store i8 %145, i8* %147, align 8
  %148 = load i64, i64* %110, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %108)
  call void @llvm.lifetime.start(i64 16, i8* nonnull %104)
  store i64 0, i64* %105, align 16
  store i64 %148, i64* %106, align 8
  %149 = getelementptr inbounds [16 x i8], [16 x i8]* %107, i64 0, i64 7
  store i8 %53, i8* %149, align 1
  %150 = load i64, i64* %105, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %104)
  %151 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %11, i64 0, i32 0, i64 11
  %152 = load i8, i8* %151, align 1
  call void @llvm.lifetime.start(i64 16, i8* nonnull %108)
  store i64 %150, i64* %109, align 8
  store i64 %148, i64* %110, align 8
  %153 = getelementptr inbounds [16 x i8], [16 x i8]* %111, i64 0, i64 6
  store i8 %152, i8* %153, align 2
  %154 = load i64, i64* %109, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %108)
  %155 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %14, i64 0, i32 0, i64 10
  %156 = load i8, i8* %155, align 2
  call void @llvm.lifetime.start(i64 16, i8* nonnull %104)
  store i64 %154, i64* %105, align 16
  store i64 %148, i64* %106, align 8
  %157 = getelementptr inbounds [16 x i8], [16 x i8]* %107, i64 0, i64 5
  store i8 %156, i8* %157, align 1
  %158 = load i64, i64* %105, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %104)
  %159 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %11, i64 0, i32 0, i64 10
  %160 = load i8, i8* %159, align 2
  call void @llvm.lifetime.start(i64 16, i8* nonnull %108)
  store i64 %158, i64* %109, align 8
  store i64 %148, i64* %110, align 8
  %161 = getelementptr inbounds [16 x i8], [16 x i8]* %111, i64 0, i64 4
  store i8 %160, i8* %161, align 4
  %162 = load i64, i64* %109, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %108)
  %163 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %14, i64 0, i32 0, i64 9
  %164 = load i8, i8* %163, align 1
  call void @llvm.lifetime.start(i64 16, i8* nonnull %104)
  store i64 %162, i64* %105, align 16
  store i64 %148, i64* %106, align 8
  %165 = getelementptr inbounds [16 x i8], [16 x i8]* %107, i64 0, i64 3
  store i8 %164, i8* %165, align 1
  %166 = load i64, i64* %105, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %104)
  %167 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %11, i64 0, i32 0, i64 9
  %168 = load i8, i8* %167, align 1
  call void @llvm.lifetime.start(i64 16, i8* nonnull %108)
  store i64 %166, i64* %109, align 8
  store i64 %148, i64* %110, align 8
  %169 = getelementptr inbounds [16 x i8], [16 x i8]* %111, i64 0, i64 2
  store i8 %168, i8* %169, align 2
  %170 = load i64, i64* %109, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %108)
  %171 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %13, i64 0, i32 1
  %172 = bitcast i64* %171 to i8*
  %173 = load i8, i8* %172, align 8
  call void @llvm.lifetime.start(i64 16, i8* nonnull %104)
  store i64 %170, i64* %105, align 16
  store i64 %148, i64* %106, align 8
  %174 = getelementptr inbounds [16 x i8], [16 x i8]* %107, i64 0, i64 1
  store i8 %173, i8* %174, align 1
  %175 = load i64, i64* %105, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %104)
  %176 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %10, i64 0, i32 1
  %177 = bitcast i64* %176 to i8*
  %178 = load i8, i8* %177, align 8
  call void @llvm.lifetime.start(i64 16, i8* nonnull %108)
  store i64 %175, i64* %109, align 8
  store i64 %148, i64* %110, align 8
  %179 = bitcast { i64, i64 }* %8 to i8*
  store i8 %178, i8* %179, align 8
  %180 = load i64, i64* %109, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %108)
  %181 = lshr i64 %180, 8
  %182 = lshr i64 %180, 16
  %183 = lshr i64 %180, 24
  %184 = lshr i64 %180, 32
  %185 = lshr i64 %180, 40
  %186 = lshr i64 %180, 48
  %187 = lshr i64 %180, 56
  %188 = trunc i64 %180 to i8
  %189 = trunc i64 %181 to i8
  %190 = trunc i64 %182 to i8
  %191 = trunc i64 %183 to i8
  %192 = trunc i64 %184 to i8
  %193 = trunc i64 %185 to i8
  %194 = trunc i64 %186 to i8
  %195 = trunc i64 %187 to i8
  store i8 %188, i8* %2, align 1
  %196 = getelementptr inbounds i8, i8* %2, i64 1
  store i8 %189, i8* %196, align 1
  %197 = getelementptr inbounds i8, i8* %2, i64 2
  store i8 %190, i8* %197, align 1
  %198 = getelementptr inbounds i8, i8* %2, i64 3
  store i8 %191, i8* %198, align 1
  %199 = getelementptr inbounds i8, i8* %2, i64 4
  store i8 %192, i8* %199, align 1
  %200 = getelementptr inbounds i8, i8* %2, i64 5
  store i8 %193, i8* %200, align 1
  %201 = getelementptr inbounds i8, i8* %2, i64 6
  store i8 %194, i8* %201, align 1
  %202 = getelementptr inbounds i8, i8* %2, i64 7
  store i8 %195, i8* %202, align 1
  %203 = trunc i64 %148 to i8
  %204 = getelementptr inbounds i8, i8* %2, i64 8
  store i8 %203, i8* %204, align 1
  %205 = lshr i64 %148, 8
  %206 = trunc i64 %205 to i8
  %207 = getelementptr inbounds i8, i8* %2, i64 9
  store i8 %206, i8* %207, align 1
  %208 = lshr i64 %148, 16
  %209 = trunc i64 %208 to i8
  %210 = getelementptr inbounds i8, i8* %2, i64 10
  store i8 %209, i8* %210, align 1
  %211 = lshr i64 %148, 24
  %212 = trunc i64 %211 to i8
  %213 = getelementptr inbounds i8, i8* %2, i64 11
  store i8 %212, i8* %213, align 1
  %214 = lshr i64 %148, 32
  %215 = trunc i64 %214 to i8
  %216 = getelementptr inbounds i8, i8* %2, i64 12
  store i8 %215, i8* %216, align 1
  %217 = lshr i64 %148, 40
  %218 = trunc i64 %217 to i8
  %219 = getelementptr inbounds i8, i8* %2, i64 13
  store i8 %218, i8* %219, align 1
  %220 = lshr i64 %148, 48
  %221 = trunc i64 %220 to i8
  %222 = getelementptr inbounds i8, i8* %2, i64 14
  store i8 %221, i8* %222, align 1
  %223 = lshr i64 %148, 56
  %224 = trunc i64 %223 to i8
  %225 = getelementptr inbounds i8, i8* %2, i64 15
  store i8 %224, i8* %225, align 1
  call void @llvm.lifetime.end(i64 16, i8* nonnull %18) 
  call void @llvm.lifetime.end(i64 16, i8* nonnull %15) 
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L9PUNPCKHBWI3VnWI8vec128_tE2VnIS2_ES5_EEP6MemoryS7_R5StateT_T0_T1_(%struct.Memory* readnone returned, %struct.State* nocapture readnone dereferenceable(3376), i8* nocapture, i8* nocapture readonly, i8* nocapture readonly)  {
  %6 = alloca <2 x i64>, align 16
  %7 = bitcast <2 x i64>* %6 to { i64, i64 }*
  %8 = alloca { i64, i64 }, align 8
  %9 = alloca <2 x i64>, align 16
  %10 = bitcast <2 x i64>* %9 to { i64, i64 }*
  %11 = bitcast <2 x i64>* %9 to %struct.uint8v16_t*
  %12 = alloca <2 x i64>, align 16
  %13 = bitcast <2 x i64>* %12 to { i64, i64 }*
  %14 = bitcast <2 x i64>* %12 to %struct.uint8v16_t*
  %15 = bitcast <2 x i64>* %9 to i8*
  call void @llvm.lifetime.start(i64 16, i8* nonnull %15) 
  %16 = bitcast i8* %3 to <2 x i64>*
  %17 = load <2 x i64>, <2 x i64>* %16, align 1
  store <2 x i64> %17, <2 x i64>* %9, align 16
  %18 = bitcast <2 x i64>* %12 to i8*
  call void @llvm.lifetime.start(i64 16, i8* nonnull %18) 
  %19 = bitcast i8* %4 to <2 x i64>*
  %20 = load <2 x i64>, <2 x i64>* %19, align 1
  store <2 x i64> %20, <2 x i64>* %12, align 16
  %21 = bitcast <2 x i64>* %6 to i8*
  %22 = getelementptr inbounds <2 x i64>, <2 x i64>* %6, i64 0, i64 0
  %23 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %7, i64 0, i32 1
  %24 = bitcast <2 x i64>* %6 to [16 x i8]*
  %25 = bitcast { i64, i64 }* %8 to i8*
  %26 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %8, i64 0, i32 0
  %27 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %8, i64 0, i32 1
  %28 = bitcast { i64, i64 }* %8 to [16 x i8]*
  %29 = extractelement <2 x i64> %20, i32 1
  %30 = lshr i64 %29, 56
  %31 = trunc i64 %30 to i8
  call void @llvm.lifetime.start(i64 16, i8* nonnull %21)
  store <2 x i64> zeroinitializer, <2 x i64>* %6, align 16
  %32 = getelementptr inbounds [16 x i8], [16 x i8]* %24, i64 0, i64 15
  store i8 %31, i8* %32, align 1
  %33 = load i64, i64* %23, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %21)
  %34 = extractelement <2 x i64> %17, i32 1
  %35 = lshr i64 %34, 56
  %36 = trunc i64 %35 to i8
  call void @llvm.lifetime.start(i64 16, i8* nonnull %25)
  store i64 0, i64* %26, align 8
  store i64 %33, i64* %27, align 8
  %37 = getelementptr inbounds [16 x i8], [16 x i8]* %28, i64 0, i64 14
  store i8 %36, i8* %37, align 2
  %38 = load i64, i64* %27, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %25)
  %39 = lshr i64 %29, 48
  %40 = trunc i64 %39 to i8
  call void @llvm.lifetime.start(i64 16, i8* nonnull %21)
  store i64 0, i64* %22, align 16
  store i64 %38, i64* %23, align 8
  %41 = getelementptr inbounds [16 x i8], [16 x i8]* %24, i64 0, i64 13
  store i8 %40, i8* %41, align 1
  %42 = load i64, i64* %23, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %21)
  %43 = lshr i64 %34, 48
  %44 = trunc i64 %43 to i8
  call void @llvm.lifetime.start(i64 16, i8* nonnull %25)
  store i64 0, i64* %26, align 8
  store i64 %42, i64* %27, align 8
  %45 = getelementptr inbounds [16 x i8], [16 x i8]* %28, i64 0, i64 12
  store i8 %44, i8* %45, align 4
  %46 = load i64, i64* %27, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %25)
  %47 = lshr i64 %29, 40
  %48 = trunc i64 %47 to i8
  call void @llvm.lifetime.start(i64 16, i8* nonnull %21)
  store i64 0, i64* %22, align 16
  store i64 %46, i64* %23, align 8
  %49 = getelementptr inbounds [16 x i8], [16 x i8]* %24, i64 0, i64 11
  store i8 %48, i8* %49, align 1
  %50 = load i64, i64* %23, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %21)
  %51 = lshr i64 %34, 40
  %52 = trunc i64 %51 to i8
  call void @llvm.lifetime.start(i64 16, i8* nonnull %25)
  store i64 0, i64* %26, align 8
  store i64 %50, i64* %27, align 8
  %53 = getelementptr inbounds [16 x i8], [16 x i8]* %28, i64 0, i64 10
  store i8 %52, i8* %53, align 2
  %54 = load i64, i64* %27, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %25)
  %55 = lshr i64 %29, 32
  %56 = trunc i64 %55 to i8
  call void @llvm.lifetime.start(i64 16, i8* nonnull %21)
  store i64 0, i64* %22, align 16
  store i64 %54, i64* %23, align 8
  %57 = getelementptr inbounds [16 x i8], [16 x i8]* %24, i64 0, i64 9
  store i8 %56, i8* %57, align 1
  %58 = load i64, i64* %23, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %21)
  %59 = lshr i64 %34, 32
  %60 = trunc i64 %59 to i8
  call void @llvm.lifetime.start(i64 16, i8* nonnull %25)
  store i64 0, i64* %26, align 8
  store i64 %58, i64* %27, align 8
  %61 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %8, i64 0, i32 1
  %62 = bitcast i64* %61 to i8*
  store i8 %60, i8* %62, align 8
  %63 = load i64, i64* %27, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %25)
  %64 = lshr i64 %29, 24
  %65 = trunc i64 %64 to i8
  call void @llvm.lifetime.start(i64 16, i8* nonnull %21)
  store i64 0, i64* %22, align 16
  store i64 %63, i64* %23, align 8
  %66 = getelementptr inbounds [16 x i8], [16 x i8]* %24, i64 0, i64 7
  store i8 %65, i8* %66, align 1
  %67 = load i64, i64* %22, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %21)
  %68 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %11, i64 0, i32 0, i64 11
  %69 = load i8, i8* %68, align 1
  call void @llvm.lifetime.start(i64 16, i8* nonnull %25)
  store i64 %67, i64* %26, align 8
  store i64 %63, i64* %27, align 8
  %70 = getelementptr inbounds [16 x i8], [16 x i8]* %28, i64 0, i64 6
  store i8 %69, i8* %70, align 2
  %71 = load i64, i64* %26, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %25)
  %72 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %14, i64 0, i32 0, i64 10
  %73 = load i8, i8* %72, align 2
  call void @llvm.lifetime.start(i64 16, i8* nonnull %21)
  store i64 %71, i64* %22, align 16
  store i64 %63, i64* %23, align 8
  %74 = getelementptr inbounds [16 x i8], [16 x i8]* %24, i64 0, i64 5
  store i8 %73, i8* %74, align 1
  %75 = load i64, i64* %22, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %21)
  %76 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %11, i64 0, i32 0, i64 10
  %77 = load i8, i8* %76, align 2
  call void @llvm.lifetime.start(i64 16, i8* nonnull %25)
  store i64 %75, i64* %26, align 8
  store i64 %63, i64* %27, align 8
  %78 = getelementptr inbounds [16 x i8], [16 x i8]* %28, i64 0, i64 4
  store i8 %77, i8* %78, align 4
  %79 = load i64, i64* %26, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %25)
  %80 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %14, i64 0, i32 0, i64 9
  %81 = load i8, i8* %80, align 1
  call void @llvm.lifetime.start(i64 16, i8* nonnull %21)
  store i64 %79, i64* %22, align 16
  store i64 %63, i64* %23, align 8
  %82 = getelementptr inbounds [16 x i8], [16 x i8]* %24, i64 0, i64 3
  store i8 %81, i8* %82, align 1
  %83 = load i64, i64* %22, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %21)
  %84 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %11, i64 0, i32 0, i64 9
  %85 = load i8, i8* %84, align 1
  call void @llvm.lifetime.start(i64 16, i8* nonnull %25)
  store i64 %83, i64* %26, align 8
  store i64 %63, i64* %27, align 8
  %86 = getelementptr inbounds [16 x i8], [16 x i8]* %28, i64 0, i64 2
  store i8 %85, i8* %86, align 2
  %87 = load i64, i64* %26, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %25)
  %88 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %13, i64 0, i32 1
  %89 = bitcast i64* %88 to i8*
  %90 = load i8, i8* %89, align 8
  call void @llvm.lifetime.start(i64 16, i8* nonnull %21)
  store i64 %87, i64* %22, align 16
  store i64 %63, i64* %23, align 8
  %91 = getelementptr inbounds [16 x i8], [16 x i8]* %24, i64 0, i64 1
  store i8 %90, i8* %91, align 1
  %92 = load i64, i64* %22, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %21)
  %93 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %10, i64 0, i32 1
  %94 = bitcast i64* %93 to i8*
  %95 = load i8, i8* %94, align 8
  call void @llvm.lifetime.start(i64 16, i8* nonnull %25)
  store i64 %92, i64* %26, align 8
  store i64 %63, i64* %27, align 8
  %96 = bitcast { i64, i64 }* %8 to i8*
  store i8 %95, i8* %96, align 8
  %97 = load i64, i64* %26, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %25)
  %98 = lshr i64 %97, 8
  %99 = lshr i64 %97, 16
  %100 = lshr i64 %97, 24
  %101 = lshr i64 %97, 32
  %102 = lshr i64 %97, 40
  %103 = lshr i64 %97, 48
  %104 = lshr i64 %97, 56
  %105 = trunc i64 %97 to i8
  %106 = trunc i64 %98 to i8
  %107 = trunc i64 %99 to i8
  %108 = trunc i64 %100 to i8
  %109 = trunc i64 %101 to i8
  %110 = trunc i64 %102 to i8
  %111 = trunc i64 %103 to i8
  %112 = trunc i64 %104 to i8
  store i8 %105, i8* %2, align 1
  %113 = getelementptr inbounds i8, i8* %2, i64 1
  store i8 %106, i8* %113, align 1
  %114 = getelementptr inbounds i8, i8* %2, i64 2
  store i8 %107, i8* %114, align 1
  %115 = getelementptr inbounds i8, i8* %2, i64 3
  store i8 %108, i8* %115, align 1
  %116 = getelementptr inbounds i8, i8* %2, i64 4
  store i8 %109, i8* %116, align 1
  %117 = getelementptr inbounds i8, i8* %2, i64 5
  store i8 %110, i8* %117, align 1
  %118 = getelementptr inbounds i8, i8* %2, i64 6
  store i8 %111, i8* %118, align 1
  %119 = getelementptr inbounds i8, i8* %2, i64 7
  store i8 %112, i8* %119, align 1
  %120 = trunc i64 %63 to i8
  %121 = getelementptr inbounds i8, i8* %2, i64 8
  store i8 %120, i8* %121, align 1
  %122 = lshr i64 %63, 8
  %123 = trunc i64 %122 to i8
  %124 = getelementptr inbounds i8, i8* %2, i64 9
  store i8 %123, i8* %124, align 1
  %125 = lshr i64 %63, 16
  %126 = trunc i64 %125 to i8
  %127 = getelementptr inbounds i8, i8* %2, i64 10
  store i8 %126, i8* %127, align 1
  %128 = lshr i64 %63, 24
  %129 = trunc i64 %128 to i8
  %130 = getelementptr inbounds i8, i8* %2, i64 11
  store i8 %129, i8* %130, align 1
  %131 = lshr i64 %63, 32
  %132 = trunc i64 %131 to i8
  %133 = getelementptr inbounds i8, i8* %2, i64 12
  store i8 %132, i8* %133, align 1
  %134 = lshr i64 %63, 40
  %135 = trunc i64 %134 to i8
  %136 = getelementptr inbounds i8, i8* %2, i64 13
  store i8 %135, i8* %136, align 1
  %137 = lshr i64 %63, 48
  %138 = trunc i64 %137 to i8
  %139 = getelementptr inbounds i8, i8* %2, i64 14
  store i8 %138, i8* %139, align 1
  %140 = lshr i64 %63, 56
  %141 = trunc i64 %140 to i8
  %142 = getelementptr inbounds i8, i8* %2, i64 15
  store i8 %141, i8* %142, align 1
  call void @llvm.lifetime.end(i64 16, i8* nonnull %18) 
  call void @llvm.lifetime.end(i64 16, i8* nonnull %15) 
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L9PUNPCKHWDI4RVnWI7vec64_tE3RVnIS2_E3MVnIS2_EEEP6MemoryS9_R5StateT_T0_T1_(%struct.Memory* returned, %struct.State* nocapture readnone dereferenceable(3376), i64* nocapture, i64, i64)  {
  %6 = alloca i64, align 8
  %7 = alloca i64, align 8
  %8 = add i64 %4, 4
  %9 = inttoptr i64 %8 to i16*
  %10 = load i16, i16* %9
  %11 = add i64 %4, 6
  %12 = inttoptr i64 %11 to i16*
  %13 = load i16, i16* %12
  %14 = bitcast i64* %6 to i8*
  %15 = bitcast i64* %6 to [4 x i16]*
  %16 = bitcast i64* %7 to i8*
  %17 = bitcast i64* %7 to [4 x i16]*
  call void @llvm.lifetime.start(i64 8, i8* nonnull %14)
  store i64 0, i64* %6, align 8
  %18 = getelementptr inbounds [4 x i16], [4 x i16]* %15, i64 0, i64 3
  store i16 %13, i16* %18, align 2
  %19 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %14)
  %20 = lshr i64 %3, 48
  %21 = trunc i64 %20 to i16
  call void @llvm.lifetime.start(i64 8, i8* nonnull %16)
  store i64 %19, i64* %7, align 8
  %22 = getelementptr inbounds [4 x i16], [4 x i16]* %17, i64 0, i64 2
  store i16 %21, i16* %22, align 4
  %23 = load i64, i64* %7, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %16)
  call void @llvm.lifetime.start(i64 8, i8* nonnull %14)
  store i64 %23, i64* %6, align 8
  %24 = getelementptr inbounds [4 x i16], [4 x i16]* %15, i64 0, i64 1
  store i16 %10, i16* %24, align 2
  %25 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %14)
  %26 = lshr i64 %3, 32
  %27 = trunc i64 %26 to i16
  call void @llvm.lifetime.start(i64 8, i8* nonnull %16)
  store i64 %25, i64* %7, align 8
  %28 = bitcast i64* %7 to i16*
  store i16 %27, i16* %28, align 8
  %29 = load i64, i64* %7, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %16)
  %30 = lshr i64 %29, 16
  %31 = lshr i64 %29, 32
  %32 = lshr i64 %29, 48
  %33 = trunc i64 %29 to i16
  %34 = trunc i64 %30 to i16
  %35 = trunc i64 %31 to i16
  %36 = trunc i64 %32 to i16
  %37 = bitcast i64* %2 to [4 x i16]*
  %38 = bitcast i64* %2 to i16*
  store i16 %33, i16* %38, align 1
  %39 = getelementptr inbounds [4 x i16], [4 x i16]* %37, i64 0, i64 1
  store i16 %34, i16* %39, align 1
  %40 = getelementptr inbounds [4 x i16], [4 x i16]* %37, i64 0, i64 2
  store i16 %35, i16* %40, align 1
  %41 = getelementptr inbounds [4 x i16], [4 x i16]* %37, i64 0, i64 3
  store i16 %36, i16* %41, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L9PUNPCKHWDI4RVnWI7vec64_tE3RVnIS2_ES5_EEP6MemoryS7_R5StateT_T0_T1_(%struct.Memory* readnone returned, %struct.State* nocapture readnone dereferenceable(3376), i64* nocapture, i64, i64)  {
  %6 = alloca i64, align 8
  %7 = alloca i64, align 8
  %8 = bitcast i64* %6 to i8*
  %9 = bitcast i64* %6 to [4 x i16]*
  %10 = bitcast i64* %7 to i8*
  %11 = bitcast i64* %7 to [4 x i16]*
  %12 = lshr i64 %4, 48
  %13 = trunc i64 %12 to i16
  call void @llvm.lifetime.start(i64 8, i8* nonnull %8)
  store i64 0, i64* %6, align 8
  %14 = getelementptr inbounds [4 x i16], [4 x i16]* %9, i64 0, i64 3
  store i16 %13, i16* %14, align 2
  %15 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %8)
  %16 = lshr i64 %3, 48
  %17 = trunc i64 %16 to i16
  call void @llvm.lifetime.start(i64 8, i8* nonnull %10)
  store i64 %15, i64* %7, align 8
  %18 = getelementptr inbounds [4 x i16], [4 x i16]* %11, i64 0, i64 2
  store i16 %17, i16* %18, align 4
  %19 = load i64, i64* %7, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %10)
  %20 = lshr i64 %4, 32
  %21 = trunc i64 %20 to i16
  call void @llvm.lifetime.start(i64 8, i8* nonnull %8)
  store i64 %19, i64* %6, align 8
  %22 = getelementptr inbounds [4 x i16], [4 x i16]* %9, i64 0, i64 1
  store i16 %21, i16* %22, align 2
  %23 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %8)
  %24 = lshr i64 %3, 32
  %25 = trunc i64 %24 to i16
  call void @llvm.lifetime.start(i64 8, i8* nonnull %10)
  store i64 %23, i64* %7, align 8
  %26 = bitcast i64* %7 to i16*
  store i16 %25, i16* %26, align 8
  %27 = load i64, i64* %7, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %10)
  %28 = lshr i64 %27, 16
  %29 = lshr i64 %27, 32
  %30 = lshr i64 %27, 48
  %31 = trunc i64 %27 to i16
  %32 = trunc i64 %28 to i16
  %33 = trunc i64 %29 to i16
  %34 = trunc i64 %30 to i16
  %35 = bitcast i64* %2 to [4 x i16]*
  %36 = bitcast i64* %2 to i16*
  store i16 %31, i16* %36, align 1
  %37 = getelementptr inbounds [4 x i16], [4 x i16]* %35, i64 0, i64 1
  store i16 %32, i16* %37, align 1
  %38 = getelementptr inbounds [4 x i16], [4 x i16]* %35, i64 0, i64 2
  store i16 %33, i16* %38, align 1
  %39 = getelementptr inbounds [4 x i16], [4 x i16]* %35, i64 0, i64 3
  store i16 %34, i16* %39, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L9PUNPCKHWDI3VnWI8vec128_tE2VnIS2_E3MVnIS2_EEEP6MemoryS9_R5StateT_T0_T1_(%struct.Memory* returned, %struct.State* nocapture readnone dereferenceable(3376), i8* nocapture, i8* nocapture readonly, i64)  {
  %6 = alloca <2 x i64>, align 16
  %7 = bitcast <2 x i64>* %6 to { i64, i64 }*
  %8 = alloca { i64, i64 }, align 8
  %9 = alloca <2 x i64>, align 16
  %10 = bitcast <2 x i64>* %9 to { i64, i64 }*
  %11 = bitcast <2 x i64>* %9 to %struct.uint16v8_t*
  %12 = bitcast <2 x i64>* %9 to i8*
  call void @llvm.lifetime.start(i64 16, i8* nonnull %12) 
  %13 = bitcast i8* %3 to <2 x i64>*
  %14 = load <2 x i64>, <2 x i64>* %13, align 1
  store <2 x i64> %14, <2 x i64>* %9, align 16
  %15 = add i64 %4, 8
  %16 = inttoptr i64 %15 to i16*
  %17 = load i16, i16* %16
  %18 = add i64 %4, 10
  %19 = inttoptr i64 %18 to i16*
  %20 = load i16, i16* %19
  %21 = add i64 %4, 12
  %22 = inttoptr i64 %21 to i16*
  %23 = load i16, i16* %22
  %24 = add i64 %4, 14
  %25 = inttoptr i64 %24 to i16*
  %26 = load i16, i16* %25
  %27 = bitcast <2 x i64>* %6 to i8*
  %28 = getelementptr inbounds <2 x i64>, <2 x i64>* %6, i64 0, i64 0
  %29 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %7, i64 0, i32 1
  %30 = bitcast <2 x i64>* %6 to [8 x i16]*
  %31 = bitcast { i64, i64 }* %8 to i8*
  %32 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %8, i64 0, i32 0
  %33 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %8, i64 0, i32 1
  %34 = bitcast { i64, i64 }* %8 to [8 x i16]*
  call void @llvm.lifetime.start(i64 16, i8* nonnull %27)
  store <2 x i64> zeroinitializer, <2 x i64>* %6, align 16
  %35 = getelementptr inbounds [8 x i16], [8 x i16]* %30, i64 0, i64 7
  store i16 %26, i16* %35, align 2
  %36 = load i64, i64* %29, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %27)
  %37 = extractelement <2 x i64> %14, i32 1
  %38 = lshr i64 %37, 48
  %39 = trunc i64 %38 to i16
  call void @llvm.lifetime.start(i64 16, i8* nonnull %31)
  store i64 0, i64* %32, align 8
  store i64 %36, i64* %33, align 8
  %40 = getelementptr inbounds [8 x i16], [8 x i16]* %34, i64 0, i64 6
  store i16 %39, i16* %40, align 4
  %41 = load i64, i64* %33, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %31)
  call void @llvm.lifetime.start(i64 16, i8* nonnull %27)
  store i64 0, i64* %28, align 16
  store i64 %41, i64* %29, align 8
  %42 = getelementptr inbounds [8 x i16], [8 x i16]* %30, i64 0, i64 5
  store i16 %23, i16* %42, align 2
  %43 = load i64, i64* %29, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %27)
  %44 = lshr i64 %37, 32
  %45 = trunc i64 %44 to i16
  call void @llvm.lifetime.start(i64 16, i8* nonnull %31)
  store i64 0, i64* %32, align 8
  store i64 %43, i64* %33, align 8
  %46 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %8, i64 0, i32 1
  %47 = bitcast i64* %46 to i16*
  store i16 %45, i16* %47, align 8
  %48 = load i64, i64* %33, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %31)
  call void @llvm.lifetime.start(i64 16, i8* nonnull %27)
  store i64 0, i64* %28, align 16
  store i64 %48, i64* %29, align 8
  %49 = getelementptr inbounds [8 x i16], [8 x i16]* %30, i64 0, i64 3
  store i16 %20, i16* %49, align 2
  %50 = load i64, i64* %28, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %27)
  %51 = getelementptr inbounds %struct.uint16v8_t, %struct.uint16v8_t* %11, i64 0, i32 0, i64 5
  %52 = load i16, i16* %51, align 2
  call void @llvm.lifetime.start(i64 16, i8* nonnull %31)
  store i64 %50, i64* %32, align 8
  store i64 %48, i64* %33, align 8
  %53 = getelementptr inbounds [8 x i16], [8 x i16]* %34, i64 0, i64 2
  store i16 %52, i16* %53, align 4
  %54 = load i64, i64* %32, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %31)
  call void @llvm.lifetime.start(i64 16, i8* nonnull %27)
  store i64 %54, i64* %28, align 16
  store i64 %48, i64* %29, align 8
  %55 = getelementptr inbounds [8 x i16], [8 x i16]* %30, i64 0, i64 1
  store i16 %17, i16* %55, align 2
  %56 = load i64, i64* %28, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %27)
  %57 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %10, i64 0, i32 1
  %58 = bitcast i64* %57 to i16*
  %59 = load i16, i16* %58, align 8
  call void @llvm.lifetime.start(i64 16, i8* nonnull %31)
  store i64 %56, i64* %32, align 8
  store i64 %48, i64* %33, align 8
  %60 = bitcast { i64, i64 }* %8 to i16*
  store i16 %59, i16* %60, align 8
  %61 = load i64, i64* %32, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %31)
  %62 = lshr i64 %61, 16
  %63 = lshr i64 %61, 32
  %64 = lshr i64 %61, 48
  %65 = trunc i64 %61 to i16
  %66 = trunc i64 %62 to i16
  %67 = trunc i64 %63 to i16
  %68 = trunc i64 %64 to i16
  %69 = bitcast i8* %2 to i16*
  store i16 %65, i16* %69, align 1
  %70 = getelementptr inbounds i8, i8* %2, i64 2
  %71 = bitcast i8* %70 to i16*
  store i16 %66, i16* %71, align 1
  %72 = getelementptr inbounds i8, i8* %2, i64 4
  %73 = bitcast i8* %72 to i16*
  store i16 %67, i16* %73, align 1
  %74 = getelementptr inbounds i8, i8* %2, i64 6
  %75 = bitcast i8* %74 to i16*
  store i16 %68, i16* %75, align 1
  %76 = trunc i64 %48 to i16
  %77 = getelementptr inbounds i8, i8* %2, i64 8
  %78 = bitcast i8* %77 to i16*
  store i16 %76, i16* %78, align 1
  %79 = lshr i64 %48, 16
  %80 = trunc i64 %79 to i16
  %81 = getelementptr inbounds i8, i8* %2, i64 10
  %82 = bitcast i8* %81 to i16*
  store i16 %80, i16* %82, align 1
  %83 = lshr i64 %48, 32
  %84 = trunc i64 %83 to i16
  %85 = getelementptr inbounds i8, i8* %2, i64 12
  %86 = bitcast i8* %85 to i16*
  store i16 %84, i16* %86, align 1
  %87 = lshr i64 %48, 48
  %88 = trunc i64 %87 to i16
  %89 = getelementptr inbounds i8, i8* %2, i64 14
  %90 = bitcast i8* %89 to i16*
  store i16 %88, i16* %90, align 1
  call void @llvm.lifetime.end(i64 16, i8* nonnull %12) 
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L9PUNPCKHWDI3VnWI8vec128_tE2VnIS2_ES5_EEP6MemoryS7_R5StateT_T0_T1_(%struct.Memory* readnone returned, %struct.State* nocapture readnone dereferenceable(3376), i8* nocapture, i8* nocapture readonly, i8* nocapture readonly)  {
  %6 = alloca <2 x i64>, align 16
  %7 = bitcast <2 x i64>* %6 to { i64, i64 }*
  %8 = alloca { i64, i64 }, align 8
  %9 = alloca <2 x i64>, align 16
  %10 = bitcast <2 x i64>* %9 to { i64, i64 }*
  %11 = bitcast <2 x i64>* %9 to i8*
  call void @llvm.lifetime.start(i64 16, i8* nonnull %11) 
  %12 = bitcast i8* %3 to <2 x i64>*
  %13 = load <2 x i64>, <2 x i64>* %12, align 1
  store <2 x i64> %13, <2 x i64>* %9, align 16
  %14 = getelementptr inbounds i8, i8* %4, i64 8
  %15 = bitcast i8* %14 to i64*
  %16 = load i64, i64* %15, align 1
  %17 = bitcast <2 x i64>* %6 to i8*
  %18 = getelementptr inbounds <2 x i64>, <2 x i64>* %6, i64 0, i64 0
  %19 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %7, i64 0, i32 1
  %20 = bitcast <2 x i64>* %6 to [8 x i16]*
  %21 = bitcast { i64, i64 }* %8 to i8*
  %22 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %8, i64 0, i32 0
  %23 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %8, i64 0, i32 1
  %24 = bitcast { i64, i64 }* %8 to [8 x i16]*
  %25 = lshr i64 %16, 48
  %26 = trunc i64 %25 to i16
  call void @llvm.lifetime.start(i64 16, i8* nonnull %17)
  store <2 x i64> zeroinitializer, <2 x i64>* %6, align 16
  %27 = getelementptr inbounds [8 x i16], [8 x i16]* %20, i64 0, i64 7
  store i16 %26, i16* %27, align 2
  %28 = load i64, i64* %19, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %17)
  %29 = extractelement <2 x i64> %13, i32 1
  %30 = lshr i64 %29, 48
  %31 = trunc i64 %30 to i16
  call void @llvm.lifetime.start(i64 16, i8* nonnull %21)
  store i64 0, i64* %22, align 8
  store i64 %28, i64* %23, align 8
  %32 = getelementptr inbounds [8 x i16], [8 x i16]* %24, i64 0, i64 6
  store i16 %31, i16* %32, align 4
  %33 = load i64, i64* %23, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %21)
  %34 = lshr i64 %16, 32
  %35 = trunc i64 %34 to i16
  call void @llvm.lifetime.start(i64 16, i8* nonnull %17)
  store i64 0, i64* %18, align 16
  store i64 %33, i64* %19, align 8
  %36 = getelementptr inbounds [8 x i16], [8 x i16]* %20, i64 0, i64 5
  store i16 %35, i16* %36, align 2
  %37 = load i64, i64* %19, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %17)
  %38 = lshr i64 %29, 32
  %39 = trunc i64 %38 to i16
  call void @llvm.lifetime.start(i64 16, i8* nonnull %21)
  store i64 0, i64* %22, align 8
  store i64 %37, i64* %23, align 8
  %40 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %8, i64 0, i32 1
  %41 = bitcast i64* %40 to i16*
  store i16 %39, i16* %41, align 8
  %42 = load i64, i64* %23, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %21)
  %43 = lshr i64 %16, 16
  %44 = trunc i64 %43 to i16
  call void @llvm.lifetime.start(i64 16, i8* nonnull %17)
  store i64 0, i64* %18, align 16
  store i64 %42, i64* %19, align 8
  %45 = getelementptr inbounds [8 x i16], [8 x i16]* %20, i64 0, i64 3
  store i16 %44, i16* %45, align 2
  %46 = load i64, i64* %18, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %17)
  %47 = lshr i64 %29, 16
  %48 = trunc i64 %47 to i16
  call void @llvm.lifetime.start(i64 16, i8* nonnull %21)
  store i64 %46, i64* %22, align 8
  store i64 %42, i64* %23, align 8
  %49 = getelementptr inbounds [8 x i16], [8 x i16]* %24, i64 0, i64 2
  store i16 %48, i16* %49, align 4
  %50 = load i64, i64* %22, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %21)
  %51 = trunc i64 %16 to i16
  call void @llvm.lifetime.start(i64 16, i8* nonnull %17)
  store i64 %50, i64* %18, align 16
  store i64 %42, i64* %19, align 8
  %52 = getelementptr inbounds [8 x i16], [8 x i16]* %20, i64 0, i64 1
  store i16 %51, i16* %52, align 2
  %53 = load i64, i64* %18, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %17)
  %54 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %10, i64 0, i32 1
  %55 = bitcast i64* %54 to i16*
  %56 = load i16, i16* %55, align 8
  call void @llvm.lifetime.start(i64 16, i8* nonnull %21)
  store i64 %53, i64* %22, align 8
  store i64 %42, i64* %23, align 8
  %57 = bitcast { i64, i64 }* %8 to i16*
  store i16 %56, i16* %57, align 8
  %58 = load i64, i64* %22, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %21)
  %59 = lshr i64 %58, 16
  %60 = lshr i64 %58, 32
  %61 = lshr i64 %58, 48
  %62 = trunc i64 %58 to i16
  %63 = trunc i64 %59 to i16
  %64 = trunc i64 %60 to i16
  %65 = trunc i64 %61 to i16
  %66 = bitcast i8* %2 to i16*
  store i16 %62, i16* %66, align 1
  %67 = getelementptr inbounds i8, i8* %2, i64 2
  %68 = bitcast i8* %67 to i16*
  store i16 %63, i16* %68, align 1
  %69 = getelementptr inbounds i8, i8* %2, i64 4
  %70 = bitcast i8* %69 to i16*
  store i16 %64, i16* %70, align 1
  %71 = getelementptr inbounds i8, i8* %2, i64 6
  %72 = bitcast i8* %71 to i16*
  store i16 %65, i16* %72, align 1
  %73 = trunc i64 %42 to i16
  %74 = getelementptr inbounds i8, i8* %2, i64 8
  %75 = bitcast i8* %74 to i16*
  store i16 %73, i16* %75, align 1
  %76 = lshr i64 %42, 16
  %77 = trunc i64 %76 to i16
  %78 = getelementptr inbounds i8, i8* %2, i64 10
  %79 = bitcast i8* %78 to i16*
  store i16 %77, i16* %79, align 1
  %80 = lshr i64 %42, 32
  %81 = trunc i64 %80 to i16
  %82 = getelementptr inbounds i8, i8* %2, i64 12
  %83 = bitcast i8* %82 to i16*
  store i16 %81, i16* %83, align 1
  %84 = lshr i64 %42, 48
  %85 = trunc i64 %84 to i16
  %86 = getelementptr inbounds i8, i8* %2, i64 14
  %87 = bitcast i8* %86 to i16*
  store i16 %85, i16* %87, align 1
  call void @llvm.lifetime.end(i64 16, i8* nonnull %11) 
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L9PUNPCKHDQI4RVnWI7vec64_tE3RVnIS2_E3MVnIS2_EEEP6MemoryS9_R5StateT_T0_T1_(%struct.Memory* returned, %struct.State* nocapture readnone dereferenceable(3376), i64* nocapture, i64, i64)  {
  %6 = alloca i64, align 8
  %7 = alloca i64, align 8
  %8 = add i64 %4, 4
  %9 = inttoptr i64 %8 to i32*
  %10 = load i32, i32* %9
  %11 = bitcast i64* %6 to i8*
  %12 = bitcast i64* %6 to [2 x i32]*
  %13 = bitcast i64* %7 to i8*
  call void @llvm.lifetime.start(i64 8, i8* nonnull %11)
  store i64 0, i64* %6, align 8
  %14 = getelementptr inbounds [2 x i32], [2 x i32]* %12, i64 0, i64 1
  store i32 %10, i32* %14, align 4
  %15 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %11)
  %16 = lshr i64 %3, 32
  %17 = trunc i64 %16 to i32
  call void @llvm.lifetime.start(i64 8, i8* nonnull %13)
  store i64 %15, i64* %7, align 8
  %18 = bitcast i64* %7 to i32*
  store i32 %17, i32* %18, align 8
  %19 = load i64, i64* %7, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %13)
  %20 = trunc i64 %19 to i32
  %21 = lshr i64 %19, 32
  %22 = trunc i64 %21 to i32
  %23 = bitcast i64* %2 to [2 x i32]*
  %24 = bitcast i64* %2 to i32*
  store i32 %20, i32* %24, align 1
  %25 = getelementptr inbounds [2 x i32], [2 x i32]* %23, i64 0, i64 1
  store i32 %22, i32* %25, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L9PUNPCKHDQI4RVnWI7vec64_tE3RVnIS2_ES5_EEP6MemoryS7_R5StateT_T0_T1_(%struct.Memory* readnone returned, %struct.State* nocapture readnone dereferenceable(3376), i64* nocapture, i64, i64)  {
  %6 = alloca i64, align 8
  %7 = alloca i64, align 8
  %8 = bitcast i64* %6 to i8*
  %9 = bitcast i64* %6 to [2 x i32]*
  %10 = bitcast i64* %7 to i8*
  %11 = lshr i64 %4, 32
  %12 = trunc i64 %11 to i32
  call void @llvm.lifetime.start(i64 8, i8* nonnull %8)
  store i64 0, i64* %6, align 8
  %13 = getelementptr inbounds [2 x i32], [2 x i32]* %9, i64 0, i64 1
  store i32 %12, i32* %13, align 4
  %14 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %8)
  %15 = lshr i64 %3, 32
  %16 = trunc i64 %15 to i32
  call void @llvm.lifetime.start(i64 8, i8* nonnull %10)
  store i64 %14, i64* %7, align 8
  %17 = bitcast i64* %7 to i32*
  store i32 %16, i32* %17, align 8
  %18 = load i64, i64* %7, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %10)
  %19 = trunc i64 %18 to i32
  %20 = lshr i64 %18, 32
  %21 = trunc i64 %20 to i32
  %22 = bitcast i64* %2 to [2 x i32]*
  %23 = bitcast i64* %2 to i32*
  store i32 %19, i32* %23, align 1
  %24 = getelementptr inbounds [2 x i32], [2 x i32]* %22, i64 0, i64 1
  store i32 %21, i32* %24, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L9PUNPCKHDQI3VnWI8vec128_tE2VnIS2_E3MVnIS2_EEEP6MemoryS9_R5StateT_T0_T1_(%struct.Memory* returned, %struct.State* nocapture readnone dereferenceable(3376), i8* nocapture, i8* nocapture readonly, i64)  {
  %6 = alloca <2 x i64>, align 16
  %7 = bitcast <2 x i64>* %6 to { i64, i64 }*
  %8 = alloca { i64, i64 }, align 8
  %9 = getelementptr inbounds i8, i8* %3, i64 8
  %10 = bitcast i8* %9 to i64*
  %11 = load i64, i64* %10, align 1
  %12 = add i64 %4, 8
  %13 = inttoptr i64 %12 to i32*
  %14 = load i32, i32* %13
  %15 = add i64 %4, 12
  %16 = inttoptr i64 %15 to i32*
  %17 = load i32, i32* %16
  %18 = bitcast <2 x i64>* %6 to i8*
  %19 = getelementptr inbounds <2 x i64>, <2 x i64>* %6, i64 0, i64 0
  %20 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %7, i64 0, i32 1
  %21 = bitcast <2 x i64>* %6 to [4 x i32]*
  %22 = bitcast { i64, i64 }* %8 to i8*
  %23 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %8, i64 0, i32 0
  %24 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %8, i64 0, i32 1
  call void @llvm.lifetime.start(i64 16, i8* nonnull %18)
  store <2 x i64> zeroinitializer, <2 x i64>* %6, align 16
  %25 = getelementptr inbounds [4 x i32], [4 x i32]* %21, i64 0, i64 3
  store i32 %17, i32* %25, align 4
  %26 = load i64, i64* %20, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %18)
  %27 = lshr i64 %11, 32
  %28 = trunc i64 %27 to i32
  call void @llvm.lifetime.start(i64 16, i8* nonnull %22)
  store i64 0, i64* %23, align 8
  store i64 %26, i64* %24, align 8
  %29 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %8, i64 0, i32 1
  %30 = bitcast i64* %29 to i32*
  store i32 %28, i32* %30, align 8
  %31 = load i64, i64* %24, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %22)
  call void @llvm.lifetime.start(i64 16, i8* nonnull %18)
  store i64 0, i64* %19, align 16
  store i64 %31, i64* %20, align 8
  %32 = getelementptr inbounds [4 x i32], [4 x i32]* %21, i64 0, i64 1
  store i32 %14, i32* %32, align 4
  %33 = load i64, i64* %19, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %18)
  %34 = trunc i64 %11 to i32
  call void @llvm.lifetime.start(i64 16, i8* nonnull %22)
  store i64 %33, i64* %23, align 8
  store i64 %31, i64* %24, align 8
  %35 = bitcast { i64, i64 }* %8 to i32*
  store i32 %34, i32* %35, align 8
  %36 = load i64, i64* %23, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %22)
  %37 = lshr i64 %36, 32
  %38 = trunc i64 %36 to i32
  %39 = trunc i64 %37 to i32
  %40 = bitcast i8* %2 to i32*
  store i32 %38, i32* %40, align 1
  %41 = getelementptr inbounds i8, i8* %2, i64 4
  %42 = bitcast i8* %41 to i32*
  store i32 %39, i32* %42, align 1
  %43 = trunc i64 %31 to i32
  %44 = getelementptr inbounds i8, i8* %2, i64 8
  %45 = bitcast i8* %44 to i32*
  store i32 %43, i32* %45, align 1
  %46 = lshr i64 %31, 32
  %47 = trunc i64 %46 to i32
  %48 = getelementptr inbounds i8, i8* %2, i64 12
  %49 = bitcast i8* %48 to i32*
  store i32 %47, i32* %49, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L9PUNPCKHDQI3VnWI8vec128_tE2VnIS2_ES5_EEP6MemoryS7_R5StateT_T0_T1_(%struct.Memory* readnone returned, %struct.State* nocapture readnone dereferenceable(3376), i8* nocapture, i8* nocapture readonly, i8* nocapture readonly)  {
  %6 = alloca <2 x i64>, align 16
  %7 = bitcast <2 x i64>* %6 to { i64, i64 }*
  %8 = alloca { i64, i64 }, align 8
  %9 = getelementptr inbounds i8, i8* %3, i64 8
  %10 = bitcast i8* %9 to i64*
  %11 = load i64, i64* %10, align 1
  %12 = getelementptr inbounds i8, i8* %4, i64 8
  %13 = bitcast i8* %12 to i64*
  %14 = load i64, i64* %13, align 1
  %15 = bitcast <2 x i64>* %6 to i8*
  %16 = getelementptr inbounds <2 x i64>, <2 x i64>* %6, i64 0, i64 0
  %17 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %7, i64 0, i32 1
  %18 = bitcast <2 x i64>* %6 to [4 x i32]*
  %19 = bitcast { i64, i64 }* %8 to i8*
  %20 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %8, i64 0, i32 0
  %21 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %8, i64 0, i32 1
  %22 = lshr i64 %14, 32
  %23 = trunc i64 %22 to i32
  call void @llvm.lifetime.start(i64 16, i8* nonnull %15)
  store <2 x i64> zeroinitializer, <2 x i64>* %6, align 16
  %24 = getelementptr inbounds [4 x i32], [4 x i32]* %18, i64 0, i64 3
  store i32 %23, i32* %24, align 4
  %25 = load i64, i64* %17, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %15)
  %26 = lshr i64 %11, 32
  %27 = trunc i64 %26 to i32
  call void @llvm.lifetime.start(i64 16, i8* nonnull %19)
  store i64 0, i64* %20, align 8
  store i64 %25, i64* %21, align 8
  %28 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %8, i64 0, i32 1
  %29 = bitcast i64* %28 to i32*
  store i32 %27, i32* %29, align 8
  %30 = load i64, i64* %21, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %19)
  %31 = trunc i64 %14 to i32
  call void @llvm.lifetime.start(i64 16, i8* nonnull %15)
  store i64 0, i64* %16, align 16
  store i64 %30, i64* %17, align 8
  %32 = getelementptr inbounds [4 x i32], [4 x i32]* %18, i64 0, i64 1
  store i32 %31, i32* %32, align 4
  %33 = load i64, i64* %16, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %15)
  %34 = trunc i64 %11 to i32
  call void @llvm.lifetime.start(i64 16, i8* nonnull %19)
  store i64 %33, i64* %20, align 8
  store i64 %30, i64* %21, align 8
  %35 = bitcast { i64, i64 }* %8 to i32*
  store i32 %34, i32* %35, align 8
  %36 = load i64, i64* %20, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %19)
  %37 = lshr i64 %36, 32
  %38 = trunc i64 %36 to i32
  %39 = trunc i64 %37 to i32
  %40 = bitcast i8* %2 to i32*
  store i32 %38, i32* %40, align 1
  %41 = getelementptr inbounds i8, i8* %2, i64 4
  %42 = bitcast i8* %41 to i32*
  store i32 %39, i32* %42, align 1
  %43 = trunc i64 %30 to i32
  %44 = getelementptr inbounds i8, i8* %2, i64 8
  %45 = bitcast i8* %44 to i32*
  store i32 %43, i32* %45, align 1
  %46 = lshr i64 %30, 32
  %47 = trunc i64 %46 to i32
  %48 = getelementptr inbounds i8, i8* %2, i64 12
  %49 = bitcast i8* %48 to i32*
  store i32 %47, i32* %49, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L10PUNPCKHQDQI3VnWI8vec128_tE2VnIS2_E3MVnIS2_EEEP6MemoryS9_R5StateT_T0_T1_(%struct.Memory* returned, %struct.State* nocapture readnone dereferenceable(3376), i8* nocapture, i8* nocapture readonly, i64)  {
  %6 = getelementptr inbounds i8, i8* %3, i64 8
  %7 = bitcast i8* %6 to i64*
  %8 = load i64, i64* %7, align 1
  %9 = add i64 %4, 8
  %10 = inttoptr i64 %9 to i64*
  %11 = load i64, i64* %10
  %12 = bitcast i8* %2 to i64*
  store i64 %8, i64* %12, align 1
  %13 = getelementptr inbounds i8, i8* %2, i64 8
  %14 = bitcast i8* %13 to i64*
  store i64 %11, i64* %14, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L10PUNPCKHQDQI3VnWI8vec128_tE2VnIS2_ES5_EEP6MemoryS7_R5StateT_T0_T1_(%struct.Memory* readnone returned, %struct.State* nocapture readnone dereferenceable(3376), i8* nocapture, i8* nocapture readonly, i8* nocapture readonly)  {
  %6 = getelementptr inbounds i8, i8* %3, i64 8
  %7 = bitcast i8* %6 to i64*
  %8 = load i64, i64* %7, align 1
  %9 = getelementptr inbounds i8, i8* %4, i64 8
  %10 = bitcast i8* %9 to i64*
  %11 = load i64, i64* %10, align 1
  %12 = bitcast i8* %2 to i64*
  store i64 %8, i64* %12, align 1
  %13 = getelementptr inbounds i8, i8* %2, i64 8
  %14 = bitcast i8* %13 to i64*
  store i64 %11, i64* %14, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L9PUNPCKLBWI4RVnWI7vec64_tE3RVnIS2_E3MVnI7vec32_tEEEP6MemorySA_R5StateT_T0_T1_(%struct.Memory* returned, %struct.State* nocapture readnone dereferenceable(3376), i64* nocapture, i64, i64)  {
  %6 = alloca i64, align 8
  %7 = alloca i64, align 8
  %8 = alloca i64, align 8
  %9 = bitcast i64* %8 to %struct.uint8v8_t*
  %10 = alloca i32, align 4
  %11 = bitcast i32* %10 to %struct.uint8v4_t*
  %12 = bitcast i64* %8 to i8*
  call void @llvm.lifetime.start(i64 8, i8* nonnull %12) 
  store i64 %3, i64* %8, align 8
  %13 = bitcast i32* %10 to i8*
  call void @llvm.lifetime.start(i64 4, i8* nonnull %13) 
  %14 = inttoptr i64 %4 to i8*
  %15 = load i8, i8* %14
  %16 = add i64 %4, 1
  %17 = inttoptr i64 %16 to i8*
  %18 = load i8, i8* %17
  %19 = add i64 %4, 2
  %20 = inttoptr i64 %19 to i8*
  %21 = load i8, i8* %20
  %22 = add i64 %4, 3
  %23 = inttoptr i64 %22 to i8*
  %24 = load i8, i8* %23
  %25 = zext i8 %24 to i32
  %26 = shl nuw i32 %25, 24
  %27 = zext i8 %21 to i32
  %28 = shl nuw nsw i32 %27, 16
  %29 = zext i8 %18 to i32
  %30 = shl nuw nsw i32 %29, 8
  %31 = zext i8 %15 to i32
  %32 = or i32 %30, %31
  %33 = or i32 %32, %28
  %34 = or i32 %33, %26
  store i32 %34, i32* %10, align 4
  %35 = bitcast i64* %6 to i8*
  %36 = bitcast i64* %6 to [8 x i8]*
  %37 = bitcast i64* %7 to i8*
  %38 = bitcast i64* %7 to [8 x i8]*
  %39 = trunc i64 %3 to i8
  call void @llvm.lifetime.start(i64 8, i8* nonnull %35)
  store i64 0, i64* %6, align 8
  %40 = bitcast i64* %6 to i8*
  store i8 %39, i8* %40, align 8
  %41 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %35)
  call void @llvm.lifetime.start(i64 8, i8* nonnull %37)
  store i64 %41, i64* %7, align 8
  %42 = getelementptr inbounds [8 x i8], [8 x i8]* %38, i64 0, i64 1
  store i8 %15, i8* %42, align 1
  %43 = load i64, i64* %7, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %37)
  %44 = lshr i64 %3, 8
  %45 = trunc i64 %44 to i8
  call void @llvm.lifetime.start(i64 8, i8* nonnull %35)
  store i64 %43, i64* %6, align 8
  %46 = getelementptr inbounds [8 x i8], [8 x i8]* %36, i64 0, i64 2
  store i8 %45, i8* %46, align 2
  %47 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %35)
  call void @llvm.lifetime.start(i64 8, i8* nonnull %37)
  store i64 %47, i64* %7, align 8
  %48 = getelementptr inbounds [8 x i8], [8 x i8]* %38, i64 0, i64 3
  store i8 %18, i8* %48, align 1
  %49 = load i64, i64* %7, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %37)
  %50 = getelementptr inbounds %struct.uint8v8_t, %struct.uint8v8_t* %9, i64 0, i32 0, i64 2
  %51 = load i8, i8* %50, align 2
  call void @llvm.lifetime.start(i64 8, i8* nonnull %35)
  store i64 %49, i64* %6, align 8
  %52 = getelementptr inbounds [8 x i8], [8 x i8]* %36, i64 0, i64 4
  store i8 %51, i8* %52, align 4
  %53 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %35)
  %54 = getelementptr inbounds %struct.uint8v4_t, %struct.uint8v4_t* %11, i64 0, i32 0, i64 2
  %55 = load i8, i8* %54, align 2
  call void @llvm.lifetime.start(i64 8, i8* nonnull %37)
  store i64 %53, i64* %7, align 8
  %56 = getelementptr inbounds [8 x i8], [8 x i8]* %38, i64 0, i64 5
  store i8 %55, i8* %56, align 1
  %57 = load i64, i64* %7, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %37)
  %58 = getelementptr inbounds %struct.uint8v8_t, %struct.uint8v8_t* %9, i64 0, i32 0, i64 3
  %59 = load i8, i8* %58, align 1
  call void @llvm.lifetime.start(i64 8, i8* nonnull %35)
  store i64 %57, i64* %6, align 8
  %60 = getelementptr inbounds [8 x i8], [8 x i8]* %36, i64 0, i64 6
  store i8 %59, i8* %60, align 2
  %61 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %35)
  %62 = getelementptr inbounds %struct.uint8v4_t, %struct.uint8v4_t* %11, i64 0, i32 0, i64 3
  %63 = load i8, i8* %62, align 1
  call void @llvm.lifetime.start(i64 8, i8* nonnull %37)
  store i64 %61, i64* %7, align 8
  %64 = getelementptr inbounds [8 x i8], [8 x i8]* %38, i64 0, i64 7
  store i8 %63, i8* %64, align 1
  %65 = load i64, i64* %7, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %37)
  %66 = lshr i64 %65, 8
  %67 = lshr i64 %65, 16
  %68 = lshr i64 %65, 24
  %69 = lshr i64 %65, 32
  %70 = lshr i64 %65, 40
  %71 = lshr i64 %65, 48
  %72 = lshr i64 %65, 56
  %73 = trunc i64 %65 to i8
  %74 = trunc i64 %66 to i8
  %75 = trunc i64 %67 to i8
  %76 = trunc i64 %68 to i8
  %77 = trunc i64 %69 to i8
  %78 = trunc i64 %70 to i8
  %79 = trunc i64 %71 to i8
  %80 = trunc i64 %72 to i8
  %81 = bitcast i64* %2 to [8 x i8]*
  %82 = bitcast i64* %2 to i8*
  store i8 %73, i8* %82, align 1
  %83 = getelementptr inbounds [8 x i8], [8 x i8]* %81, i64 0, i64 1
  store i8 %74, i8* %83, align 1
  %84 = getelementptr inbounds [8 x i8], [8 x i8]* %81, i64 0, i64 2
  store i8 %75, i8* %84, align 1
  %85 = getelementptr inbounds [8 x i8], [8 x i8]* %81, i64 0, i64 3
  store i8 %76, i8* %85, align 1
  %86 = getelementptr inbounds [8 x i8], [8 x i8]* %81, i64 0, i64 4
  store i8 %77, i8* %86, align 1
  %87 = getelementptr inbounds [8 x i8], [8 x i8]* %81, i64 0, i64 5
  store i8 %78, i8* %87, align 1
  %88 = getelementptr inbounds [8 x i8], [8 x i8]* %81, i64 0, i64 6
  store i8 %79, i8* %88, align 1
  %89 = getelementptr inbounds [8 x i8], [8 x i8]* %81, i64 0, i64 7
  store i8 %80, i8* %89, align 1
  call void @llvm.lifetime.end(i64 4, i8* nonnull %13) 
  call void @llvm.lifetime.end(i64 8, i8* nonnull %12) 
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L9PUNPCKLBWI4RVnWI7vec64_tE3RVnIS2_ES5_EEP6MemoryS7_R5StateT_T0_T1_(%struct.Memory* readnone returned, %struct.State* nocapture readnone dereferenceable(3376), i64* nocapture, i64, i64)  {
  %6 = alloca i64, align 8
  %7 = alloca i64, align 8
  %8 = alloca i64, align 8
  %9 = bitcast i64* %8 to %struct.uint8v8_t*
  %10 = alloca i64, align 8
  %11 = bitcast i64* %10 to %struct.uint8v8_t*
  %12 = bitcast i64* %8 to i8*
  call void @llvm.lifetime.start(i64 8, i8* nonnull %12) 
  store i64 %3, i64* %8, align 8
  %13 = bitcast i64* %10 to i8*
  call void @llvm.lifetime.start(i64 8, i8* nonnull %13) 
  store i64 %4, i64* %10, align 8
  %14 = bitcast i64* %6 to i8*
  %15 = bitcast i64* %6 to [8 x i8]*
  %16 = bitcast i64* %7 to i8*
  %17 = bitcast i64* %7 to [8 x i8]*
  %18 = trunc i64 %3 to i8
  call void @llvm.lifetime.start(i64 8, i8* nonnull %14)
  store i64 0, i64* %6, align 8
  %19 = bitcast i64* %6 to i8*
  store i8 %18, i8* %19, align 8
  %20 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %14)
  %21 = trunc i64 %4 to i8
  call void @llvm.lifetime.start(i64 8, i8* nonnull %16)
  store i64 %20, i64* %7, align 8
  %22 = getelementptr inbounds [8 x i8], [8 x i8]* %17, i64 0, i64 1
  store i8 %21, i8* %22, align 1
  %23 = load i64, i64* %7, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %16)
  %24 = lshr i64 %3, 8
  %25 = trunc i64 %24 to i8
  call void @llvm.lifetime.start(i64 8, i8* nonnull %14)
  store i64 %23, i64* %6, align 8
  %26 = getelementptr inbounds [8 x i8], [8 x i8]* %15, i64 0, i64 2
  store i8 %25, i8* %26, align 2
  %27 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %14)
  %28 = lshr i64 %4, 8
  %29 = trunc i64 %28 to i8
  call void @llvm.lifetime.start(i64 8, i8* nonnull %16)
  store i64 %27, i64* %7, align 8
  %30 = getelementptr inbounds [8 x i8], [8 x i8]* %17, i64 0, i64 3
  store i8 %29, i8* %30, align 1
  %31 = load i64, i64* %7, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %16)
  %32 = lshr i64 %3, 16
  %33 = trunc i64 %32 to i8
  call void @llvm.lifetime.start(i64 8, i8* nonnull %14)
  store i64 %31, i64* %6, align 8
  %34 = getelementptr inbounds [8 x i8], [8 x i8]* %15, i64 0, i64 4
  store i8 %33, i8* %34, align 4
  %35 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %14)
  %36 = getelementptr inbounds %struct.uint8v8_t, %struct.uint8v8_t* %11, i64 0, i32 0, i64 2
  %37 = load i8, i8* %36, align 2
  call void @llvm.lifetime.start(i64 8, i8* nonnull %16)
  store i64 %35, i64* %7, align 8
  %38 = getelementptr inbounds [8 x i8], [8 x i8]* %17, i64 0, i64 5
  store i8 %37, i8* %38, align 1
  %39 = load i64, i64* %7, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %16)
  %40 = getelementptr inbounds %struct.uint8v8_t, %struct.uint8v8_t* %9, i64 0, i32 0, i64 3
  %41 = load i8, i8* %40, align 1
  call void @llvm.lifetime.start(i64 8, i8* nonnull %14)
  store i64 %39, i64* %6, align 8
  %42 = getelementptr inbounds [8 x i8], [8 x i8]* %15, i64 0, i64 6
  store i8 %41, i8* %42, align 2
  %43 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %14)
  %44 = getelementptr inbounds %struct.uint8v8_t, %struct.uint8v8_t* %11, i64 0, i32 0, i64 3
  %45 = load i8, i8* %44, align 1
  call void @llvm.lifetime.start(i64 8, i8* nonnull %16)
  store i64 %43, i64* %7, align 8
  %46 = getelementptr inbounds [8 x i8], [8 x i8]* %17, i64 0, i64 7
  store i8 %45, i8* %46, align 1
  %47 = load i64, i64* %7, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %16)
  %48 = lshr i64 %47, 8
  %49 = lshr i64 %47, 16
  %50 = lshr i64 %47, 24
  %51 = lshr i64 %47, 32
  %52 = lshr i64 %47, 40
  %53 = lshr i64 %47, 48
  %54 = lshr i64 %47, 56
  %55 = trunc i64 %47 to i8
  %56 = trunc i64 %48 to i8
  %57 = trunc i64 %49 to i8
  %58 = trunc i64 %50 to i8
  %59 = trunc i64 %51 to i8
  %60 = trunc i64 %52 to i8
  %61 = trunc i64 %53 to i8
  %62 = trunc i64 %54 to i8
  %63 = bitcast i64* %2 to [8 x i8]*
  %64 = bitcast i64* %2 to i8*
  store i8 %55, i8* %64, align 1
  %65 = getelementptr inbounds [8 x i8], [8 x i8]* %63, i64 0, i64 1
  store i8 %56, i8* %65, align 1
  %66 = getelementptr inbounds [8 x i8], [8 x i8]* %63, i64 0, i64 2
  store i8 %57, i8* %66, align 1
  %67 = getelementptr inbounds [8 x i8], [8 x i8]* %63, i64 0, i64 3
  store i8 %58, i8* %67, align 1
  %68 = getelementptr inbounds [8 x i8], [8 x i8]* %63, i64 0, i64 4
  store i8 %59, i8* %68, align 1
  %69 = getelementptr inbounds [8 x i8], [8 x i8]* %63, i64 0, i64 5
  store i8 %60, i8* %69, align 1
  %70 = getelementptr inbounds [8 x i8], [8 x i8]* %63, i64 0, i64 6
  store i8 %61, i8* %70, align 1
  %71 = getelementptr inbounds [8 x i8], [8 x i8]* %63, i64 0, i64 7
  store i8 %62, i8* %71, align 1
  call void @llvm.lifetime.end(i64 8, i8* nonnull %13) 
  call void @llvm.lifetime.end(i64 8, i8* nonnull %12) 
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L9PUNPCKLBWI3VnWI8vec128_tE2VnIS2_E3MVnIS2_EEEP6MemoryS9_R5StateT_T0_T1_(%struct.Memory* returned, %struct.State* nocapture readnone dereferenceable(3376), i8* nocapture, i8* nocapture readonly, i64)  {
  %6 = alloca <2 x i64>, align 16
  %7 = bitcast <2 x i64>* %6 to { i64, i64 }*
  %8 = alloca { i64, i64 }, align 8
  %9 = alloca <2 x i64>, align 16
  %10 = bitcast <2 x i64>* %9 to %struct.uint8v16_t*
  %11 = alloca <2 x i64>, align 16
  %12 = bitcast <2 x i64>* %11 to %struct.uint8v16_t*
  %13 = bitcast <2 x i64>* %9 to i8*
  call void @llvm.lifetime.start(i64 16, i8* nonnull %13) 
  %14 = bitcast i8* %3 to <2 x i64>*
  %15 = load <2 x i64>, <2 x i64>* %14, align 1
  store <2 x i64> %15, <2 x i64>* %9, align 16
  %16 = bitcast <2 x i64>* %11 to i8*
  call void @llvm.lifetime.start(i64 16, i8* nonnull %16) 
  %17 = inttoptr i64 %4 to i8*
  %18 = load i8, i8* %17
  %19 = add i64 %4, 1
  %20 = inttoptr i64 %19 to i8*
  %21 = load i8, i8* %20
  %22 = add i64 %4, 2
  %23 = inttoptr i64 %22 to i8*
  %24 = load i8, i8* %23
  %25 = add i64 %4, 3
  %26 = inttoptr i64 %25 to i8*
  %27 = load i8, i8* %26
  %28 = add i64 %4, 4
  %29 = inttoptr i64 %28 to i8*
  %30 = load i8, i8* %29
  %31 = add i64 %4, 5
  %32 = inttoptr i64 %31 to i8*
  %33 = load i8, i8* %32
  %34 = add i64 %4, 6
  %35 = inttoptr i64 %34 to i8*
  %36 = load i8, i8* %35
  %37 = add i64 %4, 7
  %38 = inttoptr i64 %37 to i8*
  %39 = load i8, i8* %38
  %40 = add i64 %4, 8
  %41 = inttoptr i64 %40 to i8*
  %42 = load i8, i8* %41
  %43 = add i64 %4, 9
  %44 = inttoptr i64 %43 to i8*
  %45 = load i8, i8* %44
  %46 = add i64 %4, 10
  %47 = inttoptr i64 %46 to i8*
  %48 = load i8, i8* %47
  %49 = add i64 %4, 11
  %50 = inttoptr i64 %49 to i8*
  %51 = load i8, i8* %50
  %52 = add i64 %4, 12
  %53 = inttoptr i64 %52 to i8*
  %54 = load i8, i8* %53
  %55 = add i64 %4, 13
  %56 = inttoptr i64 %55 to i8*
  %57 = load i8, i8* %56
  %58 = add i64 %4, 14
  %59 = inttoptr i64 %58 to i8*
  %60 = load i8, i8* %59
  %61 = add i64 %4, 15
  %62 = inttoptr i64 %61 to i8*
  %63 = load i8, i8* %62
  %64 = insertelement <2 x i8> undef, i8 %39, i32 0
  %65 = insertelement <2 x i8> %64, i8 %63, i32 1
  %66 = zext <2 x i8> %65 to <2 x i64>
  %67 = shl nuw <2 x i64> %66, <i64 56, i64 56>
  %68 = insertelement <2 x i8> undef, i8 %36, i32 0
  %69 = insertelement <2 x i8> %68, i8 %60, i32 1
  %70 = zext <2 x i8> %69 to <2 x i64>
  %71 = shl nuw nsw <2 x i64> %70, <i64 48, i64 48>
  %72 = insertelement <2 x i8> undef, i8 %33, i32 0
  %73 = insertelement <2 x i8> %72, i8 %57, i32 1
  %74 = zext <2 x i8> %73 to <2 x i64>
  %75 = shl nuw nsw <2 x i64> %74, <i64 40, i64 40>
  %76 = insertelement <2 x i8> undef, i8 %30, i32 0
  %77 = insertelement <2 x i8> %76, i8 %54, i32 1
  %78 = zext <2 x i8> %77 to <2 x i64>
  %79 = shl nuw nsw <2 x i64> %78, <i64 32, i64 32>
  %80 = insertelement <2 x i8> undef, i8 %27, i32 0
  %81 = insertelement <2 x i8> %80, i8 %51, i32 1
  %82 = zext <2 x i8> %81 to <2 x i64>
  %83 = shl nuw nsw <2 x i64> %82, <i64 24, i64 24>
  %84 = insertelement <2 x i8> undef, i8 %24, i32 0
  %85 = insertelement <2 x i8> %84, i8 %48, i32 1
  %86 = zext <2 x i8> %85 to <2 x i64>
  %87 = shl nuw nsw <2 x i64> %86, <i64 16, i64 16>
  %88 = insertelement <2 x i8> undef, i8 %21, i32 0
  %89 = insertelement <2 x i8> %88, i8 %45, i32 1
  %90 = zext <2 x i8> %89 to <2 x i64>
  %91 = shl nuw nsw <2 x i64> %90, <i64 8, i64 8>
  %92 = insertelement <2 x i8> undef, i8 %18, i32 0
  %93 = insertelement <2 x i8> %92, i8 %42, i32 1
  %94 = zext <2 x i8> %93 to <2 x i64>
  %95 = or <2 x i64> %91, %94
  %96 = or <2 x i64> %95, %87
  %97 = or <2 x i64> %96, %83
  %98 = or <2 x i64> %97, %79
  %99 = or <2 x i64> %98, %75
  %100 = or <2 x i64> %99, %71
  %101 = or <2 x i64> %100, %67
  store <2 x i64> %101, <2 x i64>* %11, align 16
  %102 = bitcast <2 x i64>* %6 to i8*
  %103 = getelementptr inbounds <2 x i64>, <2 x i64>* %6, i64 0, i64 0
  %104 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %7, i64 0, i32 1
  %105 = bitcast <2 x i64>* %6 to [16 x i8]*
  %106 = bitcast { i64, i64 }* %8 to i8*
  %107 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %8, i64 0, i32 0
  %108 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %8, i64 0, i32 1
  %109 = bitcast { i64, i64 }* %8 to [16 x i8]*
  %110 = extractelement <2 x i64> %15, i32 0
  %111 = trunc i64 %110 to i8
  call void @llvm.lifetime.start(i64 16, i8* nonnull %102)
  store <2 x i64> zeroinitializer, <2 x i64>* %6, align 16
  %112 = bitcast <2 x i64>* %6 to i8*
  store i8 %111, i8* %112, align 16
  %113 = load i64, i64* %103, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %102)
  call void @llvm.lifetime.start(i64 16, i8* nonnull %106)
  store i64 %113, i64* %107, align 8
  store i64 0, i64* %108, align 8
  %114 = getelementptr inbounds [16 x i8], [16 x i8]* %109, i64 0, i64 1
  store i8 %18, i8* %114, align 1
  %115 = load i64, i64* %107, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %106)
  %116 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %10, i64 0, i32 0, i64 1
  %117 = load i8, i8* %116, align 1
  call void @llvm.lifetime.start(i64 16, i8* nonnull %102)
  store i64 %115, i64* %103, align 16
  store i64 0, i64* %104, align 8
  %118 = getelementptr inbounds [16 x i8], [16 x i8]* %105, i64 0, i64 2
  store i8 %117, i8* %118, align 2
  %119 = load i64, i64* %103, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %102)
  call void @llvm.lifetime.start(i64 16, i8* nonnull %106)
  store i64 %119, i64* %107, align 8
  store i64 0, i64* %108, align 8
  %120 = getelementptr inbounds [16 x i8], [16 x i8]* %109, i64 0, i64 3
  store i8 %21, i8* %120, align 1
  %121 = load i64, i64* %107, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %106)
  %122 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %10, i64 0, i32 0, i64 2
  %123 = load i8, i8* %122, align 2
  call void @llvm.lifetime.start(i64 16, i8* nonnull %102)
  store i64 %121, i64* %103, align 16
  store i64 0, i64* %104, align 8
  %124 = getelementptr inbounds [16 x i8], [16 x i8]* %105, i64 0, i64 4
  store i8 %123, i8* %124, align 4
  %125 = load i64, i64* %103, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %102)
  %126 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %12, i64 0, i32 0, i64 2
  %127 = load i8, i8* %126, align 2
  call void @llvm.lifetime.start(i64 16, i8* nonnull %106)
  store i64 %125, i64* %107, align 8
  store i64 0, i64* %108, align 8
  %128 = getelementptr inbounds [16 x i8], [16 x i8]* %109, i64 0, i64 5
  store i8 %127, i8* %128, align 1
  %129 = load i64, i64* %107, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %106)
  %130 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %10, i64 0, i32 0, i64 3
  %131 = load i8, i8* %130, align 1
  call void @llvm.lifetime.start(i64 16, i8* nonnull %102)
  store i64 %129, i64* %103, align 16
  store i64 0, i64* %104, align 8
  %132 = getelementptr inbounds [16 x i8], [16 x i8]* %105, i64 0, i64 6
  store i8 %131, i8* %132, align 2
  %133 = load i64, i64* %103, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %102)
  %134 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %12, i64 0, i32 0, i64 3
  %135 = load i8, i8* %134, align 1
  call void @llvm.lifetime.start(i64 16, i8* nonnull %106)
  store i64 %133, i64* %107, align 8
  store i64 0, i64* %108, align 8
  %136 = getelementptr inbounds [16 x i8], [16 x i8]* %109, i64 0, i64 7
  store i8 %135, i8* %136, align 1
  %137 = load i64, i64* %107, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %106)
  %138 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %10, i64 0, i32 0, i64 4
  %139 = load i8, i8* %138, align 4
  call void @llvm.lifetime.start(i64 16, i8* nonnull %102)
  store i64 %137, i64* %103, align 16
  store i64 0, i64* %104, align 8
  %140 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %7, i64 0, i32 1
  %141 = bitcast i64* %140 to i8*
  store i8 %139, i8* %141, align 8
  %142 = load i64, i64* %104, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %102)
  %143 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %12, i64 0, i32 0, i64 4
  %144 = load i8, i8* %143, align 4
  call void @llvm.lifetime.start(i64 16, i8* nonnull %106)
  store i64 %137, i64* %107, align 8
  store i64 %142, i64* %108, align 8
  %145 = getelementptr inbounds [16 x i8], [16 x i8]* %109, i64 0, i64 9
  store i8 %144, i8* %145, align 1
  %146 = load i64, i64* %108, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %106)
  %147 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %10, i64 0, i32 0, i64 5
  %148 = load i8, i8* %147, align 1
  call void @llvm.lifetime.start(i64 16, i8* nonnull %102)
  store i64 %137, i64* %103, align 16
  store i64 %146, i64* %104, align 8
  %149 = getelementptr inbounds [16 x i8], [16 x i8]* %105, i64 0, i64 10
  store i8 %148, i8* %149, align 2
  %150 = load i64, i64* %104, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %102)
  %151 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %12, i64 0, i32 0, i64 5
  %152 = load i8, i8* %151, align 1
  call void @llvm.lifetime.start(i64 16, i8* nonnull %106)
  store i64 %137, i64* %107, align 8
  store i64 %150, i64* %108, align 8
  %153 = getelementptr inbounds [16 x i8], [16 x i8]* %109, i64 0, i64 11
  store i8 %152, i8* %153, align 1
  %154 = load i64, i64* %108, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %106)
  %155 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %10, i64 0, i32 0, i64 6
  %156 = load i8, i8* %155, align 2
  call void @llvm.lifetime.start(i64 16, i8* nonnull %102)
  store i64 %137, i64* %103, align 16
  store i64 %154, i64* %104, align 8
  %157 = getelementptr inbounds [16 x i8], [16 x i8]* %105, i64 0, i64 12
  store i8 %156, i8* %157, align 4
  %158 = load i64, i64* %104, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %102)
  %159 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %12, i64 0, i32 0, i64 6
  %160 = load i8, i8* %159, align 2
  call void @llvm.lifetime.start(i64 16, i8* nonnull %106)
  store i64 %137, i64* %107, align 8
  store i64 %158, i64* %108, align 8
  %161 = getelementptr inbounds [16 x i8], [16 x i8]* %109, i64 0, i64 13
  store i8 %160, i8* %161, align 1
  %162 = load i64, i64* %108, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %106)
  %163 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %10, i64 0, i32 0, i64 7
  %164 = load i8, i8* %163, align 1
  call void @llvm.lifetime.start(i64 16, i8* nonnull %102)
  store i64 %137, i64* %103, align 16
  store i64 %162, i64* %104, align 8
  %165 = getelementptr inbounds [16 x i8], [16 x i8]* %105, i64 0, i64 14
  store i8 %164, i8* %165, align 2
  %166 = load i64, i64* %104, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %102)
  %167 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %12, i64 0, i32 0, i64 7
  %168 = load i8, i8* %167, align 1
  call void @llvm.lifetime.start(i64 16, i8* nonnull %106)
  store i64 %137, i64* %107, align 8
  store i64 %166, i64* %108, align 8
  %169 = getelementptr inbounds [16 x i8], [16 x i8]* %109, i64 0, i64 15
  store i8 %168, i8* %169, align 1
  %170 = load i64, i64* %108, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %106)
  %171 = lshr i64 %137, 8
  %172 = lshr i64 %137, 16
  %173 = lshr i64 %137, 24
  %174 = lshr i64 %137, 32
  %175 = lshr i64 %137, 40
  %176 = lshr i64 %137, 48
  %177 = lshr i64 %137, 56
  %178 = trunc i64 %137 to i8
  %179 = trunc i64 %171 to i8
  %180 = trunc i64 %172 to i8
  %181 = trunc i64 %173 to i8
  %182 = trunc i64 %174 to i8
  %183 = trunc i64 %175 to i8
  %184 = trunc i64 %176 to i8
  %185 = trunc i64 %177 to i8
  store i8 %178, i8* %2, align 1
  %186 = getelementptr inbounds i8, i8* %2, i64 1
  store i8 %179, i8* %186, align 1
  %187 = getelementptr inbounds i8, i8* %2, i64 2
  store i8 %180, i8* %187, align 1
  %188 = getelementptr inbounds i8, i8* %2, i64 3
  store i8 %181, i8* %188, align 1
  %189 = getelementptr inbounds i8, i8* %2, i64 4
  store i8 %182, i8* %189, align 1
  %190 = getelementptr inbounds i8, i8* %2, i64 5
  store i8 %183, i8* %190, align 1
  %191 = getelementptr inbounds i8, i8* %2, i64 6
  store i8 %184, i8* %191, align 1
  %192 = getelementptr inbounds i8, i8* %2, i64 7
  store i8 %185, i8* %192, align 1
  %193 = trunc i64 %170 to i8
  %194 = getelementptr inbounds i8, i8* %2, i64 8
  store i8 %193, i8* %194, align 1
  %195 = lshr i64 %170, 8
  %196 = trunc i64 %195 to i8
  %197 = getelementptr inbounds i8, i8* %2, i64 9
  store i8 %196, i8* %197, align 1
  %198 = lshr i64 %170, 16
  %199 = trunc i64 %198 to i8
  %200 = getelementptr inbounds i8, i8* %2, i64 10
  store i8 %199, i8* %200, align 1
  %201 = lshr i64 %170, 24
  %202 = trunc i64 %201 to i8
  %203 = getelementptr inbounds i8, i8* %2, i64 11
  store i8 %202, i8* %203, align 1
  %204 = lshr i64 %170, 32
  %205 = trunc i64 %204 to i8
  %206 = getelementptr inbounds i8, i8* %2, i64 12
  store i8 %205, i8* %206, align 1
  %207 = lshr i64 %170, 40
  %208 = trunc i64 %207 to i8
  %209 = getelementptr inbounds i8, i8* %2, i64 13
  store i8 %208, i8* %209, align 1
  %210 = lshr i64 %170, 48
  %211 = trunc i64 %210 to i8
  %212 = getelementptr inbounds i8, i8* %2, i64 14
  store i8 %211, i8* %212, align 1
  %213 = lshr i64 %170, 56
  %214 = trunc i64 %213 to i8
  %215 = getelementptr inbounds i8, i8* %2, i64 15
  store i8 %214, i8* %215, align 1
  call void @llvm.lifetime.end(i64 16, i8* nonnull %16) 
  call void @llvm.lifetime.end(i64 16, i8* nonnull %13) 
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L9PUNPCKLBWI3VnWI8vec128_tE2VnIS2_ES5_EEP6MemoryS7_R5StateT_T0_T1_(%struct.Memory* readnone returned, %struct.State* nocapture readnone dereferenceable(3376), i8* nocapture, i8* nocapture readonly, i8* nocapture readonly)  {
  %6 = alloca <2 x i64>, align 16
  %7 = bitcast <2 x i64>* %6 to { i64, i64 }*
  %8 = alloca { i64, i64 }, align 8
  %9 = alloca <2 x i64>, align 16
  %10 = bitcast <2 x i64>* %9 to %struct.uint8v16_t*
  %11 = alloca <2 x i64>, align 16
  %12 = bitcast <2 x i64>* %11 to %struct.uint8v16_t*
  %13 = bitcast <2 x i64>* %9 to i8*
  call void @llvm.lifetime.start(i64 16, i8* nonnull %13) 
  %14 = bitcast i8* %3 to <2 x i64>*
  %15 = load <2 x i64>, <2 x i64>* %14, align 1
  store <2 x i64> %15, <2 x i64>* %9, align 16
  %16 = bitcast <2 x i64>* %11 to i8*
  call void @llvm.lifetime.start(i64 16, i8* nonnull %16) 
  %17 = bitcast i8* %4 to <2 x i64>*
  %18 = load <2 x i64>, <2 x i64>* %17, align 1
  store <2 x i64> %18, <2 x i64>* %11, align 16
  %19 = bitcast <2 x i64>* %6 to i8*
  %20 = getelementptr inbounds <2 x i64>, <2 x i64>* %6, i64 0, i64 0
  %21 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %7, i64 0, i32 1
  %22 = bitcast <2 x i64>* %6 to [16 x i8]*
  %23 = bitcast { i64, i64 }* %8 to i8*
  %24 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %8, i64 0, i32 0
  %25 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %8, i64 0, i32 1
  %26 = bitcast { i64, i64 }* %8 to [16 x i8]*
  %27 = extractelement <2 x i64> %15, i32 0
  %28 = trunc i64 %27 to i8
  call void @llvm.lifetime.start(i64 16, i8* nonnull %19)
  store <2 x i64> zeroinitializer, <2 x i64>* %6, align 16
  %29 = bitcast <2 x i64>* %6 to i8*
  store i8 %28, i8* %29, align 16
  %30 = load i64, i64* %20, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %19)
  %31 = extractelement <2 x i64> %18, i32 0
  %32 = trunc i64 %31 to i8
  call void @llvm.lifetime.start(i64 16, i8* nonnull %23)
  store i64 %30, i64* %24, align 8
  store i64 0, i64* %25, align 8
  %33 = getelementptr inbounds [16 x i8], [16 x i8]* %26, i64 0, i64 1
  store i8 %32, i8* %33, align 1
  %34 = load i64, i64* %24, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %23)
  %35 = lshr i64 %27, 8
  %36 = trunc i64 %35 to i8
  call void @llvm.lifetime.start(i64 16, i8* nonnull %19)
  store i64 %34, i64* %20, align 16
  store i64 0, i64* %21, align 8
  %37 = getelementptr inbounds [16 x i8], [16 x i8]* %22, i64 0, i64 2
  store i8 %36, i8* %37, align 2
  %38 = load i64, i64* %20, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %19)
  %39 = lshr i64 %31, 8
  %40 = trunc i64 %39 to i8
  call void @llvm.lifetime.start(i64 16, i8* nonnull %23)
  store i64 %38, i64* %24, align 8
  store i64 0, i64* %25, align 8
  %41 = getelementptr inbounds [16 x i8], [16 x i8]* %26, i64 0, i64 3
  store i8 %40, i8* %41, align 1
  %42 = load i64, i64* %24, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %23)
  %43 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %10, i64 0, i32 0, i64 2
  %44 = load i8, i8* %43, align 2
  call void @llvm.lifetime.start(i64 16, i8* nonnull %19)
  store i64 %42, i64* %20, align 16
  store i64 0, i64* %21, align 8
  %45 = getelementptr inbounds [16 x i8], [16 x i8]* %22, i64 0, i64 4
  store i8 %44, i8* %45, align 4
  %46 = load i64, i64* %20, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %19)
  %47 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %12, i64 0, i32 0, i64 2
  %48 = load i8, i8* %47, align 2
  call void @llvm.lifetime.start(i64 16, i8* nonnull %23)
  store i64 %46, i64* %24, align 8
  store i64 0, i64* %25, align 8
  %49 = getelementptr inbounds [16 x i8], [16 x i8]* %26, i64 0, i64 5
  store i8 %48, i8* %49, align 1
  %50 = load i64, i64* %24, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %23)
  %51 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %10, i64 0, i32 0, i64 3
  %52 = load i8, i8* %51, align 1
  call void @llvm.lifetime.start(i64 16, i8* nonnull %19)
  store i64 %50, i64* %20, align 16
  store i64 0, i64* %21, align 8
  %53 = getelementptr inbounds [16 x i8], [16 x i8]* %22, i64 0, i64 6
  store i8 %52, i8* %53, align 2
  %54 = load i64, i64* %20, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %19)
  %55 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %12, i64 0, i32 0, i64 3
  %56 = load i8, i8* %55, align 1
  call void @llvm.lifetime.start(i64 16, i8* nonnull %23)
  store i64 %54, i64* %24, align 8
  store i64 0, i64* %25, align 8
  %57 = getelementptr inbounds [16 x i8], [16 x i8]* %26, i64 0, i64 7
  store i8 %56, i8* %57, align 1
  %58 = load i64, i64* %24, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %23)
  %59 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %10, i64 0, i32 0, i64 4
  %60 = load i8, i8* %59, align 4
  call void @llvm.lifetime.start(i64 16, i8* nonnull %19)
  store i64 %58, i64* %20, align 16
  store i64 0, i64* %21, align 8
  %61 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %7, i64 0, i32 1
  %62 = bitcast i64* %61 to i8*
  store i8 %60, i8* %62, align 8
  %63 = load i64, i64* %21, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %19)
  %64 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %12, i64 0, i32 0, i64 4
  %65 = load i8, i8* %64, align 4
  call void @llvm.lifetime.start(i64 16, i8* nonnull %23)
  store i64 %58, i64* %24, align 8
  store i64 %63, i64* %25, align 8
  %66 = getelementptr inbounds [16 x i8], [16 x i8]* %26, i64 0, i64 9
  store i8 %65, i8* %66, align 1
  %67 = load i64, i64* %25, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %23)
  %68 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %10, i64 0, i32 0, i64 5
  %69 = load i8, i8* %68, align 1
  call void @llvm.lifetime.start(i64 16, i8* nonnull %19)
  store i64 %58, i64* %20, align 16
  store i64 %67, i64* %21, align 8
  %70 = getelementptr inbounds [16 x i8], [16 x i8]* %22, i64 0, i64 10
  store i8 %69, i8* %70, align 2
  %71 = load i64, i64* %21, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %19)
  %72 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %12, i64 0, i32 0, i64 5
  %73 = load i8, i8* %72, align 1
  call void @llvm.lifetime.start(i64 16, i8* nonnull %23)
  store i64 %58, i64* %24, align 8
  store i64 %71, i64* %25, align 8
  %74 = getelementptr inbounds [16 x i8], [16 x i8]* %26, i64 0, i64 11
  store i8 %73, i8* %74, align 1
  %75 = load i64, i64* %25, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %23)
  %76 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %10, i64 0, i32 0, i64 6
  %77 = load i8, i8* %76, align 2
  call void @llvm.lifetime.start(i64 16, i8* nonnull %19)
  store i64 %58, i64* %20, align 16
  store i64 %75, i64* %21, align 8
  %78 = getelementptr inbounds [16 x i8], [16 x i8]* %22, i64 0, i64 12
  store i8 %77, i8* %78, align 4
  %79 = load i64, i64* %21, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %19)
  %80 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %12, i64 0, i32 0, i64 6
  %81 = load i8, i8* %80, align 2
  call void @llvm.lifetime.start(i64 16, i8* nonnull %23)
  store i64 %58, i64* %24, align 8
  store i64 %79, i64* %25, align 8
  %82 = getelementptr inbounds [16 x i8], [16 x i8]* %26, i64 0, i64 13
  store i8 %81, i8* %82, align 1
  %83 = load i64, i64* %25, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %23)
  %84 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %10, i64 0, i32 0, i64 7
  %85 = load i8, i8* %84, align 1
  call void @llvm.lifetime.start(i64 16, i8* nonnull %19)
  store i64 %58, i64* %20, align 16
  store i64 %83, i64* %21, align 8
  %86 = getelementptr inbounds [16 x i8], [16 x i8]* %22, i64 0, i64 14
  store i8 %85, i8* %86, align 2
  %87 = load i64, i64* %21, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %19)
  %88 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %12, i64 0, i32 0, i64 7
  %89 = load i8, i8* %88, align 1
  call void @llvm.lifetime.start(i64 16, i8* nonnull %23)
  store i64 %58, i64* %24, align 8
  store i64 %87, i64* %25, align 8
  %90 = getelementptr inbounds [16 x i8], [16 x i8]* %26, i64 0, i64 15
  store i8 %89, i8* %90, align 1
  %91 = load i64, i64* %25, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %23)
  %92 = lshr i64 %58, 8
  %93 = lshr i64 %58, 16
  %94 = lshr i64 %58, 24
  %95 = lshr i64 %58, 32
  %96 = lshr i64 %58, 40
  %97 = lshr i64 %58, 48
  %98 = lshr i64 %58, 56
  %99 = trunc i64 %58 to i8
  %100 = trunc i64 %92 to i8
  %101 = trunc i64 %93 to i8
  %102 = trunc i64 %94 to i8
  %103 = trunc i64 %95 to i8
  %104 = trunc i64 %96 to i8
  %105 = trunc i64 %97 to i8
  %106 = trunc i64 %98 to i8
  store i8 %99, i8* %2, align 1
  %107 = getelementptr inbounds i8, i8* %2, i64 1
  store i8 %100, i8* %107, align 1
  %108 = getelementptr inbounds i8, i8* %2, i64 2
  store i8 %101, i8* %108, align 1
  %109 = getelementptr inbounds i8, i8* %2, i64 3
  store i8 %102, i8* %109, align 1
  %110 = getelementptr inbounds i8, i8* %2, i64 4
  store i8 %103, i8* %110, align 1
  %111 = getelementptr inbounds i8, i8* %2, i64 5
  store i8 %104, i8* %111, align 1
  %112 = getelementptr inbounds i8, i8* %2, i64 6
  store i8 %105, i8* %112, align 1
  %113 = getelementptr inbounds i8, i8* %2, i64 7
  store i8 %106, i8* %113, align 1
  %114 = trunc i64 %91 to i8
  %115 = getelementptr inbounds i8, i8* %2, i64 8
  store i8 %114, i8* %115, align 1
  %116 = lshr i64 %91, 8
  %117 = trunc i64 %116 to i8
  %118 = getelementptr inbounds i8, i8* %2, i64 9
  store i8 %117, i8* %118, align 1
  %119 = lshr i64 %91, 16
  %120 = trunc i64 %119 to i8
  %121 = getelementptr inbounds i8, i8* %2, i64 10
  store i8 %120, i8* %121, align 1
  %122 = lshr i64 %91, 24
  %123 = trunc i64 %122 to i8
  %124 = getelementptr inbounds i8, i8* %2, i64 11
  store i8 %123, i8* %124, align 1
  %125 = lshr i64 %91, 32
  %126 = trunc i64 %125 to i8
  %127 = getelementptr inbounds i8, i8* %2, i64 12
  store i8 %126, i8* %127, align 1
  %128 = lshr i64 %91, 40
  %129 = trunc i64 %128 to i8
  %130 = getelementptr inbounds i8, i8* %2, i64 13
  store i8 %129, i8* %130, align 1
  %131 = lshr i64 %91, 48
  %132 = trunc i64 %131 to i8
  %133 = getelementptr inbounds i8, i8* %2, i64 14
  store i8 %132, i8* %133, align 1
  %134 = lshr i64 %91, 56
  %135 = trunc i64 %134 to i8
  %136 = getelementptr inbounds i8, i8* %2, i64 15
  store i8 %135, i8* %136, align 1
  call void @llvm.lifetime.end(i64 16, i8* nonnull %16) 
  call void @llvm.lifetime.end(i64 16, i8* nonnull %13) 
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L9PUNPCKLWDI4RVnWI7vec64_tE3RVnIS2_E3MVnI7vec32_tEEEP6MemorySA_R5StateT_T0_T1_(%struct.Memory* returned, %struct.State* nocapture readnone dereferenceable(3376), i64* nocapture, i64, i64)  {
  %6 = alloca i64, align 8
  %7 = alloca i64, align 8
  %8 = inttoptr i64 %4 to i16*
  %9 = load i16, i16* %8
  %10 = add i64 %4, 2
  %11 = inttoptr i64 %10 to i16*
  %12 = load i16, i16* %11
  %13 = bitcast i64* %6 to i8*
  %14 = bitcast i64* %6 to [4 x i16]*
  %15 = bitcast i64* %7 to i8*
  %16 = bitcast i64* %7 to [4 x i16]*
  %17 = trunc i64 %3 to i16
  call void @llvm.lifetime.start(i64 8, i8* nonnull %13)
  store i64 0, i64* %6, align 8
  %18 = bitcast i64* %6 to i16*
  store i16 %17, i16* %18, align 8
  %19 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %13)
  call void @llvm.lifetime.start(i64 8, i8* nonnull %15)
  store i64 %19, i64* %7, align 8
  %20 = getelementptr inbounds [4 x i16], [4 x i16]* %16, i64 0, i64 1
  store i16 %9, i16* %20, align 2
  %21 = load i64, i64* %7, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %15)
  %22 = lshr i64 %3, 16
  %23 = trunc i64 %22 to i16
  call void @llvm.lifetime.start(i64 8, i8* nonnull %13)
  store i64 %21, i64* %6, align 8
  %24 = getelementptr inbounds [4 x i16], [4 x i16]* %14, i64 0, i64 2
  store i16 %23, i16* %24, align 4
  %25 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %13)
  call void @llvm.lifetime.start(i64 8, i8* nonnull %15)
  store i64 %25, i64* %7, align 8
  %26 = getelementptr inbounds [4 x i16], [4 x i16]* %16, i64 0, i64 3
  store i16 %12, i16* %26, align 2
  %27 = load i64, i64* %7, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %15)
  %28 = lshr i64 %27, 16
  %29 = lshr i64 %27, 32
  %30 = lshr i64 %27, 48
  %31 = trunc i64 %27 to i16
  %32 = trunc i64 %28 to i16
  %33 = trunc i64 %29 to i16
  %34 = trunc i64 %30 to i16
  %35 = bitcast i64* %2 to [4 x i16]*
  %36 = bitcast i64* %2 to i16*
  store i16 %31, i16* %36, align 1
  %37 = getelementptr inbounds [4 x i16], [4 x i16]* %35, i64 0, i64 1
  store i16 %32, i16* %37, align 1
  %38 = getelementptr inbounds [4 x i16], [4 x i16]* %35, i64 0, i64 2
  store i16 %33, i16* %38, align 1
  %39 = getelementptr inbounds [4 x i16], [4 x i16]* %35, i64 0, i64 3
  store i16 %34, i16* %39, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L9PUNPCKLWDI4RVnWI7vec64_tE3RVnIS2_ES5_EEP6MemoryS7_R5StateT_T0_T1_(%struct.Memory* readnone returned, %struct.State* nocapture readnone dereferenceable(3376), i64* nocapture, i64, i64)  {
  %6 = alloca i64, align 8
  %7 = alloca i64, align 8
  %8 = bitcast i64* %6 to i8*
  %9 = bitcast i64* %6 to [4 x i16]*
  %10 = bitcast i64* %7 to i8*
  %11 = bitcast i64* %7 to [4 x i16]*
  %12 = trunc i64 %3 to i16
  call void @llvm.lifetime.start(i64 8, i8* nonnull %8)
  store i64 0, i64* %6, align 8
  %13 = bitcast i64* %6 to i16*
  store i16 %12, i16* %13, align 8
  %14 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %8)
  %15 = trunc i64 %4 to i16
  call void @llvm.lifetime.start(i64 8, i8* nonnull %10)
  store i64 %14, i64* %7, align 8
  %16 = getelementptr inbounds [4 x i16], [4 x i16]* %11, i64 0, i64 1
  store i16 %15, i16* %16, align 2
  %17 = load i64, i64* %7, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %10)
  %18 = lshr i64 %3, 16
  %19 = trunc i64 %18 to i16
  call void @llvm.lifetime.start(i64 8, i8* nonnull %8)
  store i64 %17, i64* %6, align 8
  %20 = getelementptr inbounds [4 x i16], [4 x i16]* %9, i64 0, i64 2
  store i16 %19, i16* %20, align 4
  %21 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %8)
  %22 = lshr i64 %4, 16
  %23 = trunc i64 %22 to i16
  call void @llvm.lifetime.start(i64 8, i8* nonnull %10)
  store i64 %21, i64* %7, align 8
  %24 = getelementptr inbounds [4 x i16], [4 x i16]* %11, i64 0, i64 3
  store i16 %23, i16* %24, align 2
  %25 = load i64, i64* %7, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %10)
  %26 = lshr i64 %25, 16
  %27 = lshr i64 %25, 32
  %28 = lshr i64 %25, 48
  %29 = trunc i64 %25 to i16
  %30 = trunc i64 %26 to i16
  %31 = trunc i64 %27 to i16
  %32 = trunc i64 %28 to i16
  %33 = bitcast i64* %2 to [4 x i16]*
  %34 = bitcast i64* %2 to i16*
  store i16 %29, i16* %34, align 1
  %35 = getelementptr inbounds [4 x i16], [4 x i16]* %33, i64 0, i64 1
  store i16 %30, i16* %35, align 1
  %36 = getelementptr inbounds [4 x i16], [4 x i16]* %33, i64 0, i64 2
  store i16 %31, i16* %36, align 1
  %37 = getelementptr inbounds [4 x i16], [4 x i16]* %33, i64 0, i64 3
  store i16 %32, i16* %37, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L9PUNPCKLWDI3VnWI8vec128_tE2VnIS2_E3MVnIS2_EEEP6MemoryS9_R5StateT_T0_T1_(%struct.Memory* returned, %struct.State* nocapture readnone dereferenceable(3376), i8* nocapture, i8* nocapture readonly, i64)  {
  %6 = alloca <2 x i64>, align 16
  %7 = bitcast <2 x i64>* %6 to { i64, i64 }*
  %8 = alloca { i64, i64 }, align 8
  %9 = alloca <2 x i64>, align 16
  %10 = bitcast <2 x i64>* %9 to %struct.uint16v8_t*
  %11 = alloca <2 x i64>, align 16
  %12 = bitcast <2 x i64>* %11 to %struct.uint16v8_t*
  %13 = bitcast <2 x i64>* %9 to i8*
  call void @llvm.lifetime.start(i64 16, i8* nonnull %13) 
  %14 = bitcast i8* %3 to <2 x i64>*
  %15 = load <2 x i64>, <2 x i64>* %14, align 1
  store <2 x i64> %15, <2 x i64>* %9, align 16
  %16 = bitcast <2 x i64>* %11 to i8*
  call void @llvm.lifetime.start(i64 16, i8* nonnull %16) 
  %17 = inttoptr i64 %4 to i16*
  %18 = load i16, i16* %17
  %19 = add i64 %4, 2
  %20 = inttoptr i64 %19 to i16*
  %21 = load i16, i16* %20
  %22 = add i64 %4, 4
  %23 = inttoptr i64 %22 to i16*
  %24 = load i16, i16* %23
  %25 = add i64 %4, 6
  %26 = inttoptr i64 %25 to i16*
  %27 = load i16, i16* %26
  %28 = add i64 %4, 8
  %29 = inttoptr i64 %28 to i16*
  %30 = load i16, i16* %29
  %31 = add i64 %4, 10
  %32 = inttoptr i64 %31 to i16*
  %33 = load i16, i16* %32
  %34 = add i64 %4, 12
  %35 = inttoptr i64 %34 to i16*
  %36 = load i16, i16* %35
  %37 = add i64 %4, 14
  %38 = inttoptr i64 %37 to i16*
  %39 = load i16, i16* %38
  %40 = insertelement <2 x i16> undef, i16 %27, i32 0
  %41 = insertelement <2 x i16> %40, i16 %39, i32 1
  %42 = zext <2 x i16> %41 to <2 x i64>
  %43 = shl nuw <2 x i64> %42, <i64 48, i64 48>
  %44 = insertelement <2 x i16> undef, i16 %24, i32 0
  %45 = insertelement <2 x i16> %44, i16 %36, i32 1
  %46 = zext <2 x i16> %45 to <2 x i64>
  %47 = shl nuw nsw <2 x i64> %46, <i64 32, i64 32>
  %48 = insertelement <2 x i16> undef, i16 %21, i32 0
  %49 = insertelement <2 x i16> %48, i16 %33, i32 1
  %50 = zext <2 x i16> %49 to <2 x i64>
  %51 = shl nuw nsw <2 x i64> %50, <i64 16, i64 16>
  %52 = insertelement <2 x i16> undef, i16 %18, i32 0
  %53 = insertelement <2 x i16> %52, i16 %30, i32 1
  %54 = zext <2 x i16> %53 to <2 x i64>
  %55 = or <2 x i64> %51, %54
  %56 = or <2 x i64> %55, %47
  %57 = or <2 x i64> %56, %43
  store <2 x i64> %57, <2 x i64>* %11, align 16
  %58 = bitcast <2 x i64>* %6 to i8*
  %59 = getelementptr inbounds <2 x i64>, <2 x i64>* %6, i64 0, i64 0
  %60 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %7, i64 0, i32 1
  %61 = bitcast <2 x i64>* %6 to [8 x i16]*
  %62 = bitcast { i64, i64 }* %8 to i8*
  %63 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %8, i64 0, i32 0
  %64 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %8, i64 0, i32 1
  %65 = bitcast { i64, i64 }* %8 to [8 x i16]*
  %66 = extractelement <2 x i64> %15, i32 0
  %67 = trunc i64 %66 to i16
  call void @llvm.lifetime.start(i64 16, i8* nonnull %58)
  store <2 x i64> zeroinitializer, <2 x i64>* %6, align 16
  %68 = bitcast <2 x i64>* %6 to i16*
  store i16 %67, i16* %68, align 16
  %69 = load i64, i64* %59, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %58)
  call void @llvm.lifetime.start(i64 16, i8* nonnull %62)
  store i64 %69, i64* %63, align 8
  store i64 0, i64* %64, align 8
  %70 = getelementptr inbounds [8 x i16], [8 x i16]* %65, i64 0, i64 1
  store i16 %18, i16* %70, align 2
  %71 = load i64, i64* %63, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %62)
  %72 = lshr i64 %66, 16
  %73 = trunc i64 %72 to i16
  call void @llvm.lifetime.start(i64 16, i8* nonnull %58)
  store i64 %71, i64* %59, align 16
  store i64 0, i64* %60, align 8
  %74 = getelementptr inbounds [8 x i16], [8 x i16]* %61, i64 0, i64 2
  store i16 %73, i16* %74, align 4
  %75 = load i64, i64* %59, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %58)
  call void @llvm.lifetime.start(i64 16, i8* nonnull %62)
  store i64 %75, i64* %63, align 8
  store i64 0, i64* %64, align 8
  %76 = getelementptr inbounds [8 x i16], [8 x i16]* %65, i64 0, i64 3
  store i16 %21, i16* %76, align 2
  %77 = load i64, i64* %63, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %62)
  %78 = getelementptr inbounds %struct.uint16v8_t, %struct.uint16v8_t* %10, i64 0, i32 0, i64 2
  %79 = load i16, i16* %78, align 4
  call void @llvm.lifetime.start(i64 16, i8* nonnull %58)
  store i64 %77, i64* %59, align 16
  store i64 0, i64* %60, align 8
  %80 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %7, i64 0, i32 1
  %81 = bitcast i64* %80 to i16*
  store i16 %79, i16* %81, align 8
  %82 = load i64, i64* %60, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %58)
  call void @llvm.lifetime.start(i64 16, i8* nonnull %62)
  store i64 %77, i64* %63, align 8
  store i64 %82, i64* %64, align 8
  %83 = getelementptr inbounds [8 x i16], [8 x i16]* %65, i64 0, i64 5
  store i16 %24, i16* %83, align 2
  %84 = load i64, i64* %64, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %62)
  %85 = getelementptr inbounds %struct.uint16v8_t, %struct.uint16v8_t* %10, i64 0, i32 0, i64 3
  %86 = load i16, i16* %85, align 2
  call void @llvm.lifetime.start(i64 16, i8* nonnull %58)
  store i64 %77, i64* %59, align 16
  store i64 %84, i64* %60, align 8
  %87 = getelementptr inbounds [8 x i16], [8 x i16]* %61, i64 0, i64 6
  store i16 %86, i16* %87, align 4
  %88 = load i64, i64* %60, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %58)
  %89 = getelementptr inbounds %struct.uint16v8_t, %struct.uint16v8_t* %12, i64 0, i32 0, i64 3
  %90 = load i16, i16* %89, align 2
  call void @llvm.lifetime.start(i64 16, i8* nonnull %62)
  store i64 %77, i64* %63, align 8
  store i64 %88, i64* %64, align 8
  %91 = getelementptr inbounds [8 x i16], [8 x i16]* %65, i64 0, i64 7
  store i16 %90, i16* %91, align 2
  %92 = load i64, i64* %64, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %62)
  %93 = lshr i64 %77, 16
  %94 = lshr i64 %77, 32
  %95 = lshr i64 %77, 48
  %96 = trunc i64 %77 to i16
  %97 = trunc i64 %93 to i16
  %98 = trunc i64 %94 to i16
  %99 = trunc i64 %95 to i16
  %100 = bitcast i8* %2 to i16*
  store i16 %96, i16* %100, align 1
  %101 = getelementptr inbounds i8, i8* %2, i64 2
  %102 = bitcast i8* %101 to i16*
  store i16 %97, i16* %102, align 1
  %103 = getelementptr inbounds i8, i8* %2, i64 4
  %104 = bitcast i8* %103 to i16*
  store i16 %98, i16* %104, align 1
  %105 = getelementptr inbounds i8, i8* %2, i64 6
  %106 = bitcast i8* %105 to i16*
  store i16 %99, i16* %106, align 1
  %107 = trunc i64 %92 to i16
  %108 = getelementptr inbounds i8, i8* %2, i64 8
  %109 = bitcast i8* %108 to i16*
  store i16 %107, i16* %109, align 1
  %110 = lshr i64 %92, 16
  %111 = trunc i64 %110 to i16
  %112 = getelementptr inbounds i8, i8* %2, i64 10
  %113 = bitcast i8* %112 to i16*
  store i16 %111, i16* %113, align 1
  %114 = lshr i64 %92, 32
  %115 = trunc i64 %114 to i16
  %116 = getelementptr inbounds i8, i8* %2, i64 12
  %117 = bitcast i8* %116 to i16*
  store i16 %115, i16* %117, align 1
  %118 = lshr i64 %92, 48
  %119 = trunc i64 %118 to i16
  %120 = getelementptr inbounds i8, i8* %2, i64 14
  %121 = bitcast i8* %120 to i16*
  store i16 %119, i16* %121, align 1
  call void @llvm.lifetime.end(i64 16, i8* nonnull %16) 
  call void @llvm.lifetime.end(i64 16, i8* nonnull %13) 
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L9PUNPCKLWDI3VnWI8vec128_tE2VnIS2_ES5_EEP6MemoryS7_R5StateT_T0_T1_(%struct.Memory* readnone returned, %struct.State* nocapture readnone dereferenceable(3376), i8* nocapture, i8* nocapture readonly, i8* nocapture readonly)  {
  %6 = alloca <2 x i64>, align 16
  %7 = bitcast <2 x i64>* %6 to { i64, i64 }*
  %8 = alloca { i64, i64 }, align 8
  %9 = alloca <2 x i64>, align 16
  %10 = bitcast <2 x i64>* %9 to %struct.uint16v8_t*
  %11 = alloca <2 x i64>, align 16
  %12 = bitcast <2 x i64>* %11 to %struct.uint16v8_t*
  %13 = bitcast <2 x i64>* %9 to i8*
  call void @llvm.lifetime.start(i64 16, i8* nonnull %13) 
  %14 = bitcast i8* %3 to <2 x i64>*
  %15 = load <2 x i64>, <2 x i64>* %14, align 1
  store <2 x i64> %15, <2 x i64>* %9, align 16
  %16 = bitcast <2 x i64>* %11 to i8*
  call void @llvm.lifetime.start(i64 16, i8* nonnull %16) 
  %17 = bitcast i8* %4 to <2 x i64>*
  %18 = load <2 x i64>, <2 x i64>* %17, align 1
  store <2 x i64> %18, <2 x i64>* %11, align 16
  %19 = bitcast <2 x i64>* %6 to i8*
  %20 = getelementptr inbounds <2 x i64>, <2 x i64>* %6, i64 0, i64 0
  %21 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %7, i64 0, i32 1
  %22 = bitcast <2 x i64>* %6 to [8 x i16]*
  %23 = bitcast { i64, i64 }* %8 to i8*
  %24 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %8, i64 0, i32 0
  %25 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %8, i64 0, i32 1
  %26 = bitcast { i64, i64 }* %8 to [8 x i16]*
  %27 = extractelement <2 x i64> %15, i32 0
  %28 = trunc i64 %27 to i16
  call void @llvm.lifetime.start(i64 16, i8* nonnull %19)
  store <2 x i64> zeroinitializer, <2 x i64>* %6, align 16
  %29 = bitcast <2 x i64>* %6 to i16*
  store i16 %28, i16* %29, align 16
  %30 = load i64, i64* %20, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %19)
  %31 = extractelement <2 x i64> %18, i32 0
  %32 = trunc i64 %31 to i16
  call void @llvm.lifetime.start(i64 16, i8* nonnull %23)
  store i64 %30, i64* %24, align 8
  store i64 0, i64* %25, align 8
  %33 = getelementptr inbounds [8 x i16], [8 x i16]* %26, i64 0, i64 1
  store i16 %32, i16* %33, align 2
  %34 = load i64, i64* %24, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %23)
  %35 = lshr i64 %27, 16
  %36 = trunc i64 %35 to i16
  call void @llvm.lifetime.start(i64 16, i8* nonnull %19)
  store i64 %34, i64* %20, align 16
  store i64 0, i64* %21, align 8
  %37 = getelementptr inbounds [8 x i16], [8 x i16]* %22, i64 0, i64 2
  store i16 %36, i16* %37, align 4
  %38 = load i64, i64* %20, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %19)
  %39 = lshr i64 %31, 16
  %40 = trunc i64 %39 to i16
  call void @llvm.lifetime.start(i64 16, i8* nonnull %23)
  store i64 %38, i64* %24, align 8
  store i64 0, i64* %25, align 8
  %41 = getelementptr inbounds [8 x i16], [8 x i16]* %26, i64 0, i64 3
  store i16 %40, i16* %41, align 2
  %42 = load i64, i64* %24, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %23)
  %43 = lshr i64 %27, 32
  %44 = trunc i64 %43 to i16
  call void @llvm.lifetime.start(i64 16, i8* nonnull %19)
  store i64 %42, i64* %20, align 16
  store i64 0, i64* %21, align 8
  %45 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %7, i64 0, i32 1
  %46 = bitcast i64* %45 to i16*
  store i16 %44, i16* %46, align 8
  %47 = load i64, i64* %21, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %19)
  %48 = lshr i64 %31, 32
  %49 = trunc i64 %48 to i16
  call void @llvm.lifetime.start(i64 16, i8* nonnull %23)
  store i64 %42, i64* %24, align 8
  store i64 %47, i64* %25, align 8
  %50 = getelementptr inbounds [8 x i16], [8 x i16]* %26, i64 0, i64 5
  store i16 %49, i16* %50, align 2
  %51 = load i64, i64* %25, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %23)
  %52 = getelementptr inbounds %struct.uint16v8_t, %struct.uint16v8_t* %10, i64 0, i32 0, i64 3
  %53 = load i16, i16* %52, align 2
  call void @llvm.lifetime.start(i64 16, i8* nonnull %19)
  store i64 %42, i64* %20, align 16
  store i64 %51, i64* %21, align 8
  %54 = getelementptr inbounds [8 x i16], [8 x i16]* %22, i64 0, i64 6
  store i16 %53, i16* %54, align 4
  %55 = load i64, i64* %21, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %19)
  %56 = getelementptr inbounds %struct.uint16v8_t, %struct.uint16v8_t* %12, i64 0, i32 0, i64 3
  %57 = load i16, i16* %56, align 2
  call void @llvm.lifetime.start(i64 16, i8* nonnull %23)
  store i64 %42, i64* %24, align 8
  store i64 %55, i64* %25, align 8
  %58 = getelementptr inbounds [8 x i16], [8 x i16]* %26, i64 0, i64 7
  store i16 %57, i16* %58, align 2
  %59 = load i64, i64* %25, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %23)
  %60 = lshr i64 %42, 16
  %61 = lshr i64 %42, 32
  %62 = lshr i64 %42, 48
  %63 = trunc i64 %42 to i16
  %64 = trunc i64 %60 to i16
  %65 = trunc i64 %61 to i16
  %66 = trunc i64 %62 to i16
  %67 = bitcast i8* %2 to i16*
  store i16 %63, i16* %67, align 1
  %68 = getelementptr inbounds i8, i8* %2, i64 2
  %69 = bitcast i8* %68 to i16*
  store i16 %64, i16* %69, align 1
  %70 = getelementptr inbounds i8, i8* %2, i64 4
  %71 = bitcast i8* %70 to i16*
  store i16 %65, i16* %71, align 1
  %72 = getelementptr inbounds i8, i8* %2, i64 6
  %73 = bitcast i8* %72 to i16*
  store i16 %66, i16* %73, align 1
  %74 = trunc i64 %59 to i16
  %75 = getelementptr inbounds i8, i8* %2, i64 8
  %76 = bitcast i8* %75 to i16*
  store i16 %74, i16* %76, align 1
  %77 = lshr i64 %59, 16
  %78 = trunc i64 %77 to i16
  %79 = getelementptr inbounds i8, i8* %2, i64 10
  %80 = bitcast i8* %79 to i16*
  store i16 %78, i16* %80, align 1
  %81 = lshr i64 %59, 32
  %82 = trunc i64 %81 to i16
  %83 = getelementptr inbounds i8, i8* %2, i64 12
  %84 = bitcast i8* %83 to i16*
  store i16 %82, i16* %84, align 1
  %85 = lshr i64 %59, 48
  %86 = trunc i64 %85 to i16
  %87 = getelementptr inbounds i8, i8* %2, i64 14
  %88 = bitcast i8* %87 to i16*
  store i16 %86, i16* %88, align 1
  call void @llvm.lifetime.end(i64 16, i8* nonnull %16) 
  call void @llvm.lifetime.end(i64 16, i8* nonnull %13) 
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L9PUNPCKLDQI4RVnWI7vec64_tE3RVnIS2_E3MVnI7vec32_tEEEP6MemorySA_R5StateT_T0_T1_(%struct.Memory* returned, %struct.State* nocapture readnone dereferenceable(3376), i64* nocapture, i64, i64)  {
  %6 = alloca i64, align 8
  %7 = alloca i64, align 8
  %8 = inttoptr i64 %4 to i32*
  %9 = load i32, i32* %8
  %10 = bitcast i64* %6 to i8*
  %11 = bitcast i64* %7 to i8*
  %12 = bitcast i64* %7 to [2 x i32]*
  %13 = trunc i64 %3 to i32
  call void @llvm.lifetime.start(i64 8, i8* nonnull %10)
  store i64 0, i64* %6, align 8
  %14 = bitcast i64* %6 to i32*
  store i32 %13, i32* %14, align 8
  %15 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %10)
  call void @llvm.lifetime.start(i64 8, i8* nonnull %11)
  store i64 %15, i64* %7, align 8
  %16 = getelementptr inbounds [2 x i32], [2 x i32]* %12, i64 0, i64 1
  store i32 %9, i32* %16, align 4
  %17 = load i64, i64* %7, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %11)
  %18 = trunc i64 %17 to i32
  %19 = lshr i64 %17, 32
  %20 = trunc i64 %19 to i32
  %21 = bitcast i64* %2 to [2 x i32]*
  %22 = bitcast i64* %2 to i32*
  store i32 %18, i32* %22, align 1
  %23 = getelementptr inbounds [2 x i32], [2 x i32]* %21, i64 0, i64 1
  store i32 %20, i32* %23, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L9PUNPCKLDQI4RVnWI7vec64_tE3RVnIS2_ES5_EEP6MemoryS7_R5StateT_T0_T1_(%struct.Memory* readnone returned, %struct.State* nocapture readnone dereferenceable(3376), i64* nocapture, i64, i64)  {
  %6 = alloca i64, align 8
  %7 = alloca i64, align 8
  %8 = bitcast i64* %6 to i8*
  %9 = bitcast i64* %7 to i8*
  %10 = bitcast i64* %7 to [2 x i32]*
  %11 = trunc i64 %3 to i32
  call void @llvm.lifetime.start(i64 8, i8* nonnull %8)
  store i64 0, i64* %6, align 8
  %12 = bitcast i64* %6 to i32*
  store i32 %11, i32* %12, align 8
  %13 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %8)
  %14 = trunc i64 %4 to i32
  call void @llvm.lifetime.start(i64 8, i8* nonnull %9)
  store i64 %13, i64* %7, align 8
  %15 = getelementptr inbounds [2 x i32], [2 x i32]* %10, i64 0, i64 1
  store i32 %14, i32* %15, align 4
  %16 = load i64, i64* %7, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %9)
  %17 = trunc i64 %16 to i32
  %18 = lshr i64 %16, 32
  %19 = trunc i64 %18 to i32
  %20 = bitcast i64* %2 to [2 x i32]*
  %21 = bitcast i64* %2 to i32*
  store i32 %17, i32* %21, align 1
  %22 = getelementptr inbounds [2 x i32], [2 x i32]* %20, i64 0, i64 1
  store i32 %19, i32* %22, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L9PUNPCKLDQI3VnWI8vec128_tE2VnIS2_E3MVnIS2_EEEP6MemoryS9_R5StateT_T0_T1_(%struct.Memory* returned, %struct.State* nocapture readnone dereferenceable(3376), i8* nocapture, i8* nocapture readonly, i64)  {
  %6 = alloca <2 x i64>, align 16
  %7 = bitcast <2 x i64>* %6 to { i64, i64 }*
  %8 = alloca { i64, i64 }, align 8
  %9 = bitcast i8* %3 to i64*
  %10 = load i64, i64* %9, align 1
  %11 = inttoptr i64 %4 to i32*
  %12 = load i32, i32* %11
  %13 = add i64 %4, 4
  %14 = inttoptr i64 %13 to i32*
  %15 = load i32, i32* %14
  %16 = bitcast <2 x i64>* %6 to i8*
  %17 = getelementptr inbounds <2 x i64>, <2 x i64>* %6, i64 0, i64 0
  %18 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %7, i64 0, i32 1
  %19 = bitcast { i64, i64 }* %8 to i8*
  %20 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %8, i64 0, i32 0
  %21 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %8, i64 0, i32 1
  %22 = bitcast { i64, i64 }* %8 to [4 x i32]*
  %23 = trunc i64 %10 to i32
  call void @llvm.lifetime.start(i64 16, i8* nonnull %16)
  store <2 x i64> zeroinitializer, <2 x i64>* %6, align 16
  %24 = bitcast <2 x i64>* %6 to i32*
  store i32 %23, i32* %24, align 16
  %25 = load i64, i64* %17, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %16)
  call void @llvm.lifetime.start(i64 16, i8* nonnull %19)
  store i64 %25, i64* %20, align 8
  store i64 0, i64* %21, align 8
  %26 = getelementptr inbounds [4 x i32], [4 x i32]* %22, i64 0, i64 1
  store i32 %12, i32* %26, align 4
  %27 = load i64, i64* %20, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %19)
  %28 = lshr i64 %10, 32
  %29 = trunc i64 %28 to i32
  call void @llvm.lifetime.start(i64 16, i8* nonnull %16)
  store i64 %27, i64* %17, align 16
  store i64 0, i64* %18, align 8
  %30 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %7, i64 0, i32 1
  %31 = bitcast i64* %30 to i32*
  store i32 %29, i32* %31, align 8
  %32 = load i64, i64* %18, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %16)
  call void @llvm.lifetime.start(i64 16, i8* nonnull %19)
  store i64 %27, i64* %20, align 8
  store i64 %32, i64* %21, align 8
  %33 = getelementptr inbounds [4 x i32], [4 x i32]* %22, i64 0, i64 3
  store i32 %15, i32* %33, align 4
  %34 = load i64, i64* %21, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %19)
  %35 = lshr i64 %27, 32
  %36 = trunc i64 %27 to i32
  %37 = trunc i64 %35 to i32
  %38 = bitcast i8* %2 to i32*
  store i32 %36, i32* %38, align 1
  %39 = getelementptr inbounds i8, i8* %2, i64 4
  %40 = bitcast i8* %39 to i32*
  store i32 %37, i32* %40, align 1
  %41 = trunc i64 %34 to i32
  %42 = getelementptr inbounds i8, i8* %2, i64 8
  %43 = bitcast i8* %42 to i32*
  store i32 %41, i32* %43, align 1
  %44 = lshr i64 %34, 32
  %45 = trunc i64 %44 to i32
  %46 = getelementptr inbounds i8, i8* %2, i64 12
  %47 = bitcast i8* %46 to i32*
  store i32 %45, i32* %47, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L9PUNPCKLDQI3VnWI8vec128_tE2VnIS2_ES5_EEP6MemoryS7_R5StateT_T0_T1_(%struct.Memory* readnone returned, %struct.State* nocapture readnone dereferenceable(3376), i8* nocapture, i8* nocapture readonly, i8* nocapture readonly)  {
  %6 = alloca <2 x i64>, align 16
  %7 = bitcast <2 x i64>* %6 to { i64, i64 }*
  %8 = alloca { i64, i64 }, align 8
  %9 = bitcast i8* %3 to i64*
  %10 = load i64, i64* %9, align 1
  %11 = bitcast i8* %4 to i64*
  %12 = load i64, i64* %11, align 1
  %13 = bitcast <2 x i64>* %6 to i8*
  %14 = getelementptr inbounds <2 x i64>, <2 x i64>* %6, i64 0, i64 0
  %15 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %7, i64 0, i32 1
  %16 = bitcast { i64, i64 }* %8 to i8*
  %17 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %8, i64 0, i32 0
  %18 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %8, i64 0, i32 1
  %19 = bitcast { i64, i64 }* %8 to [4 x i32]*
  %20 = trunc i64 %10 to i32
  call void @llvm.lifetime.start(i64 16, i8* nonnull %13)
  store <2 x i64> zeroinitializer, <2 x i64>* %6, align 16
  %21 = bitcast <2 x i64>* %6 to i32*
  store i32 %20, i32* %21, align 16
  %22 = load i64, i64* %14, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %13)
  %23 = trunc i64 %12 to i32
  call void @llvm.lifetime.start(i64 16, i8* nonnull %16)
  store i64 %22, i64* %17, align 8
  store i64 0, i64* %18, align 8
  %24 = getelementptr inbounds [4 x i32], [4 x i32]* %19, i64 0, i64 1
  store i32 %23, i32* %24, align 4
  %25 = load i64, i64* %17, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %16)
  %26 = lshr i64 %10, 32
  %27 = trunc i64 %26 to i32
  call void @llvm.lifetime.start(i64 16, i8* nonnull %13)
  store i64 %25, i64* %14, align 16
  store i64 0, i64* %15, align 8
  %28 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %7, i64 0, i32 1
  %29 = bitcast i64* %28 to i32*
  store i32 %27, i32* %29, align 8
  %30 = load i64, i64* %15, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %13)
  %31 = lshr i64 %12, 32
  %32 = trunc i64 %31 to i32
  call void @llvm.lifetime.start(i64 16, i8* nonnull %16)
  store i64 %25, i64* %17, align 8
  store i64 %30, i64* %18, align 8
  %33 = getelementptr inbounds [4 x i32], [4 x i32]* %19, i64 0, i64 3
  store i32 %32, i32* %33, align 4
  %34 = load i64, i64* %18, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %16)
  %35 = lshr i64 %25, 32
  %36 = trunc i64 %25 to i32
  %37 = trunc i64 %35 to i32
  %38 = bitcast i8* %2 to i32*
  store i32 %36, i32* %38, align 1
  %39 = getelementptr inbounds i8, i8* %2, i64 4
  %40 = bitcast i8* %39 to i32*
  store i32 %37, i32* %40, align 1
  %41 = trunc i64 %34 to i32
  %42 = getelementptr inbounds i8, i8* %2, i64 8
  %43 = bitcast i8* %42 to i32*
  store i32 %41, i32* %43, align 1
  %44 = lshr i64 %34, 32
  %45 = trunc i64 %44 to i32
  %46 = getelementptr inbounds i8, i8* %2, i64 12
  %47 = bitcast i8* %46 to i32*
  store i32 %45, i32* %47, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L10PUNPCKLQDQI3VnWI8vec128_tE2VnIS2_E3MVnIS2_EEEP6MemoryS9_R5StateT_T0_T1_(%struct.Memory* returned, %struct.State* nocapture readnone dereferenceable(3376), i8* nocapture, i8* nocapture readonly, i64)  {
  %6 = bitcast i8* %3 to i64*
  %7 = load i64, i64* %6, align 1
  %8 = inttoptr i64 %4 to i64*
  %9 = load i64, i64* %8
  %10 = bitcast i8* %2 to i64*
  store i64 %7, i64* %10, align 1
  %11 = getelementptr inbounds i8, i8* %2, i64 8
  %12 = bitcast i8* %11 to i64*
  store i64 %9, i64* %12, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L10PUNPCKLQDQI3VnWI8vec128_tE2VnIS2_ES5_EEP6MemoryS7_R5StateT_T0_T1_(%struct.Memory* readnone returned, %struct.State* nocapture readnone dereferenceable(3376), i8* nocapture, i8* nocapture readonly, i8* nocapture readonly)  {
  %6 = bitcast i8* %3 to i64*
  %7 = load i64, i64* %6, align 1
  %8 = bitcast i8* %4 to i64*
  %9 = load i64, i64* %8, align 1
  %10 = bitcast i8* %2 to i64*
  store i64 %7, i64* %10, align 1
  %11 = getelementptr inbounds i8, i8* %2, i64 8
  %12 = bitcast i8* %11 to i64*
  store i64 %9, i64* %12, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L5PADDBI4RVnWI7vec64_tE3RVnIS2_ES5_EEP6MemoryS7_R5StateT_T0_T1_(%struct.Memory* readnone returned, %struct.State* nocapture readnone dereferenceable(3376), i64* nocapture, i64, i64)  {
  %6 = lshr i64 %3, 56
  %7 = and i64 %4, 65280
  %8 = and i64 %4, 16711680
  %9 = and i64 %4, 4278190080
  %10 = and i64 %4, 1095216660480
  %11 = and i64 %4, 280375465082880
  %12 = and i64 %4, 71776119061217280
  %13 = lshr i64 %4, 56
  %14 = add i64 %4, %3
  %15 = add nuw nsw i64 %13, %6
  %16 = add i64 %12, %3
  %17 = add i64 %11, %3
  %18 = add i64 %10, %3
  %19 = add i64 %9, %3
  %20 = add i64 %8, %3
  %21 = add i64 %7, %3
  %22 = trunc i64 %14 to i8
  %23 = lshr i64 %21, 8
  %24 = trunc i64 %23 to i8
  %25 = lshr i64 %20, 16
  %26 = trunc i64 %25 to i8
  %27 = lshr i64 %19, 24
  %28 = trunc i64 %27 to i8
  %29 = lshr i64 %18, 32
  %30 = trunc i64 %29 to i8
  %31 = lshr i64 %17, 40
  %32 = trunc i64 %31 to i8
  %33 = lshr i64 %16, 48
  %34 = trunc i64 %33 to i8
  %35 = trunc i64 %15 to i8
  %36 = bitcast i64* %2 to [8 x i8]*
  %37 = bitcast i64* %2 to i8*
  store i8 %22, i8* %37, align 1
  %38 = getelementptr inbounds [8 x i8], [8 x i8]* %36, i64 0, i64 1
  store i8 %24, i8* %38, align 1
  %39 = getelementptr inbounds [8 x i8], [8 x i8]* %36, i64 0, i64 2
  store i8 %26, i8* %39, align 1
  %40 = getelementptr inbounds [8 x i8], [8 x i8]* %36, i64 0, i64 3
  store i8 %28, i8* %40, align 1
  %41 = getelementptr inbounds [8 x i8], [8 x i8]* %36, i64 0, i64 4
  store i8 %30, i8* %41, align 1
  %42 = getelementptr inbounds [8 x i8], [8 x i8]* %36, i64 0, i64 5
  store i8 %32, i8* %42, align 1
  %43 = getelementptr inbounds [8 x i8], [8 x i8]* %36, i64 0, i64 6
  store i8 %34, i8* %43, align 1
  %44 = getelementptr inbounds [8 x i8], [8 x i8]* %36, i64 0, i64 7
  store i8 %35, i8* %44, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L5PADDBI4RVnWI7vec64_tE3RVnIS2_E3MVnIS2_EEEP6MemoryS9_R5StateT_T0_T1_(%struct.Memory* returned, %struct.State* nocapture readnone dereferenceable(3376), i64* nocapture, i64, i64)  {
  %6 = lshr i64 %3, 56
  %7 = trunc i64 %6 to i8
  %8 = inttoptr i64 %4 to i8*
  %9 = load i8, i8* %8
  %10 = add i64 %4, 1
  %11 = inttoptr i64 %10 to i8*
  %12 = load i8, i8* %11
  %13 = add i64 %4, 2
  %14 = inttoptr i64 %13 to i8*
  %15 = load i8, i8* %14
  %16 = add i64 %4, 3
  %17 = inttoptr i64 %16 to i8*
  %18 = load i8, i8* %17
  %19 = add i64 %4, 4
  %20 = inttoptr i64 %19 to i8*
  %21 = load i8, i8* %20
  %22 = add i64 %4, 5
  %23 = inttoptr i64 %22 to i8*
  %24 = load i8, i8* %23
  %25 = add i64 %4, 6
  %26 = inttoptr i64 %25 to i8*
  %27 = load i8, i8* %26
  %28 = add i64 %4, 7
  %29 = inttoptr i64 %28 to i8*
  %30 = load i8, i8* %29
  %31 = zext i8 %27 to i64
  %32 = zext i8 %24 to i64
  %33 = zext i8 %21 to i64
  %34 = zext i8 %18 to i64
  %35 = shl nuw nsw i64 %34, 24
  %36 = zext i8 %15 to i64
  %37 = shl nuw nsw i64 %36, 16
  %38 = zext i8 %12 to i64
  %39 = shl nuw nsw i64 %38, 8
  %40 = zext i8 %9 to i64
  %41 = add i64 %40, %3
  %42 = add i8 %30, %7
  %43 = shl nuw nsw i64 %31, 48
  %44 = add i64 %43, %3
  %45 = shl nuw nsw i64 %32, 40
  %46 = add i64 %45, %3
  %47 = shl nuw nsw i64 %33, 32
  %48 = add i64 %47, %3
  %49 = add i64 %35, %3
  %50 = add i64 %37, %3
  %51 = add i64 %39, %3
  %52 = trunc i64 %41 to i8
  %53 = lshr i64 %51, 8
  %54 = trunc i64 %53 to i8
  %55 = lshr i64 %50, 16
  %56 = trunc i64 %55 to i8
  %57 = lshr i64 %49, 24
  %58 = trunc i64 %57 to i8
  %59 = lshr i64 %48, 32
  %60 = trunc i64 %59 to i8
  %61 = lshr i64 %46, 40
  %62 = trunc i64 %61 to i8
  %63 = lshr i64 %44, 48
  %64 = trunc i64 %63 to i8
  %65 = bitcast i64* %2 to [8 x i8]*
  %66 = bitcast i64* %2 to i8*
  store i8 %52, i8* %66, align 1
  %67 = getelementptr inbounds [8 x i8], [8 x i8]* %65, i64 0, i64 1
  store i8 %54, i8* %67, align 1
  %68 = getelementptr inbounds [8 x i8], [8 x i8]* %65, i64 0, i64 2
  store i8 %56, i8* %68, align 1
  %69 = getelementptr inbounds [8 x i8], [8 x i8]* %65, i64 0, i64 3
  store i8 %58, i8* %69, align 1
  %70 = getelementptr inbounds [8 x i8], [8 x i8]* %65, i64 0, i64 4
  store i8 %60, i8* %70, align 1
  %71 = getelementptr inbounds [8 x i8], [8 x i8]* %65, i64 0, i64 5
  store i8 %62, i8* %71, align 1
  %72 = getelementptr inbounds [8 x i8], [8 x i8]* %65, i64 0, i64 6
  store i8 %64, i8* %72, align 1
  %73 = getelementptr inbounds [8 x i8], [8 x i8]* %65, i64 0, i64 7
  store i8 %42, i8* %73, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L5PADDBI3VnWI8vec128_tE2VnIS2_ES5_EEP6MemoryS7_R5StateT_T0_T1_(%struct.Memory* readnone returned, %struct.State* nocapture readnone dereferenceable(3376), i8* nocapture, i8* nocapture readonly, i8* nocapture readonly)  {
  %6 = bitcast i8* %3 to i64*
  %7 = load i64, i64* %6, align 1
  %8 = getelementptr inbounds i8, i8* %3, i64 8
  %9 = bitcast i8* %8 to i64*
  %10 = load i64, i64* %9, align 1
  %11 = lshr i64 %7, 56
  %12 = bitcast i8* %4 to i64*
  %13 = load i64, i64* %12, align 1
  %14 = getelementptr inbounds i8, i8* %4, i64 8
  %15 = bitcast i8* %14 to i64*
  %16 = load i64, i64* %15, align 1
  %17 = and i64 %13, 65280
  %18 = and i64 %13, 16711680
  %19 = and i64 %13, 4278190080
  %20 = and i64 %13, 1095216660480
  %21 = and i64 %13, 280375465082880
  %22 = and i64 %13, 71776119061217280
  %23 = lshr i64 %13, 56
  %24 = add i64 %13, %7
  %25 = add nuw nsw i64 %23, %11
  %26 = add i64 %16, %10
  %27 = and i64 %16, 65280
  %28 = add i64 %27, %10
  %29 = and i64 %16, 16711680
  %30 = add i64 %29, %10
  %31 = and i64 %16, 4278190080
  %32 = add i64 %31, %10
  %33 = and i64 %16, 1095216660480
  %34 = add i64 %33, %10
  %35 = and i64 %16, 280375465082880
  %36 = add i64 %35, %10
  %37 = and i64 %16, 71776119061217280
  %38 = add i64 %37, %10
  %39 = lshr i64 %10, 56
  %40 = lshr i64 %16, 56
  %41 = add nuw nsw i64 %40, %39
  %42 = add i64 %22, %7
  %43 = add i64 %21, %7
  %44 = add i64 %20, %7
  %45 = add i64 %19, %7
  %46 = add i64 %18, %7
  %47 = add i64 %17, %7
  %48 = trunc i64 %24 to i8
  %49 = lshr i64 %47, 8
  %50 = trunc i64 %49 to i8
  %51 = lshr i64 %46, 16
  %52 = trunc i64 %51 to i8
  %53 = lshr i64 %45, 24
  %54 = trunc i64 %53 to i8
  %55 = lshr i64 %44, 32
  %56 = trunc i64 %55 to i8
  %57 = lshr i64 %43, 40
  %58 = trunc i64 %57 to i8
  %59 = lshr i64 %42, 48
  %60 = trunc i64 %59 to i8
  %61 = trunc i64 %25 to i8
  store i8 %48, i8* %2, align 1
  %62 = getelementptr inbounds i8, i8* %2, i64 1
  store i8 %50, i8* %62, align 1
  %63 = getelementptr inbounds i8, i8* %2, i64 2
  store i8 %52, i8* %63, align 1
  %64 = getelementptr inbounds i8, i8* %2, i64 3
  store i8 %54, i8* %64, align 1
  %65 = getelementptr inbounds i8, i8* %2, i64 4
  store i8 %56, i8* %65, align 1
  %66 = getelementptr inbounds i8, i8* %2, i64 5
  store i8 %58, i8* %66, align 1
  %67 = getelementptr inbounds i8, i8* %2, i64 6
  store i8 %60, i8* %67, align 1
  %68 = getelementptr inbounds i8, i8* %2, i64 7
  store i8 %61, i8* %68, align 1
  %69 = trunc i64 %26 to i8
  %70 = getelementptr inbounds i8, i8* %2, i64 8
  store i8 %69, i8* %70, align 1
  %71 = lshr i64 %28, 8
  %72 = trunc i64 %71 to i8
  %73 = getelementptr inbounds i8, i8* %2, i64 9
  store i8 %72, i8* %73, align 1
  %74 = lshr i64 %30, 16
  %75 = trunc i64 %74 to i8
  %76 = getelementptr inbounds i8, i8* %2, i64 10
  store i8 %75, i8* %76, align 1
  %77 = lshr i64 %32, 24
  %78 = trunc i64 %77 to i8
  %79 = getelementptr inbounds i8, i8* %2, i64 11
  store i8 %78, i8* %79, align 1
  %80 = lshr i64 %34, 32
  %81 = trunc i64 %80 to i8
  %82 = getelementptr inbounds i8, i8* %2, i64 12
  store i8 %81, i8* %82, align 1
  %83 = lshr i64 %36, 40
  %84 = trunc i64 %83 to i8
  %85 = getelementptr inbounds i8, i8* %2, i64 13
  store i8 %84, i8* %85, align 1
  %86 = lshr i64 %38, 48
  %87 = trunc i64 %86 to i8
  %88 = getelementptr inbounds i8, i8* %2, i64 14
  store i8 %87, i8* %88, align 1
  %89 = trunc i64 %41 to i8
  %90 = getelementptr inbounds i8, i8* %2, i64 15
  store i8 %89, i8* %90, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L5PADDBI3VnWI8vec128_tE2VnIS2_E3MVnIS2_EEEP6MemoryS9_R5StateT_T0_T1_(%struct.Memory* returned, %struct.State* nocapture readnone dereferenceable(3376), i8* nocapture, i8* nocapture readonly, i64)  {
  %6 = bitcast i8* %3 to i64*
  %7 = load i64, i64* %6, align 1
  %8 = getelementptr inbounds i8, i8* %3, i64 8
  %9 = bitcast i8* %8 to i64*
  %10 = load i64, i64* %9, align 1
  %11 = lshr i64 %7, 56
  %12 = trunc i64 %11 to i8
  %13 = inttoptr i64 %4 to i8*
  %14 = load i8, i8* %13
  %15 = add i64 %4, 1
  %16 = inttoptr i64 %15 to i8*
  %17 = load i8, i8* %16
  %18 = add i64 %4, 2
  %19 = inttoptr i64 %18 to i8*
  %20 = load i8, i8* %19
  %21 = add i64 %4, 3
  %22 = inttoptr i64 %21 to i8*
  %23 = load i8, i8* %22
  %24 = add i64 %4, 4
  %25 = inttoptr i64 %24 to i8*
  %26 = load i8, i8* %25
  %27 = add i64 %4, 5
  %28 = inttoptr i64 %27 to i8*
  %29 = load i8, i8* %28
  %30 = add i64 %4, 6
  %31 = inttoptr i64 %30 to i8*
  %32 = load i8, i8* %31
  %33 = add i64 %4, 7
  %34 = inttoptr i64 %33 to i8*
  %35 = load i8, i8* %34
  %36 = add i64 %4, 8
  %37 = inttoptr i64 %36 to i8*
  %38 = load i8, i8* %37
  %39 = add i64 %4, 9
  %40 = inttoptr i64 %39 to i8*
  %41 = load i8, i8* %40
  %42 = zext i8 %41 to i64
  %43 = add i64 %4, 10
  %44 = inttoptr i64 %43 to i8*
  %45 = load i8, i8* %44
  %46 = zext i8 %45 to i64
  %47 = add i64 %4, 11
  %48 = inttoptr i64 %47 to i8*
  %49 = load i8, i8* %48
  %50 = zext i8 %49 to i64
  %51 = add i64 %4, 12
  %52 = inttoptr i64 %51 to i8*
  %53 = load i8, i8* %52
  %54 = zext i8 %53 to i64
  %55 = shl nuw nsw i64 %54, 32
  %56 = add i64 %4, 13
  %57 = inttoptr i64 %56 to i8*
  %58 = load i8, i8* %57
  %59 = zext i8 %58 to i64
  %60 = shl nuw nsw i64 %59, 40
  %61 = add i64 %4, 14
  %62 = inttoptr i64 %61 to i8*
  %63 = load i8, i8* %62
  %64 = zext i8 %63 to i64
  %65 = shl nuw nsw i64 %64, 48
  %66 = add i64 %4, 15
  %67 = inttoptr i64 %66 to i8*
  %68 = load i8, i8* %67
  %69 = zext i8 %32 to i64
  %70 = zext i8 %29 to i64
  %71 = zext i8 %26 to i64
  %72 = zext i8 %23 to i64
  %73 = shl nuw nsw i64 %72, 24
  %74 = zext i8 %20 to i64
  %75 = shl nuw nsw i64 %74, 16
  %76 = zext i8 %17 to i64
  %77 = shl nuw nsw i64 %76, 8
  %78 = zext i8 %14 to i64
  %79 = add i64 %78, %7
  %80 = add i8 %35, %12
  %81 = trunc i64 %10 to i8
  %82 = add i8 %38, %81
  %83 = shl nuw nsw i64 %42, 8
  %84 = add i64 %83, %10
  %85 = shl nuw nsw i64 %46, 16
  %86 = add i64 %85, %10
  %87 = shl nuw nsw i64 %50, 24
  %88 = add i64 %87, %10
  %89 = add i64 %55, %10
  %90 = add i64 %60, %10
  %91 = add i64 %65, %10
  %92 = lshr i64 %10, 56
  %93 = trunc i64 %92 to i8
  %94 = add i8 %68, %93
  %95 = shl nuw nsw i64 %69, 48
  %96 = add i64 %95, %7
  %97 = shl nuw nsw i64 %70, 40
  %98 = add i64 %97, %7
  %99 = shl nuw nsw i64 %71, 32
  %100 = add i64 %99, %7
  %101 = add i64 %73, %7
  %102 = add i64 %75, %7
  %103 = add i64 %77, %7
  %104 = trunc i64 %79 to i8
  %105 = lshr i64 %103, 8
  %106 = trunc i64 %105 to i8
  %107 = lshr i64 %102, 16
  %108 = trunc i64 %107 to i8
  %109 = lshr i64 %101, 24
  %110 = trunc i64 %109 to i8
  %111 = lshr i64 %100, 32
  %112 = trunc i64 %111 to i8
  %113 = lshr i64 %98, 40
  %114 = trunc i64 %113 to i8
  %115 = lshr i64 %96, 48
  %116 = trunc i64 %115 to i8
  store i8 %104, i8* %2, align 1
  %117 = getelementptr inbounds i8, i8* %2, i64 1
  store i8 %106, i8* %117, align 1
  %118 = getelementptr inbounds i8, i8* %2, i64 2
  store i8 %108, i8* %118, align 1
  %119 = getelementptr inbounds i8, i8* %2, i64 3
  store i8 %110, i8* %119, align 1
  %120 = getelementptr inbounds i8, i8* %2, i64 4
  store i8 %112, i8* %120, align 1
  %121 = getelementptr inbounds i8, i8* %2, i64 5
  store i8 %114, i8* %121, align 1
  %122 = getelementptr inbounds i8, i8* %2, i64 6
  store i8 %116, i8* %122, align 1
  %123 = getelementptr inbounds i8, i8* %2, i64 7
  store i8 %80, i8* %123, align 1
  %124 = getelementptr inbounds i8, i8* %2, i64 8
  store i8 %82, i8* %124, align 1
  %125 = lshr i64 %84, 8
  %126 = trunc i64 %125 to i8
  %127 = getelementptr inbounds i8, i8* %2, i64 9
  store i8 %126, i8* %127, align 1
  %128 = lshr i64 %86, 16
  %129 = trunc i64 %128 to i8
  %130 = getelementptr inbounds i8, i8* %2, i64 10
  store i8 %129, i8* %130, align 1
  %131 = lshr i64 %88, 24
  %132 = trunc i64 %131 to i8
  %133 = getelementptr inbounds i8, i8* %2, i64 11
  store i8 %132, i8* %133, align 1
  %134 = lshr i64 %89, 32
  %135 = trunc i64 %134 to i8
  %136 = getelementptr inbounds i8, i8* %2, i64 12
  store i8 %135, i8* %136, align 1
  %137 = lshr i64 %90, 40
  %138 = trunc i64 %137 to i8
  %139 = getelementptr inbounds i8, i8* %2, i64 13
  store i8 %138, i8* %139, align 1
  %140 = lshr i64 %91, 48
  %141 = trunc i64 %140 to i8
  %142 = getelementptr inbounds i8, i8* %2, i64 14
  store i8 %141, i8* %142, align 1
  %143 = getelementptr inbounds i8, i8* %2, i64 15
  store i8 %94, i8* %143, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L5PADDWI4RVnWI7vec64_tE3RVnIS2_ES5_EEP6MemoryS7_R5StateT_T0_T1_(%struct.Memory* readnone returned, %struct.State* nocapture readnone dereferenceable(3376), i64* nocapture, i64, i64)  {
  %6 = lshr i64 %3, 48
  %7 = and i64 %4, 4294901760
  %8 = and i64 %4, 281470681743360
  %9 = lshr i64 %4, 48
  %10 = add i64 %4, %3
  %11 = add nuw nsw i64 %9, %6
  %12 = add i64 %8, %3
  %13 = add i64 %7, %3
  %14 = trunc i64 %10 to i16
  %15 = lshr i64 %13, 16
  %16 = trunc i64 %15 to i16
  %17 = lshr i64 %12, 32
  %18 = trunc i64 %17 to i16
  %19 = trunc i64 %11 to i16
  %20 = bitcast i64* %2 to [4 x i16]*
  %21 = bitcast i64* %2 to i16*
  store i16 %14, i16* %21, align 1
  %22 = getelementptr inbounds [4 x i16], [4 x i16]* %20, i64 0, i64 1
  store i16 %16, i16* %22, align 1
  %23 = getelementptr inbounds [4 x i16], [4 x i16]* %20, i64 0, i64 2
  store i16 %18, i16* %23, align 1
  %24 = getelementptr inbounds [4 x i16], [4 x i16]* %20, i64 0, i64 3
  store i16 %19, i16* %24, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L5PADDWI4RVnWI7vec64_tE3RVnIS2_E3MVnIS2_EEEP6MemoryS9_R5StateT_T0_T1_(%struct.Memory* returned, %struct.State* nocapture readnone dereferenceable(3376), i64* nocapture, i64, i64)  {
  %6 = trunc i64 %3 to i16
  %7 = lshr i64 %3, 48
  %8 = trunc i64 %7 to i16
  %9 = inttoptr i64 %4 to i16*
  %10 = load i16, i16* %9
  %11 = add i64 %4, 2
  %12 = inttoptr i64 %11 to i16*
  %13 = load i16, i16* %12
  %14 = add i64 %4, 4
  %15 = inttoptr i64 %14 to i16*
  %16 = load i16, i16* %15
  %17 = add i64 %4, 6
  %18 = inttoptr i64 %17 to i16*
  %19 = load i16, i16* %18
  %20 = zext i16 %16 to i64
  %21 = zext i16 %13 to i64
  %22 = add i16 %10, %6
  %23 = add i16 %19, %8
  %24 = shl nuw nsw i64 %20, 32
  %25 = add i64 %24, %3
  %26 = shl nuw nsw i64 %21, 16
  %27 = add i64 %26, %3
  %28 = lshr i64 %27, 16
  %29 = trunc i64 %28 to i16
  %30 = lshr i64 %25, 32
  %31 = trunc i64 %30 to i16
  %32 = bitcast i64* %2 to [4 x i16]*
  %33 = bitcast i64* %2 to i16*
  store i16 %22, i16* %33, align 1
  %34 = getelementptr inbounds [4 x i16], [4 x i16]* %32, i64 0, i64 1
  store i16 %29, i16* %34, align 1
  %35 = getelementptr inbounds [4 x i16], [4 x i16]* %32, i64 0, i64 2
  store i16 %31, i16* %35, align 1
  %36 = getelementptr inbounds [4 x i16], [4 x i16]* %32, i64 0, i64 3
  store i16 %23, i16* %36, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L5PADDWI3VnWI8vec128_tE2VnIS2_ES5_EEP6MemoryS7_R5StateT_T0_T1_(%struct.Memory* readnone returned, %struct.State* nocapture readnone dereferenceable(3376), i8* nocapture, i8* nocapture readonly, i8* nocapture readonly)  {
  %6 = bitcast i8* %3 to i64*
  %7 = load i64, i64* %6, align 1
  %8 = getelementptr inbounds i8, i8* %3, i64 8
  %9 = bitcast i8* %8 to i64*
  %10 = load i64, i64* %9, align 1
  %11 = lshr i64 %7, 48
  %12 = bitcast i8* %4 to i64*
  %13 = load i64, i64* %12, align 1
  %14 = getelementptr inbounds i8, i8* %4, i64 8
  %15 = bitcast i8* %14 to i64*
  %16 = load i64, i64* %15, align 1
  %17 = and i64 %13, 4294901760
  %18 = and i64 %13, 281470681743360
  %19 = lshr i64 %13, 48
  %20 = add i64 %13, %7
  %21 = add nuw nsw i64 %19, %11
  %22 = add i64 %16, %10
  %23 = and i64 %16, 4294901760
  %24 = add i64 %23, %10
  %25 = and i64 %16, 281470681743360
  %26 = add i64 %25, %10
  %27 = lshr i64 %10, 48
  %28 = lshr i64 %16, 48
  %29 = add nuw nsw i64 %28, %27
  %30 = add i64 %18, %7
  %31 = add i64 %17, %7
  %32 = trunc i64 %20 to i16
  %33 = lshr i64 %31, 16
  %34 = trunc i64 %33 to i16
  %35 = lshr i64 %30, 32
  %36 = trunc i64 %35 to i16
  %37 = trunc i64 %21 to i16
  %38 = bitcast i8* %2 to i16*
  store i16 %32, i16* %38, align 1
  %39 = getelementptr inbounds i8, i8* %2, i64 2
  %40 = bitcast i8* %39 to i16*
  store i16 %34, i16* %40, align 1
  %41 = getelementptr inbounds i8, i8* %2, i64 4
  %42 = bitcast i8* %41 to i16*
  store i16 %36, i16* %42, align 1
  %43 = getelementptr inbounds i8, i8* %2, i64 6
  %44 = bitcast i8* %43 to i16*
  store i16 %37, i16* %44, align 1
  %45 = trunc i64 %22 to i16
  %46 = getelementptr inbounds i8, i8* %2, i64 8
  %47 = bitcast i8* %46 to i16*
  store i16 %45, i16* %47, align 1
  %48 = lshr i64 %24, 16
  %49 = trunc i64 %48 to i16
  %50 = getelementptr inbounds i8, i8* %2, i64 10
  %51 = bitcast i8* %50 to i16*
  store i16 %49, i16* %51, align 1
  %52 = lshr i64 %26, 32
  %53 = trunc i64 %52 to i16
  %54 = getelementptr inbounds i8, i8* %2, i64 12
  %55 = bitcast i8* %54 to i16*
  store i16 %53, i16* %55, align 1
  %56 = trunc i64 %29 to i16
  %57 = getelementptr inbounds i8, i8* %2, i64 14
  %58 = bitcast i8* %57 to i16*
  store i16 %56, i16* %58, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L5PADDWI3VnWI8vec128_tE2VnIS2_E3MVnIS2_EEEP6MemoryS9_R5StateT_T0_T1_(%struct.Memory* returned, %struct.State* nocapture readnone dereferenceable(3376), i8* nocapture, i8* nocapture readonly, i64)  {
  %6 = bitcast i8* %3 to i64*
  %7 = load i64, i64* %6, align 1
  %8 = getelementptr inbounds i8, i8* %3, i64 8
  %9 = bitcast i8* %8 to i64*
  %10 = load i64, i64* %9, align 1
  %11 = trunc i64 %7 to i16
  %12 = lshr i64 %7, 48
  %13 = trunc i64 %12 to i16
  %14 = inttoptr i64 %4 to i16*
  %15 = load i16, i16* %14
  %16 = add i64 %4, 2
  %17 = inttoptr i64 %16 to i16*
  %18 = load i16, i16* %17
  %19 = add i64 %4, 4
  %20 = inttoptr i64 %19 to i16*
  %21 = load i16, i16* %20
  %22 = add i64 %4, 6
  %23 = inttoptr i64 %22 to i16*
  %24 = load i16, i16* %23
  %25 = add i64 %4, 8
  %26 = inttoptr i64 %25 to i16*
  %27 = load i16, i16* %26
  %28 = add i64 %4, 10
  %29 = inttoptr i64 %28 to i16*
  %30 = load i16, i16* %29
  %31 = zext i16 %30 to i64
  %32 = add i64 %4, 12
  %33 = inttoptr i64 %32 to i16*
  %34 = load i16, i16* %33
  %35 = zext i16 %34 to i64
  %36 = add i64 %4, 14
  %37 = inttoptr i64 %36 to i16*
  %38 = load i16, i16* %37
  %39 = zext i16 %21 to i64
  %40 = zext i16 %18 to i64
  %41 = add i16 %15, %11
  %42 = add i16 %24, %13
  %43 = trunc i64 %10 to i16
  %44 = add i16 %27, %43
  %45 = shl nuw nsw i64 %31, 16
  %46 = add i64 %45, %10
  %47 = shl nuw nsw i64 %35, 32
  %48 = add i64 %47, %10
  %49 = lshr i64 %10, 48
  %50 = trunc i64 %49 to i16
  %51 = add i16 %38, %50
  %52 = shl nuw nsw i64 %39, 32
  %53 = add i64 %52, %7
  %54 = shl nuw nsw i64 %40, 16
  %55 = add i64 %54, %7
  %56 = lshr i64 %55, 16
  %57 = trunc i64 %56 to i16
  %58 = lshr i64 %53, 32
  %59 = trunc i64 %58 to i16
  %60 = bitcast i8* %2 to i16*
  store i16 %41, i16* %60, align 1
  %61 = getelementptr inbounds i8, i8* %2, i64 2
  %62 = bitcast i8* %61 to i16*
  store i16 %57, i16* %62, align 1
  %63 = getelementptr inbounds i8, i8* %2, i64 4
  %64 = bitcast i8* %63 to i16*
  store i16 %59, i16* %64, align 1
  %65 = getelementptr inbounds i8, i8* %2, i64 6
  %66 = bitcast i8* %65 to i16*
  store i16 %42, i16* %66, align 1
  %67 = getelementptr inbounds i8, i8* %2, i64 8
  %68 = bitcast i8* %67 to i16*
  store i16 %44, i16* %68, align 1
  %69 = lshr i64 %46, 16
  %70 = trunc i64 %69 to i16
  %71 = getelementptr inbounds i8, i8* %2, i64 10
  %72 = bitcast i8* %71 to i16*
  store i16 %70, i16* %72, align 1
  %73 = lshr i64 %48, 32
  %74 = trunc i64 %73 to i16
  %75 = getelementptr inbounds i8, i8* %2, i64 12
  %76 = bitcast i8* %75 to i16*
  store i16 %74, i16* %76, align 1
  %77 = getelementptr inbounds i8, i8* %2, i64 14
  %78 = bitcast i8* %77 to i16*
  store i16 %51, i16* %78, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L5PADDDI4RVnWI7vec64_tE3RVnIS2_ES5_EEP6MemoryS7_R5StateT_T0_T1_(%struct.Memory* readnone returned, %struct.State* nocapture readnone dereferenceable(3376), i64* nocapture, i64, i64)  {
  %6 = lshr i64 %3, 32
  %7 = lshr i64 %4, 32
  %8 = add i64 %4, %3
  %9 = add nuw nsw i64 %7, %6
  %10 = trunc i64 %8 to i32
  %11 = trunc i64 %9 to i32
  %12 = bitcast i64* %2 to [2 x i32]*
  %13 = bitcast i64* %2 to i32*
  store i32 %10, i32* %13, align 1
  %14 = getelementptr inbounds [2 x i32], [2 x i32]* %12, i64 0, i64 1
  store i32 %11, i32* %14, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L5PADDDI4RVnWI7vec64_tE3RVnIS2_E3MVnIS2_EEEP6MemoryS9_R5StateT_T0_T1_(%struct.Memory* returned, %struct.State* nocapture readnone dereferenceable(3376), i64* nocapture, i64, i64)  {
  %6 = trunc i64 %3 to i32
  %7 = lshr i64 %3, 32
  %8 = trunc i64 %7 to i32
  %9 = inttoptr i64 %4 to i32*
  %10 = load i32, i32* %9
  %11 = add i64 %4, 4
  %12 = inttoptr i64 %11 to i32*
  %13 = load i32, i32* %12
  %14 = add i32 %10, %6
  %15 = add i32 %13, %8
  %16 = bitcast i64* %2 to [2 x i32]*
  %17 = bitcast i64* %2 to i32*
  store i32 %14, i32* %17, align 1
  %18 = getelementptr inbounds [2 x i32], [2 x i32]* %16, i64 0, i64 1
  store i32 %15, i32* %18, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L5PADDDI3VnWI8vec128_tE2VnIS2_ES5_EEP6MemoryS7_R5StateT_T0_T1_(%struct.Memory* readnone returned, %struct.State* nocapture readnone dereferenceable(3376), i8* nocapture, i8* nocapture readonly, i8* nocapture readonly)  {
  %6 = bitcast i8* %3 to i64*
  %7 = load i64, i64* %6, align 1
  %8 = getelementptr inbounds i8, i8* %3, i64 8
  %9 = bitcast i8* %8 to i64*
  %10 = load i64, i64* %9, align 1
  %11 = lshr i64 %7, 32
  %12 = bitcast i8* %4 to i64*
  %13 = load i64, i64* %12, align 1
  %14 = getelementptr inbounds i8, i8* %4, i64 8
  %15 = bitcast i8* %14 to i64*
  %16 = load i64, i64* %15, align 1
  %17 = lshr i64 %13, 32
  %18 = add i64 %13, %7
  %19 = add nuw nsw i64 %17, %11
  %20 = add i64 %16, %10
  %21 = lshr i64 %10, 32
  %22 = lshr i64 %16, 32
  %23 = add nuw nsw i64 %22, %21
  %24 = trunc i64 %18 to i32
  %25 = trunc i64 %19 to i32
  %26 = bitcast i8* %2 to i32*
  store i32 %24, i32* %26, align 1
  %27 = getelementptr inbounds i8, i8* %2, i64 4
  %28 = bitcast i8* %27 to i32*
  store i32 %25, i32* %28, align 1
  %29 = trunc i64 %20 to i32
  %30 = getelementptr inbounds i8, i8* %2, i64 8
  %31 = bitcast i8* %30 to i32*
  store i32 %29, i32* %31, align 1
  %32 = trunc i64 %23 to i32
  %33 = getelementptr inbounds i8, i8* %2, i64 12
  %34 = bitcast i8* %33 to i32*
  store i32 %32, i32* %34, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L5PADDDI3VnWI8vec128_tE2VnIS2_E3MVnIS2_EEEP6MemoryS9_R5StateT_T0_T1_(%struct.Memory* returned, %struct.State* nocapture readnone dereferenceable(3376), i8* nocapture, i8* nocapture readonly, i64)  {
  %6 = bitcast i8* %3 to i64*
  %7 = load i64, i64* %6, align 1
  %8 = getelementptr inbounds i8, i8* %3, i64 8
  %9 = bitcast i8* %8 to i64*
  %10 = load i64, i64* %9, align 1
  %11 = trunc i64 %7 to i32
  %12 = lshr i64 %7, 32
  %13 = trunc i64 %12 to i32
  %14 = inttoptr i64 %4 to i32*
  %15 = load i32, i32* %14
  %16 = add i64 %4, 4
  %17 = inttoptr i64 %16 to i32*
  %18 = load i32, i32* %17
  %19 = add i64 %4, 8
  %20 = inttoptr i64 %19 to i32*
  %21 = load i32, i32* %20
  %22 = add i64 %4, 12
  %23 = inttoptr i64 %22 to i32*
  %24 = load i32, i32* %23
  %25 = add i32 %15, %11
  %26 = add i32 %18, %13
  %27 = trunc i64 %10 to i32
  %28 = add i32 %21, %27
  %29 = lshr i64 %10, 32
  %30 = trunc i64 %29 to i32
  %31 = add i32 %24, %30
  %32 = bitcast i8* %2 to i32*
  store i32 %25, i32* %32, align 1
  %33 = getelementptr inbounds i8, i8* %2, i64 4
  %34 = bitcast i8* %33 to i32*
  store i32 %26, i32* %34, align 1
  %35 = getelementptr inbounds i8, i8* %2, i64 8
  %36 = bitcast i8* %35 to i32*
  store i32 %28, i32* %36, align 1
  %37 = getelementptr inbounds i8, i8* %2, i64 12
  %38 = bitcast i8* %37 to i32*
  store i32 %31, i32* %38, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L5PADDQI4RVnWI7vec64_tE3RVnIS2_ES5_EEP6MemoryS7_R5StateT_T0_T1_(%struct.Memory* readnone returned, %struct.State* nocapture readnone dereferenceable(3376), i64* nocapture, i64, i64)  {
  %6 = add i64 %4, %3
  store i64 %6, i64* %2, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L5PADDQI4RVnWI7vec64_tE3RVnIS2_E3MVnIS2_EEEP6MemoryS9_R5StateT_T0_T1_(%struct.Memory* returned, %struct.State* nocapture readnone dereferenceable(3376), i64* nocapture, i64, i64)  {
  %6 = inttoptr i64 %4 to i64*
  %7 = load i64, i64* %6
  %8 = add i64 %7, %3
  store i64 %8, i64* %2, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L5PADDQI3VnWI8vec128_tE2VnIS2_ES5_EEP6MemoryS7_R5StateT_T0_T1_(%struct.Memory* readnone returned, %struct.State* nocapture readnone dereferenceable(3376), i8* nocapture, i8* nocapture readonly, i8* nocapture readonly)  {
  %6 = bitcast i8* %3 to <2 x i64>*
  %7 = load <2 x i64>, <2 x i64>* %6, align 1
  %8 = bitcast i8* %4 to <2 x i64>*
  %9 = load <2 x i64>, <2 x i64>* %8, align 1
  %10 = add <2 x i64> %9, %7
  %11 = bitcast i8* %2 to <2 x i64>*
  store <2 x i64> %10, <2 x i64>* %11, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L5PADDQI3VnWI8vec128_tE2VnIS2_E3MVnIS2_EEEP6MemoryS9_R5StateT_T0_T1_(%struct.Memory* returned, %struct.State* nocapture readnone dereferenceable(3376), i8* nocapture, i8* nocapture readonly, i64)  {
  %6 = bitcast i8* %3 to <2 x i64>*
  %7 = load <2 x i64>, <2 x i64>* %6, align 1
  %8 = inttoptr i64 %4 to i64*
  %9 = load i64, i64* %8
  %10 = add i64 %4, 8
  %11 = inttoptr i64 %10 to i64*
  %12 = load i64, i64* %11
  %13 = insertelement <2 x i64> undef, i64 %9, i32 0
  %14 = insertelement <2 x i64> %13, i64 %12, i32 1
  %15 = add <2 x i64> %14, %7
  %16 = bitcast i8* %2 to <2 x i64>*
  store <2 x i64> %15, <2 x i64>* %16, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L6PADDSBI4RVnWI7vec64_tE3RVnIS2_ES5_EEP6MemoryS7_R5StateT_T0_T1_(%struct.Memory* readnone returned, %struct.State* nocapture readnone dereferenceable(3376), i64* nocapture, i64, i64)  {
  %6 = alloca i64, align 8
  %7 = alloca i64, align 8
  %8 = bitcast i64* %7 to %struct.uint8v8_t*
  %9 = alloca i64, align 8
  %10 = bitcast i64* %9 to %struct.uint8v8_t*
  %11 = bitcast i64* %7 to i8*
  call void @llvm.lifetime.start(i64 8, i8* nonnull %11) 
  store i64 %3, i64* %7, align 8
  %12 = bitcast i64* %9 to i8*
  call void @llvm.lifetime.start(i64 8, i8* nonnull %12) 
  store i64 %4, i64* %9, align 8
  %13 = bitcast i64* %6 to i8*
  %14 = bitcast i64* %6 to [8 x i8]*
  %15 = trunc i64 %3 to i16
  %16 = trunc i64 %4 to i16
  %17 = shl i16 %15, 8
  %18 = ashr exact i16 %17, 8
  %19 = shl i16 %16, 8
  %20 = ashr exact i16 %19, 8
  %21 = add nsw i16 %20, %18
  %22 = icmp slt i16 %21, 127
  %23 = select i1 %22, i16 %21, i16 127
  %24 = icmp sgt i16 %21, -128
  %25 = select i1 %24, i16 %21, i16 -128
  %26 = icmp slt i16 %21, 0
  %27 = select i1 %26, i16 %25, i16 %23
  %28 = trunc i16 %27 to i8
  call void @llvm.lifetime.start(i64 8, i8* nonnull %13)
  store i64 0, i64* %6, align 8
  %29 = bitcast i64* %6 to i8*
  store i8 %28, i8* %29, align 8
  %30 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %13)
  %31 = trunc i64 %3 to i16
  %32 = ashr i16 %31, 8
  %33 = trunc i64 %4 to i16
  %34 = ashr i16 %33, 8
  %35 = add nsw i16 %34, %32
  %36 = icmp slt i16 %35, 127
  %37 = select i1 %36, i16 %35, i16 127
  %38 = icmp sgt i16 %35, -128
  %39 = select i1 %38, i16 %35, i16 -128
  %40 = icmp slt i16 %35, 0
  %41 = select i1 %40, i16 %39, i16 %37
  %42 = trunc i16 %41 to i8
  call void @llvm.lifetime.start(i64 8, i8* nonnull %13)
  store i64 %30, i64* %6, align 8
  %43 = getelementptr inbounds [8 x i8], [8 x i8]* %14, i64 0, i64 1
  store i8 %42, i8* %43, align 1
  %44 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %13)
  %45 = lshr i64 %3, 16
  %46 = lshr i64 %4, 16
  %47 = shl nuw nsw i64 %45, 8
  %48 = trunc i64 %47 to i16
  %49 = ashr exact i16 %48, 8
  %50 = shl nuw nsw i64 %46, 8
  %51 = trunc i64 %50 to i16
  %52 = ashr exact i16 %51, 8
  %53 = add nsw i16 %52, %49
  %54 = icmp slt i16 %53, 127
  %55 = select i1 %54, i16 %53, i16 127
  %56 = icmp sgt i16 %53, -128
  %57 = select i1 %56, i16 %53, i16 -128
  %58 = icmp slt i16 %53, 0
  %59 = select i1 %58, i16 %57, i16 %55
  %60 = trunc i16 %59 to i8
  call void @llvm.lifetime.start(i64 8, i8* nonnull %13)
  store i64 %44, i64* %6, align 8
  %61 = getelementptr inbounds [8 x i8], [8 x i8]* %14, i64 0, i64 2
  store i8 %60, i8* %61, align 2
  %62 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %13)
  %63 = getelementptr inbounds %struct.uint8v8_t, %struct.uint8v8_t* %8, i64 0, i32 0, i64 3
  %64 = load i8, i8* %63, align 1
  %65 = getelementptr inbounds %struct.uint8v8_t, %struct.uint8v8_t* %10, i64 0, i32 0, i64 3
  %66 = load i8, i8* %65, align 1
  %67 = sext i8 %64 to i16
  %68 = sext i8 %66 to i16
  %69 = add nsw i16 %68, %67
  %70 = icmp slt i16 %69, 127
  %71 = select i1 %70, i16 %69, i16 127
  %72 = icmp sgt i16 %69, -128
  %73 = select i1 %72, i16 %69, i16 -128
  %74 = icmp slt i16 %69, 0
  %75 = select i1 %74, i16 %73, i16 %71
  %76 = trunc i16 %75 to i8
  call void @llvm.lifetime.start(i64 8, i8* nonnull %13)
  store i64 %62, i64* %6, align 8
  %77 = getelementptr inbounds [8 x i8], [8 x i8]* %14, i64 0, i64 3
  store i8 %76, i8* %77, align 1
  %78 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %13)
  %79 = getelementptr inbounds %struct.uint8v8_t, %struct.uint8v8_t* %8, i64 0, i32 0, i64 4
  %80 = load i8, i8* %79, align 4
  %81 = getelementptr inbounds %struct.uint8v8_t, %struct.uint8v8_t* %10, i64 0, i32 0, i64 4
  %82 = load i8, i8* %81, align 4
  %83 = sext i8 %80 to i16
  %84 = sext i8 %82 to i16
  %85 = add nsw i16 %84, %83
  %86 = icmp slt i16 %85, 127
  %87 = select i1 %86, i16 %85, i16 127
  %88 = icmp sgt i16 %85, -128
  %89 = select i1 %88, i16 %85, i16 -128
  %90 = icmp slt i16 %85, 0
  %91 = select i1 %90, i16 %89, i16 %87
  %92 = trunc i16 %91 to i8
  call void @llvm.lifetime.start(i64 8, i8* nonnull %13)
  store i64 %78, i64* %6, align 8
  %93 = getelementptr inbounds [8 x i8], [8 x i8]* %14, i64 0, i64 4
  store i8 %92, i8* %93, align 4
  %94 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %13)
  %95 = getelementptr inbounds %struct.uint8v8_t, %struct.uint8v8_t* %8, i64 0, i32 0, i64 5
  %96 = load i8, i8* %95, align 1
  %97 = getelementptr inbounds %struct.uint8v8_t, %struct.uint8v8_t* %10, i64 0, i32 0, i64 5
  %98 = load i8, i8* %97, align 1
  %99 = sext i8 %96 to i16
  %100 = sext i8 %98 to i16
  %101 = add nsw i16 %100, %99
  %102 = icmp slt i16 %101, 127
  %103 = select i1 %102, i16 %101, i16 127
  %104 = icmp sgt i16 %101, -128
  %105 = select i1 %104, i16 %101, i16 -128
  %106 = icmp slt i16 %101, 0
  %107 = select i1 %106, i16 %105, i16 %103
  %108 = trunc i16 %107 to i8
  call void @llvm.lifetime.start(i64 8, i8* nonnull %13)
  store i64 %94, i64* %6, align 8
  %109 = getelementptr inbounds [8 x i8], [8 x i8]* %14, i64 0, i64 5
  store i8 %108, i8* %109, align 1
  %110 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %13)
  %111 = getelementptr inbounds %struct.uint8v8_t, %struct.uint8v8_t* %8, i64 0, i32 0, i64 6
  %112 = load i8, i8* %111, align 2
  %113 = getelementptr inbounds %struct.uint8v8_t, %struct.uint8v8_t* %10, i64 0, i32 0, i64 6
  %114 = load i8, i8* %113, align 2
  %115 = sext i8 %112 to i16
  %116 = sext i8 %114 to i16
  %117 = add nsw i16 %116, %115
  %118 = icmp slt i16 %117, 127
  %119 = select i1 %118, i16 %117, i16 127
  %120 = icmp sgt i16 %117, -128
  %121 = select i1 %120, i16 %117, i16 -128
  %122 = icmp slt i16 %117, 0
  %123 = select i1 %122, i16 %121, i16 %119
  %124 = trunc i16 %123 to i8
  call void @llvm.lifetime.start(i64 8, i8* nonnull %13)
  store i64 %110, i64* %6, align 8
  %125 = getelementptr inbounds [8 x i8], [8 x i8]* %14, i64 0, i64 6
  store i8 %124, i8* %125, align 2
  %126 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %13)
  %127 = getelementptr inbounds %struct.uint8v8_t, %struct.uint8v8_t* %8, i64 0, i32 0, i64 7
  %128 = load i8, i8* %127, align 1
  %129 = getelementptr inbounds %struct.uint8v8_t, %struct.uint8v8_t* %10, i64 0, i32 0, i64 7
  %130 = load i8, i8* %129, align 1
  %131 = sext i8 %128 to i16
  %132 = sext i8 %130 to i16
  %133 = add nsw i16 %132, %131
  %134 = icmp slt i16 %133, 127
  %135 = select i1 %134, i16 %133, i16 127
  %136 = icmp sgt i16 %133, -128
  %137 = select i1 %136, i16 %133, i16 -128
  %138 = icmp slt i16 %133, 0
  %139 = select i1 %138, i16 %137, i16 %135
  %140 = trunc i16 %139 to i8
  call void @llvm.lifetime.start(i64 8, i8* nonnull %13)
  store i64 %126, i64* %6, align 8
  %141 = getelementptr inbounds [8 x i8], [8 x i8]* %14, i64 0, i64 7
  store i8 %140, i8* %141, align 1
  %142 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %13)
  %143 = lshr i64 %142, 8
  %144 = lshr i64 %142, 16
  %145 = lshr i64 %142, 24
  %146 = lshr i64 %142, 32
  %147 = lshr i64 %142, 40
  %148 = lshr i64 %142, 48
  %149 = lshr i64 %142, 56
  %150 = trunc i64 %142 to i8
  %151 = trunc i64 %143 to i8
  %152 = trunc i64 %144 to i8
  %153 = trunc i64 %145 to i8
  %154 = trunc i64 %146 to i8
  %155 = trunc i64 %147 to i8
  %156 = trunc i64 %148 to i8
  %157 = trunc i64 %149 to i8
  %158 = bitcast i64* %2 to [8 x i8]*
  %159 = bitcast i64* %2 to i8*
  store i8 %150, i8* %159, align 1
  %160 = getelementptr inbounds [8 x i8], [8 x i8]* %158, i64 0, i64 1
  store i8 %151, i8* %160, align 1
  %161 = getelementptr inbounds [8 x i8], [8 x i8]* %158, i64 0, i64 2
  store i8 %152, i8* %161, align 1
  %162 = getelementptr inbounds [8 x i8], [8 x i8]* %158, i64 0, i64 3
  store i8 %153, i8* %162, align 1
  %163 = getelementptr inbounds [8 x i8], [8 x i8]* %158, i64 0, i64 4
  store i8 %154, i8* %163, align 1
  %164 = getelementptr inbounds [8 x i8], [8 x i8]* %158, i64 0, i64 5
  store i8 %155, i8* %164, align 1
  %165 = getelementptr inbounds [8 x i8], [8 x i8]* %158, i64 0, i64 6
  store i8 %156, i8* %165, align 1
  %166 = getelementptr inbounds [8 x i8], [8 x i8]* %158, i64 0, i64 7
  store i8 %157, i8* %166, align 1
  call void @llvm.lifetime.end(i64 8, i8* nonnull %12) 
  call void @llvm.lifetime.end(i64 8, i8* nonnull %11) 
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L6PADDSBI4RVnWI7vec64_tE3RVnIS2_E3MVnIS2_EEEP6MemoryS9_R5StateT_T0_T1_(%struct.Memory* returned, %struct.State* nocapture readnone dereferenceable(3376), i64* nocapture, i64, i64)  {
  %6 = alloca i64, align 8
  %7 = alloca i64, align 8
  %8 = bitcast i64* %7 to %struct.uint8v8_t*
  %9 = alloca i64, align 8
  %10 = bitcast i64* %9 to %struct.uint8v8_t*
  %11 = bitcast i64* %7 to i8*
  call void @llvm.lifetime.start(i64 8, i8* nonnull %11) 
  store i64 %3, i64* %7, align 8
  %12 = bitcast i64* %9 to i8*
  call void @llvm.lifetime.start(i64 8, i8* nonnull %12) 
  %13 = inttoptr i64 %4 to i8*
  %14 = load i8, i8* %13
  %15 = add i64 %4, 1
  %16 = inttoptr i64 %15 to i8*
  %17 = load i8, i8* %16
  %18 = add i64 %4, 2
  %19 = inttoptr i64 %18 to i8*
  %20 = load i8, i8* %19
  %21 = add i64 %4, 3
  %22 = inttoptr i64 %21 to i8*
  %23 = load i8, i8* %22
  %24 = add i64 %4, 4
  %25 = inttoptr i64 %24 to i8*
  %26 = load i8, i8* %25
  %27 = add i64 %4, 5
  %28 = inttoptr i64 %27 to i8*
  %29 = load i8, i8* %28
  %30 = add i64 %4, 6
  %31 = inttoptr i64 %30 to i8*
  %32 = load i8, i8* %31
  %33 = add i64 %4, 7
  %34 = inttoptr i64 %33 to i8*
  %35 = load i8, i8* %34
  %36 = zext i8 %35 to i64
  %37 = shl nuw i64 %36, 56
  %38 = zext i8 %32 to i64
  %39 = shl nuw nsw i64 %38, 48
  %40 = zext i8 %29 to i64
  %41 = shl nuw nsw i64 %40, 40
  %42 = zext i8 %26 to i64
  %43 = shl nuw nsw i64 %42, 32
  %44 = zext i8 %23 to i64
  %45 = shl nuw nsw i64 %44, 24
  %46 = zext i8 %20 to i64
  %47 = shl nuw nsw i64 %46, 16
  %48 = zext i8 %17 to i64
  %49 = shl nuw nsw i64 %48, 8
  %50 = zext i8 %14 to i64
  %51 = or i64 %49, %50
  %52 = or i64 %51, %47
  %53 = or i64 %52, %45
  %54 = or i64 %53, %43
  %55 = or i64 %54, %41
  %56 = or i64 %55, %39
  %57 = or i64 %56, %37
  store i64 %57, i64* %9, align 8
  %58 = bitcast i64* %6 to i8*
  %59 = bitcast i64* %6 to [8 x i8]*
  %60 = trunc i64 %3 to i16
  %61 = shl i16 %60, 8
  %62 = ashr exact i16 %61, 8
  %63 = sext i8 %14 to i16
  %64 = add nsw i16 %63, %62
  %65 = icmp slt i16 %64, 127
  %66 = select i1 %65, i16 %64, i16 127
  %67 = icmp sgt i16 %64, -128
  %68 = select i1 %67, i16 %64, i16 -128
  %69 = icmp slt i16 %64, 0
  %70 = select i1 %69, i16 %68, i16 %66
  %71 = trunc i16 %70 to i8
  call void @llvm.lifetime.start(i64 8, i8* nonnull %58)
  store i64 0, i64* %6, align 8
  %72 = bitcast i64* %6 to i8*
  store i8 %71, i8* %72, align 8
  %73 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %58)
  %74 = trunc i64 %3 to i16
  %75 = ashr i16 %74, 8
  %76 = sext i8 %17 to i16
  %77 = add nsw i16 %76, %75
  %78 = icmp slt i16 %77, 127
  %79 = select i1 %78, i16 %77, i16 127
  %80 = icmp sgt i16 %77, -128
  %81 = select i1 %80, i16 %77, i16 -128
  %82 = icmp slt i16 %77, 0
  %83 = select i1 %82, i16 %81, i16 %79
  %84 = trunc i16 %83 to i8
  call void @llvm.lifetime.start(i64 8, i8* nonnull %58)
  store i64 %73, i64* %6, align 8
  %85 = getelementptr inbounds [8 x i8], [8 x i8]* %59, i64 0, i64 1
  store i8 %84, i8* %85, align 1
  %86 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %58)
  %87 = getelementptr inbounds %struct.uint8v8_t, %struct.uint8v8_t* %8, i64 0, i32 0, i64 2
  %88 = load i8, i8* %87, align 2
  %89 = sext i8 %88 to i16
  %90 = sext i8 %20 to i16
  %91 = add nsw i16 %90, %89
  %92 = icmp slt i16 %91, 127
  %93 = select i1 %92, i16 %91, i16 127
  %94 = icmp sgt i16 %91, -128
  %95 = select i1 %94, i16 %91, i16 -128
  %96 = icmp slt i16 %91, 0
  %97 = select i1 %96, i16 %95, i16 %93
  %98 = trunc i16 %97 to i8
  call void @llvm.lifetime.start(i64 8, i8* nonnull %58)
  store i64 %86, i64* %6, align 8
  %99 = getelementptr inbounds [8 x i8], [8 x i8]* %59, i64 0, i64 2
  store i8 %98, i8* %99, align 2
  %100 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %58)
  %101 = getelementptr inbounds %struct.uint8v8_t, %struct.uint8v8_t* %8, i64 0, i32 0, i64 3
  %102 = load i8, i8* %101, align 1
  %103 = getelementptr inbounds %struct.uint8v8_t, %struct.uint8v8_t* %10, i64 0, i32 0, i64 3
  %104 = load i8, i8* %103, align 1
  %105 = sext i8 %102 to i16
  %106 = sext i8 %104 to i16
  %107 = add nsw i16 %106, %105
  %108 = icmp slt i16 %107, 127
  %109 = select i1 %108, i16 %107, i16 127
  %110 = icmp sgt i16 %107, -128
  %111 = select i1 %110, i16 %107, i16 -128
  %112 = icmp slt i16 %107, 0
  %113 = select i1 %112, i16 %111, i16 %109
  %114 = trunc i16 %113 to i8
  call void @llvm.lifetime.start(i64 8, i8* nonnull %58)
  store i64 %100, i64* %6, align 8
  %115 = getelementptr inbounds [8 x i8], [8 x i8]* %59, i64 0, i64 3
  store i8 %114, i8* %115, align 1
  %116 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %58)
  %117 = getelementptr inbounds %struct.uint8v8_t, %struct.uint8v8_t* %8, i64 0, i32 0, i64 4
  %118 = load i8, i8* %117, align 4
  %119 = getelementptr inbounds %struct.uint8v8_t, %struct.uint8v8_t* %10, i64 0, i32 0, i64 4
  %120 = load i8, i8* %119, align 4
  %121 = sext i8 %118 to i16
  %122 = sext i8 %120 to i16
  %123 = add nsw i16 %122, %121
  %124 = icmp slt i16 %123, 127
  %125 = select i1 %124, i16 %123, i16 127
  %126 = icmp sgt i16 %123, -128
  %127 = select i1 %126, i16 %123, i16 -128
  %128 = icmp slt i16 %123, 0
  %129 = select i1 %128, i16 %127, i16 %125
  %130 = trunc i16 %129 to i8
  call void @llvm.lifetime.start(i64 8, i8* nonnull %58)
  store i64 %116, i64* %6, align 8
  %131 = getelementptr inbounds [8 x i8], [8 x i8]* %59, i64 0, i64 4
  store i8 %130, i8* %131, align 4
  %132 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %58)
  %133 = getelementptr inbounds %struct.uint8v8_t, %struct.uint8v8_t* %8, i64 0, i32 0, i64 5
  %134 = load i8, i8* %133, align 1
  %135 = getelementptr inbounds %struct.uint8v8_t, %struct.uint8v8_t* %10, i64 0, i32 0, i64 5
  %136 = load i8, i8* %135, align 1
  %137 = sext i8 %134 to i16
  %138 = sext i8 %136 to i16
  %139 = add nsw i16 %138, %137
  %140 = icmp slt i16 %139, 127
  %141 = select i1 %140, i16 %139, i16 127
  %142 = icmp sgt i16 %139, -128
  %143 = select i1 %142, i16 %139, i16 -128
  %144 = icmp slt i16 %139, 0
  %145 = select i1 %144, i16 %143, i16 %141
  %146 = trunc i16 %145 to i8
  call void @llvm.lifetime.start(i64 8, i8* nonnull %58)
  store i64 %132, i64* %6, align 8
  %147 = getelementptr inbounds [8 x i8], [8 x i8]* %59, i64 0, i64 5
  store i8 %146, i8* %147, align 1
  %148 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %58)
  %149 = getelementptr inbounds %struct.uint8v8_t, %struct.uint8v8_t* %8, i64 0, i32 0, i64 6
  %150 = load i8, i8* %149, align 2
  %151 = getelementptr inbounds %struct.uint8v8_t, %struct.uint8v8_t* %10, i64 0, i32 0, i64 6
  %152 = load i8, i8* %151, align 2
  %153 = sext i8 %150 to i16
  %154 = sext i8 %152 to i16
  %155 = add nsw i16 %154, %153
  %156 = icmp slt i16 %155, 127
  %157 = select i1 %156, i16 %155, i16 127
  %158 = icmp sgt i16 %155, -128
  %159 = select i1 %158, i16 %155, i16 -128
  %160 = icmp slt i16 %155, 0
  %161 = select i1 %160, i16 %159, i16 %157
  %162 = trunc i16 %161 to i8
  call void @llvm.lifetime.start(i64 8, i8* nonnull %58)
  store i64 %148, i64* %6, align 8
  %163 = getelementptr inbounds [8 x i8], [8 x i8]* %59, i64 0, i64 6
  store i8 %162, i8* %163, align 2
  %164 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %58)
  %165 = getelementptr inbounds %struct.uint8v8_t, %struct.uint8v8_t* %8, i64 0, i32 0, i64 7
  %166 = load i8, i8* %165, align 1
  %167 = getelementptr inbounds %struct.uint8v8_t, %struct.uint8v8_t* %10, i64 0, i32 0, i64 7
  %168 = load i8, i8* %167, align 1
  %169 = sext i8 %166 to i16
  %170 = sext i8 %168 to i16
  %171 = add nsw i16 %170, %169
  %172 = icmp slt i16 %171, 127
  %173 = select i1 %172, i16 %171, i16 127
  %174 = icmp sgt i16 %171, -128
  %175 = select i1 %174, i16 %171, i16 -128
  %176 = icmp slt i16 %171, 0
  %177 = select i1 %176, i16 %175, i16 %173
  %178 = trunc i16 %177 to i8
  call void @llvm.lifetime.start(i64 8, i8* nonnull %58)
  store i64 %164, i64* %6, align 8
  %179 = getelementptr inbounds [8 x i8], [8 x i8]* %59, i64 0, i64 7
  store i8 %178, i8* %179, align 1
  %180 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %58)
  %181 = lshr i64 %180, 8
  %182 = lshr i64 %180, 16
  %183 = lshr i64 %180, 24
  %184 = lshr i64 %180, 32
  %185 = lshr i64 %180, 40
  %186 = lshr i64 %180, 48
  %187 = lshr i64 %180, 56
  %188 = trunc i64 %180 to i8
  %189 = trunc i64 %181 to i8
  %190 = trunc i64 %182 to i8
  %191 = trunc i64 %183 to i8
  %192 = trunc i64 %184 to i8
  %193 = trunc i64 %185 to i8
  %194 = trunc i64 %186 to i8
  %195 = trunc i64 %187 to i8
  %196 = bitcast i64* %2 to [8 x i8]*
  %197 = bitcast i64* %2 to i8*
  store i8 %188, i8* %197, align 1
  %198 = getelementptr inbounds [8 x i8], [8 x i8]* %196, i64 0, i64 1
  store i8 %189, i8* %198, align 1
  %199 = getelementptr inbounds [8 x i8], [8 x i8]* %196, i64 0, i64 2
  store i8 %190, i8* %199, align 1
  %200 = getelementptr inbounds [8 x i8], [8 x i8]* %196, i64 0, i64 3
  store i8 %191, i8* %200, align 1
  %201 = getelementptr inbounds [8 x i8], [8 x i8]* %196, i64 0, i64 4
  store i8 %192, i8* %201, align 1
  %202 = getelementptr inbounds [8 x i8], [8 x i8]* %196, i64 0, i64 5
  store i8 %193, i8* %202, align 1
  %203 = getelementptr inbounds [8 x i8], [8 x i8]* %196, i64 0, i64 6
  store i8 %194, i8* %203, align 1
  %204 = getelementptr inbounds [8 x i8], [8 x i8]* %196, i64 0, i64 7
  store i8 %195, i8* %204, align 1
  call void @llvm.lifetime.end(i64 8, i8* nonnull %12) 
  call void @llvm.lifetime.end(i64 8, i8* nonnull %11) 
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L6PADDSBI3VnWI8vec128_tE2VnIS2_ES5_EEP6MemoryS7_R5StateT_T0_T1_(%struct.Memory* readnone returned, %struct.State* nocapture readnone dereferenceable(3376), i8* nocapture, i8* nocapture readonly, i8* nocapture readonly)  {
  %6 = alloca <2 x i64>, align 16
  %7 = bitcast <2 x i64>* %6 to { i64, i64 }*
  %8 = alloca <2 x i64>, align 16
  %9 = bitcast <2 x i64>* %8 to { i64, i64 }*
  %10 = bitcast <2 x i64>* %8 to %struct.uint8v16_t*
  %11 = alloca <2 x i64>, align 16
  %12 = bitcast <2 x i64>* %11 to { i64, i64 }*
  %13 = bitcast <2 x i64>* %11 to %struct.uint8v16_t*
  %14 = bitcast <2 x i64>* %8 to i8*
  call void @llvm.lifetime.start(i64 16, i8* nonnull %14) 
  %15 = bitcast i8* %3 to <2 x i64>*
  %16 = load <2 x i64>, <2 x i64>* %15, align 1
  store <2 x i64> %16, <2 x i64>* %8, align 16
  %17 = bitcast <2 x i64>* %11 to i8*
  call void @llvm.lifetime.start(i64 16, i8* nonnull %17) 
  %18 = bitcast i8* %4 to <2 x i64>*
  %19 = load <2 x i64>, <2 x i64>* %18, align 1
  store <2 x i64> %19, <2 x i64>* %11, align 16
  %20 = bitcast <2 x i64>* %6 to i8*
  %21 = getelementptr inbounds <2 x i64>, <2 x i64>* %6, i64 0, i64 0
  %22 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %7, i64 0, i32 1
  %23 = bitcast <2 x i64>* %6 to [16 x i8]*
  %24 = extractelement <2 x i64> %16, i32 0
  %25 = trunc i64 %24 to i16
  %26 = extractelement <2 x i64> %19, i32 0
  %27 = trunc i64 %26 to i16
  %28 = shl i16 %25, 8
  %29 = ashr exact i16 %28, 8
  %30 = shl i16 %27, 8
  %31 = ashr exact i16 %30, 8
  %32 = add nsw i16 %31, %29
  %33 = icmp slt i16 %32, 127
  %34 = select i1 %33, i16 %32, i16 127
  %35 = icmp sgt i16 %32, -128
  %36 = select i1 %35, i16 %32, i16 -128
  %37 = icmp slt i16 %32, 0
  %38 = select i1 %37, i16 %36, i16 %34
  %39 = trunc i16 %38 to i8
  call void @llvm.lifetime.start(i64 16, i8* nonnull %20)
  store <2 x i64> zeroinitializer, <2 x i64>* %6, align 16
  %40 = bitcast <2 x i64>* %6 to i8*
  store i8 %39, i8* %40, align 16
  %41 = load i64, i64* %21, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %20)
  %42 = trunc i64 %24 to i16
  %43 = ashr i16 %42, 8
  %44 = trunc i64 %26 to i16
  %45 = ashr i16 %44, 8
  %46 = add nsw i16 %45, %43
  %47 = icmp slt i16 %46, 127
  %48 = select i1 %47, i16 %46, i16 127
  %49 = icmp sgt i16 %46, -128
  %50 = select i1 %49, i16 %46, i16 -128
  %51 = icmp slt i16 %46, 0
  %52 = select i1 %51, i16 %50, i16 %48
  %53 = trunc i16 %52 to i8
  call void @llvm.lifetime.start(i64 16, i8* nonnull %20)
  store i64 %41, i64* %21, align 16
  store i64 0, i64* %22, align 8
  %54 = getelementptr inbounds [16 x i8], [16 x i8]* %23, i64 0, i64 1
  store i8 %53, i8* %54, align 1
  %55 = load i64, i64* %21, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %20)
  %56 = lshr i64 %24, 16
  %57 = lshr i64 %26, 16
  %58 = shl nuw nsw i64 %56, 8
  %59 = trunc i64 %58 to i16
  %60 = ashr exact i16 %59, 8
  %61 = shl nuw nsw i64 %57, 8
  %62 = trunc i64 %61 to i16
  %63 = ashr exact i16 %62, 8
  %64 = add nsw i16 %63, %60
  %65 = icmp slt i16 %64, 127
  %66 = select i1 %65, i16 %64, i16 127
  %67 = icmp sgt i16 %64, -128
  %68 = select i1 %67, i16 %64, i16 -128
  %69 = icmp slt i16 %64, 0
  %70 = select i1 %69, i16 %68, i16 %66
  %71 = trunc i16 %70 to i8
  call void @llvm.lifetime.start(i64 16, i8* nonnull %20)
  store i64 %55, i64* %21, align 16
  store i64 0, i64* %22, align 8
  %72 = getelementptr inbounds [16 x i8], [16 x i8]* %23, i64 0, i64 2
  store i8 %71, i8* %72, align 2
  %73 = load i64, i64* %21, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %20)
  %74 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %10, i64 0, i32 0, i64 3
  %75 = load i8, i8* %74, align 1
  %76 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %13, i64 0, i32 0, i64 3
  %77 = load i8, i8* %76, align 1
  %78 = sext i8 %75 to i16
  %79 = sext i8 %77 to i16
  %80 = add nsw i16 %79, %78
  %81 = icmp slt i16 %80, 127
  %82 = select i1 %81, i16 %80, i16 127
  %83 = icmp sgt i16 %80, -128
  %84 = select i1 %83, i16 %80, i16 -128
  %85 = icmp slt i16 %80, 0
  %86 = select i1 %85, i16 %84, i16 %82
  %87 = trunc i16 %86 to i8
  call void @llvm.lifetime.start(i64 16, i8* nonnull %20)
  store i64 %73, i64* %21, align 16
  store i64 0, i64* %22, align 8
  %88 = getelementptr inbounds [16 x i8], [16 x i8]* %23, i64 0, i64 3
  store i8 %87, i8* %88, align 1
  %89 = load i64, i64* %21, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %20)
  %90 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %10, i64 0, i32 0, i64 4
  %91 = load i8, i8* %90, align 4
  %92 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %13, i64 0, i32 0, i64 4
  %93 = load i8, i8* %92, align 4
  %94 = sext i8 %91 to i16
  %95 = sext i8 %93 to i16
  %96 = add nsw i16 %95, %94
  %97 = icmp slt i16 %96, 127
  %98 = select i1 %97, i16 %96, i16 127
  %99 = icmp sgt i16 %96, -128
  %100 = select i1 %99, i16 %96, i16 -128
  %101 = icmp slt i16 %96, 0
  %102 = select i1 %101, i16 %100, i16 %98
  %103 = trunc i16 %102 to i8
  call void @llvm.lifetime.start(i64 16, i8* nonnull %20)
  store i64 %89, i64* %21, align 16
  store i64 0, i64* %22, align 8
  %104 = getelementptr inbounds [16 x i8], [16 x i8]* %23, i64 0, i64 4
  store i8 %103, i8* %104, align 4
  %105 = load i64, i64* %21, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %20)
  %106 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %10, i64 0, i32 0, i64 5
  %107 = load i8, i8* %106, align 1
  %108 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %13, i64 0, i32 0, i64 5
  %109 = load i8, i8* %108, align 1
  %110 = sext i8 %107 to i16
  %111 = sext i8 %109 to i16
  %112 = add nsw i16 %111, %110
  %113 = icmp slt i16 %112, 127
  %114 = select i1 %113, i16 %112, i16 127
  %115 = icmp sgt i16 %112, -128
  %116 = select i1 %115, i16 %112, i16 -128
  %117 = icmp slt i16 %112, 0
  %118 = select i1 %117, i16 %116, i16 %114
  %119 = trunc i16 %118 to i8
  call void @llvm.lifetime.start(i64 16, i8* nonnull %20)
  store i64 %105, i64* %21, align 16
  store i64 0, i64* %22, align 8
  %120 = getelementptr inbounds [16 x i8], [16 x i8]* %23, i64 0, i64 5
  store i8 %119, i8* %120, align 1
  %121 = load i64, i64* %21, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %20)
  %122 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %10, i64 0, i32 0, i64 6
  %123 = load i8, i8* %122, align 2
  %124 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %13, i64 0, i32 0, i64 6
  %125 = load i8, i8* %124, align 2
  %126 = sext i8 %123 to i16
  %127 = sext i8 %125 to i16
  %128 = add nsw i16 %127, %126
  %129 = icmp slt i16 %128, 127
  %130 = select i1 %129, i16 %128, i16 127
  %131 = icmp sgt i16 %128, -128
  %132 = select i1 %131, i16 %128, i16 -128
  %133 = icmp slt i16 %128, 0
  %134 = select i1 %133, i16 %132, i16 %130
  %135 = trunc i16 %134 to i8
  call void @llvm.lifetime.start(i64 16, i8* nonnull %20)
  store i64 %121, i64* %21, align 16
  store i64 0, i64* %22, align 8
  %136 = getelementptr inbounds [16 x i8], [16 x i8]* %23, i64 0, i64 6
  store i8 %135, i8* %136, align 2
  %137 = load i64, i64* %21, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %20)
  %138 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %10, i64 0, i32 0, i64 7
  %139 = load i8, i8* %138, align 1
  %140 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %13, i64 0, i32 0, i64 7
  %141 = load i8, i8* %140, align 1
  %142 = sext i8 %139 to i16
  %143 = sext i8 %141 to i16
  %144 = add nsw i16 %143, %142
  %145 = icmp slt i16 %144, 127
  %146 = select i1 %145, i16 %144, i16 127
  %147 = icmp sgt i16 %144, -128
  %148 = select i1 %147, i16 %144, i16 -128
  %149 = icmp slt i16 %144, 0
  %150 = select i1 %149, i16 %148, i16 %146
  %151 = trunc i16 %150 to i8
  call void @llvm.lifetime.start(i64 16, i8* nonnull %20)
  store i64 %137, i64* %21, align 16
  store i64 0, i64* %22, align 8
  %152 = getelementptr inbounds [16 x i8], [16 x i8]* %23, i64 0, i64 7
  store i8 %151, i8* %152, align 1
  %153 = load i64, i64* %21, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %20)
  %154 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %9, i64 0, i32 1
  %155 = bitcast i64* %154 to i8*
  %156 = load i8, i8* %155, align 8
  %157 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %12, i64 0, i32 1
  %158 = bitcast i64* %157 to i8*
  %159 = load i8, i8* %158, align 8
  %160 = sext i8 %156 to i16
  %161 = sext i8 %159 to i16
  %162 = add nsw i16 %161, %160
  %163 = icmp slt i16 %162, 127
  %164 = select i1 %163, i16 %162, i16 127
  %165 = icmp sgt i16 %162, -128
  %166 = select i1 %165, i16 %162, i16 -128
  %167 = icmp slt i16 %162, 0
  %168 = select i1 %167, i16 %166, i16 %164
  %169 = trunc i16 %168 to i8
  call void @llvm.lifetime.start(i64 16, i8* nonnull %20)
  store i64 %153, i64* %21, align 16
  store i64 0, i64* %22, align 8
  %170 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %7, i64 0, i32 1
  %171 = bitcast i64* %170 to i8*
  store i8 %169, i8* %171, align 8
  %172 = load i64, i64* %22, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %20)
  %173 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %10, i64 0, i32 0, i64 9
  %174 = load i8, i8* %173, align 1
  %175 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %13, i64 0, i32 0, i64 9
  %176 = load i8, i8* %175, align 1
  %177 = sext i8 %174 to i16
  %178 = sext i8 %176 to i16
  %179 = add nsw i16 %178, %177
  %180 = icmp slt i16 %179, 127
  %181 = select i1 %180, i16 %179, i16 127
  %182 = icmp sgt i16 %179, -128
  %183 = select i1 %182, i16 %179, i16 -128
  %184 = icmp slt i16 %179, 0
  %185 = select i1 %184, i16 %183, i16 %181
  %186 = trunc i16 %185 to i8
  call void @llvm.lifetime.start(i64 16, i8* nonnull %20)
  store i64 %153, i64* %21, align 16
  store i64 %172, i64* %22, align 8
  %187 = getelementptr inbounds [16 x i8], [16 x i8]* %23, i64 0, i64 9
  store i8 %186, i8* %187, align 1
  %188 = load i64, i64* %22, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %20)
  %189 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %10, i64 0, i32 0, i64 10
  %190 = load i8, i8* %189, align 2
  %191 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %13, i64 0, i32 0, i64 10
  %192 = load i8, i8* %191, align 2
  %193 = sext i8 %190 to i16
  %194 = sext i8 %192 to i16
  %195 = add nsw i16 %194, %193
  %196 = icmp slt i16 %195, 127
  %197 = select i1 %196, i16 %195, i16 127
  %198 = icmp sgt i16 %195, -128
  %199 = select i1 %198, i16 %195, i16 -128
  %200 = icmp slt i16 %195, 0
  %201 = select i1 %200, i16 %199, i16 %197
  %202 = trunc i16 %201 to i8
  call void @llvm.lifetime.start(i64 16, i8* nonnull %20)
  store i64 %153, i64* %21, align 16
  store i64 %188, i64* %22, align 8
  %203 = getelementptr inbounds [16 x i8], [16 x i8]* %23, i64 0, i64 10
  store i8 %202, i8* %203, align 2
  %204 = load i64, i64* %22, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %20)
  %205 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %10, i64 0, i32 0, i64 11
  %206 = load i8, i8* %205, align 1
  %207 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %13, i64 0, i32 0, i64 11
  %208 = load i8, i8* %207, align 1
  %209 = sext i8 %206 to i16
  %210 = sext i8 %208 to i16
  %211 = add nsw i16 %210, %209
  %212 = icmp slt i16 %211, 127
  %213 = select i1 %212, i16 %211, i16 127
  %214 = icmp sgt i16 %211, -128
  %215 = select i1 %214, i16 %211, i16 -128
  %216 = icmp slt i16 %211, 0
  %217 = select i1 %216, i16 %215, i16 %213
  %218 = trunc i16 %217 to i8
  call void @llvm.lifetime.start(i64 16, i8* nonnull %20)
  store i64 %153, i64* %21, align 16
  store i64 %204, i64* %22, align 8
  %219 = getelementptr inbounds [16 x i8], [16 x i8]* %23, i64 0, i64 11
  store i8 %218, i8* %219, align 1
  %220 = load i64, i64* %22, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %20)
  %221 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %10, i64 0, i32 0, i64 12
  %222 = load i8, i8* %221, align 4
  %223 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %13, i64 0, i32 0, i64 12
  %224 = load i8, i8* %223, align 4
  %225 = sext i8 %222 to i16
  %226 = sext i8 %224 to i16
  %227 = add nsw i16 %226, %225
  %228 = icmp slt i16 %227, 127
  %229 = select i1 %228, i16 %227, i16 127
  %230 = icmp sgt i16 %227, -128
  %231 = select i1 %230, i16 %227, i16 -128
  %232 = icmp slt i16 %227, 0
  %233 = select i1 %232, i16 %231, i16 %229
  %234 = trunc i16 %233 to i8
  call void @llvm.lifetime.start(i64 16, i8* nonnull %20)
  store i64 %153, i64* %21, align 16
  store i64 %220, i64* %22, align 8
  %235 = getelementptr inbounds [16 x i8], [16 x i8]* %23, i64 0, i64 12
  store i8 %234, i8* %235, align 4
  %236 = load i64, i64* %22, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %20)
  %237 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %10, i64 0, i32 0, i64 13
  %238 = load i8, i8* %237, align 1
  %239 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %13, i64 0, i32 0, i64 13
  %240 = load i8, i8* %239, align 1
  %241 = sext i8 %238 to i16
  %242 = sext i8 %240 to i16
  %243 = add nsw i16 %242, %241
  %244 = icmp slt i16 %243, 127
  %245 = select i1 %244, i16 %243, i16 127
  %246 = icmp sgt i16 %243, -128
  %247 = select i1 %246, i16 %243, i16 -128
  %248 = icmp slt i16 %243, 0
  %249 = select i1 %248, i16 %247, i16 %245
  %250 = trunc i16 %249 to i8
  call void @llvm.lifetime.start(i64 16, i8* nonnull %20)
  store i64 %153, i64* %21, align 16
  store i64 %236, i64* %22, align 8
  %251 = getelementptr inbounds [16 x i8], [16 x i8]* %23, i64 0, i64 13
  store i8 %250, i8* %251, align 1
  %252 = load i64, i64* %22, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %20)
  %253 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %10, i64 0, i32 0, i64 14
  %254 = load i8, i8* %253, align 2
  %255 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %13, i64 0, i32 0, i64 14
  %256 = load i8, i8* %255, align 2
  %257 = sext i8 %254 to i16
  %258 = sext i8 %256 to i16
  %259 = add nsw i16 %258, %257
  %260 = icmp slt i16 %259, 127
  %261 = select i1 %260, i16 %259, i16 127
  %262 = icmp sgt i16 %259, -128
  %263 = select i1 %262, i16 %259, i16 -128
  %264 = icmp slt i16 %259, 0
  %265 = select i1 %264, i16 %263, i16 %261
  %266 = trunc i16 %265 to i8
  call void @llvm.lifetime.start(i64 16, i8* nonnull %20)
  store i64 %153, i64* %21, align 16
  store i64 %252, i64* %22, align 8
  %267 = getelementptr inbounds [16 x i8], [16 x i8]* %23, i64 0, i64 14
  store i8 %266, i8* %267, align 2
  %268 = load i64, i64* %22, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %20)
  %269 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %10, i64 0, i32 0, i64 15
  %270 = load i8, i8* %269, align 1
  %271 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %13, i64 0, i32 0, i64 15
  %272 = load i8, i8* %271, align 1
  %273 = sext i8 %270 to i16
  %274 = sext i8 %272 to i16
  %275 = add nsw i16 %274, %273
  %276 = icmp slt i16 %275, 127
  %277 = select i1 %276, i16 %275, i16 127
  %278 = icmp sgt i16 %275, -128
  %279 = select i1 %278, i16 %275, i16 -128
  %280 = icmp slt i16 %275, 0
  %281 = select i1 %280, i16 %279, i16 %277
  %282 = trunc i16 %281 to i8
  call void @llvm.lifetime.start(i64 16, i8* nonnull %20)
  store i64 %153, i64* %21, align 16
  store i64 %268, i64* %22, align 8
  %283 = getelementptr inbounds [16 x i8], [16 x i8]* %23, i64 0, i64 15
  store i8 %282, i8* %283, align 1
  %284 = load i64, i64* %22, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %20)
  %285 = lshr i64 %153, 8
  %286 = lshr i64 %153, 16
  %287 = lshr i64 %153, 24
  %288 = lshr i64 %153, 32
  %289 = lshr i64 %153, 40
  %290 = lshr i64 %153, 48
  %291 = lshr i64 %153, 56
  %292 = trunc i64 %153 to i8
  %293 = trunc i64 %285 to i8
  %294 = trunc i64 %286 to i8
  %295 = trunc i64 %287 to i8
  %296 = trunc i64 %288 to i8
  %297 = trunc i64 %289 to i8
  %298 = trunc i64 %290 to i8
  %299 = trunc i64 %291 to i8
  store i8 %292, i8* %2, align 1
  %300 = getelementptr inbounds i8, i8* %2, i64 1
  store i8 %293, i8* %300, align 1
  %301 = getelementptr inbounds i8, i8* %2, i64 2
  store i8 %294, i8* %301, align 1
  %302 = getelementptr inbounds i8, i8* %2, i64 3
  store i8 %295, i8* %302, align 1
  %303 = getelementptr inbounds i8, i8* %2, i64 4
  store i8 %296, i8* %303, align 1
  %304 = getelementptr inbounds i8, i8* %2, i64 5
  store i8 %297, i8* %304, align 1
  %305 = getelementptr inbounds i8, i8* %2, i64 6
  store i8 %298, i8* %305, align 1
  %306 = getelementptr inbounds i8, i8* %2, i64 7
  store i8 %299, i8* %306, align 1
  %307 = trunc i64 %284 to i8
  %308 = getelementptr inbounds i8, i8* %2, i64 8
  store i8 %307, i8* %308, align 1
  %309 = lshr i64 %284, 8
  %310 = trunc i64 %309 to i8
  %311 = getelementptr inbounds i8, i8* %2, i64 9
  store i8 %310, i8* %311, align 1
  %312 = lshr i64 %284, 16
  %313 = trunc i64 %312 to i8
  %314 = getelementptr inbounds i8, i8* %2, i64 10
  store i8 %313, i8* %314, align 1
  %315 = lshr i64 %284, 24
  %316 = trunc i64 %315 to i8
  %317 = getelementptr inbounds i8, i8* %2, i64 11
  store i8 %316, i8* %317, align 1
  %318 = lshr i64 %284, 32
  %319 = trunc i64 %318 to i8
  %320 = getelementptr inbounds i8, i8* %2, i64 12
  store i8 %319, i8* %320, align 1
  %321 = lshr i64 %284, 40
  %322 = trunc i64 %321 to i8
  %323 = getelementptr inbounds i8, i8* %2, i64 13
  store i8 %322, i8* %323, align 1
  %324 = lshr i64 %284, 48
  %325 = trunc i64 %324 to i8
  %326 = getelementptr inbounds i8, i8* %2, i64 14
  store i8 %325, i8* %326, align 1
  %327 = lshr i64 %284, 56
  %328 = trunc i64 %327 to i8
  %329 = getelementptr inbounds i8, i8* %2, i64 15
  store i8 %328, i8* %329, align 1
  call void @llvm.lifetime.end(i64 16, i8* nonnull %17) 
  call void @llvm.lifetime.end(i64 16, i8* nonnull %14) 
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L6PADDSBI3VnWI8vec128_tE2VnIS2_E3MVnIS2_EEEP6MemoryS9_R5StateT_T0_T1_(%struct.Memory* returned, %struct.State* nocapture readnone dereferenceable(3376), i8* nocapture, i8* nocapture readonly, i64)  {
  %6 = alloca <2 x i64>, align 16
  %7 = bitcast <2 x i64>* %6 to { i64, i64 }*
  %8 = alloca <2 x i64>, align 16
  %9 = bitcast <2 x i64>* %8 to { i64, i64 }*
  %10 = bitcast <2 x i64>* %8 to %struct.uint8v16_t*
  %11 = alloca <2 x i64>, align 16
  %12 = bitcast <2 x i64>* %11 to { i64, i64 }*
  %13 = bitcast <2 x i64>* %11 to %struct.uint8v16_t*
  %14 = bitcast <2 x i64>* %8 to i8*
  call void @llvm.lifetime.start(i64 16, i8* nonnull %14) 
  %15 = bitcast i8* %3 to <2 x i64>*
  %16 = load <2 x i64>, <2 x i64>* %15, align 1
  store <2 x i64> %16, <2 x i64>* %8, align 16
  %17 = bitcast <2 x i64>* %11 to i8*
  call void @llvm.lifetime.start(i64 16, i8* nonnull %17) 
  %18 = inttoptr i64 %4 to i8*
  %19 = load i8, i8* %18
  %20 = add i64 %4, 1
  %21 = inttoptr i64 %20 to i8*
  %22 = load i8, i8* %21
  %23 = add i64 %4, 2
  %24 = inttoptr i64 %23 to i8*
  %25 = load i8, i8* %24
  %26 = add i64 %4, 3
  %27 = inttoptr i64 %26 to i8*
  %28 = load i8, i8* %27
  %29 = add i64 %4, 4
  %30 = inttoptr i64 %29 to i8*
  %31 = load i8, i8* %30
  %32 = add i64 %4, 5
  %33 = inttoptr i64 %32 to i8*
  %34 = load i8, i8* %33
  %35 = add i64 %4, 6
  %36 = inttoptr i64 %35 to i8*
  %37 = load i8, i8* %36
  %38 = add i64 %4, 7
  %39 = inttoptr i64 %38 to i8*
  %40 = load i8, i8* %39
  %41 = add i64 %4, 8
  %42 = inttoptr i64 %41 to i8*
  %43 = load i8, i8* %42
  %44 = add i64 %4, 9
  %45 = inttoptr i64 %44 to i8*
  %46 = load i8, i8* %45
  %47 = add i64 %4, 10
  %48 = inttoptr i64 %47 to i8*
  %49 = load i8, i8* %48
  %50 = add i64 %4, 11
  %51 = inttoptr i64 %50 to i8*
  %52 = load i8, i8* %51
  %53 = add i64 %4, 12
  %54 = inttoptr i64 %53 to i8*
  %55 = load i8, i8* %54
  %56 = add i64 %4, 13
  %57 = inttoptr i64 %56 to i8*
  %58 = load i8, i8* %57
  %59 = add i64 %4, 14
  %60 = inttoptr i64 %59 to i8*
  %61 = load i8, i8* %60
  %62 = add i64 %4, 15
  %63 = inttoptr i64 %62 to i8*
  %64 = load i8, i8* %63
  %65 = insertelement <2 x i8> undef, i8 %40, i32 0
  %66 = insertelement <2 x i8> %65, i8 %64, i32 1
  %67 = zext <2 x i8> %66 to <2 x i64>
  %68 = shl nuw <2 x i64> %67, <i64 56, i64 56>
  %69 = insertelement <2 x i8> undef, i8 %37, i32 0
  %70 = insertelement <2 x i8> %69, i8 %61, i32 1
  %71 = zext <2 x i8> %70 to <2 x i64>
  %72 = shl nuw nsw <2 x i64> %71, <i64 48, i64 48>
  %73 = insertelement <2 x i8> undef, i8 %34, i32 0
  %74 = insertelement <2 x i8> %73, i8 %58, i32 1
  %75 = zext <2 x i8> %74 to <2 x i64>
  %76 = shl nuw nsw <2 x i64> %75, <i64 40, i64 40>
  %77 = insertelement <2 x i8> undef, i8 %31, i32 0
  %78 = insertelement <2 x i8> %77, i8 %55, i32 1
  %79 = zext <2 x i8> %78 to <2 x i64>
  %80 = shl nuw nsw <2 x i64> %79, <i64 32, i64 32>
  %81 = insertelement <2 x i8> undef, i8 %28, i32 0
  %82 = insertelement <2 x i8> %81, i8 %52, i32 1
  %83 = zext <2 x i8> %82 to <2 x i64>
  %84 = shl nuw nsw <2 x i64> %83, <i64 24, i64 24>
  %85 = insertelement <2 x i8> undef, i8 %25, i32 0
  %86 = insertelement <2 x i8> %85, i8 %49, i32 1
  %87 = zext <2 x i8> %86 to <2 x i64>
  %88 = shl nuw nsw <2 x i64> %87, <i64 16, i64 16>
  %89 = insertelement <2 x i8> undef, i8 %22, i32 0
  %90 = insertelement <2 x i8> %89, i8 %46, i32 1
  %91 = zext <2 x i8> %90 to <2 x i64>
  %92 = shl nuw nsw <2 x i64> %91, <i64 8, i64 8>
  %93 = insertelement <2 x i8> undef, i8 %19, i32 0
  %94 = insertelement <2 x i8> %93, i8 %43, i32 1
  %95 = zext <2 x i8> %94 to <2 x i64>
  %96 = or <2 x i64> %92, %95
  %97 = or <2 x i64> %96, %88
  %98 = or <2 x i64> %97, %84
  %99 = or <2 x i64> %98, %80
  %100 = or <2 x i64> %99, %76
  %101 = or <2 x i64> %100, %72
  %102 = or <2 x i64> %101, %68
  store <2 x i64> %102, <2 x i64>* %11, align 16
  %103 = bitcast <2 x i64>* %6 to i8*
  %104 = getelementptr inbounds <2 x i64>, <2 x i64>* %6, i64 0, i64 0
  %105 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %7, i64 0, i32 1
  %106 = bitcast <2 x i64>* %6 to [16 x i8]*
  %107 = extractelement <2 x i64> %16, i32 0
  %108 = trunc i64 %107 to i16
  %109 = shl i16 %108, 8
  %110 = ashr exact i16 %109, 8
  %111 = sext i8 %19 to i16
  %112 = add nsw i16 %111, %110
  %113 = icmp slt i16 %112, 127
  %114 = select i1 %113, i16 %112, i16 127
  %115 = icmp sgt i16 %112, -128
  %116 = select i1 %115, i16 %112, i16 -128
  %117 = icmp slt i16 %112, 0
  %118 = select i1 %117, i16 %116, i16 %114
  %119 = trunc i16 %118 to i8
  call void @llvm.lifetime.start(i64 16, i8* nonnull %103)
  store <2 x i64> zeroinitializer, <2 x i64>* %6, align 16
  %120 = bitcast <2 x i64>* %6 to i8*
  store i8 %119, i8* %120, align 16
  %121 = load i64, i64* %104, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %103)
  %122 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %10, i64 0, i32 0, i64 1
  %123 = load i8, i8* %122, align 1
  %124 = sext i8 %123 to i16
  %125 = sext i8 %22 to i16
  %126 = add nsw i16 %125, %124
  %127 = icmp slt i16 %126, 127
  %128 = select i1 %127, i16 %126, i16 127
  %129 = icmp sgt i16 %126, -128
  %130 = select i1 %129, i16 %126, i16 -128
  %131 = icmp slt i16 %126, 0
  %132 = select i1 %131, i16 %130, i16 %128
  %133 = trunc i16 %132 to i8
  call void @llvm.lifetime.start(i64 16, i8* nonnull %103)
  store i64 %121, i64* %104, align 16
  store i64 0, i64* %105, align 8
  %134 = getelementptr inbounds [16 x i8], [16 x i8]* %106, i64 0, i64 1
  store i8 %133, i8* %134, align 1
  %135 = load i64, i64* %104, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %103)
  %136 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %10, i64 0, i32 0, i64 2
  %137 = load i8, i8* %136, align 2
  %138 = sext i8 %137 to i16
  %139 = sext i8 %25 to i16
  %140 = add nsw i16 %139, %138
  %141 = icmp slt i16 %140, 127
  %142 = select i1 %141, i16 %140, i16 127
  %143 = icmp sgt i16 %140, -128
  %144 = select i1 %143, i16 %140, i16 -128
  %145 = icmp slt i16 %140, 0
  %146 = select i1 %145, i16 %144, i16 %142
  %147 = trunc i16 %146 to i8
  call void @llvm.lifetime.start(i64 16, i8* nonnull %103)
  store i64 %135, i64* %104, align 16
  store i64 0, i64* %105, align 8
  %148 = getelementptr inbounds [16 x i8], [16 x i8]* %106, i64 0, i64 2
  store i8 %147, i8* %148, align 2
  %149 = load i64, i64* %104, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %103)
  %150 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %10, i64 0, i32 0, i64 3
  %151 = load i8, i8* %150, align 1
  %152 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %13, i64 0, i32 0, i64 3
  %153 = load i8, i8* %152, align 1
  %154 = sext i8 %151 to i16
  %155 = sext i8 %153 to i16
  %156 = add nsw i16 %155, %154
  %157 = icmp slt i16 %156, 127
  %158 = select i1 %157, i16 %156, i16 127
  %159 = icmp sgt i16 %156, -128
  %160 = select i1 %159, i16 %156, i16 -128
  %161 = icmp slt i16 %156, 0
  %162 = select i1 %161, i16 %160, i16 %158
  %163 = trunc i16 %162 to i8
  call void @llvm.lifetime.start(i64 16, i8* nonnull %103)
  store i64 %149, i64* %104, align 16
  store i64 0, i64* %105, align 8
  %164 = getelementptr inbounds [16 x i8], [16 x i8]* %106, i64 0, i64 3
  store i8 %163, i8* %164, align 1
  %165 = load i64, i64* %104, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %103)
  %166 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %10, i64 0, i32 0, i64 4
  %167 = load i8, i8* %166, align 4
  %168 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %13, i64 0, i32 0, i64 4
  %169 = load i8, i8* %168, align 4
  %170 = sext i8 %167 to i16
  %171 = sext i8 %169 to i16
  %172 = add nsw i16 %171, %170
  %173 = icmp slt i16 %172, 127
  %174 = select i1 %173, i16 %172, i16 127
  %175 = icmp sgt i16 %172, -128
  %176 = select i1 %175, i16 %172, i16 -128
  %177 = icmp slt i16 %172, 0
  %178 = select i1 %177, i16 %176, i16 %174
  %179 = trunc i16 %178 to i8
  call void @llvm.lifetime.start(i64 16, i8* nonnull %103)
  store i64 %165, i64* %104, align 16
  store i64 0, i64* %105, align 8
  %180 = getelementptr inbounds [16 x i8], [16 x i8]* %106, i64 0, i64 4
  store i8 %179, i8* %180, align 4
  %181 = load i64, i64* %104, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %103)
  %182 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %10, i64 0, i32 0, i64 5
  %183 = load i8, i8* %182, align 1
  %184 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %13, i64 0, i32 0, i64 5
  %185 = load i8, i8* %184, align 1
  %186 = sext i8 %183 to i16
  %187 = sext i8 %185 to i16
  %188 = add nsw i16 %187, %186
  %189 = icmp slt i16 %188, 127
  %190 = select i1 %189, i16 %188, i16 127
  %191 = icmp sgt i16 %188, -128
  %192 = select i1 %191, i16 %188, i16 -128
  %193 = icmp slt i16 %188, 0
  %194 = select i1 %193, i16 %192, i16 %190
  %195 = trunc i16 %194 to i8
  call void @llvm.lifetime.start(i64 16, i8* nonnull %103)
  store i64 %181, i64* %104, align 16
  store i64 0, i64* %105, align 8
  %196 = getelementptr inbounds [16 x i8], [16 x i8]* %106, i64 0, i64 5
  store i8 %195, i8* %196, align 1
  %197 = load i64, i64* %104, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %103)
  %198 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %10, i64 0, i32 0, i64 6
  %199 = load i8, i8* %198, align 2
  %200 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %13, i64 0, i32 0, i64 6
  %201 = load i8, i8* %200, align 2
  %202 = sext i8 %199 to i16
  %203 = sext i8 %201 to i16
  %204 = add nsw i16 %203, %202
  %205 = icmp slt i16 %204, 127
  %206 = select i1 %205, i16 %204, i16 127
  %207 = icmp sgt i16 %204, -128
  %208 = select i1 %207, i16 %204, i16 -128
  %209 = icmp slt i16 %204, 0
  %210 = select i1 %209, i16 %208, i16 %206
  %211 = trunc i16 %210 to i8
  call void @llvm.lifetime.start(i64 16, i8* nonnull %103)
  store i64 %197, i64* %104, align 16
  store i64 0, i64* %105, align 8
  %212 = getelementptr inbounds [16 x i8], [16 x i8]* %106, i64 0, i64 6
  store i8 %211, i8* %212, align 2
  %213 = load i64, i64* %104, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %103)
  %214 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %10, i64 0, i32 0, i64 7
  %215 = load i8, i8* %214, align 1
  %216 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %13, i64 0, i32 0, i64 7
  %217 = load i8, i8* %216, align 1
  %218 = sext i8 %215 to i16
  %219 = sext i8 %217 to i16
  %220 = add nsw i16 %219, %218
  %221 = icmp slt i16 %220, 127
  %222 = select i1 %221, i16 %220, i16 127
  %223 = icmp sgt i16 %220, -128
  %224 = select i1 %223, i16 %220, i16 -128
  %225 = icmp slt i16 %220, 0
  %226 = select i1 %225, i16 %224, i16 %222
  %227 = trunc i16 %226 to i8
  call void @llvm.lifetime.start(i64 16, i8* nonnull %103)
  store i64 %213, i64* %104, align 16
  store i64 0, i64* %105, align 8
  %228 = getelementptr inbounds [16 x i8], [16 x i8]* %106, i64 0, i64 7
  store i8 %227, i8* %228, align 1
  %229 = load i64, i64* %104, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %103)
  %230 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %9, i64 0, i32 1
  %231 = bitcast i64* %230 to i8*
  %232 = load i8, i8* %231, align 8
  %233 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %12, i64 0, i32 1
  %234 = bitcast i64* %233 to i8*
  %235 = load i8, i8* %234, align 8
  %236 = sext i8 %232 to i16
  %237 = sext i8 %235 to i16
  %238 = add nsw i16 %237, %236
  %239 = icmp slt i16 %238, 127
  %240 = select i1 %239, i16 %238, i16 127
  %241 = icmp sgt i16 %238, -128
  %242 = select i1 %241, i16 %238, i16 -128
  %243 = icmp slt i16 %238, 0
  %244 = select i1 %243, i16 %242, i16 %240
  %245 = trunc i16 %244 to i8
  call void @llvm.lifetime.start(i64 16, i8* nonnull %103)
  store i64 %229, i64* %104, align 16
  store i64 0, i64* %105, align 8
  %246 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %7, i64 0, i32 1
  %247 = bitcast i64* %246 to i8*
  store i8 %245, i8* %247, align 8
  %248 = load i64, i64* %105, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %103)
  %249 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %10, i64 0, i32 0, i64 9
  %250 = load i8, i8* %249, align 1
  %251 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %13, i64 0, i32 0, i64 9
  %252 = load i8, i8* %251, align 1
  %253 = sext i8 %250 to i16
  %254 = sext i8 %252 to i16
  %255 = add nsw i16 %254, %253
  %256 = icmp slt i16 %255, 127
  %257 = select i1 %256, i16 %255, i16 127
  %258 = icmp sgt i16 %255, -128
  %259 = select i1 %258, i16 %255, i16 -128
  %260 = icmp slt i16 %255, 0
  %261 = select i1 %260, i16 %259, i16 %257
  %262 = trunc i16 %261 to i8
  call void @llvm.lifetime.start(i64 16, i8* nonnull %103)
  store i64 %229, i64* %104, align 16
  store i64 %248, i64* %105, align 8
  %263 = getelementptr inbounds [16 x i8], [16 x i8]* %106, i64 0, i64 9
  store i8 %262, i8* %263, align 1
  %264 = load i64, i64* %105, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %103)
  %265 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %10, i64 0, i32 0, i64 10
  %266 = load i8, i8* %265, align 2
  %267 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %13, i64 0, i32 0, i64 10
  %268 = load i8, i8* %267, align 2
  %269 = sext i8 %266 to i16
  %270 = sext i8 %268 to i16
  %271 = add nsw i16 %270, %269
  %272 = icmp slt i16 %271, 127
  %273 = select i1 %272, i16 %271, i16 127
  %274 = icmp sgt i16 %271, -128
  %275 = select i1 %274, i16 %271, i16 -128
  %276 = icmp slt i16 %271, 0
  %277 = select i1 %276, i16 %275, i16 %273
  %278 = trunc i16 %277 to i8
  call void @llvm.lifetime.start(i64 16, i8* nonnull %103)
  store i64 %229, i64* %104, align 16
  store i64 %264, i64* %105, align 8
  %279 = getelementptr inbounds [16 x i8], [16 x i8]* %106, i64 0, i64 10
  store i8 %278, i8* %279, align 2
  %280 = load i64, i64* %105, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %103)
  %281 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %10, i64 0, i32 0, i64 11
  %282 = load i8, i8* %281, align 1
  %283 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %13, i64 0, i32 0, i64 11
  %284 = load i8, i8* %283, align 1
  %285 = sext i8 %282 to i16
  %286 = sext i8 %284 to i16
  %287 = add nsw i16 %286, %285
  %288 = icmp slt i16 %287, 127
  %289 = select i1 %288, i16 %287, i16 127
  %290 = icmp sgt i16 %287, -128
  %291 = select i1 %290, i16 %287, i16 -128
  %292 = icmp slt i16 %287, 0
  %293 = select i1 %292, i16 %291, i16 %289
  %294 = trunc i16 %293 to i8
  call void @llvm.lifetime.start(i64 16, i8* nonnull %103)
  store i64 %229, i64* %104, align 16
  store i64 %280, i64* %105, align 8
  %295 = getelementptr inbounds [16 x i8], [16 x i8]* %106, i64 0, i64 11
  store i8 %294, i8* %295, align 1
  %296 = load i64, i64* %105, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %103)
  %297 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %10, i64 0, i32 0, i64 12
  %298 = load i8, i8* %297, align 4
  %299 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %13, i64 0, i32 0, i64 12
  %300 = load i8, i8* %299, align 4
  %301 = sext i8 %298 to i16
  %302 = sext i8 %300 to i16
  %303 = add nsw i16 %302, %301
  %304 = icmp slt i16 %303, 127
  %305 = select i1 %304, i16 %303, i16 127
  %306 = icmp sgt i16 %303, -128
  %307 = select i1 %306, i16 %303, i16 -128
  %308 = icmp slt i16 %303, 0
  %309 = select i1 %308, i16 %307, i16 %305
  %310 = trunc i16 %309 to i8
  call void @llvm.lifetime.start(i64 16, i8* nonnull %103)
  store i64 %229, i64* %104, align 16
  store i64 %296, i64* %105, align 8
  %311 = getelementptr inbounds [16 x i8], [16 x i8]* %106, i64 0, i64 12
  store i8 %310, i8* %311, align 4
  %312 = load i64, i64* %105, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %103)
  %313 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %10, i64 0, i32 0, i64 13
  %314 = load i8, i8* %313, align 1
  %315 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %13, i64 0, i32 0, i64 13
  %316 = load i8, i8* %315, align 1
  %317 = sext i8 %314 to i16
  %318 = sext i8 %316 to i16
  %319 = add nsw i16 %318, %317
  %320 = icmp slt i16 %319, 127
  %321 = select i1 %320, i16 %319, i16 127
  %322 = icmp sgt i16 %319, -128
  %323 = select i1 %322, i16 %319, i16 -128
  %324 = icmp slt i16 %319, 0
  %325 = select i1 %324, i16 %323, i16 %321
  %326 = trunc i16 %325 to i8
  call void @llvm.lifetime.start(i64 16, i8* nonnull %103)
  store i64 %229, i64* %104, align 16
  store i64 %312, i64* %105, align 8
  %327 = getelementptr inbounds [16 x i8], [16 x i8]* %106, i64 0, i64 13
  store i8 %326, i8* %327, align 1
  %328 = load i64, i64* %105, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %103)
  %329 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %10, i64 0, i32 0, i64 14
  %330 = load i8, i8* %329, align 2
  %331 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %13, i64 0, i32 0, i64 14
  %332 = load i8, i8* %331, align 2
  %333 = sext i8 %330 to i16
  %334 = sext i8 %332 to i16
  %335 = add nsw i16 %334, %333
  %336 = icmp slt i16 %335, 127
  %337 = select i1 %336, i16 %335, i16 127
  %338 = icmp sgt i16 %335, -128
  %339 = select i1 %338, i16 %335, i16 -128
  %340 = icmp slt i16 %335, 0
  %341 = select i1 %340, i16 %339, i16 %337
  %342 = trunc i16 %341 to i8
  call void @llvm.lifetime.start(i64 16, i8* nonnull %103)
  store i64 %229, i64* %104, align 16
  store i64 %328, i64* %105, align 8
  %343 = getelementptr inbounds [16 x i8], [16 x i8]* %106, i64 0, i64 14
  store i8 %342, i8* %343, align 2
  %344 = load i64, i64* %105, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %103)
  %345 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %10, i64 0, i32 0, i64 15
  %346 = load i8, i8* %345, align 1
  %347 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %13, i64 0, i32 0, i64 15
  %348 = load i8, i8* %347, align 1
  %349 = sext i8 %346 to i16
  %350 = sext i8 %348 to i16
  %351 = add nsw i16 %350, %349
  %352 = icmp slt i16 %351, 127
  %353 = select i1 %352, i16 %351, i16 127
  %354 = icmp sgt i16 %351, -128
  %355 = select i1 %354, i16 %351, i16 -128
  %356 = icmp slt i16 %351, 0
  %357 = select i1 %356, i16 %355, i16 %353
  %358 = trunc i16 %357 to i8
  call void @llvm.lifetime.start(i64 16, i8* nonnull %103)
  store i64 %229, i64* %104, align 16
  store i64 %344, i64* %105, align 8
  %359 = getelementptr inbounds [16 x i8], [16 x i8]* %106, i64 0, i64 15
  store i8 %358, i8* %359, align 1
  %360 = load i64, i64* %105, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %103)
  %361 = lshr i64 %229, 8
  %362 = lshr i64 %229, 16
  %363 = lshr i64 %229, 24
  %364 = lshr i64 %229, 32
  %365 = lshr i64 %229, 40
  %366 = lshr i64 %229, 48
  %367 = lshr i64 %229, 56
  %368 = trunc i64 %229 to i8
  %369 = trunc i64 %361 to i8
  %370 = trunc i64 %362 to i8
  %371 = trunc i64 %363 to i8
  %372 = trunc i64 %364 to i8
  %373 = trunc i64 %365 to i8
  %374 = trunc i64 %366 to i8
  %375 = trunc i64 %367 to i8
  store i8 %368, i8* %2, align 1
  %376 = getelementptr inbounds i8, i8* %2, i64 1
  store i8 %369, i8* %376, align 1
  %377 = getelementptr inbounds i8, i8* %2, i64 2
  store i8 %370, i8* %377, align 1
  %378 = getelementptr inbounds i8, i8* %2, i64 3
  store i8 %371, i8* %378, align 1
  %379 = getelementptr inbounds i8, i8* %2, i64 4
  store i8 %372, i8* %379, align 1
  %380 = getelementptr inbounds i8, i8* %2, i64 5
  store i8 %373, i8* %380, align 1
  %381 = getelementptr inbounds i8, i8* %2, i64 6
  store i8 %374, i8* %381, align 1
  %382 = getelementptr inbounds i8, i8* %2, i64 7
  store i8 %375, i8* %382, align 1
  %383 = trunc i64 %360 to i8
  %384 = getelementptr inbounds i8, i8* %2, i64 8
  store i8 %383, i8* %384, align 1
  %385 = lshr i64 %360, 8
  %386 = trunc i64 %385 to i8
  %387 = getelementptr inbounds i8, i8* %2, i64 9
  store i8 %386, i8* %387, align 1
  %388 = lshr i64 %360, 16
  %389 = trunc i64 %388 to i8
  %390 = getelementptr inbounds i8, i8* %2, i64 10
  store i8 %389, i8* %390, align 1
  %391 = lshr i64 %360, 24
  %392 = trunc i64 %391 to i8
  %393 = getelementptr inbounds i8, i8* %2, i64 11
  store i8 %392, i8* %393, align 1
  %394 = lshr i64 %360, 32
  %395 = trunc i64 %394 to i8
  %396 = getelementptr inbounds i8, i8* %2, i64 12
  store i8 %395, i8* %396, align 1
  %397 = lshr i64 %360, 40
  %398 = trunc i64 %397 to i8
  %399 = getelementptr inbounds i8, i8* %2, i64 13
  store i8 %398, i8* %399, align 1
  %400 = lshr i64 %360, 48
  %401 = trunc i64 %400 to i8
  %402 = getelementptr inbounds i8, i8* %2, i64 14
  store i8 %401, i8* %402, align 1
  %403 = lshr i64 %360, 56
  %404 = trunc i64 %403 to i8
  %405 = getelementptr inbounds i8, i8* %2, i64 15
  store i8 %404, i8* %405, align 1
  call void @llvm.lifetime.end(i64 16, i8* nonnull %17) 
  call void @llvm.lifetime.end(i64 16, i8* nonnull %14) 
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L6PADDSWI4RVnWI7vec64_tE3RVnIS2_ES5_EEP6MemoryS7_R5StateT_T0_T1_(%struct.Memory* readnone returned, %struct.State* nocapture readnone dereferenceable(3376), i64* nocapture, i64, i64)  {
  %6 = alloca i64, align 8
  %7 = bitcast i64* %6 to i8*
  %8 = bitcast i64* %6 to [4 x i16]*
  %9 = trunc i64 %3 to i32
  %10 = trunc i64 %4 to i32
  %11 = shl i32 %9, 16
  %12 = ashr exact i32 %11, 16
  %13 = shl i32 %10, 16
  %14 = ashr exact i32 %13, 16
  %15 = add nsw i32 %14, %12
  %16 = icmp slt i32 %15, 32767
  %17 = select i1 %16, i32 %15, i32 32767
  %18 = icmp sgt i32 %15, -32768
  %19 = select i1 %18, i32 %15, i32 -32768
  %20 = icmp slt i32 %15, 0
  %21 = select i1 %20, i32 %19, i32 %17
  %22 = trunc i32 %21 to i16
  call void @llvm.lifetime.start(i64 8, i8* nonnull %7)
  store i64 0, i64* %6, align 8
  %23 = bitcast i64* %6 to i16*
  store i16 %22, i16* %23, align 8
  %24 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %7)
  %25 = trunc i64 %3 to i32
  %26 = ashr i32 %25, 16
  %27 = trunc i64 %4 to i32
  %28 = ashr i32 %27, 16
  %29 = add nsw i32 %28, %26
  %30 = icmp slt i32 %29, 32767
  %31 = select i1 %30, i32 %29, i32 32767
  %32 = icmp sgt i32 %29, -32768
  %33 = select i1 %32, i32 %29, i32 -32768
  %34 = icmp slt i32 %29, 0
  %35 = select i1 %34, i32 %33, i32 %31
  %36 = trunc i32 %35 to i16
  call void @llvm.lifetime.start(i64 8, i8* nonnull %7)
  store i64 %24, i64* %6, align 8
  %37 = getelementptr inbounds [4 x i16], [4 x i16]* %8, i64 0, i64 1
  store i16 %36, i16* %37, align 2
  %38 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %7)
  %39 = lshr i64 %3, 32
  %40 = lshr i64 %4, 32
  %41 = shl nuw nsw i64 %39, 16
  %42 = trunc i64 %41 to i32
  %43 = ashr exact i32 %42, 16
  %44 = shl nuw nsw i64 %40, 16
  %45 = trunc i64 %44 to i32
  %46 = ashr exact i32 %45, 16
  %47 = add nsw i32 %46, %43
  %48 = icmp slt i32 %47, 32767
  %49 = select i1 %48, i32 %47, i32 32767
  %50 = icmp sgt i32 %47, -32768
  %51 = select i1 %50, i32 %47, i32 -32768
  %52 = icmp slt i32 %47, 0
  %53 = select i1 %52, i32 %51, i32 %49
  %54 = trunc i32 %53 to i16
  call void @llvm.lifetime.start(i64 8, i8* nonnull %7)
  store i64 %38, i64* %6, align 8
  %55 = getelementptr inbounds [4 x i16], [4 x i16]* %8, i64 0, i64 2
  store i16 %54, i16* %55, align 4
  %56 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %7)
  %57 = lshr i64 %3, 48
  %58 = lshr i64 %4, 48
  %59 = shl nuw nsw i64 %57, 16
  %60 = trunc i64 %59 to i32
  %61 = ashr exact i32 %60, 16
  %62 = shl nuw nsw i64 %58, 16
  %63 = trunc i64 %62 to i32
  %64 = ashr exact i32 %63, 16
  %65 = add nsw i32 %64, %61
  %66 = icmp slt i32 %65, 32767
  %67 = select i1 %66, i32 %65, i32 32767
  %68 = icmp sgt i32 %65, -32768
  %69 = select i1 %68, i32 %65, i32 -32768
  %70 = icmp slt i32 %65, 0
  %71 = select i1 %70, i32 %69, i32 %67
  %72 = trunc i32 %71 to i16
  call void @llvm.lifetime.start(i64 8, i8* nonnull %7)
  store i64 %56, i64* %6, align 8
  %73 = getelementptr inbounds [4 x i16], [4 x i16]* %8, i64 0, i64 3
  store i16 %72, i16* %73, align 2
  %74 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %7)
  %75 = lshr i64 %74, 16
  %76 = lshr i64 %74, 32
  %77 = lshr i64 %74, 48
  %78 = trunc i64 %74 to i16
  %79 = trunc i64 %75 to i16
  %80 = trunc i64 %76 to i16
  %81 = trunc i64 %77 to i16
  %82 = bitcast i64* %2 to [4 x i16]*
  %83 = bitcast i64* %2 to i16*
  store i16 %78, i16* %83, align 1
  %84 = getelementptr inbounds [4 x i16], [4 x i16]* %82, i64 0, i64 1
  store i16 %79, i16* %84, align 1
  %85 = getelementptr inbounds [4 x i16], [4 x i16]* %82, i64 0, i64 2
  store i16 %80, i16* %85, align 1
  %86 = getelementptr inbounds [4 x i16], [4 x i16]* %82, i64 0, i64 3
  store i16 %81, i16* %86, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L6PADDSWI4RVnWI7vec64_tE3RVnIS2_E3MVnIS2_EEEP6MemoryS9_R5StateT_T0_T1_(%struct.Memory* returned, %struct.State* nocapture readnone dereferenceable(3376), i64* nocapture, i64, i64)  {
  %6 = alloca i64, align 8
  %7 = alloca i64, align 8
  %8 = bitcast i64* %7 to %struct.int16v4_t*
  %9 = bitcast i64* %7 to i8*
  call void @llvm.lifetime.start(i64 8, i8* nonnull %9) 
  store i64 %3, i64* %7, align 8
  %10 = inttoptr i64 %4 to i16*
  %11 = load i16, i16* %10
  %12 = add i64 %4, 2
  %13 = inttoptr i64 %12 to i16*
  %14 = load i16, i16* %13
  %15 = add i64 %4, 4
  %16 = inttoptr i64 %15 to i16*
  %17 = load i16, i16* %16
  %18 = add i64 %4, 6
  %19 = inttoptr i64 %18 to i16*
  %20 = load i16, i16* %19
  %21 = bitcast i64* %6 to i8*
  %22 = bitcast i64* %6 to [4 x i16]*
  %23 = trunc i64 %3 to i32
  %24 = shl i32 %23, 16
  %25 = ashr exact i32 %24, 16
  %26 = sext i16 %11 to i32
  %27 = add nsw i32 %26, %25
  %28 = icmp slt i32 %27, 32767
  %29 = select i1 %28, i32 %27, i32 32767
  %30 = icmp sgt i32 %27, -32768
  %31 = select i1 %30, i32 %27, i32 -32768
  %32 = icmp slt i32 %27, 0
  %33 = select i1 %32, i32 %31, i32 %29
  %34 = trunc i32 %33 to i16
  call void @llvm.lifetime.start(i64 8, i8* nonnull %21)
  store i64 0, i64* %6, align 8
  %35 = bitcast i64* %6 to i16*
  store i16 %34, i16* %35, align 8
  %36 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %21)
  %37 = trunc i64 %3 to i32
  %38 = ashr i32 %37, 16
  %39 = sext i16 %14 to i32
  %40 = add nsw i32 %39, %38
  %41 = icmp slt i32 %40, 32767
  %42 = select i1 %41, i32 %40, i32 32767
  %43 = icmp sgt i32 %40, -32768
  %44 = select i1 %43, i32 %40, i32 -32768
  %45 = icmp slt i32 %40, 0
  %46 = select i1 %45, i32 %44, i32 %42
  %47 = trunc i32 %46 to i16
  call void @llvm.lifetime.start(i64 8, i8* nonnull %21)
  store i64 %36, i64* %6, align 8
  %48 = getelementptr inbounds [4 x i16], [4 x i16]* %22, i64 0, i64 1
  store i16 %47, i16* %48, align 2
  %49 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %21)
  %50 = lshr i64 %3, 32
  %51 = shl nuw nsw i64 %50, 16
  %52 = trunc i64 %51 to i32
  %53 = ashr exact i32 %52, 16
  %54 = sext i16 %17 to i32
  %55 = add nsw i32 %54, %53
  %56 = icmp slt i32 %55, 32767
  %57 = select i1 %56, i32 %55, i32 32767
  %58 = icmp sgt i32 %55, -32768
  %59 = select i1 %58, i32 %55, i32 -32768
  %60 = icmp slt i32 %55, 0
  %61 = select i1 %60, i32 %59, i32 %57
  %62 = trunc i32 %61 to i16
  call void @llvm.lifetime.start(i64 8, i8* nonnull %21)
  store i64 %49, i64* %6, align 8
  %63 = getelementptr inbounds [4 x i16], [4 x i16]* %22, i64 0, i64 2
  store i16 %62, i16* %63, align 4
  %64 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %21)
  %65 = getelementptr inbounds %struct.int16v4_t, %struct.int16v4_t* %8, i64 0, i32 0, i64 3
  %66 = load i16, i16* %65, align 2
  %67 = sext i16 %66 to i32
  %68 = sext i16 %20 to i32
  %69 = add nsw i32 %68, %67
  %70 = icmp slt i32 %69, 32767
  %71 = select i1 %70, i32 %69, i32 32767
  %72 = icmp sgt i32 %69, -32768
  %73 = select i1 %72, i32 %69, i32 -32768
  %74 = icmp slt i32 %69, 0
  %75 = select i1 %74, i32 %73, i32 %71
  %76 = trunc i32 %75 to i16
  call void @llvm.lifetime.start(i64 8, i8* nonnull %21)
  store i64 %64, i64* %6, align 8
  %77 = getelementptr inbounds [4 x i16], [4 x i16]* %22, i64 0, i64 3
  store i16 %76, i16* %77, align 2
  %78 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %21)
  %79 = lshr i64 %78, 16
  %80 = lshr i64 %78, 32
  %81 = lshr i64 %78, 48
  %82 = trunc i64 %78 to i16
  %83 = trunc i64 %79 to i16
  %84 = trunc i64 %80 to i16
  %85 = trunc i64 %81 to i16
  %86 = bitcast i64* %2 to [4 x i16]*
  %87 = bitcast i64* %2 to i16*
  store i16 %82, i16* %87, align 1
  %88 = getelementptr inbounds [4 x i16], [4 x i16]* %86, i64 0, i64 1
  store i16 %83, i16* %88, align 1
  %89 = getelementptr inbounds [4 x i16], [4 x i16]* %86, i64 0, i64 2
  store i16 %84, i16* %89, align 1
  %90 = getelementptr inbounds [4 x i16], [4 x i16]* %86, i64 0, i64 3
  store i16 %85, i16* %90, align 1
  call void @llvm.lifetime.end(i64 8, i8* nonnull %9) 
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L6PADDSWI3VnWI8vec128_tE2VnIS2_ES5_EEP6MemoryS7_R5StateT_T0_T1_(%struct.Memory* readnone returned, %struct.State* nocapture readnone dereferenceable(3376), i8* nocapture, i8* nocapture readonly, i8* nocapture readonly)  {
  %6 = alloca <2 x i64>, align 16
  %7 = bitcast <2 x i64>* %6 to { i64, i64 }*
  %8 = alloca <2 x i64>, align 16
  %9 = bitcast <2 x i64>* %8 to { i64, i64 }*
  %10 = bitcast <2 x i64>* %8 to %struct.uint16v8_t*
  %11 = alloca <2 x i64>, align 16
  %12 = bitcast <2 x i64>* %11 to { i64, i64 }*
  %13 = bitcast <2 x i64>* %11 to %struct.uint16v8_t*
  %14 = bitcast <2 x i64>* %8 to i8*
  call void @llvm.lifetime.start(i64 16, i8* nonnull %14) 
  %15 = bitcast i8* %3 to <2 x i64>*
  %16 = load <2 x i64>, <2 x i64>* %15, align 1
  store <2 x i64> %16, <2 x i64>* %8, align 16
  %17 = bitcast <2 x i64>* %11 to i8*
  call void @llvm.lifetime.start(i64 16, i8* nonnull %17) 
  %18 = bitcast i8* %4 to <2 x i64>*
  %19 = load <2 x i64>, <2 x i64>* %18, align 1
  store <2 x i64> %19, <2 x i64>* %11, align 16
  %20 = bitcast <2 x i64>* %6 to i8*
  %21 = getelementptr inbounds <2 x i64>, <2 x i64>* %6, i64 0, i64 0
  %22 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %7, i64 0, i32 1
  %23 = bitcast <2 x i64>* %6 to [8 x i16]*
  %24 = extractelement <2 x i64> %16, i32 0
  %25 = trunc i64 %24 to i32
  %26 = extractelement <2 x i64> %19, i32 0
  %27 = trunc i64 %26 to i32
  %28 = shl i32 %25, 16
  %29 = ashr exact i32 %28, 16
  %30 = shl i32 %27, 16
  %31 = ashr exact i32 %30, 16
  %32 = add nsw i32 %31, %29
  %33 = icmp slt i32 %32, 32767
  %34 = select i1 %33, i32 %32, i32 32767
  %35 = icmp sgt i32 %32, -32768
  %36 = select i1 %35, i32 %32, i32 -32768
  %37 = icmp slt i32 %32, 0
  %38 = select i1 %37, i32 %36, i32 %34
  %39 = trunc i32 %38 to i16
  call void @llvm.lifetime.start(i64 16, i8* nonnull %20)
  store <2 x i64> zeroinitializer, <2 x i64>* %6, align 16
  %40 = bitcast <2 x i64>* %6 to i16*
  store i16 %39, i16* %40, align 16
  %41 = load i64, i64* %21, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %20)
  %42 = trunc i64 %24 to i32
  %43 = ashr i32 %42, 16
  %44 = trunc i64 %26 to i32
  %45 = ashr i32 %44, 16
  %46 = add nsw i32 %45, %43
  %47 = icmp slt i32 %46, 32767
  %48 = select i1 %47, i32 %46, i32 32767
  %49 = icmp sgt i32 %46, -32768
  %50 = select i1 %49, i32 %46, i32 -32768
  %51 = icmp slt i32 %46, 0
  %52 = select i1 %51, i32 %50, i32 %48
  %53 = trunc i32 %52 to i16
  call void @llvm.lifetime.start(i64 16, i8* nonnull %20)
  store i64 %41, i64* %21, align 16
  store i64 0, i64* %22, align 8
  %54 = getelementptr inbounds [8 x i16], [8 x i16]* %23, i64 0, i64 1
  store i16 %53, i16* %54, align 2
  %55 = load i64, i64* %21, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %20)
  %56 = lshr i64 %24, 32
  %57 = lshr i64 %26, 32
  %58 = shl nuw nsw i64 %56, 16
  %59 = trunc i64 %58 to i32
  %60 = ashr exact i32 %59, 16
  %61 = shl nuw nsw i64 %57, 16
  %62 = trunc i64 %61 to i32
  %63 = ashr exact i32 %62, 16
  %64 = add nsw i32 %63, %60
  %65 = icmp slt i32 %64, 32767
  %66 = select i1 %65, i32 %64, i32 32767
  %67 = icmp sgt i32 %64, -32768
  %68 = select i1 %67, i32 %64, i32 -32768
  %69 = icmp slt i32 %64, 0
  %70 = select i1 %69, i32 %68, i32 %66
  %71 = trunc i32 %70 to i16
  call void @llvm.lifetime.start(i64 16, i8* nonnull %20)
  store i64 %55, i64* %21, align 16
  store i64 0, i64* %22, align 8
  %72 = getelementptr inbounds [8 x i16], [8 x i16]* %23, i64 0, i64 2
  store i16 %71, i16* %72, align 4
  %73 = load i64, i64* %21, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %20)
  %74 = getelementptr inbounds %struct.uint16v8_t, %struct.uint16v8_t* %10, i64 0, i32 0, i64 3
  %75 = load i16, i16* %74, align 2
  %76 = getelementptr inbounds %struct.uint16v8_t, %struct.uint16v8_t* %13, i64 0, i32 0, i64 3
  %77 = load i16, i16* %76, align 2
  %78 = sext i16 %75 to i32
  %79 = sext i16 %77 to i32
  %80 = add nsw i32 %79, %78
  %81 = icmp slt i32 %80, 32767
  %82 = select i1 %81, i32 %80, i32 32767
  %83 = icmp sgt i32 %80, -32768
  %84 = select i1 %83, i32 %80, i32 -32768
  %85 = icmp slt i32 %80, 0
  %86 = select i1 %85, i32 %84, i32 %82
  %87 = trunc i32 %86 to i16
  call void @llvm.lifetime.start(i64 16, i8* nonnull %20)
  store i64 %73, i64* %21, align 16
  store i64 0, i64* %22, align 8
  %88 = getelementptr inbounds [8 x i16], [8 x i16]* %23, i64 0, i64 3
  store i16 %87, i16* %88, align 2
  %89 = load i64, i64* %21, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %20)
  %90 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %9, i64 0, i32 1
  %91 = bitcast i64* %90 to i16*
  %92 = load i16, i16* %91, align 8
  %93 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %12, i64 0, i32 1
  %94 = bitcast i64* %93 to i16*
  %95 = load i16, i16* %94, align 8
  %96 = sext i16 %92 to i32
  %97 = sext i16 %95 to i32
  %98 = add nsw i32 %97, %96
  %99 = icmp slt i32 %98, 32767
  %100 = select i1 %99, i32 %98, i32 32767
  %101 = icmp sgt i32 %98, -32768
  %102 = select i1 %101, i32 %98, i32 -32768
  %103 = icmp slt i32 %98, 0
  %104 = select i1 %103, i32 %102, i32 %100
  %105 = trunc i32 %104 to i16
  call void @llvm.lifetime.start(i64 16, i8* nonnull %20)
  store i64 %89, i64* %21, align 16
  store i64 0, i64* %22, align 8
  %106 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %7, i64 0, i32 1
  %107 = bitcast i64* %106 to i16*
  store i16 %105, i16* %107, align 8
  %108 = load i64, i64* %22, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %20)
  %109 = getelementptr inbounds %struct.uint16v8_t, %struct.uint16v8_t* %10, i64 0, i32 0, i64 5
  %110 = load i16, i16* %109, align 2
  %111 = getelementptr inbounds %struct.uint16v8_t, %struct.uint16v8_t* %13, i64 0, i32 0, i64 5
  %112 = load i16, i16* %111, align 2
  %113 = sext i16 %110 to i32
  %114 = sext i16 %112 to i32
  %115 = add nsw i32 %114, %113
  %116 = icmp slt i32 %115, 32767
  %117 = select i1 %116, i32 %115, i32 32767
  %118 = icmp sgt i32 %115, -32768
  %119 = select i1 %118, i32 %115, i32 -32768
  %120 = icmp slt i32 %115, 0
  %121 = select i1 %120, i32 %119, i32 %117
  %122 = trunc i32 %121 to i16
  call void @llvm.lifetime.start(i64 16, i8* nonnull %20)
  store i64 %89, i64* %21, align 16
  store i64 %108, i64* %22, align 8
  %123 = getelementptr inbounds [8 x i16], [8 x i16]* %23, i64 0, i64 5
  store i16 %122, i16* %123, align 2
  %124 = load i64, i64* %22, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %20)
  %125 = getelementptr inbounds %struct.uint16v8_t, %struct.uint16v8_t* %10, i64 0, i32 0, i64 6
  %126 = load i16, i16* %125, align 4
  %127 = getelementptr inbounds %struct.uint16v8_t, %struct.uint16v8_t* %13, i64 0, i32 0, i64 6
  %128 = load i16, i16* %127, align 4
  %129 = sext i16 %126 to i32
  %130 = sext i16 %128 to i32
  %131 = add nsw i32 %130, %129
  %132 = icmp slt i32 %131, 32767
  %133 = select i1 %132, i32 %131, i32 32767
  %134 = icmp sgt i32 %131, -32768
  %135 = select i1 %134, i32 %131, i32 -32768
  %136 = icmp slt i32 %131, 0
  %137 = select i1 %136, i32 %135, i32 %133
  %138 = trunc i32 %137 to i16
  call void @llvm.lifetime.start(i64 16, i8* nonnull %20)
  store i64 %89, i64* %21, align 16
  store i64 %124, i64* %22, align 8
  %139 = getelementptr inbounds [8 x i16], [8 x i16]* %23, i64 0, i64 6
  store i16 %138, i16* %139, align 4
  %140 = load i64, i64* %22, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %20)
  %141 = getelementptr inbounds %struct.uint16v8_t, %struct.uint16v8_t* %10, i64 0, i32 0, i64 7
  %142 = load i16, i16* %141, align 2
  %143 = getelementptr inbounds %struct.uint16v8_t, %struct.uint16v8_t* %13, i64 0, i32 0, i64 7
  %144 = load i16, i16* %143, align 2
  %145 = sext i16 %142 to i32
  %146 = sext i16 %144 to i32
  %147 = add nsw i32 %146, %145
  %148 = icmp slt i32 %147, 32767
  %149 = select i1 %148, i32 %147, i32 32767
  %150 = icmp sgt i32 %147, -32768
  %151 = select i1 %150, i32 %147, i32 -32768
  %152 = icmp slt i32 %147, 0
  %153 = select i1 %152, i32 %151, i32 %149
  %154 = trunc i32 %153 to i16
  call void @llvm.lifetime.start(i64 16, i8* nonnull %20)
  store i64 %89, i64* %21, align 16
  store i64 %140, i64* %22, align 8
  %155 = getelementptr inbounds [8 x i16], [8 x i16]* %23, i64 0, i64 7
  store i16 %154, i16* %155, align 2
  %156 = load i64, i64* %22, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %20)
  %157 = lshr i64 %89, 16
  %158 = lshr i64 %89, 32
  %159 = lshr i64 %89, 48
  %160 = trunc i64 %89 to i16
  %161 = trunc i64 %157 to i16
  %162 = trunc i64 %158 to i16
  %163 = trunc i64 %159 to i16
  %164 = bitcast i8* %2 to i16*
  store i16 %160, i16* %164, align 1
  %165 = getelementptr inbounds i8, i8* %2, i64 2
  %166 = bitcast i8* %165 to i16*
  store i16 %161, i16* %166, align 1
  %167 = getelementptr inbounds i8, i8* %2, i64 4
  %168 = bitcast i8* %167 to i16*
  store i16 %162, i16* %168, align 1
  %169 = getelementptr inbounds i8, i8* %2, i64 6
  %170 = bitcast i8* %169 to i16*
  store i16 %163, i16* %170, align 1
  %171 = trunc i64 %156 to i16
  %172 = getelementptr inbounds i8, i8* %2, i64 8
  %173 = bitcast i8* %172 to i16*
  store i16 %171, i16* %173, align 1
  %174 = lshr i64 %156, 16
  %175 = trunc i64 %174 to i16
  %176 = getelementptr inbounds i8, i8* %2, i64 10
  %177 = bitcast i8* %176 to i16*
  store i16 %175, i16* %177, align 1
  %178 = lshr i64 %156, 32
  %179 = trunc i64 %178 to i16
  %180 = getelementptr inbounds i8, i8* %2, i64 12
  %181 = bitcast i8* %180 to i16*
  store i16 %179, i16* %181, align 1
  %182 = lshr i64 %156, 48
  %183 = trunc i64 %182 to i16
  %184 = getelementptr inbounds i8, i8* %2, i64 14
  %185 = bitcast i8* %184 to i16*
  store i16 %183, i16* %185, align 1
  call void @llvm.lifetime.end(i64 16, i8* nonnull %17) 
  call void @llvm.lifetime.end(i64 16, i8* nonnull %14) 
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L6PADDSWI3VnWI8vec128_tE2VnIS2_E3MVnIS2_EEEP6MemoryS9_R5StateT_T0_T1_(%struct.Memory* returned, %struct.State* nocapture readnone dereferenceable(3376), i8* nocapture, i8* nocapture readonly, i64)  {
  %6 = alloca <2 x i64>, align 16
  %7 = bitcast <2 x i64>* %6 to { i64, i64 }*
  %8 = alloca <2 x i64>, align 16
  %9 = bitcast <2 x i64>* %8 to { i64, i64 }*
  %10 = bitcast <2 x i64>* %8 to %struct.uint16v8_t*
  %11 = alloca <2 x i64>, align 16
  %12 = bitcast <2 x i64>* %11 to { i64, i64 }*
  %13 = bitcast <2 x i64>* %11 to %struct.uint16v8_t*
  %14 = bitcast <2 x i64>* %8 to i8*
  call void @llvm.lifetime.start(i64 16, i8* nonnull %14) 
  %15 = bitcast i8* %3 to <2 x i64>*
  %16 = load <2 x i64>, <2 x i64>* %15, align 1
  store <2 x i64> %16, <2 x i64>* %8, align 16
  %17 = bitcast <2 x i64>* %11 to i8*
  call void @llvm.lifetime.start(i64 16, i8* nonnull %17) 
  %18 = inttoptr i64 %4 to i16*
  %19 = load i16, i16* %18
  %20 = add i64 %4, 2
  %21 = inttoptr i64 %20 to i16*
  %22 = load i16, i16* %21
  %23 = add i64 %4, 4
  %24 = inttoptr i64 %23 to i16*
  %25 = load i16, i16* %24
  %26 = add i64 %4, 6
  %27 = inttoptr i64 %26 to i16*
  %28 = load i16, i16* %27
  %29 = add i64 %4, 8
  %30 = inttoptr i64 %29 to i16*
  %31 = load i16, i16* %30
  %32 = add i64 %4, 10
  %33 = inttoptr i64 %32 to i16*
  %34 = load i16, i16* %33
  %35 = add i64 %4, 12
  %36 = inttoptr i64 %35 to i16*
  %37 = load i16, i16* %36
  %38 = add i64 %4, 14
  %39 = inttoptr i64 %38 to i16*
  %40 = load i16, i16* %39
  %41 = insertelement <2 x i16> undef, i16 %28, i32 0
  %42 = insertelement <2 x i16> %41, i16 %40, i32 1
  %43 = zext <2 x i16> %42 to <2 x i64>
  %44 = shl nuw <2 x i64> %43, <i64 48, i64 48>
  %45 = insertelement <2 x i16> undef, i16 %25, i32 0
  %46 = insertelement <2 x i16> %45, i16 %37, i32 1
  %47 = zext <2 x i16> %46 to <2 x i64>
  %48 = shl nuw nsw <2 x i64> %47, <i64 32, i64 32>
  %49 = insertelement <2 x i16> undef, i16 %22, i32 0
  %50 = insertelement <2 x i16> %49, i16 %34, i32 1
  %51 = zext <2 x i16> %50 to <2 x i64>
  %52 = shl nuw nsw <2 x i64> %51, <i64 16, i64 16>
  %53 = insertelement <2 x i16> undef, i16 %19, i32 0
  %54 = insertelement <2 x i16> %53, i16 %31, i32 1
  %55 = zext <2 x i16> %54 to <2 x i64>
  %56 = or <2 x i64> %52, %55
  %57 = or <2 x i64> %56, %48
  %58 = or <2 x i64> %57, %44
  store <2 x i64> %58, <2 x i64>* %11, align 16
  %59 = bitcast <2 x i64>* %6 to i8*
  %60 = getelementptr inbounds <2 x i64>, <2 x i64>* %6, i64 0, i64 0
  %61 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %7, i64 0, i32 1
  %62 = bitcast <2 x i64>* %6 to [8 x i16]*
  %63 = extractelement <2 x i64> %16, i32 0
  %64 = trunc i64 %63 to i32
  %65 = shl i32 %64, 16
  %66 = ashr exact i32 %65, 16
  %67 = sext i16 %19 to i32
  %68 = add nsw i32 %67, %66
  %69 = icmp slt i32 %68, 32767
  %70 = select i1 %69, i32 %68, i32 32767
  %71 = icmp sgt i32 %68, -32768
  %72 = select i1 %71, i32 %68, i32 -32768
  %73 = icmp slt i32 %68, 0
  %74 = select i1 %73, i32 %72, i32 %70
  %75 = trunc i32 %74 to i16
  call void @llvm.lifetime.start(i64 16, i8* nonnull %59)
  store <2 x i64> zeroinitializer, <2 x i64>* %6, align 16
  %76 = bitcast <2 x i64>* %6 to i16*
  store i16 %75, i16* %76, align 16
  %77 = load i64, i64* %60, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %59)
  %78 = trunc i64 %63 to i32
  %79 = ashr i32 %78, 16
  %80 = sext i16 %22 to i32
  %81 = add nsw i32 %80, %79
  %82 = icmp slt i32 %81, 32767
  %83 = select i1 %82, i32 %81, i32 32767
  %84 = icmp sgt i32 %81, -32768
  %85 = select i1 %84, i32 %81, i32 -32768
  %86 = icmp slt i32 %81, 0
  %87 = select i1 %86, i32 %85, i32 %83
  %88 = trunc i32 %87 to i16
  call void @llvm.lifetime.start(i64 16, i8* nonnull %59)
  store i64 %77, i64* %60, align 16
  store i64 0, i64* %61, align 8
  %89 = getelementptr inbounds [8 x i16], [8 x i16]* %62, i64 0, i64 1
  store i16 %88, i16* %89, align 2
  %90 = load i64, i64* %60, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %59)
  %91 = getelementptr inbounds %struct.uint16v8_t, %struct.uint16v8_t* %10, i64 0, i32 0, i64 2
  %92 = load i16, i16* %91, align 4
  %93 = sext i16 %92 to i32
  %94 = sext i16 %25 to i32
  %95 = add nsw i32 %94, %93
  %96 = icmp slt i32 %95, 32767
  %97 = select i1 %96, i32 %95, i32 32767
  %98 = icmp sgt i32 %95, -32768
  %99 = select i1 %98, i32 %95, i32 -32768
  %100 = icmp slt i32 %95, 0
  %101 = select i1 %100, i32 %99, i32 %97
  %102 = trunc i32 %101 to i16
  call void @llvm.lifetime.start(i64 16, i8* nonnull %59)
  store i64 %90, i64* %60, align 16
  store i64 0, i64* %61, align 8
  %103 = getelementptr inbounds [8 x i16], [8 x i16]* %62, i64 0, i64 2
  store i16 %102, i16* %103, align 4
  %104 = load i64, i64* %60, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %59)
  %105 = getelementptr inbounds %struct.uint16v8_t, %struct.uint16v8_t* %10, i64 0, i32 0, i64 3
  %106 = load i16, i16* %105, align 2
  %107 = getelementptr inbounds %struct.uint16v8_t, %struct.uint16v8_t* %13, i64 0, i32 0, i64 3
  %108 = load i16, i16* %107, align 2
  %109 = sext i16 %106 to i32
  %110 = sext i16 %108 to i32
  %111 = add nsw i32 %110, %109
  %112 = icmp slt i32 %111, 32767
  %113 = select i1 %112, i32 %111, i32 32767
  %114 = icmp sgt i32 %111, -32768
  %115 = select i1 %114, i32 %111, i32 -32768
  %116 = icmp slt i32 %111, 0
  %117 = select i1 %116, i32 %115, i32 %113
  %118 = trunc i32 %117 to i16
  call void @llvm.lifetime.start(i64 16, i8* nonnull %59)
  store i64 %104, i64* %60, align 16
  store i64 0, i64* %61, align 8
  %119 = getelementptr inbounds [8 x i16], [8 x i16]* %62, i64 0, i64 3
  store i16 %118, i16* %119, align 2
  %120 = load i64, i64* %60, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %59)
  %121 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %9, i64 0, i32 1
  %122 = bitcast i64* %121 to i16*
  %123 = load i16, i16* %122, align 8
  %124 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %12, i64 0, i32 1
  %125 = bitcast i64* %124 to i16*
  %126 = load i16, i16* %125, align 8
  %127 = sext i16 %123 to i32
  %128 = sext i16 %126 to i32
  %129 = add nsw i32 %128, %127
  %130 = icmp slt i32 %129, 32767
  %131 = select i1 %130, i32 %129, i32 32767
  %132 = icmp sgt i32 %129, -32768
  %133 = select i1 %132, i32 %129, i32 -32768
  %134 = icmp slt i32 %129, 0
  %135 = select i1 %134, i32 %133, i32 %131
  %136 = trunc i32 %135 to i16
  call void @llvm.lifetime.start(i64 16, i8* nonnull %59)
  store i64 %120, i64* %60, align 16
  store i64 0, i64* %61, align 8
  %137 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %7, i64 0, i32 1
  %138 = bitcast i64* %137 to i16*
  store i16 %136, i16* %138, align 8
  %139 = load i64, i64* %61, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %59)
  %140 = getelementptr inbounds %struct.uint16v8_t, %struct.uint16v8_t* %10, i64 0, i32 0, i64 5
  %141 = load i16, i16* %140, align 2
  %142 = getelementptr inbounds %struct.uint16v8_t, %struct.uint16v8_t* %13, i64 0, i32 0, i64 5
  %143 = load i16, i16* %142, align 2
  %144 = sext i16 %141 to i32
  %145 = sext i16 %143 to i32
  %146 = add nsw i32 %145, %144
  %147 = icmp slt i32 %146, 32767
  %148 = select i1 %147, i32 %146, i32 32767
  %149 = icmp sgt i32 %146, -32768
  %150 = select i1 %149, i32 %146, i32 -32768
  %151 = icmp slt i32 %146, 0
  %152 = select i1 %151, i32 %150, i32 %148
  %153 = trunc i32 %152 to i16
  call void @llvm.lifetime.start(i64 16, i8* nonnull %59)
  store i64 %120, i64* %60, align 16
  store i64 %139, i64* %61, align 8
  %154 = getelementptr inbounds [8 x i16], [8 x i16]* %62, i64 0, i64 5
  store i16 %153, i16* %154, align 2
  %155 = load i64, i64* %61, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %59)
  %156 = getelementptr inbounds %struct.uint16v8_t, %struct.uint16v8_t* %10, i64 0, i32 0, i64 6
  %157 = load i16, i16* %156, align 4
  %158 = getelementptr inbounds %struct.uint16v8_t, %struct.uint16v8_t* %13, i64 0, i32 0, i64 6
  %159 = load i16, i16* %158, align 4
  %160 = sext i16 %157 to i32
  %161 = sext i16 %159 to i32
  %162 = add nsw i32 %161, %160
  %163 = icmp slt i32 %162, 32767
  %164 = select i1 %163, i32 %162, i32 32767
  %165 = icmp sgt i32 %162, -32768
  %166 = select i1 %165, i32 %162, i32 -32768
  %167 = icmp slt i32 %162, 0
  %168 = select i1 %167, i32 %166, i32 %164
  %169 = trunc i32 %168 to i16
  call void @llvm.lifetime.start(i64 16, i8* nonnull %59)
  store i64 %120, i64* %60, align 16
  store i64 %155, i64* %61, align 8
  %170 = getelementptr inbounds [8 x i16], [8 x i16]* %62, i64 0, i64 6
  store i16 %169, i16* %170, align 4
  %171 = load i64, i64* %61, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %59)
  %172 = getelementptr inbounds %struct.uint16v8_t, %struct.uint16v8_t* %10, i64 0, i32 0, i64 7
  %173 = load i16, i16* %172, align 2
  %174 = getelementptr inbounds %struct.uint16v8_t, %struct.uint16v8_t* %13, i64 0, i32 0, i64 7
  %175 = load i16, i16* %174, align 2
  %176 = sext i16 %173 to i32
  %177 = sext i16 %175 to i32
  %178 = add nsw i32 %177, %176
  %179 = icmp slt i32 %178, 32767
  %180 = select i1 %179, i32 %178, i32 32767
  %181 = icmp sgt i32 %178, -32768
  %182 = select i1 %181, i32 %178, i32 -32768
  %183 = icmp slt i32 %178, 0
  %184 = select i1 %183, i32 %182, i32 %180
  %185 = trunc i32 %184 to i16
  call void @llvm.lifetime.start(i64 16, i8* nonnull %59)
  store i64 %120, i64* %60, align 16
  store i64 %171, i64* %61, align 8
  %186 = getelementptr inbounds [8 x i16], [8 x i16]* %62, i64 0, i64 7
  store i16 %185, i16* %186, align 2
  %187 = load i64, i64* %61, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %59)
  %188 = lshr i64 %120, 16
  %189 = lshr i64 %120, 32
  %190 = lshr i64 %120, 48
  %191 = trunc i64 %120 to i16
  %192 = trunc i64 %188 to i16
  %193 = trunc i64 %189 to i16
  %194 = trunc i64 %190 to i16
  %195 = bitcast i8* %2 to i16*
  store i16 %191, i16* %195, align 1
  %196 = getelementptr inbounds i8, i8* %2, i64 2
  %197 = bitcast i8* %196 to i16*
  store i16 %192, i16* %197, align 1
  %198 = getelementptr inbounds i8, i8* %2, i64 4
  %199 = bitcast i8* %198 to i16*
  store i16 %193, i16* %199, align 1
  %200 = getelementptr inbounds i8, i8* %2, i64 6
  %201 = bitcast i8* %200 to i16*
  store i16 %194, i16* %201, align 1
  %202 = trunc i64 %187 to i16
  %203 = getelementptr inbounds i8, i8* %2, i64 8
  %204 = bitcast i8* %203 to i16*
  store i16 %202, i16* %204, align 1
  %205 = lshr i64 %187, 16
  %206 = trunc i64 %205 to i16
  %207 = getelementptr inbounds i8, i8* %2, i64 10
  %208 = bitcast i8* %207 to i16*
  store i16 %206, i16* %208, align 1
  %209 = lshr i64 %187, 32
  %210 = trunc i64 %209 to i16
  %211 = getelementptr inbounds i8, i8* %2, i64 12
  %212 = bitcast i8* %211 to i16*
  store i16 %210, i16* %212, align 1
  %213 = lshr i64 %187, 48
  %214 = trunc i64 %213 to i16
  %215 = getelementptr inbounds i8, i8* %2, i64 14
  %216 = bitcast i8* %215 to i16*
  store i16 %214, i16* %216, align 1
  call void @llvm.lifetime.end(i64 16, i8* nonnull %17) 
  call void @llvm.lifetime.end(i64 16, i8* nonnull %14) 
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L7PADDUSBI3VnWI8vec128_tE2VnIS2_ES5_EEP6MemoryS7_R5StateT_T0_T1_(%struct.Memory* readnone returned, %struct.State* nocapture readnone dereferenceable(3376), i8* nocapture, i8* nocapture readonly, i8* nocapture readonly)  {
  %6 = alloca <2 x i64>, align 16
  %7 = bitcast <2 x i64>* %6 to { i64, i64 }*
  %8 = bitcast <2 x i64>* %6 to %struct.uint8v16_t*
  %9 = alloca { i64, i64 }, align 8
  %10 = bitcast { i64, i64 }* %9 to %struct.uint8v16_t*
  %11 = alloca <16 x i8>, align 16
  %12 = bitcast <16 x i8>* %11 to %struct.uint8v16_t*
  %13 = bitcast <2 x i64>* %6 to i8*
  call void @llvm.lifetime.start(i64 16, i8* nonnull %13) 
  %14 = bitcast i8* %3 to <2 x i64>*
  %15 = load <2 x i64>, <2 x i64>* %14, align 1
  store <2 x i64> %15, <2 x i64>* %6, align 16
  %16 = bitcast { i64, i64 }* %9 to i8*
  call void @llvm.lifetime.start(i64 16, i8* nonnull %16) 
  %17 = bitcast i8* %4 to i64*
  %18 = load i64, i64* %17, align 1
  %19 = getelementptr inbounds i8, i8* %4, i64 8
  %20 = bitcast i8* %19 to i64*
  %21 = load i64, i64* %20, align 1
  %22 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %9, i64 0, i32 0
  store i64 %18, i64* %22, align 8
  %23 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %9, i64 0, i32 1
  store i64 %21, i64* %23, align 8
  %24 = getelementptr inbounds <16 x i8>, <16 x i8>* %11, i64 0, i64 0
  call void @llvm.lifetime.start(i64 16, i8* nonnull %24) 
  %25 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %12, i64 0, i32 0, i64 11
  call void @llvm.memset.p0i8.i64(i8* nonnull %25, i8 0, i64 5, i32 1, i1 false)
  %26 = extractelement <2 x i64> %15, i32 0
  %27 = trunc i64 %26 to i8
  %28 = trunc i64 %18 to i8
  %29 = lshr i64 %26, 8
  %30 = trunc i64 %29 to i8
  %31 = lshr i64 %18, 8
  %32 = trunc i64 %31 to i8
  %33 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %12, i64 0, i32 0, i64 1
  %34 = lshr i64 %26, 16
  %35 = trunc i64 %34 to i8
  %36 = lshr i64 %18, 16
  %37 = trunc i64 %36 to i8
  %38 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %12, i64 0, i32 0, i64 2
  %39 = lshr i64 %26, 24
  %40 = trunc i64 %39 to i8
  %41 = lshr i64 %18, 24
  %42 = trunc i64 %41 to i8
  %43 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %12, i64 0, i32 0, i64 3
  %44 = lshr i64 %26, 32
  %45 = trunc i64 %44 to i8
  %46 = lshr i64 %18, 32
  %47 = trunc i64 %46 to i8
  %48 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %12, i64 0, i32 0, i64 4
  %49 = lshr i64 %26, 40
  %50 = trunc i64 %49 to i8
  %51 = lshr i64 %18, 40
  %52 = trunc i64 %51 to i8
  %53 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %12, i64 0, i32 0, i64 5
  %54 = lshr i64 %26, 48
  %55 = trunc i64 %54 to i8
  %56 = lshr i64 %18, 48
  %57 = trunc i64 %56 to i8
  %58 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %12, i64 0, i32 0, i64 6
  %59 = lshr i64 %26, 56
  %60 = trunc i64 %59 to i8
  %61 = lshr i64 %18, 56
  %62 = trunc i64 %61 to i8
  %63 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %7, i64 0, i32 1
  %64 = bitcast i64* %63 to i8*
  %65 = load i8, i8* %64, align 8
  %66 = trunc i64 %21 to i8
  %67 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %8, i64 0, i32 0, i64 9
  %68 = load i8, i8* %67, align 1
  %69 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %10, i64 0, i32 0, i64 9
  %70 = load i8, i8* %69, align 1
  %71 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %8, i64 0, i32 0, i64 10
  %72 = load i8, i8* %71, align 2
  %73 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %10, i64 0, i32 0, i64 10
  %74 = load i8, i8* %73, align 2
  %75 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %8, i64 0, i32 0, i64 11
  %76 = load i8, i8* %75, align 1
  %77 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %10, i64 0, i32 0, i64 11
  %78 = load i8, i8* %77, align 1
  %79 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %8, i64 0, i32 0, i64 12
  %80 = load i8, i8* %79, align 4
  %81 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %10, i64 0, i32 0, i64 12
  %82 = load i8, i8* %81, align 4
  %83 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %8, i64 0, i32 0, i64 13
  %84 = load i8, i8* %83, align 1
  %85 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %10, i64 0, i32 0, i64 13
  %86 = load i8, i8* %85, align 1
  %87 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %8, i64 0, i32 0, i64 14
  %88 = load i8, i8* %87, align 2
  %89 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %10, i64 0, i32 0, i64 14
  %90 = load i8, i8* %89, align 2
  %91 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %8, i64 0, i32 0, i64 15
  %92 = load i8, i8* %91, align 1
  %93 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %10, i64 0, i32 0, i64 15
  %94 = load i8, i8* %93, align 1
  %95 = insertelement <16 x i8> undef, i8 %28, i32 0
  %96 = insertelement <16 x i8> %95, i8 %32, i32 1
  %97 = insertelement <16 x i8> %96, i8 %37, i32 2
  %98 = insertelement <16 x i8> %97, i8 %42, i32 3
  %99 = insertelement <16 x i8> %98, i8 %47, i32 4
  %100 = insertelement <16 x i8> %99, i8 %52, i32 5
  %101 = insertelement <16 x i8> %100, i8 %57, i32 6
  %102 = insertelement <16 x i8> %101, i8 %62, i32 7
  %103 = insertelement <16 x i8> %102, i8 %66, i32 8
  %104 = insertelement <16 x i8> %103, i8 %70, i32 9
  %105 = insertelement <16 x i8> %104, i8 %74, i32 10
  %106 = insertelement <16 x i8> %105, i8 %78, i32 11
  %107 = insertelement <16 x i8> %106, i8 %82, i32 12
  %108 = insertelement <16 x i8> %107, i8 %86, i32 13
  %109 = insertelement <16 x i8> %108, i8 %90, i32 14
  %110 = insertelement <16 x i8> %109, i8 %94, i32 15
  %111 = insertelement <16 x i8> undef, i8 %27, i32 0
  %112 = insertelement <16 x i8> %111, i8 %30, i32 1
  %113 = insertelement <16 x i8> %112, i8 %35, i32 2
  %114 = insertelement <16 x i8> %113, i8 %40, i32 3
  %115 = insertelement <16 x i8> %114, i8 %45, i32 4
  %116 = insertelement <16 x i8> %115, i8 %50, i32 5
  %117 = insertelement <16 x i8> %116, i8 %55, i32 6
  %118 = insertelement <16 x i8> %117, i8 %60, i32 7
  %119 = insertelement <16 x i8> %118, i8 %65, i32 8
  %120 = insertelement <16 x i8> %119, i8 %68, i32 9
  %121 = insertelement <16 x i8> %120, i8 %72, i32 10
  %122 = insertelement <16 x i8> %121, i8 %76, i32 11
  %123 = insertelement <16 x i8> %122, i8 %80, i32 12
  %124 = insertelement <16 x i8> %123, i8 %84, i32 13
  %125 = insertelement <16 x i8> %124, i8 %88, i32 14
  %126 = insertelement <16 x i8> %125, i8 %92, i32 15
  %127 = add <16 x i8> %110, %126
  %128 = icmp ult <16 x i8> %127, %126
  %129 = select <16 x i1> %128, <16 x i8> <i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1>, <16 x i8> %127
  store <16 x i8> %129, <16 x i8>* %11, align 16
  %130 = load i8, i8* %24, align 16
  store i8 %130, i8* %2, align 1
  %131 = load i8, i8* %33, align 1
  %132 = getelementptr inbounds i8, i8* %2, i64 1
  store i8 %131, i8* %132, align 1
  %133 = load i8, i8* %38, align 2
  %134 = getelementptr inbounds i8, i8* %2, i64 2
  store i8 %133, i8* %134, align 1
  %135 = load i8, i8* %43, align 1
  %136 = getelementptr inbounds i8, i8* %2, i64 3
  store i8 %135, i8* %136, align 1
  %137 = load i8, i8* %48, align 4
  %138 = getelementptr inbounds i8, i8* %2, i64 4
  store i8 %137, i8* %138, align 1
  %139 = load i8, i8* %53, align 1
  %140 = getelementptr inbounds i8, i8* %2, i64 5
  store i8 %139, i8* %140, align 1
  %141 = load i8, i8* %58, align 2
  %142 = getelementptr inbounds i8, i8* %2, i64 6
  store i8 %141, i8* %142, align 1
  %143 = getelementptr inbounds i8, i8* %2, i64 7
  %144 = extractelement <16 x i8> %129, i32 7
  store i8 %144, i8* %143, align 1
  %145 = getelementptr inbounds i8, i8* %2, i64 8
  %146 = extractelement <16 x i8> %129, i32 8
  store i8 %146, i8* %145, align 1
  %147 = getelementptr inbounds i8, i8* %2, i64 9
  %148 = extractelement <16 x i8> %129, i32 9
  store i8 %148, i8* %147, align 1
  %149 = getelementptr inbounds i8, i8* %2, i64 10
  %150 = extractelement <16 x i8> %129, i32 10
  store i8 %150, i8* %149, align 1
  %151 = getelementptr inbounds i8, i8* %2, i64 11
  %152 = extractelement <16 x i8> %129, i32 11
  store i8 %152, i8* %151, align 1
  %153 = getelementptr inbounds i8, i8* %2, i64 12
  %154 = extractelement <16 x i8> %129, i32 12
  store i8 %154, i8* %153, align 1
  %155 = getelementptr inbounds i8, i8* %2, i64 13
  %156 = extractelement <16 x i8> %129, i32 13
  store i8 %156, i8* %155, align 1
  %157 = getelementptr inbounds i8, i8* %2, i64 14
  %158 = extractelement <16 x i8> %129, i32 14
  store i8 %158, i8* %157, align 1
  %159 = getelementptr inbounds i8, i8* %2, i64 15
  %160 = extractelement <16 x i8> %129, i32 15
  store i8 %160, i8* %159, align 1
  call void @llvm.lifetime.end(i64 16, i8* nonnull %24) 
  call void @llvm.lifetime.end(i64 16, i8* nonnull %16) 
  call void @llvm.lifetime.end(i64 16, i8* nonnull %13) 
  ret %struct.Memory* %0
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i32, i1) 

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L7PADDUSBI3VnWI8vec128_tE2VnIS2_E3MVnIS2_EEEP6MemoryS9_R5StateT_T0_T1_(%struct.Memory* returned, %struct.State* nocapture readnone dereferenceable(3376), i8* nocapture, i8* nocapture readonly, i64)  {
  %6 = alloca <2 x i64>, align 16
  %7 = bitcast <2 x i64>* %6 to { i64, i64 }*
  %8 = bitcast <2 x i64>* %6 to %struct.uint8v16_t*
  %9 = alloca <2 x i64>, align 16
  %10 = bitcast <2 x i64>* %9 to %struct.uint8v16_t*
  %11 = alloca %struct.uint8v16_t, align 1
  %12 = bitcast <2 x i64>* %6 to i8*
  call void @llvm.lifetime.start(i64 16, i8* nonnull %12) 
  %13 = bitcast i8* %3 to <2 x i64>*
  %14 = load <2 x i64>, <2 x i64>* %13, align 1
  store <2 x i64> %14, <2 x i64>* %6, align 16
  %15 = bitcast <2 x i64>* %9 to i8*
  call void @llvm.lifetime.start(i64 16, i8* nonnull %15) 
  %16 = inttoptr i64 %4 to i8*
  %17 = load i8, i8* %16
  %18 = add i64 %4, 1
  %19 = inttoptr i64 %18 to i8*
  %20 = load i8, i8* %19
  %21 = add i64 %4, 2
  %22 = inttoptr i64 %21 to i8*
  %23 = load i8, i8* %22
  %24 = add i64 %4, 3
  %25 = inttoptr i64 %24 to i8*
  %26 = load i8, i8* %25
  %27 = add i64 %4, 4
  %28 = inttoptr i64 %27 to i8*
  %29 = load i8, i8* %28
  %30 = add i64 %4, 5
  %31 = inttoptr i64 %30 to i8*
  %32 = load i8, i8* %31
  %33 = add i64 %4, 6
  %34 = inttoptr i64 %33 to i8*
  %35 = load i8, i8* %34
  %36 = add i64 %4, 7
  %37 = inttoptr i64 %36 to i8*
  %38 = load i8, i8* %37
  %39 = add i64 %4, 8
  %40 = inttoptr i64 %39 to i8*
  %41 = load i8, i8* %40
  %42 = add i64 %4, 9
  %43 = inttoptr i64 %42 to i8*
  %44 = load i8, i8* %43
  %45 = add i64 %4, 10
  %46 = inttoptr i64 %45 to i8*
  %47 = load i8, i8* %46
  %48 = add i64 %4, 11
  %49 = inttoptr i64 %48 to i8*
  %50 = load i8, i8* %49
  %51 = add i64 %4, 12
  %52 = inttoptr i64 %51 to i8*
  %53 = load i8, i8* %52
  %54 = add i64 %4, 13
  %55 = inttoptr i64 %54 to i8*
  %56 = load i8, i8* %55
  %57 = add i64 %4, 14
  %58 = inttoptr i64 %57 to i8*
  %59 = load i8, i8* %58
  %60 = add i64 %4, 15
  %61 = inttoptr i64 %60 to i8*
  %62 = load i8, i8* %61
  %63 = insertelement <2 x i8> undef, i8 %38, i32 0
  %64 = insertelement <2 x i8> %63, i8 %62, i32 1
  %65 = zext <2 x i8> %64 to <2 x i64>
  %66 = shl nuw <2 x i64> %65, <i64 56, i64 56>
  %67 = insertelement <2 x i8> undef, i8 %35, i32 0
  %68 = insertelement <2 x i8> %67, i8 %59, i32 1
  %69 = zext <2 x i8> %68 to <2 x i64>
  %70 = shl nuw nsw <2 x i64> %69, <i64 48, i64 48>
  %71 = insertelement <2 x i8> undef, i8 %32, i32 0
  %72 = insertelement <2 x i8> %71, i8 %56, i32 1
  %73 = zext <2 x i8> %72 to <2 x i64>
  %74 = shl nuw nsw <2 x i64> %73, <i64 40, i64 40>
  %75 = insertelement <2 x i8> undef, i8 %29, i32 0
  %76 = insertelement <2 x i8> %75, i8 %53, i32 1
  %77 = zext <2 x i8> %76 to <2 x i64>
  %78 = shl nuw nsw <2 x i64> %77, <i64 32, i64 32>
  %79 = insertelement <2 x i8> undef, i8 %26, i32 0
  %80 = insertelement <2 x i8> %79, i8 %50, i32 1
  %81 = zext <2 x i8> %80 to <2 x i64>
  %82 = shl nuw nsw <2 x i64> %81, <i64 24, i64 24>
  %83 = insertelement <2 x i8> undef, i8 %23, i32 0
  %84 = insertelement <2 x i8> %83, i8 %47, i32 1
  %85 = zext <2 x i8> %84 to <2 x i64>
  %86 = shl nuw nsw <2 x i64> %85, <i64 16, i64 16>
  %87 = insertelement <2 x i8> undef, i8 %20, i32 0
  %88 = insertelement <2 x i8> %87, i8 %44, i32 1
  %89 = zext <2 x i8> %88 to <2 x i64>
  %90 = shl nuw nsw <2 x i64> %89, <i64 8, i64 8>
  %91 = insertelement <2 x i8> undef, i8 %17, i32 0
  %92 = insertelement <2 x i8> %91, i8 %41, i32 1
  %93 = zext <2 x i8> %92 to <2 x i64>
  %94 = or <2 x i64> %90, %93
  %95 = or <2 x i64> %94, %86
  %96 = or <2 x i64> %95, %82
  %97 = or <2 x i64> %96, %78
  %98 = or <2 x i64> %97, %74
  %99 = or <2 x i64> %98, %70
  %100 = or <2 x i64> %99, %66
  store <2 x i64> %100, <2 x i64>* %9, align 16
  %101 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %11, i64 0, i32 0, i64 0
  call void @llvm.lifetime.start(i64 16, i8* nonnull %101) 
  %102 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %11, i64 0, i32 0, i64 12
  %103 = bitcast i8* %102 to i32*
  store i32 0, i32* %103, align 1
  %104 = extractelement <2 x i64> %14, i32 0
  %105 = trunc i64 %104 to i8
  %106 = add i8 %17, %105
  %107 = icmp ult i8 %106, %105
  %108 = select i1 %107, i8 -1, i8 %106
  store i8 %108, i8* %101, align 1
  %109 = lshr i64 %104, 8
  %110 = trunc i64 %109 to i8
  %111 = add i8 %20, %110
  %112 = icmp ult i8 %111, %110
  %113 = select i1 %112, i8 -1, i8 %111
  %114 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %11, i64 0, i32 0, i64 1
  store i8 %113, i8* %114, align 1
  %115 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %8, i64 0, i32 0, i64 2
  %116 = load i8, i8* %115, align 2
  %117 = add i8 %23, %116
  %118 = icmp ult i8 %117, %116
  %119 = select i1 %118, i8 -1, i8 %117
  %120 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %11, i64 0, i32 0, i64 2
  store i8 %119, i8* %120, align 1
  %121 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %8, i64 0, i32 0, i64 3
  %122 = load i8, i8* %121, align 1
  %123 = add i8 %26, %122
  %124 = icmp ult i8 %123, %122
  %125 = select i1 %124, i8 -1, i8 %123
  %126 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %11, i64 0, i32 0, i64 3
  store i8 %125, i8* %126, align 1
  %127 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %8, i64 0, i32 0, i64 4
  %128 = load i8, i8* %127, align 4
  %129 = extractelement <2 x i64> %97, i32 0
  %130 = lshr i64 %129, 32
  %131 = trunc i64 %130 to i8
  %132 = add i8 %131, %128
  %133 = icmp ult i8 %132, %128
  %134 = select i1 %133, i8 -1, i8 %132
  %135 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %11, i64 0, i32 0, i64 4
  store i8 %134, i8* %135, align 1
  %136 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %8, i64 0, i32 0, i64 5
  %137 = load i8, i8* %136, align 1
  %138 = extractelement <2 x i64> %98, i32 0
  %139 = lshr i64 %138, 40
  %140 = trunc i64 %139 to i8
  %141 = add i8 %140, %137
  %142 = icmp ult i8 %141, %137
  %143 = select i1 %142, i8 -1, i8 %141
  %144 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %11, i64 0, i32 0, i64 5
  store i8 %143, i8* %144, align 1
  %145 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %8, i64 0, i32 0, i64 6
  %146 = load i8, i8* %145, align 2
  %147 = extractelement <2 x i64> %99, i32 0
  %148 = lshr i64 %147, 48
  %149 = trunc i64 %148 to i8
  %150 = add i8 %149, %146
  %151 = icmp ult i8 %150, %146
  %152 = select i1 %151, i8 -1, i8 %150
  %153 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %11, i64 0, i32 0, i64 6
  store i8 %152, i8* %153, align 1
  %154 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %8, i64 0, i32 0, i64 7
  %155 = load i8, i8* %154, align 1
  %156 = extractelement <2 x i64> %100, i32 0
  %157 = lshr i64 %156, 56
  %158 = trunc i64 %157 to i8
  %159 = add i8 %158, %155
  %160 = icmp ult i8 %159, %155
  %161 = select i1 %160, i8 -1, i8 %159
  %162 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %11, i64 0, i32 0, i64 7
  store i8 %161, i8* %162, align 1
  %163 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %7, i64 0, i32 1
  %164 = bitcast i64* %163 to i8*
  %165 = load i8, i8* %164, align 8
  %166 = add i8 %41, %165
  %167 = icmp ult i8 %166, %165
  %168 = select i1 %167, i8 -1, i8 %166
  %169 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %11, i64 0, i32 0, i64 8
  store i8 %168, i8* %169, align 1
  %170 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %8, i64 0, i32 0, i64 9
  %171 = load i8, i8* %170, align 1
  %172 = add i8 %44, %171
  %173 = icmp ult i8 %172, %171
  %174 = select i1 %173, i8 -1, i8 %172
  %175 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %11, i64 0, i32 0, i64 9
  store i8 %174, i8* %175, align 1
  %176 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %8, i64 0, i32 0, i64 10
  %177 = load i8, i8* %176, align 2
  %178 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %10, i64 0, i32 0, i64 10
  %179 = load i8, i8* %178, align 2
  %180 = add i8 %179, %177
  %181 = icmp ult i8 %180, %177
  %182 = select i1 %181, i8 -1, i8 %180
  %183 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %11, i64 0, i32 0, i64 10
  store i8 %182, i8* %183, align 1
  %184 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %8, i64 0, i32 0, i64 11
  %185 = load i8, i8* %184, align 1
  %186 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %10, i64 0, i32 0, i64 11
  %187 = load i8, i8* %186, align 1
  %188 = add i8 %187, %185
  %189 = icmp ult i8 %188, %185
  %190 = select i1 %189, i8 -1, i8 %188
  %191 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %11, i64 0, i32 0, i64 11
  store i8 %190, i8* %191, align 1
  %192 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %8, i64 0, i32 0, i64 12
  %193 = load i8, i8* %192, align 4
  %194 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %10, i64 0, i32 0, i64 12
  %195 = load i8, i8* %194, align 4
  %196 = add i8 %195, %193
  %197 = icmp ult i8 %196, %193
  %198 = select i1 %197, i8 -1, i8 %196
  %199 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %11, i64 0, i32 0, i64 12
  store i8 %198, i8* %199, align 1
  %200 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %8, i64 0, i32 0, i64 13
  %201 = load i8, i8* %200, align 1
  %202 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %10, i64 0, i32 0, i64 13
  %203 = load i8, i8* %202, align 1
  %204 = add i8 %203, %201
  %205 = icmp ult i8 %204, %201
  %206 = select i1 %205, i8 -1, i8 %204
  %207 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %11, i64 0, i32 0, i64 13
  store i8 %206, i8* %207, align 1
  %208 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %8, i64 0, i32 0, i64 14
  %209 = load i8, i8* %208, align 2
  %210 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %10, i64 0, i32 0, i64 14
  %211 = load i8, i8* %210, align 2
  %212 = add i8 %211, %209
  %213 = icmp ult i8 %212, %209
  %214 = select i1 %213, i8 -1, i8 %212
  %215 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %11, i64 0, i32 0, i64 14
  store i8 %214, i8* %215, align 1
  %216 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %8, i64 0, i32 0, i64 15
  %217 = load i8, i8* %216, align 1
  %218 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %10, i64 0, i32 0, i64 15
  %219 = load i8, i8* %218, align 1
  %220 = add i8 %219, %217
  %221 = icmp ult i8 %220, %217
  %222 = select i1 %221, i8 -1, i8 %220
  %223 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %11, i64 0, i32 0, i64 15
  store i8 %222, i8* %223, align 1
  %224 = load i8, i8* %101, align 1
  store i8 %224, i8* %2, align 1
  %225 = load i8, i8* %114, align 1
  %226 = getelementptr inbounds i8, i8* %2, i64 1
  store i8 %225, i8* %226, align 1
  %227 = load i8, i8* %120, align 1
  %228 = getelementptr inbounds i8, i8* %2, i64 2
  store i8 %227, i8* %228, align 1
  %229 = load i8, i8* %126, align 1
  %230 = getelementptr inbounds i8, i8* %2, i64 3
  store i8 %229, i8* %230, align 1
  %231 = load i8, i8* %135, align 1
  %232 = getelementptr inbounds i8, i8* %2, i64 4
  store i8 %231, i8* %232, align 1
  %233 = load i8, i8* %144, align 1
  %234 = getelementptr inbounds i8, i8* %2, i64 5
  store i8 %233, i8* %234, align 1
  %235 = load i8, i8* %153, align 1
  %236 = getelementptr inbounds i8, i8* %2, i64 6
  store i8 %235, i8* %236, align 1
  %237 = getelementptr inbounds i8, i8* %2, i64 7
  store i8 %161, i8* %237, align 1
  %238 = getelementptr inbounds i8, i8* %2, i64 8
  store i8 %168, i8* %238, align 1
  %239 = getelementptr inbounds i8, i8* %2, i64 9
  store i8 %174, i8* %239, align 1
  %240 = getelementptr inbounds i8, i8* %2, i64 10
  store i8 %182, i8* %240, align 1
  %241 = getelementptr inbounds i8, i8* %2, i64 11
  store i8 %190, i8* %241, align 1
  %242 = getelementptr inbounds i8, i8* %2, i64 12
  store i8 %198, i8* %242, align 1
  %243 = getelementptr inbounds i8, i8* %2, i64 13
  store i8 %206, i8* %243, align 1
  %244 = getelementptr inbounds i8, i8* %2, i64 14
  store i8 %214, i8* %244, align 1
  %245 = getelementptr inbounds i8, i8* %2, i64 15
  store i8 %222, i8* %245, align 1
  call void @llvm.lifetime.end(i64 16, i8* nonnull %101) 
  call void @llvm.lifetime.end(i64 16, i8* nonnull %15) 
  call void @llvm.lifetime.end(i64 16, i8* nonnull %12) 
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L7PADDUSWI3VnWI8vec128_tE2VnIS2_ES5_EEP6MemoryS7_R5StateT_T0_T1_(%struct.Memory* readnone returned, %struct.State* nocapture readnone dereferenceable(3376), i8* nocapture, i8* nocapture readonly, i8* nocapture readonly)  {
  %6 = bitcast i8* %3 to i64*
  %7 = load i64, i64* %6, align 1
  %8 = getelementptr inbounds i8, i8* %3, i64 8
  %9 = bitcast i8* %8 to i64*
  %10 = load i64, i64* %9, align 1
  %11 = bitcast i8* %4 to i64*
  %12 = load i64, i64* %11, align 1
  %13 = getelementptr inbounds i8, i8* %4, i64 8
  %14 = bitcast i8* %13 to i64*
  %15 = load i64, i64* %14, align 1
  %16 = lshr i64 %7, 16
  %17 = lshr i64 %12, 16
  %18 = lshr i64 %7, 32
  %19 = lshr i64 %12, 32
  %20 = lshr i64 %7, 48
  %21 = lshr i64 %12, 48
  %22 = lshr i64 %10, 16
  %23 = lshr i64 %15, 16
  %24 = lshr i64 %10, 32
  %25 = lshr i64 %15, 32
  %26 = lshr i64 %10, 48
  %27 = insertelement <8 x i64> undef, i64 %7, i32 0
  %28 = insertelement <8 x i64> %27, i64 %16, i32 1
  %29 = insertelement <8 x i64> %28, i64 %18, i32 2
  %30 = insertelement <8 x i64> %29, i64 %20, i32 3
  %31 = insertelement <8 x i64> %30, i64 %10, i32 4
  %32 = insertelement <8 x i64> %31, i64 %22, i32 5
  %33 = insertelement <8 x i64> %32, i64 %24, i32 6
  %34 = insertelement <8 x i64> %33, i64 %26, i32 7
  %35 = trunc <8 x i64> %34 to <8 x i16>
  %36 = lshr i64 %15, 48
  %37 = insertelement <8 x i64> undef, i64 %12, i32 0
  %38 = insertelement <8 x i64> %37, i64 %17, i32 1
  %39 = insertelement <8 x i64> %38, i64 %19, i32 2
  %40 = insertelement <8 x i64> %39, i64 %21, i32 3
  %41 = insertelement <8 x i64> %40, i64 %15, i32 4
  %42 = insertelement <8 x i64> %41, i64 %23, i32 5
  %43 = insertelement <8 x i64> %42, i64 %25, i32 6
  %44 = insertelement <8 x i64> %43, i64 %36, i32 7
  %45 = trunc <8 x i64> %44 to <8 x i16>
  %46 = add <8 x i16> %45, %35
  %47 = icmp ult <8 x i16> %46, %35
  %48 = select <8 x i1> %47, <8 x i16> <i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1>, <8 x i16> %46
  %49 = bitcast i8* %2 to <8 x i16>*
  store <8 x i16> %48, <8 x i16>* %49, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L7PADDUSWI3VnWI8vec128_tE2VnIS2_E3MVnIS2_EEEP6MemoryS9_R5StateT_T0_T1_(%struct.Memory* returned, %struct.State* nocapture readnone dereferenceable(3376), i8* nocapture, i8* nocapture readonly, i64)  {
  %6 = alloca { i64, i64 }, align 8
  %7 = bitcast { i64, i64 }* %6 to %struct.uint16v8_t*
  %8 = bitcast { i64, i64 }* %6 to i8*
  call void @llvm.lifetime.start(i64 16, i8* nonnull %8) 
  %9 = bitcast i8* %3 to i64*
  %10 = load i64, i64* %9, align 1
  %11 = getelementptr inbounds i8, i8* %3, i64 8
  %12 = bitcast i8* %11 to i64*
  %13 = load i64, i64* %12, align 1
  %14 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %6, i64 0, i32 0
  store i64 %10, i64* %14, align 8
  %15 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %6, i64 0, i32 1
  store i64 %13, i64* %15, align 8
  %16 = inttoptr i64 %4 to i16*
  %17 = load i16, i16* %16
  %18 = add i64 %4, 2
  %19 = inttoptr i64 %18 to i16*
  %20 = load i16, i16* %19
  %21 = add i64 %4, 4
  %22 = inttoptr i64 %21 to i16*
  %23 = load i16, i16* %22
  %24 = add i64 %4, 6
  %25 = inttoptr i64 %24 to i16*
  %26 = load i16, i16* %25
  %27 = add i64 %4, 8
  %28 = inttoptr i64 %27 to i16*
  %29 = load i16, i16* %28
  %30 = add i64 %4, 10
  %31 = inttoptr i64 %30 to i16*
  %32 = load i16, i16* %31
  %33 = add i64 %4, 12
  %34 = inttoptr i64 %33 to i16*
  %35 = load i16, i16* %34
  %36 = add i64 %4, 14
  %37 = inttoptr i64 %36 to i16*
  %38 = load i16, i16* %37
  %39 = trunc i64 %10 to i16
  %40 = lshr i64 %10, 16
  %41 = trunc i64 %40 to i16
  %42 = lshr i64 %10, 32
  %43 = trunc i64 %42 to i16
  %44 = lshr i64 %10, 48
  %45 = trunc i64 %44 to i16
  %46 = trunc i64 %13 to i16
  %47 = lshr i64 %13, 16
  %48 = trunc i64 %47 to i16
  %49 = getelementptr inbounds %struct.uint16v8_t, %struct.uint16v8_t* %7, i64 0, i32 0, i64 6
  %50 = load i16, i16* %49, align 4
  %51 = getelementptr inbounds %struct.uint16v8_t, %struct.uint16v8_t* %7, i64 0, i32 0, i64 7
  %52 = load i16, i16* %51, align 2
  %53 = insertelement <8 x i16> undef, i16 %17, i32 0
  %54 = insertelement <8 x i16> %53, i16 %20, i32 1
  %55 = insertelement <8 x i16> %54, i16 %23, i32 2
  %56 = insertelement <8 x i16> %55, i16 %26, i32 3
  %57 = insertelement <8 x i16> %56, i16 %29, i32 4
  %58 = insertelement <8 x i16> %57, i16 %32, i32 5
  %59 = insertelement <8 x i16> %58, i16 %35, i32 6
  %60 = insertelement <8 x i16> %59, i16 %38, i32 7
  %61 = insertelement <8 x i16> undef, i16 %39, i32 0
  %62 = insertelement <8 x i16> %61, i16 %41, i32 1
  %63 = insertelement <8 x i16> %62, i16 %43, i32 2
  %64 = insertelement <8 x i16> %63, i16 %45, i32 3
  %65 = insertelement <8 x i16> %64, i16 %46, i32 4
  %66 = insertelement <8 x i16> %65, i16 %48, i32 5
  %67 = insertelement <8 x i16> %66, i16 %50, i32 6
  %68 = insertelement <8 x i16> %67, i16 %52, i32 7
  %69 = add <8 x i16> %60, %68
  %70 = icmp ult <8 x i16> %69, %68
  %71 = select <8 x i1> %70, <8 x i16> <i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1>, <8 x i16> %69
  %72 = bitcast i8* %2 to <8 x i16>*
  store <8 x i16> %71, <8 x i16>* %72, align 1
  call void @llvm.lifetime.end(i64 16, i8* nonnull %8) 
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L6PHADDWI4RVnWI7vec64_tE3RVnIS2_ES5_EEP6MemoryS7_R5StateT_T0_T1_(%struct.Memory* readnone returned, %struct.State* nocapture readnone dereferenceable(3376), i64* nocapture, i64, i64)  {
  %6 = alloca i64, align 8
  %7 = alloca i64, align 8
  %8 = bitcast i64* %6 to i8*
  %9 = bitcast i64* %6 to [4 x i16]*
  %10 = trunc i64 %3 to i16
  %11 = lshr i64 %3, 16
  %12 = trunc i64 %11 to i16
  %13 = add i16 %12, %10
  call void @llvm.lifetime.start(i64 8, i8* nonnull %8)
  store i64 0, i64* %6, align 8
  %14 = bitcast i64* %6 to i16*
  store i16 %13, i16* %14, align 8
  %15 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %8)
  %16 = lshr i64 %3, 32
  %17 = trunc i64 %16 to i16
  %18 = lshr i64 %3, 48
  %19 = trunc i64 %18 to i16
  %20 = add i16 %19, %17
  call void @llvm.lifetime.start(i64 8, i8* nonnull %8)
  store i64 %15, i64* %6, align 8
  %21 = getelementptr inbounds [4 x i16], [4 x i16]* %9, i64 0, i64 1
  store i16 %20, i16* %21, align 2
  %22 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %8)
  %23 = bitcast i64* %7 to i8*
  %24 = bitcast i64* %7 to [4 x i16]*
  %25 = trunc i64 %4 to i16
  %26 = lshr i64 %4, 16
  %27 = trunc i64 %26 to i16
  %28 = add i16 %27, %25
  call void @llvm.lifetime.start(i64 8, i8* nonnull %23)
  store i64 %22, i64* %7, align 8
  %29 = getelementptr inbounds [4 x i16], [4 x i16]* %24, i64 0, i64 2
  store i16 %28, i16* %29, align 4
  %30 = load i64, i64* %7, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %23)
  %31 = lshr i64 %4, 32
  %32 = trunc i64 %31 to i16
  %33 = lshr i64 %4, 48
  %34 = trunc i64 %33 to i16
  %35 = add i16 %34, %32
  call void @llvm.lifetime.start(i64 8, i8* nonnull %23)
  store i64 %30, i64* %7, align 8
  %36 = getelementptr inbounds [4 x i16], [4 x i16]* %24, i64 0, i64 3
  store i16 %35, i16* %36, align 2
  %37 = load i64, i64* %7, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %23)
  %38 = lshr i64 %37, 16
  %39 = lshr i64 %37, 32
  %40 = lshr i64 %37, 48
  %41 = trunc i64 %37 to i16
  %42 = trunc i64 %38 to i16
  %43 = trunc i64 %39 to i16
  %44 = trunc i64 %40 to i16
  %45 = bitcast i64* %2 to [4 x i16]*
  %46 = bitcast i64* %2 to i16*
  store i16 %41, i16* %46, align 1
  %47 = getelementptr inbounds [4 x i16], [4 x i16]* %45, i64 0, i64 1
  store i16 %42, i16* %47, align 1
  %48 = getelementptr inbounds [4 x i16], [4 x i16]* %45, i64 0, i64 2
  store i16 %43, i16* %48, align 1
  %49 = getelementptr inbounds [4 x i16], [4 x i16]* %45, i64 0, i64 3
  store i16 %44, i16* %49, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L6PHADDWI4RVnWI7vec64_tE3RVnIS2_E3MVnIS2_EEEP6MemoryS9_R5StateT_T0_T1_(%struct.Memory* returned, %struct.State* nocapture readnone dereferenceable(3376), i64* nocapture, i64, i64)  {
  %6 = alloca i64, align 8
  %7 = alloca i64, align 8
  %8 = inttoptr i64 %4 to i16*
  %9 = load i16, i16* %8
  %10 = add i64 %4, 2
  %11 = inttoptr i64 %10 to i16*
  %12 = load i16, i16* %11
  %13 = add i64 %4, 4
  %14 = inttoptr i64 %13 to i16*
  %15 = load i16, i16* %14
  %16 = add i64 %4, 6
  %17 = inttoptr i64 %16 to i16*
  %18 = load i16, i16* %17
  %19 = bitcast i64* %6 to i8*
  %20 = bitcast i64* %6 to [4 x i16]*
  %21 = trunc i64 %3 to i16
  %22 = lshr i64 %3, 16
  %23 = trunc i64 %22 to i16
  %24 = add i16 %23, %21
  call void @llvm.lifetime.start(i64 8, i8* nonnull %19)
  store i64 0, i64* %6, align 8
  %25 = bitcast i64* %6 to i16*
  store i16 %24, i16* %25, align 8
  %26 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %19)
  %27 = lshr i64 %3, 32
  %28 = trunc i64 %27 to i16
  %29 = lshr i64 %3, 48
  %30 = trunc i64 %29 to i16
  %31 = add i16 %30, %28
  call void @llvm.lifetime.start(i64 8, i8* nonnull %19)
  store i64 %26, i64* %6, align 8
  %32 = getelementptr inbounds [4 x i16], [4 x i16]* %20, i64 0, i64 1
  store i16 %31, i16* %32, align 2
  %33 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %19)
  %34 = bitcast i64* %7 to i8*
  %35 = bitcast i64* %7 to [4 x i16]*
  %36 = add i16 %12, %9
  call void @llvm.lifetime.start(i64 8, i8* nonnull %34)
  store i64 %33, i64* %7, align 8
  %37 = getelementptr inbounds [4 x i16], [4 x i16]* %35, i64 0, i64 2
  store i16 %36, i16* %37, align 4
  %38 = load i64, i64* %7, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %34)
  %39 = add i16 %18, %15
  call void @llvm.lifetime.start(i64 8, i8* nonnull %34)
  store i64 %38, i64* %7, align 8
  %40 = getelementptr inbounds [4 x i16], [4 x i16]* %35, i64 0, i64 3
  store i16 %39, i16* %40, align 2
  %41 = load i64, i64* %7, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %34)
  %42 = lshr i64 %41, 16
  %43 = lshr i64 %41, 32
  %44 = lshr i64 %41, 48
  %45 = trunc i64 %41 to i16
  %46 = trunc i64 %42 to i16
  %47 = trunc i64 %43 to i16
  %48 = trunc i64 %44 to i16
  %49 = bitcast i64* %2 to [4 x i16]*
  %50 = bitcast i64* %2 to i16*
  store i16 %45, i16* %50, align 1
  %51 = getelementptr inbounds [4 x i16], [4 x i16]* %49, i64 0, i64 1
  store i16 %46, i16* %51, align 1
  %52 = getelementptr inbounds [4 x i16], [4 x i16]* %49, i64 0, i64 2
  store i16 %47, i16* %52, align 1
  %53 = getelementptr inbounds [4 x i16], [4 x i16]* %49, i64 0, i64 3
  store i16 %48, i16* %53, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L6PHADDWI3VnWI8vec128_tE2VnIS2_ES5_EEP6MemoryS7_R5StateT_T0_T1_(%struct.Memory* readnone returned, %struct.State* nocapture readnone dereferenceable(3376), i8* nocapture, i8* nocapture readonly, i8* nocapture readonly)  {
  %6 = alloca <2 x i64>, align 16
  %7 = bitcast <2 x i64>* %6 to { i64, i64 }*
  %8 = alloca { i64, i64 }, align 8
  %9 = alloca <2 x i64>, align 16
  %10 = bitcast <2 x i64>* %9 to { i64, i64 }*
  %11 = bitcast i8* %3 to i64*
  %12 = load i64, i64* %11, align 1
  %13 = getelementptr inbounds i8, i8* %3, i64 8
  %14 = bitcast i8* %13 to i64*
  %15 = load i64, i64* %14, align 1
  %16 = bitcast <2 x i64>* %9 to i8*
  call void @llvm.lifetime.start(i64 16, i8* nonnull %16) 
  %17 = bitcast i8* %4 to <2 x i64>*
  %18 = load <2 x i64>, <2 x i64>* %17, align 1
  store <2 x i64> %18, <2 x i64>* %9, align 16
  %19 = bitcast <2 x i64>* %6 to i8*
  %20 = getelementptr inbounds <2 x i64>, <2 x i64>* %6, i64 0, i64 0
  %21 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %7, i64 0, i32 1
  %22 = bitcast <2 x i64>* %6 to [8 x i16]*
  %23 = trunc i64 %12 to i16
  %24 = lshr i64 %12, 16
  %25 = trunc i64 %24 to i16
  %26 = add i16 %25, %23
  call void @llvm.lifetime.start(i64 16, i8* nonnull %19)
  store <2 x i64> zeroinitializer, <2 x i64>* %6, align 16
  %27 = bitcast <2 x i64>* %6 to i16*
  store i16 %26, i16* %27, align 16
  %28 = load i64, i64* %20, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %19)
  %29 = lshr i64 %12, 32
  %30 = trunc i64 %29 to i16
  %31 = lshr i64 %12, 48
  %32 = trunc i64 %31 to i16
  %33 = add i16 %32, %30
  call void @llvm.lifetime.start(i64 16, i8* nonnull %19)
  store i64 %28, i64* %20, align 16
  store i64 0, i64* %21, align 8
  %34 = getelementptr inbounds [8 x i16], [8 x i16]* %22, i64 0, i64 1
  store i16 %33, i16* %34, align 2
  %35 = load i64, i64* %20, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %19)
  %36 = trunc i64 %15 to i16
  %37 = lshr i64 %15, 16
  %38 = trunc i64 %37 to i16
  %39 = add i16 %38, %36
  call void @llvm.lifetime.start(i64 16, i8* nonnull %19)
  store i64 %35, i64* %20, align 16
  store i64 0, i64* %21, align 8
  %40 = getelementptr inbounds [8 x i16], [8 x i16]* %22, i64 0, i64 2
  store i16 %39, i16* %40, align 4
  %41 = load i64, i64* %20, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %19)
  %42 = lshr i64 %15, 32
  %43 = trunc i64 %42 to i16
  %44 = lshr i64 %15, 48
  %45 = trunc i64 %44 to i16
  %46 = add i16 %45, %43
  call void @llvm.lifetime.start(i64 16, i8* nonnull %19)
  store i64 %41, i64* %20, align 16
  store i64 0, i64* %21, align 8
  %47 = getelementptr inbounds [8 x i16], [8 x i16]* %22, i64 0, i64 3
  store i16 %46, i16* %47, align 2
  %48 = load i64, i64* %20, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %19)
  %49 = bitcast <2 x i64>* %9 to %struct.uint16v8_t*
  %50 = bitcast { i64, i64 }* %8 to i8*
  %51 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %8, i64 0, i32 0
  %52 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %8, i64 0, i32 1
  %53 = bitcast { i64, i64 }* %8 to [8 x i16]*
  %54 = bitcast <2 x i64>* %9 to i16*
  %55 = load i16, i16* %54, align 16
  %56 = getelementptr inbounds %struct.uint16v8_t, %struct.uint16v8_t* %49, i64 0, i32 0, i64 1
  %57 = load i16, i16* %56, align 2
  %58 = add i16 %57, %55
  call void @llvm.lifetime.start(i64 16, i8* nonnull %50)
  store i64 %48, i64* %51, align 8
  store i64 0, i64* %52, align 8
  %59 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %8, i64 0, i32 1
  %60 = bitcast i64* %59 to i16*
  store i16 %58, i16* %60, align 8
  %61 = load i64, i64* %52, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %50)
  %62 = getelementptr inbounds %struct.uint16v8_t, %struct.uint16v8_t* %49, i64 0, i32 0, i64 2
  %63 = load i16, i16* %62, align 4
  %64 = getelementptr inbounds %struct.uint16v8_t, %struct.uint16v8_t* %49, i64 0, i32 0, i64 3
  %65 = load i16, i16* %64, align 2
  %66 = add i16 %65, %63
  call void @llvm.lifetime.start(i64 16, i8* nonnull %50)
  store i64 %48, i64* %51, align 8
  store i64 %61, i64* %52, align 8
  %67 = getelementptr inbounds [8 x i16], [8 x i16]* %53, i64 0, i64 5
  store i16 %66, i16* %67, align 2
  %68 = load i64, i64* %52, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %50)
  %69 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %10, i64 0, i32 1
  %70 = bitcast i64* %69 to i16*
  %71 = load i16, i16* %70, align 8
  %72 = getelementptr inbounds %struct.uint16v8_t, %struct.uint16v8_t* %49, i64 0, i32 0, i64 5
  %73 = load i16, i16* %72, align 2
  %74 = add i16 %73, %71
  call void @llvm.lifetime.start(i64 16, i8* nonnull %50)
  store i64 %48, i64* %51, align 8
  store i64 %68, i64* %52, align 8
  %75 = getelementptr inbounds [8 x i16], [8 x i16]* %53, i64 0, i64 6
  store i16 %74, i16* %75, align 4
  %76 = load i64, i64* %52, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %50)
  %77 = getelementptr inbounds %struct.uint16v8_t, %struct.uint16v8_t* %49, i64 0, i32 0, i64 6
  %78 = load i16, i16* %77, align 4
  %79 = getelementptr inbounds %struct.uint16v8_t, %struct.uint16v8_t* %49, i64 0, i32 0, i64 7
  %80 = load i16, i16* %79, align 2
  %81 = add i16 %80, %78
  call void @llvm.lifetime.start(i64 16, i8* nonnull %50)
  store i64 %48, i64* %51, align 8
  store i64 %76, i64* %52, align 8
  %82 = getelementptr inbounds [8 x i16], [8 x i16]* %53, i64 0, i64 7
  store i16 %81, i16* %82, align 2
  %83 = load i64, i64* %52, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %50)
  %84 = lshr i64 %48, 16
  %85 = lshr i64 %48, 32
  %86 = lshr i64 %48, 48
  %87 = trunc i64 %48 to i16
  %88 = trunc i64 %84 to i16
  %89 = trunc i64 %85 to i16
  %90 = trunc i64 %86 to i16
  %91 = bitcast i8* %2 to i16*
  store i16 %87, i16* %91, align 1
  %92 = getelementptr inbounds i8, i8* %2, i64 2
  %93 = bitcast i8* %92 to i16*
  store i16 %88, i16* %93, align 1
  %94 = getelementptr inbounds i8, i8* %2, i64 4
  %95 = bitcast i8* %94 to i16*
  store i16 %89, i16* %95, align 1
  %96 = getelementptr inbounds i8, i8* %2, i64 6
  %97 = bitcast i8* %96 to i16*
  store i16 %90, i16* %97, align 1
  %98 = trunc i64 %83 to i16
  %99 = getelementptr inbounds i8, i8* %2, i64 8
  %100 = bitcast i8* %99 to i16*
  store i16 %98, i16* %100, align 1
  %101 = lshr i64 %83, 16
  %102 = trunc i64 %101 to i16
  %103 = getelementptr inbounds i8, i8* %2, i64 10
  %104 = bitcast i8* %103 to i16*
  store i16 %102, i16* %104, align 1
  %105 = lshr i64 %83, 32
  %106 = trunc i64 %105 to i16
  %107 = getelementptr inbounds i8, i8* %2, i64 12
  %108 = bitcast i8* %107 to i16*
  store i16 %106, i16* %108, align 1
  %109 = lshr i64 %83, 48
  %110 = trunc i64 %109 to i16
  %111 = getelementptr inbounds i8, i8* %2, i64 14
  %112 = bitcast i8* %111 to i16*
  store i16 %110, i16* %112, align 1
  call void @llvm.lifetime.end(i64 16, i8* nonnull %16) 
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L6PHADDWI3VnWI8vec128_tE2VnIS2_E3MVnIS2_EEEP6MemoryS9_R5StateT_T0_T1_(%struct.Memory* returned, %struct.State* nocapture readnone dereferenceable(3376), i8* nocapture, i8* nocapture readonly, i64)  {
  %6 = alloca <2 x i64>, align 16
  %7 = bitcast <2 x i64>* %6 to { i64, i64 }*
  %8 = alloca { i64, i64 }, align 8
  %9 = alloca { i64, i64 }, align 8
  %10 = bitcast { i64, i64 }* %9 to %struct.uint16v8_t*
  %11 = alloca <2 x i64>, align 16
  %12 = bitcast <2 x i64>* %11 to { i64, i64 }*
  %13 = bitcast { i64, i64 }* %9 to i8*
  call void @llvm.lifetime.start(i64 16, i8* nonnull %13) 
  %14 = bitcast i8* %3 to i64*
  %15 = load i64, i64* %14, align 1
  %16 = getelementptr inbounds i8, i8* %3, i64 8
  %17 = bitcast i8* %16 to i64*
  %18 = load i64, i64* %17, align 1
  %19 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %9, i64 0, i32 0
  store i64 %15, i64* %19, align 8
  %20 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %9, i64 0, i32 1
  store i64 %18, i64* %20, align 8
  %21 = bitcast <2 x i64>* %11 to i8*
  call void @llvm.lifetime.start(i64 16, i8* nonnull %21) 
  %22 = inttoptr i64 %4 to i16*
  %23 = load i16, i16* %22
  %24 = add i64 %4, 2
  %25 = inttoptr i64 %24 to i16*
  %26 = load i16, i16* %25
  %27 = add i64 %4, 4
  %28 = inttoptr i64 %27 to i16*
  %29 = load i16, i16* %28
  %30 = add i64 %4, 6
  %31 = inttoptr i64 %30 to i16*
  %32 = load i16, i16* %31
  %33 = add i64 %4, 8
  %34 = inttoptr i64 %33 to i16*
  %35 = load i16, i16* %34
  %36 = add i64 %4, 10
  %37 = inttoptr i64 %36 to i16*
  %38 = load i16, i16* %37
  %39 = add i64 %4, 12
  %40 = inttoptr i64 %39 to i16*
  %41 = load i16, i16* %40
  %42 = add i64 %4, 14
  %43 = inttoptr i64 %42 to i16*
  %44 = load i16, i16* %43
  %45 = insertelement <2 x i16> undef, i16 %32, i32 0
  %46 = insertelement <2 x i16> %45, i16 %44, i32 1
  %47 = zext <2 x i16> %46 to <2 x i64>
  %48 = shl nuw <2 x i64> %47, <i64 48, i64 48>
  %49 = insertelement <2 x i16> undef, i16 %29, i32 0
  %50 = insertelement <2 x i16> %49, i16 %41, i32 1
  %51 = zext <2 x i16> %50 to <2 x i64>
  %52 = shl nuw nsw <2 x i64> %51, <i64 32, i64 32>
  %53 = insertelement <2 x i16> undef, i16 %26, i32 0
  %54 = insertelement <2 x i16> %53, i16 %38, i32 1
  %55 = zext <2 x i16> %54 to <2 x i64>
  %56 = shl nuw nsw <2 x i64> %55, <i64 16, i64 16>
  %57 = insertelement <2 x i16> undef, i16 %23, i32 0
  %58 = insertelement <2 x i16> %57, i16 %35, i32 1
  %59 = zext <2 x i16> %58 to <2 x i64>
  %60 = or <2 x i64> %56, %59
  %61 = or <2 x i64> %60, %52
  %62 = or <2 x i64> %61, %48
  store <2 x i64> %62, <2 x i64>* %11, align 16
  %63 = bitcast <2 x i64>* %6 to i8*
  %64 = getelementptr inbounds <2 x i64>, <2 x i64>* %6, i64 0, i64 0
  %65 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %7, i64 0, i32 1
  %66 = bitcast <2 x i64>* %6 to [8 x i16]*
  %67 = trunc i64 %15 to i16
  %68 = lshr i64 %15, 16
  %69 = trunc i64 %68 to i16
  %70 = add i16 %69, %67
  call void @llvm.lifetime.start(i64 16, i8* nonnull %63)
  store <2 x i64> zeroinitializer, <2 x i64>* %6, align 16
  %71 = bitcast <2 x i64>* %6 to i16*
  store i16 %70, i16* %71, align 16
  %72 = load i64, i64* %64, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %63)
  %73 = lshr i64 %15, 32
  %74 = trunc i64 %73 to i16
  %75 = lshr i64 %15, 48
  %76 = trunc i64 %75 to i16
  %77 = add i16 %76, %74
  call void @llvm.lifetime.start(i64 16, i8* nonnull %63)
  store i64 %72, i64* %64, align 16
  store i64 0, i64* %65, align 8
  %78 = getelementptr inbounds [8 x i16], [8 x i16]* %66, i64 0, i64 1
  store i16 %77, i16* %78, align 2
  %79 = load i64, i64* %64, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %63)
  %80 = trunc i64 %18 to i16
  %81 = lshr i64 %18, 16
  %82 = trunc i64 %81 to i16
  %83 = add i16 %82, %80
  call void @llvm.lifetime.start(i64 16, i8* nonnull %63)
  store i64 %79, i64* %64, align 16
  store i64 0, i64* %65, align 8
  %84 = getelementptr inbounds [8 x i16], [8 x i16]* %66, i64 0, i64 2
  store i16 %83, i16* %84, align 4
  %85 = load i64, i64* %64, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %63)
  %86 = getelementptr inbounds %struct.uint16v8_t, %struct.uint16v8_t* %10, i64 0, i32 0, i64 6
  %87 = load i16, i16* %86, align 4
  %88 = getelementptr inbounds %struct.uint16v8_t, %struct.uint16v8_t* %10, i64 0, i32 0, i64 7
  %89 = load i16, i16* %88, align 2
  %90 = add i16 %89, %87
  call void @llvm.lifetime.start(i64 16, i8* nonnull %63)
  store i64 %85, i64* %64, align 16
  store i64 0, i64* %65, align 8
  %91 = getelementptr inbounds [8 x i16], [8 x i16]* %66, i64 0, i64 3
  store i16 %90, i16* %91, align 2
  %92 = load i64, i64* %64, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %63)
  %93 = bitcast <2 x i64>* %11 to %struct.uint16v8_t*
  %94 = bitcast { i64, i64 }* %8 to i8*
  %95 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %8, i64 0, i32 0
  %96 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %8, i64 0, i32 1
  %97 = bitcast { i64, i64 }* %8 to [8 x i16]*
  %98 = bitcast <2 x i64>* %11 to i16*
  %99 = load i16, i16* %98, align 16
  %100 = getelementptr inbounds %struct.uint16v8_t, %struct.uint16v8_t* %93, i64 0, i32 0, i64 1
  %101 = load i16, i16* %100, align 2
  %102 = add i16 %101, %99
  call void @llvm.lifetime.start(i64 16, i8* nonnull %94)
  store i64 %92, i64* %95, align 8
  store i64 0, i64* %96, align 8
  %103 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %8, i64 0, i32 1
  %104 = bitcast i64* %103 to i16*
  store i16 %102, i16* %104, align 8
  %105 = load i64, i64* %96, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %94)
  %106 = getelementptr inbounds %struct.uint16v8_t, %struct.uint16v8_t* %93, i64 0, i32 0, i64 2
  %107 = load i16, i16* %106, align 4
  %108 = getelementptr inbounds %struct.uint16v8_t, %struct.uint16v8_t* %93, i64 0, i32 0, i64 3
  %109 = load i16, i16* %108, align 2
  %110 = add i16 %109, %107
  call void @llvm.lifetime.start(i64 16, i8* nonnull %94)
  store i64 %92, i64* %95, align 8
  store i64 %105, i64* %96, align 8
  %111 = getelementptr inbounds [8 x i16], [8 x i16]* %97, i64 0, i64 5
  store i16 %110, i16* %111, align 2
  %112 = load i64, i64* %96, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %94)
  %113 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %12, i64 0, i32 1
  %114 = bitcast i64* %113 to i16*
  %115 = load i16, i16* %114, align 8
  %116 = getelementptr inbounds %struct.uint16v8_t, %struct.uint16v8_t* %93, i64 0, i32 0, i64 5
  %117 = load i16, i16* %116, align 2
  %118 = add i16 %117, %115
  call void @llvm.lifetime.start(i64 16, i8* nonnull %94)
  store i64 %92, i64* %95, align 8
  store i64 %112, i64* %96, align 8
  %119 = getelementptr inbounds [8 x i16], [8 x i16]* %97, i64 0, i64 6
  store i16 %118, i16* %119, align 4
  %120 = load i64, i64* %96, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %94)
  %121 = getelementptr inbounds %struct.uint16v8_t, %struct.uint16v8_t* %93, i64 0, i32 0, i64 6
  %122 = load i16, i16* %121, align 4
  %123 = getelementptr inbounds %struct.uint16v8_t, %struct.uint16v8_t* %93, i64 0, i32 0, i64 7
  %124 = load i16, i16* %123, align 2
  %125 = add i16 %124, %122
  call void @llvm.lifetime.start(i64 16, i8* nonnull %94)
  store i64 %92, i64* %95, align 8
  store i64 %120, i64* %96, align 8
  %126 = getelementptr inbounds [8 x i16], [8 x i16]* %97, i64 0, i64 7
  store i16 %125, i16* %126, align 2
  %127 = load i64, i64* %96, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %94)
  %128 = lshr i64 %92, 16
  %129 = lshr i64 %92, 32
  %130 = lshr i64 %92, 48
  %131 = trunc i64 %92 to i16
  %132 = trunc i64 %128 to i16
  %133 = trunc i64 %129 to i16
  %134 = trunc i64 %130 to i16
  %135 = bitcast i8* %2 to i16*
  store i16 %131, i16* %135, align 1
  %136 = getelementptr inbounds i8, i8* %2, i64 2
  %137 = bitcast i8* %136 to i16*
  store i16 %132, i16* %137, align 1
  %138 = getelementptr inbounds i8, i8* %2, i64 4
  %139 = bitcast i8* %138 to i16*
  store i16 %133, i16* %139, align 1
  %140 = getelementptr inbounds i8, i8* %2, i64 6
  %141 = bitcast i8* %140 to i16*
  store i16 %134, i16* %141, align 1
  %142 = trunc i64 %127 to i16
  %143 = getelementptr inbounds i8, i8* %2, i64 8
  %144 = bitcast i8* %143 to i16*
  store i16 %142, i16* %144, align 1
  %145 = lshr i64 %127, 16
  %146 = trunc i64 %145 to i16
  %147 = getelementptr inbounds i8, i8* %2, i64 10
  %148 = bitcast i8* %147 to i16*
  store i16 %146, i16* %148, align 1
  %149 = lshr i64 %127, 32
  %150 = trunc i64 %149 to i16
  %151 = getelementptr inbounds i8, i8* %2, i64 12
  %152 = bitcast i8* %151 to i16*
  store i16 %150, i16* %152, align 1
  %153 = lshr i64 %127, 48
  %154 = trunc i64 %153 to i16
  %155 = getelementptr inbounds i8, i8* %2, i64 14
  %156 = bitcast i8* %155 to i16*
  store i16 %154, i16* %156, align 1
  call void @llvm.lifetime.end(i64 16, i8* nonnull %21) 
  call void @llvm.lifetime.end(i64 16, i8* nonnull %13) 
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L6PHADDDI4RVnWI7vec64_tE3RVnIS2_ES5_EEP6MemoryS7_R5StateT_T0_T1_(%struct.Memory* readnone returned, %struct.State* nocapture readnone dereferenceable(3376), i64* nocapture, i64, i64)  {
  %6 = alloca i64, align 8
  %7 = alloca i64, align 8
  %8 = bitcast i64* %6 to i8*
  %9 = trunc i64 %3 to i32
  %10 = lshr i64 %3, 32
  %11 = trunc i64 %10 to i32
  %12 = add i32 %11, %9
  call void @llvm.lifetime.start(i64 8, i8* nonnull %8)
  store i64 0, i64* %6, align 8
  %13 = bitcast i64* %6 to i32*
  store i32 %12, i32* %13, align 8
  %14 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %8)
  %15 = bitcast i64* %7 to i8*
  %16 = bitcast i64* %7 to [2 x i32]*
  %17 = trunc i64 %4 to i32
  %18 = lshr i64 %4, 32
  %19 = trunc i64 %18 to i32
  %20 = add i32 %19, %17
  call void @llvm.lifetime.start(i64 8, i8* nonnull %15)
  store i64 %14, i64* %7, align 8
  %21 = getelementptr inbounds [2 x i32], [2 x i32]* %16, i64 0, i64 1
  store i32 %20, i32* %21, align 4
  %22 = load i64, i64* %7, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %15)
  %23 = lshr i64 %22, 32
  %24 = trunc i64 %22 to i32
  %25 = trunc i64 %23 to i32
  %26 = bitcast i64* %2 to [2 x i32]*
  %27 = bitcast i64* %2 to i32*
  store i32 %24, i32* %27, align 1
  %28 = getelementptr inbounds [2 x i32], [2 x i32]* %26, i64 0, i64 1
  store i32 %25, i32* %28, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L6PHADDDI4RVnWI7vec64_tE3RVnIS2_E3MVnIS2_EEEP6MemoryS9_R5StateT_T0_T1_(%struct.Memory* returned, %struct.State* nocapture readnone dereferenceable(3376), i64* nocapture, i64, i64)  {
  %6 = alloca i64, align 8
  %7 = alloca i64, align 8
  %8 = inttoptr i64 %4 to i32*
  %9 = load i32, i32* %8
  %10 = add i64 %4, 4
  %11 = inttoptr i64 %10 to i32*
  %12 = load i32, i32* %11
  %13 = bitcast i64* %6 to i8*
  %14 = trunc i64 %3 to i32
  %15 = lshr i64 %3, 32
  %16 = trunc i64 %15 to i32
  %17 = add i32 %16, %14
  call void @llvm.lifetime.start(i64 8, i8* nonnull %13)
  store i64 0, i64* %6, align 8
  %18 = bitcast i64* %6 to i32*
  store i32 %17, i32* %18, align 8
  %19 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %13)
  %20 = bitcast i64* %7 to i8*
  %21 = bitcast i64* %7 to [2 x i32]*
  %22 = add i32 %12, %9
  call void @llvm.lifetime.start(i64 8, i8* nonnull %20)
  store i64 %19, i64* %7, align 8
  %23 = getelementptr inbounds [2 x i32], [2 x i32]* %21, i64 0, i64 1
  store i32 %22, i32* %23, align 4
  %24 = load i64, i64* %7, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %20)
  %25 = lshr i64 %24, 32
  %26 = trunc i64 %24 to i32
  %27 = trunc i64 %25 to i32
  %28 = bitcast i64* %2 to [2 x i32]*
  %29 = bitcast i64* %2 to i32*
  store i32 %26, i32* %29, align 1
  %30 = getelementptr inbounds [2 x i32], [2 x i32]* %28, i64 0, i64 1
  store i32 %27, i32* %30, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L6PHADDDI3VnWI8vec128_tE2VnIS2_ES5_EEP6MemoryS7_R5StateT_T0_T1_(%struct.Memory* readnone returned, %struct.State* nocapture readnone dereferenceable(3376), i8* nocapture, i8* nocapture readonly, i8* nocapture readonly)  {
  %6 = alloca <2 x i64>, align 16
  %7 = bitcast <2 x i64>* %6 to { i64, i64 }*
  %8 = alloca { i64, i64 }, align 8
  %9 = bitcast i8* %3 to i64*
  %10 = load i64, i64* %9, align 1
  %11 = getelementptr inbounds i8, i8* %3, i64 8
  %12 = bitcast i8* %11 to i64*
  %13 = load i64, i64* %12, align 1
  %14 = bitcast i8* %4 to i64*
  %15 = load i64, i64* %14, align 1
  %16 = getelementptr inbounds i8, i8* %4, i64 8
  %17 = bitcast i8* %16 to i64*
  %18 = load i64, i64* %17, align 1
  %19 = bitcast <2 x i64>* %6 to i8*
  %20 = getelementptr inbounds <2 x i64>, <2 x i64>* %6, i64 0, i64 0
  %21 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %7, i64 0, i32 1
  %22 = bitcast <2 x i64>* %6 to [4 x i32]*
  %23 = trunc i64 %10 to i32
  %24 = lshr i64 %10, 32
  %25 = trunc i64 %24 to i32
  %26 = add i32 %25, %23
  call void @llvm.lifetime.start(i64 16, i8* nonnull %19)
  store <2 x i64> zeroinitializer, <2 x i64>* %6, align 16
  %27 = bitcast <2 x i64>* %6 to i32*
  store i32 %26, i32* %27, align 16
  %28 = load i64, i64* %20, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %19)
  %29 = trunc i64 %13 to i32
  %30 = lshr i64 %13, 32
  %31 = trunc i64 %30 to i32
  %32 = add i32 %31, %29
  call void @llvm.lifetime.start(i64 16, i8* nonnull %19)
  store i64 %28, i64* %20, align 16
  store i64 0, i64* %21, align 8
  %33 = getelementptr inbounds [4 x i32], [4 x i32]* %22, i64 0, i64 1
  store i32 %32, i32* %33, align 4
  %34 = load i64, i64* %20, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %19)
  %35 = bitcast { i64, i64 }* %8 to i8*
  %36 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %8, i64 0, i32 0
  %37 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %8, i64 0, i32 1
  %38 = bitcast { i64, i64 }* %8 to [4 x i32]*
  %39 = trunc i64 %15 to i32
  %40 = lshr i64 %15, 32
  %41 = trunc i64 %40 to i32
  %42 = add i32 %41, %39
  call void @llvm.lifetime.start(i64 16, i8* nonnull %35)
  store i64 %34, i64* %36, align 8
  store i64 0, i64* %37, align 8
  %43 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %8, i64 0, i32 1
  %44 = bitcast i64* %43 to i32*
  store i32 %42, i32* %44, align 8
  %45 = load i64, i64* %37, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %35)
  %46 = trunc i64 %18 to i32
  %47 = lshr i64 %18, 32
  %48 = trunc i64 %47 to i32
  %49 = add i32 %48, %46
  call void @llvm.lifetime.start(i64 16, i8* nonnull %35)
  store i64 %34, i64* %36, align 8
  store i64 %45, i64* %37, align 8
  %50 = getelementptr inbounds [4 x i32], [4 x i32]* %38, i64 0, i64 3
  store i32 %49, i32* %50, align 4
  %51 = load i64, i64* %37, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %35)
  %52 = lshr i64 %34, 32
  %53 = trunc i64 %34 to i32
  %54 = trunc i64 %52 to i32
  %55 = bitcast i8* %2 to i32*
  store i32 %53, i32* %55, align 1
  %56 = getelementptr inbounds i8, i8* %2, i64 4
  %57 = bitcast i8* %56 to i32*
  store i32 %54, i32* %57, align 1
  %58 = trunc i64 %51 to i32
  %59 = getelementptr inbounds i8, i8* %2, i64 8
  %60 = bitcast i8* %59 to i32*
  store i32 %58, i32* %60, align 1
  %61 = lshr i64 %51, 32
  %62 = trunc i64 %61 to i32
  %63 = getelementptr inbounds i8, i8* %2, i64 12
  %64 = bitcast i8* %63 to i32*
  store i32 %62, i32* %64, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L6PHADDDI3VnWI8vec128_tE2VnIS2_E3MVnIS2_EEEP6MemoryS9_R5StateT_T0_T1_(%struct.Memory* returned, %struct.State* nocapture readnone dereferenceable(3376), i8* nocapture, i8* nocapture readonly, i64)  {
  %6 = alloca <2 x i64>, align 16
  %7 = bitcast <2 x i64>* %6 to { i64, i64 }*
  %8 = alloca { i64, i64 }, align 8
  %9 = bitcast i8* %3 to i64*
  %10 = load i64, i64* %9, align 1
  %11 = getelementptr inbounds i8, i8* %3, i64 8
  %12 = bitcast i8* %11 to i64*
  %13 = load i64, i64* %12, align 1
  %14 = inttoptr i64 %4 to i32*
  %15 = load i32, i32* %14
  %16 = add i64 %4, 4
  %17 = inttoptr i64 %16 to i32*
  %18 = load i32, i32* %17
  %19 = add i64 %4, 8
  %20 = inttoptr i64 %19 to i32*
  %21 = load i32, i32* %20
  %22 = add i64 %4, 12
  %23 = inttoptr i64 %22 to i32*
  %24 = load i32, i32* %23
  %25 = bitcast <2 x i64>* %6 to i8*
  %26 = getelementptr inbounds <2 x i64>, <2 x i64>* %6, i64 0, i64 0
  %27 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %7, i64 0, i32 1
  %28 = bitcast <2 x i64>* %6 to [4 x i32]*
  %29 = trunc i64 %10 to i32
  %30 = lshr i64 %10, 32
  %31 = trunc i64 %30 to i32
  %32 = add i32 %31, %29
  call void @llvm.lifetime.start(i64 16, i8* nonnull %25)
  store <2 x i64> zeroinitializer, <2 x i64>* %6, align 16
  %33 = bitcast <2 x i64>* %6 to i32*
  store i32 %32, i32* %33, align 16
  %34 = load i64, i64* %26, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %25)
  %35 = trunc i64 %13 to i32
  %36 = lshr i64 %13, 32
  %37 = trunc i64 %36 to i32
  %38 = add i32 %37, %35
  call void @llvm.lifetime.start(i64 16, i8* nonnull %25)
  store i64 %34, i64* %26, align 16
  store i64 0, i64* %27, align 8
  %39 = getelementptr inbounds [4 x i32], [4 x i32]* %28, i64 0, i64 1
  store i32 %38, i32* %39, align 4
  %40 = load i64, i64* %26, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %25)
  %41 = bitcast { i64, i64 }* %8 to i8*
  %42 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %8, i64 0, i32 0
  %43 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %8, i64 0, i32 1
  %44 = bitcast { i64, i64 }* %8 to [4 x i32]*
  %45 = add i32 %18, %15
  call void @llvm.lifetime.start(i64 16, i8* nonnull %41)
  store i64 %40, i64* %42, align 8
  store i64 0, i64* %43, align 8
  %46 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %8, i64 0, i32 1
  %47 = bitcast i64* %46 to i32*
  store i32 %45, i32* %47, align 8
  %48 = load i64, i64* %43, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %41)
  %49 = add i32 %24, %21
  call void @llvm.lifetime.start(i64 16, i8* nonnull %41)
  store i64 %40, i64* %42, align 8
  store i64 %48, i64* %43, align 8
  %50 = getelementptr inbounds [4 x i32], [4 x i32]* %44, i64 0, i64 3
  store i32 %49, i32* %50, align 4
  %51 = load i64, i64* %43, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %41)
  %52 = lshr i64 %40, 32
  %53 = trunc i64 %40 to i32
  %54 = trunc i64 %52 to i32
  %55 = bitcast i8* %2 to i32*
  store i32 %53, i32* %55, align 1
  %56 = getelementptr inbounds i8, i8* %2, i64 4
  %57 = bitcast i8* %56 to i32*
  store i32 %54, i32* %57, align 1
  %58 = trunc i64 %51 to i32
  %59 = getelementptr inbounds i8, i8* %2, i64 8
  %60 = bitcast i8* %59 to i32*
  store i32 %58, i32* %60, align 1
  %61 = lshr i64 %51, 32
  %62 = trunc i64 %61 to i32
  %63 = getelementptr inbounds i8, i8* %2, i64 12
  %64 = bitcast i8* %63 to i32*
  store i32 %62, i32* %64, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZL7PHADDSWI4RVnWI7vec64_tE3RVnIS1_ES4_EP6MemoryS6_R5StateT_T0_T1_(%struct.Memory* readnone returned, %struct.State* nocapture readnone dereferenceable(3376), i64* nocapture, i64, i64)  {
  %6 = alloca i64, align 8
  %7 = alloca i64, align 8
  %8 = alloca i64, align 8
  %9 = bitcast i64* %8 to i8*
  call void @llvm.lifetime.start(i64 8, i8* nonnull %9) 
  store i64 %4, i64* %8, align 8
  %10 = bitcast i64* %6 to i8*
  %11 = bitcast i64* %6 to [4 x i16]*
  %12 = trunc i64 %3 to i16
  %13 = lshr i64 %3, 16
  %14 = trunc i64 %13 to i16
  %15 = add i16 %14, %12
  %16 = or i64 %13, %3
  %17 = trunc i64 %16 to i16
  %18 = and i64 %13, %3
  %19 = trunc i64 %18 to i16
  %20 = xor i16 %17, -32768
  %21 = and i16 %20, %15
  %22 = icmp slt i16 %21, 0
  %23 = select i1 %22, i16 32767, i16 %15
  %24 = xor i16 %15, -32768
  %25 = and i16 %19, %24
  %26 = icmp slt i16 %25, 0
  %27 = select i1 %26, i16 -32768, i16 %23
  call void @llvm.lifetime.start(i64 8, i8* nonnull %10)
  store i64 0, i64* %6, align 8
  %28 = bitcast i64* %6 to i16*
  store i16 %27, i16* %28, align 8
  %29 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %10)
  %30 = lshr i64 %3, 32
  %31 = trunc i64 %30 to i16
  %32 = lshr i64 %3, 48
  %33 = trunc i64 %32 to i16
  %34 = add i16 %33, %31
  %35 = or i64 %32, %30
  %36 = trunc i64 %35 to i16
  %37 = and i64 %32, %30
  %38 = trunc i64 %37 to i16
  %39 = xor i16 %36, -32768
  %40 = and i16 %39, %34
  %41 = icmp slt i16 %40, 0
  %42 = select i1 %41, i16 32767, i16 %34
  %43 = xor i16 %34, -32768
  %44 = and i16 %38, %43
  %45 = icmp slt i16 %44, 0
  %46 = select i1 %45, i16 -32768, i16 %42
  call void @llvm.lifetime.start(i64 8, i8* nonnull %10)
  store i64 %29, i64* %6, align 8
  %47 = getelementptr inbounds [4 x i16], [4 x i16]* %11, i64 0, i64 1
  store i16 %46, i16* %47, align 2
  %48 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %10)
  %49 = bitcast i64* %8 to %struct.int16v4_t*
  %50 = bitcast i64* %7 to i8*
  %51 = bitcast i64* %7 to [4 x i16]*
  %52 = trunc i64 %4 to i16
  %53 = lshr i64 %4, 16
  %54 = trunc i64 %53 to i16
  %55 = add i16 %54, %52
  %56 = or i64 %53, %4
  %57 = trunc i64 %56 to i16
  %58 = and i64 %53, %4
  %59 = trunc i64 %58 to i16
  %60 = xor i16 %57, -32768
  %61 = and i16 %60, %55
  %62 = icmp slt i16 %61, 0
  %63 = select i1 %62, i16 32767, i16 %55
  %64 = xor i16 %55, -32768
  %65 = and i16 %59, %64
  %66 = icmp slt i16 %65, 0
  %67 = select i1 %66, i16 -32768, i16 %63
  call void @llvm.lifetime.start(i64 8, i8* nonnull %50)
  store i64 %48, i64* %7, align 8
  %68 = getelementptr inbounds [4 x i16], [4 x i16]* %51, i64 0, i64 2
  store i16 %67, i16* %68, align 4
  %69 = load i64, i64* %7, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %50)
  %70 = getelementptr inbounds %struct.int16v4_t, %struct.int16v4_t* %49, i64 0, i32 0, i64 2
  %71 = load i16, i16* %70, align 4
  %72 = getelementptr inbounds %struct.int16v4_t, %struct.int16v4_t* %49, i64 0, i32 0, i64 3
  %73 = load i16, i16* %72, align 2
  %74 = add i16 %73, %71
  %75 = or i16 %73, %71
  %76 = and i16 %73, %71
  %77 = xor i16 %75, -32768
  %78 = and i16 %77, %74
  %79 = icmp slt i16 %78, 0
  %80 = select i1 %79, i16 32767, i16 %74
  %81 = xor i16 %74, -32768
  %82 = and i16 %76, %81
  %83 = icmp slt i16 %82, 0
  %84 = select i1 %83, i16 -32768, i16 %80
  call void @llvm.lifetime.start(i64 8, i8* nonnull %50)
  store i64 %69, i64* %7, align 8
  %85 = getelementptr inbounds [4 x i16], [4 x i16]* %51, i64 0, i64 3
  store i16 %84, i16* %85, align 2
  %86 = load i64, i64* %7, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %50)
  %87 = lshr i64 %86, 16
  %88 = lshr i64 %86, 32
  %89 = lshr i64 %86, 48
  %90 = trunc i64 %86 to i16
  %91 = trunc i64 %87 to i16
  %92 = trunc i64 %88 to i16
  %93 = trunc i64 %89 to i16
  %94 = bitcast i64* %2 to [4 x i16]*
  %95 = bitcast i64* %2 to i16*
  store i16 %90, i16* %95, align 1
  %96 = getelementptr inbounds [4 x i16], [4 x i16]* %94, i64 0, i64 1
  store i16 %91, i16* %96, align 1
  %97 = getelementptr inbounds [4 x i16], [4 x i16]* %94, i64 0, i64 2
  store i16 %92, i16* %97, align 1
  %98 = getelementptr inbounds [4 x i16], [4 x i16]* %94, i64 0, i64 3
  store i16 %93, i16* %98, align 1
  call void @llvm.lifetime.end(i64 8, i8* nonnull %9) 
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZL7PHADDSWI4RVnWI7vec64_tE3RVnIS1_E3MVnIS1_EEP6MemoryS8_R5StateT_T0_T1_(%struct.Memory* returned, %struct.State* nocapture readnone dereferenceable(3376), i64* nocapture, i64, i64)  {
  %6 = alloca i64, align 8
  %7 = alloca i64, align 8
  %8 = alloca i64, align 8
  %9 = bitcast i64* %8 to i8*
  call void @llvm.lifetime.start(i64 8, i8* nonnull %9) 
  %10 = inttoptr i64 %4 to i16*
  %11 = load i16, i16* %10
  %12 = add i64 %4, 2
  %13 = inttoptr i64 %12 to i16*
  %14 = load i16, i16* %13
  %15 = add i64 %4, 4
  %16 = inttoptr i64 %15 to i16*
  %17 = load i16, i16* %16
  %18 = add i64 %4, 6
  %19 = inttoptr i64 %18 to i16*
  %20 = load i16, i16* %19
  %21 = zext i16 %20 to i64
  %22 = shl nuw i64 %21, 48
  %23 = zext i16 %17 to i64
  %24 = shl nuw nsw i64 %23, 32
  %25 = zext i16 %14 to i64
  %26 = shl nuw nsw i64 %25, 16
  %27 = zext i16 %11 to i64
  %28 = or i64 %26, %27
  %29 = or i64 %28, %24
  %30 = or i64 %29, %22
  store i64 %30, i64* %8, align 8
  %31 = bitcast i64* %6 to i8*
  %32 = bitcast i64* %6 to [4 x i16]*
  %33 = trunc i64 %3 to i16
  %34 = lshr i64 %3, 16
  %35 = trunc i64 %34 to i16
  %36 = add i16 %35, %33
  %37 = or i64 %34, %3
  %38 = trunc i64 %37 to i16
  %39 = and i64 %34, %3
  %40 = trunc i64 %39 to i16
  %41 = xor i16 %38, -32768
  %42 = and i16 %41, %36
  %43 = icmp slt i16 %42, 0
  %44 = select i1 %43, i16 32767, i16 %36
  %45 = xor i16 %36, -32768
  %46 = and i16 %40, %45
  %47 = icmp slt i16 %46, 0
  %48 = select i1 %47, i16 -32768, i16 %44
  call void @llvm.lifetime.start(i64 8, i8* nonnull %31)
  store i64 0, i64* %6, align 8
  %49 = bitcast i64* %6 to i16*
  store i16 %48, i16* %49, align 8
  %50 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %31)
  %51 = lshr i64 %3, 32
  %52 = trunc i64 %51 to i16
  %53 = lshr i64 %3, 48
  %54 = trunc i64 %53 to i16
  %55 = add i16 %54, %52
  %56 = or i64 %53, %51
  %57 = trunc i64 %56 to i16
  %58 = and i64 %53, %51
  %59 = trunc i64 %58 to i16
  %60 = xor i16 %57, -32768
  %61 = and i16 %60, %55
  %62 = icmp slt i16 %61, 0
  %63 = select i1 %62, i16 32767, i16 %55
  %64 = xor i16 %55, -32768
  %65 = and i16 %59, %64
  %66 = icmp slt i16 %65, 0
  %67 = select i1 %66, i16 -32768, i16 %63
  call void @llvm.lifetime.start(i64 8, i8* nonnull %31)
  store i64 %50, i64* %6, align 8
  %68 = getelementptr inbounds [4 x i16], [4 x i16]* %32, i64 0, i64 1
  store i16 %67, i16* %68, align 2
  %69 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %31)
  %70 = bitcast i64* %8 to %struct.int16v4_t*
  %71 = bitcast i64* %7 to i8*
  %72 = bitcast i64* %7 to [4 x i16]*
  %73 = add i16 %14, %11
  %74 = or i16 %14, %11
  %75 = and i16 %14, %11
  %76 = xor i16 %74, -32768
  %77 = and i16 %76, %73
  %78 = icmp slt i16 %77, 0
  %79 = select i1 %78, i16 32767, i16 %73
  %80 = xor i16 %73, -32768
  %81 = and i16 %75, %80
  %82 = icmp slt i16 %81, 0
  %83 = select i1 %82, i16 -32768, i16 %79
  call void @llvm.lifetime.start(i64 8, i8* nonnull %71)
  store i64 %69, i64* %7, align 8
  %84 = getelementptr inbounds [4 x i16], [4 x i16]* %72, i64 0, i64 2
  store i16 %83, i16* %84, align 4
  %85 = load i64, i64* %7, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %71)
  %86 = getelementptr inbounds %struct.int16v4_t, %struct.int16v4_t* %70, i64 0, i32 0, i64 2
  %87 = load i16, i16* %86, align 4
  %88 = getelementptr inbounds %struct.int16v4_t, %struct.int16v4_t* %70, i64 0, i32 0, i64 3
  %89 = load i16, i16* %88, align 2
  %90 = add i16 %89, %87
  %91 = or i16 %89, %87
  %92 = and i16 %89, %87
  %93 = xor i16 %91, -32768
  %94 = and i16 %93, %90
  %95 = icmp slt i16 %94, 0
  %96 = select i1 %95, i16 32767, i16 %90
  %97 = xor i16 %90, -32768
  %98 = and i16 %92, %97
  %99 = icmp slt i16 %98, 0
  %100 = select i1 %99, i16 -32768, i16 %96
  call void @llvm.lifetime.start(i64 8, i8* nonnull %71)
  store i64 %85, i64* %7, align 8
  %101 = getelementptr inbounds [4 x i16], [4 x i16]* %72, i64 0, i64 3
  store i16 %100, i16* %101, align 2
  %102 = load i64, i64* %7, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %71)
  %103 = lshr i64 %102, 16
  %104 = lshr i64 %102, 32
  %105 = lshr i64 %102, 48
  %106 = trunc i64 %102 to i16
  %107 = trunc i64 %103 to i16
  %108 = trunc i64 %104 to i16
  %109 = trunc i64 %105 to i16
  %110 = bitcast i64* %2 to [4 x i16]*
  %111 = bitcast i64* %2 to i16*
  store i16 %106, i16* %111, align 1
  %112 = getelementptr inbounds [4 x i16], [4 x i16]* %110, i64 0, i64 1
  store i16 %107, i16* %112, align 1
  %113 = getelementptr inbounds [4 x i16], [4 x i16]* %110, i64 0, i64 2
  store i16 %108, i16* %113, align 1
  %114 = getelementptr inbounds [4 x i16], [4 x i16]* %110, i64 0, i64 3
  store i16 %109, i16* %114, align 1
  call void @llvm.lifetime.end(i64 8, i8* nonnull %9) 
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZL7PHADDSWI3VnWI8vec128_tE2VnIS1_ES4_EP6MemoryS6_R5StateT_T0_T1_(%struct.Memory* readnone returned, %struct.State* nocapture readnone dereferenceable(3376), i8* nocapture, i8* nocapture readonly, i8* nocapture readonly)  {
  %6 = alloca <2 x i64>, align 16
  %7 = bitcast <2 x i64>* %6 to { i64, i64 }*
  %8 = alloca { i64, i64 }, align 8
  %9 = alloca { i64, i64 }, align 8
  %10 = bitcast { i64, i64 }* %9 to %struct.uint16v8_t*
  %11 = alloca <2 x i64>, align 16
  %12 = bitcast <2 x i64>* %11 to { i64, i64 }*
  %13 = bitcast { i64, i64 }* %9 to i8*
  call void @llvm.lifetime.start(i64 16, i8* nonnull %13) 
  %14 = bitcast i8* %3 to i64*
  %15 = load i64, i64* %14, align 1
  %16 = getelementptr inbounds i8, i8* %3, i64 8
  %17 = bitcast i8* %16 to i64*
  %18 = load i64, i64* %17, align 1
  %19 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %9, i64 0, i32 0
  store i64 %15, i64* %19, align 8
  %20 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %9, i64 0, i32 1
  store i64 %18, i64* %20, align 8
  %21 = bitcast <2 x i64>* %11 to i8*
  call void @llvm.lifetime.start(i64 16, i8* nonnull %21) 
  %22 = bitcast i8* %4 to <2 x i64>*
  %23 = load <2 x i64>, <2 x i64>* %22, align 1
  store <2 x i64> %23, <2 x i64>* %11, align 16
  %24 = bitcast <2 x i64>* %6 to i8*
  %25 = getelementptr inbounds <2 x i64>, <2 x i64>* %6, i64 0, i64 0
  %26 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %7, i64 0, i32 1
  %27 = bitcast <2 x i64>* %6 to [8 x i16]*
  %28 = trunc i64 %15 to i16
  %29 = lshr i64 %15, 16
  %30 = trunc i64 %29 to i16
  %31 = add i16 %30, %28
  %32 = or i64 %29, %15
  %33 = trunc i64 %32 to i16
  %34 = and i64 %29, %15
  %35 = trunc i64 %34 to i16
  %36 = xor i16 %33, -32768
  %37 = and i16 %36, %31
  %38 = icmp slt i16 %37, 0
  %39 = select i1 %38, i16 32767, i16 %31
  %40 = xor i16 %31, -32768
  %41 = and i16 %35, %40
  %42 = icmp slt i16 %41, 0
  %43 = select i1 %42, i16 -32768, i16 %39
  call void @llvm.lifetime.start(i64 16, i8* nonnull %24)
  store <2 x i64> zeroinitializer, <2 x i64>* %6, align 16
  %44 = bitcast <2 x i64>* %6 to i16*
  store i16 %43, i16* %44, align 16
  %45 = load i64, i64* %25, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %24)
  %46 = lshr i64 %15, 32
  %47 = trunc i64 %46 to i16
  %48 = lshr i64 %15, 48
  %49 = trunc i64 %48 to i16
  %50 = add i16 %49, %47
  %51 = or i64 %48, %46
  %52 = trunc i64 %51 to i16
  %53 = and i64 %48, %46
  %54 = trunc i64 %53 to i16
  %55 = xor i16 %52, -32768
  %56 = and i16 %55, %50
  %57 = icmp slt i16 %56, 0
  %58 = select i1 %57, i16 32767, i16 %50
  %59 = xor i16 %50, -32768
  %60 = and i16 %54, %59
  %61 = icmp slt i16 %60, 0
  %62 = select i1 %61, i16 -32768, i16 %58
  call void @llvm.lifetime.start(i64 16, i8* nonnull %24)
  store i64 %45, i64* %25, align 16
  store i64 0, i64* %26, align 8
  %63 = getelementptr inbounds [8 x i16], [8 x i16]* %27, i64 0, i64 1
  store i16 %62, i16* %63, align 2
  %64 = load i64, i64* %25, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %24)
  %65 = trunc i64 %18 to i16
  %66 = lshr i64 %18, 16
  %67 = trunc i64 %66 to i16
  %68 = add i16 %67, %65
  %69 = or i64 %66, %18
  %70 = trunc i64 %69 to i16
  %71 = and i64 %66, %18
  %72 = trunc i64 %71 to i16
  %73 = xor i16 %70, -32768
  %74 = and i16 %73, %68
  %75 = icmp slt i16 %74, 0
  %76 = select i1 %75, i16 32767, i16 %68
  %77 = xor i16 %68, -32768
  %78 = and i16 %72, %77
  %79 = icmp slt i16 %78, 0
  %80 = select i1 %79, i16 -32768, i16 %76
  call void @llvm.lifetime.start(i64 16, i8* nonnull %24)
  store i64 %64, i64* %25, align 16
  store i64 0, i64* %26, align 8
  %81 = getelementptr inbounds [8 x i16], [8 x i16]* %27, i64 0, i64 2
  store i16 %80, i16* %81, align 4
  %82 = load i64, i64* %25, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %24)
  %83 = getelementptr inbounds %struct.uint16v8_t, %struct.uint16v8_t* %10, i64 0, i32 0, i64 6
  %84 = load i16, i16* %83, align 4
  %85 = getelementptr inbounds %struct.uint16v8_t, %struct.uint16v8_t* %10, i64 0, i32 0, i64 7
  %86 = load i16, i16* %85, align 2
  %87 = add i16 %86, %84
  %88 = or i16 %86, %84
  %89 = and i16 %86, %84
  %90 = xor i16 %88, -32768
  %91 = and i16 %90, %87
  %92 = icmp slt i16 %91, 0
  %93 = select i1 %92, i16 32767, i16 %87
  %94 = xor i16 %87, -32768
  %95 = and i16 %89, %94
  %96 = icmp slt i16 %95, 0
  %97 = select i1 %96, i16 -32768, i16 %93
  call void @llvm.lifetime.start(i64 16, i8* nonnull %24)
  store i64 %82, i64* %25, align 16
  store i64 0, i64* %26, align 8
  %98 = getelementptr inbounds [8 x i16], [8 x i16]* %27, i64 0, i64 3
  store i16 %97, i16* %98, align 2
  %99 = load i64, i64* %25, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %24)
  %100 = bitcast <2 x i64>* %11 to %struct.uint16v8_t*
  %101 = bitcast { i64, i64 }* %8 to i8*
  %102 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %8, i64 0, i32 0
  %103 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %8, i64 0, i32 1
  %104 = bitcast { i64, i64 }* %8 to [8 x i16]*
  %105 = bitcast <2 x i64>* %11 to i16*
  %106 = load i16, i16* %105, align 16
  %107 = getelementptr inbounds %struct.uint16v8_t, %struct.uint16v8_t* %100, i64 0, i32 0, i64 1
  %108 = load i16, i16* %107, align 2
  %109 = add i16 %108, %106
  %110 = or i16 %108, %106
  %111 = and i16 %108, %106
  %112 = xor i16 %110, -32768
  %113 = and i16 %112, %109
  %114 = icmp slt i16 %113, 0
  %115 = select i1 %114, i16 32767, i16 %109
  %116 = xor i16 %109, -32768
  %117 = and i16 %111, %116
  %118 = icmp slt i16 %117, 0
  %119 = select i1 %118, i16 -32768, i16 %115
  call void @llvm.lifetime.start(i64 16, i8* nonnull %101)
  store i64 %99, i64* %102, align 8
  store i64 0, i64* %103, align 8
  %120 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %8, i64 0, i32 1
  %121 = bitcast i64* %120 to i16*
  store i16 %119, i16* %121, align 8
  %122 = load i64, i64* %103, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %101)
  %123 = getelementptr inbounds %struct.uint16v8_t, %struct.uint16v8_t* %100, i64 0, i32 0, i64 2
  %124 = load i16, i16* %123, align 4
  %125 = getelementptr inbounds %struct.uint16v8_t, %struct.uint16v8_t* %100, i64 0, i32 0, i64 3
  %126 = load i16, i16* %125, align 2
  %127 = add i16 %126, %124
  %128 = or i16 %126, %124
  %129 = and i16 %126, %124
  %130 = xor i16 %128, -32768
  %131 = and i16 %130, %127
  %132 = icmp slt i16 %131, 0
  %133 = select i1 %132, i16 32767, i16 %127
  %134 = xor i16 %127, -32768
  %135 = and i16 %129, %134
  %136 = icmp slt i16 %135, 0
  %137 = select i1 %136, i16 -32768, i16 %133
  call void @llvm.lifetime.start(i64 16, i8* nonnull %101)
  store i64 %99, i64* %102, align 8
  store i64 %122, i64* %103, align 8
  %138 = getelementptr inbounds [8 x i16], [8 x i16]* %104, i64 0, i64 5
  store i16 %137, i16* %138, align 2
  %139 = load i64, i64* %103, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %101)
  %140 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %12, i64 0, i32 1
  %141 = bitcast i64* %140 to i16*
  %142 = load i16, i16* %141, align 8
  %143 = getelementptr inbounds %struct.uint16v8_t, %struct.uint16v8_t* %100, i64 0, i32 0, i64 5
  %144 = load i16, i16* %143, align 2
  %145 = add i16 %144, %142
  %146 = or i16 %144, %142
  %147 = and i16 %144, %142
  %148 = xor i16 %146, -32768
  %149 = and i16 %148, %145
  %150 = icmp slt i16 %149, 0
  %151 = select i1 %150, i16 32767, i16 %145
  %152 = xor i16 %145, -32768
  %153 = and i16 %147, %152
  %154 = icmp slt i16 %153, 0
  %155 = select i1 %154, i16 -32768, i16 %151
  call void @llvm.lifetime.start(i64 16, i8* nonnull %101)
  store i64 %99, i64* %102, align 8
  store i64 %139, i64* %103, align 8
  %156 = getelementptr inbounds [8 x i16], [8 x i16]* %104, i64 0, i64 6
  store i16 %155, i16* %156, align 4
  %157 = load i64, i64* %103, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %101)
  %158 = getelementptr inbounds %struct.uint16v8_t, %struct.uint16v8_t* %100, i64 0, i32 0, i64 6
  %159 = load i16, i16* %158, align 4
  %160 = getelementptr inbounds %struct.uint16v8_t, %struct.uint16v8_t* %100, i64 0, i32 0, i64 7
  %161 = load i16, i16* %160, align 2
  %162 = add i16 %161, %159
  %163 = or i16 %161, %159
  %164 = and i16 %161, %159
  %165 = xor i16 %163, -32768
  %166 = and i16 %165, %162
  %167 = icmp slt i16 %166, 0
  %168 = select i1 %167, i16 32767, i16 %162
  %169 = xor i16 %162, -32768
  %170 = and i16 %164, %169
  %171 = icmp slt i16 %170, 0
  %172 = select i1 %171, i16 -32768, i16 %168
  call void @llvm.lifetime.start(i64 16, i8* nonnull %101)
  store i64 %99, i64* %102, align 8
  store i64 %157, i64* %103, align 8
  %173 = getelementptr inbounds [8 x i16], [8 x i16]* %104, i64 0, i64 7
  store i16 %172, i16* %173, align 2
  %174 = load i64, i64* %103, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %101)
  %175 = lshr i64 %99, 16
  %176 = lshr i64 %99, 32
  %177 = lshr i64 %99, 48
  %178 = trunc i64 %99 to i16
  %179 = trunc i64 %175 to i16
  %180 = trunc i64 %176 to i16
  %181 = trunc i64 %177 to i16
  %182 = bitcast i8* %2 to i16*
  store i16 %178, i16* %182, align 1
  %183 = getelementptr inbounds i8, i8* %2, i64 2
  %184 = bitcast i8* %183 to i16*
  store i16 %179, i16* %184, align 1
  %185 = getelementptr inbounds i8, i8* %2, i64 4
  %186 = bitcast i8* %185 to i16*
  store i16 %180, i16* %186, align 1
  %187 = getelementptr inbounds i8, i8* %2, i64 6
  %188 = bitcast i8* %187 to i16*
  store i16 %181, i16* %188, align 1
  %189 = trunc i64 %174 to i16
  %190 = getelementptr inbounds i8, i8* %2, i64 8
  %191 = bitcast i8* %190 to i16*
  store i16 %189, i16* %191, align 1
  %192 = lshr i64 %174, 16
  %193 = trunc i64 %192 to i16
  %194 = getelementptr inbounds i8, i8* %2, i64 10
  %195 = bitcast i8* %194 to i16*
  store i16 %193, i16* %195, align 1
  %196 = lshr i64 %174, 32
  %197 = trunc i64 %196 to i16
  %198 = getelementptr inbounds i8, i8* %2, i64 12
  %199 = bitcast i8* %198 to i16*
  store i16 %197, i16* %199, align 1
  %200 = lshr i64 %174, 48
  %201 = trunc i64 %200 to i16
  %202 = getelementptr inbounds i8, i8* %2, i64 14
  %203 = bitcast i8* %202 to i16*
  store i16 %201, i16* %203, align 1
  call void @llvm.lifetime.end(i64 16, i8* nonnull %21) 
  call void @llvm.lifetime.end(i64 16, i8* nonnull %13) 
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZL7PHADDSWI3VnWI8vec128_tE2VnIS1_E3MVnIS1_EEP6MemoryS8_R5StateT_T0_T1_(%struct.Memory* returned, %struct.State* nocapture readnone dereferenceable(3376), i8* nocapture, i8* nocapture readonly, i64)  {
  %6 = alloca <2 x i64>, align 16
  %7 = bitcast <2 x i64>* %6 to { i64, i64 }*
  %8 = alloca { i64, i64 }, align 8
  %9 = alloca <2 x i64>, align 16
  %10 = bitcast <2 x i64>* %9 to { i64, i64 }*
  %11 = bitcast <2 x i64>* %9 to %struct.uint16v8_t*
  %12 = alloca <2 x i64>, align 16
  %13 = bitcast <2 x i64>* %12 to { i64, i64 }*
  %14 = bitcast <2 x i64>* %9 to i8*
  call void @llvm.lifetime.start(i64 16, i8* nonnull %14) 
  %15 = bitcast i8* %3 to <2 x i64>*
  %16 = load <2 x i64>, <2 x i64>* %15, align 1
  store <2 x i64> %16, <2 x i64>* %9, align 16
  %17 = bitcast <2 x i64>* %12 to i8*
  call void @llvm.lifetime.start(i64 16, i8* nonnull %17) 
  %18 = inttoptr i64 %4 to i16*
  %19 = load i16, i16* %18
  %20 = add i64 %4, 2
  %21 = inttoptr i64 %20 to i16*
  %22 = load i16, i16* %21
  %23 = add i64 %4, 4
  %24 = inttoptr i64 %23 to i16*
  %25 = load i16, i16* %24
  %26 = add i64 %4, 6
  %27 = inttoptr i64 %26 to i16*
  %28 = load i16, i16* %27
  %29 = add i64 %4, 8
  %30 = inttoptr i64 %29 to i16*
  %31 = load i16, i16* %30
  %32 = add i64 %4, 10
  %33 = inttoptr i64 %32 to i16*
  %34 = load i16, i16* %33
  %35 = add i64 %4, 12
  %36 = inttoptr i64 %35 to i16*
  %37 = load i16, i16* %36
  %38 = add i64 %4, 14
  %39 = inttoptr i64 %38 to i16*
  %40 = load i16, i16* %39
  %41 = insertelement <2 x i16> undef, i16 %28, i32 0
  %42 = insertelement <2 x i16> %41, i16 %40, i32 1
  %43 = zext <2 x i16> %42 to <2 x i64>
  %44 = shl nuw <2 x i64> %43, <i64 48, i64 48>
  %45 = insertelement <2 x i16> undef, i16 %25, i32 0
  %46 = insertelement <2 x i16> %45, i16 %37, i32 1
  %47 = zext <2 x i16> %46 to <2 x i64>
  %48 = shl nuw nsw <2 x i64> %47, <i64 32, i64 32>
  %49 = insertelement <2 x i16> undef, i16 %22, i32 0
  %50 = insertelement <2 x i16> %49, i16 %34, i32 1
  %51 = zext <2 x i16> %50 to <2 x i64>
  %52 = shl nuw nsw <2 x i64> %51, <i64 16, i64 16>
  %53 = insertelement <2 x i16> undef, i16 %19, i32 0
  %54 = insertelement <2 x i16> %53, i16 %31, i32 1
  %55 = zext <2 x i16> %54 to <2 x i64>
  %56 = or <2 x i64> %52, %55
  %57 = or <2 x i64> %56, %48
  %58 = or <2 x i64> %57, %44
  store <2 x i64> %58, <2 x i64>* %12, align 16
  %59 = bitcast <2 x i64>* %6 to i8*
  %60 = getelementptr inbounds <2 x i64>, <2 x i64>* %6, i64 0, i64 0
  %61 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %7, i64 0, i32 1
  %62 = bitcast <2 x i64>* %6 to [8 x i16]*
  %63 = extractelement <2 x i64> %16, i32 0
  %64 = trunc i64 %63 to i16
  %65 = lshr i64 %63, 16
  %66 = trunc i64 %65 to i16
  %67 = add i16 %66, %64
  %68 = or i64 %65, %63
  %69 = trunc i64 %68 to i16
  %70 = and i64 %65, %63
  %71 = trunc i64 %70 to i16
  %72 = xor i16 %69, -32768
  %73 = and i16 %72, %67
  %74 = icmp slt i16 %73, 0
  %75 = select i1 %74, i16 32767, i16 %67
  %76 = xor i16 %67, -32768
  %77 = and i16 %71, %76
  %78 = icmp slt i16 %77, 0
  %79 = select i1 %78, i16 -32768, i16 %75
  call void @llvm.lifetime.start(i64 16, i8* nonnull %59)
  store <2 x i64> zeroinitializer, <2 x i64>* %6, align 16
  %80 = bitcast <2 x i64>* %6 to i16*
  store i16 %79, i16* %80, align 16
  %81 = load i64, i64* %60, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %59)
  %82 = lshr i64 %63, 32
  %83 = trunc i64 %82 to i16
  %84 = lshr i64 %63, 48
  %85 = trunc i64 %84 to i16
  %86 = add i16 %85, %83
  %87 = or i64 %84, %82
  %88 = trunc i64 %87 to i16
  %89 = and i64 %84, %82
  %90 = trunc i64 %89 to i16
  %91 = xor i16 %88, -32768
  %92 = and i16 %91, %86
  %93 = icmp slt i16 %92, 0
  %94 = select i1 %93, i16 32767, i16 %86
  %95 = xor i16 %86, -32768
  %96 = and i16 %90, %95
  %97 = icmp slt i16 %96, 0
  %98 = select i1 %97, i16 -32768, i16 %94
  call void @llvm.lifetime.start(i64 16, i8* nonnull %59)
  store i64 %81, i64* %60, align 16
  store i64 0, i64* %61, align 8
  %99 = getelementptr inbounds [8 x i16], [8 x i16]* %62, i64 0, i64 1
  store i16 %98, i16* %99, align 2
  %100 = load i64, i64* %60, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %59)
  %101 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %10, i64 0, i32 1
  %102 = bitcast i64* %101 to i16*
  %103 = load i16, i16* %102, align 8
  %104 = getelementptr inbounds %struct.uint16v8_t, %struct.uint16v8_t* %11, i64 0, i32 0, i64 5
  %105 = load i16, i16* %104, align 2
  %106 = add i16 %105, %103
  %107 = or i16 %105, %103
  %108 = and i16 %105, %103
  %109 = xor i16 %107, -32768
  %110 = and i16 %109, %106
  %111 = icmp slt i16 %110, 0
  %112 = select i1 %111, i16 32767, i16 %106
  %113 = xor i16 %106, -32768
  %114 = and i16 %108, %113
  %115 = icmp slt i16 %114, 0
  %116 = select i1 %115, i16 -32768, i16 %112
  call void @llvm.lifetime.start(i64 16, i8* nonnull %59)
  store i64 %100, i64* %60, align 16
  store i64 0, i64* %61, align 8
  %117 = getelementptr inbounds [8 x i16], [8 x i16]* %62, i64 0, i64 2
  store i16 %116, i16* %117, align 4
  %118 = load i64, i64* %60, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %59)
  %119 = getelementptr inbounds %struct.uint16v8_t, %struct.uint16v8_t* %11, i64 0, i32 0, i64 6
  %120 = load i16, i16* %119, align 4
  %121 = getelementptr inbounds %struct.uint16v8_t, %struct.uint16v8_t* %11, i64 0, i32 0, i64 7
  %122 = load i16, i16* %121, align 2
  %123 = add i16 %122, %120
  %124 = or i16 %122, %120
  %125 = and i16 %122, %120
  %126 = xor i16 %124, -32768
  %127 = and i16 %126, %123
  %128 = icmp slt i16 %127, 0
  %129 = select i1 %128, i16 32767, i16 %123
  %130 = xor i16 %123, -32768
  %131 = and i16 %125, %130
  %132 = icmp slt i16 %131, 0
  %133 = select i1 %132, i16 -32768, i16 %129
  call void @llvm.lifetime.start(i64 16, i8* nonnull %59)
  store i64 %118, i64* %60, align 16
  store i64 0, i64* %61, align 8
  %134 = getelementptr inbounds [8 x i16], [8 x i16]* %62, i64 0, i64 3
  store i16 %133, i16* %134, align 2
  %135 = load i64, i64* %60, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %59)
  %136 = bitcast <2 x i64>* %12 to %struct.uint16v8_t*
  %137 = bitcast { i64, i64 }* %8 to i8*
  %138 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %8, i64 0, i32 0
  %139 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %8, i64 0, i32 1
  %140 = bitcast { i64, i64 }* %8 to [8 x i16]*
  %141 = bitcast <2 x i64>* %12 to i16*
  %142 = load i16, i16* %141, align 16
  %143 = getelementptr inbounds %struct.uint16v8_t, %struct.uint16v8_t* %136, i64 0, i32 0, i64 1
  %144 = load i16, i16* %143, align 2
  %145 = add i16 %144, %142
  %146 = or i16 %144, %142
  %147 = and i16 %144, %142
  %148 = xor i16 %146, -32768
  %149 = and i16 %148, %145
  %150 = icmp slt i16 %149, 0
  %151 = select i1 %150, i16 32767, i16 %145
  %152 = xor i16 %145, -32768
  %153 = and i16 %147, %152
  %154 = icmp slt i16 %153, 0
  %155 = select i1 %154, i16 -32768, i16 %151
  call void @llvm.lifetime.start(i64 16, i8* nonnull %137)
  store i64 %135, i64* %138, align 8
  store i64 0, i64* %139, align 8
  %156 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %8, i64 0, i32 1
  %157 = bitcast i64* %156 to i16*
  store i16 %155, i16* %157, align 8
  %158 = load i64, i64* %139, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %137)
  %159 = getelementptr inbounds %struct.uint16v8_t, %struct.uint16v8_t* %136, i64 0, i32 0, i64 2
  %160 = load i16, i16* %159, align 4
  %161 = getelementptr inbounds %struct.uint16v8_t, %struct.uint16v8_t* %136, i64 0, i32 0, i64 3
  %162 = load i16, i16* %161, align 2
  %163 = add i16 %162, %160
  %164 = or i16 %162, %160
  %165 = and i16 %162, %160
  %166 = xor i16 %164, -32768
  %167 = and i16 %166, %163
  %168 = icmp slt i16 %167, 0
  %169 = select i1 %168, i16 32767, i16 %163
  %170 = xor i16 %163, -32768
  %171 = and i16 %165, %170
  %172 = icmp slt i16 %171, 0
  %173 = select i1 %172, i16 -32768, i16 %169
  call void @llvm.lifetime.start(i64 16, i8* nonnull %137)
  store i64 %135, i64* %138, align 8
  store i64 %158, i64* %139, align 8
  %174 = getelementptr inbounds [8 x i16], [8 x i16]* %140, i64 0, i64 5
  store i16 %173, i16* %174, align 2
  %175 = load i64, i64* %139, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %137)
  %176 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %13, i64 0, i32 1
  %177 = bitcast i64* %176 to i16*
  %178 = load i16, i16* %177, align 8
  %179 = getelementptr inbounds %struct.uint16v8_t, %struct.uint16v8_t* %136, i64 0, i32 0, i64 5
  %180 = load i16, i16* %179, align 2
  %181 = add i16 %180, %178
  %182 = or i16 %180, %178
  %183 = and i16 %180, %178
  %184 = xor i16 %182, -32768
  %185 = and i16 %184, %181
  %186 = icmp slt i16 %185, 0
  %187 = select i1 %186, i16 32767, i16 %181
  %188 = xor i16 %181, -32768
  %189 = and i16 %183, %188
  %190 = icmp slt i16 %189, 0
  %191 = select i1 %190, i16 -32768, i16 %187
  call void @llvm.lifetime.start(i64 16, i8* nonnull %137)
  store i64 %135, i64* %138, align 8
  store i64 %175, i64* %139, align 8
  %192 = getelementptr inbounds [8 x i16], [8 x i16]* %140, i64 0, i64 6
  store i16 %191, i16* %192, align 4
  %193 = load i64, i64* %139, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %137)
  %194 = getelementptr inbounds %struct.uint16v8_t, %struct.uint16v8_t* %136, i64 0, i32 0, i64 6
  %195 = load i16, i16* %194, align 4
  %196 = getelementptr inbounds %struct.uint16v8_t, %struct.uint16v8_t* %136, i64 0, i32 0, i64 7
  %197 = load i16, i16* %196, align 2
  %198 = add i16 %197, %195
  %199 = or i16 %197, %195
  %200 = and i16 %197, %195
  %201 = xor i16 %199, -32768
  %202 = and i16 %201, %198
  %203 = icmp slt i16 %202, 0
  %204 = select i1 %203, i16 32767, i16 %198
  %205 = xor i16 %198, -32768
  %206 = and i16 %200, %205
  %207 = icmp slt i16 %206, 0
  %208 = select i1 %207, i16 -32768, i16 %204
  call void @llvm.lifetime.start(i64 16, i8* nonnull %137)
  store i64 %135, i64* %138, align 8
  store i64 %193, i64* %139, align 8
  %209 = getelementptr inbounds [8 x i16], [8 x i16]* %140, i64 0, i64 7
  store i16 %208, i16* %209, align 2
  %210 = load i64, i64* %139, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %137)
  %211 = lshr i64 %135, 16
  %212 = lshr i64 %135, 32
  %213 = lshr i64 %135, 48
  %214 = trunc i64 %135 to i16
  %215 = trunc i64 %211 to i16
  %216 = trunc i64 %212 to i16
  %217 = trunc i64 %213 to i16
  %218 = bitcast i8* %2 to i16*
  store i16 %214, i16* %218, align 1
  %219 = getelementptr inbounds i8, i8* %2, i64 2
  %220 = bitcast i8* %219 to i16*
  store i16 %215, i16* %220, align 1
  %221 = getelementptr inbounds i8, i8* %2, i64 4
  %222 = bitcast i8* %221 to i16*
  store i16 %216, i16* %222, align 1
  %223 = getelementptr inbounds i8, i8* %2, i64 6
  %224 = bitcast i8* %223 to i16*
  store i16 %217, i16* %224, align 1
  %225 = trunc i64 %210 to i16
  %226 = getelementptr inbounds i8, i8* %2, i64 8
  %227 = bitcast i8* %226 to i16*
  store i16 %225, i16* %227, align 1
  %228 = lshr i64 %210, 16
  %229 = trunc i64 %228 to i16
  %230 = getelementptr inbounds i8, i8* %2, i64 10
  %231 = bitcast i8* %230 to i16*
  store i16 %229, i16* %231, align 1
  %232 = lshr i64 %210, 32
  %233 = trunc i64 %232 to i16
  %234 = getelementptr inbounds i8, i8* %2, i64 12
  %235 = bitcast i8* %234 to i16*
  store i16 %233, i16* %235, align 1
  %236 = lshr i64 %210, 48
  %237 = trunc i64 %236 to i16
  %238 = getelementptr inbounds i8, i8* %2, i64 14
  %239 = bitcast i8* %238 to i16*
  store i16 %237, i16* %239, align 1
  call void @llvm.lifetime.end(i64 16, i8* nonnull %17) 
  call void @llvm.lifetime.end(i64 16, i8* nonnull %14) 
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L5PSUBBI4RVnWI7vec64_tE3RVnIS2_ES5_EEP6MemoryS7_R5StateT_T0_T1_(%struct.Memory* readnone returned, %struct.State* nocapture readnone dereferenceable(3376), i64* nocapture, i64, i64)  {
  %6 = lshr i64 %3, 56
  %7 = and i64 %4, 65280
  %8 = and i64 %4, 16711680
  %9 = and i64 %4, 4278190080
  %10 = and i64 %4, 1095216660480
  %11 = and i64 %4, 280375465082880
  %12 = and i64 %4, 71776119061217280
  %13 = lshr i64 %4, 56
  %14 = sub i64 %3, %4
  %15 = sub nsw i64 %6, %13
  %16 = sub i64 %3, %12
  %17 = sub i64 %3, %11
  %18 = sub i64 %3, %10
  %19 = sub i64 %3, %9
  %20 = sub i64 %3, %8
  %21 = sub i64 %3, %7
  %22 = trunc i64 %14 to i8
  %23 = lshr i64 %21, 8
  %24 = trunc i64 %23 to i8
  %25 = lshr i64 %20, 16
  %26 = trunc i64 %25 to i8
  %27 = lshr i64 %19, 24
  %28 = trunc i64 %27 to i8
  %29 = lshr i64 %18, 32
  %30 = trunc i64 %29 to i8
  %31 = lshr i64 %17, 40
  %32 = trunc i64 %31 to i8
  %33 = lshr i64 %16, 48
  %34 = trunc i64 %33 to i8
  %35 = trunc i64 %15 to i8
  %36 = bitcast i64* %2 to [8 x i8]*
  %37 = bitcast i64* %2 to i8*
  store i8 %22, i8* %37, align 1
  %38 = getelementptr inbounds [8 x i8], [8 x i8]* %36, i64 0, i64 1
  store i8 %24, i8* %38, align 1
  %39 = getelementptr inbounds [8 x i8], [8 x i8]* %36, i64 0, i64 2
  store i8 %26, i8* %39, align 1
  %40 = getelementptr inbounds [8 x i8], [8 x i8]* %36, i64 0, i64 3
  store i8 %28, i8* %40, align 1
  %41 = getelementptr inbounds [8 x i8], [8 x i8]* %36, i64 0, i64 4
  store i8 %30, i8* %41, align 1
  %42 = getelementptr inbounds [8 x i8], [8 x i8]* %36, i64 0, i64 5
  store i8 %32, i8* %42, align 1
  %43 = getelementptr inbounds [8 x i8], [8 x i8]* %36, i64 0, i64 6
  store i8 %34, i8* %43, align 1
  %44 = getelementptr inbounds [8 x i8], [8 x i8]* %36, i64 0, i64 7
  store i8 %35, i8* %44, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L5PSUBBI4RVnWI7vec64_tE3RVnIS2_E3MVnIS2_EEEP6MemoryS9_R5StateT_T0_T1_(%struct.Memory* returned, %struct.State* nocapture readnone dereferenceable(3376), i64* nocapture, i64, i64)  {
  %6 = lshr i64 %3, 56
  %7 = trunc i64 %6 to i8
  %8 = inttoptr i64 %4 to i8*
  %9 = load i8, i8* %8
  %10 = add i64 %4, 1
  %11 = inttoptr i64 %10 to i8*
  %12 = load i8, i8* %11
  %13 = add i64 %4, 2
  %14 = inttoptr i64 %13 to i8*
  %15 = load i8, i8* %14
  %16 = add i64 %4, 3
  %17 = inttoptr i64 %16 to i8*
  %18 = load i8, i8* %17
  %19 = add i64 %4, 4
  %20 = inttoptr i64 %19 to i8*
  %21 = load i8, i8* %20
  %22 = add i64 %4, 5
  %23 = inttoptr i64 %22 to i8*
  %24 = load i8, i8* %23
  %25 = add i64 %4, 6
  %26 = inttoptr i64 %25 to i8*
  %27 = load i8, i8* %26
  %28 = add i64 %4, 7
  %29 = inttoptr i64 %28 to i8*
  %30 = load i8, i8* %29
  %31 = zext i8 %27 to i64
  %32 = zext i8 %24 to i64
  %33 = zext i8 %21 to i64
  %34 = zext i8 %18 to i64
  %35 = shl nuw nsw i64 %34, 24
  %36 = zext i8 %15 to i64
  %37 = shl nuw nsw i64 %36, 16
  %38 = zext i8 %12 to i64
  %39 = shl nuw nsw i64 %38, 8
  %40 = zext i8 %9 to i64
  %41 = sub i64 %3, %40
  %42 = sub i8 %7, %30
  %43 = shl nuw nsw i64 %31, 48
  %44 = sub i64 %3, %43
  %45 = shl nuw nsw i64 %32, 40
  %46 = sub i64 %3, %45
  %47 = shl nuw nsw i64 %33, 32
  %48 = sub i64 %3, %47
  %49 = sub i64 %3, %35
  %50 = sub i64 %3, %37
  %51 = sub i64 %3, %39
  %52 = trunc i64 %41 to i8
  %53 = lshr i64 %51, 8
  %54 = trunc i64 %53 to i8
  %55 = lshr i64 %50, 16
  %56 = trunc i64 %55 to i8
  %57 = lshr i64 %49, 24
  %58 = trunc i64 %57 to i8
  %59 = lshr i64 %48, 32
  %60 = trunc i64 %59 to i8
  %61 = lshr i64 %46, 40
  %62 = trunc i64 %61 to i8
  %63 = lshr i64 %44, 48
  %64 = trunc i64 %63 to i8
  %65 = bitcast i64* %2 to [8 x i8]*
  %66 = bitcast i64* %2 to i8*
  store i8 %52, i8* %66, align 1
  %67 = getelementptr inbounds [8 x i8], [8 x i8]* %65, i64 0, i64 1
  store i8 %54, i8* %67, align 1
  %68 = getelementptr inbounds [8 x i8], [8 x i8]* %65, i64 0, i64 2
  store i8 %56, i8* %68, align 1
  %69 = getelementptr inbounds [8 x i8], [8 x i8]* %65, i64 0, i64 3
  store i8 %58, i8* %69, align 1
  %70 = getelementptr inbounds [8 x i8], [8 x i8]* %65, i64 0, i64 4
  store i8 %60, i8* %70, align 1
  %71 = getelementptr inbounds [8 x i8], [8 x i8]* %65, i64 0, i64 5
  store i8 %62, i8* %71, align 1
  %72 = getelementptr inbounds [8 x i8], [8 x i8]* %65, i64 0, i64 6
  store i8 %64, i8* %72, align 1
  %73 = getelementptr inbounds [8 x i8], [8 x i8]* %65, i64 0, i64 7
  store i8 %42, i8* %73, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L5PSUBBI3VnWI8vec128_tE2VnIS2_ES5_EEP6MemoryS7_R5StateT_T0_T1_(%struct.Memory* readnone returned, %struct.State* nocapture readnone dereferenceable(3376), i8* nocapture, i8* nocapture readonly, i8* nocapture readonly)  {
  %6 = bitcast i8* %3 to i64*
  %7 = load i64, i64* %6, align 1
  %8 = getelementptr inbounds i8, i8* %3, i64 8
  %9 = bitcast i8* %8 to i64*
  %10 = load i64, i64* %9, align 1
  %11 = lshr i64 %7, 56
  %12 = bitcast i8* %4 to i64*
  %13 = load i64, i64* %12, align 1
  %14 = getelementptr inbounds i8, i8* %4, i64 8
  %15 = bitcast i8* %14 to i64*
  %16 = load i64, i64* %15, align 1
  %17 = and i64 %13, 65280
  %18 = and i64 %13, 16711680
  %19 = and i64 %13, 4278190080
  %20 = and i64 %13, 1095216660480
  %21 = and i64 %13, 280375465082880
  %22 = and i64 %13, 71776119061217280
  %23 = lshr i64 %13, 56
  %24 = sub i64 %7, %13
  %25 = sub nsw i64 %11, %23
  %26 = sub i64 %10, %16
  %27 = and i64 %16, 65280
  %28 = sub i64 %10, %27
  %29 = and i64 %16, 16711680
  %30 = sub i64 %10, %29
  %31 = and i64 %16, 4278190080
  %32 = sub i64 %10, %31
  %33 = and i64 %16, 1095216660480
  %34 = sub i64 %10, %33
  %35 = and i64 %16, 280375465082880
  %36 = sub i64 %10, %35
  %37 = and i64 %16, 71776119061217280
  %38 = sub i64 %10, %37
  %39 = lshr i64 %10, 56
  %40 = lshr i64 %16, 56
  %41 = sub nsw i64 %39, %40
  %42 = sub i64 %7, %22
  %43 = sub i64 %7, %21
  %44 = sub i64 %7, %20
  %45 = sub i64 %7, %19
  %46 = sub i64 %7, %18
  %47 = sub i64 %7, %17
  %48 = trunc i64 %24 to i8
  %49 = lshr i64 %47, 8
  %50 = trunc i64 %49 to i8
  %51 = lshr i64 %46, 16
  %52 = trunc i64 %51 to i8
  %53 = lshr i64 %45, 24
  %54 = trunc i64 %53 to i8
  %55 = lshr i64 %44, 32
  %56 = trunc i64 %55 to i8
  %57 = lshr i64 %43, 40
  %58 = trunc i64 %57 to i8
  %59 = lshr i64 %42, 48
  %60 = trunc i64 %59 to i8
  %61 = trunc i64 %25 to i8
  store i8 %48, i8* %2, align 1
  %62 = getelementptr inbounds i8, i8* %2, i64 1
  store i8 %50, i8* %62, align 1
  %63 = getelementptr inbounds i8, i8* %2, i64 2
  store i8 %52, i8* %63, align 1
  %64 = getelementptr inbounds i8, i8* %2, i64 3
  store i8 %54, i8* %64, align 1
  %65 = getelementptr inbounds i8, i8* %2, i64 4
  store i8 %56, i8* %65, align 1
  %66 = getelementptr inbounds i8, i8* %2, i64 5
  store i8 %58, i8* %66, align 1
  %67 = getelementptr inbounds i8, i8* %2, i64 6
  store i8 %60, i8* %67, align 1
  %68 = getelementptr inbounds i8, i8* %2, i64 7
  store i8 %61, i8* %68, align 1
  %69 = trunc i64 %26 to i8
  %70 = getelementptr inbounds i8, i8* %2, i64 8
  store i8 %69, i8* %70, align 1
  %71 = lshr i64 %28, 8
  %72 = trunc i64 %71 to i8
  %73 = getelementptr inbounds i8, i8* %2, i64 9
  store i8 %72, i8* %73, align 1
  %74 = lshr i64 %30, 16
  %75 = trunc i64 %74 to i8
  %76 = getelementptr inbounds i8, i8* %2, i64 10
  store i8 %75, i8* %76, align 1
  %77 = lshr i64 %32, 24
  %78 = trunc i64 %77 to i8
  %79 = getelementptr inbounds i8, i8* %2, i64 11
  store i8 %78, i8* %79, align 1
  %80 = lshr i64 %34, 32
  %81 = trunc i64 %80 to i8
  %82 = getelementptr inbounds i8, i8* %2, i64 12
  store i8 %81, i8* %82, align 1
  %83 = lshr i64 %36, 40
  %84 = trunc i64 %83 to i8
  %85 = getelementptr inbounds i8, i8* %2, i64 13
  store i8 %84, i8* %85, align 1
  %86 = lshr i64 %38, 48
  %87 = trunc i64 %86 to i8
  %88 = getelementptr inbounds i8, i8* %2, i64 14
  store i8 %87, i8* %88, align 1
  %89 = trunc i64 %41 to i8
  %90 = getelementptr inbounds i8, i8* %2, i64 15
  store i8 %89, i8* %90, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L5PSUBBI3VnWI8vec128_tE2VnIS2_E3MVnIS2_EEEP6MemoryS9_R5StateT_T0_T1_(%struct.Memory* returned, %struct.State* nocapture readnone dereferenceable(3376), i8* nocapture, i8* nocapture readonly, i64)  {
  %6 = bitcast i8* %3 to i64*
  %7 = load i64, i64* %6, align 1
  %8 = getelementptr inbounds i8, i8* %3, i64 8
  %9 = bitcast i8* %8 to i64*
  %10 = load i64, i64* %9, align 1
  %11 = lshr i64 %7, 56
  %12 = trunc i64 %11 to i8
  %13 = inttoptr i64 %4 to i8*
  %14 = load i8, i8* %13
  %15 = add i64 %4, 1
  %16 = inttoptr i64 %15 to i8*
  %17 = load i8, i8* %16
  %18 = add i64 %4, 2
  %19 = inttoptr i64 %18 to i8*
  %20 = load i8, i8* %19
  %21 = add i64 %4, 3
  %22 = inttoptr i64 %21 to i8*
  %23 = load i8, i8* %22
  %24 = add i64 %4, 4
  %25 = inttoptr i64 %24 to i8*
  %26 = load i8, i8* %25
  %27 = add i64 %4, 5
  %28 = inttoptr i64 %27 to i8*
  %29 = load i8, i8* %28
  %30 = add i64 %4, 6
  %31 = inttoptr i64 %30 to i8*
  %32 = load i8, i8* %31
  %33 = add i64 %4, 7
  %34 = inttoptr i64 %33 to i8*
  %35 = load i8, i8* %34
  %36 = add i64 %4, 8
  %37 = inttoptr i64 %36 to i8*
  %38 = load i8, i8* %37
  %39 = add i64 %4, 9
  %40 = inttoptr i64 %39 to i8*
  %41 = load i8, i8* %40
  %42 = zext i8 %41 to i64
  %43 = add i64 %4, 10
  %44 = inttoptr i64 %43 to i8*
  %45 = load i8, i8* %44
  %46 = zext i8 %45 to i64
  %47 = add i64 %4, 11
  %48 = inttoptr i64 %47 to i8*
  %49 = load i8, i8* %48
  %50 = zext i8 %49 to i64
  %51 = add i64 %4, 12
  %52 = inttoptr i64 %51 to i8*
  %53 = load i8, i8* %52
  %54 = zext i8 %53 to i64
  %55 = shl nuw nsw i64 %54, 32
  %56 = add i64 %4, 13
  %57 = inttoptr i64 %56 to i8*
  %58 = load i8, i8* %57
  %59 = zext i8 %58 to i64
  %60 = shl nuw nsw i64 %59, 40
  %61 = add i64 %4, 14
  %62 = inttoptr i64 %61 to i8*
  %63 = load i8, i8* %62
  %64 = zext i8 %63 to i64
  %65 = shl nuw nsw i64 %64, 48
  %66 = add i64 %4, 15
  %67 = inttoptr i64 %66 to i8*
  %68 = load i8, i8* %67
  %69 = zext i8 %32 to i64
  %70 = zext i8 %29 to i64
  %71 = zext i8 %26 to i64
  %72 = zext i8 %23 to i64
  %73 = shl nuw nsw i64 %72, 24
  %74 = zext i8 %20 to i64
  %75 = shl nuw nsw i64 %74, 16
  %76 = zext i8 %17 to i64
  %77 = shl nuw nsw i64 %76, 8
  %78 = zext i8 %14 to i64
  %79 = sub i64 %7, %78
  %80 = sub i8 %12, %35
  %81 = trunc i64 %10 to i8
  %82 = sub i8 %81, %38
  %83 = shl nuw nsw i64 %42, 8
  %84 = sub i64 %10, %83
  %85 = shl nuw nsw i64 %46, 16
  %86 = sub i64 %10, %85
  %87 = shl nuw nsw i64 %50, 24
  %88 = sub i64 %10, %87
  %89 = sub i64 %10, %55
  %90 = sub i64 %10, %60
  %91 = sub i64 %10, %65
  %92 = lshr i64 %10, 56
  %93 = trunc i64 %92 to i8
  %94 = sub i8 %93, %68
  %95 = shl nuw nsw i64 %69, 48
  %96 = sub i64 %7, %95
  %97 = shl nuw nsw i64 %70, 40
  %98 = sub i64 %7, %97
  %99 = shl nuw nsw i64 %71, 32
  %100 = sub i64 %7, %99
  %101 = sub i64 %7, %73
  %102 = sub i64 %7, %75
  %103 = sub i64 %7, %77
  %104 = trunc i64 %79 to i8
  %105 = lshr i64 %103, 8
  %106 = trunc i64 %105 to i8
  %107 = lshr i64 %102, 16
  %108 = trunc i64 %107 to i8
  %109 = lshr i64 %101, 24
  %110 = trunc i64 %109 to i8
  %111 = lshr i64 %100, 32
  %112 = trunc i64 %111 to i8
  %113 = lshr i64 %98, 40
  %114 = trunc i64 %113 to i8
  %115 = lshr i64 %96, 48
  %116 = trunc i64 %115 to i8
  store i8 %104, i8* %2, align 1
  %117 = getelementptr inbounds i8, i8* %2, i64 1
  store i8 %106, i8* %117, align 1
  %118 = getelementptr inbounds i8, i8* %2, i64 2
  store i8 %108, i8* %118, align 1
  %119 = getelementptr inbounds i8, i8* %2, i64 3
  store i8 %110, i8* %119, align 1
  %120 = getelementptr inbounds i8, i8* %2, i64 4
  store i8 %112, i8* %120, align 1
  %121 = getelementptr inbounds i8, i8* %2, i64 5
  store i8 %114, i8* %121, align 1
  %122 = getelementptr inbounds i8, i8* %2, i64 6
  store i8 %116, i8* %122, align 1
  %123 = getelementptr inbounds i8, i8* %2, i64 7
  store i8 %80, i8* %123, align 1
  %124 = getelementptr inbounds i8, i8* %2, i64 8
  store i8 %82, i8* %124, align 1
  %125 = lshr i64 %84, 8
  %126 = trunc i64 %125 to i8
  %127 = getelementptr inbounds i8, i8* %2, i64 9
  store i8 %126, i8* %127, align 1
  %128 = lshr i64 %86, 16
  %129 = trunc i64 %128 to i8
  %130 = getelementptr inbounds i8, i8* %2, i64 10
  store i8 %129, i8* %130, align 1
  %131 = lshr i64 %88, 24
  %132 = trunc i64 %131 to i8
  %133 = getelementptr inbounds i8, i8* %2, i64 11
  store i8 %132, i8* %133, align 1
  %134 = lshr i64 %89, 32
  %135 = trunc i64 %134 to i8
  %136 = getelementptr inbounds i8, i8* %2, i64 12
  store i8 %135, i8* %136, align 1
  %137 = lshr i64 %90, 40
  %138 = trunc i64 %137 to i8
  %139 = getelementptr inbounds i8, i8* %2, i64 13
  store i8 %138, i8* %139, align 1
  %140 = lshr i64 %91, 48
  %141 = trunc i64 %140 to i8
  %142 = getelementptr inbounds i8, i8* %2, i64 14
  store i8 %141, i8* %142, align 1
  %143 = getelementptr inbounds i8, i8* %2, i64 15
  store i8 %94, i8* %143, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L5PSUBWI4RVnWI7vec64_tE3RVnIS2_ES5_EEP6MemoryS7_R5StateT_T0_T1_(%struct.Memory* readnone returned, %struct.State* nocapture readnone dereferenceable(3376), i64* nocapture, i64, i64)  {
  %6 = lshr i64 %3, 48
  %7 = and i64 %4, 4294901760
  %8 = and i64 %4, 281470681743360
  %9 = lshr i64 %4, 48
  %10 = sub i64 %3, %4
  %11 = sub nsw i64 %6, %9
  %12 = sub i64 %3, %8
  %13 = sub i64 %3, %7
  %14 = trunc i64 %10 to i16
  %15 = lshr i64 %13, 16
  %16 = trunc i64 %15 to i16
  %17 = lshr i64 %12, 32
  %18 = trunc i64 %17 to i16
  %19 = trunc i64 %11 to i16
  %20 = bitcast i64* %2 to [4 x i16]*
  %21 = bitcast i64* %2 to i16*
  store i16 %14, i16* %21, align 1
  %22 = getelementptr inbounds [4 x i16], [4 x i16]* %20, i64 0, i64 1
  store i16 %16, i16* %22, align 1
  %23 = getelementptr inbounds [4 x i16], [4 x i16]* %20, i64 0, i64 2
  store i16 %18, i16* %23, align 1
  %24 = getelementptr inbounds [4 x i16], [4 x i16]* %20, i64 0, i64 3
  store i16 %19, i16* %24, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L5PSUBWI4RVnWI7vec64_tE3RVnIS2_E3MVnIS2_EEEP6MemoryS9_R5StateT_T0_T1_(%struct.Memory* returned, %struct.State* nocapture readnone dereferenceable(3376), i64* nocapture, i64, i64)  {
  %6 = trunc i64 %3 to i16
  %7 = lshr i64 %3, 48
  %8 = trunc i64 %7 to i16
  %9 = inttoptr i64 %4 to i16*
  %10 = load i16, i16* %9
  %11 = add i64 %4, 2
  %12 = inttoptr i64 %11 to i16*
  %13 = load i16, i16* %12
  %14 = add i64 %4, 4
  %15 = inttoptr i64 %14 to i16*
  %16 = load i16, i16* %15
  %17 = add i64 %4, 6
  %18 = inttoptr i64 %17 to i16*
  %19 = load i16, i16* %18
  %20 = zext i16 %16 to i64
  %21 = zext i16 %13 to i64
  %22 = sub i16 %6, %10
  %23 = sub i16 %8, %19
  %24 = shl nuw nsw i64 %20, 32
  %25 = sub i64 %3, %24
  %26 = shl nuw nsw i64 %21, 16
  %27 = sub i64 %3, %26
  %28 = lshr i64 %27, 16
  %29 = trunc i64 %28 to i16
  %30 = lshr i64 %25, 32
  %31 = trunc i64 %30 to i16
  %32 = bitcast i64* %2 to [4 x i16]*
  %33 = bitcast i64* %2 to i16*
  store i16 %22, i16* %33, align 1
  %34 = getelementptr inbounds [4 x i16], [4 x i16]* %32, i64 0, i64 1
  store i16 %29, i16* %34, align 1
  %35 = getelementptr inbounds [4 x i16], [4 x i16]* %32, i64 0, i64 2
  store i16 %31, i16* %35, align 1
  %36 = getelementptr inbounds [4 x i16], [4 x i16]* %32, i64 0, i64 3
  store i16 %23, i16* %36, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L5PSUBWI3VnWI8vec128_tE2VnIS2_ES5_EEP6MemoryS7_R5StateT_T0_T1_(%struct.Memory* readnone returned, %struct.State* nocapture readnone dereferenceable(3376), i8* nocapture, i8* nocapture readonly, i8* nocapture readonly)  {
  %6 = bitcast i8* %3 to i64*
  %7 = load i64, i64* %6, align 1
  %8 = getelementptr inbounds i8, i8* %3, i64 8
  %9 = bitcast i8* %8 to i64*
  %10 = load i64, i64* %9, align 1
  %11 = lshr i64 %7, 48
  %12 = bitcast i8* %4 to i64*
  %13 = load i64, i64* %12, align 1
  %14 = getelementptr inbounds i8, i8* %4, i64 8
  %15 = bitcast i8* %14 to i64*
  %16 = load i64, i64* %15, align 1
  %17 = and i64 %13, 4294901760
  %18 = and i64 %13, 281470681743360
  %19 = lshr i64 %13, 48
  %20 = sub i64 %7, %13
  %21 = sub nsw i64 %11, %19
  %22 = sub i64 %10, %16
  %23 = and i64 %16, 4294901760
  %24 = sub i64 %10, %23
  %25 = and i64 %16, 281470681743360
  %26 = sub i64 %10, %25
  %27 = lshr i64 %10, 48
  %28 = lshr i64 %16, 48
  %29 = sub nsw i64 %27, %28
  %30 = sub i64 %7, %18
  %31 = sub i64 %7, %17
  %32 = trunc i64 %20 to i16
  %33 = lshr i64 %31, 16
  %34 = trunc i64 %33 to i16
  %35 = lshr i64 %30, 32
  %36 = trunc i64 %35 to i16
  %37 = trunc i64 %21 to i16
  %38 = bitcast i8* %2 to i16*
  store i16 %32, i16* %38, align 1
  %39 = getelementptr inbounds i8, i8* %2, i64 2
  %40 = bitcast i8* %39 to i16*
  store i16 %34, i16* %40, align 1
  %41 = getelementptr inbounds i8, i8* %2, i64 4
  %42 = bitcast i8* %41 to i16*
  store i16 %36, i16* %42, align 1
  %43 = getelementptr inbounds i8, i8* %2, i64 6
  %44 = bitcast i8* %43 to i16*
  store i16 %37, i16* %44, align 1
  %45 = trunc i64 %22 to i16
  %46 = getelementptr inbounds i8, i8* %2, i64 8
  %47 = bitcast i8* %46 to i16*
  store i16 %45, i16* %47, align 1
  %48 = lshr i64 %24, 16
  %49 = trunc i64 %48 to i16
  %50 = getelementptr inbounds i8, i8* %2, i64 10
  %51 = bitcast i8* %50 to i16*
  store i16 %49, i16* %51, align 1
  %52 = lshr i64 %26, 32
  %53 = trunc i64 %52 to i16
  %54 = getelementptr inbounds i8, i8* %2, i64 12
  %55 = bitcast i8* %54 to i16*
  store i16 %53, i16* %55, align 1
  %56 = trunc i64 %29 to i16
  %57 = getelementptr inbounds i8, i8* %2, i64 14
  %58 = bitcast i8* %57 to i16*
  store i16 %56, i16* %58, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L5PSUBWI3VnWI8vec128_tE2VnIS2_E3MVnIS2_EEEP6MemoryS9_R5StateT_T0_T1_(%struct.Memory* returned, %struct.State* nocapture readnone dereferenceable(3376), i8* nocapture, i8* nocapture readonly, i64)  {
  %6 = bitcast i8* %3 to i64*
  %7 = load i64, i64* %6, align 1
  %8 = getelementptr inbounds i8, i8* %3, i64 8
  %9 = bitcast i8* %8 to i64*
  %10 = load i64, i64* %9, align 1
  %11 = trunc i64 %7 to i16
  %12 = lshr i64 %7, 48
  %13 = trunc i64 %12 to i16
  %14 = inttoptr i64 %4 to i16*
  %15 = load i16, i16* %14
  %16 = add i64 %4, 2
  %17 = inttoptr i64 %16 to i16*
  %18 = load i16, i16* %17
  %19 = add i64 %4, 4
  %20 = inttoptr i64 %19 to i16*
  %21 = load i16, i16* %20
  %22 = add i64 %4, 6
  %23 = inttoptr i64 %22 to i16*
  %24 = load i16, i16* %23
  %25 = add i64 %4, 8
  %26 = inttoptr i64 %25 to i16*
  %27 = load i16, i16* %26
  %28 = add i64 %4, 10
  %29 = inttoptr i64 %28 to i16*
  %30 = load i16, i16* %29
  %31 = zext i16 %30 to i64
  %32 = add i64 %4, 12
  %33 = inttoptr i64 %32 to i16*
  %34 = load i16, i16* %33
  %35 = zext i16 %34 to i64
  %36 = add i64 %4, 14
  %37 = inttoptr i64 %36 to i16*
  %38 = load i16, i16* %37
  %39 = zext i16 %21 to i64
  %40 = zext i16 %18 to i64
  %41 = sub i16 %11, %15
  %42 = sub i16 %13, %24
  %43 = trunc i64 %10 to i16
  %44 = sub i16 %43, %27
  %45 = shl nuw nsw i64 %31, 16
  %46 = sub i64 %10, %45
  %47 = shl nuw nsw i64 %35, 32
  %48 = sub i64 %10, %47
  %49 = lshr i64 %10, 48
  %50 = trunc i64 %49 to i16
  %51 = sub i16 %50, %38
  %52 = shl nuw nsw i64 %39, 32
  %53 = sub i64 %7, %52
  %54 = shl nuw nsw i64 %40, 16
  %55 = sub i64 %7, %54
  %56 = lshr i64 %55, 16
  %57 = trunc i64 %56 to i16
  %58 = lshr i64 %53, 32
  %59 = trunc i64 %58 to i16
  %60 = bitcast i8* %2 to i16*
  store i16 %41, i16* %60, align 1
  %61 = getelementptr inbounds i8, i8* %2, i64 2
  %62 = bitcast i8* %61 to i16*
  store i16 %57, i16* %62, align 1
  %63 = getelementptr inbounds i8, i8* %2, i64 4
  %64 = bitcast i8* %63 to i16*
  store i16 %59, i16* %64, align 1
  %65 = getelementptr inbounds i8, i8* %2, i64 6
  %66 = bitcast i8* %65 to i16*
  store i16 %42, i16* %66, align 1
  %67 = getelementptr inbounds i8, i8* %2, i64 8
  %68 = bitcast i8* %67 to i16*
  store i16 %44, i16* %68, align 1
  %69 = lshr i64 %46, 16
  %70 = trunc i64 %69 to i16
  %71 = getelementptr inbounds i8, i8* %2, i64 10
  %72 = bitcast i8* %71 to i16*
  store i16 %70, i16* %72, align 1
  %73 = lshr i64 %48, 32
  %74 = trunc i64 %73 to i16
  %75 = getelementptr inbounds i8, i8* %2, i64 12
  %76 = bitcast i8* %75 to i16*
  store i16 %74, i16* %76, align 1
  %77 = getelementptr inbounds i8, i8* %2, i64 14
  %78 = bitcast i8* %77 to i16*
  store i16 %51, i16* %78, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L5PSUBDI4RVnWI7vec64_tE3RVnIS2_ES5_EEP6MemoryS7_R5StateT_T0_T1_(%struct.Memory* readnone returned, %struct.State* nocapture readnone dereferenceable(3376), i64* nocapture, i64, i64)  {
  %6 = lshr i64 %3, 32
  %7 = lshr i64 %4, 32
  %8 = sub i64 %3, %4
  %9 = sub nsw i64 %6, %7
  %10 = trunc i64 %8 to i32
  %11 = trunc i64 %9 to i32
  %12 = bitcast i64* %2 to [2 x i32]*
  %13 = bitcast i64* %2 to i32*
  store i32 %10, i32* %13, align 1
  %14 = getelementptr inbounds [2 x i32], [2 x i32]* %12, i64 0, i64 1
  store i32 %11, i32* %14, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L5PSUBDI4RVnWI7vec64_tE3RVnIS2_E3MVnIS2_EEEP6MemoryS9_R5StateT_T0_T1_(%struct.Memory* returned, %struct.State* nocapture readnone dereferenceable(3376), i64* nocapture, i64, i64)  {
  %6 = trunc i64 %3 to i32
  %7 = lshr i64 %3, 32
  %8 = trunc i64 %7 to i32
  %9 = inttoptr i64 %4 to i32*
  %10 = load i32, i32* %9
  %11 = add i64 %4, 4
  %12 = inttoptr i64 %11 to i32*
  %13 = load i32, i32* %12
  %14 = sub i32 %6, %10
  %15 = sub i32 %8, %13
  %16 = bitcast i64* %2 to [2 x i32]*
  %17 = bitcast i64* %2 to i32*
  store i32 %14, i32* %17, align 1
  %18 = getelementptr inbounds [2 x i32], [2 x i32]* %16, i64 0, i64 1
  store i32 %15, i32* %18, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L5PSUBDI3VnWI8vec128_tE2VnIS2_ES5_EEP6MemoryS7_R5StateT_T0_T1_(%struct.Memory* readnone returned, %struct.State* nocapture readnone dereferenceable(3376), i8* nocapture, i8* nocapture readonly, i8* nocapture readonly)  {
  %6 = bitcast i8* %3 to i64*
  %7 = load i64, i64* %6, align 1
  %8 = getelementptr inbounds i8, i8* %3, i64 8
  %9 = bitcast i8* %8 to i64*
  %10 = load i64, i64* %9, align 1
  %11 = lshr i64 %7, 32
  %12 = bitcast i8* %4 to i64*
  %13 = load i64, i64* %12, align 1
  %14 = getelementptr inbounds i8, i8* %4, i64 8
  %15 = bitcast i8* %14 to i64*
  %16 = load i64, i64* %15, align 1
  %17 = lshr i64 %13, 32
  %18 = sub i64 %7, %13
  %19 = sub nsw i64 %11, %17
  %20 = sub i64 %10, %16
  %21 = lshr i64 %10, 32
  %22 = lshr i64 %16, 32
  %23 = sub nsw i64 %21, %22
  %24 = trunc i64 %18 to i32
  %25 = trunc i64 %19 to i32
  %26 = bitcast i8* %2 to i32*
  store i32 %24, i32* %26, align 1
  %27 = getelementptr inbounds i8, i8* %2, i64 4
  %28 = bitcast i8* %27 to i32*
  store i32 %25, i32* %28, align 1
  %29 = trunc i64 %20 to i32
  %30 = getelementptr inbounds i8, i8* %2, i64 8
  %31 = bitcast i8* %30 to i32*
  store i32 %29, i32* %31, align 1
  %32 = trunc i64 %23 to i32
  %33 = getelementptr inbounds i8, i8* %2, i64 12
  %34 = bitcast i8* %33 to i32*
  store i32 %32, i32* %34, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L5PSUBDI3VnWI8vec128_tE2VnIS2_E3MVnIS2_EEEP6MemoryS9_R5StateT_T0_T1_(%struct.Memory* returned, %struct.State* nocapture readnone dereferenceable(3376), i8* nocapture, i8* nocapture readonly, i64)  {
  %6 = bitcast i8* %3 to i64*
  %7 = load i64, i64* %6, align 1
  %8 = getelementptr inbounds i8, i8* %3, i64 8
  %9 = bitcast i8* %8 to i64*
  %10 = load i64, i64* %9, align 1
  %11 = trunc i64 %7 to i32
  %12 = lshr i64 %7, 32
  %13 = trunc i64 %12 to i32
  %14 = inttoptr i64 %4 to i32*
  %15 = load i32, i32* %14
  %16 = add i64 %4, 4
  %17 = inttoptr i64 %16 to i32*
  %18 = load i32, i32* %17
  %19 = add i64 %4, 8
  %20 = inttoptr i64 %19 to i32*
  %21 = load i32, i32* %20
  %22 = add i64 %4, 12
  %23 = inttoptr i64 %22 to i32*
  %24 = load i32, i32* %23
  %25 = sub i32 %11, %15
  %26 = sub i32 %13, %18
  %27 = trunc i64 %10 to i32
  %28 = sub i32 %27, %21
  %29 = lshr i64 %10, 32
  %30 = trunc i64 %29 to i32
  %31 = sub i32 %30, %24
  %32 = bitcast i8* %2 to i32*
  store i32 %25, i32* %32, align 1
  %33 = getelementptr inbounds i8, i8* %2, i64 4
  %34 = bitcast i8* %33 to i32*
  store i32 %26, i32* %34, align 1
  %35 = getelementptr inbounds i8, i8* %2, i64 8
  %36 = bitcast i8* %35 to i32*
  store i32 %28, i32* %36, align 1
  %37 = getelementptr inbounds i8, i8* %2, i64 12
  %38 = bitcast i8* %37 to i32*
  store i32 %31, i32* %38, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L5PSUBQI4RVnWI7vec64_tE3RVnIS2_ES5_EEP6MemoryS7_R5StateT_T0_T1_(%struct.Memory* readnone returned, %struct.State* nocapture readnone dereferenceable(3376), i64* nocapture, i64, i64)  {
  %6 = sub nsw i64 %3, %4
  store i64 %6, i64* %2, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L5PSUBQI4RVnWI7vec64_tE3RVnIS2_E3MVnIS2_EEEP6MemoryS9_R5StateT_T0_T1_(%struct.Memory* returned, %struct.State* nocapture readnone dereferenceable(3376), i64* nocapture, i64, i64)  {
  %6 = inttoptr i64 %4 to i64*
  %7 = load i64, i64* %6
  %8 = sub nsw i64 %3, %7
  store i64 %8, i64* %2, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L5PSUBQI3VnWI8vec128_tE2VnIS2_ES5_EEP6MemoryS7_R5StateT_T0_T1_(%struct.Memory* readnone returned, %struct.State* nocapture readnone dereferenceable(3376), i8* nocapture, i8* nocapture readonly, i8* nocapture readonly)  {
  %6 = bitcast i8* %3 to <2 x i64>*
  %7 = load <2 x i64>, <2 x i64>* %6, align 1
  %8 = bitcast i8* %4 to <2 x i64>*
  %9 = load <2 x i64>, <2 x i64>* %8, align 1
  %10 = sub nsw <2 x i64> %7, %9
  %11 = bitcast i8* %2 to <2 x i64>*
  store <2 x i64> %10, <2 x i64>* %11, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L5PSUBQI3VnWI8vec128_tE2VnIS2_E3MVnIS2_EEEP6MemoryS9_R5StateT_T0_T1_(%struct.Memory* returned, %struct.State* nocapture readnone dereferenceable(3376), i8* nocapture, i8* nocapture readonly, i64)  {
  %6 = bitcast i8* %3 to <2 x i64>*
  %7 = load <2 x i64>, <2 x i64>* %6, align 1
  %8 = inttoptr i64 %4 to i64*
  %9 = load i64, i64* %8
  %10 = add i64 %4, 8
  %11 = inttoptr i64 %10 to i64*
  %12 = load i64, i64* %11
  %13 = insertelement <2 x i64> undef, i64 %9, i32 0
  %14 = insertelement <2 x i64> %13, i64 %12, i32 1
  %15 = sub nsw <2 x i64> %7, %14
  %16 = bitcast i8* %2 to <2 x i64>*
  store <2 x i64> %15, <2 x i64>* %16, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L7PSUBUSBI4RVnWI7vec64_tE3RVnIS2_ES5_EEP6MemoryS7_R5StateT_T0_T1_(%struct.Memory* readnone returned, %struct.State* nocapture readnone dereferenceable(3376), i64* nocapture, i64, i64)  {
  %6 = alloca i64, align 8
  %7 = alloca i64, align 8
  %8 = bitcast i64* %7 to %struct.uint8v8_t*
  %9 = alloca i64, align 8
  %10 = bitcast i64* %9 to %struct.uint8v8_t*
  %11 = bitcast i64* %7 to i8*
  call void @llvm.lifetime.start(i64 8, i8* nonnull %11) 
  store i64 %3, i64* %7, align 8
  %12 = bitcast i64* %9 to i8*
  call void @llvm.lifetime.start(i64 8, i8* nonnull %12) 
  store i64 %4, i64* %9, align 8
  %13 = bitcast i64* %6 to i8*
  %14 = bitcast i64* %6 to [8 x i8]*
  %15 = trunc i64 %3 to i8
  %16 = trunc i64 %4 to i8
  %17 = sub i8 %15, %16
  %18 = icmp ugt i8 %15, %16
  %19 = select i1 %18, i8 %17, i8 0
  call void @llvm.lifetime.start(i64 8, i8* nonnull %13)
  store i64 0, i64* %6, align 8
  %20 = bitcast i64* %6 to i8*
  store i8 %19, i8* %20, align 8
  %21 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %13)
  %22 = lshr i64 %3, 8
  %23 = trunc i64 %22 to i8
  %24 = lshr i64 %4, 8
  %25 = trunc i64 %24 to i8
  %26 = sub i8 %23, %25
  %27 = icmp ugt i8 %23, %25
  %28 = select i1 %27, i8 %26, i8 0
  call void @llvm.lifetime.start(i64 8, i8* nonnull %13)
  store i64 %21, i64* %6, align 8
  %29 = getelementptr inbounds [8 x i8], [8 x i8]* %14, i64 0, i64 1
  store i8 %28, i8* %29, align 1
  %30 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %13)
  %31 = lshr i64 %3, 16
  %32 = trunc i64 %31 to i8
  %33 = lshr i64 %4, 16
  %34 = trunc i64 %33 to i8
  %35 = sub i8 %32, %34
  %36 = icmp ugt i8 %32, %34
  %37 = select i1 %36, i8 %35, i8 0
  call void @llvm.lifetime.start(i64 8, i8* nonnull %13)
  store i64 %30, i64* %6, align 8
  %38 = getelementptr inbounds [8 x i8], [8 x i8]* %14, i64 0, i64 2
  store i8 %37, i8* %38, align 2
  %39 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %13)
  %40 = getelementptr inbounds %struct.uint8v8_t, %struct.uint8v8_t* %8, i64 0, i32 0, i64 3
  %41 = load i8, i8* %40, align 1
  %42 = getelementptr inbounds %struct.uint8v8_t, %struct.uint8v8_t* %10, i64 0, i32 0, i64 3
  %43 = load i8, i8* %42, align 1
  %44 = sub i8 %41, %43
  %45 = icmp ugt i8 %41, %43
  %46 = select i1 %45, i8 %44, i8 0
  call void @llvm.lifetime.start(i64 8, i8* nonnull %13)
  store i64 %39, i64* %6, align 8
  %47 = getelementptr inbounds [8 x i8], [8 x i8]* %14, i64 0, i64 3
  store i8 %46, i8* %47, align 1
  %48 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %13)
  %49 = getelementptr inbounds %struct.uint8v8_t, %struct.uint8v8_t* %8, i64 0, i32 0, i64 4
  %50 = load i8, i8* %49, align 4
  %51 = getelementptr inbounds %struct.uint8v8_t, %struct.uint8v8_t* %10, i64 0, i32 0, i64 4
  %52 = load i8, i8* %51, align 4
  %53 = sub i8 %50, %52
  %54 = icmp ugt i8 %50, %52
  %55 = select i1 %54, i8 %53, i8 0
  call void @llvm.lifetime.start(i64 8, i8* nonnull %13)
  store i64 %48, i64* %6, align 8
  %56 = getelementptr inbounds [8 x i8], [8 x i8]* %14, i64 0, i64 4
  store i8 %55, i8* %56, align 4
  %57 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %13)
  %58 = getelementptr inbounds %struct.uint8v8_t, %struct.uint8v8_t* %8, i64 0, i32 0, i64 5
  %59 = load i8, i8* %58, align 1
  %60 = getelementptr inbounds %struct.uint8v8_t, %struct.uint8v8_t* %10, i64 0, i32 0, i64 5
  %61 = load i8, i8* %60, align 1
  %62 = sub i8 %59, %61
  %63 = icmp ugt i8 %59, %61
  %64 = select i1 %63, i8 %62, i8 0
  call void @llvm.lifetime.start(i64 8, i8* nonnull %13)
  store i64 %57, i64* %6, align 8
  %65 = getelementptr inbounds [8 x i8], [8 x i8]* %14, i64 0, i64 5
  store i8 %64, i8* %65, align 1
  %66 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %13)
  %67 = getelementptr inbounds %struct.uint8v8_t, %struct.uint8v8_t* %8, i64 0, i32 0, i64 6
  %68 = load i8, i8* %67, align 2
  %69 = getelementptr inbounds %struct.uint8v8_t, %struct.uint8v8_t* %10, i64 0, i32 0, i64 6
  %70 = load i8, i8* %69, align 2
  %71 = sub i8 %68, %70
  %72 = icmp ugt i8 %68, %70
  %73 = select i1 %72, i8 %71, i8 0
  call void @llvm.lifetime.start(i64 8, i8* nonnull %13)
  store i64 %66, i64* %6, align 8
  %74 = getelementptr inbounds [8 x i8], [8 x i8]* %14, i64 0, i64 6
  store i8 %73, i8* %74, align 2
  %75 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %13)
  %76 = getelementptr inbounds %struct.uint8v8_t, %struct.uint8v8_t* %8, i64 0, i32 0, i64 7
  %77 = load i8, i8* %76, align 1
  %78 = getelementptr inbounds %struct.uint8v8_t, %struct.uint8v8_t* %10, i64 0, i32 0, i64 7
  %79 = load i8, i8* %78, align 1
  %80 = sub i8 %77, %79
  %81 = icmp ugt i8 %77, %79
  %82 = select i1 %81, i8 %80, i8 0
  call void @llvm.lifetime.start(i64 8, i8* nonnull %13)
  store i64 %75, i64* %6, align 8
  %83 = getelementptr inbounds [8 x i8], [8 x i8]* %14, i64 0, i64 7
  store i8 %82, i8* %83, align 1
  %84 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %13)
  %85 = lshr i64 %84, 8
  %86 = lshr i64 %84, 16
  %87 = lshr i64 %84, 24
  %88 = lshr i64 %84, 32
  %89 = lshr i64 %84, 40
  %90 = lshr i64 %84, 48
  %91 = lshr i64 %84, 56
  %92 = trunc i64 %84 to i8
  %93 = trunc i64 %85 to i8
  %94 = trunc i64 %86 to i8
  %95 = trunc i64 %87 to i8
  %96 = trunc i64 %88 to i8
  %97 = trunc i64 %89 to i8
  %98 = trunc i64 %90 to i8
  %99 = trunc i64 %91 to i8
  %100 = bitcast i64* %2 to [8 x i8]*
  %101 = bitcast i64* %2 to i8*
  store i8 %92, i8* %101, align 1
  %102 = getelementptr inbounds [8 x i8], [8 x i8]* %100, i64 0, i64 1
  store i8 %93, i8* %102, align 1
  %103 = getelementptr inbounds [8 x i8], [8 x i8]* %100, i64 0, i64 2
  store i8 %94, i8* %103, align 1
  %104 = getelementptr inbounds [8 x i8], [8 x i8]* %100, i64 0, i64 3
  store i8 %95, i8* %104, align 1
  %105 = getelementptr inbounds [8 x i8], [8 x i8]* %100, i64 0, i64 4
  store i8 %96, i8* %105, align 1
  %106 = getelementptr inbounds [8 x i8], [8 x i8]* %100, i64 0, i64 5
  store i8 %97, i8* %106, align 1
  %107 = getelementptr inbounds [8 x i8], [8 x i8]* %100, i64 0, i64 6
  store i8 %98, i8* %107, align 1
  %108 = getelementptr inbounds [8 x i8], [8 x i8]* %100, i64 0, i64 7
  store i8 %99, i8* %108, align 1
  call void @llvm.lifetime.end(i64 8, i8* nonnull %12) 
  call void @llvm.lifetime.end(i64 8, i8* nonnull %11) 
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L7PSUBUSBI4RVnWI7vec64_tE3RVnIS2_E3MVnIS2_EEEP6MemoryS9_R5StateT_T0_T1_(%struct.Memory* returned, %struct.State* nocapture readnone dereferenceable(3376), i64* nocapture, i64, i64)  {
  %6 = alloca i64, align 8
  %7 = alloca i64, align 8
  %8 = bitcast i64* %7 to %struct.uint8v8_t*
  %9 = alloca i64, align 8
  %10 = bitcast i64* %9 to %struct.uint8v8_t*
  %11 = bitcast i64* %7 to i8*
  call void @llvm.lifetime.start(i64 8, i8* nonnull %11) 
  store i64 %3, i64* %7, align 8
  %12 = bitcast i64* %9 to i8*
  call void @llvm.lifetime.start(i64 8, i8* nonnull %12) 
  %13 = inttoptr i64 %4 to i8*
  %14 = load i8, i8* %13
  %15 = add i64 %4, 1
  %16 = inttoptr i64 %15 to i8*
  %17 = load i8, i8* %16
  %18 = add i64 %4, 2
  %19 = inttoptr i64 %18 to i8*
  %20 = load i8, i8* %19
  %21 = add i64 %4, 3
  %22 = inttoptr i64 %21 to i8*
  %23 = load i8, i8* %22
  %24 = add i64 %4, 4
  %25 = inttoptr i64 %24 to i8*
  %26 = load i8, i8* %25
  %27 = add i64 %4, 5
  %28 = inttoptr i64 %27 to i8*
  %29 = load i8, i8* %28
  %30 = add i64 %4, 6
  %31 = inttoptr i64 %30 to i8*
  %32 = load i8, i8* %31
  %33 = add i64 %4, 7
  %34 = inttoptr i64 %33 to i8*
  %35 = load i8, i8* %34
  %36 = zext i8 %35 to i64
  %37 = shl nuw i64 %36, 56
  %38 = zext i8 %32 to i64
  %39 = shl nuw nsw i64 %38, 48
  %40 = zext i8 %29 to i64
  %41 = shl nuw nsw i64 %40, 40
  %42 = zext i8 %26 to i64
  %43 = shl nuw nsw i64 %42, 32
  %44 = zext i8 %23 to i64
  %45 = shl nuw nsw i64 %44, 24
  %46 = zext i8 %20 to i64
  %47 = shl nuw nsw i64 %46, 16
  %48 = zext i8 %17 to i64
  %49 = shl nuw nsw i64 %48, 8
  %50 = zext i8 %14 to i64
  %51 = or i64 %49, %50
  %52 = or i64 %51, %47
  %53 = or i64 %52, %45
  %54 = or i64 %53, %43
  %55 = or i64 %54, %41
  %56 = or i64 %55, %39
  %57 = or i64 %56, %37
  store i64 %57, i64* %9, align 8
  %58 = bitcast i64* %6 to i8*
  %59 = bitcast i64* %6 to [8 x i8]*
  %60 = trunc i64 %3 to i8
  %61 = sub i8 %60, %14
  %62 = icmp ugt i8 %60, %14
  %63 = select i1 %62, i8 %61, i8 0
  call void @llvm.lifetime.start(i64 8, i8* nonnull %58)
  store i64 0, i64* %6, align 8
  %64 = bitcast i64* %6 to i8*
  store i8 %63, i8* %64, align 8
  %65 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %58)
  %66 = lshr i64 %3, 8
  %67 = trunc i64 %66 to i8
  %68 = sub i8 %67, %17
  %69 = icmp ugt i8 %67, %17
  %70 = select i1 %69, i8 %68, i8 0
  call void @llvm.lifetime.start(i64 8, i8* nonnull %58)
  store i64 %65, i64* %6, align 8
  %71 = getelementptr inbounds [8 x i8], [8 x i8]* %59, i64 0, i64 1
  store i8 %70, i8* %71, align 1
  %72 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %58)
  %73 = getelementptr inbounds %struct.uint8v8_t, %struct.uint8v8_t* %8, i64 0, i32 0, i64 2
  %74 = load i8, i8* %73, align 2
  %75 = sub i8 %74, %20
  %76 = icmp ugt i8 %74, %20
  %77 = select i1 %76, i8 %75, i8 0
  call void @llvm.lifetime.start(i64 8, i8* nonnull %58)
  store i64 %72, i64* %6, align 8
  %78 = getelementptr inbounds [8 x i8], [8 x i8]* %59, i64 0, i64 2
  store i8 %77, i8* %78, align 2
  %79 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %58)
  %80 = getelementptr inbounds %struct.uint8v8_t, %struct.uint8v8_t* %8, i64 0, i32 0, i64 3
  %81 = load i8, i8* %80, align 1
  %82 = getelementptr inbounds %struct.uint8v8_t, %struct.uint8v8_t* %10, i64 0, i32 0, i64 3
  %83 = load i8, i8* %82, align 1
  %84 = sub i8 %81, %83
  %85 = icmp ugt i8 %81, %83
  %86 = select i1 %85, i8 %84, i8 0
  call void @llvm.lifetime.start(i64 8, i8* nonnull %58)
  store i64 %79, i64* %6, align 8
  %87 = getelementptr inbounds [8 x i8], [8 x i8]* %59, i64 0, i64 3
  store i8 %86, i8* %87, align 1
  %88 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %58)
  %89 = getelementptr inbounds %struct.uint8v8_t, %struct.uint8v8_t* %8, i64 0, i32 0, i64 4
  %90 = load i8, i8* %89, align 4
  %91 = getelementptr inbounds %struct.uint8v8_t, %struct.uint8v8_t* %10, i64 0, i32 0, i64 4
  %92 = load i8, i8* %91, align 4
  %93 = sub i8 %90, %92
  %94 = icmp ugt i8 %90, %92
  %95 = select i1 %94, i8 %93, i8 0
  call void @llvm.lifetime.start(i64 8, i8* nonnull %58)
  store i64 %88, i64* %6, align 8
  %96 = getelementptr inbounds [8 x i8], [8 x i8]* %59, i64 0, i64 4
  store i8 %95, i8* %96, align 4
  %97 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %58)
  %98 = getelementptr inbounds %struct.uint8v8_t, %struct.uint8v8_t* %8, i64 0, i32 0, i64 5
  %99 = load i8, i8* %98, align 1
  %100 = getelementptr inbounds %struct.uint8v8_t, %struct.uint8v8_t* %10, i64 0, i32 0, i64 5
  %101 = load i8, i8* %100, align 1
  %102 = sub i8 %99, %101
  %103 = icmp ugt i8 %99, %101
  %104 = select i1 %103, i8 %102, i8 0
  call void @llvm.lifetime.start(i64 8, i8* nonnull %58)
  store i64 %97, i64* %6, align 8
  %105 = getelementptr inbounds [8 x i8], [8 x i8]* %59, i64 0, i64 5
  store i8 %104, i8* %105, align 1
  %106 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %58)
  %107 = getelementptr inbounds %struct.uint8v8_t, %struct.uint8v8_t* %8, i64 0, i32 0, i64 6
  %108 = load i8, i8* %107, align 2
  %109 = getelementptr inbounds %struct.uint8v8_t, %struct.uint8v8_t* %10, i64 0, i32 0, i64 6
  %110 = load i8, i8* %109, align 2
  %111 = sub i8 %108, %110
  %112 = icmp ugt i8 %108, %110
  %113 = select i1 %112, i8 %111, i8 0
  call void @llvm.lifetime.start(i64 8, i8* nonnull %58)
  store i64 %106, i64* %6, align 8
  %114 = getelementptr inbounds [8 x i8], [8 x i8]* %59, i64 0, i64 6
  store i8 %113, i8* %114, align 2
  %115 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %58)
  %116 = getelementptr inbounds %struct.uint8v8_t, %struct.uint8v8_t* %8, i64 0, i32 0, i64 7
  %117 = load i8, i8* %116, align 1
  %118 = getelementptr inbounds %struct.uint8v8_t, %struct.uint8v8_t* %10, i64 0, i32 0, i64 7
  %119 = load i8, i8* %118, align 1
  %120 = sub i8 %117, %119
  %121 = icmp ugt i8 %117, %119
  %122 = select i1 %121, i8 %120, i8 0
  call void @llvm.lifetime.start(i64 8, i8* nonnull %58)
  store i64 %115, i64* %6, align 8
  %123 = getelementptr inbounds [8 x i8], [8 x i8]* %59, i64 0, i64 7
  store i8 %122, i8* %123, align 1
  %124 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %58)
  %125 = lshr i64 %124, 8
  %126 = lshr i64 %124, 16
  %127 = lshr i64 %124, 24
  %128 = lshr i64 %124, 32
  %129 = lshr i64 %124, 40
  %130 = lshr i64 %124, 48
  %131 = lshr i64 %124, 56
  %132 = trunc i64 %124 to i8
  %133 = trunc i64 %125 to i8
  %134 = trunc i64 %126 to i8
  %135 = trunc i64 %127 to i8
  %136 = trunc i64 %128 to i8
  %137 = trunc i64 %129 to i8
  %138 = trunc i64 %130 to i8
  %139 = trunc i64 %131 to i8
  %140 = bitcast i64* %2 to [8 x i8]*
  %141 = bitcast i64* %2 to i8*
  store i8 %132, i8* %141, align 1
  %142 = getelementptr inbounds [8 x i8], [8 x i8]* %140, i64 0, i64 1
  store i8 %133, i8* %142, align 1
  %143 = getelementptr inbounds [8 x i8], [8 x i8]* %140, i64 0, i64 2
  store i8 %134, i8* %143, align 1
  %144 = getelementptr inbounds [8 x i8], [8 x i8]* %140, i64 0, i64 3
  store i8 %135, i8* %144, align 1
  %145 = getelementptr inbounds [8 x i8], [8 x i8]* %140, i64 0, i64 4
  store i8 %136, i8* %145, align 1
  %146 = getelementptr inbounds [8 x i8], [8 x i8]* %140, i64 0, i64 5
  store i8 %137, i8* %146, align 1
  %147 = getelementptr inbounds [8 x i8], [8 x i8]* %140, i64 0, i64 6
  store i8 %138, i8* %147, align 1
  %148 = getelementptr inbounds [8 x i8], [8 x i8]* %140, i64 0, i64 7
  store i8 %139, i8* %148, align 1
  call void @llvm.lifetime.end(i64 8, i8* nonnull %12) 
  call void @llvm.lifetime.end(i64 8, i8* nonnull %11) 
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L7PSUBUSBI3VnWI8vec128_tE2VnIS2_ES5_EEP6MemoryS7_R5StateT_T0_T1_(%struct.Memory* readnone returned, %struct.State* nocapture readnone dereferenceable(3376), i8* nocapture, i8* nocapture readonly, i8* nocapture readonly)  {
  %6 = alloca <2 x i64>, align 16
  %7 = bitcast <2 x i64>* %6 to { i64, i64 }*
  %8 = alloca <2 x i64>, align 16
  %9 = bitcast <2 x i64>* %8 to { i64, i64 }*
  %10 = bitcast <2 x i64>* %8 to %struct.uint8v16_t*
  %11 = alloca <2 x i64>, align 16
  %12 = bitcast <2 x i64>* %11 to { i64, i64 }*
  %13 = bitcast <2 x i64>* %11 to %struct.uint8v16_t*
  %14 = bitcast <2 x i64>* %8 to i8*
  call void @llvm.lifetime.start(i64 16, i8* nonnull %14) 
  %15 = bitcast i8* %3 to <2 x i64>*
  %16 = load <2 x i64>, <2 x i64>* %15, align 1
  store <2 x i64> %16, <2 x i64>* %8, align 16
  %17 = bitcast <2 x i64>* %11 to i8*
  call void @llvm.lifetime.start(i64 16, i8* nonnull %17) 
  %18 = bitcast i8* %4 to <2 x i64>*
  %19 = load <2 x i64>, <2 x i64>* %18, align 1
  store <2 x i64> %19, <2 x i64>* %11, align 16
  %20 = bitcast <2 x i64>* %6 to i8*
  %21 = getelementptr inbounds <2 x i64>, <2 x i64>* %6, i64 0, i64 0
  %22 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %7, i64 0, i32 1
  %23 = bitcast <2 x i64>* %6 to [16 x i8]*
  %24 = extractelement <2 x i64> %16, i32 0
  %25 = trunc i64 %24 to i8
  %26 = extractelement <2 x i64> %19, i32 0
  %27 = trunc i64 %26 to i8
  %28 = sub i8 %25, %27
  %29 = icmp ugt i8 %25, %27
  %30 = select i1 %29, i8 %28, i8 0
  call void @llvm.lifetime.start(i64 16, i8* nonnull %20)
  store <2 x i64> zeroinitializer, <2 x i64>* %6, align 16
  %31 = bitcast <2 x i64>* %6 to i8*
  store i8 %30, i8* %31, align 16
  %32 = load i64, i64* %21, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %20)
  %33 = lshr i64 %24, 8
  %34 = trunc i64 %33 to i8
  %35 = lshr i64 %26, 8
  %36 = trunc i64 %35 to i8
  %37 = sub i8 %34, %36
  %38 = icmp ugt i8 %34, %36
  %39 = select i1 %38, i8 %37, i8 0
  call void @llvm.lifetime.start(i64 16, i8* nonnull %20)
  store i64 %32, i64* %21, align 16
  store i64 0, i64* %22, align 8
  %40 = getelementptr inbounds [16 x i8], [16 x i8]* %23, i64 0, i64 1
  store i8 %39, i8* %40, align 1
  %41 = load i64, i64* %21, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %20)
  %42 = lshr i64 %24, 16
  %43 = trunc i64 %42 to i8
  %44 = lshr i64 %26, 16
  %45 = trunc i64 %44 to i8
  %46 = sub i8 %43, %45
  %47 = icmp ugt i8 %43, %45
  %48 = select i1 %47, i8 %46, i8 0
  call void @llvm.lifetime.start(i64 16, i8* nonnull %20)
  store i64 %41, i64* %21, align 16
  store i64 0, i64* %22, align 8
  %49 = getelementptr inbounds [16 x i8], [16 x i8]* %23, i64 0, i64 2
  store i8 %48, i8* %49, align 2
  %50 = load i64, i64* %21, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %20)
  %51 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %10, i64 0, i32 0, i64 3
  %52 = load i8, i8* %51, align 1
  %53 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %13, i64 0, i32 0, i64 3
  %54 = load i8, i8* %53, align 1
  %55 = sub i8 %52, %54
  %56 = icmp ugt i8 %52, %54
  %57 = select i1 %56, i8 %55, i8 0
  call void @llvm.lifetime.start(i64 16, i8* nonnull %20)
  store i64 %50, i64* %21, align 16
  store i64 0, i64* %22, align 8
  %58 = getelementptr inbounds [16 x i8], [16 x i8]* %23, i64 0, i64 3
  store i8 %57, i8* %58, align 1
  %59 = load i64, i64* %21, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %20)
  %60 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %10, i64 0, i32 0, i64 4
  %61 = load i8, i8* %60, align 4
  %62 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %13, i64 0, i32 0, i64 4
  %63 = load i8, i8* %62, align 4
  %64 = sub i8 %61, %63
  %65 = icmp ugt i8 %61, %63
  %66 = select i1 %65, i8 %64, i8 0
  call void @llvm.lifetime.start(i64 16, i8* nonnull %20)
  store i64 %59, i64* %21, align 16
  store i64 0, i64* %22, align 8
  %67 = getelementptr inbounds [16 x i8], [16 x i8]* %23, i64 0, i64 4
  store i8 %66, i8* %67, align 4
  %68 = load i64, i64* %21, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %20)
  %69 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %10, i64 0, i32 0, i64 5
  %70 = load i8, i8* %69, align 1
  %71 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %13, i64 0, i32 0, i64 5
  %72 = load i8, i8* %71, align 1
  %73 = sub i8 %70, %72
  %74 = icmp ugt i8 %70, %72
  %75 = select i1 %74, i8 %73, i8 0
  call void @llvm.lifetime.start(i64 16, i8* nonnull %20)
  store i64 %68, i64* %21, align 16
  store i64 0, i64* %22, align 8
  %76 = getelementptr inbounds [16 x i8], [16 x i8]* %23, i64 0, i64 5
  store i8 %75, i8* %76, align 1
  %77 = load i64, i64* %21, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %20)
  %78 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %10, i64 0, i32 0, i64 6
  %79 = load i8, i8* %78, align 2
  %80 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %13, i64 0, i32 0, i64 6
  %81 = load i8, i8* %80, align 2
  %82 = sub i8 %79, %81
  %83 = icmp ugt i8 %79, %81
  %84 = select i1 %83, i8 %82, i8 0
  call void @llvm.lifetime.start(i64 16, i8* nonnull %20)
  store i64 %77, i64* %21, align 16
  store i64 0, i64* %22, align 8
  %85 = getelementptr inbounds [16 x i8], [16 x i8]* %23, i64 0, i64 6
  store i8 %84, i8* %85, align 2
  %86 = load i64, i64* %21, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %20)
  %87 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %10, i64 0, i32 0, i64 7
  %88 = load i8, i8* %87, align 1
  %89 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %13, i64 0, i32 0, i64 7
  %90 = load i8, i8* %89, align 1
  %91 = sub i8 %88, %90
  %92 = icmp ugt i8 %88, %90
  %93 = select i1 %92, i8 %91, i8 0
  call void @llvm.lifetime.start(i64 16, i8* nonnull %20)
  store i64 %86, i64* %21, align 16
  store i64 0, i64* %22, align 8
  %94 = getelementptr inbounds [16 x i8], [16 x i8]* %23, i64 0, i64 7
  store i8 %93, i8* %94, align 1
  %95 = load i64, i64* %21, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %20)
  %96 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %9, i64 0, i32 1
  %97 = bitcast i64* %96 to i8*
  %98 = load i8, i8* %97, align 8
  %99 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %12, i64 0, i32 1
  %100 = bitcast i64* %99 to i8*
  %101 = load i8, i8* %100, align 8
  %102 = sub i8 %98, %101
  %103 = icmp ugt i8 %98, %101
  %104 = select i1 %103, i8 %102, i8 0
  call void @llvm.lifetime.start(i64 16, i8* nonnull %20)
  store i64 %95, i64* %21, align 16
  store i64 0, i64* %22, align 8
  %105 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %7, i64 0, i32 1
  %106 = bitcast i64* %105 to i8*
  store i8 %104, i8* %106, align 8
  %107 = load i64, i64* %22, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %20)
  %108 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %10, i64 0, i32 0, i64 9
  %109 = load i8, i8* %108, align 1
  %110 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %13, i64 0, i32 0, i64 9
  %111 = load i8, i8* %110, align 1
  %112 = sub i8 %109, %111
  %113 = icmp ugt i8 %109, %111
  %114 = select i1 %113, i8 %112, i8 0
  call void @llvm.lifetime.start(i64 16, i8* nonnull %20)
  store i64 %95, i64* %21, align 16
  store i64 %107, i64* %22, align 8
  %115 = getelementptr inbounds [16 x i8], [16 x i8]* %23, i64 0, i64 9
  store i8 %114, i8* %115, align 1
  %116 = load i64, i64* %22, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %20)
  %117 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %10, i64 0, i32 0, i64 10
  %118 = load i8, i8* %117, align 2
  %119 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %13, i64 0, i32 0, i64 10
  %120 = load i8, i8* %119, align 2
  %121 = sub i8 %118, %120
  %122 = icmp ugt i8 %118, %120
  %123 = select i1 %122, i8 %121, i8 0
  call void @llvm.lifetime.start(i64 16, i8* nonnull %20)
  store i64 %95, i64* %21, align 16
  store i64 %116, i64* %22, align 8
  %124 = getelementptr inbounds [16 x i8], [16 x i8]* %23, i64 0, i64 10
  store i8 %123, i8* %124, align 2
  %125 = load i64, i64* %22, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %20)
  %126 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %10, i64 0, i32 0, i64 11
  %127 = load i8, i8* %126, align 1
  %128 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %13, i64 0, i32 0, i64 11
  %129 = load i8, i8* %128, align 1
  %130 = sub i8 %127, %129
  %131 = icmp ugt i8 %127, %129
  %132 = select i1 %131, i8 %130, i8 0
  call void @llvm.lifetime.start(i64 16, i8* nonnull %20)
  store i64 %95, i64* %21, align 16
  store i64 %125, i64* %22, align 8
  %133 = getelementptr inbounds [16 x i8], [16 x i8]* %23, i64 0, i64 11
  store i8 %132, i8* %133, align 1
  %134 = load i64, i64* %22, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %20)
  %135 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %10, i64 0, i32 0, i64 12
  %136 = load i8, i8* %135, align 4
  %137 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %13, i64 0, i32 0, i64 12
  %138 = load i8, i8* %137, align 4
  %139 = sub i8 %136, %138
  %140 = icmp ugt i8 %136, %138
  %141 = select i1 %140, i8 %139, i8 0
  call void @llvm.lifetime.start(i64 16, i8* nonnull %20)
  store i64 %95, i64* %21, align 16
  store i64 %134, i64* %22, align 8
  %142 = getelementptr inbounds [16 x i8], [16 x i8]* %23, i64 0, i64 12
  store i8 %141, i8* %142, align 4
  %143 = load i64, i64* %22, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %20)
  %144 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %10, i64 0, i32 0, i64 13
  %145 = load i8, i8* %144, align 1
  %146 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %13, i64 0, i32 0, i64 13
  %147 = load i8, i8* %146, align 1
  %148 = sub i8 %145, %147
  %149 = icmp ugt i8 %145, %147
  %150 = select i1 %149, i8 %148, i8 0
  call void @llvm.lifetime.start(i64 16, i8* nonnull %20)
  store i64 %95, i64* %21, align 16
  store i64 %143, i64* %22, align 8
  %151 = getelementptr inbounds [16 x i8], [16 x i8]* %23, i64 0, i64 13
  store i8 %150, i8* %151, align 1
  %152 = load i64, i64* %22, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %20)
  %153 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %10, i64 0, i32 0, i64 14
  %154 = load i8, i8* %153, align 2
  %155 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %13, i64 0, i32 0, i64 14
  %156 = load i8, i8* %155, align 2
  %157 = sub i8 %154, %156
  %158 = icmp ugt i8 %154, %156
  %159 = select i1 %158, i8 %157, i8 0
  call void @llvm.lifetime.start(i64 16, i8* nonnull %20)
  store i64 %95, i64* %21, align 16
  store i64 %152, i64* %22, align 8
  %160 = getelementptr inbounds [16 x i8], [16 x i8]* %23, i64 0, i64 14
  store i8 %159, i8* %160, align 2
  %161 = load i64, i64* %22, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %20)
  %162 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %10, i64 0, i32 0, i64 15
  %163 = load i8, i8* %162, align 1
  %164 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %13, i64 0, i32 0, i64 15
  %165 = load i8, i8* %164, align 1
  %166 = sub i8 %163, %165
  %167 = icmp ugt i8 %163, %165
  %168 = select i1 %167, i8 %166, i8 0
  call void @llvm.lifetime.start(i64 16, i8* nonnull %20)
  store i64 %95, i64* %21, align 16
  store i64 %161, i64* %22, align 8
  %169 = getelementptr inbounds [16 x i8], [16 x i8]* %23, i64 0, i64 15
  store i8 %168, i8* %169, align 1
  %170 = load i64, i64* %22, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %20)
  %171 = lshr i64 %95, 8
  %172 = lshr i64 %95, 16
  %173 = lshr i64 %95, 24
  %174 = lshr i64 %95, 32
  %175 = lshr i64 %95, 40
  %176 = lshr i64 %95, 48
  %177 = lshr i64 %95, 56
  %178 = trunc i64 %95 to i8
  %179 = trunc i64 %171 to i8
  %180 = trunc i64 %172 to i8
  %181 = trunc i64 %173 to i8
  %182 = trunc i64 %174 to i8
  %183 = trunc i64 %175 to i8
  %184 = trunc i64 %176 to i8
  %185 = trunc i64 %177 to i8
  store i8 %178, i8* %2, align 1
  %186 = getelementptr inbounds i8, i8* %2, i64 1
  store i8 %179, i8* %186, align 1
  %187 = getelementptr inbounds i8, i8* %2, i64 2
  store i8 %180, i8* %187, align 1
  %188 = getelementptr inbounds i8, i8* %2, i64 3
  store i8 %181, i8* %188, align 1
  %189 = getelementptr inbounds i8, i8* %2, i64 4
  store i8 %182, i8* %189, align 1
  %190 = getelementptr inbounds i8, i8* %2, i64 5
  store i8 %183, i8* %190, align 1
  %191 = getelementptr inbounds i8, i8* %2, i64 6
  store i8 %184, i8* %191, align 1
  %192 = getelementptr inbounds i8, i8* %2, i64 7
  store i8 %185, i8* %192, align 1
  %193 = trunc i64 %170 to i8
  %194 = getelementptr inbounds i8, i8* %2, i64 8
  store i8 %193, i8* %194, align 1
  %195 = lshr i64 %170, 8
  %196 = trunc i64 %195 to i8
  %197 = getelementptr inbounds i8, i8* %2, i64 9
  store i8 %196, i8* %197, align 1
  %198 = lshr i64 %170, 16
  %199 = trunc i64 %198 to i8
  %200 = getelementptr inbounds i8, i8* %2, i64 10
  store i8 %199, i8* %200, align 1
  %201 = lshr i64 %170, 24
  %202 = trunc i64 %201 to i8
  %203 = getelementptr inbounds i8, i8* %2, i64 11
  store i8 %202, i8* %203, align 1
  %204 = lshr i64 %170, 32
  %205 = trunc i64 %204 to i8
  %206 = getelementptr inbounds i8, i8* %2, i64 12
  store i8 %205, i8* %206, align 1
  %207 = lshr i64 %170, 40
  %208 = trunc i64 %207 to i8
  %209 = getelementptr inbounds i8, i8* %2, i64 13
  store i8 %208, i8* %209, align 1
  %210 = lshr i64 %170, 48
  %211 = trunc i64 %210 to i8
  %212 = getelementptr inbounds i8, i8* %2, i64 14
  store i8 %211, i8* %212, align 1
  %213 = lshr i64 %170, 56
  %214 = trunc i64 %213 to i8
  %215 = getelementptr inbounds i8, i8* %2, i64 15
  store i8 %214, i8* %215, align 1
  call void @llvm.lifetime.end(i64 16, i8* nonnull %17) 
  call void @llvm.lifetime.end(i64 16, i8* nonnull %14) 
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L7PSUBUSBI3VnWI8vec128_tE2VnIS2_E3MVnIS2_EEEP6MemoryS9_R5StateT_T0_T1_(%struct.Memory* returned, %struct.State* nocapture readnone dereferenceable(3376), i8* nocapture, i8* nocapture readonly, i64)  {
  %6 = alloca <2 x i64>, align 16
  %7 = bitcast <2 x i64>* %6 to { i64, i64 }*
  %8 = alloca <2 x i64>, align 16
  %9 = bitcast <2 x i64>* %8 to { i64, i64 }*
  %10 = bitcast <2 x i64>* %8 to %struct.uint8v16_t*
  %11 = alloca <2 x i64>, align 16
  %12 = bitcast <2 x i64>* %11 to { i64, i64 }*
  %13 = bitcast <2 x i64>* %11 to %struct.uint8v16_t*
  %14 = bitcast <2 x i64>* %8 to i8*
  call void @llvm.lifetime.start(i64 16, i8* nonnull %14) 
  %15 = bitcast i8* %3 to <2 x i64>*
  %16 = load <2 x i64>, <2 x i64>* %15, align 1
  store <2 x i64> %16, <2 x i64>* %8, align 16
  %17 = bitcast <2 x i64>* %11 to i8*
  call void @llvm.lifetime.start(i64 16, i8* nonnull %17) 
  %18 = inttoptr i64 %4 to i8*
  %19 = load i8, i8* %18
  %20 = add i64 %4, 1
  %21 = inttoptr i64 %20 to i8*
  %22 = load i8, i8* %21
  %23 = add i64 %4, 2
  %24 = inttoptr i64 %23 to i8*
  %25 = load i8, i8* %24
  %26 = add i64 %4, 3
  %27 = inttoptr i64 %26 to i8*
  %28 = load i8, i8* %27
  %29 = add i64 %4, 4
  %30 = inttoptr i64 %29 to i8*
  %31 = load i8, i8* %30
  %32 = add i64 %4, 5
  %33 = inttoptr i64 %32 to i8*
  %34 = load i8, i8* %33
  %35 = add i64 %4, 6
  %36 = inttoptr i64 %35 to i8*
  %37 = load i8, i8* %36
  %38 = add i64 %4, 7
  %39 = inttoptr i64 %38 to i8*
  %40 = load i8, i8* %39
  %41 = add i64 %4, 8
  %42 = inttoptr i64 %41 to i8*
  %43 = load i8, i8* %42
  %44 = add i64 %4, 9
  %45 = inttoptr i64 %44 to i8*
  %46 = load i8, i8* %45
  %47 = add i64 %4, 10
  %48 = inttoptr i64 %47 to i8*
  %49 = load i8, i8* %48
  %50 = add i64 %4, 11
  %51 = inttoptr i64 %50 to i8*
  %52 = load i8, i8* %51
  %53 = add i64 %4, 12
  %54 = inttoptr i64 %53 to i8*
  %55 = load i8, i8* %54
  %56 = add i64 %4, 13
  %57 = inttoptr i64 %56 to i8*
  %58 = load i8, i8* %57
  %59 = add i64 %4, 14
  %60 = inttoptr i64 %59 to i8*
  %61 = load i8, i8* %60
  %62 = add i64 %4, 15
  %63 = inttoptr i64 %62 to i8*
  %64 = load i8, i8* %63
  %65 = insertelement <2 x i8> undef, i8 %40, i32 0
  %66 = insertelement <2 x i8> %65, i8 %64, i32 1
  %67 = zext <2 x i8> %66 to <2 x i64>
  %68 = shl nuw <2 x i64> %67, <i64 56, i64 56>
  %69 = insertelement <2 x i8> undef, i8 %37, i32 0
  %70 = insertelement <2 x i8> %69, i8 %61, i32 1
  %71 = zext <2 x i8> %70 to <2 x i64>
  %72 = shl nuw nsw <2 x i64> %71, <i64 48, i64 48>
  %73 = insertelement <2 x i8> undef, i8 %34, i32 0
  %74 = insertelement <2 x i8> %73, i8 %58, i32 1
  %75 = zext <2 x i8> %74 to <2 x i64>
  %76 = shl nuw nsw <2 x i64> %75, <i64 40, i64 40>
  %77 = insertelement <2 x i8> undef, i8 %31, i32 0
  %78 = insertelement <2 x i8> %77, i8 %55, i32 1
  %79 = zext <2 x i8> %78 to <2 x i64>
  %80 = shl nuw nsw <2 x i64> %79, <i64 32, i64 32>
  %81 = insertelement <2 x i8> undef, i8 %28, i32 0
  %82 = insertelement <2 x i8> %81, i8 %52, i32 1
  %83 = zext <2 x i8> %82 to <2 x i64>
  %84 = shl nuw nsw <2 x i64> %83, <i64 24, i64 24>
  %85 = insertelement <2 x i8> undef, i8 %25, i32 0
  %86 = insertelement <2 x i8> %85, i8 %49, i32 1
  %87 = zext <2 x i8> %86 to <2 x i64>
  %88 = shl nuw nsw <2 x i64> %87, <i64 16, i64 16>
  %89 = insertelement <2 x i8> undef, i8 %22, i32 0
  %90 = insertelement <2 x i8> %89, i8 %46, i32 1
  %91 = zext <2 x i8> %90 to <2 x i64>
  %92 = shl nuw nsw <2 x i64> %91, <i64 8, i64 8>
  %93 = insertelement <2 x i8> undef, i8 %19, i32 0
  %94 = insertelement <2 x i8> %93, i8 %43, i32 1
  %95 = zext <2 x i8> %94 to <2 x i64>
  %96 = or <2 x i64> %92, %95
  %97 = or <2 x i64> %96, %88
  %98 = or <2 x i64> %97, %84
  %99 = or <2 x i64> %98, %80
  %100 = or <2 x i64> %99, %76
  %101 = or <2 x i64> %100, %72
  %102 = or <2 x i64> %101, %68
  store <2 x i64> %102, <2 x i64>* %11, align 16
  %103 = bitcast <2 x i64>* %6 to i8*
  %104 = getelementptr inbounds <2 x i64>, <2 x i64>* %6, i64 0, i64 0
  %105 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %7, i64 0, i32 1
  %106 = bitcast <2 x i64>* %6 to [16 x i8]*
  %107 = extractelement <2 x i64> %16, i32 0
  %108 = trunc i64 %107 to i8
  %109 = sub i8 %108, %19
  %110 = icmp ugt i8 %108, %19
  %111 = select i1 %110, i8 %109, i8 0
  call void @llvm.lifetime.start(i64 16, i8* nonnull %103)
  store <2 x i64> zeroinitializer, <2 x i64>* %6, align 16
  %112 = bitcast <2 x i64>* %6 to i8*
  store i8 %111, i8* %112, align 16
  %113 = load i64, i64* %104, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %103)
  %114 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %10, i64 0, i32 0, i64 1
  %115 = load i8, i8* %114, align 1
  %116 = sub i8 %115, %22
  %117 = icmp ugt i8 %115, %22
  %118 = select i1 %117, i8 %116, i8 0
  call void @llvm.lifetime.start(i64 16, i8* nonnull %103)
  store i64 %113, i64* %104, align 16
  store i64 0, i64* %105, align 8
  %119 = getelementptr inbounds [16 x i8], [16 x i8]* %106, i64 0, i64 1
  store i8 %118, i8* %119, align 1
  %120 = load i64, i64* %104, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %103)
  %121 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %10, i64 0, i32 0, i64 2
  %122 = load i8, i8* %121, align 2
  %123 = sub i8 %122, %25
  %124 = icmp ugt i8 %122, %25
  %125 = select i1 %124, i8 %123, i8 0
  call void @llvm.lifetime.start(i64 16, i8* nonnull %103)
  store i64 %120, i64* %104, align 16
  store i64 0, i64* %105, align 8
  %126 = getelementptr inbounds [16 x i8], [16 x i8]* %106, i64 0, i64 2
  store i8 %125, i8* %126, align 2
  %127 = load i64, i64* %104, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %103)
  %128 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %10, i64 0, i32 0, i64 3
  %129 = load i8, i8* %128, align 1
  %130 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %13, i64 0, i32 0, i64 3
  %131 = load i8, i8* %130, align 1
  %132 = sub i8 %129, %131
  %133 = icmp ugt i8 %129, %131
  %134 = select i1 %133, i8 %132, i8 0
  call void @llvm.lifetime.start(i64 16, i8* nonnull %103)
  store i64 %127, i64* %104, align 16
  store i64 0, i64* %105, align 8
  %135 = getelementptr inbounds [16 x i8], [16 x i8]* %106, i64 0, i64 3
  store i8 %134, i8* %135, align 1
  %136 = load i64, i64* %104, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %103)
  %137 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %10, i64 0, i32 0, i64 4
  %138 = load i8, i8* %137, align 4
  %139 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %13, i64 0, i32 0, i64 4
  %140 = load i8, i8* %139, align 4
  %141 = sub i8 %138, %140
  %142 = icmp ugt i8 %138, %140
  %143 = select i1 %142, i8 %141, i8 0
  call void @llvm.lifetime.start(i64 16, i8* nonnull %103)
  store i64 %136, i64* %104, align 16
  store i64 0, i64* %105, align 8
  %144 = getelementptr inbounds [16 x i8], [16 x i8]* %106, i64 0, i64 4
  store i8 %143, i8* %144, align 4
  %145 = load i64, i64* %104, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %103)
  %146 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %10, i64 0, i32 0, i64 5
  %147 = load i8, i8* %146, align 1
  %148 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %13, i64 0, i32 0, i64 5
  %149 = load i8, i8* %148, align 1
  %150 = sub i8 %147, %149
  %151 = icmp ugt i8 %147, %149
  %152 = select i1 %151, i8 %150, i8 0
  call void @llvm.lifetime.start(i64 16, i8* nonnull %103)
  store i64 %145, i64* %104, align 16
  store i64 0, i64* %105, align 8
  %153 = getelementptr inbounds [16 x i8], [16 x i8]* %106, i64 0, i64 5
  store i8 %152, i8* %153, align 1
  %154 = load i64, i64* %104, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %103)
  %155 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %10, i64 0, i32 0, i64 6
  %156 = load i8, i8* %155, align 2
  %157 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %13, i64 0, i32 0, i64 6
  %158 = load i8, i8* %157, align 2
  %159 = sub i8 %156, %158
  %160 = icmp ugt i8 %156, %158
  %161 = select i1 %160, i8 %159, i8 0
  call void @llvm.lifetime.start(i64 16, i8* nonnull %103)
  store i64 %154, i64* %104, align 16
  store i64 0, i64* %105, align 8
  %162 = getelementptr inbounds [16 x i8], [16 x i8]* %106, i64 0, i64 6
  store i8 %161, i8* %162, align 2
  %163 = load i64, i64* %104, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %103)
  %164 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %10, i64 0, i32 0, i64 7
  %165 = load i8, i8* %164, align 1
  %166 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %13, i64 0, i32 0, i64 7
  %167 = load i8, i8* %166, align 1
  %168 = sub i8 %165, %167
  %169 = icmp ugt i8 %165, %167
  %170 = select i1 %169, i8 %168, i8 0
  call void @llvm.lifetime.start(i64 16, i8* nonnull %103)
  store i64 %163, i64* %104, align 16
  store i64 0, i64* %105, align 8
  %171 = getelementptr inbounds [16 x i8], [16 x i8]* %106, i64 0, i64 7
  store i8 %170, i8* %171, align 1
  %172 = load i64, i64* %104, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %103)
  %173 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %9, i64 0, i32 1
  %174 = bitcast i64* %173 to i8*
  %175 = load i8, i8* %174, align 8
  %176 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %12, i64 0, i32 1
  %177 = bitcast i64* %176 to i8*
  %178 = load i8, i8* %177, align 8
  %179 = sub i8 %175, %178
  %180 = icmp ugt i8 %175, %178
  %181 = select i1 %180, i8 %179, i8 0
  call void @llvm.lifetime.start(i64 16, i8* nonnull %103)
  store i64 %172, i64* %104, align 16
  store i64 0, i64* %105, align 8
  %182 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %7, i64 0, i32 1
  %183 = bitcast i64* %182 to i8*
  store i8 %181, i8* %183, align 8
  %184 = load i64, i64* %105, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %103)
  %185 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %10, i64 0, i32 0, i64 9
  %186 = load i8, i8* %185, align 1
  %187 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %13, i64 0, i32 0, i64 9
  %188 = load i8, i8* %187, align 1
  %189 = sub i8 %186, %188
  %190 = icmp ugt i8 %186, %188
  %191 = select i1 %190, i8 %189, i8 0
  call void @llvm.lifetime.start(i64 16, i8* nonnull %103)
  store i64 %172, i64* %104, align 16
  store i64 %184, i64* %105, align 8
  %192 = getelementptr inbounds [16 x i8], [16 x i8]* %106, i64 0, i64 9
  store i8 %191, i8* %192, align 1
  %193 = load i64, i64* %105, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %103)
  %194 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %10, i64 0, i32 0, i64 10
  %195 = load i8, i8* %194, align 2
  %196 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %13, i64 0, i32 0, i64 10
  %197 = load i8, i8* %196, align 2
  %198 = sub i8 %195, %197
  %199 = icmp ugt i8 %195, %197
  %200 = select i1 %199, i8 %198, i8 0
  call void @llvm.lifetime.start(i64 16, i8* nonnull %103)
  store i64 %172, i64* %104, align 16
  store i64 %193, i64* %105, align 8
  %201 = getelementptr inbounds [16 x i8], [16 x i8]* %106, i64 0, i64 10
  store i8 %200, i8* %201, align 2
  %202 = load i64, i64* %105, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %103)
  %203 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %10, i64 0, i32 0, i64 11
  %204 = load i8, i8* %203, align 1
  %205 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %13, i64 0, i32 0, i64 11
  %206 = load i8, i8* %205, align 1
  %207 = sub i8 %204, %206
  %208 = icmp ugt i8 %204, %206
  %209 = select i1 %208, i8 %207, i8 0
  call void @llvm.lifetime.start(i64 16, i8* nonnull %103)
  store i64 %172, i64* %104, align 16
  store i64 %202, i64* %105, align 8
  %210 = getelementptr inbounds [16 x i8], [16 x i8]* %106, i64 0, i64 11
  store i8 %209, i8* %210, align 1
  %211 = load i64, i64* %105, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %103)
  %212 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %10, i64 0, i32 0, i64 12
  %213 = load i8, i8* %212, align 4
  %214 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %13, i64 0, i32 0, i64 12
  %215 = load i8, i8* %214, align 4
  %216 = sub i8 %213, %215
  %217 = icmp ugt i8 %213, %215
  %218 = select i1 %217, i8 %216, i8 0
  call void @llvm.lifetime.start(i64 16, i8* nonnull %103)
  store i64 %172, i64* %104, align 16
  store i64 %211, i64* %105, align 8
  %219 = getelementptr inbounds [16 x i8], [16 x i8]* %106, i64 0, i64 12
  store i8 %218, i8* %219, align 4
  %220 = load i64, i64* %105, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %103)
  %221 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %10, i64 0, i32 0, i64 13
  %222 = load i8, i8* %221, align 1
  %223 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %13, i64 0, i32 0, i64 13
  %224 = load i8, i8* %223, align 1
  %225 = sub i8 %222, %224
  %226 = icmp ugt i8 %222, %224
  %227 = select i1 %226, i8 %225, i8 0
  call void @llvm.lifetime.start(i64 16, i8* nonnull %103)
  store i64 %172, i64* %104, align 16
  store i64 %220, i64* %105, align 8
  %228 = getelementptr inbounds [16 x i8], [16 x i8]* %106, i64 0, i64 13
  store i8 %227, i8* %228, align 1
  %229 = load i64, i64* %105, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %103)
  %230 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %10, i64 0, i32 0, i64 14
  %231 = load i8, i8* %230, align 2
  %232 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %13, i64 0, i32 0, i64 14
  %233 = load i8, i8* %232, align 2
  %234 = sub i8 %231, %233
  %235 = icmp ugt i8 %231, %233
  %236 = select i1 %235, i8 %234, i8 0
  call void @llvm.lifetime.start(i64 16, i8* nonnull %103)
  store i64 %172, i64* %104, align 16
  store i64 %229, i64* %105, align 8
  %237 = getelementptr inbounds [16 x i8], [16 x i8]* %106, i64 0, i64 14
  store i8 %236, i8* %237, align 2
  %238 = load i64, i64* %105, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %103)
  %239 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %10, i64 0, i32 0, i64 15
  %240 = load i8, i8* %239, align 1
  %241 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %13, i64 0, i32 0, i64 15
  %242 = load i8, i8* %241, align 1
  %243 = sub i8 %240, %242
  %244 = icmp ugt i8 %240, %242
  %245 = select i1 %244, i8 %243, i8 0
  call void @llvm.lifetime.start(i64 16, i8* nonnull %103)
  store i64 %172, i64* %104, align 16
  store i64 %238, i64* %105, align 8
  %246 = getelementptr inbounds [16 x i8], [16 x i8]* %106, i64 0, i64 15
  store i8 %245, i8* %246, align 1
  %247 = load i64, i64* %105, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %103)
  %248 = lshr i64 %172, 8
  %249 = lshr i64 %172, 16
  %250 = lshr i64 %172, 24
  %251 = lshr i64 %172, 32
  %252 = lshr i64 %172, 40
  %253 = lshr i64 %172, 48
  %254 = lshr i64 %172, 56
  %255 = trunc i64 %172 to i8
  %256 = trunc i64 %248 to i8
  %257 = trunc i64 %249 to i8
  %258 = trunc i64 %250 to i8
  %259 = trunc i64 %251 to i8
  %260 = trunc i64 %252 to i8
  %261 = trunc i64 %253 to i8
  %262 = trunc i64 %254 to i8
  store i8 %255, i8* %2, align 1
  %263 = getelementptr inbounds i8, i8* %2, i64 1
  store i8 %256, i8* %263, align 1
  %264 = getelementptr inbounds i8, i8* %2, i64 2
  store i8 %257, i8* %264, align 1
  %265 = getelementptr inbounds i8, i8* %2, i64 3
  store i8 %258, i8* %265, align 1
  %266 = getelementptr inbounds i8, i8* %2, i64 4
  store i8 %259, i8* %266, align 1
  %267 = getelementptr inbounds i8, i8* %2, i64 5
  store i8 %260, i8* %267, align 1
  %268 = getelementptr inbounds i8, i8* %2, i64 6
  store i8 %261, i8* %268, align 1
  %269 = getelementptr inbounds i8, i8* %2, i64 7
  store i8 %262, i8* %269, align 1
  %270 = trunc i64 %247 to i8
  %271 = getelementptr inbounds i8, i8* %2, i64 8
  store i8 %270, i8* %271, align 1
  %272 = lshr i64 %247, 8
  %273 = trunc i64 %272 to i8
  %274 = getelementptr inbounds i8, i8* %2, i64 9
  store i8 %273, i8* %274, align 1
  %275 = lshr i64 %247, 16
  %276 = trunc i64 %275 to i8
  %277 = getelementptr inbounds i8, i8* %2, i64 10
  store i8 %276, i8* %277, align 1
  %278 = lshr i64 %247, 24
  %279 = trunc i64 %278 to i8
  %280 = getelementptr inbounds i8, i8* %2, i64 11
  store i8 %279, i8* %280, align 1
  %281 = lshr i64 %247, 32
  %282 = trunc i64 %281 to i8
  %283 = getelementptr inbounds i8, i8* %2, i64 12
  store i8 %282, i8* %283, align 1
  %284 = lshr i64 %247, 40
  %285 = trunc i64 %284 to i8
  %286 = getelementptr inbounds i8, i8* %2, i64 13
  store i8 %285, i8* %286, align 1
  %287 = lshr i64 %247, 48
  %288 = trunc i64 %287 to i8
  %289 = getelementptr inbounds i8, i8* %2, i64 14
  store i8 %288, i8* %289, align 1
  %290 = lshr i64 %247, 56
  %291 = trunc i64 %290 to i8
  %292 = getelementptr inbounds i8, i8* %2, i64 15
  store i8 %291, i8* %292, align 1
  call void @llvm.lifetime.end(i64 16, i8* nonnull %17) 
  call void @llvm.lifetime.end(i64 16, i8* nonnull %14) 
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L7PSUBUSWI4RVnWI7vec64_tE3RVnIS2_ES5_EEP6MemoryS7_R5StateT_T0_T1_(%struct.Memory* readnone returned, %struct.State* nocapture readnone dereferenceable(3376), i64* nocapture, i64, i64)  {
  %6 = alloca i64, align 8
  %7 = bitcast i64* %6 to i8*
  %8 = bitcast i64* %6 to [4 x i16]*
  %9 = trunc i64 %3 to i16
  %10 = trunc i64 %4 to i16
  %11 = sub i16 %9, %10
  %12 = icmp ugt i16 %9, %10
  %13 = select i1 %12, i16 %11, i16 0
  call void @llvm.lifetime.start(i64 8, i8* nonnull %7)
  store i64 0, i64* %6, align 8
  %14 = bitcast i64* %6 to i16*
  store i16 %13, i16* %14, align 8
  %15 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %7)
  %16 = lshr i64 %3, 16
  %17 = trunc i64 %16 to i16
  %18 = lshr i64 %4, 16
  %19 = trunc i64 %18 to i16
  %20 = sub i16 %17, %19
  %21 = icmp ugt i16 %17, %19
  %22 = select i1 %21, i16 %20, i16 0
  call void @llvm.lifetime.start(i64 8, i8* nonnull %7)
  store i64 %15, i64* %6, align 8
  %23 = getelementptr inbounds [4 x i16], [4 x i16]* %8, i64 0, i64 1
  store i16 %22, i16* %23, align 2
  %24 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %7)
  %25 = lshr i64 %3, 32
  %26 = trunc i64 %25 to i16
  %27 = lshr i64 %4, 32
  %28 = trunc i64 %27 to i16
  %29 = sub i16 %26, %28
  %30 = icmp ugt i16 %26, %28
  %31 = select i1 %30, i16 %29, i16 0
  call void @llvm.lifetime.start(i64 8, i8* nonnull %7)
  store i64 %24, i64* %6, align 8
  %32 = getelementptr inbounds [4 x i16], [4 x i16]* %8, i64 0, i64 2
  store i16 %31, i16* %32, align 4
  %33 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %7)
  %34 = lshr i64 %3, 48
  %35 = trunc i64 %34 to i16
  %36 = lshr i64 %4, 48
  %37 = trunc i64 %36 to i16
  %38 = sub i16 %35, %37
  %39 = icmp ugt i16 %35, %37
  %40 = select i1 %39, i16 %38, i16 0
  call void @llvm.lifetime.start(i64 8, i8* nonnull %7)
  store i64 %33, i64* %6, align 8
  %41 = getelementptr inbounds [4 x i16], [4 x i16]* %8, i64 0, i64 3
  store i16 %40, i16* %41, align 2
  %42 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %7)
  %43 = lshr i64 %42, 16
  %44 = lshr i64 %42, 32
  %45 = lshr i64 %42, 48
  %46 = trunc i64 %42 to i16
  %47 = trunc i64 %43 to i16
  %48 = trunc i64 %44 to i16
  %49 = trunc i64 %45 to i16
  %50 = bitcast i64* %2 to [4 x i16]*
  %51 = bitcast i64* %2 to i16*
  store i16 %46, i16* %51, align 1
  %52 = getelementptr inbounds [4 x i16], [4 x i16]* %50, i64 0, i64 1
  store i16 %47, i16* %52, align 1
  %53 = getelementptr inbounds [4 x i16], [4 x i16]* %50, i64 0, i64 2
  store i16 %48, i16* %53, align 1
  %54 = getelementptr inbounds [4 x i16], [4 x i16]* %50, i64 0, i64 3
  store i16 %49, i16* %54, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L7PSUBUSWI4RVnWI7vec64_tE3RVnIS2_E3MVnIS2_EEEP6MemoryS9_R5StateT_T0_T1_(%struct.Memory* returned, %struct.State* nocapture readnone dereferenceable(3376), i64* nocapture, i64, i64)  {
  %6 = alloca i64, align 8
  %7 = inttoptr i64 %4 to i16*
  %8 = load i16, i16* %7
  %9 = add i64 %4, 2
  %10 = inttoptr i64 %9 to i16*
  %11 = load i16, i16* %10
  %12 = add i64 %4, 4
  %13 = inttoptr i64 %12 to i16*
  %14 = load i16, i16* %13
  %15 = add i64 %4, 6
  %16 = inttoptr i64 %15 to i16*
  %17 = load i16, i16* %16
  %18 = bitcast i64* %6 to i8*
  %19 = bitcast i64* %6 to [4 x i16]*
  %20 = trunc i64 %3 to i16
  %21 = sub i16 %20, %8
  %22 = icmp ugt i16 %20, %8
  %23 = select i1 %22, i16 %21, i16 0
  call void @llvm.lifetime.start(i64 8, i8* nonnull %18)
  store i64 0, i64* %6, align 8
  %24 = bitcast i64* %6 to i16*
  store i16 %23, i16* %24, align 8
  %25 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %18)
  %26 = lshr i64 %3, 16
  %27 = trunc i64 %26 to i16
  %28 = sub i16 %27, %11
  %29 = icmp ugt i16 %27, %11
  %30 = select i1 %29, i16 %28, i16 0
  call void @llvm.lifetime.start(i64 8, i8* nonnull %18)
  store i64 %25, i64* %6, align 8
  %31 = getelementptr inbounds [4 x i16], [4 x i16]* %19, i64 0, i64 1
  store i16 %30, i16* %31, align 2
  %32 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %18)
  %33 = lshr i64 %3, 32
  %34 = trunc i64 %33 to i16
  %35 = sub i16 %34, %14
  %36 = icmp ugt i16 %34, %14
  %37 = select i1 %36, i16 %35, i16 0
  call void @llvm.lifetime.start(i64 8, i8* nonnull %18)
  store i64 %32, i64* %6, align 8
  %38 = getelementptr inbounds [4 x i16], [4 x i16]* %19, i64 0, i64 2
  store i16 %37, i16* %38, align 4
  %39 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %18)
  %40 = lshr i64 %3, 48
  %41 = trunc i64 %40 to i16
  %42 = sub i16 %41, %17
  %43 = icmp ugt i16 %41, %17
  %44 = select i1 %43, i16 %42, i16 0
  call void @llvm.lifetime.start(i64 8, i8* nonnull %18)
  store i64 %39, i64* %6, align 8
  %45 = getelementptr inbounds [4 x i16], [4 x i16]* %19, i64 0, i64 3
  store i16 %44, i16* %45, align 2
  %46 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %18)
  %47 = lshr i64 %46, 16
  %48 = lshr i64 %46, 32
  %49 = lshr i64 %46, 48
  %50 = trunc i64 %46 to i16
  %51 = trunc i64 %47 to i16
  %52 = trunc i64 %48 to i16
  %53 = trunc i64 %49 to i16
  %54 = bitcast i64* %2 to [4 x i16]*
  %55 = bitcast i64* %2 to i16*
  store i16 %50, i16* %55, align 1
  %56 = getelementptr inbounds [4 x i16], [4 x i16]* %54, i64 0, i64 1
  store i16 %51, i16* %56, align 1
  %57 = getelementptr inbounds [4 x i16], [4 x i16]* %54, i64 0, i64 2
  store i16 %52, i16* %57, align 1
  %58 = getelementptr inbounds [4 x i16], [4 x i16]* %54, i64 0, i64 3
  store i16 %53, i16* %58, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L7PSUBUSWI3VnWI8vec128_tE2VnIS2_ES5_EEP6MemoryS7_R5StateT_T0_T1_(%struct.Memory* readnone returned, %struct.State* nocapture readnone dereferenceable(3376), i8* nocapture, i8* nocapture readonly, i8* nocapture readonly)  {
  %6 = alloca <2 x i64>, align 16
  %7 = bitcast <2 x i64>* %6 to { i64, i64 }*
  %8 = alloca <2 x i64>, align 16
  %9 = bitcast <2 x i64>* %8 to { i64, i64 }*
  %10 = bitcast <2 x i64>* %8 to %struct.uint16v8_t*
  %11 = alloca <2 x i64>, align 16
  %12 = bitcast <2 x i64>* %11 to { i64, i64 }*
  %13 = bitcast <2 x i64>* %11 to %struct.uint16v8_t*
  %14 = bitcast <2 x i64>* %8 to i8*
  call void @llvm.lifetime.start(i64 16, i8* nonnull %14) 
  %15 = bitcast i8* %3 to <2 x i64>*
  %16 = load <2 x i64>, <2 x i64>* %15, align 1
  store <2 x i64> %16, <2 x i64>* %8, align 16
  %17 = bitcast <2 x i64>* %11 to i8*
  call void @llvm.lifetime.start(i64 16, i8* nonnull %17) 
  %18 = bitcast i8* %4 to <2 x i64>*
  %19 = load <2 x i64>, <2 x i64>* %18, align 1
  store <2 x i64> %19, <2 x i64>* %11, align 16
  %20 = bitcast <2 x i64>* %6 to i8*
  %21 = getelementptr inbounds <2 x i64>, <2 x i64>* %6, i64 0, i64 0
  %22 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %7, i64 0, i32 1
  %23 = bitcast <2 x i64>* %6 to [8 x i16]*
  %24 = extractelement <2 x i64> %16, i32 0
  %25 = trunc i64 %24 to i16
  %26 = extractelement <2 x i64> %19, i32 0
  %27 = trunc i64 %26 to i16
  %28 = sub i16 %25, %27
  %29 = icmp ugt i16 %25, %27
  %30 = select i1 %29, i16 %28, i16 0
  call void @llvm.lifetime.start(i64 16, i8* nonnull %20)
  store <2 x i64> zeroinitializer, <2 x i64>* %6, align 16
  %31 = bitcast <2 x i64>* %6 to i16*
  store i16 %30, i16* %31, align 16
  %32 = load i64, i64* %21, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %20)
  %33 = lshr i64 %24, 16
  %34 = trunc i64 %33 to i16
  %35 = lshr i64 %26, 16
  %36 = trunc i64 %35 to i16
  %37 = sub i16 %34, %36
  %38 = icmp ugt i16 %34, %36
  %39 = select i1 %38, i16 %37, i16 0
  call void @llvm.lifetime.start(i64 16, i8* nonnull %20)
  store i64 %32, i64* %21, align 16
  store i64 0, i64* %22, align 8
  %40 = getelementptr inbounds [8 x i16], [8 x i16]* %23, i64 0, i64 1
  store i16 %39, i16* %40, align 2
  %41 = load i64, i64* %21, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %20)
  %42 = lshr i64 %24, 32
  %43 = trunc i64 %42 to i16
  %44 = lshr i64 %26, 32
  %45 = trunc i64 %44 to i16
  %46 = sub i16 %43, %45
  %47 = icmp ugt i16 %43, %45
  %48 = select i1 %47, i16 %46, i16 0
  call void @llvm.lifetime.start(i64 16, i8* nonnull %20)
  store i64 %41, i64* %21, align 16
  store i64 0, i64* %22, align 8
  %49 = getelementptr inbounds [8 x i16], [8 x i16]* %23, i64 0, i64 2
  store i16 %48, i16* %49, align 4
  %50 = load i64, i64* %21, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %20)
  %51 = lshr i64 %24, 48
  %52 = trunc i64 %51 to i16
  %53 = lshr i64 %26, 48
  %54 = trunc i64 %53 to i16
  %55 = sub i16 %52, %54
  %56 = icmp ugt i16 %52, %54
  %57 = select i1 %56, i16 %55, i16 0
  call void @llvm.lifetime.start(i64 16, i8* nonnull %20)
  store i64 %50, i64* %21, align 16
  store i64 0, i64* %22, align 8
  %58 = getelementptr inbounds [8 x i16], [8 x i16]* %23, i64 0, i64 3
  store i16 %57, i16* %58, align 2
  %59 = load i64, i64* %21, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %20)
  %60 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %9, i64 0, i32 1
  %61 = bitcast i64* %60 to i16*
  %62 = load i16, i16* %61, align 8
  %63 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %12, i64 0, i32 1
  %64 = bitcast i64* %63 to i16*
  %65 = load i16, i16* %64, align 8
  %66 = sub i16 %62, %65
  %67 = icmp ugt i16 %62, %65
  %68 = select i1 %67, i16 %66, i16 0
  call void @llvm.lifetime.start(i64 16, i8* nonnull %20)
  store i64 %59, i64* %21, align 16
  store i64 0, i64* %22, align 8
  %69 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %7, i64 0, i32 1
  %70 = bitcast i64* %69 to i16*
  store i16 %68, i16* %70, align 8
  %71 = load i64, i64* %22, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %20)
  %72 = getelementptr inbounds %struct.uint16v8_t, %struct.uint16v8_t* %10, i64 0, i32 0, i64 5
  %73 = load i16, i16* %72, align 2
  %74 = getelementptr inbounds %struct.uint16v8_t, %struct.uint16v8_t* %13, i64 0, i32 0, i64 5
  %75 = load i16, i16* %74, align 2
  %76 = sub i16 %73, %75
  %77 = icmp ugt i16 %73, %75
  %78 = select i1 %77, i16 %76, i16 0
  call void @llvm.lifetime.start(i64 16, i8* nonnull %20)
  store i64 %59, i64* %21, align 16
  store i64 %71, i64* %22, align 8
  %79 = getelementptr inbounds [8 x i16], [8 x i16]* %23, i64 0, i64 5
  store i16 %78, i16* %79, align 2
  %80 = load i64, i64* %22, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %20)
  %81 = getelementptr inbounds %struct.uint16v8_t, %struct.uint16v8_t* %10, i64 0, i32 0, i64 6
  %82 = load i16, i16* %81, align 4
  %83 = getelementptr inbounds %struct.uint16v8_t, %struct.uint16v8_t* %13, i64 0, i32 0, i64 6
  %84 = load i16, i16* %83, align 4
  %85 = sub i16 %82, %84
  %86 = icmp ugt i16 %82, %84
  %87 = select i1 %86, i16 %85, i16 0
  call void @llvm.lifetime.start(i64 16, i8* nonnull %20)
  store i64 %59, i64* %21, align 16
  store i64 %80, i64* %22, align 8
  %88 = getelementptr inbounds [8 x i16], [8 x i16]* %23, i64 0, i64 6
  store i16 %87, i16* %88, align 4
  %89 = load i64, i64* %22, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %20)
  %90 = getelementptr inbounds %struct.uint16v8_t, %struct.uint16v8_t* %10, i64 0, i32 0, i64 7
  %91 = load i16, i16* %90, align 2
  %92 = getelementptr inbounds %struct.uint16v8_t, %struct.uint16v8_t* %13, i64 0, i32 0, i64 7
  %93 = load i16, i16* %92, align 2
  %94 = sub i16 %91, %93
  %95 = icmp ugt i16 %91, %93
  %96 = select i1 %95, i16 %94, i16 0
  call void @llvm.lifetime.start(i64 16, i8* nonnull %20)
  store i64 %59, i64* %21, align 16
  store i64 %89, i64* %22, align 8
  %97 = getelementptr inbounds [8 x i16], [8 x i16]* %23, i64 0, i64 7
  store i16 %96, i16* %97, align 2
  %98 = load i64, i64* %22, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %20)
  %99 = lshr i64 %59, 16
  %100 = lshr i64 %59, 32
  %101 = lshr i64 %59, 48
  %102 = trunc i64 %59 to i16
  %103 = trunc i64 %99 to i16
  %104 = trunc i64 %100 to i16
  %105 = trunc i64 %101 to i16
  %106 = bitcast i8* %2 to i16*
  store i16 %102, i16* %106, align 1
  %107 = getelementptr inbounds i8, i8* %2, i64 2
  %108 = bitcast i8* %107 to i16*
  store i16 %103, i16* %108, align 1
  %109 = getelementptr inbounds i8, i8* %2, i64 4
  %110 = bitcast i8* %109 to i16*
  store i16 %104, i16* %110, align 1
  %111 = getelementptr inbounds i8, i8* %2, i64 6
  %112 = bitcast i8* %111 to i16*
  store i16 %105, i16* %112, align 1
  %113 = trunc i64 %98 to i16
  %114 = getelementptr inbounds i8, i8* %2, i64 8
  %115 = bitcast i8* %114 to i16*
  store i16 %113, i16* %115, align 1
  %116 = lshr i64 %98, 16
  %117 = trunc i64 %116 to i16
  %118 = getelementptr inbounds i8, i8* %2, i64 10
  %119 = bitcast i8* %118 to i16*
  store i16 %117, i16* %119, align 1
  %120 = lshr i64 %98, 32
  %121 = trunc i64 %120 to i16
  %122 = getelementptr inbounds i8, i8* %2, i64 12
  %123 = bitcast i8* %122 to i16*
  store i16 %121, i16* %123, align 1
  %124 = lshr i64 %98, 48
  %125 = trunc i64 %124 to i16
  %126 = getelementptr inbounds i8, i8* %2, i64 14
  %127 = bitcast i8* %126 to i16*
  store i16 %125, i16* %127, align 1
  call void @llvm.lifetime.end(i64 16, i8* nonnull %17) 
  call void @llvm.lifetime.end(i64 16, i8* nonnull %14) 
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L7PSUBUSWI3VnWI8vec128_tE2VnIS2_E3MVnIS2_EEEP6MemoryS9_R5StateT_T0_T1_(%struct.Memory* returned, %struct.State* nocapture readnone dereferenceable(3376), i8* nocapture, i8* nocapture readonly, i64)  {
  %6 = alloca <2 x i64>, align 16
  %7 = bitcast <2 x i64>* %6 to { i64, i64 }*
  %8 = alloca <2 x i64>, align 16
  %9 = bitcast <2 x i64>* %8 to { i64, i64 }*
  %10 = bitcast <2 x i64>* %8 to %struct.uint16v8_t*
  %11 = alloca <2 x i64>, align 16
  %12 = bitcast <2 x i64>* %11 to { i64, i64 }*
  %13 = bitcast <2 x i64>* %11 to %struct.uint16v8_t*
  %14 = bitcast <2 x i64>* %8 to i8*
  call void @llvm.lifetime.start(i64 16, i8* nonnull %14) 
  %15 = bitcast i8* %3 to <2 x i64>*
  %16 = load <2 x i64>, <2 x i64>* %15, align 1
  store <2 x i64> %16, <2 x i64>* %8, align 16
  %17 = bitcast <2 x i64>* %11 to i8*
  call void @llvm.lifetime.start(i64 16, i8* nonnull %17) 
  %18 = inttoptr i64 %4 to i16*
  %19 = load i16, i16* %18
  %20 = add i64 %4, 2
  %21 = inttoptr i64 %20 to i16*
  %22 = load i16, i16* %21
  %23 = add i64 %4, 4
  %24 = inttoptr i64 %23 to i16*
  %25 = load i16, i16* %24
  %26 = add i64 %4, 6
  %27 = inttoptr i64 %26 to i16*
  %28 = load i16, i16* %27
  %29 = add i64 %4, 8
  %30 = inttoptr i64 %29 to i16*
  %31 = load i16, i16* %30
  %32 = add i64 %4, 10
  %33 = inttoptr i64 %32 to i16*
  %34 = load i16, i16* %33
  %35 = add i64 %4, 12
  %36 = inttoptr i64 %35 to i16*
  %37 = load i16, i16* %36
  %38 = add i64 %4, 14
  %39 = inttoptr i64 %38 to i16*
  %40 = load i16, i16* %39
  %41 = insertelement <2 x i16> undef, i16 %28, i32 0
  %42 = insertelement <2 x i16> %41, i16 %40, i32 1
  %43 = zext <2 x i16> %42 to <2 x i64>
  %44 = shl nuw <2 x i64> %43, <i64 48, i64 48>
  %45 = insertelement <2 x i16> undef, i16 %25, i32 0
  %46 = insertelement <2 x i16> %45, i16 %37, i32 1
  %47 = zext <2 x i16> %46 to <2 x i64>
  %48 = shl nuw nsw <2 x i64> %47, <i64 32, i64 32>
  %49 = insertelement <2 x i16> undef, i16 %22, i32 0
  %50 = insertelement <2 x i16> %49, i16 %34, i32 1
  %51 = zext <2 x i16> %50 to <2 x i64>
  %52 = shl nuw nsw <2 x i64> %51, <i64 16, i64 16>
  %53 = insertelement <2 x i16> undef, i16 %19, i32 0
  %54 = insertelement <2 x i16> %53, i16 %31, i32 1
  %55 = zext <2 x i16> %54 to <2 x i64>
  %56 = or <2 x i64> %52, %55
  %57 = or <2 x i64> %56, %48
  %58 = or <2 x i64> %57, %44
  store <2 x i64> %58, <2 x i64>* %11, align 16
  %59 = bitcast <2 x i64>* %6 to i8*
  %60 = getelementptr inbounds <2 x i64>, <2 x i64>* %6, i64 0, i64 0
  %61 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %7, i64 0, i32 1
  %62 = bitcast <2 x i64>* %6 to [8 x i16]*
  %63 = extractelement <2 x i64> %16, i32 0
  %64 = trunc i64 %63 to i16
  %65 = sub i16 %64, %19
  %66 = icmp ugt i16 %64, %19
  %67 = select i1 %66, i16 %65, i16 0
  call void @llvm.lifetime.start(i64 16, i8* nonnull %59)
  store <2 x i64> zeroinitializer, <2 x i64>* %6, align 16
  %68 = bitcast <2 x i64>* %6 to i16*
  store i16 %67, i16* %68, align 16
  %69 = load i64, i64* %60, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %59)
  %70 = lshr i64 %63, 16
  %71 = trunc i64 %70 to i16
  %72 = sub i16 %71, %22
  %73 = icmp ugt i16 %71, %22
  %74 = select i1 %73, i16 %72, i16 0
  call void @llvm.lifetime.start(i64 16, i8* nonnull %59)
  store i64 %69, i64* %60, align 16
  store i64 0, i64* %61, align 8
  %75 = getelementptr inbounds [8 x i16], [8 x i16]* %62, i64 0, i64 1
  store i16 %74, i16* %75, align 2
  %76 = load i64, i64* %60, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %59)
  %77 = lshr i64 %63, 32
  %78 = trunc i64 %77 to i16
  %79 = sub i16 %78, %25
  %80 = icmp ugt i16 %78, %25
  %81 = select i1 %80, i16 %79, i16 0
  call void @llvm.lifetime.start(i64 16, i8* nonnull %59)
  store i64 %76, i64* %60, align 16
  store i64 0, i64* %61, align 8
  %82 = getelementptr inbounds [8 x i16], [8 x i16]* %62, i64 0, i64 2
  store i16 %81, i16* %82, align 4
  %83 = load i64, i64* %60, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %59)
  %84 = getelementptr inbounds %struct.uint16v8_t, %struct.uint16v8_t* %10, i64 0, i32 0, i64 3
  %85 = load i16, i16* %84, align 2
  %86 = sub i16 %85, %28
  %87 = icmp ugt i16 %85, %28
  %88 = select i1 %87, i16 %86, i16 0
  call void @llvm.lifetime.start(i64 16, i8* nonnull %59)
  store i64 %83, i64* %60, align 16
  store i64 0, i64* %61, align 8
  %89 = getelementptr inbounds [8 x i16], [8 x i16]* %62, i64 0, i64 3
  store i16 %88, i16* %89, align 2
  %90 = load i64, i64* %60, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %59)
  %91 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %9, i64 0, i32 1
  %92 = bitcast i64* %91 to i16*
  %93 = load i16, i16* %92, align 8
  %94 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %12, i64 0, i32 1
  %95 = bitcast i64* %94 to i16*
  %96 = load i16, i16* %95, align 8
  %97 = sub i16 %93, %96
  %98 = icmp ugt i16 %93, %96
  %99 = select i1 %98, i16 %97, i16 0
  call void @llvm.lifetime.start(i64 16, i8* nonnull %59)
  store i64 %90, i64* %60, align 16
  store i64 0, i64* %61, align 8
  %100 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %7, i64 0, i32 1
  %101 = bitcast i64* %100 to i16*
  store i16 %99, i16* %101, align 8
  %102 = load i64, i64* %61, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %59)
  %103 = getelementptr inbounds %struct.uint16v8_t, %struct.uint16v8_t* %10, i64 0, i32 0, i64 5
  %104 = load i16, i16* %103, align 2
  %105 = getelementptr inbounds %struct.uint16v8_t, %struct.uint16v8_t* %13, i64 0, i32 0, i64 5
  %106 = load i16, i16* %105, align 2
  %107 = sub i16 %104, %106
  %108 = icmp ugt i16 %104, %106
  %109 = select i1 %108, i16 %107, i16 0
  call void @llvm.lifetime.start(i64 16, i8* nonnull %59)
  store i64 %90, i64* %60, align 16
  store i64 %102, i64* %61, align 8
  %110 = getelementptr inbounds [8 x i16], [8 x i16]* %62, i64 0, i64 5
  store i16 %109, i16* %110, align 2
  %111 = load i64, i64* %61, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %59)
  %112 = getelementptr inbounds %struct.uint16v8_t, %struct.uint16v8_t* %10, i64 0, i32 0, i64 6
  %113 = load i16, i16* %112, align 4
  %114 = getelementptr inbounds %struct.uint16v8_t, %struct.uint16v8_t* %13, i64 0, i32 0, i64 6
  %115 = load i16, i16* %114, align 4
  %116 = sub i16 %113, %115
  %117 = icmp ugt i16 %113, %115
  %118 = select i1 %117, i16 %116, i16 0
  call void @llvm.lifetime.start(i64 16, i8* nonnull %59)
  store i64 %90, i64* %60, align 16
  store i64 %111, i64* %61, align 8
  %119 = getelementptr inbounds [8 x i16], [8 x i16]* %62, i64 0, i64 6
  store i16 %118, i16* %119, align 4
  %120 = load i64, i64* %61, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %59)
  %121 = getelementptr inbounds %struct.uint16v8_t, %struct.uint16v8_t* %10, i64 0, i32 0, i64 7
  %122 = load i16, i16* %121, align 2
  %123 = getelementptr inbounds %struct.uint16v8_t, %struct.uint16v8_t* %13, i64 0, i32 0, i64 7
  %124 = load i16, i16* %123, align 2
  %125 = sub i16 %122, %124
  %126 = icmp ugt i16 %122, %124
  %127 = select i1 %126, i16 %125, i16 0
  call void @llvm.lifetime.start(i64 16, i8* nonnull %59)
  store i64 %90, i64* %60, align 16
  store i64 %120, i64* %61, align 8
  %128 = getelementptr inbounds [8 x i16], [8 x i16]* %62, i64 0, i64 7
  store i16 %127, i16* %128, align 2
  %129 = load i64, i64* %61, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %59)
  %130 = lshr i64 %90, 16
  %131 = lshr i64 %90, 32
  %132 = lshr i64 %90, 48
  %133 = trunc i64 %90 to i16
  %134 = trunc i64 %130 to i16
  %135 = trunc i64 %131 to i16
  %136 = trunc i64 %132 to i16
  %137 = bitcast i8* %2 to i16*
  store i16 %133, i16* %137, align 1
  %138 = getelementptr inbounds i8, i8* %2, i64 2
  %139 = bitcast i8* %138 to i16*
  store i16 %134, i16* %139, align 1
  %140 = getelementptr inbounds i8, i8* %2, i64 4
  %141 = bitcast i8* %140 to i16*
  store i16 %135, i16* %141, align 1
  %142 = getelementptr inbounds i8, i8* %2, i64 6
  %143 = bitcast i8* %142 to i16*
  store i16 %136, i16* %143, align 1
  %144 = trunc i64 %129 to i16
  %145 = getelementptr inbounds i8, i8* %2, i64 8
  %146 = bitcast i8* %145 to i16*
  store i16 %144, i16* %146, align 1
  %147 = lshr i64 %129, 16
  %148 = trunc i64 %147 to i16
  %149 = getelementptr inbounds i8, i8* %2, i64 10
  %150 = bitcast i8* %149 to i16*
  store i16 %148, i16* %150, align 1
  %151 = lshr i64 %129, 32
  %152 = trunc i64 %151 to i16
  %153 = getelementptr inbounds i8, i8* %2, i64 12
  %154 = bitcast i8* %153 to i16*
  store i16 %152, i16* %154, align 1
  %155 = lshr i64 %129, 48
  %156 = trunc i64 %155 to i16
  %157 = getelementptr inbounds i8, i8* %2, i64 14
  %158 = bitcast i8* %157 to i16*
  store i16 %156, i16* %158, align 1
  call void @llvm.lifetime.end(i64 16, i8* nonnull %17) 
  call void @llvm.lifetime.end(i64 16, i8* nonnull %14) 
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L5PAVGBI4RVnWI7vec64_tE3RVnIS2_ES5_EEP6MemoryS7_R5StateT_T0_T1_(%struct.Memory* readnone returned, %struct.State* nocapture readnone dereferenceable(3376), i64* nocapture, i64, i64)  {
  %6 = alloca i64, align 8
  %7 = alloca i64, align 8
  %8 = bitcast i64* %7 to %struct.uint8v8_t*
  %9 = alloca i64, align 8
  %10 = bitcast i64* %9 to %struct.uint8v8_t*
  %11 = bitcast i64* %7 to i8*
  call void @llvm.lifetime.start(i64 8, i8* nonnull %11) 
  store i64 %3, i64* %7, align 8
  %12 = bitcast i64* %9 to i8*
  call void @llvm.lifetime.start(i64 8, i8* nonnull %12) 
  store i64 %4, i64* %9, align 8
  %13 = bitcast i64* %6 to i8*
  %14 = bitcast i64* %6 to [8 x i8]*
  %15 = trunc i64 %3 to i16
  %16 = trunc i64 %4 to i16
  %17 = and i16 %15, 255
  %18 = and i16 %16, 255
  %19 = add nuw nsw i16 %17, 1
  %20 = add nuw nsw i16 %19, %18
  %21 = lshr i16 %20, 1
  %22 = trunc i16 %21 to i8
  call void @llvm.lifetime.start(i64 8, i8* nonnull %13)
  store i64 0, i64* %6, align 8
  %23 = bitcast i64* %6 to i8*
  store i8 %22, i8* %23, align 8
  %24 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %13)
  %25 = lshr i64 %3, 8
  %26 = trunc i64 %25 to i16
  %27 = lshr i64 %4, 8
  %28 = trunc i64 %27 to i16
  %29 = and i16 %26, 255
  %30 = and i16 %28, 255
  %31 = add nuw nsw i16 %29, 1
  %32 = add nuw nsw i16 %31, %30
  %33 = lshr i16 %32, 1
  %34 = trunc i16 %33 to i8
  call void @llvm.lifetime.start(i64 8, i8* nonnull %13)
  store i64 %24, i64* %6, align 8
  %35 = getelementptr inbounds [8 x i8], [8 x i8]* %14, i64 0, i64 1
  store i8 %34, i8* %35, align 1
  %36 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %13)
  %37 = lshr i64 %3, 16
  %38 = trunc i64 %37 to i16
  %39 = lshr i64 %4, 16
  %40 = trunc i64 %39 to i16
  %41 = and i16 %38, 255
  %42 = and i16 %40, 255
  %43 = add nuw nsw i16 %41, 1
  %44 = add nuw nsw i16 %43, %42
  %45 = lshr i16 %44, 1
  %46 = trunc i16 %45 to i8
  call void @llvm.lifetime.start(i64 8, i8* nonnull %13)
  store i64 %36, i64* %6, align 8
  %47 = getelementptr inbounds [8 x i8], [8 x i8]* %14, i64 0, i64 2
  store i8 %46, i8* %47, align 2
  %48 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %13)
  %49 = getelementptr inbounds %struct.uint8v8_t, %struct.uint8v8_t* %8, i64 0, i32 0, i64 3
  %50 = load i8, i8* %49, align 1
  %51 = getelementptr inbounds %struct.uint8v8_t, %struct.uint8v8_t* %10, i64 0, i32 0, i64 3
  %52 = load i8, i8* %51, align 1
  %53 = zext i8 %50 to i16
  %54 = zext i8 %52 to i16
  %55 = add nuw nsw i16 %53, 1
  %56 = add nuw nsw i16 %55, %54
  %57 = lshr i16 %56, 1
  %58 = trunc i16 %57 to i8
  call void @llvm.lifetime.start(i64 8, i8* nonnull %13)
  store i64 %48, i64* %6, align 8
  %59 = getelementptr inbounds [8 x i8], [8 x i8]* %14, i64 0, i64 3
  store i8 %58, i8* %59, align 1
  %60 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %13)
  %61 = getelementptr inbounds %struct.uint8v8_t, %struct.uint8v8_t* %8, i64 0, i32 0, i64 4
  %62 = load i8, i8* %61, align 4
  %63 = getelementptr inbounds %struct.uint8v8_t, %struct.uint8v8_t* %10, i64 0, i32 0, i64 4
  %64 = load i8, i8* %63, align 4
  %65 = zext i8 %62 to i16
  %66 = zext i8 %64 to i16
  %67 = add nuw nsw i16 %65, 1
  %68 = add nuw nsw i16 %67, %66
  %69 = lshr i16 %68, 1
  %70 = trunc i16 %69 to i8
  call void @llvm.lifetime.start(i64 8, i8* nonnull %13)
  store i64 %60, i64* %6, align 8
  %71 = getelementptr inbounds [8 x i8], [8 x i8]* %14, i64 0, i64 4
  store i8 %70, i8* %71, align 4
  %72 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %13)
  %73 = getelementptr inbounds %struct.uint8v8_t, %struct.uint8v8_t* %8, i64 0, i32 0, i64 5
  %74 = load i8, i8* %73, align 1
  %75 = getelementptr inbounds %struct.uint8v8_t, %struct.uint8v8_t* %10, i64 0, i32 0, i64 5
  %76 = load i8, i8* %75, align 1
  %77 = zext i8 %74 to i16
  %78 = zext i8 %76 to i16
  %79 = add nuw nsw i16 %77, 1
  %80 = add nuw nsw i16 %79, %78
  %81 = lshr i16 %80, 1
  %82 = trunc i16 %81 to i8
  call void @llvm.lifetime.start(i64 8, i8* nonnull %13)
  store i64 %72, i64* %6, align 8
  %83 = getelementptr inbounds [8 x i8], [8 x i8]* %14, i64 0, i64 5
  store i8 %82, i8* %83, align 1
  %84 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %13)
  %85 = getelementptr inbounds %struct.uint8v8_t, %struct.uint8v8_t* %8, i64 0, i32 0, i64 6
  %86 = load i8, i8* %85, align 2
  %87 = getelementptr inbounds %struct.uint8v8_t, %struct.uint8v8_t* %10, i64 0, i32 0, i64 6
  %88 = load i8, i8* %87, align 2
  %89 = zext i8 %86 to i16
  %90 = zext i8 %88 to i16
  %91 = add nuw nsw i16 %89, 1
  %92 = add nuw nsw i16 %91, %90
  %93 = lshr i16 %92, 1
  %94 = trunc i16 %93 to i8
  call void @llvm.lifetime.start(i64 8, i8* nonnull %13)
  store i64 %84, i64* %6, align 8
  %95 = getelementptr inbounds [8 x i8], [8 x i8]* %14, i64 0, i64 6
  store i8 %94, i8* %95, align 2
  %96 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %13)
  %97 = getelementptr inbounds %struct.uint8v8_t, %struct.uint8v8_t* %8, i64 0, i32 0, i64 7
  %98 = load i8, i8* %97, align 1
  %99 = getelementptr inbounds %struct.uint8v8_t, %struct.uint8v8_t* %10, i64 0, i32 0, i64 7
  %100 = load i8, i8* %99, align 1
  %101 = zext i8 %98 to i16
  %102 = zext i8 %100 to i16
  %103 = add nuw nsw i16 %101, 1
  %104 = add nuw nsw i16 %103, %102
  %105 = lshr i16 %104, 1
  %106 = trunc i16 %105 to i8
  call void @llvm.lifetime.start(i64 8, i8* nonnull %13)
  store i64 %96, i64* %6, align 8
  %107 = getelementptr inbounds [8 x i8], [8 x i8]* %14, i64 0, i64 7
  store i8 %106, i8* %107, align 1
  %108 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %13)
  %109 = lshr i64 %108, 8
  %110 = lshr i64 %108, 16
  %111 = lshr i64 %108, 24
  %112 = lshr i64 %108, 32
  %113 = lshr i64 %108, 40
  %114 = lshr i64 %108, 48
  %115 = lshr i64 %108, 56
  %116 = trunc i64 %108 to i8
  %117 = trunc i64 %109 to i8
  %118 = trunc i64 %110 to i8
  %119 = trunc i64 %111 to i8
  %120 = trunc i64 %112 to i8
  %121 = trunc i64 %113 to i8
  %122 = trunc i64 %114 to i8
  %123 = trunc i64 %115 to i8
  %124 = bitcast i64* %2 to [8 x i8]*
  %125 = bitcast i64* %2 to i8*
  store i8 %116, i8* %125, align 1
  %126 = getelementptr inbounds [8 x i8], [8 x i8]* %124, i64 0, i64 1
  store i8 %117, i8* %126, align 1
  %127 = getelementptr inbounds [8 x i8], [8 x i8]* %124, i64 0, i64 2
  store i8 %118, i8* %127, align 1
  %128 = getelementptr inbounds [8 x i8], [8 x i8]* %124, i64 0, i64 3
  store i8 %119, i8* %128, align 1
  %129 = getelementptr inbounds [8 x i8], [8 x i8]* %124, i64 0, i64 4
  store i8 %120, i8* %129, align 1
  %130 = getelementptr inbounds [8 x i8], [8 x i8]* %124, i64 0, i64 5
  store i8 %121, i8* %130, align 1
  %131 = getelementptr inbounds [8 x i8], [8 x i8]* %124, i64 0, i64 6
  store i8 %122, i8* %131, align 1
  %132 = getelementptr inbounds [8 x i8], [8 x i8]* %124, i64 0, i64 7
  store i8 %123, i8* %132, align 1
  call void @llvm.lifetime.end(i64 8, i8* nonnull %12) 
  call void @llvm.lifetime.end(i64 8, i8* nonnull %11) 
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L5PAVGBI4RVnWI7vec64_tE3RVnIS2_E3MVnIS2_EEEP6MemoryS9_R5StateT_T0_T1_(%struct.Memory* returned, %struct.State* nocapture readnone dereferenceable(3376), i64* nocapture, i64, i64)  {
  %6 = alloca i64, align 8
  %7 = alloca i64, align 8
  %8 = bitcast i64* %7 to %struct.uint8v8_t*
  %9 = alloca i64, align 8
  %10 = bitcast i64* %9 to %struct.uint8v8_t*
  %11 = bitcast i64* %7 to i8*
  call void @llvm.lifetime.start(i64 8, i8* nonnull %11) 
  store i64 %3, i64* %7, align 8
  %12 = bitcast i64* %9 to i8*
  call void @llvm.lifetime.start(i64 8, i8* nonnull %12) 
  %13 = inttoptr i64 %4 to i8*
  %14 = load i8, i8* %13
  %15 = add i64 %4, 1
  %16 = inttoptr i64 %15 to i8*
  %17 = load i8, i8* %16
  %18 = add i64 %4, 2
  %19 = inttoptr i64 %18 to i8*
  %20 = load i8, i8* %19
  %21 = add i64 %4, 3
  %22 = inttoptr i64 %21 to i8*
  %23 = load i8, i8* %22
  %24 = add i64 %4, 4
  %25 = inttoptr i64 %24 to i8*
  %26 = load i8, i8* %25
  %27 = add i64 %4, 5
  %28 = inttoptr i64 %27 to i8*
  %29 = load i8, i8* %28
  %30 = add i64 %4, 6
  %31 = inttoptr i64 %30 to i8*
  %32 = load i8, i8* %31
  %33 = add i64 %4, 7
  %34 = inttoptr i64 %33 to i8*
  %35 = load i8, i8* %34
  %36 = zext i8 %35 to i64
  %37 = shl nuw i64 %36, 56
  %38 = zext i8 %32 to i64
  %39 = shl nuw nsw i64 %38, 48
  %40 = zext i8 %29 to i64
  %41 = shl nuw nsw i64 %40, 40
  %42 = zext i8 %26 to i64
  %43 = shl nuw nsw i64 %42, 32
  %44 = zext i8 %23 to i64
  %45 = shl nuw nsw i64 %44, 24
  %46 = zext i8 %20 to i64
  %47 = shl nuw nsw i64 %46, 16
  %48 = zext i8 %17 to i64
  %49 = shl nuw nsw i64 %48, 8
  %50 = zext i8 %14 to i64
  %51 = or i64 %49, %50
  %52 = or i64 %51, %47
  %53 = or i64 %52, %45
  %54 = or i64 %53, %43
  %55 = or i64 %54, %41
  %56 = or i64 %55, %39
  %57 = or i64 %56, %37
  store i64 %57, i64* %9, align 8
  %58 = bitcast i64* %6 to i8*
  %59 = bitcast i64* %6 to [8 x i8]*
  %60 = trunc i64 %3 to i16
  %61 = and i16 %60, 255
  %62 = zext i8 %14 to i16
  %63 = add nuw nsw i16 %61, 1
  %64 = add nuw nsw i16 %63, %62
  %65 = lshr i16 %64, 1
  %66 = trunc i16 %65 to i8
  call void @llvm.lifetime.start(i64 8, i8* nonnull %58)
  store i64 0, i64* %6, align 8
  %67 = bitcast i64* %6 to i8*
  store i8 %66, i8* %67, align 8
  %68 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %58)
  %69 = lshr i64 %3, 8
  %70 = trunc i64 %69 to i16
  %71 = zext i8 %17 to i16
  %72 = and i16 %70, 255
  %73 = add nuw nsw i16 %72, 1
  %74 = add nuw nsw i16 %73, %71
  %75 = lshr i16 %74, 1
  %76 = trunc i16 %75 to i8
  call void @llvm.lifetime.start(i64 8, i8* nonnull %58)
  store i64 %68, i64* %6, align 8
  %77 = getelementptr inbounds [8 x i8], [8 x i8]* %59, i64 0, i64 1
  store i8 %76, i8* %77, align 1
  %78 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %58)
  %79 = getelementptr inbounds %struct.uint8v8_t, %struct.uint8v8_t* %8, i64 0, i32 0, i64 2
  %80 = load i8, i8* %79, align 2
  %81 = zext i8 %20 to i16
  %82 = zext i8 %80 to i16
  %83 = add nuw nsw i16 %82, 1
  %84 = add nuw nsw i16 %83, %81
  %85 = lshr i16 %84, 1
  %86 = trunc i16 %85 to i8
  call void @llvm.lifetime.start(i64 8, i8* nonnull %58)
  store i64 %78, i64* %6, align 8
  %87 = getelementptr inbounds [8 x i8], [8 x i8]* %59, i64 0, i64 2
  store i8 %86, i8* %87, align 2
  %88 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %58)
  %89 = getelementptr inbounds %struct.uint8v8_t, %struct.uint8v8_t* %8, i64 0, i32 0, i64 3
  %90 = load i8, i8* %89, align 1
  %91 = getelementptr inbounds %struct.uint8v8_t, %struct.uint8v8_t* %10, i64 0, i32 0, i64 3
  %92 = load i8, i8* %91, align 1
  %93 = zext i8 %90 to i16
  %94 = zext i8 %92 to i16
  %95 = add nuw nsw i16 %93, 1
  %96 = add nuw nsw i16 %95, %94
  %97 = lshr i16 %96, 1
  %98 = trunc i16 %97 to i8
  call void @llvm.lifetime.start(i64 8, i8* nonnull %58)
  store i64 %88, i64* %6, align 8
  %99 = getelementptr inbounds [8 x i8], [8 x i8]* %59, i64 0, i64 3
  store i8 %98, i8* %99, align 1
  %100 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %58)
  %101 = getelementptr inbounds %struct.uint8v8_t, %struct.uint8v8_t* %8, i64 0, i32 0, i64 4
  %102 = load i8, i8* %101, align 4
  %103 = getelementptr inbounds %struct.uint8v8_t, %struct.uint8v8_t* %10, i64 0, i32 0, i64 4
  %104 = load i8, i8* %103, align 4
  %105 = zext i8 %102 to i16
  %106 = zext i8 %104 to i16
  %107 = add nuw nsw i16 %105, 1
  %108 = add nuw nsw i16 %107, %106
  %109 = lshr i16 %108, 1
  %110 = trunc i16 %109 to i8
  call void @llvm.lifetime.start(i64 8, i8* nonnull %58)
  store i64 %100, i64* %6, align 8
  %111 = getelementptr inbounds [8 x i8], [8 x i8]* %59, i64 0, i64 4
  store i8 %110, i8* %111, align 4
  %112 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %58)
  %113 = getelementptr inbounds %struct.uint8v8_t, %struct.uint8v8_t* %8, i64 0, i32 0, i64 5
  %114 = load i8, i8* %113, align 1
  %115 = getelementptr inbounds %struct.uint8v8_t, %struct.uint8v8_t* %10, i64 0, i32 0, i64 5
  %116 = load i8, i8* %115, align 1
  %117 = zext i8 %114 to i16
  %118 = zext i8 %116 to i16
  %119 = add nuw nsw i16 %117, 1
  %120 = add nuw nsw i16 %119, %118
  %121 = lshr i16 %120, 1
  %122 = trunc i16 %121 to i8
  call void @llvm.lifetime.start(i64 8, i8* nonnull %58)
  store i64 %112, i64* %6, align 8
  %123 = getelementptr inbounds [8 x i8], [8 x i8]* %59, i64 0, i64 5
  store i8 %122, i8* %123, align 1
  %124 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %58)
  %125 = getelementptr inbounds %struct.uint8v8_t, %struct.uint8v8_t* %8, i64 0, i32 0, i64 6
  %126 = load i8, i8* %125, align 2
  %127 = getelementptr inbounds %struct.uint8v8_t, %struct.uint8v8_t* %10, i64 0, i32 0, i64 6
  %128 = load i8, i8* %127, align 2
  %129 = zext i8 %126 to i16
  %130 = zext i8 %128 to i16
  %131 = add nuw nsw i16 %129, 1
  %132 = add nuw nsw i16 %131, %130
  %133 = lshr i16 %132, 1
  %134 = trunc i16 %133 to i8
  call void @llvm.lifetime.start(i64 8, i8* nonnull %58)
  store i64 %124, i64* %6, align 8
  %135 = getelementptr inbounds [8 x i8], [8 x i8]* %59, i64 0, i64 6
  store i8 %134, i8* %135, align 2
  %136 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %58)
  %137 = getelementptr inbounds %struct.uint8v8_t, %struct.uint8v8_t* %8, i64 0, i32 0, i64 7
  %138 = load i8, i8* %137, align 1
  %139 = getelementptr inbounds %struct.uint8v8_t, %struct.uint8v8_t* %10, i64 0, i32 0, i64 7
  %140 = load i8, i8* %139, align 1
  %141 = zext i8 %138 to i16
  %142 = zext i8 %140 to i16
  %143 = add nuw nsw i16 %141, 1
  %144 = add nuw nsw i16 %143, %142
  %145 = lshr i16 %144, 1
  %146 = trunc i16 %145 to i8
  call void @llvm.lifetime.start(i64 8, i8* nonnull %58)
  store i64 %136, i64* %6, align 8
  %147 = getelementptr inbounds [8 x i8], [8 x i8]* %59, i64 0, i64 7
  store i8 %146, i8* %147, align 1
  %148 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %58)
  %149 = lshr i64 %148, 8
  %150 = lshr i64 %148, 16
  %151 = lshr i64 %148, 24
  %152 = lshr i64 %148, 32
  %153 = lshr i64 %148, 40
  %154 = lshr i64 %148, 48
  %155 = lshr i64 %148, 56
  %156 = trunc i64 %148 to i8
  %157 = trunc i64 %149 to i8
  %158 = trunc i64 %150 to i8
  %159 = trunc i64 %151 to i8
  %160 = trunc i64 %152 to i8
  %161 = trunc i64 %153 to i8
  %162 = trunc i64 %154 to i8
  %163 = trunc i64 %155 to i8
  %164 = bitcast i64* %2 to [8 x i8]*
  %165 = bitcast i64* %2 to i8*
  store i8 %156, i8* %165, align 1
  %166 = getelementptr inbounds [8 x i8], [8 x i8]* %164, i64 0, i64 1
  store i8 %157, i8* %166, align 1
  %167 = getelementptr inbounds [8 x i8], [8 x i8]* %164, i64 0, i64 2
  store i8 %158, i8* %167, align 1
  %168 = getelementptr inbounds [8 x i8], [8 x i8]* %164, i64 0, i64 3
  store i8 %159, i8* %168, align 1
  %169 = getelementptr inbounds [8 x i8], [8 x i8]* %164, i64 0, i64 4
  store i8 %160, i8* %169, align 1
  %170 = getelementptr inbounds [8 x i8], [8 x i8]* %164, i64 0, i64 5
  store i8 %161, i8* %170, align 1
  %171 = getelementptr inbounds [8 x i8], [8 x i8]* %164, i64 0, i64 6
  store i8 %162, i8* %171, align 1
  %172 = getelementptr inbounds [8 x i8], [8 x i8]* %164, i64 0, i64 7
  store i8 %163, i8* %172, align 1
  call void @llvm.lifetime.end(i64 8, i8* nonnull %12) 
  call void @llvm.lifetime.end(i64 8, i8* nonnull %11) 
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L5PAVGBI3VnWI8vec128_tE2VnIS2_ES5_EEP6MemoryS7_R5StateT_T0_T1_(%struct.Memory* readnone returned, %struct.State* nocapture readnone dereferenceable(3376), i8* nocapture, i8* nocapture readonly, i8* nocapture readonly)  {
  %6 = alloca <2 x i64>, align 16
  %7 = bitcast <2 x i64>* %6 to { i64, i64 }*
  %8 = alloca <2 x i64>, align 16
  %9 = bitcast <2 x i64>* %8 to { i64, i64 }*
  %10 = bitcast <2 x i64>* %8 to %struct.uint8v16_t*
  %11 = alloca <2 x i64>, align 16
  %12 = bitcast <2 x i64>* %11 to { i64, i64 }*
  %13 = bitcast <2 x i64>* %11 to %struct.uint8v16_t*
  %14 = bitcast <2 x i64>* %8 to i8*
  call void @llvm.lifetime.start(i64 16, i8* nonnull %14) 
  %15 = bitcast i8* %3 to <2 x i64>*
  %16 = load <2 x i64>, <2 x i64>* %15, align 1
  store <2 x i64> %16, <2 x i64>* %8, align 16
  %17 = bitcast <2 x i64>* %11 to i8*
  call void @llvm.lifetime.start(i64 16, i8* nonnull %17) 
  %18 = bitcast i8* %4 to <2 x i64>*
  %19 = load <2 x i64>, <2 x i64>* %18, align 1
  store <2 x i64> %19, <2 x i64>* %11, align 16
  %20 = bitcast <2 x i64>* %6 to i8*
  %21 = getelementptr inbounds <2 x i64>, <2 x i64>* %6, i64 0, i64 0
  %22 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %7, i64 0, i32 1
  %23 = bitcast <2 x i64>* %6 to [16 x i8]*
  %24 = extractelement <2 x i64> %16, i32 0
  %25 = trunc i64 %24 to i16
  %26 = extractelement <2 x i64> %19, i32 0
  %27 = trunc i64 %26 to i16
  %28 = and i16 %25, 255
  %29 = and i16 %27, 255
  %30 = add nuw nsw i16 %28, 1
  %31 = add nuw nsw i16 %30, %29
  %32 = lshr i16 %31, 1
  %33 = trunc i16 %32 to i8
  call void @llvm.lifetime.start(i64 16, i8* nonnull %20)
  store <2 x i64> zeroinitializer, <2 x i64>* %6, align 16
  %34 = bitcast <2 x i64>* %6 to i8*
  store i8 %33, i8* %34, align 16
  %35 = load i64, i64* %21, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %20)
  %36 = lshr i64 %24, 8
  %37 = trunc i64 %36 to i16
  %38 = lshr i64 %26, 8
  %39 = trunc i64 %38 to i16
  %40 = and i16 %37, 255
  %41 = and i16 %39, 255
  %42 = add nuw nsw i16 %40, 1
  %43 = add nuw nsw i16 %42, %41
  %44 = lshr i16 %43, 1
  %45 = trunc i16 %44 to i8
  call void @llvm.lifetime.start(i64 16, i8* nonnull %20)
  store i64 %35, i64* %21, align 16
  store i64 0, i64* %22, align 8
  %46 = getelementptr inbounds [16 x i8], [16 x i8]* %23, i64 0, i64 1
  store i8 %45, i8* %46, align 1
  %47 = load i64, i64* %21, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %20)
  %48 = lshr i64 %24, 16
  %49 = trunc i64 %48 to i16
  %50 = lshr i64 %26, 16
  %51 = trunc i64 %50 to i16
  %52 = and i16 %49, 255
  %53 = and i16 %51, 255
  %54 = add nuw nsw i16 %52, 1
  %55 = add nuw nsw i16 %54, %53
  %56 = lshr i16 %55, 1
  %57 = trunc i16 %56 to i8
  call void @llvm.lifetime.start(i64 16, i8* nonnull %20)
  store i64 %47, i64* %21, align 16
  store i64 0, i64* %22, align 8
  %58 = getelementptr inbounds [16 x i8], [16 x i8]* %23, i64 0, i64 2
  store i8 %57, i8* %58, align 2
  %59 = load i64, i64* %21, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %20)
  %60 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %10, i64 0, i32 0, i64 3
  %61 = load i8, i8* %60, align 1
  %62 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %13, i64 0, i32 0, i64 3
  %63 = load i8, i8* %62, align 1
  %64 = zext i8 %61 to i16
  %65 = zext i8 %63 to i16
  %66 = add nuw nsw i16 %64, 1
  %67 = add nuw nsw i16 %66, %65
  %68 = lshr i16 %67, 1
  %69 = trunc i16 %68 to i8
  call void @llvm.lifetime.start(i64 16, i8* nonnull %20)
  store i64 %59, i64* %21, align 16
  store i64 0, i64* %22, align 8
  %70 = getelementptr inbounds [16 x i8], [16 x i8]* %23, i64 0, i64 3
  store i8 %69, i8* %70, align 1
  %71 = load i64, i64* %21, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %20)
  %72 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %10, i64 0, i32 0, i64 4
  %73 = load i8, i8* %72, align 4
  %74 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %13, i64 0, i32 0, i64 4
  %75 = load i8, i8* %74, align 4
  %76 = zext i8 %73 to i16
  %77 = zext i8 %75 to i16
  %78 = add nuw nsw i16 %76, 1
  %79 = add nuw nsw i16 %78, %77
  %80 = lshr i16 %79, 1
  %81 = trunc i16 %80 to i8
  call void @llvm.lifetime.start(i64 16, i8* nonnull %20)
  store i64 %71, i64* %21, align 16
  store i64 0, i64* %22, align 8
  %82 = getelementptr inbounds [16 x i8], [16 x i8]* %23, i64 0, i64 4
  store i8 %81, i8* %82, align 4
  %83 = load i64, i64* %21, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %20)
  %84 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %10, i64 0, i32 0, i64 5
  %85 = load i8, i8* %84, align 1
  %86 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %13, i64 0, i32 0, i64 5
  %87 = load i8, i8* %86, align 1
  %88 = zext i8 %85 to i16
  %89 = zext i8 %87 to i16
  %90 = add nuw nsw i16 %88, 1
  %91 = add nuw nsw i16 %90, %89
  %92 = lshr i16 %91, 1
  %93 = trunc i16 %92 to i8
  call void @llvm.lifetime.start(i64 16, i8* nonnull %20)
  store i64 %83, i64* %21, align 16
  store i64 0, i64* %22, align 8
  %94 = getelementptr inbounds [16 x i8], [16 x i8]* %23, i64 0, i64 5
  store i8 %93, i8* %94, align 1
  %95 = load i64, i64* %21, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %20)
  %96 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %10, i64 0, i32 0, i64 6
  %97 = load i8, i8* %96, align 2
  %98 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %13, i64 0, i32 0, i64 6
  %99 = load i8, i8* %98, align 2
  %100 = zext i8 %97 to i16
  %101 = zext i8 %99 to i16
  %102 = add nuw nsw i16 %100, 1
  %103 = add nuw nsw i16 %102, %101
  %104 = lshr i16 %103, 1
  %105 = trunc i16 %104 to i8
  call void @llvm.lifetime.start(i64 16, i8* nonnull %20)
  store i64 %95, i64* %21, align 16
  store i64 0, i64* %22, align 8
  %106 = getelementptr inbounds [16 x i8], [16 x i8]* %23, i64 0, i64 6
  store i8 %105, i8* %106, align 2
  %107 = load i64, i64* %21, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %20)
  %108 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %10, i64 0, i32 0, i64 7
  %109 = load i8, i8* %108, align 1
  %110 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %13, i64 0, i32 0, i64 7
  %111 = load i8, i8* %110, align 1
  %112 = zext i8 %109 to i16
  %113 = zext i8 %111 to i16
  %114 = add nuw nsw i16 %112, 1
  %115 = add nuw nsw i16 %114, %113
  %116 = lshr i16 %115, 1
  %117 = trunc i16 %116 to i8
  call void @llvm.lifetime.start(i64 16, i8* nonnull %20)
  store i64 %107, i64* %21, align 16
  store i64 0, i64* %22, align 8
  %118 = getelementptr inbounds [16 x i8], [16 x i8]* %23, i64 0, i64 7
  store i8 %117, i8* %118, align 1
  %119 = load i64, i64* %21, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %20)
  %120 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %9, i64 0, i32 1
  %121 = bitcast i64* %120 to i8*
  %122 = load i8, i8* %121, align 8
  %123 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %12, i64 0, i32 1
  %124 = bitcast i64* %123 to i8*
  %125 = load i8, i8* %124, align 8
  %126 = zext i8 %122 to i16
  %127 = zext i8 %125 to i16
  %128 = add nuw nsw i16 %126, 1
  %129 = add nuw nsw i16 %128, %127
  %130 = lshr i16 %129, 1
  %131 = trunc i16 %130 to i8
  call void @llvm.lifetime.start(i64 16, i8* nonnull %20)
  store i64 %119, i64* %21, align 16
  store i64 0, i64* %22, align 8
  %132 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %7, i64 0, i32 1
  %133 = bitcast i64* %132 to i8*
  store i8 %131, i8* %133, align 8
  %134 = load i64, i64* %22, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %20)
  %135 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %10, i64 0, i32 0, i64 9
  %136 = load i8, i8* %135, align 1
  %137 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %13, i64 0, i32 0, i64 9
  %138 = load i8, i8* %137, align 1
  %139 = zext i8 %136 to i16
  %140 = zext i8 %138 to i16
  %141 = add nuw nsw i16 %139, 1
  %142 = add nuw nsw i16 %141, %140
  %143 = lshr i16 %142, 1
  %144 = trunc i16 %143 to i8
  call void @llvm.lifetime.start(i64 16, i8* nonnull %20)
  store i64 %119, i64* %21, align 16
  store i64 %134, i64* %22, align 8
  %145 = getelementptr inbounds [16 x i8], [16 x i8]* %23, i64 0, i64 9
  store i8 %144, i8* %145, align 1
  %146 = load i64, i64* %22, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %20)
  %147 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %10, i64 0, i32 0, i64 10
  %148 = load i8, i8* %147, align 2
  %149 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %13, i64 0, i32 0, i64 10
  %150 = load i8, i8* %149, align 2
  %151 = zext i8 %148 to i16
  %152 = zext i8 %150 to i16
  %153 = add nuw nsw i16 %151, 1
  %154 = add nuw nsw i16 %153, %152
  %155 = lshr i16 %154, 1
  %156 = trunc i16 %155 to i8
  call void @llvm.lifetime.start(i64 16, i8* nonnull %20)
  store i64 %119, i64* %21, align 16
  store i64 %146, i64* %22, align 8
  %157 = getelementptr inbounds [16 x i8], [16 x i8]* %23, i64 0, i64 10
  store i8 %156, i8* %157, align 2
  %158 = load i64, i64* %22, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %20)
  %159 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %10, i64 0, i32 0, i64 11
  %160 = load i8, i8* %159, align 1
  %161 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %13, i64 0, i32 0, i64 11
  %162 = load i8, i8* %161, align 1
  %163 = zext i8 %160 to i16
  %164 = zext i8 %162 to i16
  %165 = add nuw nsw i16 %163, 1
  %166 = add nuw nsw i16 %165, %164
  %167 = lshr i16 %166, 1
  %168 = trunc i16 %167 to i8
  call void @llvm.lifetime.start(i64 16, i8* nonnull %20)
  store i64 %119, i64* %21, align 16
  store i64 %158, i64* %22, align 8
  %169 = getelementptr inbounds [16 x i8], [16 x i8]* %23, i64 0, i64 11
  store i8 %168, i8* %169, align 1
  %170 = load i64, i64* %22, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %20)
  %171 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %10, i64 0, i32 0, i64 12
  %172 = load i8, i8* %171, align 4
  %173 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %13, i64 0, i32 0, i64 12
  %174 = load i8, i8* %173, align 4
  %175 = zext i8 %172 to i16
  %176 = zext i8 %174 to i16
  %177 = add nuw nsw i16 %175, 1
  %178 = add nuw nsw i16 %177, %176
  %179 = lshr i16 %178, 1
  %180 = trunc i16 %179 to i8
  call void @llvm.lifetime.start(i64 16, i8* nonnull %20)
  store i64 %119, i64* %21, align 16
  store i64 %170, i64* %22, align 8
  %181 = getelementptr inbounds [16 x i8], [16 x i8]* %23, i64 0, i64 12
  store i8 %180, i8* %181, align 4
  %182 = load i64, i64* %22, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %20)
  %183 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %10, i64 0, i32 0, i64 13
  %184 = load i8, i8* %183, align 1
  %185 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %13, i64 0, i32 0, i64 13
  %186 = load i8, i8* %185, align 1
  %187 = zext i8 %184 to i16
  %188 = zext i8 %186 to i16
  %189 = add nuw nsw i16 %187, 1
  %190 = add nuw nsw i16 %189, %188
  %191 = lshr i16 %190, 1
  %192 = trunc i16 %191 to i8
  call void @llvm.lifetime.start(i64 16, i8* nonnull %20)
  store i64 %119, i64* %21, align 16
  store i64 %182, i64* %22, align 8
  %193 = getelementptr inbounds [16 x i8], [16 x i8]* %23, i64 0, i64 13
  store i8 %192, i8* %193, align 1
  %194 = load i64, i64* %22, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %20)
  %195 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %10, i64 0, i32 0, i64 14
  %196 = load i8, i8* %195, align 2
  %197 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %13, i64 0, i32 0, i64 14
  %198 = load i8, i8* %197, align 2
  %199 = zext i8 %196 to i16
  %200 = zext i8 %198 to i16
  %201 = add nuw nsw i16 %199, 1
  %202 = add nuw nsw i16 %201, %200
  %203 = lshr i16 %202, 1
  %204 = trunc i16 %203 to i8
  call void @llvm.lifetime.start(i64 16, i8* nonnull %20)
  store i64 %119, i64* %21, align 16
  store i64 %194, i64* %22, align 8
  %205 = getelementptr inbounds [16 x i8], [16 x i8]* %23, i64 0, i64 14
  store i8 %204, i8* %205, align 2
  %206 = load i64, i64* %22, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %20)
  %207 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %10, i64 0, i32 0, i64 15
  %208 = load i8, i8* %207, align 1
  %209 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %13, i64 0, i32 0, i64 15
  %210 = load i8, i8* %209, align 1
  %211 = zext i8 %208 to i16
  %212 = zext i8 %210 to i16
  %213 = add nuw nsw i16 %211, 1
  %214 = add nuw nsw i16 %213, %212
  %215 = lshr i16 %214, 1
  %216 = trunc i16 %215 to i8
  call void @llvm.lifetime.start(i64 16, i8* nonnull %20)
  store i64 %119, i64* %21, align 16
  store i64 %206, i64* %22, align 8
  %217 = getelementptr inbounds [16 x i8], [16 x i8]* %23, i64 0, i64 15
  store i8 %216, i8* %217, align 1
  %218 = load i64, i64* %22, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %20)
  %219 = lshr i64 %119, 8
  %220 = lshr i64 %119, 16
  %221 = lshr i64 %119, 24
  %222 = lshr i64 %119, 32
  %223 = lshr i64 %119, 40
  %224 = lshr i64 %119, 48
  %225 = lshr i64 %119, 56
  %226 = trunc i64 %119 to i8
  %227 = trunc i64 %219 to i8
  %228 = trunc i64 %220 to i8
  %229 = trunc i64 %221 to i8
  %230 = trunc i64 %222 to i8
  %231 = trunc i64 %223 to i8
  %232 = trunc i64 %224 to i8
  %233 = trunc i64 %225 to i8
  store i8 %226, i8* %2, align 1
  %234 = getelementptr inbounds i8, i8* %2, i64 1
  store i8 %227, i8* %234, align 1
  %235 = getelementptr inbounds i8, i8* %2, i64 2
  store i8 %228, i8* %235, align 1
  %236 = getelementptr inbounds i8, i8* %2, i64 3
  store i8 %229, i8* %236, align 1
  %237 = getelementptr inbounds i8, i8* %2, i64 4
  store i8 %230, i8* %237, align 1
  %238 = getelementptr inbounds i8, i8* %2, i64 5
  store i8 %231, i8* %238, align 1
  %239 = getelementptr inbounds i8, i8* %2, i64 6
  store i8 %232, i8* %239, align 1
  %240 = getelementptr inbounds i8, i8* %2, i64 7
  store i8 %233, i8* %240, align 1
  %241 = trunc i64 %218 to i8
  %242 = getelementptr inbounds i8, i8* %2, i64 8
  store i8 %241, i8* %242, align 1
  %243 = lshr i64 %218, 8
  %244 = trunc i64 %243 to i8
  %245 = getelementptr inbounds i8, i8* %2, i64 9
  store i8 %244, i8* %245, align 1
  %246 = lshr i64 %218, 16
  %247 = trunc i64 %246 to i8
  %248 = getelementptr inbounds i8, i8* %2, i64 10
  store i8 %247, i8* %248, align 1
  %249 = lshr i64 %218, 24
  %250 = trunc i64 %249 to i8
  %251 = getelementptr inbounds i8, i8* %2, i64 11
  store i8 %250, i8* %251, align 1
  %252 = lshr i64 %218, 32
  %253 = trunc i64 %252 to i8
  %254 = getelementptr inbounds i8, i8* %2, i64 12
  store i8 %253, i8* %254, align 1
  %255 = lshr i64 %218, 40
  %256 = trunc i64 %255 to i8
  %257 = getelementptr inbounds i8, i8* %2, i64 13
  store i8 %256, i8* %257, align 1
  %258 = lshr i64 %218, 48
  %259 = trunc i64 %258 to i8
  %260 = getelementptr inbounds i8, i8* %2, i64 14
  store i8 %259, i8* %260, align 1
  %261 = lshr i64 %218, 56
  %262 = trunc i64 %261 to i8
  %263 = getelementptr inbounds i8, i8* %2, i64 15
  store i8 %262, i8* %263, align 1
  call void @llvm.lifetime.end(i64 16, i8* nonnull %17) 
  call void @llvm.lifetime.end(i64 16, i8* nonnull %14) 
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L5PAVGBI3VnWI8vec128_tE2VnIS2_E3MVnIS2_EEEP6MemoryS9_R5StateT_T0_T1_(%struct.Memory* returned, %struct.State* nocapture readnone dereferenceable(3376), i8* nocapture, i8* nocapture readonly, i64)  {
  %6 = alloca <2 x i64>, align 16
  %7 = bitcast <2 x i64>* %6 to { i64, i64 }*
  %8 = alloca <2 x i64>, align 16
  %9 = bitcast <2 x i64>* %8 to { i64, i64 }*
  %10 = bitcast <2 x i64>* %8 to %struct.uint8v16_t*
  %11 = alloca <2 x i64>, align 16
  %12 = bitcast <2 x i64>* %11 to { i64, i64 }*
  %13 = bitcast <2 x i64>* %11 to %struct.uint8v16_t*
  %14 = bitcast <2 x i64>* %8 to i8*
  call void @llvm.lifetime.start(i64 16, i8* nonnull %14) 
  %15 = bitcast i8* %3 to <2 x i64>*
  %16 = load <2 x i64>, <2 x i64>* %15, align 1
  store <2 x i64> %16, <2 x i64>* %8, align 16
  %17 = bitcast <2 x i64>* %11 to i8*
  call void @llvm.lifetime.start(i64 16, i8* nonnull %17) 
  %18 = inttoptr i64 %4 to i8*
  %19 = load i8, i8* %18
  %20 = add i64 %4, 1
  %21 = inttoptr i64 %20 to i8*
  %22 = load i8, i8* %21
  %23 = add i64 %4, 2
  %24 = inttoptr i64 %23 to i8*
  %25 = load i8, i8* %24
  %26 = add i64 %4, 3
  %27 = inttoptr i64 %26 to i8*
  %28 = load i8, i8* %27
  %29 = add i64 %4, 4
  %30 = inttoptr i64 %29 to i8*
  %31 = load i8, i8* %30
  %32 = add i64 %4, 5
  %33 = inttoptr i64 %32 to i8*
  %34 = load i8, i8* %33
  %35 = add i64 %4, 6
  %36 = inttoptr i64 %35 to i8*
  %37 = load i8, i8* %36
  %38 = add i64 %4, 7
  %39 = inttoptr i64 %38 to i8*
  %40 = load i8, i8* %39
  %41 = add i64 %4, 8
  %42 = inttoptr i64 %41 to i8*
  %43 = load i8, i8* %42
  %44 = add i64 %4, 9
  %45 = inttoptr i64 %44 to i8*
  %46 = load i8, i8* %45
  %47 = add i64 %4, 10
  %48 = inttoptr i64 %47 to i8*
  %49 = load i8, i8* %48
  %50 = add i64 %4, 11
  %51 = inttoptr i64 %50 to i8*
  %52 = load i8, i8* %51
  %53 = add i64 %4, 12
  %54 = inttoptr i64 %53 to i8*
  %55 = load i8, i8* %54
  %56 = add i64 %4, 13
  %57 = inttoptr i64 %56 to i8*
  %58 = load i8, i8* %57
  %59 = add i64 %4, 14
  %60 = inttoptr i64 %59 to i8*
  %61 = load i8, i8* %60
  %62 = add i64 %4, 15
  %63 = inttoptr i64 %62 to i8*
  %64 = load i8, i8* %63
  %65 = insertelement <2 x i8> undef, i8 %40, i32 0
  %66 = insertelement <2 x i8> %65, i8 %64, i32 1
  %67 = zext <2 x i8> %66 to <2 x i64>
  %68 = shl nuw <2 x i64> %67, <i64 56, i64 56>
  %69 = insertelement <2 x i8> undef, i8 %37, i32 0
  %70 = insertelement <2 x i8> %69, i8 %61, i32 1
  %71 = zext <2 x i8> %70 to <2 x i64>
  %72 = shl nuw nsw <2 x i64> %71, <i64 48, i64 48>
  %73 = insertelement <2 x i8> undef, i8 %34, i32 0
  %74 = insertelement <2 x i8> %73, i8 %58, i32 1
  %75 = zext <2 x i8> %74 to <2 x i64>
  %76 = shl nuw nsw <2 x i64> %75, <i64 40, i64 40>
  %77 = insertelement <2 x i8> undef, i8 %31, i32 0
  %78 = insertelement <2 x i8> %77, i8 %55, i32 1
  %79 = zext <2 x i8> %78 to <2 x i64>
  %80 = shl nuw nsw <2 x i64> %79, <i64 32, i64 32>
  %81 = insertelement <2 x i8> undef, i8 %28, i32 0
  %82 = insertelement <2 x i8> %81, i8 %52, i32 1
  %83 = zext <2 x i8> %82 to <2 x i64>
  %84 = shl nuw nsw <2 x i64> %83, <i64 24, i64 24>
  %85 = insertelement <2 x i8> undef, i8 %25, i32 0
  %86 = insertelement <2 x i8> %85, i8 %49, i32 1
  %87 = zext <2 x i8> %86 to <2 x i64>
  %88 = shl nuw nsw <2 x i64> %87, <i64 16, i64 16>
  %89 = insertelement <2 x i8> undef, i8 %22, i32 0
  %90 = insertelement <2 x i8> %89, i8 %46, i32 1
  %91 = zext <2 x i8> %90 to <2 x i64>
  %92 = shl nuw nsw <2 x i64> %91, <i64 8, i64 8>
  %93 = insertelement <2 x i8> undef, i8 %19, i32 0
  %94 = insertelement <2 x i8> %93, i8 %43, i32 1
  %95 = zext <2 x i8> %94 to <2 x i64>
  %96 = or <2 x i64> %92, %95
  %97 = or <2 x i64> %96, %88
  %98 = or <2 x i64> %97, %84
  %99 = or <2 x i64> %98, %80
  %100 = or <2 x i64> %99, %76
  %101 = or <2 x i64> %100, %72
  %102 = or <2 x i64> %101, %68
  store <2 x i64> %102, <2 x i64>* %11, align 16
  %103 = bitcast <2 x i64>* %6 to i8*
  %104 = getelementptr inbounds <2 x i64>, <2 x i64>* %6, i64 0, i64 0
  %105 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %7, i64 0, i32 1
  %106 = bitcast <2 x i64>* %6 to [16 x i8]*
  %107 = extractelement <2 x i64> %16, i32 0
  %108 = trunc i64 %107 to i16
  %109 = and i16 %108, 255
  %110 = zext i8 %19 to i16
  %111 = add nuw nsw i16 %109, 1
  %112 = add nuw nsw i16 %111, %110
  %113 = lshr i16 %112, 1
  %114 = trunc i16 %113 to i8
  call void @llvm.lifetime.start(i64 16, i8* nonnull %103)
  store <2 x i64> zeroinitializer, <2 x i64>* %6, align 16
  %115 = bitcast <2 x i64>* %6 to i8*
  store i8 %114, i8* %115, align 16
  %116 = load i64, i64* %104, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %103)
  %117 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %10, i64 0, i32 0, i64 1
  %118 = load i8, i8* %117, align 1
  %119 = zext i8 %22 to i16
  %120 = zext i8 %118 to i16
  %121 = add nuw nsw i16 %120, 1
  %122 = add nuw nsw i16 %121, %119
  %123 = lshr i16 %122, 1
  %124 = trunc i16 %123 to i8
  call void @llvm.lifetime.start(i64 16, i8* nonnull %103)
  store i64 %116, i64* %104, align 16
  store i64 0, i64* %105, align 8
  %125 = getelementptr inbounds [16 x i8], [16 x i8]* %106, i64 0, i64 1
  store i8 %124, i8* %125, align 1
  %126 = load i64, i64* %104, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %103)
  %127 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %10, i64 0, i32 0, i64 2
  %128 = load i8, i8* %127, align 2
  %129 = zext i8 %25 to i16
  %130 = zext i8 %128 to i16
  %131 = add nuw nsw i16 %130, 1
  %132 = add nuw nsw i16 %131, %129
  %133 = lshr i16 %132, 1
  %134 = trunc i16 %133 to i8
  call void @llvm.lifetime.start(i64 16, i8* nonnull %103)
  store i64 %126, i64* %104, align 16
  store i64 0, i64* %105, align 8
  %135 = getelementptr inbounds [16 x i8], [16 x i8]* %106, i64 0, i64 2
  store i8 %134, i8* %135, align 2
  %136 = load i64, i64* %104, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %103)
  %137 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %10, i64 0, i32 0, i64 3
  %138 = load i8, i8* %137, align 1
  %139 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %13, i64 0, i32 0, i64 3
  %140 = load i8, i8* %139, align 1
  %141 = zext i8 %138 to i16
  %142 = zext i8 %140 to i16
  %143 = add nuw nsw i16 %141, 1
  %144 = add nuw nsw i16 %143, %142
  %145 = lshr i16 %144, 1
  %146 = trunc i16 %145 to i8
  call void @llvm.lifetime.start(i64 16, i8* nonnull %103)
  store i64 %136, i64* %104, align 16
  store i64 0, i64* %105, align 8
  %147 = getelementptr inbounds [16 x i8], [16 x i8]* %106, i64 0, i64 3
  store i8 %146, i8* %147, align 1
  %148 = load i64, i64* %104, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %103)
  %149 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %10, i64 0, i32 0, i64 4
  %150 = load i8, i8* %149, align 4
  %151 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %13, i64 0, i32 0, i64 4
  %152 = load i8, i8* %151, align 4
  %153 = zext i8 %150 to i16
  %154 = zext i8 %152 to i16
  %155 = add nuw nsw i16 %153, 1
  %156 = add nuw nsw i16 %155, %154
  %157 = lshr i16 %156, 1
  %158 = trunc i16 %157 to i8
  call void @llvm.lifetime.start(i64 16, i8* nonnull %103)
  store i64 %148, i64* %104, align 16
  store i64 0, i64* %105, align 8
  %159 = getelementptr inbounds [16 x i8], [16 x i8]* %106, i64 0, i64 4
  store i8 %158, i8* %159, align 4
  %160 = load i64, i64* %104, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %103)
  %161 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %10, i64 0, i32 0, i64 5
  %162 = load i8, i8* %161, align 1
  %163 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %13, i64 0, i32 0, i64 5
  %164 = load i8, i8* %163, align 1
  %165 = zext i8 %162 to i16
  %166 = zext i8 %164 to i16
  %167 = add nuw nsw i16 %165, 1
  %168 = add nuw nsw i16 %167, %166
  %169 = lshr i16 %168, 1
  %170 = trunc i16 %169 to i8
  call void @llvm.lifetime.start(i64 16, i8* nonnull %103)
  store i64 %160, i64* %104, align 16
  store i64 0, i64* %105, align 8
  %171 = getelementptr inbounds [16 x i8], [16 x i8]* %106, i64 0, i64 5
  store i8 %170, i8* %171, align 1
  %172 = load i64, i64* %104, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %103)
  %173 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %10, i64 0, i32 0, i64 6
  %174 = load i8, i8* %173, align 2
  %175 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %13, i64 0, i32 0, i64 6
  %176 = load i8, i8* %175, align 2
  %177 = zext i8 %174 to i16
  %178 = zext i8 %176 to i16
  %179 = add nuw nsw i16 %177, 1
  %180 = add nuw nsw i16 %179, %178
  %181 = lshr i16 %180, 1
  %182 = trunc i16 %181 to i8
  call void @llvm.lifetime.start(i64 16, i8* nonnull %103)
  store i64 %172, i64* %104, align 16
  store i64 0, i64* %105, align 8
  %183 = getelementptr inbounds [16 x i8], [16 x i8]* %106, i64 0, i64 6
  store i8 %182, i8* %183, align 2
  %184 = load i64, i64* %104, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %103)
  %185 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %10, i64 0, i32 0, i64 7
  %186 = load i8, i8* %185, align 1
  %187 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %13, i64 0, i32 0, i64 7
  %188 = load i8, i8* %187, align 1
  %189 = zext i8 %186 to i16
  %190 = zext i8 %188 to i16
  %191 = add nuw nsw i16 %189, 1
  %192 = add nuw nsw i16 %191, %190
  %193 = lshr i16 %192, 1
  %194 = trunc i16 %193 to i8
  call void @llvm.lifetime.start(i64 16, i8* nonnull %103)
  store i64 %184, i64* %104, align 16
  store i64 0, i64* %105, align 8
  %195 = getelementptr inbounds [16 x i8], [16 x i8]* %106, i64 0, i64 7
  store i8 %194, i8* %195, align 1
  %196 = load i64, i64* %104, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %103)
  %197 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %9, i64 0, i32 1
  %198 = bitcast i64* %197 to i8*
  %199 = load i8, i8* %198, align 8
  %200 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %12, i64 0, i32 1
  %201 = bitcast i64* %200 to i8*
  %202 = load i8, i8* %201, align 8
  %203 = zext i8 %199 to i16
  %204 = zext i8 %202 to i16
  %205 = add nuw nsw i16 %203, 1
  %206 = add nuw nsw i16 %205, %204
  %207 = lshr i16 %206, 1
  %208 = trunc i16 %207 to i8
  call void @llvm.lifetime.start(i64 16, i8* nonnull %103)
  store i64 %196, i64* %104, align 16
  store i64 0, i64* %105, align 8
  %209 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %7, i64 0, i32 1
  %210 = bitcast i64* %209 to i8*
  store i8 %208, i8* %210, align 8
  %211 = load i64, i64* %105, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %103)
  %212 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %10, i64 0, i32 0, i64 9
  %213 = load i8, i8* %212, align 1
  %214 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %13, i64 0, i32 0, i64 9
  %215 = load i8, i8* %214, align 1
  %216 = zext i8 %213 to i16
  %217 = zext i8 %215 to i16
  %218 = add nuw nsw i16 %216, 1
  %219 = add nuw nsw i16 %218, %217
  %220 = lshr i16 %219, 1
  %221 = trunc i16 %220 to i8
  call void @llvm.lifetime.start(i64 16, i8* nonnull %103)
  store i64 %196, i64* %104, align 16
  store i64 %211, i64* %105, align 8
  %222 = getelementptr inbounds [16 x i8], [16 x i8]* %106, i64 0, i64 9
  store i8 %221, i8* %222, align 1
  %223 = load i64, i64* %105, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %103)
  %224 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %10, i64 0, i32 0, i64 10
  %225 = load i8, i8* %224, align 2
  %226 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %13, i64 0, i32 0, i64 10
  %227 = load i8, i8* %226, align 2
  %228 = zext i8 %225 to i16
  %229 = zext i8 %227 to i16
  %230 = add nuw nsw i16 %228, 1
  %231 = add nuw nsw i16 %230, %229
  %232 = lshr i16 %231, 1
  %233 = trunc i16 %232 to i8
  call void @llvm.lifetime.start(i64 16, i8* nonnull %103)
  store i64 %196, i64* %104, align 16
  store i64 %223, i64* %105, align 8
  %234 = getelementptr inbounds [16 x i8], [16 x i8]* %106, i64 0, i64 10
  store i8 %233, i8* %234, align 2
  %235 = load i64, i64* %105, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %103)
  %236 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %10, i64 0, i32 0, i64 11
  %237 = load i8, i8* %236, align 1
  %238 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %13, i64 0, i32 0, i64 11
  %239 = load i8, i8* %238, align 1
  %240 = zext i8 %237 to i16
  %241 = zext i8 %239 to i16
  %242 = add nuw nsw i16 %240, 1
  %243 = add nuw nsw i16 %242, %241
  %244 = lshr i16 %243, 1
  %245 = trunc i16 %244 to i8
  call void @llvm.lifetime.start(i64 16, i8* nonnull %103)
  store i64 %196, i64* %104, align 16
  store i64 %235, i64* %105, align 8
  %246 = getelementptr inbounds [16 x i8], [16 x i8]* %106, i64 0, i64 11
  store i8 %245, i8* %246, align 1
  %247 = load i64, i64* %105, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %103)
  %248 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %10, i64 0, i32 0, i64 12
  %249 = load i8, i8* %248, align 4
  %250 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %13, i64 0, i32 0, i64 12
  %251 = load i8, i8* %250, align 4
  %252 = zext i8 %249 to i16
  %253 = zext i8 %251 to i16
  %254 = add nuw nsw i16 %252, 1
  %255 = add nuw nsw i16 %254, %253
  %256 = lshr i16 %255, 1
  %257 = trunc i16 %256 to i8
  call void @llvm.lifetime.start(i64 16, i8* nonnull %103)
  store i64 %196, i64* %104, align 16
  store i64 %247, i64* %105, align 8
  %258 = getelementptr inbounds [16 x i8], [16 x i8]* %106, i64 0, i64 12
  store i8 %257, i8* %258, align 4
  %259 = load i64, i64* %105, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %103)
  %260 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %10, i64 0, i32 0, i64 13
  %261 = load i8, i8* %260, align 1
  %262 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %13, i64 0, i32 0, i64 13
  %263 = load i8, i8* %262, align 1
  %264 = zext i8 %261 to i16
  %265 = zext i8 %263 to i16
  %266 = add nuw nsw i16 %264, 1
  %267 = add nuw nsw i16 %266, %265
  %268 = lshr i16 %267, 1
  %269 = trunc i16 %268 to i8
  call void @llvm.lifetime.start(i64 16, i8* nonnull %103)
  store i64 %196, i64* %104, align 16
  store i64 %259, i64* %105, align 8
  %270 = getelementptr inbounds [16 x i8], [16 x i8]* %106, i64 0, i64 13
  store i8 %269, i8* %270, align 1
  %271 = load i64, i64* %105, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %103)
  %272 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %10, i64 0, i32 0, i64 14
  %273 = load i8, i8* %272, align 2
  %274 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %13, i64 0, i32 0, i64 14
  %275 = load i8, i8* %274, align 2
  %276 = zext i8 %273 to i16
  %277 = zext i8 %275 to i16
  %278 = add nuw nsw i16 %276, 1
  %279 = add nuw nsw i16 %278, %277
  %280 = lshr i16 %279, 1
  %281 = trunc i16 %280 to i8
  call void @llvm.lifetime.start(i64 16, i8* nonnull %103)
  store i64 %196, i64* %104, align 16
  store i64 %271, i64* %105, align 8
  %282 = getelementptr inbounds [16 x i8], [16 x i8]* %106, i64 0, i64 14
  store i8 %281, i8* %282, align 2
  %283 = load i64, i64* %105, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %103)
  %284 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %10, i64 0, i32 0, i64 15
  %285 = load i8, i8* %284, align 1
  %286 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %13, i64 0, i32 0, i64 15
  %287 = load i8, i8* %286, align 1
  %288 = zext i8 %285 to i16
  %289 = zext i8 %287 to i16
  %290 = add nuw nsw i16 %288, 1
  %291 = add nuw nsw i16 %290, %289
  %292 = lshr i16 %291, 1
  %293 = trunc i16 %292 to i8
  call void @llvm.lifetime.start(i64 16, i8* nonnull %103)
  store i64 %196, i64* %104, align 16
  store i64 %283, i64* %105, align 8
  %294 = getelementptr inbounds [16 x i8], [16 x i8]* %106, i64 0, i64 15
  store i8 %293, i8* %294, align 1
  %295 = load i64, i64* %105, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %103)
  %296 = lshr i64 %196, 8
  %297 = lshr i64 %196, 16
  %298 = lshr i64 %196, 24
  %299 = lshr i64 %196, 32
  %300 = lshr i64 %196, 40
  %301 = lshr i64 %196, 48
  %302 = lshr i64 %196, 56
  %303 = trunc i64 %196 to i8
  %304 = trunc i64 %296 to i8
  %305 = trunc i64 %297 to i8
  %306 = trunc i64 %298 to i8
  %307 = trunc i64 %299 to i8
  %308 = trunc i64 %300 to i8
  %309 = trunc i64 %301 to i8
  %310 = trunc i64 %302 to i8
  store i8 %303, i8* %2, align 1
  %311 = getelementptr inbounds i8, i8* %2, i64 1
  store i8 %304, i8* %311, align 1
  %312 = getelementptr inbounds i8, i8* %2, i64 2
  store i8 %305, i8* %312, align 1
  %313 = getelementptr inbounds i8, i8* %2, i64 3
  store i8 %306, i8* %313, align 1
  %314 = getelementptr inbounds i8, i8* %2, i64 4
  store i8 %307, i8* %314, align 1
  %315 = getelementptr inbounds i8, i8* %2, i64 5
  store i8 %308, i8* %315, align 1
  %316 = getelementptr inbounds i8, i8* %2, i64 6
  store i8 %309, i8* %316, align 1
  %317 = getelementptr inbounds i8, i8* %2, i64 7
  store i8 %310, i8* %317, align 1
  %318 = trunc i64 %295 to i8
  %319 = getelementptr inbounds i8, i8* %2, i64 8
  store i8 %318, i8* %319, align 1
  %320 = lshr i64 %295, 8
  %321 = trunc i64 %320 to i8
  %322 = getelementptr inbounds i8, i8* %2, i64 9
  store i8 %321, i8* %322, align 1
  %323 = lshr i64 %295, 16
  %324 = trunc i64 %323 to i8
  %325 = getelementptr inbounds i8, i8* %2, i64 10
  store i8 %324, i8* %325, align 1
  %326 = lshr i64 %295, 24
  %327 = trunc i64 %326 to i8
  %328 = getelementptr inbounds i8, i8* %2, i64 11
  store i8 %327, i8* %328, align 1
  %329 = lshr i64 %295, 32
  %330 = trunc i64 %329 to i8
  %331 = getelementptr inbounds i8, i8* %2, i64 12
  store i8 %330, i8* %331, align 1
  %332 = lshr i64 %295, 40
  %333 = trunc i64 %332 to i8
  %334 = getelementptr inbounds i8, i8* %2, i64 13
  store i8 %333, i8* %334, align 1
  %335 = lshr i64 %295, 48
  %336 = trunc i64 %335 to i8
  %337 = getelementptr inbounds i8, i8* %2, i64 14
  store i8 %336, i8* %337, align 1
  %338 = lshr i64 %295, 56
  %339 = trunc i64 %338 to i8
  %340 = getelementptr inbounds i8, i8* %2, i64 15
  store i8 %339, i8* %340, align 1
  call void @llvm.lifetime.end(i64 16, i8* nonnull %17) 
  call void @llvm.lifetime.end(i64 16, i8* nonnull %14) 
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L5PAVGWI4RVnWI7vec64_tE3RVnIS2_ES5_EEP6MemoryS7_R5StateT_T0_T1_(%struct.Memory* readnone returned, %struct.State* nocapture readnone dereferenceable(3376), i64* nocapture, i64, i64)  {
  %6 = alloca i64, align 8
  %7 = bitcast i64* %6 to i8*
  %8 = bitcast i64* %6 to [4 x i16]*
  %9 = trunc i64 %3 to i32
  %10 = and i32 %9, 65535
  %11 = trunc i64 %4 to i32
  %12 = and i32 %11, 65535
  %13 = add nuw nsw i32 %10, 1
  %14 = add nuw nsw i32 %13, %12
  %15 = lshr i32 %14, 1
  %16 = trunc i32 %15 to i16
  call void @llvm.lifetime.start(i64 8, i8* nonnull %7)
  store i64 0, i64* %6, align 8
  %17 = bitcast i64* %6 to i16*
  store i16 %16, i16* %17, align 8
  %18 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %7)
  %19 = lshr i64 %3, 16
  %20 = trunc i64 %19 to i32
  %21 = and i32 %20, 65535
  %22 = lshr i64 %4, 16
  %23 = trunc i64 %22 to i32
  %24 = and i32 %23, 65535
  %25 = add nuw nsw i32 %21, 1
  %26 = add nuw nsw i32 %25, %24
  %27 = lshr i32 %26, 1
  %28 = trunc i32 %27 to i16
  call void @llvm.lifetime.start(i64 8, i8* nonnull %7)
  store i64 %18, i64* %6, align 8
  %29 = getelementptr inbounds [4 x i16], [4 x i16]* %8, i64 0, i64 1
  store i16 %28, i16* %29, align 2
  %30 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %7)
  %31 = lshr i64 %3, 32
  %32 = trunc i64 %31 to i32
  %33 = and i32 %32, 65535
  %34 = lshr i64 %4, 32
  %35 = trunc i64 %34 to i32
  %36 = and i32 %35, 65535
  %37 = add nuw nsw i32 %33, 1
  %38 = add nuw nsw i32 %37, %36
  %39 = lshr i32 %38, 1
  %40 = trunc i32 %39 to i16
  call void @llvm.lifetime.start(i64 8, i8* nonnull %7)
  store i64 %30, i64* %6, align 8
  %41 = getelementptr inbounds [4 x i16], [4 x i16]* %8, i64 0, i64 2
  store i16 %40, i16* %41, align 4
  %42 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %7)
  %43 = lshr i64 %3, 48
  %44 = trunc i64 %43 to i32
  %45 = lshr i64 %4, 48
  %46 = trunc i64 %45 to i32
  %47 = add nuw nsw i32 %44, 1
  %48 = add nuw nsw i32 %47, %46
  %49 = lshr i32 %48, 1
  %50 = trunc i32 %49 to i16
  call void @llvm.lifetime.start(i64 8, i8* nonnull %7)
  store i64 %42, i64* %6, align 8
  %51 = getelementptr inbounds [4 x i16], [4 x i16]* %8, i64 0, i64 3
  store i16 %50, i16* %51, align 2
  %52 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %7)
  %53 = lshr i64 %52, 16
  %54 = lshr i64 %52, 32
  %55 = lshr i64 %52, 48
  %56 = trunc i64 %52 to i16
  %57 = trunc i64 %53 to i16
  %58 = trunc i64 %54 to i16
  %59 = trunc i64 %55 to i16
  %60 = bitcast i64* %2 to [4 x i16]*
  %61 = bitcast i64* %2 to i16*
  store i16 %56, i16* %61, align 1
  %62 = getelementptr inbounds [4 x i16], [4 x i16]* %60, i64 0, i64 1
  store i16 %57, i16* %62, align 1
  %63 = getelementptr inbounds [4 x i16], [4 x i16]* %60, i64 0, i64 2
  store i16 %58, i16* %63, align 1
  %64 = getelementptr inbounds [4 x i16], [4 x i16]* %60, i64 0, i64 3
  store i16 %59, i16* %64, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L5PAVGWI4RVnWI7vec64_tE3RVnIS2_E3MVnIS2_EEEP6MemoryS9_R5StateT_T0_T1_(%struct.Memory* returned, %struct.State* nocapture readnone dereferenceable(3376), i64* nocapture, i64, i64)  {
  %6 = alloca i64, align 8
  %7 = alloca i64, align 8
  %8 = bitcast i64* %7 to %struct.int16v4_t*
  %9 = bitcast i64* %7 to i8*
  call void @llvm.lifetime.start(i64 8, i8* nonnull %9) 
  store i64 %3, i64* %7, align 8
  %10 = inttoptr i64 %4 to i16*
  %11 = load i16, i16* %10
  %12 = add i64 %4, 2
  %13 = inttoptr i64 %12 to i16*
  %14 = load i16, i16* %13
  %15 = add i64 %4, 4
  %16 = inttoptr i64 %15 to i16*
  %17 = load i16, i16* %16
  %18 = add i64 %4, 6
  %19 = inttoptr i64 %18 to i16*
  %20 = load i16, i16* %19
  %21 = bitcast i64* %6 to i8*
  %22 = bitcast i64* %6 to [4 x i16]*
  %23 = trunc i64 %3 to i32
  %24 = and i32 %23, 65535
  %25 = zext i16 %11 to i32
  %26 = add nuw nsw i32 %24, 1
  %27 = add nuw nsw i32 %26, %25
  %28 = lshr i32 %27, 1
  %29 = trunc i32 %28 to i16
  call void @llvm.lifetime.start(i64 8, i8* nonnull %21)
  store i64 0, i64* %6, align 8
  %30 = bitcast i64* %6 to i16*
  store i16 %29, i16* %30, align 8
  %31 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %21)
  %32 = lshr i64 %3, 16
  %33 = trunc i64 %32 to i32
  %34 = and i32 %33, 65535
  %35 = zext i16 %14 to i32
  %36 = add nuw nsw i32 %34, 1
  %37 = add nuw nsw i32 %36, %35
  %38 = lshr i32 %37, 1
  %39 = trunc i32 %38 to i16
  call void @llvm.lifetime.start(i64 8, i8* nonnull %21)
  store i64 %31, i64* %6, align 8
  %40 = getelementptr inbounds [4 x i16], [4 x i16]* %22, i64 0, i64 1
  store i16 %39, i16* %40, align 2
  %41 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %21)
  %42 = lshr i64 %3, 32
  %43 = trunc i64 %42 to i32
  %44 = and i32 %43, 65535
  %45 = zext i16 %17 to i32
  %46 = add nuw nsw i32 %44, 1
  %47 = add nuw nsw i32 %46, %45
  %48 = lshr i32 %47, 1
  %49 = trunc i32 %48 to i16
  call void @llvm.lifetime.start(i64 8, i8* nonnull %21)
  store i64 %41, i64* %6, align 8
  %50 = getelementptr inbounds [4 x i16], [4 x i16]* %22, i64 0, i64 2
  store i16 %49, i16* %50, align 4
  %51 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %21)
  %52 = getelementptr inbounds %struct.int16v4_t, %struct.int16v4_t* %8, i64 0, i32 0, i64 3
  %53 = load i16, i16* %52, align 2
  %54 = zext i16 %53 to i32
  %55 = zext i16 %20 to i32
  %56 = add nuw nsw i32 %54, 1
  %57 = add nuw nsw i32 %56, %55
  %58 = lshr i32 %57, 1
  %59 = trunc i32 %58 to i16
  call void @llvm.lifetime.start(i64 8, i8* nonnull %21)
  store i64 %51, i64* %6, align 8
  %60 = getelementptr inbounds [4 x i16], [4 x i16]* %22, i64 0, i64 3
  store i16 %59, i16* %60, align 2
  %61 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %21)
  %62 = lshr i64 %61, 16
  %63 = lshr i64 %61, 32
  %64 = lshr i64 %61, 48
  %65 = trunc i64 %61 to i16
  %66 = trunc i64 %62 to i16
  %67 = trunc i64 %63 to i16
  %68 = trunc i64 %64 to i16
  %69 = bitcast i64* %2 to [4 x i16]*
  %70 = bitcast i64* %2 to i16*
  store i16 %65, i16* %70, align 1
  %71 = getelementptr inbounds [4 x i16], [4 x i16]* %69, i64 0, i64 1
  store i16 %66, i16* %71, align 1
  %72 = getelementptr inbounds [4 x i16], [4 x i16]* %69, i64 0, i64 2
  store i16 %67, i16* %72, align 1
  %73 = getelementptr inbounds [4 x i16], [4 x i16]* %69, i64 0, i64 3
  store i16 %68, i16* %73, align 1
  call void @llvm.lifetime.end(i64 8, i8* nonnull %9) 
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L5PAVGWI3VnWI8vec128_tE2VnIS2_ES5_EEP6MemoryS7_R5StateT_T0_T1_(%struct.Memory* readnone returned, %struct.State* nocapture readnone dereferenceable(3376), i8* nocapture, i8* nocapture readonly, i8* nocapture readonly)  {
  %6 = alloca <2 x i64>, align 16
  %7 = bitcast <2 x i64>* %6 to { i64, i64 }*
  %8 = alloca <2 x i64>, align 16
  %9 = bitcast <2 x i64>* %8 to { i64, i64 }*
  %10 = bitcast <2 x i64>* %8 to %struct.uint16v8_t*
  %11 = alloca <2 x i64>, align 16
  %12 = bitcast <2 x i64>* %11 to { i64, i64 }*
  %13 = bitcast <2 x i64>* %11 to %struct.uint16v8_t*
  %14 = bitcast <2 x i64>* %8 to i8*
  call void @llvm.lifetime.start(i64 16, i8* nonnull %14) 
  %15 = bitcast i8* %3 to <2 x i64>*
  %16 = load <2 x i64>, <2 x i64>* %15, align 1
  store <2 x i64> %16, <2 x i64>* %8, align 16
  %17 = bitcast <2 x i64>* %11 to i8*
  call void @llvm.lifetime.start(i64 16, i8* nonnull %17) 
  %18 = bitcast i8* %4 to <2 x i64>*
  %19 = load <2 x i64>, <2 x i64>* %18, align 1
  store <2 x i64> %19, <2 x i64>* %11, align 16
  %20 = bitcast <2 x i64>* %6 to i8*
  %21 = getelementptr inbounds <2 x i64>, <2 x i64>* %6, i64 0, i64 0
  %22 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %7, i64 0, i32 1
  %23 = bitcast <2 x i64>* %6 to [8 x i16]*
  %24 = extractelement <2 x i64> %16, i32 0
  %25 = trunc i64 %24 to i32
  %26 = and i32 %25, 65535
  %27 = extractelement <2 x i64> %19, i32 0
  %28 = trunc i64 %27 to i32
  %29 = and i32 %28, 65535
  %30 = add nuw nsw i32 %26, 1
  %31 = add nuw nsw i32 %30, %29
  %32 = lshr i32 %31, 1
  %33 = trunc i32 %32 to i16
  call void @llvm.lifetime.start(i64 16, i8* nonnull %20)
  store <2 x i64> zeroinitializer, <2 x i64>* %6, align 16
  %34 = bitcast <2 x i64>* %6 to i16*
  store i16 %33, i16* %34, align 16
  %35 = load i64, i64* %21, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %20)
  %36 = lshr i64 %24, 16
  %37 = trunc i64 %36 to i32
  %38 = and i32 %37, 65535
  %39 = lshr i64 %27, 16
  %40 = trunc i64 %39 to i32
  %41 = and i32 %40, 65535
  %42 = add nuw nsw i32 %38, 1
  %43 = add nuw nsw i32 %42, %41
  %44 = lshr i32 %43, 1
  %45 = trunc i32 %44 to i16
  call void @llvm.lifetime.start(i64 16, i8* nonnull %20)
  store i64 %35, i64* %21, align 16
  store i64 0, i64* %22, align 8
  %46 = getelementptr inbounds [8 x i16], [8 x i16]* %23, i64 0, i64 1
  store i16 %45, i16* %46, align 2
  %47 = load i64, i64* %21, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %20)
  %48 = lshr i64 %24, 32
  %49 = trunc i64 %48 to i32
  %50 = and i32 %49, 65535
  %51 = lshr i64 %27, 32
  %52 = trunc i64 %51 to i32
  %53 = and i32 %52, 65535
  %54 = add nuw nsw i32 %50, 1
  %55 = add nuw nsw i32 %54, %53
  %56 = lshr i32 %55, 1
  %57 = trunc i32 %56 to i16
  call void @llvm.lifetime.start(i64 16, i8* nonnull %20)
  store i64 %47, i64* %21, align 16
  store i64 0, i64* %22, align 8
  %58 = getelementptr inbounds [8 x i16], [8 x i16]* %23, i64 0, i64 2
  store i16 %57, i16* %58, align 4
  %59 = load i64, i64* %21, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %20)
  %60 = getelementptr inbounds %struct.uint16v8_t, %struct.uint16v8_t* %10, i64 0, i32 0, i64 3
  %61 = load i16, i16* %60, align 2
  %62 = zext i16 %61 to i32
  %63 = lshr i64 %27, 48
  %64 = trunc i64 %63 to i32
  %65 = add nuw nsw i32 %62, 1
  %66 = add nuw nsw i32 %65, %64
  %67 = lshr i32 %66, 1
  %68 = trunc i32 %67 to i16
  call void @llvm.lifetime.start(i64 16, i8* nonnull %20)
  store i64 %59, i64* %21, align 16
  store i64 0, i64* %22, align 8
  %69 = getelementptr inbounds [8 x i16], [8 x i16]* %23, i64 0, i64 3
  store i16 %68, i16* %69, align 2
  %70 = load i64, i64* %21, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %20)
  %71 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %9, i64 0, i32 1
  %72 = bitcast i64* %71 to i16*
  %73 = load i16, i16* %72, align 8
  %74 = zext i16 %73 to i32
  %75 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %12, i64 0, i32 1
  %76 = bitcast i64* %75 to i16*
  %77 = load i16, i16* %76, align 8
  %78 = zext i16 %77 to i32
  %79 = add nuw nsw i32 %74, 1
  %80 = add nuw nsw i32 %79, %78
  %81 = lshr i32 %80, 1
  %82 = trunc i32 %81 to i16
  call void @llvm.lifetime.start(i64 16, i8* nonnull %20)
  store i64 %70, i64* %21, align 16
  store i64 0, i64* %22, align 8
  %83 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %7, i64 0, i32 1
  %84 = bitcast i64* %83 to i16*
  store i16 %82, i16* %84, align 8
  %85 = load i64, i64* %22, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %20)
  %86 = getelementptr inbounds %struct.uint16v8_t, %struct.uint16v8_t* %10, i64 0, i32 0, i64 5
  %87 = load i16, i16* %86, align 2
  %88 = zext i16 %87 to i32
  %89 = getelementptr inbounds %struct.uint16v8_t, %struct.uint16v8_t* %13, i64 0, i32 0, i64 5
  %90 = load i16, i16* %89, align 2
  %91 = zext i16 %90 to i32
  %92 = add nuw nsw i32 %88, 1
  %93 = add nuw nsw i32 %92, %91
  %94 = lshr i32 %93, 1
  %95 = trunc i32 %94 to i16
  call void @llvm.lifetime.start(i64 16, i8* nonnull %20)
  store i64 %70, i64* %21, align 16
  store i64 %85, i64* %22, align 8
  %96 = getelementptr inbounds [8 x i16], [8 x i16]* %23, i64 0, i64 5
  store i16 %95, i16* %96, align 2
  %97 = load i64, i64* %22, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %20)
  %98 = getelementptr inbounds %struct.uint16v8_t, %struct.uint16v8_t* %10, i64 0, i32 0, i64 6
  %99 = load i16, i16* %98, align 4
  %100 = zext i16 %99 to i32
  %101 = getelementptr inbounds %struct.uint16v8_t, %struct.uint16v8_t* %13, i64 0, i32 0, i64 6
  %102 = load i16, i16* %101, align 4
  %103 = zext i16 %102 to i32
  %104 = add nuw nsw i32 %100, 1
  %105 = add nuw nsw i32 %104, %103
  %106 = lshr i32 %105, 1
  %107 = trunc i32 %106 to i16
  call void @llvm.lifetime.start(i64 16, i8* nonnull %20)
  store i64 %70, i64* %21, align 16
  store i64 %97, i64* %22, align 8
  %108 = getelementptr inbounds [8 x i16], [8 x i16]* %23, i64 0, i64 6
  store i16 %107, i16* %108, align 4
  %109 = load i64, i64* %22, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %20)
  %110 = getelementptr inbounds %struct.uint16v8_t, %struct.uint16v8_t* %10, i64 0, i32 0, i64 7
  %111 = load i16, i16* %110, align 2
  %112 = zext i16 %111 to i32
  %113 = getelementptr inbounds %struct.uint16v8_t, %struct.uint16v8_t* %13, i64 0, i32 0, i64 7
  %114 = load i16, i16* %113, align 2
  %115 = zext i16 %114 to i32
  %116 = add nuw nsw i32 %112, 1
  %117 = add nuw nsw i32 %116, %115
  %118 = lshr i32 %117, 1
  %119 = trunc i32 %118 to i16
  call void @llvm.lifetime.start(i64 16, i8* nonnull %20)
  store i64 %70, i64* %21, align 16
  store i64 %109, i64* %22, align 8
  %120 = getelementptr inbounds [8 x i16], [8 x i16]* %23, i64 0, i64 7
  store i16 %119, i16* %120, align 2
  %121 = load i64, i64* %22, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %20)
  %122 = lshr i64 %70, 16
  %123 = lshr i64 %70, 32
  %124 = lshr i64 %70, 48
  %125 = trunc i64 %70 to i16
  %126 = trunc i64 %122 to i16
  %127 = trunc i64 %123 to i16
  %128 = trunc i64 %124 to i16
  %129 = bitcast i8* %2 to i16*
  store i16 %125, i16* %129, align 1
  %130 = getelementptr inbounds i8, i8* %2, i64 2
  %131 = bitcast i8* %130 to i16*
  store i16 %126, i16* %131, align 1
  %132 = getelementptr inbounds i8, i8* %2, i64 4
  %133 = bitcast i8* %132 to i16*
  store i16 %127, i16* %133, align 1
  %134 = getelementptr inbounds i8, i8* %2, i64 6
  %135 = bitcast i8* %134 to i16*
  store i16 %128, i16* %135, align 1
  %136 = trunc i64 %121 to i16
  %137 = getelementptr inbounds i8, i8* %2, i64 8
  %138 = bitcast i8* %137 to i16*
  store i16 %136, i16* %138, align 1
  %139 = lshr i64 %121, 16
  %140 = trunc i64 %139 to i16
  %141 = getelementptr inbounds i8, i8* %2, i64 10
  %142 = bitcast i8* %141 to i16*
  store i16 %140, i16* %142, align 1
  %143 = lshr i64 %121, 32
  %144 = trunc i64 %143 to i16
  %145 = getelementptr inbounds i8, i8* %2, i64 12
  %146 = bitcast i8* %145 to i16*
  store i16 %144, i16* %146, align 1
  %147 = lshr i64 %121, 48
  %148 = trunc i64 %147 to i16
  %149 = getelementptr inbounds i8, i8* %2, i64 14
  %150 = bitcast i8* %149 to i16*
  store i16 %148, i16* %150, align 1
  call void @llvm.lifetime.end(i64 16, i8* nonnull %17) 
  call void @llvm.lifetime.end(i64 16, i8* nonnull %14) 
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L5PAVGWI3VnWI8vec128_tE2VnIS2_E3MVnIS2_EEEP6MemoryS9_R5StateT_T0_T1_(%struct.Memory* returned, %struct.State* nocapture readnone dereferenceable(3376), i8* nocapture, i8* nocapture readonly, i64)  {
  %6 = alloca <2 x i64>, align 16
  %7 = bitcast <2 x i64>* %6 to { i64, i64 }*
  %8 = alloca <2 x i64>, align 16
  %9 = bitcast <2 x i64>* %8 to { i64, i64 }*
  %10 = bitcast <2 x i64>* %8 to %struct.uint16v8_t*
  %11 = alloca <2 x i64>, align 16
  %12 = bitcast <2 x i64>* %11 to { i64, i64 }*
  %13 = bitcast <2 x i64>* %11 to %struct.uint16v8_t*
  %14 = bitcast <2 x i64>* %8 to i8*
  call void @llvm.lifetime.start(i64 16, i8* nonnull %14) 
  %15 = bitcast i8* %3 to <2 x i64>*
  %16 = load <2 x i64>, <2 x i64>* %15, align 1
  store <2 x i64> %16, <2 x i64>* %8, align 16
  %17 = bitcast <2 x i64>* %11 to i8*
  call void @llvm.lifetime.start(i64 16, i8* nonnull %17) 
  %18 = inttoptr i64 %4 to i16*
  %19 = load i16, i16* %18
  %20 = add i64 %4, 2
  %21 = inttoptr i64 %20 to i16*
  %22 = load i16, i16* %21
  %23 = add i64 %4, 4
  %24 = inttoptr i64 %23 to i16*
  %25 = load i16, i16* %24
  %26 = add i64 %4, 6
  %27 = inttoptr i64 %26 to i16*
  %28 = load i16, i16* %27
  %29 = add i64 %4, 8
  %30 = inttoptr i64 %29 to i16*
  %31 = load i16, i16* %30
  %32 = add i64 %4, 10
  %33 = inttoptr i64 %32 to i16*
  %34 = load i16, i16* %33
  %35 = add i64 %4, 12
  %36 = inttoptr i64 %35 to i16*
  %37 = load i16, i16* %36
  %38 = add i64 %4, 14
  %39 = inttoptr i64 %38 to i16*
  %40 = load i16, i16* %39
  %41 = insertelement <2 x i16> undef, i16 %28, i32 0
  %42 = insertelement <2 x i16> %41, i16 %40, i32 1
  %43 = zext <2 x i16> %42 to <2 x i64>
  %44 = shl nuw <2 x i64> %43, <i64 48, i64 48>
  %45 = insertelement <2 x i16> undef, i16 %25, i32 0
  %46 = insertelement <2 x i16> %45, i16 %37, i32 1
  %47 = zext <2 x i16> %46 to <2 x i64>
  %48 = shl nuw nsw <2 x i64> %47, <i64 32, i64 32>
  %49 = insertelement <2 x i16> undef, i16 %22, i32 0
  %50 = insertelement <2 x i16> %49, i16 %34, i32 1
  %51 = zext <2 x i16> %50 to <2 x i64>
  %52 = shl nuw nsw <2 x i64> %51, <i64 16, i64 16>
  %53 = insertelement <2 x i16> undef, i16 %19, i32 0
  %54 = insertelement <2 x i16> %53, i16 %31, i32 1
  %55 = zext <2 x i16> %54 to <2 x i64>
  %56 = or <2 x i64> %52, %55
  %57 = or <2 x i64> %56, %48
  %58 = or <2 x i64> %57, %44
  store <2 x i64> %58, <2 x i64>* %11, align 16
  %59 = bitcast <2 x i64>* %6 to i8*
  %60 = getelementptr inbounds <2 x i64>, <2 x i64>* %6, i64 0, i64 0
  %61 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %7, i64 0, i32 1
  %62 = bitcast <2 x i64>* %6 to [8 x i16]*
  %63 = extractelement <2 x i64> %16, i32 0
  %64 = trunc i64 %63 to i32
  %65 = and i32 %64, 65535
  %66 = zext i16 %19 to i32
  %67 = add nuw nsw i32 %65, 1
  %68 = add nuw nsw i32 %67, %66
  %69 = lshr i32 %68, 1
  %70 = trunc i32 %69 to i16
  call void @llvm.lifetime.start(i64 16, i8* nonnull %59)
  store <2 x i64> zeroinitializer, <2 x i64>* %6, align 16
  %71 = bitcast <2 x i64>* %6 to i16*
  store i16 %70, i16* %71, align 16
  %72 = load i64, i64* %60, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %59)
  %73 = lshr i64 %63, 16
  %74 = trunc i64 %73 to i32
  %75 = and i32 %74, 65535
  %76 = zext i16 %22 to i32
  %77 = add nuw nsw i32 %75, 1
  %78 = add nuw nsw i32 %77, %76
  %79 = lshr i32 %78, 1
  %80 = trunc i32 %79 to i16
  call void @llvm.lifetime.start(i64 16, i8* nonnull %59)
  store i64 %72, i64* %60, align 16
  store i64 0, i64* %61, align 8
  %81 = getelementptr inbounds [8 x i16], [8 x i16]* %62, i64 0, i64 1
  store i16 %80, i16* %81, align 2
  %82 = load i64, i64* %60, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %59)
  %83 = getelementptr inbounds %struct.uint16v8_t, %struct.uint16v8_t* %10, i64 0, i32 0, i64 2
  %84 = load i16, i16* %83, align 4
  %85 = zext i16 %84 to i32
  %86 = zext i16 %25 to i32
  %87 = add nuw nsw i32 %85, 1
  %88 = add nuw nsw i32 %87, %86
  %89 = lshr i32 %88, 1
  %90 = trunc i32 %89 to i16
  call void @llvm.lifetime.start(i64 16, i8* nonnull %59)
  store i64 %82, i64* %60, align 16
  store i64 0, i64* %61, align 8
  %91 = getelementptr inbounds [8 x i16], [8 x i16]* %62, i64 0, i64 2
  store i16 %90, i16* %91, align 4
  %92 = load i64, i64* %60, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %59)
  %93 = getelementptr inbounds %struct.uint16v8_t, %struct.uint16v8_t* %10, i64 0, i32 0, i64 3
  %94 = load i16, i16* %93, align 2
  %95 = zext i16 %94 to i32
  %96 = zext i16 %28 to i32
  %97 = add nuw nsw i32 %95, 1
  %98 = add nuw nsw i32 %97, %96
  %99 = lshr i32 %98, 1
  %100 = trunc i32 %99 to i16
  call void @llvm.lifetime.start(i64 16, i8* nonnull %59)
  store i64 %92, i64* %60, align 16
  store i64 0, i64* %61, align 8
  %101 = getelementptr inbounds [8 x i16], [8 x i16]* %62, i64 0, i64 3
  store i16 %100, i16* %101, align 2
  %102 = load i64, i64* %60, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %59)
  %103 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %9, i64 0, i32 1
  %104 = bitcast i64* %103 to i16*
  %105 = load i16, i16* %104, align 8
  %106 = zext i16 %105 to i32
  %107 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %12, i64 0, i32 1
  %108 = bitcast i64* %107 to i16*
  %109 = load i16, i16* %108, align 8
  %110 = zext i16 %109 to i32
  %111 = add nuw nsw i32 %106, 1
  %112 = add nuw nsw i32 %111, %110
  %113 = lshr i32 %112, 1
  %114 = trunc i32 %113 to i16
  call void @llvm.lifetime.start(i64 16, i8* nonnull %59)
  store i64 %102, i64* %60, align 16
  store i64 0, i64* %61, align 8
  %115 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %7, i64 0, i32 1
  %116 = bitcast i64* %115 to i16*
  store i16 %114, i16* %116, align 8
  %117 = load i64, i64* %61, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %59)
  %118 = getelementptr inbounds %struct.uint16v8_t, %struct.uint16v8_t* %10, i64 0, i32 0, i64 5
  %119 = load i16, i16* %118, align 2
  %120 = zext i16 %119 to i32
  %121 = getelementptr inbounds %struct.uint16v8_t, %struct.uint16v8_t* %13, i64 0, i32 0, i64 5
  %122 = load i16, i16* %121, align 2
  %123 = zext i16 %122 to i32
  %124 = add nuw nsw i32 %120, 1
  %125 = add nuw nsw i32 %124, %123
  %126 = lshr i32 %125, 1
  %127 = trunc i32 %126 to i16
  call void @llvm.lifetime.start(i64 16, i8* nonnull %59)
  store i64 %102, i64* %60, align 16
  store i64 %117, i64* %61, align 8
  %128 = getelementptr inbounds [8 x i16], [8 x i16]* %62, i64 0, i64 5
  store i16 %127, i16* %128, align 2
  %129 = load i64, i64* %61, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %59)
  %130 = getelementptr inbounds %struct.uint16v8_t, %struct.uint16v8_t* %10, i64 0, i32 0, i64 6
  %131 = load i16, i16* %130, align 4
  %132 = zext i16 %131 to i32
  %133 = getelementptr inbounds %struct.uint16v8_t, %struct.uint16v8_t* %13, i64 0, i32 0, i64 6
  %134 = load i16, i16* %133, align 4
  %135 = zext i16 %134 to i32
  %136 = add nuw nsw i32 %132, 1
  %137 = add nuw nsw i32 %136, %135
  %138 = lshr i32 %137, 1
  %139 = trunc i32 %138 to i16
  call void @llvm.lifetime.start(i64 16, i8* nonnull %59)
  store i64 %102, i64* %60, align 16
  store i64 %129, i64* %61, align 8
  %140 = getelementptr inbounds [8 x i16], [8 x i16]* %62, i64 0, i64 6
  store i16 %139, i16* %140, align 4
  %141 = load i64, i64* %61, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %59)
  %142 = getelementptr inbounds %struct.uint16v8_t, %struct.uint16v8_t* %10, i64 0, i32 0, i64 7
  %143 = load i16, i16* %142, align 2
  %144 = zext i16 %143 to i32
  %145 = getelementptr inbounds %struct.uint16v8_t, %struct.uint16v8_t* %13, i64 0, i32 0, i64 7
  %146 = load i16, i16* %145, align 2
  %147 = zext i16 %146 to i32
  %148 = add nuw nsw i32 %144, 1
  %149 = add nuw nsw i32 %148, %147
  %150 = lshr i32 %149, 1
  %151 = trunc i32 %150 to i16
  call void @llvm.lifetime.start(i64 16, i8* nonnull %59)
  store i64 %102, i64* %60, align 16
  store i64 %141, i64* %61, align 8
  %152 = getelementptr inbounds [8 x i16], [8 x i16]* %62, i64 0, i64 7
  store i16 %151, i16* %152, align 2
  %153 = load i64, i64* %61, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %59)
  %154 = lshr i64 %102, 16
  %155 = lshr i64 %102, 32
  %156 = lshr i64 %102, 48
  %157 = trunc i64 %102 to i16
  %158 = trunc i64 %154 to i16
  %159 = trunc i64 %155 to i16
  %160 = trunc i64 %156 to i16
  %161 = bitcast i8* %2 to i16*
  store i16 %157, i16* %161, align 1
  %162 = getelementptr inbounds i8, i8* %2, i64 2
  %163 = bitcast i8* %162 to i16*
  store i16 %158, i16* %163, align 1
  %164 = getelementptr inbounds i8, i8* %2, i64 4
  %165 = bitcast i8* %164 to i16*
  store i16 %159, i16* %165, align 1
  %166 = getelementptr inbounds i8, i8* %2, i64 6
  %167 = bitcast i8* %166 to i16*
  store i16 %160, i16* %167, align 1
  %168 = trunc i64 %153 to i16
  %169 = getelementptr inbounds i8, i8* %2, i64 8
  %170 = bitcast i8* %169 to i16*
  store i16 %168, i16* %170, align 1
  %171 = lshr i64 %153, 16
  %172 = trunc i64 %171 to i16
  %173 = getelementptr inbounds i8, i8* %2, i64 10
  %174 = bitcast i8* %173 to i16*
  store i16 %172, i16* %174, align 1
  %175 = lshr i64 %153, 32
  %176 = trunc i64 %175 to i16
  %177 = getelementptr inbounds i8, i8* %2, i64 12
  %178 = bitcast i8* %177 to i16*
  store i16 %176, i16* %178, align 1
  %179 = lshr i64 %153, 48
  %180 = trunc i64 %179 to i16
  %181 = getelementptr inbounds i8, i8* %2, i64 14
  %182 = bitcast i8* %181 to i16*
  store i16 %180, i16* %182, align 1
  call void @llvm.lifetime.end(i64 16, i8* nonnull %17) 
  call void @llvm.lifetime.end(i64 16, i8* nonnull %14) 
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L6PHSUBWI4RVnWI7vec64_tE3RVnIS2_ES5_EEP6MemoryS7_R5StateT_T0_T1_(%struct.Memory* readnone returned, %struct.State* nocapture readnone dereferenceable(3376), i64* nocapture, i64, i64)  {
  %6 = alloca i64, align 8
  %7 = alloca i64, align 8
  %8 = bitcast i64* %6 to i8*
  %9 = bitcast i64* %6 to [4 x i16]*
  %10 = trunc i64 %3 to i16
  %11 = lshr i64 %3, 16
  %12 = trunc i64 %11 to i16
  %13 = sub i16 %10, %12
  call void @llvm.lifetime.start(i64 8, i8* nonnull %8)
  store i64 0, i64* %6, align 8
  %14 = bitcast i64* %6 to i16*
  store i16 %13, i16* %14, align 8
  %15 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %8)
  %16 = lshr i64 %3, 32
  %17 = trunc i64 %16 to i16
  %18 = lshr i64 %3, 48
  %19 = trunc i64 %18 to i16
  %20 = sub i16 %17, %19
  call void @llvm.lifetime.start(i64 8, i8* nonnull %8)
  store i64 %15, i64* %6, align 8
  %21 = getelementptr inbounds [4 x i16], [4 x i16]* %9, i64 0, i64 1
  store i16 %20, i16* %21, align 2
  %22 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %8)
  %23 = bitcast i64* %7 to i8*
  %24 = bitcast i64* %7 to [4 x i16]*
  %25 = trunc i64 %4 to i16
  %26 = lshr i64 %4, 16
  %27 = trunc i64 %26 to i16
  %28 = sub i16 %25, %27
  call void @llvm.lifetime.start(i64 8, i8* nonnull %23)
  store i64 %22, i64* %7, align 8
  %29 = getelementptr inbounds [4 x i16], [4 x i16]* %24, i64 0, i64 2
  store i16 %28, i16* %29, align 4
  %30 = load i64, i64* %7, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %23)
  %31 = lshr i64 %4, 32
  %32 = trunc i64 %31 to i16
  %33 = lshr i64 %4, 48
  %34 = trunc i64 %33 to i16
  %35 = sub i16 %32, %34
  call void @llvm.lifetime.start(i64 8, i8* nonnull %23)
  store i64 %30, i64* %7, align 8
  %36 = getelementptr inbounds [4 x i16], [4 x i16]* %24, i64 0, i64 3
  store i16 %35, i16* %36, align 2
  %37 = load i64, i64* %7, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %23)
  %38 = lshr i64 %37, 16
  %39 = lshr i64 %37, 32
  %40 = lshr i64 %37, 48
  %41 = trunc i64 %37 to i16
  %42 = trunc i64 %38 to i16
  %43 = trunc i64 %39 to i16
  %44 = trunc i64 %40 to i16
  %45 = bitcast i64* %2 to [4 x i16]*
  %46 = bitcast i64* %2 to i16*
  store i16 %41, i16* %46, align 1
  %47 = getelementptr inbounds [4 x i16], [4 x i16]* %45, i64 0, i64 1
  store i16 %42, i16* %47, align 1
  %48 = getelementptr inbounds [4 x i16], [4 x i16]* %45, i64 0, i64 2
  store i16 %43, i16* %48, align 1
  %49 = getelementptr inbounds [4 x i16], [4 x i16]* %45, i64 0, i64 3
  store i16 %44, i16* %49, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L6PHSUBWI4RVnWI7vec64_tE3RVnIS2_E3MVnIS2_EEEP6MemoryS9_R5StateT_T0_T1_(%struct.Memory* returned, %struct.State* nocapture readnone dereferenceable(3376), i64* nocapture, i64, i64)  {
  %6 = alloca i64, align 8
  %7 = alloca i64, align 8
  %8 = inttoptr i64 %4 to i16*
  %9 = load i16, i16* %8
  %10 = add i64 %4, 2
  %11 = inttoptr i64 %10 to i16*
  %12 = load i16, i16* %11
  %13 = add i64 %4, 4
  %14 = inttoptr i64 %13 to i16*
  %15 = load i16, i16* %14
  %16 = add i64 %4, 6
  %17 = inttoptr i64 %16 to i16*
  %18 = load i16, i16* %17
  %19 = bitcast i64* %6 to i8*
  %20 = bitcast i64* %6 to [4 x i16]*
  %21 = trunc i64 %3 to i16
  %22 = lshr i64 %3, 16
  %23 = trunc i64 %22 to i16
  %24 = sub i16 %21, %23
  call void @llvm.lifetime.start(i64 8, i8* nonnull %19)
  store i64 0, i64* %6, align 8
  %25 = bitcast i64* %6 to i16*
  store i16 %24, i16* %25, align 8
  %26 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %19)
  %27 = lshr i64 %3, 32
  %28 = trunc i64 %27 to i16
  %29 = lshr i64 %3, 48
  %30 = trunc i64 %29 to i16
  %31 = sub i16 %28, %30
  call void @llvm.lifetime.start(i64 8, i8* nonnull %19)
  store i64 %26, i64* %6, align 8
  %32 = getelementptr inbounds [4 x i16], [4 x i16]* %20, i64 0, i64 1
  store i16 %31, i16* %32, align 2
  %33 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %19)
  %34 = bitcast i64* %7 to i8*
  %35 = bitcast i64* %7 to [4 x i16]*
  %36 = sub i16 %9, %12
  call void @llvm.lifetime.start(i64 8, i8* nonnull %34)
  store i64 %33, i64* %7, align 8
  %37 = getelementptr inbounds [4 x i16], [4 x i16]* %35, i64 0, i64 2
  store i16 %36, i16* %37, align 4
  %38 = load i64, i64* %7, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %34)
  %39 = sub i16 %15, %18
  call void @llvm.lifetime.start(i64 8, i8* nonnull %34)
  store i64 %38, i64* %7, align 8
  %40 = getelementptr inbounds [4 x i16], [4 x i16]* %35, i64 0, i64 3
  store i16 %39, i16* %40, align 2
  %41 = load i64, i64* %7, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %34)
  %42 = lshr i64 %41, 16
  %43 = lshr i64 %41, 32
  %44 = lshr i64 %41, 48
  %45 = trunc i64 %41 to i16
  %46 = trunc i64 %42 to i16
  %47 = trunc i64 %43 to i16
  %48 = trunc i64 %44 to i16
  %49 = bitcast i64* %2 to [4 x i16]*
  %50 = bitcast i64* %2 to i16*
  store i16 %45, i16* %50, align 1
  %51 = getelementptr inbounds [4 x i16], [4 x i16]* %49, i64 0, i64 1
  store i16 %46, i16* %51, align 1
  %52 = getelementptr inbounds [4 x i16], [4 x i16]* %49, i64 0, i64 2
  store i16 %47, i16* %52, align 1
  %53 = getelementptr inbounds [4 x i16], [4 x i16]* %49, i64 0, i64 3
  store i16 %48, i16* %53, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L6PHSUBWI3VnWI8vec128_tE2VnIS2_ES5_EEP6MemoryS7_R5StateT_T0_T1_(%struct.Memory* readnone returned, %struct.State* nocapture readnone dereferenceable(3376), i8* nocapture, i8* nocapture readonly, i8* nocapture readonly)  {
  %6 = alloca <2 x i64>, align 16
  %7 = bitcast <2 x i64>* %6 to { i64, i64 }*
  %8 = alloca { i64, i64 }, align 8
  %9 = alloca <2 x i64>, align 16
  %10 = bitcast <2 x i64>* %9 to { i64, i64 }*
  %11 = bitcast i8* %3 to i64*
  %12 = load i64, i64* %11, align 1
  %13 = getelementptr inbounds i8, i8* %3, i64 8
  %14 = bitcast i8* %13 to i64*
  %15 = load i64, i64* %14, align 1
  %16 = bitcast <2 x i64>* %9 to i8*
  call void @llvm.lifetime.start(i64 16, i8* nonnull %16) 
  %17 = bitcast i8* %4 to <2 x i64>*
  %18 = load <2 x i64>, <2 x i64>* %17, align 1
  store <2 x i64> %18, <2 x i64>* %9, align 16
  %19 = bitcast <2 x i64>* %6 to i8*
  %20 = getelementptr inbounds <2 x i64>, <2 x i64>* %6, i64 0, i64 0
  %21 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %7, i64 0, i32 1
  %22 = bitcast <2 x i64>* %6 to [8 x i16]*
  %23 = trunc i64 %12 to i16
  %24 = lshr i64 %12, 16
  %25 = trunc i64 %24 to i16
  %26 = sub i16 %23, %25
  call void @llvm.lifetime.start(i64 16, i8* nonnull %19)
  store <2 x i64> zeroinitializer, <2 x i64>* %6, align 16
  %27 = bitcast <2 x i64>* %6 to i16*
  store i16 %26, i16* %27, align 16
  %28 = load i64, i64* %20, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %19)
  %29 = lshr i64 %12, 32
  %30 = trunc i64 %29 to i16
  %31 = lshr i64 %12, 48
  %32 = trunc i64 %31 to i16
  %33 = sub i16 %30, %32
  call void @llvm.lifetime.start(i64 16, i8* nonnull %19)
  store i64 %28, i64* %20, align 16
  store i64 0, i64* %21, align 8
  %34 = getelementptr inbounds [8 x i16], [8 x i16]* %22, i64 0, i64 1
  store i16 %33, i16* %34, align 2
  %35 = load i64, i64* %20, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %19)
  %36 = trunc i64 %15 to i16
  %37 = lshr i64 %15, 16
  %38 = trunc i64 %37 to i16
  %39 = sub i16 %36, %38
  call void @llvm.lifetime.start(i64 16, i8* nonnull %19)
  store i64 %35, i64* %20, align 16
  store i64 0, i64* %21, align 8
  %40 = getelementptr inbounds [8 x i16], [8 x i16]* %22, i64 0, i64 2
  store i16 %39, i16* %40, align 4
  %41 = load i64, i64* %20, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %19)
  %42 = lshr i64 %15, 32
  %43 = trunc i64 %42 to i16
  %44 = lshr i64 %15, 48
  %45 = trunc i64 %44 to i16
  %46 = sub i16 %43, %45
  call void @llvm.lifetime.start(i64 16, i8* nonnull %19)
  store i64 %41, i64* %20, align 16
  store i64 0, i64* %21, align 8
  %47 = getelementptr inbounds [8 x i16], [8 x i16]* %22, i64 0, i64 3
  store i16 %46, i16* %47, align 2
  %48 = load i64, i64* %20, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %19)
  %49 = bitcast <2 x i64>* %9 to %struct.uint16v8_t*
  %50 = bitcast { i64, i64 }* %8 to i8*
  %51 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %8, i64 0, i32 0
  %52 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %8, i64 0, i32 1
  %53 = bitcast { i64, i64 }* %8 to [8 x i16]*
  %54 = bitcast <2 x i64>* %9 to i16*
  %55 = load i16, i16* %54, align 16
  %56 = getelementptr inbounds %struct.uint16v8_t, %struct.uint16v8_t* %49, i64 0, i32 0, i64 1
  %57 = load i16, i16* %56, align 2
  %58 = sub i16 %55, %57
  call void @llvm.lifetime.start(i64 16, i8* nonnull %50)
  store i64 %48, i64* %51, align 8
  store i64 0, i64* %52, align 8
  %59 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %8, i64 0, i32 1
  %60 = bitcast i64* %59 to i16*
  store i16 %58, i16* %60, align 8
  %61 = load i64, i64* %52, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %50)
  %62 = getelementptr inbounds %struct.uint16v8_t, %struct.uint16v8_t* %49, i64 0, i32 0, i64 2
  %63 = load i16, i16* %62, align 4
  %64 = getelementptr inbounds %struct.uint16v8_t, %struct.uint16v8_t* %49, i64 0, i32 0, i64 3
  %65 = load i16, i16* %64, align 2
  %66 = sub i16 %63, %65
  call void @llvm.lifetime.start(i64 16, i8* nonnull %50)
  store i64 %48, i64* %51, align 8
  store i64 %61, i64* %52, align 8
  %67 = getelementptr inbounds [8 x i16], [8 x i16]* %53, i64 0, i64 5
  store i16 %66, i16* %67, align 2
  %68 = load i64, i64* %52, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %50)
  %69 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %10, i64 0, i32 1
  %70 = bitcast i64* %69 to i16*
  %71 = load i16, i16* %70, align 8
  %72 = getelementptr inbounds %struct.uint16v8_t, %struct.uint16v8_t* %49, i64 0, i32 0, i64 5
  %73 = load i16, i16* %72, align 2
  %74 = sub i16 %71, %73
  call void @llvm.lifetime.start(i64 16, i8* nonnull %50)
  store i64 %48, i64* %51, align 8
  store i64 %68, i64* %52, align 8
  %75 = getelementptr inbounds [8 x i16], [8 x i16]* %53, i64 0, i64 6
  store i16 %74, i16* %75, align 4
  %76 = load i64, i64* %52, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %50)
  %77 = getelementptr inbounds %struct.uint16v8_t, %struct.uint16v8_t* %49, i64 0, i32 0, i64 6
  %78 = load i16, i16* %77, align 4
  %79 = getelementptr inbounds %struct.uint16v8_t, %struct.uint16v8_t* %49, i64 0, i32 0, i64 7
  %80 = load i16, i16* %79, align 2
  %81 = sub i16 %78, %80
  call void @llvm.lifetime.start(i64 16, i8* nonnull %50)
  store i64 %48, i64* %51, align 8
  store i64 %76, i64* %52, align 8
  %82 = getelementptr inbounds [8 x i16], [8 x i16]* %53, i64 0, i64 7
  store i16 %81, i16* %82, align 2
  %83 = load i64, i64* %52, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %50)
  %84 = lshr i64 %48, 16
  %85 = lshr i64 %48, 32
  %86 = lshr i64 %48, 48
  %87 = trunc i64 %48 to i16
  %88 = trunc i64 %84 to i16
  %89 = trunc i64 %85 to i16
  %90 = trunc i64 %86 to i16
  %91 = bitcast i8* %2 to i16*
  store i16 %87, i16* %91, align 1
  %92 = getelementptr inbounds i8, i8* %2, i64 2
  %93 = bitcast i8* %92 to i16*
  store i16 %88, i16* %93, align 1
  %94 = getelementptr inbounds i8, i8* %2, i64 4
  %95 = bitcast i8* %94 to i16*
  store i16 %89, i16* %95, align 1
  %96 = getelementptr inbounds i8, i8* %2, i64 6
  %97 = bitcast i8* %96 to i16*
  store i16 %90, i16* %97, align 1
  %98 = trunc i64 %83 to i16
  %99 = getelementptr inbounds i8, i8* %2, i64 8
  %100 = bitcast i8* %99 to i16*
  store i16 %98, i16* %100, align 1
  %101 = lshr i64 %83, 16
  %102 = trunc i64 %101 to i16
  %103 = getelementptr inbounds i8, i8* %2, i64 10
  %104 = bitcast i8* %103 to i16*
  store i16 %102, i16* %104, align 1
  %105 = lshr i64 %83, 32
  %106 = trunc i64 %105 to i16
  %107 = getelementptr inbounds i8, i8* %2, i64 12
  %108 = bitcast i8* %107 to i16*
  store i16 %106, i16* %108, align 1
  %109 = lshr i64 %83, 48
  %110 = trunc i64 %109 to i16
  %111 = getelementptr inbounds i8, i8* %2, i64 14
  %112 = bitcast i8* %111 to i16*
  store i16 %110, i16* %112, align 1
  call void @llvm.lifetime.end(i64 16, i8* nonnull %16) 
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L6PHSUBWI3VnWI8vec128_tE2VnIS2_E3MVnIS2_EEEP6MemoryS9_R5StateT_T0_T1_(%struct.Memory* returned, %struct.State* nocapture readnone dereferenceable(3376), i8* nocapture, i8* nocapture readonly, i64)  {
  %6 = alloca <2 x i64>, align 16
  %7 = bitcast <2 x i64>* %6 to { i64, i64 }*
  %8 = alloca { i64, i64 }, align 8
  %9 = alloca { i64, i64 }, align 8
  %10 = bitcast { i64, i64 }* %9 to %struct.uint16v8_t*
  %11 = alloca <2 x i64>, align 16
  %12 = bitcast <2 x i64>* %11 to { i64, i64 }*
  %13 = bitcast { i64, i64 }* %9 to i8*
  call void @llvm.lifetime.start(i64 16, i8* nonnull %13) 
  %14 = bitcast i8* %3 to i64*
  %15 = load i64, i64* %14, align 1
  %16 = getelementptr inbounds i8, i8* %3, i64 8
  %17 = bitcast i8* %16 to i64*
  %18 = load i64, i64* %17, align 1
  %19 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %9, i64 0, i32 0
  store i64 %15, i64* %19, align 8
  %20 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %9, i64 0, i32 1
  store i64 %18, i64* %20, align 8
  %21 = bitcast <2 x i64>* %11 to i8*
  call void @llvm.lifetime.start(i64 16, i8* nonnull %21) 
  %22 = inttoptr i64 %4 to i16*
  %23 = load i16, i16* %22
  %24 = add i64 %4, 2
  %25 = inttoptr i64 %24 to i16*
  %26 = load i16, i16* %25
  %27 = add i64 %4, 4
  %28 = inttoptr i64 %27 to i16*
  %29 = load i16, i16* %28
  %30 = add i64 %4, 6
  %31 = inttoptr i64 %30 to i16*
  %32 = load i16, i16* %31
  %33 = add i64 %4, 8
  %34 = inttoptr i64 %33 to i16*
  %35 = load i16, i16* %34
  %36 = add i64 %4, 10
  %37 = inttoptr i64 %36 to i16*
  %38 = load i16, i16* %37
  %39 = add i64 %4, 12
  %40 = inttoptr i64 %39 to i16*
  %41 = load i16, i16* %40
  %42 = add i64 %4, 14
  %43 = inttoptr i64 %42 to i16*
  %44 = load i16, i16* %43
  %45 = insertelement <2 x i16> undef, i16 %32, i32 0
  %46 = insertelement <2 x i16> %45, i16 %44, i32 1
  %47 = zext <2 x i16> %46 to <2 x i64>
  %48 = shl nuw <2 x i64> %47, <i64 48, i64 48>
  %49 = insertelement <2 x i16> undef, i16 %29, i32 0
  %50 = insertelement <2 x i16> %49, i16 %41, i32 1
  %51 = zext <2 x i16> %50 to <2 x i64>
  %52 = shl nuw nsw <2 x i64> %51, <i64 32, i64 32>
  %53 = insertelement <2 x i16> undef, i16 %26, i32 0
  %54 = insertelement <2 x i16> %53, i16 %38, i32 1
  %55 = zext <2 x i16> %54 to <2 x i64>
  %56 = shl nuw nsw <2 x i64> %55, <i64 16, i64 16>
  %57 = insertelement <2 x i16> undef, i16 %23, i32 0
  %58 = insertelement <2 x i16> %57, i16 %35, i32 1
  %59 = zext <2 x i16> %58 to <2 x i64>
  %60 = or <2 x i64> %56, %59
  %61 = or <2 x i64> %60, %52
  %62 = or <2 x i64> %61, %48
  store <2 x i64> %62, <2 x i64>* %11, align 16
  %63 = bitcast <2 x i64>* %6 to i8*
  %64 = getelementptr inbounds <2 x i64>, <2 x i64>* %6, i64 0, i64 0
  %65 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %7, i64 0, i32 1
  %66 = bitcast <2 x i64>* %6 to [8 x i16]*
  %67 = trunc i64 %15 to i16
  %68 = lshr i64 %15, 16
  %69 = trunc i64 %68 to i16
  %70 = sub i16 %67, %69
  call void @llvm.lifetime.start(i64 16, i8* nonnull %63)
  store <2 x i64> zeroinitializer, <2 x i64>* %6, align 16
  %71 = bitcast <2 x i64>* %6 to i16*
  store i16 %70, i16* %71, align 16
  %72 = load i64, i64* %64, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %63)
  %73 = lshr i64 %15, 32
  %74 = trunc i64 %73 to i16
  %75 = lshr i64 %15, 48
  %76 = trunc i64 %75 to i16
  %77 = sub i16 %74, %76
  call void @llvm.lifetime.start(i64 16, i8* nonnull %63)
  store i64 %72, i64* %64, align 16
  store i64 0, i64* %65, align 8
  %78 = getelementptr inbounds [8 x i16], [8 x i16]* %66, i64 0, i64 1
  store i16 %77, i16* %78, align 2
  %79 = load i64, i64* %64, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %63)
  %80 = trunc i64 %18 to i16
  %81 = lshr i64 %18, 16
  %82 = trunc i64 %81 to i16
  %83 = sub i16 %80, %82
  call void @llvm.lifetime.start(i64 16, i8* nonnull %63)
  store i64 %79, i64* %64, align 16
  store i64 0, i64* %65, align 8
  %84 = getelementptr inbounds [8 x i16], [8 x i16]* %66, i64 0, i64 2
  store i16 %83, i16* %84, align 4
  %85 = load i64, i64* %64, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %63)
  %86 = getelementptr inbounds %struct.uint16v8_t, %struct.uint16v8_t* %10, i64 0, i32 0, i64 6
  %87 = load i16, i16* %86, align 4
  %88 = getelementptr inbounds %struct.uint16v8_t, %struct.uint16v8_t* %10, i64 0, i32 0, i64 7
  %89 = load i16, i16* %88, align 2
  %90 = sub i16 %87, %89
  call void @llvm.lifetime.start(i64 16, i8* nonnull %63)
  store i64 %85, i64* %64, align 16
  store i64 0, i64* %65, align 8
  %91 = getelementptr inbounds [8 x i16], [8 x i16]* %66, i64 0, i64 3
  store i16 %90, i16* %91, align 2
  %92 = load i64, i64* %64, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %63)
  %93 = bitcast <2 x i64>* %11 to %struct.uint16v8_t*
  %94 = bitcast { i64, i64 }* %8 to i8*
  %95 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %8, i64 0, i32 0
  %96 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %8, i64 0, i32 1
  %97 = bitcast { i64, i64 }* %8 to [8 x i16]*
  %98 = bitcast <2 x i64>* %11 to i16*
  %99 = load i16, i16* %98, align 16
  %100 = getelementptr inbounds %struct.uint16v8_t, %struct.uint16v8_t* %93, i64 0, i32 0, i64 1
  %101 = load i16, i16* %100, align 2
  %102 = sub i16 %99, %101
  call void @llvm.lifetime.start(i64 16, i8* nonnull %94)
  store i64 %92, i64* %95, align 8
  store i64 0, i64* %96, align 8
  %103 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %8, i64 0, i32 1
  %104 = bitcast i64* %103 to i16*
  store i16 %102, i16* %104, align 8
  %105 = load i64, i64* %96, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %94)
  %106 = getelementptr inbounds %struct.uint16v8_t, %struct.uint16v8_t* %93, i64 0, i32 0, i64 2
  %107 = load i16, i16* %106, align 4
  %108 = getelementptr inbounds %struct.uint16v8_t, %struct.uint16v8_t* %93, i64 0, i32 0, i64 3
  %109 = load i16, i16* %108, align 2
  %110 = sub i16 %107, %109
  call void @llvm.lifetime.start(i64 16, i8* nonnull %94)
  store i64 %92, i64* %95, align 8
  store i64 %105, i64* %96, align 8
  %111 = getelementptr inbounds [8 x i16], [8 x i16]* %97, i64 0, i64 5
  store i16 %110, i16* %111, align 2
  %112 = load i64, i64* %96, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %94)
  %113 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %12, i64 0, i32 1
  %114 = bitcast i64* %113 to i16*
  %115 = load i16, i16* %114, align 8
  %116 = getelementptr inbounds %struct.uint16v8_t, %struct.uint16v8_t* %93, i64 0, i32 0, i64 5
  %117 = load i16, i16* %116, align 2
  %118 = sub i16 %115, %117
  call void @llvm.lifetime.start(i64 16, i8* nonnull %94)
  store i64 %92, i64* %95, align 8
  store i64 %112, i64* %96, align 8
  %119 = getelementptr inbounds [8 x i16], [8 x i16]* %97, i64 0, i64 6
  store i16 %118, i16* %119, align 4
  %120 = load i64, i64* %96, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %94)
  %121 = getelementptr inbounds %struct.uint16v8_t, %struct.uint16v8_t* %93, i64 0, i32 0, i64 6
  %122 = load i16, i16* %121, align 4
  %123 = getelementptr inbounds %struct.uint16v8_t, %struct.uint16v8_t* %93, i64 0, i32 0, i64 7
  %124 = load i16, i16* %123, align 2
  %125 = sub i16 %122, %124
  call void @llvm.lifetime.start(i64 16, i8* nonnull %94)
  store i64 %92, i64* %95, align 8
  store i64 %120, i64* %96, align 8
  %126 = getelementptr inbounds [8 x i16], [8 x i16]* %97, i64 0, i64 7
  store i16 %125, i16* %126, align 2
  %127 = load i64, i64* %96, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %94)
  %128 = lshr i64 %92, 16
  %129 = lshr i64 %92, 32
  %130 = lshr i64 %92, 48
  %131 = trunc i64 %92 to i16
  %132 = trunc i64 %128 to i16
  %133 = trunc i64 %129 to i16
  %134 = trunc i64 %130 to i16
  %135 = bitcast i8* %2 to i16*
  store i16 %131, i16* %135, align 1
  %136 = getelementptr inbounds i8, i8* %2, i64 2
  %137 = bitcast i8* %136 to i16*
  store i16 %132, i16* %137, align 1
  %138 = getelementptr inbounds i8, i8* %2, i64 4
  %139 = bitcast i8* %138 to i16*
  store i16 %133, i16* %139, align 1
  %140 = getelementptr inbounds i8, i8* %2, i64 6
  %141 = bitcast i8* %140 to i16*
  store i16 %134, i16* %141, align 1
  %142 = trunc i64 %127 to i16
  %143 = getelementptr inbounds i8, i8* %2, i64 8
  %144 = bitcast i8* %143 to i16*
  store i16 %142, i16* %144, align 1
  %145 = lshr i64 %127, 16
  %146 = trunc i64 %145 to i16
  %147 = getelementptr inbounds i8, i8* %2, i64 10
  %148 = bitcast i8* %147 to i16*
  store i16 %146, i16* %148, align 1
  %149 = lshr i64 %127, 32
  %150 = trunc i64 %149 to i16
  %151 = getelementptr inbounds i8, i8* %2, i64 12
  %152 = bitcast i8* %151 to i16*
  store i16 %150, i16* %152, align 1
  %153 = lshr i64 %127, 48
  %154 = trunc i64 %153 to i16
  %155 = getelementptr inbounds i8, i8* %2, i64 14
  %156 = bitcast i8* %155 to i16*
  store i16 %154, i16* %156, align 1
  call void @llvm.lifetime.end(i64 16, i8* nonnull %21) 
  call void @llvm.lifetime.end(i64 16, i8* nonnull %13) 
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L6PHSUBDI4RVnWI7vec64_tE3RVnIS2_ES5_EEP6MemoryS7_R5StateT_T0_T1_(%struct.Memory* readnone returned, %struct.State* nocapture readnone dereferenceable(3376), i64* nocapture, i64, i64)  {
  %6 = alloca i64, align 8
  %7 = alloca i64, align 8
  %8 = bitcast i64* %6 to i8*
  %9 = trunc i64 %3 to i32
  %10 = lshr i64 %3, 32
  %11 = trunc i64 %10 to i32
  %12 = sub i32 %9, %11
  call void @llvm.lifetime.start(i64 8, i8* nonnull %8)
  store i64 0, i64* %6, align 8
  %13 = bitcast i64* %6 to i32*
  store i32 %12, i32* %13, align 8
  %14 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %8)
  %15 = bitcast i64* %7 to i8*
  %16 = bitcast i64* %7 to [2 x i32]*
  %17 = trunc i64 %4 to i32
  %18 = lshr i64 %4, 32
  %19 = trunc i64 %18 to i32
  %20 = sub i32 %17, %19
  call void @llvm.lifetime.start(i64 8, i8* nonnull %15)
  store i64 %14, i64* %7, align 8
  %21 = getelementptr inbounds [2 x i32], [2 x i32]* %16, i64 0, i64 1
  store i32 %20, i32* %21, align 4
  %22 = load i64, i64* %7, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %15)
  %23 = lshr i64 %22, 32
  %24 = trunc i64 %22 to i32
  %25 = trunc i64 %23 to i32
  %26 = bitcast i64* %2 to [2 x i32]*
  %27 = bitcast i64* %2 to i32*
  store i32 %24, i32* %27, align 1
  %28 = getelementptr inbounds [2 x i32], [2 x i32]* %26, i64 0, i64 1
  store i32 %25, i32* %28, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L6PHSUBDI4RVnWI7vec64_tE3RVnIS2_E3MVnIS2_EEEP6MemoryS9_R5StateT_T0_T1_(%struct.Memory* returned, %struct.State* nocapture readnone dereferenceable(3376), i64* nocapture, i64, i64)  {
  %6 = alloca i64, align 8
  %7 = alloca i64, align 8
  %8 = inttoptr i64 %4 to i32*
  %9 = load i32, i32* %8
  %10 = add i64 %4, 4
  %11 = inttoptr i64 %10 to i32*
  %12 = load i32, i32* %11
  %13 = bitcast i64* %6 to i8*
  %14 = trunc i64 %3 to i32
  %15 = lshr i64 %3, 32
  %16 = trunc i64 %15 to i32
  %17 = sub i32 %14, %16
  call void @llvm.lifetime.start(i64 8, i8* nonnull %13)
  store i64 0, i64* %6, align 8
  %18 = bitcast i64* %6 to i32*
  store i32 %17, i32* %18, align 8
  %19 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %13)
  %20 = bitcast i64* %7 to i8*
  %21 = bitcast i64* %7 to [2 x i32]*
  %22 = sub i32 %9, %12
  call void @llvm.lifetime.start(i64 8, i8* nonnull %20)
  store i64 %19, i64* %7, align 8
  %23 = getelementptr inbounds [2 x i32], [2 x i32]* %21, i64 0, i64 1
  store i32 %22, i32* %23, align 4
  %24 = load i64, i64* %7, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %20)
  %25 = lshr i64 %24, 32
  %26 = trunc i64 %24 to i32
  %27 = trunc i64 %25 to i32
  %28 = bitcast i64* %2 to [2 x i32]*
  %29 = bitcast i64* %2 to i32*
  store i32 %26, i32* %29, align 1
  %30 = getelementptr inbounds [2 x i32], [2 x i32]* %28, i64 0, i64 1
  store i32 %27, i32* %30, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L6PHSUBDI3VnWI8vec128_tE2VnIS2_ES5_EEP6MemoryS7_R5StateT_T0_T1_(%struct.Memory* readnone returned, %struct.State* nocapture readnone dereferenceable(3376), i8* nocapture, i8* nocapture readonly, i8* nocapture readonly)  {
  %6 = alloca <2 x i64>, align 16
  %7 = bitcast <2 x i64>* %6 to { i64, i64 }*
  %8 = alloca { i64, i64 }, align 8
  %9 = bitcast i8* %3 to i64*
  %10 = load i64, i64* %9, align 1
  %11 = getelementptr inbounds i8, i8* %3, i64 8
  %12 = bitcast i8* %11 to i64*
  %13 = load i64, i64* %12, align 1
  %14 = bitcast i8* %4 to i64*
  %15 = load i64, i64* %14, align 1
  %16 = getelementptr inbounds i8, i8* %4, i64 8
  %17 = bitcast i8* %16 to i64*
  %18 = load i64, i64* %17, align 1
  %19 = bitcast <2 x i64>* %6 to i8*
  %20 = getelementptr inbounds <2 x i64>, <2 x i64>* %6, i64 0, i64 0
  %21 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %7, i64 0, i32 1
  %22 = bitcast <2 x i64>* %6 to [4 x i32]*
  %23 = trunc i64 %10 to i32
  %24 = lshr i64 %10, 32
  %25 = trunc i64 %24 to i32
  %26 = sub i32 %23, %25
  call void @llvm.lifetime.start(i64 16, i8* nonnull %19)
  store <2 x i64> zeroinitializer, <2 x i64>* %6, align 16
  %27 = bitcast <2 x i64>* %6 to i32*
  store i32 %26, i32* %27, align 16
  %28 = load i64, i64* %20, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %19)
  %29 = trunc i64 %13 to i32
  %30 = lshr i64 %13, 32
  %31 = trunc i64 %30 to i32
  %32 = sub i32 %29, %31
  call void @llvm.lifetime.start(i64 16, i8* nonnull %19)
  store i64 %28, i64* %20, align 16
  store i64 0, i64* %21, align 8
  %33 = getelementptr inbounds [4 x i32], [4 x i32]* %22, i64 0, i64 1
  store i32 %32, i32* %33, align 4
  %34 = load i64, i64* %20, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %19)
  %35 = bitcast { i64, i64 }* %8 to i8*
  %36 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %8, i64 0, i32 0
  %37 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %8, i64 0, i32 1
  %38 = bitcast { i64, i64 }* %8 to [4 x i32]*
  %39 = trunc i64 %15 to i32
  %40 = lshr i64 %15, 32
  %41 = trunc i64 %40 to i32
  %42 = sub i32 %39, %41
  call void @llvm.lifetime.start(i64 16, i8* nonnull %35)
  store i64 %34, i64* %36, align 8
  store i64 0, i64* %37, align 8
  %43 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %8, i64 0, i32 1
  %44 = bitcast i64* %43 to i32*
  store i32 %42, i32* %44, align 8
  %45 = load i64, i64* %37, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %35)
  %46 = trunc i64 %18 to i32
  %47 = lshr i64 %18, 32
  %48 = trunc i64 %47 to i32
  %49 = sub i32 %46, %48
  call void @llvm.lifetime.start(i64 16, i8* nonnull %35)
  store i64 %34, i64* %36, align 8
  store i64 %45, i64* %37, align 8
  %50 = getelementptr inbounds [4 x i32], [4 x i32]* %38, i64 0, i64 3
  store i32 %49, i32* %50, align 4
  %51 = load i64, i64* %37, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %35)
  %52 = lshr i64 %34, 32
  %53 = trunc i64 %34 to i32
  %54 = trunc i64 %52 to i32
  %55 = bitcast i8* %2 to i32*
  store i32 %53, i32* %55, align 1
  %56 = getelementptr inbounds i8, i8* %2, i64 4
  %57 = bitcast i8* %56 to i32*
  store i32 %54, i32* %57, align 1
  %58 = trunc i64 %51 to i32
  %59 = getelementptr inbounds i8, i8* %2, i64 8
  %60 = bitcast i8* %59 to i32*
  store i32 %58, i32* %60, align 1
  %61 = lshr i64 %51, 32
  %62 = trunc i64 %61 to i32
  %63 = getelementptr inbounds i8, i8* %2, i64 12
  %64 = bitcast i8* %63 to i32*
  store i32 %62, i32* %64, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L6PHSUBDI3VnWI8vec128_tE2VnIS2_E3MVnIS2_EEEP6MemoryS9_R5StateT_T0_T1_(%struct.Memory* returned, %struct.State* nocapture readnone dereferenceable(3376), i8* nocapture, i8* nocapture readonly, i64)  {
  %6 = alloca <2 x i64>, align 16
  %7 = bitcast <2 x i64>* %6 to { i64, i64 }*
  %8 = alloca { i64, i64 }, align 8
  %9 = bitcast i8* %3 to i64*
  %10 = load i64, i64* %9, align 1
  %11 = getelementptr inbounds i8, i8* %3, i64 8
  %12 = bitcast i8* %11 to i64*
  %13 = load i64, i64* %12, align 1
  %14 = inttoptr i64 %4 to i32*
  %15 = load i32, i32* %14
  %16 = add i64 %4, 4
  %17 = inttoptr i64 %16 to i32*
  %18 = load i32, i32* %17
  %19 = add i64 %4, 8
  %20 = inttoptr i64 %19 to i32*
  %21 = load i32, i32* %20
  %22 = add i64 %4, 12
  %23 = inttoptr i64 %22 to i32*
  %24 = load i32, i32* %23
  %25 = bitcast <2 x i64>* %6 to i8*
  %26 = getelementptr inbounds <2 x i64>, <2 x i64>* %6, i64 0, i64 0
  %27 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %7, i64 0, i32 1
  %28 = bitcast <2 x i64>* %6 to [4 x i32]*
  %29 = trunc i64 %10 to i32
  %30 = lshr i64 %10, 32
  %31 = trunc i64 %30 to i32
  %32 = sub i32 %29, %31
  call void @llvm.lifetime.start(i64 16, i8* nonnull %25)
  store <2 x i64> zeroinitializer, <2 x i64>* %6, align 16
  %33 = bitcast <2 x i64>* %6 to i32*
  store i32 %32, i32* %33, align 16
  %34 = load i64, i64* %26, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %25)
  %35 = trunc i64 %13 to i32
  %36 = lshr i64 %13, 32
  %37 = trunc i64 %36 to i32
  %38 = sub i32 %35, %37
  call void @llvm.lifetime.start(i64 16, i8* nonnull %25)
  store i64 %34, i64* %26, align 16
  store i64 0, i64* %27, align 8
  %39 = getelementptr inbounds [4 x i32], [4 x i32]* %28, i64 0, i64 1
  store i32 %38, i32* %39, align 4
  %40 = load i64, i64* %26, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %25)
  %41 = bitcast { i64, i64 }* %8 to i8*
  %42 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %8, i64 0, i32 0
  %43 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %8, i64 0, i32 1
  %44 = bitcast { i64, i64 }* %8 to [4 x i32]*
  %45 = sub i32 %15, %18
  call void @llvm.lifetime.start(i64 16, i8* nonnull %41)
  store i64 %40, i64* %42, align 8
  store i64 0, i64* %43, align 8
  %46 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %8, i64 0, i32 1
  %47 = bitcast i64* %46 to i32*
  store i32 %45, i32* %47, align 8
  %48 = load i64, i64* %43, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %41)
  %49 = sub i32 %21, %24
  call void @llvm.lifetime.start(i64 16, i8* nonnull %41)
  store i64 %40, i64* %42, align 8
  store i64 %48, i64* %43, align 8
  %50 = getelementptr inbounds [4 x i32], [4 x i32]* %44, i64 0, i64 3
  store i32 %49, i32* %50, align 4
  %51 = load i64, i64* %43, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %41)
  %52 = lshr i64 %40, 32
  %53 = trunc i64 %40 to i32
  %54 = trunc i64 %52 to i32
  %55 = bitcast i8* %2 to i32*
  store i32 %53, i32* %55, align 1
  %56 = getelementptr inbounds i8, i8* %2, i64 4
  %57 = bitcast i8* %56 to i32*
  store i32 %54, i32* %57, align 1
  %58 = trunc i64 %51 to i32
  %59 = getelementptr inbounds i8, i8* %2, i64 8
  %60 = bitcast i8* %59 to i32*
  store i32 %58, i32* %60, align 1
  %61 = lshr i64 %51, 32
  %62 = trunc i64 %61 to i32
  %63 = getelementptr inbounds i8, i8* %2, i64 12
  %64 = bitcast i8* %63 to i32*
  store i32 %62, i32* %64, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L6PMAXSWI4RVnWI7vec64_tE3RVnIS2_ES5_EEP6MemoryS7_R5StateT_T0_T1_(%struct.Memory* readnone returned, %struct.State* nocapture readnone dereferenceable(3376), i64* nocapture, i64, i64)  {
  %6 = alloca i64, align 8
  %7 = bitcast i64* %6 to i8*
  %8 = bitcast i64* %6 to [4 x i16]*
  %9 = trunc i64 %3 to i16
  %10 = trunc i64 %4 to i16
  %11 = icmp sgt i16 %9, %10
  %12 = select i1 %11, i16 %9, i16 %10
  call void @llvm.lifetime.start(i64 8, i8* nonnull %7)
  store i64 0, i64* %6, align 8
  %13 = bitcast i64* %6 to i16*
  store i16 %12, i16* %13, align 8
  %14 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %7)
  %15 = lshr i64 %3, 16
  %16 = trunc i64 %15 to i16
  %17 = lshr i64 %4, 16
  %18 = trunc i64 %17 to i16
  %19 = icmp sgt i16 %16, %18
  %20 = select i1 %19, i16 %16, i16 %18
  call void @llvm.lifetime.start(i64 8, i8* nonnull %7)
  store i64 %14, i64* %6, align 8
  %21 = getelementptr inbounds [4 x i16], [4 x i16]* %8, i64 0, i64 1
  store i16 %20, i16* %21, align 2
  %22 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %7)
  %23 = lshr i64 %3, 32
  %24 = trunc i64 %23 to i16
  %25 = lshr i64 %4, 32
  %26 = trunc i64 %25 to i16
  %27 = icmp sgt i16 %24, %26
  %28 = select i1 %27, i16 %24, i16 %26
  call void @llvm.lifetime.start(i64 8, i8* nonnull %7)
  store i64 %22, i64* %6, align 8
  %29 = getelementptr inbounds [4 x i16], [4 x i16]* %8, i64 0, i64 2
  store i16 %28, i16* %29, align 4
  %30 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %7)
  %31 = lshr i64 %3, 48
  %32 = trunc i64 %31 to i16
  %33 = lshr i64 %4, 48
  %34 = trunc i64 %33 to i16
  %35 = icmp sgt i16 %32, %34
  %36 = select i1 %35, i16 %32, i16 %34
  call void @llvm.lifetime.start(i64 8, i8* nonnull %7)
  store i64 %30, i64* %6, align 8
  %37 = getelementptr inbounds [4 x i16], [4 x i16]* %8, i64 0, i64 3
  store i16 %36, i16* %37, align 2
  %38 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %7)
  %39 = lshr i64 %38, 16
  %40 = lshr i64 %38, 32
  %41 = lshr i64 %38, 48
  %42 = trunc i64 %38 to i16
  %43 = trunc i64 %39 to i16
  %44 = trunc i64 %40 to i16
  %45 = trunc i64 %41 to i16
  %46 = bitcast i64* %2 to [4 x i16]*
  %47 = bitcast i64* %2 to i16*
  store i16 %42, i16* %47, align 1
  %48 = getelementptr inbounds [4 x i16], [4 x i16]* %46, i64 0, i64 1
  store i16 %43, i16* %48, align 1
  %49 = getelementptr inbounds [4 x i16], [4 x i16]* %46, i64 0, i64 2
  store i16 %44, i16* %49, align 1
  %50 = getelementptr inbounds [4 x i16], [4 x i16]* %46, i64 0, i64 3
  store i16 %45, i16* %50, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L6PMAXSWI4RVnWI7vec64_tE3RVnIS2_E3MVnIS2_EEEP6MemoryS9_R5StateT_T0_T1_(%struct.Memory* returned, %struct.State* nocapture readnone dereferenceable(3376), i64* nocapture, i64, i64)  {
  %6 = alloca i64, align 8
  %7 = inttoptr i64 %4 to i16*
  %8 = load i16, i16* %7
  %9 = add i64 %4, 2
  %10 = inttoptr i64 %9 to i16*
  %11 = load i16, i16* %10
  %12 = add i64 %4, 4
  %13 = inttoptr i64 %12 to i16*
  %14 = load i16, i16* %13
  %15 = add i64 %4, 6
  %16 = inttoptr i64 %15 to i16*
  %17 = load i16, i16* %16
  %18 = bitcast i64* %6 to i8*
  %19 = bitcast i64* %6 to [4 x i16]*
  %20 = trunc i64 %3 to i16
  %21 = icmp sgt i16 %20, %8
  %22 = select i1 %21, i16 %20, i16 %8
  call void @llvm.lifetime.start(i64 8, i8* nonnull %18)
  store i64 0, i64* %6, align 8
  %23 = bitcast i64* %6 to i16*
  store i16 %22, i16* %23, align 8
  %24 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %18)
  %25 = lshr i64 %3, 16
  %26 = trunc i64 %25 to i16
  %27 = icmp sgt i16 %26, %11
  %28 = select i1 %27, i16 %26, i16 %11
  call void @llvm.lifetime.start(i64 8, i8* nonnull %18)
  store i64 %24, i64* %6, align 8
  %29 = getelementptr inbounds [4 x i16], [4 x i16]* %19, i64 0, i64 1
  store i16 %28, i16* %29, align 2
  %30 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %18)
  %31 = lshr i64 %3, 32
  %32 = trunc i64 %31 to i16
  %33 = icmp sgt i16 %32, %14
  %34 = select i1 %33, i16 %32, i16 %14
  call void @llvm.lifetime.start(i64 8, i8* nonnull %18)
  store i64 %30, i64* %6, align 8
  %35 = getelementptr inbounds [4 x i16], [4 x i16]* %19, i64 0, i64 2
  store i16 %34, i16* %35, align 4
  %36 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %18)
  %37 = lshr i64 %3, 48
  %38 = trunc i64 %37 to i16
  %39 = icmp sgt i16 %38, %17
  %40 = select i1 %39, i16 %38, i16 %17
  call void @llvm.lifetime.start(i64 8, i8* nonnull %18)
  store i64 %36, i64* %6, align 8
  %41 = getelementptr inbounds [4 x i16], [4 x i16]* %19, i64 0, i64 3
  store i16 %40, i16* %41, align 2
  %42 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %18)
  %43 = lshr i64 %42, 16
  %44 = lshr i64 %42, 32
  %45 = lshr i64 %42, 48
  %46 = trunc i64 %42 to i16
  %47 = trunc i64 %43 to i16
  %48 = trunc i64 %44 to i16
  %49 = trunc i64 %45 to i16
  %50 = bitcast i64* %2 to [4 x i16]*
  %51 = bitcast i64* %2 to i16*
  store i16 %46, i16* %51, align 1
  %52 = getelementptr inbounds [4 x i16], [4 x i16]* %50, i64 0, i64 1
  store i16 %47, i16* %52, align 1
  %53 = getelementptr inbounds [4 x i16], [4 x i16]* %50, i64 0, i64 2
  store i16 %48, i16* %53, align 1
  %54 = getelementptr inbounds [4 x i16], [4 x i16]* %50, i64 0, i64 3
  store i16 %49, i16* %54, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L6PMAXSWI3VnWI8vec128_tE2VnIS2_ES5_EEP6MemoryS7_R5StateT_T0_T1_(%struct.Memory* readnone returned, %struct.State* nocapture readnone dereferenceable(3376), i8* nocapture, i8* nocapture readonly, i8* nocapture readonly)  {
  %6 = alloca <2 x i64>, align 16
  %7 = bitcast <2 x i64>* %6 to { i64, i64 }*
  %8 = alloca <2 x i64>, align 16
  %9 = bitcast <2 x i64>* %8 to { i64, i64 }*
  %10 = bitcast <2 x i64>* %8 to %struct.uint16v8_t*
  %11 = alloca <2 x i64>, align 16
  %12 = bitcast <2 x i64>* %11 to { i64, i64 }*
  %13 = bitcast <2 x i64>* %11 to %struct.uint16v8_t*
  %14 = bitcast <2 x i64>* %8 to i8*
  call void @llvm.lifetime.start(i64 16, i8* nonnull %14) 
  %15 = bitcast i8* %3 to <2 x i64>*
  %16 = load <2 x i64>, <2 x i64>* %15, align 1
  store <2 x i64> %16, <2 x i64>* %8, align 16
  %17 = bitcast <2 x i64>* %11 to i8*
  call void @llvm.lifetime.start(i64 16, i8* nonnull %17) 
  %18 = bitcast i8* %4 to <2 x i64>*
  %19 = load <2 x i64>, <2 x i64>* %18, align 1
  store <2 x i64> %19, <2 x i64>* %11, align 16
  %20 = bitcast <2 x i64>* %6 to i8*
  %21 = getelementptr inbounds <2 x i64>, <2 x i64>* %6, i64 0, i64 0
  %22 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %7, i64 0, i32 1
  %23 = bitcast <2 x i64>* %6 to [8 x i16]*
  %24 = extractelement <2 x i64> %16, i32 0
  %25 = trunc i64 %24 to i16
  %26 = extractelement <2 x i64> %19, i32 0
  %27 = trunc i64 %26 to i16
  %28 = icmp sgt i16 %25, %27
  %29 = select i1 %28, i16 %25, i16 %27
  call void @llvm.lifetime.start(i64 16, i8* nonnull %20)
  store <2 x i64> zeroinitializer, <2 x i64>* %6, align 16
  %30 = bitcast <2 x i64>* %6 to i16*
  store i16 %29, i16* %30, align 16
  %31 = load i64, i64* %21, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %20)
  %32 = lshr i64 %24, 16
  %33 = trunc i64 %32 to i16
  %34 = lshr i64 %26, 16
  %35 = trunc i64 %34 to i16
  %36 = icmp sgt i16 %33, %35
  %37 = select i1 %36, i16 %33, i16 %35
  call void @llvm.lifetime.start(i64 16, i8* nonnull %20)
  store i64 %31, i64* %21, align 16
  store i64 0, i64* %22, align 8
  %38 = getelementptr inbounds [8 x i16], [8 x i16]* %23, i64 0, i64 1
  store i16 %37, i16* %38, align 2
  %39 = load i64, i64* %21, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %20)
  %40 = lshr i64 %24, 32
  %41 = trunc i64 %40 to i16
  %42 = lshr i64 %26, 32
  %43 = trunc i64 %42 to i16
  %44 = icmp sgt i16 %41, %43
  %45 = select i1 %44, i16 %41, i16 %43
  call void @llvm.lifetime.start(i64 16, i8* nonnull %20)
  store i64 %39, i64* %21, align 16
  store i64 0, i64* %22, align 8
  %46 = getelementptr inbounds [8 x i16], [8 x i16]* %23, i64 0, i64 2
  store i16 %45, i16* %46, align 4
  %47 = load i64, i64* %21, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %20)
  %48 = lshr i64 %24, 48
  %49 = trunc i64 %48 to i16
  %50 = lshr i64 %26, 48
  %51 = trunc i64 %50 to i16
  %52 = icmp sgt i16 %49, %51
  %53 = select i1 %52, i16 %49, i16 %51
  call void @llvm.lifetime.start(i64 16, i8* nonnull %20)
  store i64 %47, i64* %21, align 16
  store i64 0, i64* %22, align 8
  %54 = getelementptr inbounds [8 x i16], [8 x i16]* %23, i64 0, i64 3
  store i16 %53, i16* %54, align 2
  %55 = load i64, i64* %21, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %20)
  %56 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %9, i64 0, i32 1
  %57 = bitcast i64* %56 to i16*
  %58 = load i16, i16* %57, align 8
  %59 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %12, i64 0, i32 1
  %60 = bitcast i64* %59 to i16*
  %61 = load i16, i16* %60, align 8
  %62 = icmp sgt i16 %58, %61
  %63 = select i1 %62, i16 %58, i16 %61
  call void @llvm.lifetime.start(i64 16, i8* nonnull %20)
  store i64 %55, i64* %21, align 16
  store i64 0, i64* %22, align 8
  %64 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %7, i64 0, i32 1
  %65 = bitcast i64* %64 to i16*
  store i16 %63, i16* %65, align 8
  %66 = load i64, i64* %22, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %20)
  %67 = getelementptr inbounds %struct.uint16v8_t, %struct.uint16v8_t* %10, i64 0, i32 0, i64 5
  %68 = load i16, i16* %67, align 2
  %69 = getelementptr inbounds %struct.uint16v8_t, %struct.uint16v8_t* %13, i64 0, i32 0, i64 5
  %70 = load i16, i16* %69, align 2
  %71 = icmp sgt i16 %68, %70
  %72 = select i1 %71, i16 %68, i16 %70
  call void @llvm.lifetime.start(i64 16, i8* nonnull %20)
  store i64 %55, i64* %21, align 16
  store i64 %66, i64* %22, align 8
  %73 = getelementptr inbounds [8 x i16], [8 x i16]* %23, i64 0, i64 5
  store i16 %72, i16* %73, align 2
  %74 = load i64, i64* %22, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %20)
  %75 = getelementptr inbounds %struct.uint16v8_t, %struct.uint16v8_t* %10, i64 0, i32 0, i64 6
  %76 = load i16, i16* %75, align 4
  %77 = getelementptr inbounds %struct.uint16v8_t, %struct.uint16v8_t* %13, i64 0, i32 0, i64 6
  %78 = load i16, i16* %77, align 4
  %79 = icmp sgt i16 %76, %78
  %80 = select i1 %79, i16 %76, i16 %78
  call void @llvm.lifetime.start(i64 16, i8* nonnull %20)
  store i64 %55, i64* %21, align 16
  store i64 %74, i64* %22, align 8
  %81 = getelementptr inbounds [8 x i16], [8 x i16]* %23, i64 0, i64 6
  store i16 %80, i16* %81, align 4
  %82 = load i64, i64* %22, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %20)
  %83 = getelementptr inbounds %struct.uint16v8_t, %struct.uint16v8_t* %10, i64 0, i32 0, i64 7
  %84 = load i16, i16* %83, align 2
  %85 = getelementptr inbounds %struct.uint16v8_t, %struct.uint16v8_t* %13, i64 0, i32 0, i64 7
  %86 = load i16, i16* %85, align 2
  %87 = icmp sgt i16 %84, %86
  %88 = select i1 %87, i16 %84, i16 %86
  call void @llvm.lifetime.start(i64 16, i8* nonnull %20)
  store i64 %55, i64* %21, align 16
  store i64 %82, i64* %22, align 8
  %89 = getelementptr inbounds [8 x i16], [8 x i16]* %23, i64 0, i64 7
  store i16 %88, i16* %89, align 2
  %90 = load i64, i64* %22, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %20)
  %91 = lshr i64 %55, 16
  %92 = lshr i64 %55, 32
  %93 = lshr i64 %55, 48
  %94 = trunc i64 %55 to i16
  %95 = trunc i64 %91 to i16
  %96 = trunc i64 %92 to i16
  %97 = trunc i64 %93 to i16
  %98 = bitcast i8* %2 to i16*
  store i16 %94, i16* %98, align 1
  %99 = getelementptr inbounds i8, i8* %2, i64 2
  %100 = bitcast i8* %99 to i16*
  store i16 %95, i16* %100, align 1
  %101 = getelementptr inbounds i8, i8* %2, i64 4
  %102 = bitcast i8* %101 to i16*
  store i16 %96, i16* %102, align 1
  %103 = getelementptr inbounds i8, i8* %2, i64 6
  %104 = bitcast i8* %103 to i16*
  store i16 %97, i16* %104, align 1
  %105 = trunc i64 %90 to i16
  %106 = getelementptr inbounds i8, i8* %2, i64 8
  %107 = bitcast i8* %106 to i16*
  store i16 %105, i16* %107, align 1
  %108 = lshr i64 %90, 16
  %109 = trunc i64 %108 to i16
  %110 = getelementptr inbounds i8, i8* %2, i64 10
  %111 = bitcast i8* %110 to i16*
  store i16 %109, i16* %111, align 1
  %112 = lshr i64 %90, 32
  %113 = trunc i64 %112 to i16
  %114 = getelementptr inbounds i8, i8* %2, i64 12
  %115 = bitcast i8* %114 to i16*
  store i16 %113, i16* %115, align 1
  %116 = lshr i64 %90, 48
  %117 = trunc i64 %116 to i16
  %118 = getelementptr inbounds i8, i8* %2, i64 14
  %119 = bitcast i8* %118 to i16*
  store i16 %117, i16* %119, align 1
  call void @llvm.lifetime.end(i64 16, i8* nonnull %17) 
  call void @llvm.lifetime.end(i64 16, i8* nonnull %14) 
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L6PMAXSWI3VnWI8vec128_tE2VnIS2_E3MVnIS2_EEEP6MemoryS9_R5StateT_T0_T1_(%struct.Memory* returned, %struct.State* nocapture readnone dereferenceable(3376), i8* nocapture, i8* nocapture readonly, i64)  {
  %6 = alloca <2 x i64>, align 16
  %7 = bitcast <2 x i64>* %6 to { i64, i64 }*
  %8 = alloca <2 x i64>, align 16
  %9 = bitcast <2 x i64>* %8 to { i64, i64 }*
  %10 = bitcast <2 x i64>* %8 to %struct.uint16v8_t*
  %11 = alloca <2 x i64>, align 16
  %12 = bitcast <2 x i64>* %11 to { i64, i64 }*
  %13 = bitcast <2 x i64>* %11 to %struct.uint16v8_t*
  %14 = bitcast <2 x i64>* %8 to i8*
  call void @llvm.lifetime.start(i64 16, i8* nonnull %14) 
  %15 = bitcast i8* %3 to <2 x i64>*
  %16 = load <2 x i64>, <2 x i64>* %15, align 1
  store <2 x i64> %16, <2 x i64>* %8, align 16
  %17 = bitcast <2 x i64>* %11 to i8*
  call void @llvm.lifetime.start(i64 16, i8* nonnull %17) 
  %18 = inttoptr i64 %4 to i16*
  %19 = load i16, i16* %18
  %20 = add i64 %4, 2
  %21 = inttoptr i64 %20 to i16*
  %22 = load i16, i16* %21
  %23 = add i64 %4, 4
  %24 = inttoptr i64 %23 to i16*
  %25 = load i16, i16* %24
  %26 = add i64 %4, 6
  %27 = inttoptr i64 %26 to i16*
  %28 = load i16, i16* %27
  %29 = add i64 %4, 8
  %30 = inttoptr i64 %29 to i16*
  %31 = load i16, i16* %30
  %32 = add i64 %4, 10
  %33 = inttoptr i64 %32 to i16*
  %34 = load i16, i16* %33
  %35 = add i64 %4, 12
  %36 = inttoptr i64 %35 to i16*
  %37 = load i16, i16* %36
  %38 = add i64 %4, 14
  %39 = inttoptr i64 %38 to i16*
  %40 = load i16, i16* %39
  %41 = insertelement <2 x i16> undef, i16 %28, i32 0
  %42 = insertelement <2 x i16> %41, i16 %40, i32 1
  %43 = zext <2 x i16> %42 to <2 x i64>
  %44 = shl nuw <2 x i64> %43, <i64 48, i64 48>
  %45 = insertelement <2 x i16> undef, i16 %25, i32 0
  %46 = insertelement <2 x i16> %45, i16 %37, i32 1
  %47 = zext <2 x i16> %46 to <2 x i64>
  %48 = shl nuw nsw <2 x i64> %47, <i64 32, i64 32>
  %49 = insertelement <2 x i16> undef, i16 %22, i32 0
  %50 = insertelement <2 x i16> %49, i16 %34, i32 1
  %51 = zext <2 x i16> %50 to <2 x i64>
  %52 = shl nuw nsw <2 x i64> %51, <i64 16, i64 16>
  %53 = insertelement <2 x i16> undef, i16 %19, i32 0
  %54 = insertelement <2 x i16> %53, i16 %31, i32 1
  %55 = zext <2 x i16> %54 to <2 x i64>
  %56 = or <2 x i64> %52, %55
  %57 = or <2 x i64> %56, %48
  %58 = or <2 x i64> %57, %44
  store <2 x i64> %58, <2 x i64>* %11, align 16
  %59 = bitcast <2 x i64>* %6 to i8*
  %60 = getelementptr inbounds <2 x i64>, <2 x i64>* %6, i64 0, i64 0
  %61 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %7, i64 0, i32 1
  %62 = bitcast <2 x i64>* %6 to [8 x i16]*
  %63 = extractelement <2 x i64> %16, i32 0
  %64 = trunc i64 %63 to i16
  %65 = icmp sgt i16 %64, %19
  %66 = select i1 %65, i16 %64, i16 %19
  call void @llvm.lifetime.start(i64 16, i8* nonnull %59)
  store <2 x i64> zeroinitializer, <2 x i64>* %6, align 16
  %67 = bitcast <2 x i64>* %6 to i16*
  store i16 %66, i16* %67, align 16
  %68 = load i64, i64* %60, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %59)
  %69 = lshr i64 %63, 16
  %70 = trunc i64 %69 to i16
  %71 = icmp sgt i16 %70, %22
  %72 = select i1 %71, i16 %70, i16 %22
  call void @llvm.lifetime.start(i64 16, i8* nonnull %59)
  store i64 %68, i64* %60, align 16
  store i64 0, i64* %61, align 8
  %73 = getelementptr inbounds [8 x i16], [8 x i16]* %62, i64 0, i64 1
  store i16 %72, i16* %73, align 2
  %74 = load i64, i64* %60, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %59)
  %75 = lshr i64 %63, 32
  %76 = trunc i64 %75 to i16
  %77 = icmp sgt i16 %76, %25
  %78 = select i1 %77, i16 %76, i16 %25
  call void @llvm.lifetime.start(i64 16, i8* nonnull %59)
  store i64 %74, i64* %60, align 16
  store i64 0, i64* %61, align 8
  %79 = getelementptr inbounds [8 x i16], [8 x i16]* %62, i64 0, i64 2
  store i16 %78, i16* %79, align 4
  %80 = load i64, i64* %60, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %59)
  %81 = getelementptr inbounds %struct.uint16v8_t, %struct.uint16v8_t* %10, i64 0, i32 0, i64 3
  %82 = load i16, i16* %81, align 2
  %83 = icmp sgt i16 %82, %28
  %84 = select i1 %83, i16 %82, i16 %28
  call void @llvm.lifetime.start(i64 16, i8* nonnull %59)
  store i64 %80, i64* %60, align 16
  store i64 0, i64* %61, align 8
  %85 = getelementptr inbounds [8 x i16], [8 x i16]* %62, i64 0, i64 3
  store i16 %84, i16* %85, align 2
  %86 = load i64, i64* %60, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %59)
  %87 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %9, i64 0, i32 1
  %88 = bitcast i64* %87 to i16*
  %89 = load i16, i16* %88, align 8
  %90 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %12, i64 0, i32 1
  %91 = bitcast i64* %90 to i16*
  %92 = load i16, i16* %91, align 8
  %93 = icmp sgt i16 %89, %92
  %94 = select i1 %93, i16 %89, i16 %92
  call void @llvm.lifetime.start(i64 16, i8* nonnull %59)
  store i64 %86, i64* %60, align 16
  store i64 0, i64* %61, align 8
  %95 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %7, i64 0, i32 1
  %96 = bitcast i64* %95 to i16*
  store i16 %94, i16* %96, align 8
  %97 = load i64, i64* %61, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %59)
  %98 = getelementptr inbounds %struct.uint16v8_t, %struct.uint16v8_t* %10, i64 0, i32 0, i64 5
  %99 = load i16, i16* %98, align 2
  %100 = getelementptr inbounds %struct.uint16v8_t, %struct.uint16v8_t* %13, i64 0, i32 0, i64 5
  %101 = load i16, i16* %100, align 2
  %102 = icmp sgt i16 %99, %101
  %103 = select i1 %102, i16 %99, i16 %101
  call void @llvm.lifetime.start(i64 16, i8* nonnull %59)
  store i64 %86, i64* %60, align 16
  store i64 %97, i64* %61, align 8
  %104 = getelementptr inbounds [8 x i16], [8 x i16]* %62, i64 0, i64 5
  store i16 %103, i16* %104, align 2
  %105 = load i64, i64* %61, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %59)
  %106 = getelementptr inbounds %struct.uint16v8_t, %struct.uint16v8_t* %10, i64 0, i32 0, i64 6
  %107 = load i16, i16* %106, align 4
  %108 = getelementptr inbounds %struct.uint16v8_t, %struct.uint16v8_t* %13, i64 0, i32 0, i64 6
  %109 = load i16, i16* %108, align 4
  %110 = icmp sgt i16 %107, %109
  %111 = select i1 %110, i16 %107, i16 %109
  call void @llvm.lifetime.start(i64 16, i8* nonnull %59)
  store i64 %86, i64* %60, align 16
  store i64 %105, i64* %61, align 8
  %112 = getelementptr inbounds [8 x i16], [8 x i16]* %62, i64 0, i64 6
  store i16 %111, i16* %112, align 4
  %113 = load i64, i64* %61, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %59)
  %114 = getelementptr inbounds %struct.uint16v8_t, %struct.uint16v8_t* %10, i64 0, i32 0, i64 7
  %115 = load i16, i16* %114, align 2
  %116 = getelementptr inbounds %struct.uint16v8_t, %struct.uint16v8_t* %13, i64 0, i32 0, i64 7
  %117 = load i16, i16* %116, align 2
  %118 = icmp sgt i16 %115, %117
  %119 = select i1 %118, i16 %115, i16 %117
  call void @llvm.lifetime.start(i64 16, i8* nonnull %59)
  store i64 %86, i64* %60, align 16
  store i64 %113, i64* %61, align 8
  %120 = getelementptr inbounds [8 x i16], [8 x i16]* %62, i64 0, i64 7
  store i16 %119, i16* %120, align 2
  %121 = load i64, i64* %61, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %59)
  %122 = lshr i64 %86, 16
  %123 = lshr i64 %86, 32
  %124 = lshr i64 %86, 48
  %125 = trunc i64 %86 to i16
  %126 = trunc i64 %122 to i16
  %127 = trunc i64 %123 to i16
  %128 = trunc i64 %124 to i16
  %129 = bitcast i8* %2 to i16*
  store i16 %125, i16* %129, align 1
  %130 = getelementptr inbounds i8, i8* %2, i64 2
  %131 = bitcast i8* %130 to i16*
  store i16 %126, i16* %131, align 1
  %132 = getelementptr inbounds i8, i8* %2, i64 4
  %133 = bitcast i8* %132 to i16*
  store i16 %127, i16* %133, align 1
  %134 = getelementptr inbounds i8, i8* %2, i64 6
  %135 = bitcast i8* %134 to i16*
  store i16 %128, i16* %135, align 1
  %136 = trunc i64 %121 to i16
  %137 = getelementptr inbounds i8, i8* %2, i64 8
  %138 = bitcast i8* %137 to i16*
  store i16 %136, i16* %138, align 1
  %139 = lshr i64 %121, 16
  %140 = trunc i64 %139 to i16
  %141 = getelementptr inbounds i8, i8* %2, i64 10
  %142 = bitcast i8* %141 to i16*
  store i16 %140, i16* %142, align 1
  %143 = lshr i64 %121, 32
  %144 = trunc i64 %143 to i16
  %145 = getelementptr inbounds i8, i8* %2, i64 12
  %146 = bitcast i8* %145 to i16*
  store i16 %144, i16* %146, align 1
  %147 = lshr i64 %121, 48
  %148 = trunc i64 %147 to i16
  %149 = getelementptr inbounds i8, i8* %2, i64 14
  %150 = bitcast i8* %149 to i16*
  store i16 %148, i16* %150, align 1
  call void @llvm.lifetime.end(i64 16, i8* nonnull %17) 
  call void @llvm.lifetime.end(i64 16, i8* nonnull %14) 
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L6PMAXUBI4RVnWI7vec64_tE3RVnIS2_ES5_EEP6MemoryS7_R5StateT_T0_T1_(%struct.Memory* readnone returned, %struct.State* nocapture readnone dereferenceable(3376), i64* nocapture, i64, i64)  {
  %6 = alloca i64, align 8
  %7 = alloca i64, align 8
  %8 = bitcast i64* %7 to %struct.uint8v8_t*
  %9 = alloca i64, align 8
  %10 = bitcast i64* %9 to %struct.uint8v8_t*
  %11 = bitcast i64* %7 to i8*
  call void @llvm.lifetime.start(i64 8, i8* nonnull %11) 
  store i64 %3, i64* %7, align 8
  %12 = bitcast i64* %9 to i8*
  call void @llvm.lifetime.start(i64 8, i8* nonnull %12) 
  store i64 %4, i64* %9, align 8
  %13 = bitcast i64* %6 to i8*
  %14 = bitcast i64* %6 to [8 x i8]*
  %15 = trunc i64 %3 to i8
  %16 = trunc i64 %4 to i8
  %17 = icmp ugt i8 %15, %16
  %18 = select i1 %17, i8 %15, i8 %16
  call void @llvm.lifetime.start(i64 8, i8* nonnull %13)
  store i64 0, i64* %6, align 8
  %19 = bitcast i64* %6 to i8*
  store i8 %18, i8* %19, align 8
  %20 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %13)
  %21 = lshr i64 %3, 8
  %22 = trunc i64 %21 to i8
  %23 = lshr i64 %4, 8
  %24 = trunc i64 %23 to i8
  %25 = icmp ugt i8 %22, %24
  %26 = select i1 %25, i8 %22, i8 %24
  call void @llvm.lifetime.start(i64 8, i8* nonnull %13)
  store i64 %20, i64* %6, align 8
  %27 = getelementptr inbounds [8 x i8], [8 x i8]* %14, i64 0, i64 1
  store i8 %26, i8* %27, align 1
  %28 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %13)
  %29 = lshr i64 %3, 16
  %30 = trunc i64 %29 to i8
  %31 = lshr i64 %4, 16
  %32 = trunc i64 %31 to i8
  %33 = icmp ugt i8 %30, %32
  %34 = select i1 %33, i8 %30, i8 %32
  call void @llvm.lifetime.start(i64 8, i8* nonnull %13)
  store i64 %28, i64* %6, align 8
  %35 = getelementptr inbounds [8 x i8], [8 x i8]* %14, i64 0, i64 2
  store i8 %34, i8* %35, align 2
  %36 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %13)
  %37 = getelementptr inbounds %struct.uint8v8_t, %struct.uint8v8_t* %8, i64 0, i32 0, i64 3
  %38 = load i8, i8* %37, align 1
  %39 = getelementptr inbounds %struct.uint8v8_t, %struct.uint8v8_t* %10, i64 0, i32 0, i64 3
  %40 = load i8, i8* %39, align 1
  %41 = icmp ugt i8 %38, %40
  %42 = select i1 %41, i8 %38, i8 %40
  call void @llvm.lifetime.start(i64 8, i8* nonnull %13)
  store i64 %36, i64* %6, align 8
  %43 = getelementptr inbounds [8 x i8], [8 x i8]* %14, i64 0, i64 3
  store i8 %42, i8* %43, align 1
  %44 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %13)
  %45 = getelementptr inbounds %struct.uint8v8_t, %struct.uint8v8_t* %8, i64 0, i32 0, i64 4
  %46 = load i8, i8* %45, align 4
  %47 = getelementptr inbounds %struct.uint8v8_t, %struct.uint8v8_t* %10, i64 0, i32 0, i64 4
  %48 = load i8, i8* %47, align 4
  %49 = icmp ugt i8 %46, %48
  %50 = select i1 %49, i8 %46, i8 %48
  call void @llvm.lifetime.start(i64 8, i8* nonnull %13)
  store i64 %44, i64* %6, align 8
  %51 = getelementptr inbounds [8 x i8], [8 x i8]* %14, i64 0, i64 4
  store i8 %50, i8* %51, align 4
  %52 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %13)
  %53 = getelementptr inbounds %struct.uint8v8_t, %struct.uint8v8_t* %8, i64 0, i32 0, i64 5
  %54 = load i8, i8* %53, align 1
  %55 = getelementptr inbounds %struct.uint8v8_t, %struct.uint8v8_t* %10, i64 0, i32 0, i64 5
  %56 = load i8, i8* %55, align 1
  %57 = icmp ugt i8 %54, %56
  %58 = select i1 %57, i8 %54, i8 %56
  call void @llvm.lifetime.start(i64 8, i8* nonnull %13)
  store i64 %52, i64* %6, align 8
  %59 = getelementptr inbounds [8 x i8], [8 x i8]* %14, i64 0, i64 5
  store i8 %58, i8* %59, align 1
  %60 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %13)
  %61 = getelementptr inbounds %struct.uint8v8_t, %struct.uint8v8_t* %8, i64 0, i32 0, i64 6
  %62 = load i8, i8* %61, align 2
  %63 = getelementptr inbounds %struct.uint8v8_t, %struct.uint8v8_t* %10, i64 0, i32 0, i64 6
  %64 = load i8, i8* %63, align 2
  %65 = icmp ugt i8 %62, %64
  %66 = select i1 %65, i8 %62, i8 %64
  call void @llvm.lifetime.start(i64 8, i8* nonnull %13)
  store i64 %60, i64* %6, align 8
  %67 = getelementptr inbounds [8 x i8], [8 x i8]* %14, i64 0, i64 6
  store i8 %66, i8* %67, align 2
  %68 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %13)
  %69 = getelementptr inbounds %struct.uint8v8_t, %struct.uint8v8_t* %8, i64 0, i32 0, i64 7
  %70 = load i8, i8* %69, align 1
  %71 = getelementptr inbounds %struct.uint8v8_t, %struct.uint8v8_t* %10, i64 0, i32 0, i64 7
  %72 = load i8, i8* %71, align 1
  %73 = icmp ugt i8 %70, %72
  %74 = select i1 %73, i8 %70, i8 %72
  call void @llvm.lifetime.start(i64 8, i8* nonnull %13)
  store i64 %68, i64* %6, align 8
  %75 = getelementptr inbounds [8 x i8], [8 x i8]* %14, i64 0, i64 7
  store i8 %74, i8* %75, align 1
  %76 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %13)
  %77 = lshr i64 %76, 8
  %78 = lshr i64 %76, 16
  %79 = lshr i64 %76, 24
  %80 = lshr i64 %76, 32
  %81 = lshr i64 %76, 40
  %82 = lshr i64 %76, 48
  %83 = lshr i64 %76, 56
  %84 = trunc i64 %76 to i8
  %85 = trunc i64 %77 to i8
  %86 = trunc i64 %78 to i8
  %87 = trunc i64 %79 to i8
  %88 = trunc i64 %80 to i8
  %89 = trunc i64 %81 to i8
  %90 = trunc i64 %82 to i8
  %91 = trunc i64 %83 to i8
  %92 = bitcast i64* %2 to [8 x i8]*
  %93 = bitcast i64* %2 to i8*
  store i8 %84, i8* %93, align 1
  %94 = getelementptr inbounds [8 x i8], [8 x i8]* %92, i64 0, i64 1
  store i8 %85, i8* %94, align 1
  %95 = getelementptr inbounds [8 x i8], [8 x i8]* %92, i64 0, i64 2
  store i8 %86, i8* %95, align 1
  %96 = getelementptr inbounds [8 x i8], [8 x i8]* %92, i64 0, i64 3
  store i8 %87, i8* %96, align 1
  %97 = getelementptr inbounds [8 x i8], [8 x i8]* %92, i64 0, i64 4
  store i8 %88, i8* %97, align 1
  %98 = getelementptr inbounds [8 x i8], [8 x i8]* %92, i64 0, i64 5
  store i8 %89, i8* %98, align 1
  %99 = getelementptr inbounds [8 x i8], [8 x i8]* %92, i64 0, i64 6
  store i8 %90, i8* %99, align 1
  %100 = getelementptr inbounds [8 x i8], [8 x i8]* %92, i64 0, i64 7
  store i8 %91, i8* %100, align 1
  call void @llvm.lifetime.end(i64 8, i8* nonnull %12) 
  call void @llvm.lifetime.end(i64 8, i8* nonnull %11) 
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L6PMAXUBI4RVnWI7vec64_tE3RVnIS2_E3MVnIS2_EEEP6MemoryS9_R5StateT_T0_T1_(%struct.Memory* returned, %struct.State* nocapture readnone dereferenceable(3376), i64* nocapture, i64, i64)  {
  %6 = alloca i64, align 8
  %7 = alloca i64, align 8
  %8 = bitcast i64* %7 to %struct.uint8v8_t*
  %9 = alloca i64, align 8
  %10 = bitcast i64* %9 to %struct.uint8v8_t*
  %11 = bitcast i64* %7 to i8*
  call void @llvm.lifetime.start(i64 8, i8* nonnull %11) 
  store i64 %3, i64* %7, align 8
  %12 = bitcast i64* %9 to i8*
  call void @llvm.lifetime.start(i64 8, i8* nonnull %12) 
  %13 = inttoptr i64 %4 to i8*
  %14 = load i8, i8* %13
  %15 = add i64 %4, 1
  %16 = inttoptr i64 %15 to i8*
  %17 = load i8, i8* %16
  %18 = add i64 %4, 2
  %19 = inttoptr i64 %18 to i8*
  %20 = load i8, i8* %19
  %21 = add i64 %4, 3
  %22 = inttoptr i64 %21 to i8*
  %23 = load i8, i8* %22
  %24 = add i64 %4, 4
  %25 = inttoptr i64 %24 to i8*
  %26 = load i8, i8* %25
  %27 = add i64 %4, 5
  %28 = inttoptr i64 %27 to i8*
  %29 = load i8, i8* %28
  %30 = add i64 %4, 6
  %31 = inttoptr i64 %30 to i8*
  %32 = load i8, i8* %31
  %33 = add i64 %4, 7
  %34 = inttoptr i64 %33 to i8*
  %35 = load i8, i8* %34
  %36 = zext i8 %35 to i64
  %37 = shl nuw i64 %36, 56
  %38 = zext i8 %32 to i64
  %39 = shl nuw nsw i64 %38, 48
  %40 = zext i8 %29 to i64
  %41 = shl nuw nsw i64 %40, 40
  %42 = zext i8 %26 to i64
  %43 = shl nuw nsw i64 %42, 32
  %44 = zext i8 %23 to i64
  %45 = shl nuw nsw i64 %44, 24
  %46 = zext i8 %20 to i64
  %47 = shl nuw nsw i64 %46, 16
  %48 = zext i8 %17 to i64
  %49 = shl nuw nsw i64 %48, 8
  %50 = zext i8 %14 to i64
  %51 = or i64 %49, %50
  %52 = or i64 %51, %47
  %53 = or i64 %52, %45
  %54 = or i64 %53, %43
  %55 = or i64 %54, %41
  %56 = or i64 %55, %39
  %57 = or i64 %56, %37
  store i64 %57, i64* %9, align 8
  %58 = bitcast i64* %6 to i8*
  %59 = bitcast i64* %6 to [8 x i8]*
  %60 = trunc i64 %3 to i8
  %61 = icmp ugt i8 %60, %14
  %62 = select i1 %61, i8 %60, i8 %14
  call void @llvm.lifetime.start(i64 8, i8* nonnull %58)
  store i64 0, i64* %6, align 8
  %63 = bitcast i64* %6 to i8*
  store i8 %62, i8* %63, align 8
  %64 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %58)
  %65 = lshr i64 %3, 8
  %66 = trunc i64 %65 to i8
  %67 = icmp ugt i8 %66, %17
  %68 = select i1 %67, i8 %66, i8 %17
  call void @llvm.lifetime.start(i64 8, i8* nonnull %58)
  store i64 %64, i64* %6, align 8
  %69 = getelementptr inbounds [8 x i8], [8 x i8]* %59, i64 0, i64 1
  store i8 %68, i8* %69, align 1
  %70 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %58)
  %71 = getelementptr inbounds %struct.uint8v8_t, %struct.uint8v8_t* %8, i64 0, i32 0, i64 2
  %72 = load i8, i8* %71, align 2
  %73 = icmp ugt i8 %72, %20
  %74 = select i1 %73, i8 %72, i8 %20
  call void @llvm.lifetime.start(i64 8, i8* nonnull %58)
  store i64 %70, i64* %6, align 8
  %75 = getelementptr inbounds [8 x i8], [8 x i8]* %59, i64 0, i64 2
  store i8 %74, i8* %75, align 2
  %76 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %58)
  %77 = getelementptr inbounds %struct.uint8v8_t, %struct.uint8v8_t* %8, i64 0, i32 0, i64 3
  %78 = load i8, i8* %77, align 1
  %79 = getelementptr inbounds %struct.uint8v8_t, %struct.uint8v8_t* %10, i64 0, i32 0, i64 3
  %80 = load i8, i8* %79, align 1
  %81 = icmp ugt i8 %78, %80
  %82 = select i1 %81, i8 %78, i8 %80
  call void @llvm.lifetime.start(i64 8, i8* nonnull %58)
  store i64 %76, i64* %6, align 8
  %83 = getelementptr inbounds [8 x i8], [8 x i8]* %59, i64 0, i64 3
  store i8 %82, i8* %83, align 1
  %84 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %58)
  %85 = getelementptr inbounds %struct.uint8v8_t, %struct.uint8v8_t* %8, i64 0, i32 0, i64 4
  %86 = load i8, i8* %85, align 4
  %87 = getelementptr inbounds %struct.uint8v8_t, %struct.uint8v8_t* %10, i64 0, i32 0, i64 4
  %88 = load i8, i8* %87, align 4
  %89 = icmp ugt i8 %86, %88
  %90 = select i1 %89, i8 %86, i8 %88
  call void @llvm.lifetime.start(i64 8, i8* nonnull %58)
  store i64 %84, i64* %6, align 8
  %91 = getelementptr inbounds [8 x i8], [8 x i8]* %59, i64 0, i64 4
  store i8 %90, i8* %91, align 4
  %92 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %58)
  %93 = getelementptr inbounds %struct.uint8v8_t, %struct.uint8v8_t* %8, i64 0, i32 0, i64 5
  %94 = load i8, i8* %93, align 1
  %95 = getelementptr inbounds %struct.uint8v8_t, %struct.uint8v8_t* %10, i64 0, i32 0, i64 5
  %96 = load i8, i8* %95, align 1
  %97 = icmp ugt i8 %94, %96
  %98 = select i1 %97, i8 %94, i8 %96
  call void @llvm.lifetime.start(i64 8, i8* nonnull %58)
  store i64 %92, i64* %6, align 8
  %99 = getelementptr inbounds [8 x i8], [8 x i8]* %59, i64 0, i64 5
  store i8 %98, i8* %99, align 1
  %100 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %58)
  %101 = getelementptr inbounds %struct.uint8v8_t, %struct.uint8v8_t* %8, i64 0, i32 0, i64 6
  %102 = load i8, i8* %101, align 2
  %103 = getelementptr inbounds %struct.uint8v8_t, %struct.uint8v8_t* %10, i64 0, i32 0, i64 6
  %104 = load i8, i8* %103, align 2
  %105 = icmp ugt i8 %102, %104
  %106 = select i1 %105, i8 %102, i8 %104
  call void @llvm.lifetime.start(i64 8, i8* nonnull %58)
  store i64 %100, i64* %6, align 8
  %107 = getelementptr inbounds [8 x i8], [8 x i8]* %59, i64 0, i64 6
  store i8 %106, i8* %107, align 2
  %108 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %58)
  %109 = getelementptr inbounds %struct.uint8v8_t, %struct.uint8v8_t* %8, i64 0, i32 0, i64 7
  %110 = load i8, i8* %109, align 1
  %111 = getelementptr inbounds %struct.uint8v8_t, %struct.uint8v8_t* %10, i64 0, i32 0, i64 7
  %112 = load i8, i8* %111, align 1
  %113 = icmp ugt i8 %110, %112
  %114 = select i1 %113, i8 %110, i8 %112
  call void @llvm.lifetime.start(i64 8, i8* nonnull %58)
  store i64 %108, i64* %6, align 8
  %115 = getelementptr inbounds [8 x i8], [8 x i8]* %59, i64 0, i64 7
  store i8 %114, i8* %115, align 1
  %116 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %58)
  %117 = lshr i64 %116, 8
  %118 = lshr i64 %116, 16
  %119 = lshr i64 %116, 24
  %120 = lshr i64 %116, 32
  %121 = lshr i64 %116, 40
  %122 = lshr i64 %116, 48
  %123 = lshr i64 %116, 56
  %124 = trunc i64 %116 to i8
  %125 = trunc i64 %117 to i8
  %126 = trunc i64 %118 to i8
  %127 = trunc i64 %119 to i8
  %128 = trunc i64 %120 to i8
  %129 = trunc i64 %121 to i8
  %130 = trunc i64 %122 to i8
  %131 = trunc i64 %123 to i8
  %132 = bitcast i64* %2 to [8 x i8]*
  %133 = bitcast i64* %2 to i8*
  store i8 %124, i8* %133, align 1
  %134 = getelementptr inbounds [8 x i8], [8 x i8]* %132, i64 0, i64 1
  store i8 %125, i8* %134, align 1
  %135 = getelementptr inbounds [8 x i8], [8 x i8]* %132, i64 0, i64 2
  store i8 %126, i8* %135, align 1
  %136 = getelementptr inbounds [8 x i8], [8 x i8]* %132, i64 0, i64 3
  store i8 %127, i8* %136, align 1
  %137 = getelementptr inbounds [8 x i8], [8 x i8]* %132, i64 0, i64 4
  store i8 %128, i8* %137, align 1
  %138 = getelementptr inbounds [8 x i8], [8 x i8]* %132, i64 0, i64 5
  store i8 %129, i8* %138, align 1
  %139 = getelementptr inbounds [8 x i8], [8 x i8]* %132, i64 0, i64 6
  store i8 %130, i8* %139, align 1
  %140 = getelementptr inbounds [8 x i8], [8 x i8]* %132, i64 0, i64 7
  store i8 %131, i8* %140, align 1
  call void @llvm.lifetime.end(i64 8, i8* nonnull %12) 
  call void @llvm.lifetime.end(i64 8, i8* nonnull %11) 
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L6PMAXUBI3VnWI8vec128_tE2VnIS2_ES5_EEP6MemoryS7_R5StateT_T0_T1_(%struct.Memory* readnone returned, %struct.State* nocapture readnone dereferenceable(3376), i8* nocapture, i8* nocapture readonly, i8* nocapture readonly)  {
  %6 = alloca <2 x i64>, align 16
  %7 = bitcast <2 x i64>* %6 to { i64, i64 }*
  %8 = alloca <2 x i64>, align 16
  %9 = bitcast <2 x i64>* %8 to { i64, i64 }*
  %10 = bitcast <2 x i64>* %8 to %struct.uint8v16_t*
  %11 = alloca <2 x i64>, align 16
  %12 = bitcast <2 x i64>* %11 to { i64, i64 }*
  %13 = bitcast <2 x i64>* %11 to %struct.uint8v16_t*
  %14 = bitcast <2 x i64>* %8 to i8*
  call void @llvm.lifetime.start(i64 16, i8* nonnull %14) 
  %15 = bitcast i8* %3 to <2 x i64>*
  %16 = load <2 x i64>, <2 x i64>* %15, align 1
  store <2 x i64> %16, <2 x i64>* %8, align 16
  %17 = bitcast <2 x i64>* %11 to i8*
  call void @llvm.lifetime.start(i64 16, i8* nonnull %17) 
  %18 = bitcast i8* %4 to <2 x i64>*
  %19 = load <2 x i64>, <2 x i64>* %18, align 1
  store <2 x i64> %19, <2 x i64>* %11, align 16
  %20 = bitcast <2 x i64>* %6 to i8*
  %21 = getelementptr inbounds <2 x i64>, <2 x i64>* %6, i64 0, i64 0
  %22 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %7, i64 0, i32 1
  %23 = bitcast <2 x i64>* %6 to [16 x i8]*
  %24 = extractelement <2 x i64> %16, i32 0
  %25 = trunc i64 %24 to i8
  %26 = extractelement <2 x i64> %19, i32 0
  %27 = trunc i64 %26 to i8
  %28 = icmp ugt i8 %25, %27
  %29 = select i1 %28, i8 %25, i8 %27
  call void @llvm.lifetime.start(i64 16, i8* nonnull %20)
  store <2 x i64> zeroinitializer, <2 x i64>* %6, align 16
  %30 = bitcast <2 x i64>* %6 to i8*
  store i8 %29, i8* %30, align 16
  %31 = load i64, i64* %21, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %20)
  %32 = lshr i64 %24, 8
  %33 = trunc i64 %32 to i8
  %34 = lshr i64 %26, 8
  %35 = trunc i64 %34 to i8
  %36 = icmp ugt i8 %33, %35
  %37 = select i1 %36, i8 %33, i8 %35
  call void @llvm.lifetime.start(i64 16, i8* nonnull %20)
  store i64 %31, i64* %21, align 16
  store i64 0, i64* %22, align 8
  %38 = getelementptr inbounds [16 x i8], [16 x i8]* %23, i64 0, i64 1
  store i8 %37, i8* %38, align 1
  %39 = load i64, i64* %21, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %20)
  %40 = lshr i64 %24, 16
  %41 = trunc i64 %40 to i8
  %42 = lshr i64 %26, 16
  %43 = trunc i64 %42 to i8
  %44 = icmp ugt i8 %41, %43
  %45 = select i1 %44, i8 %41, i8 %43
  call void @llvm.lifetime.start(i64 16, i8* nonnull %20)
  store i64 %39, i64* %21, align 16
  store i64 0, i64* %22, align 8
  %46 = getelementptr inbounds [16 x i8], [16 x i8]* %23, i64 0, i64 2
  store i8 %45, i8* %46, align 2
  %47 = load i64, i64* %21, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %20)
  %48 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %10, i64 0, i32 0, i64 3
  %49 = load i8, i8* %48, align 1
  %50 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %13, i64 0, i32 0, i64 3
  %51 = load i8, i8* %50, align 1
  %52 = icmp ugt i8 %49, %51
  %53 = select i1 %52, i8 %49, i8 %51
  call void @llvm.lifetime.start(i64 16, i8* nonnull %20)
  store i64 %47, i64* %21, align 16
  store i64 0, i64* %22, align 8
  %54 = getelementptr inbounds [16 x i8], [16 x i8]* %23, i64 0, i64 3
  store i8 %53, i8* %54, align 1
  %55 = load i64, i64* %21, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %20)
  %56 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %10, i64 0, i32 0, i64 4
  %57 = load i8, i8* %56, align 4
  %58 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %13, i64 0, i32 0, i64 4
  %59 = load i8, i8* %58, align 4
  %60 = icmp ugt i8 %57, %59
  %61 = select i1 %60, i8 %57, i8 %59
  call void @llvm.lifetime.start(i64 16, i8* nonnull %20)
  store i64 %55, i64* %21, align 16
  store i64 0, i64* %22, align 8
  %62 = getelementptr inbounds [16 x i8], [16 x i8]* %23, i64 0, i64 4
  store i8 %61, i8* %62, align 4
  %63 = load i64, i64* %21, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %20)
  %64 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %10, i64 0, i32 0, i64 5
  %65 = load i8, i8* %64, align 1
  %66 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %13, i64 0, i32 0, i64 5
  %67 = load i8, i8* %66, align 1
  %68 = icmp ugt i8 %65, %67
  %69 = select i1 %68, i8 %65, i8 %67
  call void @llvm.lifetime.start(i64 16, i8* nonnull %20)
  store i64 %63, i64* %21, align 16
  store i64 0, i64* %22, align 8
  %70 = getelementptr inbounds [16 x i8], [16 x i8]* %23, i64 0, i64 5
  store i8 %69, i8* %70, align 1
  %71 = load i64, i64* %21, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %20)
  %72 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %10, i64 0, i32 0, i64 6
  %73 = load i8, i8* %72, align 2
  %74 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %13, i64 0, i32 0, i64 6
  %75 = load i8, i8* %74, align 2
  %76 = icmp ugt i8 %73, %75
  %77 = select i1 %76, i8 %73, i8 %75
  call void @llvm.lifetime.start(i64 16, i8* nonnull %20)
  store i64 %71, i64* %21, align 16
  store i64 0, i64* %22, align 8
  %78 = getelementptr inbounds [16 x i8], [16 x i8]* %23, i64 0, i64 6
  store i8 %77, i8* %78, align 2
  %79 = load i64, i64* %21, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %20)
  %80 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %10, i64 0, i32 0, i64 7
  %81 = load i8, i8* %80, align 1
  %82 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %13, i64 0, i32 0, i64 7
  %83 = load i8, i8* %82, align 1
  %84 = icmp ugt i8 %81, %83
  %85 = select i1 %84, i8 %81, i8 %83
  call void @llvm.lifetime.start(i64 16, i8* nonnull %20)
  store i64 %79, i64* %21, align 16
  store i64 0, i64* %22, align 8
  %86 = getelementptr inbounds [16 x i8], [16 x i8]* %23, i64 0, i64 7
  store i8 %85, i8* %86, align 1
  %87 = load i64, i64* %21, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %20)
  %88 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %9, i64 0, i32 1
  %89 = bitcast i64* %88 to i8*
  %90 = load i8, i8* %89, align 8
  %91 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %12, i64 0, i32 1
  %92 = bitcast i64* %91 to i8*
  %93 = load i8, i8* %92, align 8
  %94 = icmp ugt i8 %90, %93
  %95 = select i1 %94, i8 %90, i8 %93
  call void @llvm.lifetime.start(i64 16, i8* nonnull %20)
  store i64 %87, i64* %21, align 16
  store i64 0, i64* %22, align 8
  %96 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %7, i64 0, i32 1
  %97 = bitcast i64* %96 to i8*
  store i8 %95, i8* %97, align 8
  %98 = load i64, i64* %22, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %20)
  %99 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %10, i64 0, i32 0, i64 9
  %100 = load i8, i8* %99, align 1
  %101 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %13, i64 0, i32 0, i64 9
  %102 = load i8, i8* %101, align 1
  %103 = icmp ugt i8 %100, %102
  %104 = select i1 %103, i8 %100, i8 %102
  call void @llvm.lifetime.start(i64 16, i8* nonnull %20)
  store i64 %87, i64* %21, align 16
  store i64 %98, i64* %22, align 8
  %105 = getelementptr inbounds [16 x i8], [16 x i8]* %23, i64 0, i64 9
  store i8 %104, i8* %105, align 1
  %106 = load i64, i64* %22, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %20)
  %107 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %10, i64 0, i32 0, i64 10
  %108 = load i8, i8* %107, align 2
  %109 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %13, i64 0, i32 0, i64 10
  %110 = load i8, i8* %109, align 2
  %111 = icmp ugt i8 %108, %110
  %112 = select i1 %111, i8 %108, i8 %110
  call void @llvm.lifetime.start(i64 16, i8* nonnull %20)
  store i64 %87, i64* %21, align 16
  store i64 %106, i64* %22, align 8
  %113 = getelementptr inbounds [16 x i8], [16 x i8]* %23, i64 0, i64 10
  store i8 %112, i8* %113, align 2
  %114 = load i64, i64* %22, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %20)
  %115 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %10, i64 0, i32 0, i64 11
  %116 = load i8, i8* %115, align 1
  %117 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %13, i64 0, i32 0, i64 11
  %118 = load i8, i8* %117, align 1
  %119 = icmp ugt i8 %116, %118
  %120 = select i1 %119, i8 %116, i8 %118
  call void @llvm.lifetime.start(i64 16, i8* nonnull %20)
  store i64 %87, i64* %21, align 16
  store i64 %114, i64* %22, align 8
  %121 = getelementptr inbounds [16 x i8], [16 x i8]* %23, i64 0, i64 11
  store i8 %120, i8* %121, align 1
  %122 = load i64, i64* %22, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %20)
  %123 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %10, i64 0, i32 0, i64 12
  %124 = load i8, i8* %123, align 4
  %125 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %13, i64 0, i32 0, i64 12
  %126 = load i8, i8* %125, align 4
  %127 = icmp ugt i8 %124, %126
  %128 = select i1 %127, i8 %124, i8 %126
  call void @llvm.lifetime.start(i64 16, i8* nonnull %20)
  store i64 %87, i64* %21, align 16
  store i64 %122, i64* %22, align 8
  %129 = getelementptr inbounds [16 x i8], [16 x i8]* %23, i64 0, i64 12
  store i8 %128, i8* %129, align 4
  %130 = load i64, i64* %22, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %20)
  %131 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %10, i64 0, i32 0, i64 13
  %132 = load i8, i8* %131, align 1
  %133 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %13, i64 0, i32 0, i64 13
  %134 = load i8, i8* %133, align 1
  %135 = icmp ugt i8 %132, %134
  %136 = select i1 %135, i8 %132, i8 %134
  call void @llvm.lifetime.start(i64 16, i8* nonnull %20)
  store i64 %87, i64* %21, align 16
  store i64 %130, i64* %22, align 8
  %137 = getelementptr inbounds [16 x i8], [16 x i8]* %23, i64 0, i64 13
  store i8 %136, i8* %137, align 1
  %138 = load i64, i64* %22, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %20)
  %139 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %10, i64 0, i32 0, i64 14
  %140 = load i8, i8* %139, align 2
  %141 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %13, i64 0, i32 0, i64 14
  %142 = load i8, i8* %141, align 2
  %143 = icmp ugt i8 %140, %142
  %144 = select i1 %143, i8 %140, i8 %142
  call void @llvm.lifetime.start(i64 16, i8* nonnull %20)
  store i64 %87, i64* %21, align 16
  store i64 %138, i64* %22, align 8
  %145 = getelementptr inbounds [16 x i8], [16 x i8]* %23, i64 0, i64 14
  store i8 %144, i8* %145, align 2
  %146 = load i64, i64* %22, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %20)
  %147 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %10, i64 0, i32 0, i64 15
  %148 = load i8, i8* %147, align 1
  %149 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %13, i64 0, i32 0, i64 15
  %150 = load i8, i8* %149, align 1
  %151 = icmp ugt i8 %148, %150
  %152 = select i1 %151, i8 %148, i8 %150
  call void @llvm.lifetime.start(i64 16, i8* nonnull %20)
  store i64 %87, i64* %21, align 16
  store i64 %146, i64* %22, align 8
  %153 = getelementptr inbounds [16 x i8], [16 x i8]* %23, i64 0, i64 15
  store i8 %152, i8* %153, align 1
  %154 = load i64, i64* %22, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %20)
  %155 = lshr i64 %87, 8
  %156 = lshr i64 %87, 16
  %157 = lshr i64 %87, 24
  %158 = lshr i64 %87, 32
  %159 = lshr i64 %87, 40
  %160 = lshr i64 %87, 48
  %161 = lshr i64 %87, 56
  %162 = trunc i64 %87 to i8
  %163 = trunc i64 %155 to i8
  %164 = trunc i64 %156 to i8
  %165 = trunc i64 %157 to i8
  %166 = trunc i64 %158 to i8
  %167 = trunc i64 %159 to i8
  %168 = trunc i64 %160 to i8
  %169 = trunc i64 %161 to i8
  store i8 %162, i8* %2, align 1
  %170 = getelementptr inbounds i8, i8* %2, i64 1
  store i8 %163, i8* %170, align 1
  %171 = getelementptr inbounds i8, i8* %2, i64 2
  store i8 %164, i8* %171, align 1
  %172 = getelementptr inbounds i8, i8* %2, i64 3
  store i8 %165, i8* %172, align 1
  %173 = getelementptr inbounds i8, i8* %2, i64 4
  store i8 %166, i8* %173, align 1
  %174 = getelementptr inbounds i8, i8* %2, i64 5
  store i8 %167, i8* %174, align 1
  %175 = getelementptr inbounds i8, i8* %2, i64 6
  store i8 %168, i8* %175, align 1
  %176 = getelementptr inbounds i8, i8* %2, i64 7
  store i8 %169, i8* %176, align 1
  %177 = trunc i64 %154 to i8
  %178 = getelementptr inbounds i8, i8* %2, i64 8
  store i8 %177, i8* %178, align 1
  %179 = lshr i64 %154, 8
  %180 = trunc i64 %179 to i8
  %181 = getelementptr inbounds i8, i8* %2, i64 9
  store i8 %180, i8* %181, align 1
  %182 = lshr i64 %154, 16
  %183 = trunc i64 %182 to i8
  %184 = getelementptr inbounds i8, i8* %2, i64 10
  store i8 %183, i8* %184, align 1
  %185 = lshr i64 %154, 24
  %186 = trunc i64 %185 to i8
  %187 = getelementptr inbounds i8, i8* %2, i64 11
  store i8 %186, i8* %187, align 1
  %188 = lshr i64 %154, 32
  %189 = trunc i64 %188 to i8
  %190 = getelementptr inbounds i8, i8* %2, i64 12
  store i8 %189, i8* %190, align 1
  %191 = lshr i64 %154, 40
  %192 = trunc i64 %191 to i8
  %193 = getelementptr inbounds i8, i8* %2, i64 13
  store i8 %192, i8* %193, align 1
  %194 = lshr i64 %154, 48
  %195 = trunc i64 %194 to i8
  %196 = getelementptr inbounds i8, i8* %2, i64 14
  store i8 %195, i8* %196, align 1
  %197 = lshr i64 %154, 56
  %198 = trunc i64 %197 to i8
  %199 = getelementptr inbounds i8, i8* %2, i64 15
  store i8 %198, i8* %199, align 1
  call void @llvm.lifetime.end(i64 16, i8* nonnull %17) 
  call void @llvm.lifetime.end(i64 16, i8* nonnull %14) 
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L6PMAXUBI3VnWI8vec128_tE2VnIS2_E3MVnIS2_EEEP6MemoryS9_R5StateT_T0_T1_(%struct.Memory* returned, %struct.State* nocapture readnone dereferenceable(3376), i8* nocapture, i8* nocapture readonly, i64)  {
  %6 = alloca <2 x i64>, align 16
  %7 = bitcast <2 x i64>* %6 to { i64, i64 }*
  %8 = alloca <2 x i64>, align 16
  %9 = bitcast <2 x i64>* %8 to { i64, i64 }*
  %10 = bitcast <2 x i64>* %8 to %struct.uint8v16_t*
  %11 = alloca <2 x i64>, align 16
  %12 = bitcast <2 x i64>* %11 to { i64, i64 }*
  %13 = bitcast <2 x i64>* %11 to %struct.uint8v16_t*
  %14 = bitcast <2 x i64>* %8 to i8*
  call void @llvm.lifetime.start(i64 16, i8* nonnull %14) 
  %15 = bitcast i8* %3 to <2 x i64>*
  %16 = load <2 x i64>, <2 x i64>* %15, align 1
  store <2 x i64> %16, <2 x i64>* %8, align 16
  %17 = bitcast <2 x i64>* %11 to i8*
  call void @llvm.lifetime.start(i64 16, i8* nonnull %17) 
  %18 = inttoptr i64 %4 to i8*
  %19 = load i8, i8* %18
  %20 = add i64 %4, 1
  %21 = inttoptr i64 %20 to i8*
  %22 = load i8, i8* %21
  %23 = add i64 %4, 2
  %24 = inttoptr i64 %23 to i8*
  %25 = load i8, i8* %24
  %26 = add i64 %4, 3
  %27 = inttoptr i64 %26 to i8*
  %28 = load i8, i8* %27
  %29 = add i64 %4, 4
  %30 = inttoptr i64 %29 to i8*
  %31 = load i8, i8* %30
  %32 = add i64 %4, 5
  %33 = inttoptr i64 %32 to i8*
  %34 = load i8, i8* %33
  %35 = add i64 %4, 6
  %36 = inttoptr i64 %35 to i8*
  %37 = load i8, i8* %36
  %38 = add i64 %4, 7
  %39 = inttoptr i64 %38 to i8*
  %40 = load i8, i8* %39
  %41 = add i64 %4, 8
  %42 = inttoptr i64 %41 to i8*
  %43 = load i8, i8* %42
  %44 = add i64 %4, 9
  %45 = inttoptr i64 %44 to i8*
  %46 = load i8, i8* %45
  %47 = add i64 %4, 10
  %48 = inttoptr i64 %47 to i8*
  %49 = load i8, i8* %48
  %50 = add i64 %4, 11
  %51 = inttoptr i64 %50 to i8*
  %52 = load i8, i8* %51
  %53 = add i64 %4, 12
  %54 = inttoptr i64 %53 to i8*
  %55 = load i8, i8* %54
  %56 = add i64 %4, 13
  %57 = inttoptr i64 %56 to i8*
  %58 = load i8, i8* %57
  %59 = add i64 %4, 14
  %60 = inttoptr i64 %59 to i8*
  %61 = load i8, i8* %60
  %62 = add i64 %4, 15
  %63 = inttoptr i64 %62 to i8*
  %64 = load i8, i8* %63
  %65 = insertelement <2 x i8> undef, i8 %40, i32 0
  %66 = insertelement <2 x i8> %65, i8 %64, i32 1
  %67 = zext <2 x i8> %66 to <2 x i64>
  %68 = shl nuw <2 x i64> %67, <i64 56, i64 56>
  %69 = insertelement <2 x i8> undef, i8 %37, i32 0
  %70 = insertelement <2 x i8> %69, i8 %61, i32 1
  %71 = zext <2 x i8> %70 to <2 x i64>
  %72 = shl nuw nsw <2 x i64> %71, <i64 48, i64 48>
  %73 = insertelement <2 x i8> undef, i8 %34, i32 0
  %74 = insertelement <2 x i8> %73, i8 %58, i32 1
  %75 = zext <2 x i8> %74 to <2 x i64>
  %76 = shl nuw nsw <2 x i64> %75, <i64 40, i64 40>
  %77 = insertelement <2 x i8> undef, i8 %31, i32 0
  %78 = insertelement <2 x i8> %77, i8 %55, i32 1
  %79 = zext <2 x i8> %78 to <2 x i64>
  %80 = shl nuw nsw <2 x i64> %79, <i64 32, i64 32>
  %81 = insertelement <2 x i8> undef, i8 %28, i32 0
  %82 = insertelement <2 x i8> %81, i8 %52, i32 1
  %83 = zext <2 x i8> %82 to <2 x i64>
  %84 = shl nuw nsw <2 x i64> %83, <i64 24, i64 24>
  %85 = insertelement <2 x i8> undef, i8 %25, i32 0
  %86 = insertelement <2 x i8> %85, i8 %49, i32 1
  %87 = zext <2 x i8> %86 to <2 x i64>
  %88 = shl nuw nsw <2 x i64> %87, <i64 16, i64 16>
  %89 = insertelement <2 x i8> undef, i8 %22, i32 0
  %90 = insertelement <2 x i8> %89, i8 %46, i32 1
  %91 = zext <2 x i8> %90 to <2 x i64>
  %92 = shl nuw nsw <2 x i64> %91, <i64 8, i64 8>
  %93 = insertelement <2 x i8> undef, i8 %19, i32 0
  %94 = insertelement <2 x i8> %93, i8 %43, i32 1
  %95 = zext <2 x i8> %94 to <2 x i64>
  %96 = or <2 x i64> %92, %95
  %97 = or <2 x i64> %96, %88
  %98 = or <2 x i64> %97, %84
  %99 = or <2 x i64> %98, %80
  %100 = or <2 x i64> %99, %76
  %101 = or <2 x i64> %100, %72
  %102 = or <2 x i64> %101, %68
  store <2 x i64> %102, <2 x i64>* %11, align 16
  %103 = bitcast <2 x i64>* %6 to i8*
  %104 = getelementptr inbounds <2 x i64>, <2 x i64>* %6, i64 0, i64 0
  %105 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %7, i64 0, i32 1
  %106 = bitcast <2 x i64>* %6 to [16 x i8]*
  %107 = extractelement <2 x i64> %16, i32 0
  %108 = trunc i64 %107 to i8
  %109 = icmp ugt i8 %108, %19
  %110 = select i1 %109, i8 %108, i8 %19
  call void @llvm.lifetime.start(i64 16, i8* nonnull %103)
  store <2 x i64> zeroinitializer, <2 x i64>* %6, align 16
  %111 = bitcast <2 x i64>* %6 to i8*
  store i8 %110, i8* %111, align 16
  %112 = load i64, i64* %104, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %103)
  %113 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %10, i64 0, i32 0, i64 1
  %114 = load i8, i8* %113, align 1
  %115 = icmp ugt i8 %114, %22
  %116 = select i1 %115, i8 %114, i8 %22
  call void @llvm.lifetime.start(i64 16, i8* nonnull %103)
  store i64 %112, i64* %104, align 16
  store i64 0, i64* %105, align 8
  %117 = getelementptr inbounds [16 x i8], [16 x i8]* %106, i64 0, i64 1
  store i8 %116, i8* %117, align 1
  %118 = load i64, i64* %104, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %103)
  %119 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %10, i64 0, i32 0, i64 2
  %120 = load i8, i8* %119, align 2
  %121 = icmp ugt i8 %120, %25
  %122 = select i1 %121, i8 %120, i8 %25
  call void @llvm.lifetime.start(i64 16, i8* nonnull %103)
  store i64 %118, i64* %104, align 16
  store i64 0, i64* %105, align 8
  %123 = getelementptr inbounds [16 x i8], [16 x i8]* %106, i64 0, i64 2
  store i8 %122, i8* %123, align 2
  %124 = load i64, i64* %104, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %103)
  %125 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %10, i64 0, i32 0, i64 3
  %126 = load i8, i8* %125, align 1
  %127 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %13, i64 0, i32 0, i64 3
  %128 = load i8, i8* %127, align 1
  %129 = icmp ugt i8 %126, %128
  %130 = select i1 %129, i8 %126, i8 %128
  call void @llvm.lifetime.start(i64 16, i8* nonnull %103)
  store i64 %124, i64* %104, align 16
  store i64 0, i64* %105, align 8
  %131 = getelementptr inbounds [16 x i8], [16 x i8]* %106, i64 0, i64 3
  store i8 %130, i8* %131, align 1
  %132 = load i64, i64* %104, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %103)
  %133 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %10, i64 0, i32 0, i64 4
  %134 = load i8, i8* %133, align 4
  %135 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %13, i64 0, i32 0, i64 4
  %136 = load i8, i8* %135, align 4
  %137 = icmp ugt i8 %134, %136
  %138 = select i1 %137, i8 %134, i8 %136
  call void @llvm.lifetime.start(i64 16, i8* nonnull %103)
  store i64 %132, i64* %104, align 16
  store i64 0, i64* %105, align 8
  %139 = getelementptr inbounds [16 x i8], [16 x i8]* %106, i64 0, i64 4
  store i8 %138, i8* %139, align 4
  %140 = load i64, i64* %104, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %103)
  %141 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %10, i64 0, i32 0, i64 5
  %142 = load i8, i8* %141, align 1
  %143 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %13, i64 0, i32 0, i64 5
  %144 = load i8, i8* %143, align 1
  %145 = icmp ugt i8 %142, %144
  %146 = select i1 %145, i8 %142, i8 %144
  call void @llvm.lifetime.start(i64 16, i8* nonnull %103)
  store i64 %140, i64* %104, align 16
  store i64 0, i64* %105, align 8
  %147 = getelementptr inbounds [16 x i8], [16 x i8]* %106, i64 0, i64 5
  store i8 %146, i8* %147, align 1
  %148 = load i64, i64* %104, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %103)
  %149 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %10, i64 0, i32 0, i64 6
  %150 = load i8, i8* %149, align 2
  %151 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %13, i64 0, i32 0, i64 6
  %152 = load i8, i8* %151, align 2
  %153 = icmp ugt i8 %150, %152
  %154 = select i1 %153, i8 %150, i8 %152
  call void @llvm.lifetime.start(i64 16, i8* nonnull %103)
  store i64 %148, i64* %104, align 16
  store i64 0, i64* %105, align 8
  %155 = getelementptr inbounds [16 x i8], [16 x i8]* %106, i64 0, i64 6
  store i8 %154, i8* %155, align 2
  %156 = load i64, i64* %104, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %103)
  %157 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %10, i64 0, i32 0, i64 7
  %158 = load i8, i8* %157, align 1
  %159 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %13, i64 0, i32 0, i64 7
  %160 = load i8, i8* %159, align 1
  %161 = icmp ugt i8 %158, %160
  %162 = select i1 %161, i8 %158, i8 %160
  call void @llvm.lifetime.start(i64 16, i8* nonnull %103)
  store i64 %156, i64* %104, align 16
  store i64 0, i64* %105, align 8
  %163 = getelementptr inbounds [16 x i8], [16 x i8]* %106, i64 0, i64 7
  store i8 %162, i8* %163, align 1
  %164 = load i64, i64* %104, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %103)
  %165 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %9, i64 0, i32 1
  %166 = bitcast i64* %165 to i8*
  %167 = load i8, i8* %166, align 8
  %168 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %12, i64 0, i32 1
  %169 = bitcast i64* %168 to i8*
  %170 = load i8, i8* %169, align 8
  %171 = icmp ugt i8 %167, %170
  %172 = select i1 %171, i8 %167, i8 %170
  call void @llvm.lifetime.start(i64 16, i8* nonnull %103)
  store i64 %164, i64* %104, align 16
  store i64 0, i64* %105, align 8
  %173 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %7, i64 0, i32 1
  %174 = bitcast i64* %173 to i8*
  store i8 %172, i8* %174, align 8
  %175 = load i64, i64* %105, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %103)
  %176 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %10, i64 0, i32 0, i64 9
  %177 = load i8, i8* %176, align 1
  %178 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %13, i64 0, i32 0, i64 9
  %179 = load i8, i8* %178, align 1
  %180 = icmp ugt i8 %177, %179
  %181 = select i1 %180, i8 %177, i8 %179
  call void @llvm.lifetime.start(i64 16, i8* nonnull %103)
  store i64 %164, i64* %104, align 16
  store i64 %175, i64* %105, align 8
  %182 = getelementptr inbounds [16 x i8], [16 x i8]* %106, i64 0, i64 9
  store i8 %181, i8* %182, align 1
  %183 = load i64, i64* %105, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %103)
  %184 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %10, i64 0, i32 0, i64 10
  %185 = load i8, i8* %184, align 2
  %186 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %13, i64 0, i32 0, i64 10
  %187 = load i8, i8* %186, align 2
  %188 = icmp ugt i8 %185, %187
  %189 = select i1 %188, i8 %185, i8 %187
  call void @llvm.lifetime.start(i64 16, i8* nonnull %103)
  store i64 %164, i64* %104, align 16
  store i64 %183, i64* %105, align 8
  %190 = getelementptr inbounds [16 x i8], [16 x i8]* %106, i64 0, i64 10
  store i8 %189, i8* %190, align 2
  %191 = load i64, i64* %105, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %103)
  %192 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %10, i64 0, i32 0, i64 11
  %193 = load i8, i8* %192, align 1
  %194 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %13, i64 0, i32 0, i64 11
  %195 = load i8, i8* %194, align 1
  %196 = icmp ugt i8 %193, %195
  %197 = select i1 %196, i8 %193, i8 %195
  call void @llvm.lifetime.start(i64 16, i8* nonnull %103)
  store i64 %164, i64* %104, align 16
  store i64 %191, i64* %105, align 8
  %198 = getelementptr inbounds [16 x i8], [16 x i8]* %106, i64 0, i64 11
  store i8 %197, i8* %198, align 1
  %199 = load i64, i64* %105, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %103)
  %200 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %10, i64 0, i32 0, i64 12
  %201 = load i8, i8* %200, align 4
  %202 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %13, i64 0, i32 0, i64 12
  %203 = load i8, i8* %202, align 4
  %204 = icmp ugt i8 %201, %203
  %205 = select i1 %204, i8 %201, i8 %203
  call void @llvm.lifetime.start(i64 16, i8* nonnull %103)
  store i64 %164, i64* %104, align 16
  store i64 %199, i64* %105, align 8
  %206 = getelementptr inbounds [16 x i8], [16 x i8]* %106, i64 0, i64 12
  store i8 %205, i8* %206, align 4
  %207 = load i64, i64* %105, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %103)
  %208 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %10, i64 0, i32 0, i64 13
  %209 = load i8, i8* %208, align 1
  %210 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %13, i64 0, i32 0, i64 13
  %211 = load i8, i8* %210, align 1
  %212 = icmp ugt i8 %209, %211
  %213 = select i1 %212, i8 %209, i8 %211
  call void @llvm.lifetime.start(i64 16, i8* nonnull %103)
  store i64 %164, i64* %104, align 16
  store i64 %207, i64* %105, align 8
  %214 = getelementptr inbounds [16 x i8], [16 x i8]* %106, i64 0, i64 13
  store i8 %213, i8* %214, align 1
  %215 = load i64, i64* %105, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %103)
  %216 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %10, i64 0, i32 0, i64 14
  %217 = load i8, i8* %216, align 2
  %218 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %13, i64 0, i32 0, i64 14
  %219 = load i8, i8* %218, align 2
  %220 = icmp ugt i8 %217, %219
  %221 = select i1 %220, i8 %217, i8 %219
  call void @llvm.lifetime.start(i64 16, i8* nonnull %103)
  store i64 %164, i64* %104, align 16
  store i64 %215, i64* %105, align 8
  %222 = getelementptr inbounds [16 x i8], [16 x i8]* %106, i64 0, i64 14
  store i8 %221, i8* %222, align 2
  %223 = load i64, i64* %105, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %103)
  %224 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %10, i64 0, i32 0, i64 15
  %225 = load i8, i8* %224, align 1
  %226 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %13, i64 0, i32 0, i64 15
  %227 = load i8, i8* %226, align 1
  %228 = icmp ugt i8 %225, %227
  %229 = select i1 %228, i8 %225, i8 %227
  call void @llvm.lifetime.start(i64 16, i8* nonnull %103)
  store i64 %164, i64* %104, align 16
  store i64 %223, i64* %105, align 8
  %230 = getelementptr inbounds [16 x i8], [16 x i8]* %106, i64 0, i64 15
  store i8 %229, i8* %230, align 1
  %231 = load i64, i64* %105, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %103)
  %232 = lshr i64 %164, 8
  %233 = lshr i64 %164, 16
  %234 = lshr i64 %164, 24
  %235 = lshr i64 %164, 32
  %236 = lshr i64 %164, 40
  %237 = lshr i64 %164, 48
  %238 = lshr i64 %164, 56
  %239 = trunc i64 %164 to i8
  %240 = trunc i64 %232 to i8
  %241 = trunc i64 %233 to i8
  %242 = trunc i64 %234 to i8
  %243 = trunc i64 %235 to i8
  %244 = trunc i64 %236 to i8
  %245 = trunc i64 %237 to i8
  %246 = trunc i64 %238 to i8
  store i8 %239, i8* %2, align 1
  %247 = getelementptr inbounds i8, i8* %2, i64 1
  store i8 %240, i8* %247, align 1
  %248 = getelementptr inbounds i8, i8* %2, i64 2
  store i8 %241, i8* %248, align 1
  %249 = getelementptr inbounds i8, i8* %2, i64 3
  store i8 %242, i8* %249, align 1
  %250 = getelementptr inbounds i8, i8* %2, i64 4
  store i8 %243, i8* %250, align 1
  %251 = getelementptr inbounds i8, i8* %2, i64 5
  store i8 %244, i8* %251, align 1
  %252 = getelementptr inbounds i8, i8* %2, i64 6
  store i8 %245, i8* %252, align 1
  %253 = getelementptr inbounds i8, i8* %2, i64 7
  store i8 %246, i8* %253, align 1
  %254 = trunc i64 %231 to i8
  %255 = getelementptr inbounds i8, i8* %2, i64 8
  store i8 %254, i8* %255, align 1
  %256 = lshr i64 %231, 8
  %257 = trunc i64 %256 to i8
  %258 = getelementptr inbounds i8, i8* %2, i64 9
  store i8 %257, i8* %258, align 1
  %259 = lshr i64 %231, 16
  %260 = trunc i64 %259 to i8
  %261 = getelementptr inbounds i8, i8* %2, i64 10
  store i8 %260, i8* %261, align 1
  %262 = lshr i64 %231, 24
  %263 = trunc i64 %262 to i8
  %264 = getelementptr inbounds i8, i8* %2, i64 11
  store i8 %263, i8* %264, align 1
  %265 = lshr i64 %231, 32
  %266 = trunc i64 %265 to i8
  %267 = getelementptr inbounds i8, i8* %2, i64 12
  store i8 %266, i8* %267, align 1
  %268 = lshr i64 %231, 40
  %269 = trunc i64 %268 to i8
  %270 = getelementptr inbounds i8, i8* %2, i64 13
  store i8 %269, i8* %270, align 1
  %271 = lshr i64 %231, 48
  %272 = trunc i64 %271 to i8
  %273 = getelementptr inbounds i8, i8* %2, i64 14
  store i8 %272, i8* %273, align 1
  %274 = lshr i64 %231, 56
  %275 = trunc i64 %274 to i8
  %276 = getelementptr inbounds i8, i8* %2, i64 15
  store i8 %275, i8* %276, align 1
  call void @llvm.lifetime.end(i64 16, i8* nonnull %17) 
  call void @llvm.lifetime.end(i64 16, i8* nonnull %14) 
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L6PMINSWI4RVnWI7vec64_tE3RVnIS2_ES5_EEP6MemoryS7_R5StateT_T0_T1_(%struct.Memory* readnone returned, %struct.State* nocapture readnone dereferenceable(3376), i64* nocapture, i64, i64)  {
  %6 = alloca i64, align 8
  %7 = bitcast i64* %6 to i8*
  %8 = bitcast i64* %6 to [4 x i16]*
  %9 = trunc i64 %3 to i16
  %10 = trunc i64 %4 to i16
  %11 = icmp slt i16 %9, %10
  %12 = select i1 %11, i16 %9, i16 %10
  call void @llvm.lifetime.start(i64 8, i8* nonnull %7)
  store i64 0, i64* %6, align 8
  %13 = bitcast i64* %6 to i16*
  store i16 %12, i16* %13, align 8
  %14 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %7)
  %15 = lshr i64 %3, 16
  %16 = trunc i64 %15 to i16
  %17 = lshr i64 %4, 16
  %18 = trunc i64 %17 to i16
  %19 = icmp slt i16 %16, %18
  %20 = select i1 %19, i16 %16, i16 %18
  call void @llvm.lifetime.start(i64 8, i8* nonnull %7)
  store i64 %14, i64* %6, align 8
  %21 = getelementptr inbounds [4 x i16], [4 x i16]* %8, i64 0, i64 1
  store i16 %20, i16* %21, align 2
  %22 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %7)
  %23 = lshr i64 %3, 32
  %24 = trunc i64 %23 to i16
  %25 = lshr i64 %4, 32
  %26 = trunc i64 %25 to i16
  %27 = icmp slt i16 %24, %26
  %28 = select i1 %27, i16 %24, i16 %26
  call void @llvm.lifetime.start(i64 8, i8* nonnull %7)
  store i64 %22, i64* %6, align 8
  %29 = getelementptr inbounds [4 x i16], [4 x i16]* %8, i64 0, i64 2
  store i16 %28, i16* %29, align 4
  %30 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %7)
  %31 = lshr i64 %3, 48
  %32 = trunc i64 %31 to i16
  %33 = lshr i64 %4, 48
  %34 = trunc i64 %33 to i16
  %35 = icmp slt i16 %32, %34
  %36 = select i1 %35, i16 %32, i16 %34
  call void @llvm.lifetime.start(i64 8, i8* nonnull %7)
  store i64 %30, i64* %6, align 8
  %37 = getelementptr inbounds [4 x i16], [4 x i16]* %8, i64 0, i64 3
  store i16 %36, i16* %37, align 2
  %38 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %7)
  %39 = lshr i64 %38, 16
  %40 = lshr i64 %38, 32
  %41 = lshr i64 %38, 48
  %42 = trunc i64 %38 to i16
  %43 = trunc i64 %39 to i16
  %44 = trunc i64 %40 to i16
  %45 = trunc i64 %41 to i16
  %46 = bitcast i64* %2 to [4 x i16]*
  %47 = bitcast i64* %2 to i16*
  store i16 %42, i16* %47, align 1
  %48 = getelementptr inbounds [4 x i16], [4 x i16]* %46, i64 0, i64 1
  store i16 %43, i16* %48, align 1
  %49 = getelementptr inbounds [4 x i16], [4 x i16]* %46, i64 0, i64 2
  store i16 %44, i16* %49, align 1
  %50 = getelementptr inbounds [4 x i16], [4 x i16]* %46, i64 0, i64 3
  store i16 %45, i16* %50, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L6PMINSWI4RVnWI7vec64_tE3RVnIS2_E3MVnIS2_EEEP6MemoryS9_R5StateT_T0_T1_(%struct.Memory* returned, %struct.State* nocapture readnone dereferenceable(3376), i64* nocapture, i64, i64)  {
  %6 = alloca i64, align 8
  %7 = inttoptr i64 %4 to i16*
  %8 = load i16, i16* %7
  %9 = add i64 %4, 2
  %10 = inttoptr i64 %9 to i16*
  %11 = load i16, i16* %10
  %12 = add i64 %4, 4
  %13 = inttoptr i64 %12 to i16*
  %14 = load i16, i16* %13
  %15 = add i64 %4, 6
  %16 = inttoptr i64 %15 to i16*
  %17 = load i16, i16* %16
  %18 = bitcast i64* %6 to i8*
  %19 = bitcast i64* %6 to [4 x i16]*
  %20 = trunc i64 %3 to i16
  %21 = icmp slt i16 %20, %8
  %22 = select i1 %21, i16 %20, i16 %8
  call void @llvm.lifetime.start(i64 8, i8* nonnull %18)
  store i64 0, i64* %6, align 8
  %23 = bitcast i64* %6 to i16*
  store i16 %22, i16* %23, align 8
  %24 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %18)
  %25 = lshr i64 %3, 16
  %26 = trunc i64 %25 to i16
  %27 = icmp slt i16 %26, %11
  %28 = select i1 %27, i16 %26, i16 %11
  call void @llvm.lifetime.start(i64 8, i8* nonnull %18)
  store i64 %24, i64* %6, align 8
  %29 = getelementptr inbounds [4 x i16], [4 x i16]* %19, i64 0, i64 1
  store i16 %28, i16* %29, align 2
  %30 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %18)
  %31 = lshr i64 %3, 32
  %32 = trunc i64 %31 to i16
  %33 = icmp slt i16 %32, %14
  %34 = select i1 %33, i16 %32, i16 %14
  call void @llvm.lifetime.start(i64 8, i8* nonnull %18)
  store i64 %30, i64* %6, align 8
  %35 = getelementptr inbounds [4 x i16], [4 x i16]* %19, i64 0, i64 2
  store i16 %34, i16* %35, align 4
  %36 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %18)
  %37 = lshr i64 %3, 48
  %38 = trunc i64 %37 to i16
  %39 = icmp slt i16 %38, %17
  %40 = select i1 %39, i16 %38, i16 %17
  call void @llvm.lifetime.start(i64 8, i8* nonnull %18)
  store i64 %36, i64* %6, align 8
  %41 = getelementptr inbounds [4 x i16], [4 x i16]* %19, i64 0, i64 3
  store i16 %40, i16* %41, align 2
  %42 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %18)
  %43 = lshr i64 %42, 16
  %44 = lshr i64 %42, 32
  %45 = lshr i64 %42, 48
  %46 = trunc i64 %42 to i16
  %47 = trunc i64 %43 to i16
  %48 = trunc i64 %44 to i16
  %49 = trunc i64 %45 to i16
  %50 = bitcast i64* %2 to [4 x i16]*
  %51 = bitcast i64* %2 to i16*
  store i16 %46, i16* %51, align 1
  %52 = getelementptr inbounds [4 x i16], [4 x i16]* %50, i64 0, i64 1
  store i16 %47, i16* %52, align 1
  %53 = getelementptr inbounds [4 x i16], [4 x i16]* %50, i64 0, i64 2
  store i16 %48, i16* %53, align 1
  %54 = getelementptr inbounds [4 x i16], [4 x i16]* %50, i64 0, i64 3
  store i16 %49, i16* %54, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L6PMINSWI3VnWI8vec128_tE2VnIS2_ES5_EEP6MemoryS7_R5StateT_T0_T1_(%struct.Memory* readnone returned, %struct.State* nocapture readnone dereferenceable(3376), i8* nocapture, i8* nocapture readonly, i8* nocapture readonly)  {
  %6 = alloca <2 x i64>, align 16
  %7 = bitcast <2 x i64>* %6 to { i64, i64 }*
  %8 = alloca <2 x i64>, align 16
  %9 = bitcast <2 x i64>* %8 to { i64, i64 }*
  %10 = bitcast <2 x i64>* %8 to %struct.uint16v8_t*
  %11 = alloca <2 x i64>, align 16
  %12 = bitcast <2 x i64>* %11 to { i64, i64 }*
  %13 = bitcast <2 x i64>* %11 to %struct.uint16v8_t*
  %14 = bitcast <2 x i64>* %8 to i8*
  call void @llvm.lifetime.start(i64 16, i8* nonnull %14) 
  %15 = bitcast i8* %3 to <2 x i64>*
  %16 = load <2 x i64>, <2 x i64>* %15, align 1
  store <2 x i64> %16, <2 x i64>* %8, align 16
  %17 = bitcast <2 x i64>* %11 to i8*
  call void @llvm.lifetime.start(i64 16, i8* nonnull %17) 
  %18 = bitcast i8* %4 to <2 x i64>*
  %19 = load <2 x i64>, <2 x i64>* %18, align 1
  store <2 x i64> %19, <2 x i64>* %11, align 16
  %20 = bitcast <2 x i64>* %6 to i8*
  %21 = getelementptr inbounds <2 x i64>, <2 x i64>* %6, i64 0, i64 0
  %22 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %7, i64 0, i32 1
  %23 = bitcast <2 x i64>* %6 to [8 x i16]*
  %24 = extractelement <2 x i64> %16, i32 0
  %25 = trunc i64 %24 to i16
  %26 = extractelement <2 x i64> %19, i32 0
  %27 = trunc i64 %26 to i16
  %28 = icmp slt i16 %25, %27
  %29 = select i1 %28, i16 %25, i16 %27
  call void @llvm.lifetime.start(i64 16, i8* nonnull %20)
  store <2 x i64> zeroinitializer, <2 x i64>* %6, align 16
  %30 = bitcast <2 x i64>* %6 to i16*
  store i16 %29, i16* %30, align 16
  %31 = load i64, i64* %21, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %20)
  %32 = lshr i64 %24, 16
  %33 = trunc i64 %32 to i16
  %34 = lshr i64 %26, 16
  %35 = trunc i64 %34 to i16
  %36 = icmp slt i16 %33, %35
  %37 = select i1 %36, i16 %33, i16 %35
  call void @llvm.lifetime.start(i64 16, i8* nonnull %20)
  store i64 %31, i64* %21, align 16
  store i64 0, i64* %22, align 8
  %38 = getelementptr inbounds [8 x i16], [8 x i16]* %23, i64 0, i64 1
  store i16 %37, i16* %38, align 2
  %39 = load i64, i64* %21, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %20)
  %40 = lshr i64 %24, 32
  %41 = trunc i64 %40 to i16
  %42 = lshr i64 %26, 32
  %43 = trunc i64 %42 to i16
  %44 = icmp slt i16 %41, %43
  %45 = select i1 %44, i16 %41, i16 %43
  call void @llvm.lifetime.start(i64 16, i8* nonnull %20)
  store i64 %39, i64* %21, align 16
  store i64 0, i64* %22, align 8
  %46 = getelementptr inbounds [8 x i16], [8 x i16]* %23, i64 0, i64 2
  store i16 %45, i16* %46, align 4
  %47 = load i64, i64* %21, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %20)
  %48 = lshr i64 %24, 48
  %49 = trunc i64 %48 to i16
  %50 = lshr i64 %26, 48
  %51 = trunc i64 %50 to i16
  %52 = icmp slt i16 %49, %51
  %53 = select i1 %52, i16 %49, i16 %51
  call void @llvm.lifetime.start(i64 16, i8* nonnull %20)
  store i64 %47, i64* %21, align 16
  store i64 0, i64* %22, align 8
  %54 = getelementptr inbounds [8 x i16], [8 x i16]* %23, i64 0, i64 3
  store i16 %53, i16* %54, align 2
  %55 = load i64, i64* %21, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %20)
  %56 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %9, i64 0, i32 1
  %57 = bitcast i64* %56 to i16*
  %58 = load i16, i16* %57, align 8
  %59 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %12, i64 0, i32 1
  %60 = bitcast i64* %59 to i16*
  %61 = load i16, i16* %60, align 8
  %62 = icmp slt i16 %58, %61
  %63 = select i1 %62, i16 %58, i16 %61
  call void @llvm.lifetime.start(i64 16, i8* nonnull %20)
  store i64 %55, i64* %21, align 16
  store i64 0, i64* %22, align 8
  %64 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %7, i64 0, i32 1
  %65 = bitcast i64* %64 to i16*
  store i16 %63, i16* %65, align 8
  %66 = load i64, i64* %22, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %20)
  %67 = getelementptr inbounds %struct.uint16v8_t, %struct.uint16v8_t* %10, i64 0, i32 0, i64 5
  %68 = load i16, i16* %67, align 2
  %69 = getelementptr inbounds %struct.uint16v8_t, %struct.uint16v8_t* %13, i64 0, i32 0, i64 5
  %70 = load i16, i16* %69, align 2
  %71 = icmp slt i16 %68, %70
  %72 = select i1 %71, i16 %68, i16 %70
  call void @llvm.lifetime.start(i64 16, i8* nonnull %20)
  store i64 %55, i64* %21, align 16
  store i64 %66, i64* %22, align 8
  %73 = getelementptr inbounds [8 x i16], [8 x i16]* %23, i64 0, i64 5
  store i16 %72, i16* %73, align 2
  %74 = load i64, i64* %22, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %20)
  %75 = getelementptr inbounds %struct.uint16v8_t, %struct.uint16v8_t* %10, i64 0, i32 0, i64 6
  %76 = load i16, i16* %75, align 4
  %77 = getelementptr inbounds %struct.uint16v8_t, %struct.uint16v8_t* %13, i64 0, i32 0, i64 6
  %78 = load i16, i16* %77, align 4
  %79 = icmp slt i16 %76, %78
  %80 = select i1 %79, i16 %76, i16 %78
  call void @llvm.lifetime.start(i64 16, i8* nonnull %20)
  store i64 %55, i64* %21, align 16
  store i64 %74, i64* %22, align 8
  %81 = getelementptr inbounds [8 x i16], [8 x i16]* %23, i64 0, i64 6
  store i16 %80, i16* %81, align 4
  %82 = load i64, i64* %22, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %20)
  %83 = getelementptr inbounds %struct.uint16v8_t, %struct.uint16v8_t* %10, i64 0, i32 0, i64 7
  %84 = load i16, i16* %83, align 2
  %85 = getelementptr inbounds %struct.uint16v8_t, %struct.uint16v8_t* %13, i64 0, i32 0, i64 7
  %86 = load i16, i16* %85, align 2
  %87 = icmp slt i16 %84, %86
  %88 = select i1 %87, i16 %84, i16 %86
  call void @llvm.lifetime.start(i64 16, i8* nonnull %20)
  store i64 %55, i64* %21, align 16
  store i64 %82, i64* %22, align 8
  %89 = getelementptr inbounds [8 x i16], [8 x i16]* %23, i64 0, i64 7
  store i16 %88, i16* %89, align 2
  %90 = load i64, i64* %22, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %20)
  %91 = lshr i64 %55, 16
  %92 = lshr i64 %55, 32
  %93 = lshr i64 %55, 48
  %94 = trunc i64 %55 to i16
  %95 = trunc i64 %91 to i16
  %96 = trunc i64 %92 to i16
  %97 = trunc i64 %93 to i16
  %98 = bitcast i8* %2 to i16*
  store i16 %94, i16* %98, align 1
  %99 = getelementptr inbounds i8, i8* %2, i64 2
  %100 = bitcast i8* %99 to i16*
  store i16 %95, i16* %100, align 1
  %101 = getelementptr inbounds i8, i8* %2, i64 4
  %102 = bitcast i8* %101 to i16*
  store i16 %96, i16* %102, align 1
  %103 = getelementptr inbounds i8, i8* %2, i64 6
  %104 = bitcast i8* %103 to i16*
  store i16 %97, i16* %104, align 1
  %105 = trunc i64 %90 to i16
  %106 = getelementptr inbounds i8, i8* %2, i64 8
  %107 = bitcast i8* %106 to i16*
  store i16 %105, i16* %107, align 1
  %108 = lshr i64 %90, 16
  %109 = trunc i64 %108 to i16
  %110 = getelementptr inbounds i8, i8* %2, i64 10
  %111 = bitcast i8* %110 to i16*
  store i16 %109, i16* %111, align 1
  %112 = lshr i64 %90, 32
  %113 = trunc i64 %112 to i16
  %114 = getelementptr inbounds i8, i8* %2, i64 12
  %115 = bitcast i8* %114 to i16*
  store i16 %113, i16* %115, align 1
  %116 = lshr i64 %90, 48
  %117 = trunc i64 %116 to i16
  %118 = getelementptr inbounds i8, i8* %2, i64 14
  %119 = bitcast i8* %118 to i16*
  store i16 %117, i16* %119, align 1
  call void @llvm.lifetime.end(i64 16, i8* nonnull %17) 
  call void @llvm.lifetime.end(i64 16, i8* nonnull %14) 
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L6PMINSWI3VnWI8vec128_tE2VnIS2_E3MVnIS2_EEEP6MemoryS9_R5StateT_T0_T1_(%struct.Memory* returned, %struct.State* nocapture readnone dereferenceable(3376), i8* nocapture, i8* nocapture readonly, i64)  {
  %6 = alloca <2 x i64>, align 16
  %7 = bitcast <2 x i64>* %6 to { i64, i64 }*
  %8 = alloca <2 x i64>, align 16
  %9 = bitcast <2 x i64>* %8 to { i64, i64 }*
  %10 = bitcast <2 x i64>* %8 to %struct.uint16v8_t*
  %11 = alloca <2 x i64>, align 16
  %12 = bitcast <2 x i64>* %11 to { i64, i64 }*
  %13 = bitcast <2 x i64>* %11 to %struct.uint16v8_t*
  %14 = bitcast <2 x i64>* %8 to i8*
  call void @llvm.lifetime.start(i64 16, i8* nonnull %14) 
  %15 = bitcast i8* %3 to <2 x i64>*
  %16 = load <2 x i64>, <2 x i64>* %15, align 1
  store <2 x i64> %16, <2 x i64>* %8, align 16
  %17 = bitcast <2 x i64>* %11 to i8*
  call void @llvm.lifetime.start(i64 16, i8* nonnull %17) 
  %18 = inttoptr i64 %4 to i16*
  %19 = load i16, i16* %18
  %20 = add i64 %4, 2
  %21 = inttoptr i64 %20 to i16*
  %22 = load i16, i16* %21
  %23 = add i64 %4, 4
  %24 = inttoptr i64 %23 to i16*
  %25 = load i16, i16* %24
  %26 = add i64 %4, 6
  %27 = inttoptr i64 %26 to i16*
  %28 = load i16, i16* %27
  %29 = add i64 %4, 8
  %30 = inttoptr i64 %29 to i16*
  %31 = load i16, i16* %30
  %32 = add i64 %4, 10
  %33 = inttoptr i64 %32 to i16*
  %34 = load i16, i16* %33
  %35 = add i64 %4, 12
  %36 = inttoptr i64 %35 to i16*
  %37 = load i16, i16* %36
  %38 = add i64 %4, 14
  %39 = inttoptr i64 %38 to i16*
  %40 = load i16, i16* %39
  %41 = insertelement <2 x i16> undef, i16 %28, i32 0
  %42 = insertelement <2 x i16> %41, i16 %40, i32 1
  %43 = zext <2 x i16> %42 to <2 x i64>
  %44 = shl nuw <2 x i64> %43, <i64 48, i64 48>
  %45 = insertelement <2 x i16> undef, i16 %25, i32 0
  %46 = insertelement <2 x i16> %45, i16 %37, i32 1
  %47 = zext <2 x i16> %46 to <2 x i64>
  %48 = shl nuw nsw <2 x i64> %47, <i64 32, i64 32>
  %49 = insertelement <2 x i16> undef, i16 %22, i32 0
  %50 = insertelement <2 x i16> %49, i16 %34, i32 1
  %51 = zext <2 x i16> %50 to <2 x i64>
  %52 = shl nuw nsw <2 x i64> %51, <i64 16, i64 16>
  %53 = insertelement <2 x i16> undef, i16 %19, i32 0
  %54 = insertelement <2 x i16> %53, i16 %31, i32 1
  %55 = zext <2 x i16> %54 to <2 x i64>
  %56 = or <2 x i64> %52, %55
  %57 = or <2 x i64> %56, %48
  %58 = or <2 x i64> %57, %44
  store <2 x i64> %58, <2 x i64>* %11, align 16
  %59 = bitcast <2 x i64>* %6 to i8*
  %60 = getelementptr inbounds <2 x i64>, <2 x i64>* %6, i64 0, i64 0
  %61 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %7, i64 0, i32 1
  %62 = bitcast <2 x i64>* %6 to [8 x i16]*
  %63 = extractelement <2 x i64> %16, i32 0
  %64 = trunc i64 %63 to i16
  %65 = icmp slt i16 %64, %19
  %66 = select i1 %65, i16 %64, i16 %19
  call void @llvm.lifetime.start(i64 16, i8* nonnull %59)
  store <2 x i64> zeroinitializer, <2 x i64>* %6, align 16
  %67 = bitcast <2 x i64>* %6 to i16*
  store i16 %66, i16* %67, align 16
  %68 = load i64, i64* %60, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %59)
  %69 = lshr i64 %63, 16
  %70 = trunc i64 %69 to i16
  %71 = icmp slt i16 %70, %22
  %72 = select i1 %71, i16 %70, i16 %22
  call void @llvm.lifetime.start(i64 16, i8* nonnull %59)
  store i64 %68, i64* %60, align 16
  store i64 0, i64* %61, align 8
  %73 = getelementptr inbounds [8 x i16], [8 x i16]* %62, i64 0, i64 1
  store i16 %72, i16* %73, align 2
  %74 = load i64, i64* %60, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %59)
  %75 = lshr i64 %63, 32
  %76 = trunc i64 %75 to i16
  %77 = icmp slt i16 %76, %25
  %78 = select i1 %77, i16 %76, i16 %25
  call void @llvm.lifetime.start(i64 16, i8* nonnull %59)
  store i64 %74, i64* %60, align 16
  store i64 0, i64* %61, align 8
  %79 = getelementptr inbounds [8 x i16], [8 x i16]* %62, i64 0, i64 2
  store i16 %78, i16* %79, align 4
  %80 = load i64, i64* %60, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %59)
  %81 = getelementptr inbounds %struct.uint16v8_t, %struct.uint16v8_t* %10, i64 0, i32 0, i64 3
  %82 = load i16, i16* %81, align 2
  %83 = icmp slt i16 %82, %28
  %84 = select i1 %83, i16 %82, i16 %28
  call void @llvm.lifetime.start(i64 16, i8* nonnull %59)
  store i64 %80, i64* %60, align 16
  store i64 0, i64* %61, align 8
  %85 = getelementptr inbounds [8 x i16], [8 x i16]* %62, i64 0, i64 3
  store i16 %84, i16* %85, align 2
  %86 = load i64, i64* %60, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %59)
  %87 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %9, i64 0, i32 1
  %88 = bitcast i64* %87 to i16*
  %89 = load i16, i16* %88, align 8
  %90 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %12, i64 0, i32 1
  %91 = bitcast i64* %90 to i16*
  %92 = load i16, i16* %91, align 8
  %93 = icmp slt i16 %89, %92
  %94 = select i1 %93, i16 %89, i16 %92
  call void @llvm.lifetime.start(i64 16, i8* nonnull %59)
  store i64 %86, i64* %60, align 16
  store i64 0, i64* %61, align 8
  %95 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %7, i64 0, i32 1
  %96 = bitcast i64* %95 to i16*
  store i16 %94, i16* %96, align 8
  %97 = load i64, i64* %61, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %59)
  %98 = getelementptr inbounds %struct.uint16v8_t, %struct.uint16v8_t* %10, i64 0, i32 0, i64 5
  %99 = load i16, i16* %98, align 2
  %100 = getelementptr inbounds %struct.uint16v8_t, %struct.uint16v8_t* %13, i64 0, i32 0, i64 5
  %101 = load i16, i16* %100, align 2
  %102 = icmp slt i16 %99, %101
  %103 = select i1 %102, i16 %99, i16 %101
  call void @llvm.lifetime.start(i64 16, i8* nonnull %59)
  store i64 %86, i64* %60, align 16
  store i64 %97, i64* %61, align 8
  %104 = getelementptr inbounds [8 x i16], [8 x i16]* %62, i64 0, i64 5
  store i16 %103, i16* %104, align 2
  %105 = load i64, i64* %61, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %59)
  %106 = getelementptr inbounds %struct.uint16v8_t, %struct.uint16v8_t* %10, i64 0, i32 0, i64 6
  %107 = load i16, i16* %106, align 4
  %108 = getelementptr inbounds %struct.uint16v8_t, %struct.uint16v8_t* %13, i64 0, i32 0, i64 6
  %109 = load i16, i16* %108, align 4
  %110 = icmp slt i16 %107, %109
  %111 = select i1 %110, i16 %107, i16 %109
  call void @llvm.lifetime.start(i64 16, i8* nonnull %59)
  store i64 %86, i64* %60, align 16
  store i64 %105, i64* %61, align 8
  %112 = getelementptr inbounds [8 x i16], [8 x i16]* %62, i64 0, i64 6
  store i16 %111, i16* %112, align 4
  %113 = load i64, i64* %61, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %59)
  %114 = getelementptr inbounds %struct.uint16v8_t, %struct.uint16v8_t* %10, i64 0, i32 0, i64 7
  %115 = load i16, i16* %114, align 2
  %116 = getelementptr inbounds %struct.uint16v8_t, %struct.uint16v8_t* %13, i64 0, i32 0, i64 7
  %117 = load i16, i16* %116, align 2
  %118 = icmp slt i16 %115, %117
  %119 = select i1 %118, i16 %115, i16 %117
  call void @llvm.lifetime.start(i64 16, i8* nonnull %59)
  store i64 %86, i64* %60, align 16
  store i64 %113, i64* %61, align 8
  %120 = getelementptr inbounds [8 x i16], [8 x i16]* %62, i64 0, i64 7
  store i16 %119, i16* %120, align 2
  %121 = load i64, i64* %61, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %59)
  %122 = lshr i64 %86, 16
  %123 = lshr i64 %86, 32
  %124 = lshr i64 %86, 48
  %125 = trunc i64 %86 to i16
  %126 = trunc i64 %122 to i16
  %127 = trunc i64 %123 to i16
  %128 = trunc i64 %124 to i16
  %129 = bitcast i8* %2 to i16*
  store i16 %125, i16* %129, align 1
  %130 = getelementptr inbounds i8, i8* %2, i64 2
  %131 = bitcast i8* %130 to i16*
  store i16 %126, i16* %131, align 1
  %132 = getelementptr inbounds i8, i8* %2, i64 4
  %133 = bitcast i8* %132 to i16*
  store i16 %127, i16* %133, align 1
  %134 = getelementptr inbounds i8, i8* %2, i64 6
  %135 = bitcast i8* %134 to i16*
  store i16 %128, i16* %135, align 1
  %136 = trunc i64 %121 to i16
  %137 = getelementptr inbounds i8, i8* %2, i64 8
  %138 = bitcast i8* %137 to i16*
  store i16 %136, i16* %138, align 1
  %139 = lshr i64 %121, 16
  %140 = trunc i64 %139 to i16
  %141 = getelementptr inbounds i8, i8* %2, i64 10
  %142 = bitcast i8* %141 to i16*
  store i16 %140, i16* %142, align 1
  %143 = lshr i64 %121, 32
  %144 = trunc i64 %143 to i16
  %145 = getelementptr inbounds i8, i8* %2, i64 12
  %146 = bitcast i8* %145 to i16*
  store i16 %144, i16* %146, align 1
  %147 = lshr i64 %121, 48
  %148 = trunc i64 %147 to i16
  %149 = getelementptr inbounds i8, i8* %2, i64 14
  %150 = bitcast i8* %149 to i16*
  store i16 %148, i16* %150, align 1
  call void @llvm.lifetime.end(i64 16, i8* nonnull %17) 
  call void @llvm.lifetime.end(i64 16, i8* nonnull %14) 
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L6PMINUBI4RVnWI7vec64_tE3RVnIS2_ES5_EEP6MemoryS7_R5StateT_T0_T1_(%struct.Memory* readnone returned, %struct.State* nocapture readnone dereferenceable(3376), i64* nocapture, i64, i64)  {
  %6 = alloca i64, align 8
  %7 = alloca i64, align 8
  %8 = bitcast i64* %7 to %struct.uint8v8_t*
  %9 = alloca i64, align 8
  %10 = bitcast i64* %9 to %struct.uint8v8_t*
  %11 = bitcast i64* %7 to i8*
  call void @llvm.lifetime.start(i64 8, i8* nonnull %11) 
  store i64 %3, i64* %7, align 8
  %12 = bitcast i64* %9 to i8*
  call void @llvm.lifetime.start(i64 8, i8* nonnull %12) 
  store i64 %4, i64* %9, align 8
  %13 = bitcast i64* %6 to i8*
  %14 = bitcast i64* %6 to [8 x i8]*
  %15 = trunc i64 %3 to i8
  %16 = trunc i64 %4 to i8
  %17 = icmp ult i8 %15, %16
  %18 = select i1 %17, i8 %15, i8 %16
  call void @llvm.lifetime.start(i64 8, i8* nonnull %13)
  store i64 0, i64* %6, align 8
  %19 = bitcast i64* %6 to i8*
  store i8 %18, i8* %19, align 8
  %20 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %13)
  %21 = lshr i64 %3, 8
  %22 = trunc i64 %21 to i8
  %23 = lshr i64 %4, 8
  %24 = trunc i64 %23 to i8
  %25 = icmp ult i8 %22, %24
  %26 = select i1 %25, i8 %22, i8 %24
  call void @llvm.lifetime.start(i64 8, i8* nonnull %13)
  store i64 %20, i64* %6, align 8
  %27 = getelementptr inbounds [8 x i8], [8 x i8]* %14, i64 0, i64 1
  store i8 %26, i8* %27, align 1
  %28 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %13)
  %29 = lshr i64 %3, 16
  %30 = trunc i64 %29 to i8
  %31 = lshr i64 %4, 16
  %32 = trunc i64 %31 to i8
  %33 = icmp ult i8 %30, %32
  %34 = select i1 %33, i8 %30, i8 %32
  call void @llvm.lifetime.start(i64 8, i8* nonnull %13)
  store i64 %28, i64* %6, align 8
  %35 = getelementptr inbounds [8 x i8], [8 x i8]* %14, i64 0, i64 2
  store i8 %34, i8* %35, align 2
  %36 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %13)
  %37 = getelementptr inbounds %struct.uint8v8_t, %struct.uint8v8_t* %8, i64 0, i32 0, i64 3
  %38 = load i8, i8* %37, align 1
  %39 = getelementptr inbounds %struct.uint8v8_t, %struct.uint8v8_t* %10, i64 0, i32 0, i64 3
  %40 = load i8, i8* %39, align 1
  %41 = icmp ult i8 %38, %40
  %42 = select i1 %41, i8 %38, i8 %40
  call void @llvm.lifetime.start(i64 8, i8* nonnull %13)
  store i64 %36, i64* %6, align 8
  %43 = getelementptr inbounds [8 x i8], [8 x i8]* %14, i64 0, i64 3
  store i8 %42, i8* %43, align 1
  %44 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %13)
  %45 = getelementptr inbounds %struct.uint8v8_t, %struct.uint8v8_t* %8, i64 0, i32 0, i64 4
  %46 = load i8, i8* %45, align 4
  %47 = getelementptr inbounds %struct.uint8v8_t, %struct.uint8v8_t* %10, i64 0, i32 0, i64 4
  %48 = load i8, i8* %47, align 4
  %49 = icmp ult i8 %46, %48
  %50 = select i1 %49, i8 %46, i8 %48
  call void @llvm.lifetime.start(i64 8, i8* nonnull %13)
  store i64 %44, i64* %6, align 8
  %51 = getelementptr inbounds [8 x i8], [8 x i8]* %14, i64 0, i64 4
  store i8 %50, i8* %51, align 4
  %52 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %13)
  %53 = getelementptr inbounds %struct.uint8v8_t, %struct.uint8v8_t* %8, i64 0, i32 0, i64 5
  %54 = load i8, i8* %53, align 1
  %55 = getelementptr inbounds %struct.uint8v8_t, %struct.uint8v8_t* %10, i64 0, i32 0, i64 5
  %56 = load i8, i8* %55, align 1
  %57 = icmp ult i8 %54, %56
  %58 = select i1 %57, i8 %54, i8 %56
  call void @llvm.lifetime.start(i64 8, i8* nonnull %13)
  store i64 %52, i64* %6, align 8
  %59 = getelementptr inbounds [8 x i8], [8 x i8]* %14, i64 0, i64 5
  store i8 %58, i8* %59, align 1
  %60 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %13)
  %61 = getelementptr inbounds %struct.uint8v8_t, %struct.uint8v8_t* %8, i64 0, i32 0, i64 6
  %62 = load i8, i8* %61, align 2
  %63 = getelementptr inbounds %struct.uint8v8_t, %struct.uint8v8_t* %10, i64 0, i32 0, i64 6
  %64 = load i8, i8* %63, align 2
  %65 = icmp ult i8 %62, %64
  %66 = select i1 %65, i8 %62, i8 %64
  call void @llvm.lifetime.start(i64 8, i8* nonnull %13)
  store i64 %60, i64* %6, align 8
  %67 = getelementptr inbounds [8 x i8], [8 x i8]* %14, i64 0, i64 6
  store i8 %66, i8* %67, align 2
  %68 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %13)
  %69 = getelementptr inbounds %struct.uint8v8_t, %struct.uint8v8_t* %8, i64 0, i32 0, i64 7
  %70 = load i8, i8* %69, align 1
  %71 = getelementptr inbounds %struct.uint8v8_t, %struct.uint8v8_t* %10, i64 0, i32 0, i64 7
  %72 = load i8, i8* %71, align 1
  %73 = icmp ult i8 %70, %72
  %74 = select i1 %73, i8 %70, i8 %72
  call void @llvm.lifetime.start(i64 8, i8* nonnull %13)
  store i64 %68, i64* %6, align 8
  %75 = getelementptr inbounds [8 x i8], [8 x i8]* %14, i64 0, i64 7
  store i8 %74, i8* %75, align 1
  %76 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %13)
  %77 = lshr i64 %76, 8
  %78 = lshr i64 %76, 16
  %79 = lshr i64 %76, 24
  %80 = lshr i64 %76, 32
  %81 = lshr i64 %76, 40
  %82 = lshr i64 %76, 48
  %83 = lshr i64 %76, 56
  %84 = trunc i64 %76 to i8
  %85 = trunc i64 %77 to i8
  %86 = trunc i64 %78 to i8
  %87 = trunc i64 %79 to i8
  %88 = trunc i64 %80 to i8
  %89 = trunc i64 %81 to i8
  %90 = trunc i64 %82 to i8
  %91 = trunc i64 %83 to i8
  %92 = bitcast i64* %2 to [8 x i8]*
  %93 = bitcast i64* %2 to i8*
  store i8 %84, i8* %93, align 1
  %94 = getelementptr inbounds [8 x i8], [8 x i8]* %92, i64 0, i64 1
  store i8 %85, i8* %94, align 1
  %95 = getelementptr inbounds [8 x i8], [8 x i8]* %92, i64 0, i64 2
  store i8 %86, i8* %95, align 1
  %96 = getelementptr inbounds [8 x i8], [8 x i8]* %92, i64 0, i64 3
  store i8 %87, i8* %96, align 1
  %97 = getelementptr inbounds [8 x i8], [8 x i8]* %92, i64 0, i64 4
  store i8 %88, i8* %97, align 1
  %98 = getelementptr inbounds [8 x i8], [8 x i8]* %92, i64 0, i64 5
  store i8 %89, i8* %98, align 1
  %99 = getelementptr inbounds [8 x i8], [8 x i8]* %92, i64 0, i64 6
  store i8 %90, i8* %99, align 1
  %100 = getelementptr inbounds [8 x i8], [8 x i8]* %92, i64 0, i64 7
  store i8 %91, i8* %100, align 1
  call void @llvm.lifetime.end(i64 8, i8* nonnull %12) 
  call void @llvm.lifetime.end(i64 8, i8* nonnull %11) 
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L6PMINUBI4RVnWI7vec64_tE3RVnIS2_E3MVnIS2_EEEP6MemoryS9_R5StateT_T0_T1_(%struct.Memory* returned, %struct.State* nocapture readnone dereferenceable(3376), i64* nocapture, i64, i64)  {
  %6 = alloca i64, align 8
  %7 = alloca i64, align 8
  %8 = bitcast i64* %7 to %struct.uint8v8_t*
  %9 = alloca i64, align 8
  %10 = bitcast i64* %9 to %struct.uint8v8_t*
  %11 = bitcast i64* %7 to i8*
  call void @llvm.lifetime.start(i64 8, i8* nonnull %11) 
  store i64 %3, i64* %7, align 8
  %12 = bitcast i64* %9 to i8*
  call void @llvm.lifetime.start(i64 8, i8* nonnull %12) 
  %13 = inttoptr i64 %4 to i8*
  %14 = load i8, i8* %13
  %15 = add i64 %4, 1
  %16 = inttoptr i64 %15 to i8*
  %17 = load i8, i8* %16
  %18 = add i64 %4, 2
  %19 = inttoptr i64 %18 to i8*
  %20 = load i8, i8* %19
  %21 = add i64 %4, 3
  %22 = inttoptr i64 %21 to i8*
  %23 = load i8, i8* %22
  %24 = add i64 %4, 4
  %25 = inttoptr i64 %24 to i8*
  %26 = load i8, i8* %25
  %27 = add i64 %4, 5
  %28 = inttoptr i64 %27 to i8*
  %29 = load i8, i8* %28
  %30 = add i64 %4, 6
  %31 = inttoptr i64 %30 to i8*
  %32 = load i8, i8* %31
  %33 = add i64 %4, 7
  %34 = inttoptr i64 %33 to i8*
  %35 = load i8, i8* %34
  %36 = zext i8 %35 to i64
  %37 = shl nuw i64 %36, 56
  %38 = zext i8 %32 to i64
  %39 = shl nuw nsw i64 %38, 48
  %40 = zext i8 %29 to i64
  %41 = shl nuw nsw i64 %40, 40
  %42 = zext i8 %26 to i64
  %43 = shl nuw nsw i64 %42, 32
  %44 = zext i8 %23 to i64
  %45 = shl nuw nsw i64 %44, 24
  %46 = zext i8 %20 to i64
  %47 = shl nuw nsw i64 %46, 16
  %48 = zext i8 %17 to i64
  %49 = shl nuw nsw i64 %48, 8
  %50 = zext i8 %14 to i64
  %51 = or i64 %49, %50
  %52 = or i64 %51, %47
  %53 = or i64 %52, %45
  %54 = or i64 %53, %43
  %55 = or i64 %54, %41
  %56 = or i64 %55, %39
  %57 = or i64 %56, %37
  store i64 %57, i64* %9, align 8
  %58 = bitcast i64* %6 to i8*
  %59 = bitcast i64* %6 to [8 x i8]*
  %60 = trunc i64 %3 to i8
  %61 = icmp ult i8 %60, %14
  %62 = select i1 %61, i8 %60, i8 %14
  call void @llvm.lifetime.start(i64 8, i8* nonnull %58)
  store i64 0, i64* %6, align 8
  %63 = bitcast i64* %6 to i8*
  store i8 %62, i8* %63, align 8
  %64 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %58)
  %65 = lshr i64 %3, 8
  %66 = trunc i64 %65 to i8
  %67 = icmp ult i8 %66, %17
  %68 = select i1 %67, i8 %66, i8 %17
  call void @llvm.lifetime.start(i64 8, i8* nonnull %58)
  store i64 %64, i64* %6, align 8
  %69 = getelementptr inbounds [8 x i8], [8 x i8]* %59, i64 0, i64 1
  store i8 %68, i8* %69, align 1
  %70 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %58)
  %71 = getelementptr inbounds %struct.uint8v8_t, %struct.uint8v8_t* %8, i64 0, i32 0, i64 2
  %72 = load i8, i8* %71, align 2
  %73 = icmp ult i8 %72, %20
  %74 = select i1 %73, i8 %72, i8 %20
  call void @llvm.lifetime.start(i64 8, i8* nonnull %58)
  store i64 %70, i64* %6, align 8
  %75 = getelementptr inbounds [8 x i8], [8 x i8]* %59, i64 0, i64 2
  store i8 %74, i8* %75, align 2
  %76 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %58)
  %77 = getelementptr inbounds %struct.uint8v8_t, %struct.uint8v8_t* %8, i64 0, i32 0, i64 3
  %78 = load i8, i8* %77, align 1
  %79 = getelementptr inbounds %struct.uint8v8_t, %struct.uint8v8_t* %10, i64 0, i32 0, i64 3
  %80 = load i8, i8* %79, align 1
  %81 = icmp ult i8 %78, %80
  %82 = select i1 %81, i8 %78, i8 %80
  call void @llvm.lifetime.start(i64 8, i8* nonnull %58)
  store i64 %76, i64* %6, align 8
  %83 = getelementptr inbounds [8 x i8], [8 x i8]* %59, i64 0, i64 3
  store i8 %82, i8* %83, align 1
  %84 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %58)
  %85 = getelementptr inbounds %struct.uint8v8_t, %struct.uint8v8_t* %8, i64 0, i32 0, i64 4
  %86 = load i8, i8* %85, align 4
  %87 = getelementptr inbounds %struct.uint8v8_t, %struct.uint8v8_t* %10, i64 0, i32 0, i64 4
  %88 = load i8, i8* %87, align 4
  %89 = icmp ult i8 %86, %88
  %90 = select i1 %89, i8 %86, i8 %88
  call void @llvm.lifetime.start(i64 8, i8* nonnull %58)
  store i64 %84, i64* %6, align 8
  %91 = getelementptr inbounds [8 x i8], [8 x i8]* %59, i64 0, i64 4
  store i8 %90, i8* %91, align 4
  %92 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %58)
  %93 = getelementptr inbounds %struct.uint8v8_t, %struct.uint8v8_t* %8, i64 0, i32 0, i64 5
  %94 = load i8, i8* %93, align 1
  %95 = getelementptr inbounds %struct.uint8v8_t, %struct.uint8v8_t* %10, i64 0, i32 0, i64 5
  %96 = load i8, i8* %95, align 1
  %97 = icmp ult i8 %94, %96
  %98 = select i1 %97, i8 %94, i8 %96
  call void @llvm.lifetime.start(i64 8, i8* nonnull %58)
  store i64 %92, i64* %6, align 8
  %99 = getelementptr inbounds [8 x i8], [8 x i8]* %59, i64 0, i64 5
  store i8 %98, i8* %99, align 1
  %100 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %58)
  %101 = getelementptr inbounds %struct.uint8v8_t, %struct.uint8v8_t* %8, i64 0, i32 0, i64 6
  %102 = load i8, i8* %101, align 2
  %103 = getelementptr inbounds %struct.uint8v8_t, %struct.uint8v8_t* %10, i64 0, i32 0, i64 6
  %104 = load i8, i8* %103, align 2
  %105 = icmp ult i8 %102, %104
  %106 = select i1 %105, i8 %102, i8 %104
  call void @llvm.lifetime.start(i64 8, i8* nonnull %58)
  store i64 %100, i64* %6, align 8
  %107 = getelementptr inbounds [8 x i8], [8 x i8]* %59, i64 0, i64 6
  store i8 %106, i8* %107, align 2
  %108 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %58)
  %109 = getelementptr inbounds %struct.uint8v8_t, %struct.uint8v8_t* %8, i64 0, i32 0, i64 7
  %110 = load i8, i8* %109, align 1
  %111 = getelementptr inbounds %struct.uint8v8_t, %struct.uint8v8_t* %10, i64 0, i32 0, i64 7
  %112 = load i8, i8* %111, align 1
  %113 = icmp ult i8 %110, %112
  %114 = select i1 %113, i8 %110, i8 %112
  call void @llvm.lifetime.start(i64 8, i8* nonnull %58)
  store i64 %108, i64* %6, align 8
  %115 = getelementptr inbounds [8 x i8], [8 x i8]* %59, i64 0, i64 7
  store i8 %114, i8* %115, align 1
  %116 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %58)
  %117 = lshr i64 %116, 8
  %118 = lshr i64 %116, 16
  %119 = lshr i64 %116, 24
  %120 = lshr i64 %116, 32
  %121 = lshr i64 %116, 40
  %122 = lshr i64 %116, 48
  %123 = lshr i64 %116, 56
  %124 = trunc i64 %116 to i8
  %125 = trunc i64 %117 to i8
  %126 = trunc i64 %118 to i8
  %127 = trunc i64 %119 to i8
  %128 = trunc i64 %120 to i8
  %129 = trunc i64 %121 to i8
  %130 = trunc i64 %122 to i8
  %131 = trunc i64 %123 to i8
  %132 = bitcast i64* %2 to [8 x i8]*
  %133 = bitcast i64* %2 to i8*
  store i8 %124, i8* %133, align 1
  %134 = getelementptr inbounds [8 x i8], [8 x i8]* %132, i64 0, i64 1
  store i8 %125, i8* %134, align 1
  %135 = getelementptr inbounds [8 x i8], [8 x i8]* %132, i64 0, i64 2
  store i8 %126, i8* %135, align 1
  %136 = getelementptr inbounds [8 x i8], [8 x i8]* %132, i64 0, i64 3
  store i8 %127, i8* %136, align 1
  %137 = getelementptr inbounds [8 x i8], [8 x i8]* %132, i64 0, i64 4
  store i8 %128, i8* %137, align 1
  %138 = getelementptr inbounds [8 x i8], [8 x i8]* %132, i64 0, i64 5
  store i8 %129, i8* %138, align 1
  %139 = getelementptr inbounds [8 x i8], [8 x i8]* %132, i64 0, i64 6
  store i8 %130, i8* %139, align 1
  %140 = getelementptr inbounds [8 x i8], [8 x i8]* %132, i64 0, i64 7
  store i8 %131, i8* %140, align 1
  call void @llvm.lifetime.end(i64 8, i8* nonnull %12) 
  call void @llvm.lifetime.end(i64 8, i8* nonnull %11) 
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L6PMINUBI3VnWI8vec128_tE2VnIS2_ES5_EEP6MemoryS7_R5StateT_T0_T1_(%struct.Memory* readnone returned, %struct.State* nocapture readnone dereferenceable(3376), i8* nocapture, i8* nocapture readonly, i8* nocapture readonly)  {
  %6 = alloca <2 x i64>, align 16
  %7 = bitcast <2 x i64>* %6 to { i64, i64 }*
  %8 = alloca <2 x i64>, align 16
  %9 = bitcast <2 x i64>* %8 to { i64, i64 }*
  %10 = bitcast <2 x i64>* %8 to %struct.uint8v16_t*
  %11 = alloca <2 x i64>, align 16
  %12 = bitcast <2 x i64>* %11 to { i64, i64 }*
  %13 = bitcast <2 x i64>* %11 to %struct.uint8v16_t*
  %14 = bitcast <2 x i64>* %8 to i8*
  call void @llvm.lifetime.start(i64 16, i8* nonnull %14) 
  %15 = bitcast i8* %3 to <2 x i64>*
  %16 = load <2 x i64>, <2 x i64>* %15, align 1
  store <2 x i64> %16, <2 x i64>* %8, align 16
  %17 = bitcast <2 x i64>* %11 to i8*
  call void @llvm.lifetime.start(i64 16, i8* nonnull %17) 
  %18 = bitcast i8* %4 to <2 x i64>*
  %19 = load <2 x i64>, <2 x i64>* %18, align 1
  store <2 x i64> %19, <2 x i64>* %11, align 16
  %20 = bitcast <2 x i64>* %6 to i8*
  %21 = getelementptr inbounds <2 x i64>, <2 x i64>* %6, i64 0, i64 0
  %22 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %7, i64 0, i32 1
  %23 = bitcast <2 x i64>* %6 to [16 x i8]*
  %24 = extractelement <2 x i64> %16, i32 0
  %25 = trunc i64 %24 to i8
  %26 = extractelement <2 x i64> %19, i32 0
  %27 = trunc i64 %26 to i8
  %28 = icmp ult i8 %25, %27
  %29 = select i1 %28, i8 %25, i8 %27
  call void @llvm.lifetime.start(i64 16, i8* nonnull %20)
  store <2 x i64> zeroinitializer, <2 x i64>* %6, align 16
  %30 = bitcast <2 x i64>* %6 to i8*
  store i8 %29, i8* %30, align 16
  %31 = load i64, i64* %21, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %20)
  %32 = lshr i64 %24, 8
  %33 = trunc i64 %32 to i8
  %34 = lshr i64 %26, 8
  %35 = trunc i64 %34 to i8
  %36 = icmp ult i8 %33, %35
  %37 = select i1 %36, i8 %33, i8 %35
  call void @llvm.lifetime.start(i64 16, i8* nonnull %20)
  store i64 %31, i64* %21, align 16
  store i64 0, i64* %22, align 8
  %38 = getelementptr inbounds [16 x i8], [16 x i8]* %23, i64 0, i64 1
  store i8 %37, i8* %38, align 1
  %39 = load i64, i64* %21, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %20)
  %40 = lshr i64 %24, 16
  %41 = trunc i64 %40 to i8
  %42 = lshr i64 %26, 16
  %43 = trunc i64 %42 to i8
  %44 = icmp ult i8 %41, %43
  %45 = select i1 %44, i8 %41, i8 %43
  call void @llvm.lifetime.start(i64 16, i8* nonnull %20)
  store i64 %39, i64* %21, align 16
  store i64 0, i64* %22, align 8
  %46 = getelementptr inbounds [16 x i8], [16 x i8]* %23, i64 0, i64 2
  store i8 %45, i8* %46, align 2
  %47 = load i64, i64* %21, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %20)
  %48 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %10, i64 0, i32 0, i64 3
  %49 = load i8, i8* %48, align 1
  %50 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %13, i64 0, i32 0, i64 3
  %51 = load i8, i8* %50, align 1
  %52 = icmp ult i8 %49, %51
  %53 = select i1 %52, i8 %49, i8 %51
  call void @llvm.lifetime.start(i64 16, i8* nonnull %20)
  store i64 %47, i64* %21, align 16
  store i64 0, i64* %22, align 8
  %54 = getelementptr inbounds [16 x i8], [16 x i8]* %23, i64 0, i64 3
  store i8 %53, i8* %54, align 1
  %55 = load i64, i64* %21, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %20)
  %56 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %10, i64 0, i32 0, i64 4
  %57 = load i8, i8* %56, align 4
  %58 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %13, i64 0, i32 0, i64 4
  %59 = load i8, i8* %58, align 4
  %60 = icmp ult i8 %57, %59
  %61 = select i1 %60, i8 %57, i8 %59
  call void @llvm.lifetime.start(i64 16, i8* nonnull %20)
  store i64 %55, i64* %21, align 16
  store i64 0, i64* %22, align 8
  %62 = getelementptr inbounds [16 x i8], [16 x i8]* %23, i64 0, i64 4
  store i8 %61, i8* %62, align 4
  %63 = load i64, i64* %21, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %20)
  %64 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %10, i64 0, i32 0, i64 5
  %65 = load i8, i8* %64, align 1
  %66 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %13, i64 0, i32 0, i64 5
  %67 = load i8, i8* %66, align 1
  %68 = icmp ult i8 %65, %67
  %69 = select i1 %68, i8 %65, i8 %67
  call void @llvm.lifetime.start(i64 16, i8* nonnull %20)
  store i64 %63, i64* %21, align 16
  store i64 0, i64* %22, align 8
  %70 = getelementptr inbounds [16 x i8], [16 x i8]* %23, i64 0, i64 5
  store i8 %69, i8* %70, align 1
  %71 = load i64, i64* %21, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %20)
  %72 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %10, i64 0, i32 0, i64 6
  %73 = load i8, i8* %72, align 2
  %74 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %13, i64 0, i32 0, i64 6
  %75 = load i8, i8* %74, align 2
  %76 = icmp ult i8 %73, %75
  %77 = select i1 %76, i8 %73, i8 %75
  call void @llvm.lifetime.start(i64 16, i8* nonnull %20)
  store i64 %71, i64* %21, align 16
  store i64 0, i64* %22, align 8
  %78 = getelementptr inbounds [16 x i8], [16 x i8]* %23, i64 0, i64 6
  store i8 %77, i8* %78, align 2
  %79 = load i64, i64* %21, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %20)
  %80 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %10, i64 0, i32 0, i64 7
  %81 = load i8, i8* %80, align 1
  %82 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %13, i64 0, i32 0, i64 7
  %83 = load i8, i8* %82, align 1
  %84 = icmp ult i8 %81, %83
  %85 = select i1 %84, i8 %81, i8 %83
  call void @llvm.lifetime.start(i64 16, i8* nonnull %20)
  store i64 %79, i64* %21, align 16
  store i64 0, i64* %22, align 8
  %86 = getelementptr inbounds [16 x i8], [16 x i8]* %23, i64 0, i64 7
  store i8 %85, i8* %86, align 1
  %87 = load i64, i64* %21, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %20)
  %88 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %9, i64 0, i32 1
  %89 = bitcast i64* %88 to i8*
  %90 = load i8, i8* %89, align 8
  %91 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %12, i64 0, i32 1
  %92 = bitcast i64* %91 to i8*
  %93 = load i8, i8* %92, align 8
  %94 = icmp ult i8 %90, %93
  %95 = select i1 %94, i8 %90, i8 %93
  call void @llvm.lifetime.start(i64 16, i8* nonnull %20)
  store i64 %87, i64* %21, align 16
  store i64 0, i64* %22, align 8
  %96 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %7, i64 0, i32 1
  %97 = bitcast i64* %96 to i8*
  store i8 %95, i8* %97, align 8
  %98 = load i64, i64* %22, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %20)
  %99 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %10, i64 0, i32 0, i64 9
  %100 = load i8, i8* %99, align 1
  %101 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %13, i64 0, i32 0, i64 9
  %102 = load i8, i8* %101, align 1
  %103 = icmp ult i8 %100, %102
  %104 = select i1 %103, i8 %100, i8 %102
  call void @llvm.lifetime.start(i64 16, i8* nonnull %20)
  store i64 %87, i64* %21, align 16
  store i64 %98, i64* %22, align 8
  %105 = getelementptr inbounds [16 x i8], [16 x i8]* %23, i64 0, i64 9
  store i8 %104, i8* %105, align 1
  %106 = load i64, i64* %22, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %20)
  %107 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %10, i64 0, i32 0, i64 10
  %108 = load i8, i8* %107, align 2
  %109 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %13, i64 0, i32 0, i64 10
  %110 = load i8, i8* %109, align 2
  %111 = icmp ult i8 %108, %110
  %112 = select i1 %111, i8 %108, i8 %110
  call void @llvm.lifetime.start(i64 16, i8* nonnull %20)
  store i64 %87, i64* %21, align 16
  store i64 %106, i64* %22, align 8
  %113 = getelementptr inbounds [16 x i8], [16 x i8]* %23, i64 0, i64 10
  store i8 %112, i8* %113, align 2
  %114 = load i64, i64* %22, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %20)
  %115 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %10, i64 0, i32 0, i64 11
  %116 = load i8, i8* %115, align 1
  %117 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %13, i64 0, i32 0, i64 11
  %118 = load i8, i8* %117, align 1
  %119 = icmp ult i8 %116, %118
  %120 = select i1 %119, i8 %116, i8 %118
  call void @llvm.lifetime.start(i64 16, i8* nonnull %20)
  store i64 %87, i64* %21, align 16
  store i64 %114, i64* %22, align 8
  %121 = getelementptr inbounds [16 x i8], [16 x i8]* %23, i64 0, i64 11
  store i8 %120, i8* %121, align 1
  %122 = load i64, i64* %22, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %20)
  %123 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %10, i64 0, i32 0, i64 12
  %124 = load i8, i8* %123, align 4
  %125 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %13, i64 0, i32 0, i64 12
  %126 = load i8, i8* %125, align 4
  %127 = icmp ult i8 %124, %126
  %128 = select i1 %127, i8 %124, i8 %126
  call void @llvm.lifetime.start(i64 16, i8* nonnull %20)
  store i64 %87, i64* %21, align 16
  store i64 %122, i64* %22, align 8
  %129 = getelementptr inbounds [16 x i8], [16 x i8]* %23, i64 0, i64 12
  store i8 %128, i8* %129, align 4
  %130 = load i64, i64* %22, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %20)
  %131 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %10, i64 0, i32 0, i64 13
  %132 = load i8, i8* %131, align 1
  %133 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %13, i64 0, i32 0, i64 13
  %134 = load i8, i8* %133, align 1
  %135 = icmp ult i8 %132, %134
  %136 = select i1 %135, i8 %132, i8 %134
  call void @llvm.lifetime.start(i64 16, i8* nonnull %20)
  store i64 %87, i64* %21, align 16
  store i64 %130, i64* %22, align 8
  %137 = getelementptr inbounds [16 x i8], [16 x i8]* %23, i64 0, i64 13
  store i8 %136, i8* %137, align 1
  %138 = load i64, i64* %22, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %20)
  %139 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %10, i64 0, i32 0, i64 14
  %140 = load i8, i8* %139, align 2
  %141 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %13, i64 0, i32 0, i64 14
  %142 = load i8, i8* %141, align 2
  %143 = icmp ult i8 %140, %142
  %144 = select i1 %143, i8 %140, i8 %142
  call void @llvm.lifetime.start(i64 16, i8* nonnull %20)
  store i64 %87, i64* %21, align 16
  store i64 %138, i64* %22, align 8
  %145 = getelementptr inbounds [16 x i8], [16 x i8]* %23, i64 0, i64 14
  store i8 %144, i8* %145, align 2
  %146 = load i64, i64* %22, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %20)
  %147 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %10, i64 0, i32 0, i64 15
  %148 = load i8, i8* %147, align 1
  %149 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %13, i64 0, i32 0, i64 15
  %150 = load i8, i8* %149, align 1
  %151 = icmp ult i8 %148, %150
  %152 = select i1 %151, i8 %148, i8 %150
  call void @llvm.lifetime.start(i64 16, i8* nonnull %20)
  store i64 %87, i64* %21, align 16
  store i64 %146, i64* %22, align 8
  %153 = getelementptr inbounds [16 x i8], [16 x i8]* %23, i64 0, i64 15
  store i8 %152, i8* %153, align 1
  %154 = load i64, i64* %22, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %20)
  %155 = lshr i64 %87, 8
  %156 = lshr i64 %87, 16
  %157 = lshr i64 %87, 24
  %158 = lshr i64 %87, 32
  %159 = lshr i64 %87, 40
  %160 = lshr i64 %87, 48
  %161 = lshr i64 %87, 56
  %162 = trunc i64 %87 to i8
  %163 = trunc i64 %155 to i8
  %164 = trunc i64 %156 to i8
  %165 = trunc i64 %157 to i8
  %166 = trunc i64 %158 to i8
  %167 = trunc i64 %159 to i8
  %168 = trunc i64 %160 to i8
  %169 = trunc i64 %161 to i8
  store i8 %162, i8* %2, align 1
  %170 = getelementptr inbounds i8, i8* %2, i64 1
  store i8 %163, i8* %170, align 1
  %171 = getelementptr inbounds i8, i8* %2, i64 2
  store i8 %164, i8* %171, align 1
  %172 = getelementptr inbounds i8, i8* %2, i64 3
  store i8 %165, i8* %172, align 1
  %173 = getelementptr inbounds i8, i8* %2, i64 4
  store i8 %166, i8* %173, align 1
  %174 = getelementptr inbounds i8, i8* %2, i64 5
  store i8 %167, i8* %174, align 1
  %175 = getelementptr inbounds i8, i8* %2, i64 6
  store i8 %168, i8* %175, align 1
  %176 = getelementptr inbounds i8, i8* %2, i64 7
  store i8 %169, i8* %176, align 1
  %177 = trunc i64 %154 to i8
  %178 = getelementptr inbounds i8, i8* %2, i64 8
  store i8 %177, i8* %178, align 1
  %179 = lshr i64 %154, 8
  %180 = trunc i64 %179 to i8
  %181 = getelementptr inbounds i8, i8* %2, i64 9
  store i8 %180, i8* %181, align 1
  %182 = lshr i64 %154, 16
  %183 = trunc i64 %182 to i8
  %184 = getelementptr inbounds i8, i8* %2, i64 10
  store i8 %183, i8* %184, align 1
  %185 = lshr i64 %154, 24
  %186 = trunc i64 %185 to i8
  %187 = getelementptr inbounds i8, i8* %2, i64 11
  store i8 %186, i8* %187, align 1
  %188 = lshr i64 %154, 32
  %189 = trunc i64 %188 to i8
  %190 = getelementptr inbounds i8, i8* %2, i64 12
  store i8 %189, i8* %190, align 1
  %191 = lshr i64 %154, 40
  %192 = trunc i64 %191 to i8
  %193 = getelementptr inbounds i8, i8* %2, i64 13
  store i8 %192, i8* %193, align 1
  %194 = lshr i64 %154, 48
  %195 = trunc i64 %194 to i8
  %196 = getelementptr inbounds i8, i8* %2, i64 14
  store i8 %195, i8* %196, align 1
  %197 = lshr i64 %154, 56
  %198 = trunc i64 %197 to i8
  %199 = getelementptr inbounds i8, i8* %2, i64 15
  store i8 %198, i8* %199, align 1
  call void @llvm.lifetime.end(i64 16, i8* nonnull %17) 
  call void @llvm.lifetime.end(i64 16, i8* nonnull %14) 
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L6PMINUBI3VnWI8vec128_tE2VnIS2_E3MVnIS2_EEEP6MemoryS9_R5StateT_T0_T1_(%struct.Memory* returned, %struct.State* nocapture readnone dereferenceable(3376), i8* nocapture, i8* nocapture readonly, i64)  {
  %6 = alloca <2 x i64>, align 16
  %7 = bitcast <2 x i64>* %6 to { i64, i64 }*
  %8 = alloca <2 x i64>, align 16
  %9 = bitcast <2 x i64>* %8 to { i64, i64 }*
  %10 = bitcast <2 x i64>* %8 to %struct.uint8v16_t*
  %11 = alloca <2 x i64>, align 16
  %12 = bitcast <2 x i64>* %11 to { i64, i64 }*
  %13 = bitcast <2 x i64>* %11 to %struct.uint8v16_t*
  %14 = bitcast <2 x i64>* %8 to i8*
  call void @llvm.lifetime.start(i64 16, i8* nonnull %14) 
  %15 = bitcast i8* %3 to <2 x i64>*
  %16 = load <2 x i64>, <2 x i64>* %15, align 1
  store <2 x i64> %16, <2 x i64>* %8, align 16
  %17 = bitcast <2 x i64>* %11 to i8*
  call void @llvm.lifetime.start(i64 16, i8* nonnull %17) 
  %18 = inttoptr i64 %4 to i8*
  %19 = load i8, i8* %18
  %20 = add i64 %4, 1
  %21 = inttoptr i64 %20 to i8*
  %22 = load i8, i8* %21
  %23 = add i64 %4, 2
  %24 = inttoptr i64 %23 to i8*
  %25 = load i8, i8* %24
  %26 = add i64 %4, 3
  %27 = inttoptr i64 %26 to i8*
  %28 = load i8, i8* %27
  %29 = add i64 %4, 4
  %30 = inttoptr i64 %29 to i8*
  %31 = load i8, i8* %30
  %32 = add i64 %4, 5
  %33 = inttoptr i64 %32 to i8*
  %34 = load i8, i8* %33
  %35 = add i64 %4, 6
  %36 = inttoptr i64 %35 to i8*
  %37 = load i8, i8* %36
  %38 = add i64 %4, 7
  %39 = inttoptr i64 %38 to i8*
  %40 = load i8, i8* %39
  %41 = add i64 %4, 8
  %42 = inttoptr i64 %41 to i8*
  %43 = load i8, i8* %42
  %44 = add i64 %4, 9
  %45 = inttoptr i64 %44 to i8*
  %46 = load i8, i8* %45
  %47 = add i64 %4, 10
  %48 = inttoptr i64 %47 to i8*
  %49 = load i8, i8* %48
  %50 = add i64 %4, 11
  %51 = inttoptr i64 %50 to i8*
  %52 = load i8, i8* %51
  %53 = add i64 %4, 12
  %54 = inttoptr i64 %53 to i8*
  %55 = load i8, i8* %54
  %56 = add i64 %4, 13
  %57 = inttoptr i64 %56 to i8*
  %58 = load i8, i8* %57
  %59 = add i64 %4, 14
  %60 = inttoptr i64 %59 to i8*
  %61 = load i8, i8* %60
  %62 = add i64 %4, 15
  %63 = inttoptr i64 %62 to i8*
  %64 = load i8, i8* %63
  %65 = insertelement <2 x i8> undef, i8 %40, i32 0
  %66 = insertelement <2 x i8> %65, i8 %64, i32 1
  %67 = zext <2 x i8> %66 to <2 x i64>
  %68 = shl nuw <2 x i64> %67, <i64 56, i64 56>
  %69 = insertelement <2 x i8> undef, i8 %37, i32 0
  %70 = insertelement <2 x i8> %69, i8 %61, i32 1
  %71 = zext <2 x i8> %70 to <2 x i64>
  %72 = shl nuw nsw <2 x i64> %71, <i64 48, i64 48>
  %73 = insertelement <2 x i8> undef, i8 %34, i32 0
  %74 = insertelement <2 x i8> %73, i8 %58, i32 1
  %75 = zext <2 x i8> %74 to <2 x i64>
  %76 = shl nuw nsw <2 x i64> %75, <i64 40, i64 40>
  %77 = insertelement <2 x i8> undef, i8 %31, i32 0
  %78 = insertelement <2 x i8> %77, i8 %55, i32 1
  %79 = zext <2 x i8> %78 to <2 x i64>
  %80 = shl nuw nsw <2 x i64> %79, <i64 32, i64 32>
  %81 = insertelement <2 x i8> undef, i8 %28, i32 0
  %82 = insertelement <2 x i8> %81, i8 %52, i32 1
  %83 = zext <2 x i8> %82 to <2 x i64>
  %84 = shl nuw nsw <2 x i64> %83, <i64 24, i64 24>
  %85 = insertelement <2 x i8> undef, i8 %25, i32 0
  %86 = insertelement <2 x i8> %85, i8 %49, i32 1
  %87 = zext <2 x i8> %86 to <2 x i64>
  %88 = shl nuw nsw <2 x i64> %87, <i64 16, i64 16>
  %89 = insertelement <2 x i8> undef, i8 %22, i32 0
  %90 = insertelement <2 x i8> %89, i8 %46, i32 1
  %91 = zext <2 x i8> %90 to <2 x i64>
  %92 = shl nuw nsw <2 x i64> %91, <i64 8, i64 8>
  %93 = insertelement <2 x i8> undef, i8 %19, i32 0
  %94 = insertelement <2 x i8> %93, i8 %43, i32 1
  %95 = zext <2 x i8> %94 to <2 x i64>
  %96 = or <2 x i64> %92, %95
  %97 = or <2 x i64> %96, %88
  %98 = or <2 x i64> %97, %84
  %99 = or <2 x i64> %98, %80
  %100 = or <2 x i64> %99, %76
  %101 = or <2 x i64> %100, %72
  %102 = or <2 x i64> %101, %68
  store <2 x i64> %102, <2 x i64>* %11, align 16
  %103 = bitcast <2 x i64>* %6 to i8*
  %104 = getelementptr inbounds <2 x i64>, <2 x i64>* %6, i64 0, i64 0
  %105 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %7, i64 0, i32 1
  %106 = bitcast <2 x i64>* %6 to [16 x i8]*
  %107 = extractelement <2 x i64> %16, i32 0
  %108 = trunc i64 %107 to i8
  %109 = icmp ult i8 %108, %19
  %110 = select i1 %109, i8 %108, i8 %19
  call void @llvm.lifetime.start(i64 16, i8* nonnull %103)
  store <2 x i64> zeroinitializer, <2 x i64>* %6, align 16
  %111 = bitcast <2 x i64>* %6 to i8*
  store i8 %110, i8* %111, align 16
  %112 = load i64, i64* %104, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %103)
  %113 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %10, i64 0, i32 0, i64 1
  %114 = load i8, i8* %113, align 1
  %115 = icmp ult i8 %114, %22
  %116 = select i1 %115, i8 %114, i8 %22
  call void @llvm.lifetime.start(i64 16, i8* nonnull %103)
  store i64 %112, i64* %104, align 16
  store i64 0, i64* %105, align 8
  %117 = getelementptr inbounds [16 x i8], [16 x i8]* %106, i64 0, i64 1
  store i8 %116, i8* %117, align 1
  %118 = load i64, i64* %104, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %103)
  %119 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %10, i64 0, i32 0, i64 2
  %120 = load i8, i8* %119, align 2
  %121 = icmp ult i8 %120, %25
  %122 = select i1 %121, i8 %120, i8 %25
  call void @llvm.lifetime.start(i64 16, i8* nonnull %103)
  store i64 %118, i64* %104, align 16
  store i64 0, i64* %105, align 8
  %123 = getelementptr inbounds [16 x i8], [16 x i8]* %106, i64 0, i64 2
  store i8 %122, i8* %123, align 2
  %124 = load i64, i64* %104, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %103)
  %125 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %10, i64 0, i32 0, i64 3
  %126 = load i8, i8* %125, align 1
  %127 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %13, i64 0, i32 0, i64 3
  %128 = load i8, i8* %127, align 1
  %129 = icmp ult i8 %126, %128
  %130 = select i1 %129, i8 %126, i8 %128
  call void @llvm.lifetime.start(i64 16, i8* nonnull %103)
  store i64 %124, i64* %104, align 16
  store i64 0, i64* %105, align 8
  %131 = getelementptr inbounds [16 x i8], [16 x i8]* %106, i64 0, i64 3
  store i8 %130, i8* %131, align 1
  %132 = load i64, i64* %104, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %103)
  %133 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %10, i64 0, i32 0, i64 4
  %134 = load i8, i8* %133, align 4
  %135 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %13, i64 0, i32 0, i64 4
  %136 = load i8, i8* %135, align 4
  %137 = icmp ult i8 %134, %136
  %138 = select i1 %137, i8 %134, i8 %136
  call void @llvm.lifetime.start(i64 16, i8* nonnull %103)
  store i64 %132, i64* %104, align 16
  store i64 0, i64* %105, align 8
  %139 = getelementptr inbounds [16 x i8], [16 x i8]* %106, i64 0, i64 4
  store i8 %138, i8* %139, align 4
  %140 = load i64, i64* %104, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %103)
  %141 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %10, i64 0, i32 0, i64 5
  %142 = load i8, i8* %141, align 1
  %143 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %13, i64 0, i32 0, i64 5
  %144 = load i8, i8* %143, align 1
  %145 = icmp ult i8 %142, %144
  %146 = select i1 %145, i8 %142, i8 %144
  call void @llvm.lifetime.start(i64 16, i8* nonnull %103)
  store i64 %140, i64* %104, align 16
  store i64 0, i64* %105, align 8
  %147 = getelementptr inbounds [16 x i8], [16 x i8]* %106, i64 0, i64 5
  store i8 %146, i8* %147, align 1
  %148 = load i64, i64* %104, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %103)
  %149 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %10, i64 0, i32 0, i64 6
  %150 = load i8, i8* %149, align 2
  %151 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %13, i64 0, i32 0, i64 6
  %152 = load i8, i8* %151, align 2
  %153 = icmp ult i8 %150, %152
  %154 = select i1 %153, i8 %150, i8 %152
  call void @llvm.lifetime.start(i64 16, i8* nonnull %103)
  store i64 %148, i64* %104, align 16
  store i64 0, i64* %105, align 8
  %155 = getelementptr inbounds [16 x i8], [16 x i8]* %106, i64 0, i64 6
  store i8 %154, i8* %155, align 2
  %156 = load i64, i64* %104, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %103)
  %157 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %10, i64 0, i32 0, i64 7
  %158 = load i8, i8* %157, align 1
  %159 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %13, i64 0, i32 0, i64 7
  %160 = load i8, i8* %159, align 1
  %161 = icmp ult i8 %158, %160
  %162 = select i1 %161, i8 %158, i8 %160
  call void @llvm.lifetime.start(i64 16, i8* nonnull %103)
  store i64 %156, i64* %104, align 16
  store i64 0, i64* %105, align 8
  %163 = getelementptr inbounds [16 x i8], [16 x i8]* %106, i64 0, i64 7
  store i8 %162, i8* %163, align 1
  %164 = load i64, i64* %104, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %103)
  %165 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %9, i64 0, i32 1
  %166 = bitcast i64* %165 to i8*
  %167 = load i8, i8* %166, align 8
  %168 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %12, i64 0, i32 1
  %169 = bitcast i64* %168 to i8*
  %170 = load i8, i8* %169, align 8
  %171 = icmp ult i8 %167, %170
  %172 = select i1 %171, i8 %167, i8 %170
  call void @llvm.lifetime.start(i64 16, i8* nonnull %103)
  store i64 %164, i64* %104, align 16
  store i64 0, i64* %105, align 8
  %173 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %7, i64 0, i32 1
  %174 = bitcast i64* %173 to i8*
  store i8 %172, i8* %174, align 8
  %175 = load i64, i64* %105, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %103)
  %176 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %10, i64 0, i32 0, i64 9
  %177 = load i8, i8* %176, align 1
  %178 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %13, i64 0, i32 0, i64 9
  %179 = load i8, i8* %178, align 1
  %180 = icmp ult i8 %177, %179
  %181 = select i1 %180, i8 %177, i8 %179
  call void @llvm.lifetime.start(i64 16, i8* nonnull %103)
  store i64 %164, i64* %104, align 16
  store i64 %175, i64* %105, align 8
  %182 = getelementptr inbounds [16 x i8], [16 x i8]* %106, i64 0, i64 9
  store i8 %181, i8* %182, align 1
  %183 = load i64, i64* %105, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %103)
  %184 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %10, i64 0, i32 0, i64 10
  %185 = load i8, i8* %184, align 2
  %186 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %13, i64 0, i32 0, i64 10
  %187 = load i8, i8* %186, align 2
  %188 = icmp ult i8 %185, %187
  %189 = select i1 %188, i8 %185, i8 %187
  call void @llvm.lifetime.start(i64 16, i8* nonnull %103)
  store i64 %164, i64* %104, align 16
  store i64 %183, i64* %105, align 8
  %190 = getelementptr inbounds [16 x i8], [16 x i8]* %106, i64 0, i64 10
  store i8 %189, i8* %190, align 2
  %191 = load i64, i64* %105, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %103)
  %192 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %10, i64 0, i32 0, i64 11
  %193 = load i8, i8* %192, align 1
  %194 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %13, i64 0, i32 0, i64 11
  %195 = load i8, i8* %194, align 1
  %196 = icmp ult i8 %193, %195
  %197 = select i1 %196, i8 %193, i8 %195
  call void @llvm.lifetime.start(i64 16, i8* nonnull %103)
  store i64 %164, i64* %104, align 16
  store i64 %191, i64* %105, align 8
  %198 = getelementptr inbounds [16 x i8], [16 x i8]* %106, i64 0, i64 11
  store i8 %197, i8* %198, align 1
  %199 = load i64, i64* %105, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %103)
  %200 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %10, i64 0, i32 0, i64 12
  %201 = load i8, i8* %200, align 4
  %202 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %13, i64 0, i32 0, i64 12
  %203 = load i8, i8* %202, align 4
  %204 = icmp ult i8 %201, %203
  %205 = select i1 %204, i8 %201, i8 %203
  call void @llvm.lifetime.start(i64 16, i8* nonnull %103)
  store i64 %164, i64* %104, align 16
  store i64 %199, i64* %105, align 8
  %206 = getelementptr inbounds [16 x i8], [16 x i8]* %106, i64 0, i64 12
  store i8 %205, i8* %206, align 4
  %207 = load i64, i64* %105, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %103)
  %208 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %10, i64 0, i32 0, i64 13
  %209 = load i8, i8* %208, align 1
  %210 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %13, i64 0, i32 0, i64 13
  %211 = load i8, i8* %210, align 1
  %212 = icmp ult i8 %209, %211
  %213 = select i1 %212, i8 %209, i8 %211
  call void @llvm.lifetime.start(i64 16, i8* nonnull %103)
  store i64 %164, i64* %104, align 16
  store i64 %207, i64* %105, align 8
  %214 = getelementptr inbounds [16 x i8], [16 x i8]* %106, i64 0, i64 13
  store i8 %213, i8* %214, align 1
  %215 = load i64, i64* %105, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %103)
  %216 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %10, i64 0, i32 0, i64 14
  %217 = load i8, i8* %216, align 2
  %218 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %13, i64 0, i32 0, i64 14
  %219 = load i8, i8* %218, align 2
  %220 = icmp ult i8 %217, %219
  %221 = select i1 %220, i8 %217, i8 %219
  call void @llvm.lifetime.start(i64 16, i8* nonnull %103)
  store i64 %164, i64* %104, align 16
  store i64 %215, i64* %105, align 8
  %222 = getelementptr inbounds [16 x i8], [16 x i8]* %106, i64 0, i64 14
  store i8 %221, i8* %222, align 2
  %223 = load i64, i64* %105, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %103)
  %224 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %10, i64 0, i32 0, i64 15
  %225 = load i8, i8* %224, align 1
  %226 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %13, i64 0, i32 0, i64 15
  %227 = load i8, i8* %226, align 1
  %228 = icmp ult i8 %225, %227
  %229 = select i1 %228, i8 %225, i8 %227
  call void @llvm.lifetime.start(i64 16, i8* nonnull %103)
  store i64 %164, i64* %104, align 16
  store i64 %223, i64* %105, align 8
  %230 = getelementptr inbounds [16 x i8], [16 x i8]* %106, i64 0, i64 15
  store i8 %229, i8* %230, align 1
  %231 = load i64, i64* %105, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %103)
  %232 = lshr i64 %164, 8
  %233 = lshr i64 %164, 16
  %234 = lshr i64 %164, 24
  %235 = lshr i64 %164, 32
  %236 = lshr i64 %164, 40
  %237 = lshr i64 %164, 48
  %238 = lshr i64 %164, 56
  %239 = trunc i64 %164 to i8
  %240 = trunc i64 %232 to i8
  %241 = trunc i64 %233 to i8
  %242 = trunc i64 %234 to i8
  %243 = trunc i64 %235 to i8
  %244 = trunc i64 %236 to i8
  %245 = trunc i64 %237 to i8
  %246 = trunc i64 %238 to i8
  store i8 %239, i8* %2, align 1
  %247 = getelementptr inbounds i8, i8* %2, i64 1
  store i8 %240, i8* %247, align 1
  %248 = getelementptr inbounds i8, i8* %2, i64 2
  store i8 %241, i8* %248, align 1
  %249 = getelementptr inbounds i8, i8* %2, i64 3
  store i8 %242, i8* %249, align 1
  %250 = getelementptr inbounds i8, i8* %2, i64 4
  store i8 %243, i8* %250, align 1
  %251 = getelementptr inbounds i8, i8* %2, i64 5
  store i8 %244, i8* %251, align 1
  %252 = getelementptr inbounds i8, i8* %2, i64 6
  store i8 %245, i8* %252, align 1
  %253 = getelementptr inbounds i8, i8* %2, i64 7
  store i8 %246, i8* %253, align 1
  %254 = trunc i64 %231 to i8
  %255 = getelementptr inbounds i8, i8* %2, i64 8
  store i8 %254, i8* %255, align 1
  %256 = lshr i64 %231, 8
  %257 = trunc i64 %256 to i8
  %258 = getelementptr inbounds i8, i8* %2, i64 9
  store i8 %257, i8* %258, align 1
  %259 = lshr i64 %231, 16
  %260 = trunc i64 %259 to i8
  %261 = getelementptr inbounds i8, i8* %2, i64 10
  store i8 %260, i8* %261, align 1
  %262 = lshr i64 %231, 24
  %263 = trunc i64 %262 to i8
  %264 = getelementptr inbounds i8, i8* %2, i64 11
  store i8 %263, i8* %264, align 1
  %265 = lshr i64 %231, 32
  %266 = trunc i64 %265 to i8
  %267 = getelementptr inbounds i8, i8* %2, i64 12
  store i8 %266, i8* %267, align 1
  %268 = lshr i64 %231, 40
  %269 = trunc i64 %268 to i8
  %270 = getelementptr inbounds i8, i8* %2, i64 13
  store i8 %269, i8* %270, align 1
  %271 = lshr i64 %231, 48
  %272 = trunc i64 %271 to i8
  %273 = getelementptr inbounds i8, i8* %2, i64 14
  store i8 %272, i8* %273, align 1
  %274 = lshr i64 %231, 56
  %275 = trunc i64 %274 to i8
  %276 = getelementptr inbounds i8, i8* %2, i64 15
  store i8 %275, i8* %276, align 1
  call void @llvm.lifetime.end(i64 16, i8* nonnull %17) 
  call void @llvm.lifetime.end(i64 16, i8* nonnull %14) 
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L8PMULHRSWI4RVnWI7vec64_tE3RVnIS2_ES5_EEP6MemoryS7_R5StateT_T0_T1_(%struct.Memory* readnone returned, %struct.State* nocapture readnone dereferenceable(3376), i64* nocapture, i64, i64)  {
  %6 = alloca i64, align 8
  %7 = bitcast i64* %6 to i8*
  %8 = bitcast i64* %6 to [4 x i16]*
  %9 = shl i64 %3, 48
  %10 = ashr exact i64 %9, 48
  %11 = shl i64 %4, 48
  %12 = ashr exact i64 %11, 48
  %13 = mul nsw i64 %12, %10
  %14 = lshr i64 %13, 14
  %15 = add nuw nsw i64 %14, 1
  %16 = lshr i64 %15, 1
  %17 = trunc i64 %16 to i16
  call void @llvm.lifetime.start(i64 8, i8* nonnull %7)
  store i64 0, i64* %6, align 8
  %18 = bitcast i64* %6 to i16*
  store i16 %17, i16* %18, align 8
  %19 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %7)
  %20 = shl i64 %3, 32
  %21 = ashr i64 %20, 48
  %22 = shl i64 %4, 32
  %23 = ashr i64 %22, 48
  %24 = mul nsw i64 %23, %21
  %25 = lshr i64 %24, 14
  %26 = add nuw nsw i64 %25, 1
  %27 = lshr i64 %26, 1
  %28 = trunc i64 %27 to i16
  call void @llvm.lifetime.start(i64 8, i8* nonnull %7)
  store i64 %19, i64* %6, align 8
  %29 = getelementptr inbounds [4 x i16], [4 x i16]* %8, i64 0, i64 1
  store i16 %28, i16* %29, align 2
  %30 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %7)
  %31 = shl i64 %3, 16
  %32 = ashr i64 %31, 48
  %33 = shl i64 %4, 16
  %34 = ashr i64 %33, 48
  %35 = mul nsw i64 %34, %32
  %36 = lshr i64 %35, 14
  %37 = add nuw nsw i64 %36, 1
  %38 = lshr i64 %37, 1
  %39 = trunc i64 %38 to i16
  call void @llvm.lifetime.start(i64 8, i8* nonnull %7)
  store i64 %30, i64* %6, align 8
  %40 = getelementptr inbounds [4 x i16], [4 x i16]* %8, i64 0, i64 2
  store i16 %39, i16* %40, align 4
  %41 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %7)
  %42 = ashr i64 %3, 48
  %43 = ashr i64 %4, 48
  %44 = mul nsw i64 %43, %42
  %45 = lshr i64 %44, 14
  %46 = add nuw nsw i64 %45, 1
  %47 = lshr i64 %46, 1
  %48 = trunc i64 %47 to i16
  call void @llvm.lifetime.start(i64 8, i8* nonnull %7)
  store i64 %41, i64* %6, align 8
  %49 = getelementptr inbounds [4 x i16], [4 x i16]* %8, i64 0, i64 3
  store i16 %48, i16* %49, align 2
  %50 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %7)
  %51 = lshr i64 %50, 16
  %52 = lshr i64 %50, 32
  %53 = lshr i64 %50, 48
  %54 = trunc i64 %50 to i16
  %55 = trunc i64 %51 to i16
  %56 = trunc i64 %52 to i16
  %57 = trunc i64 %53 to i16
  %58 = bitcast i64* %2 to [4 x i16]*
  %59 = bitcast i64* %2 to i16*
  store i16 %54, i16* %59, align 1
  %60 = getelementptr inbounds [4 x i16], [4 x i16]* %58, i64 0, i64 1
  store i16 %55, i16* %60, align 1
  %61 = getelementptr inbounds [4 x i16], [4 x i16]* %58, i64 0, i64 2
  store i16 %56, i16* %61, align 1
  %62 = getelementptr inbounds [4 x i16], [4 x i16]* %58, i64 0, i64 3
  store i16 %57, i16* %62, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L8PMULHRSWI4RVnWI7vec64_tE3RVnIS2_E3MVnIS2_EEEP6MemoryS9_R5StateT_T0_T1_(%struct.Memory* returned, %struct.State* nocapture readnone dereferenceable(3376), i64* nocapture, i64, i64)  {
  %6 = alloca i64, align 8
  %7 = alloca i64, align 8
  %8 = bitcast i64* %7 to %struct.int16v4_t*
  %9 = bitcast i64* %7 to i8*
  call void @llvm.lifetime.start(i64 8, i8* nonnull %9) 
  store i64 %3, i64* %7, align 8
  %10 = inttoptr i64 %4 to i16*
  %11 = load i16, i16* %10
  %12 = add i64 %4, 2
  %13 = inttoptr i64 %12 to i16*
  %14 = load i16, i16* %13
  %15 = add i64 %4, 4
  %16 = inttoptr i64 %15 to i16*
  %17 = load i16, i16* %16
  %18 = add i64 %4, 6
  %19 = inttoptr i64 %18 to i16*
  %20 = load i16, i16* %19
  %21 = bitcast i64* %6 to i8*
  %22 = bitcast i64* %6 to [4 x i16]*
  %23 = shl i64 %3, 48
  %24 = ashr exact i64 %23, 48
  %25 = sext i16 %11 to i64
  %26 = mul nsw i64 %25, %24
  %27 = lshr i64 %26, 14
  %28 = add nuw nsw i64 %27, 1
  %29 = lshr i64 %28, 1
  %30 = trunc i64 %29 to i16
  call void @llvm.lifetime.start(i64 8, i8* nonnull %21)
  store i64 0, i64* %6, align 8
  %31 = bitcast i64* %6 to i16*
  store i16 %30, i16* %31, align 8
  %32 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %21)
  %33 = shl i64 %3, 32
  %34 = ashr i64 %33, 48
  %35 = sext i16 %14 to i64
  %36 = mul nsw i64 %35, %34
  %37 = lshr i64 %36, 14
  %38 = add nuw nsw i64 %37, 1
  %39 = lshr i64 %38, 1
  %40 = trunc i64 %39 to i16
  call void @llvm.lifetime.start(i64 8, i8* nonnull %21)
  store i64 %32, i64* %6, align 8
  %41 = getelementptr inbounds [4 x i16], [4 x i16]* %22, i64 0, i64 1
  store i16 %40, i16* %41, align 2
  %42 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %21)
  %43 = shl i64 %3, 16
  %44 = ashr i64 %43, 48
  %45 = sext i16 %17 to i64
  %46 = mul nsw i64 %45, %44
  %47 = lshr i64 %46, 14
  %48 = add nuw nsw i64 %47, 1
  %49 = lshr i64 %48, 1
  %50 = trunc i64 %49 to i16
  call void @llvm.lifetime.start(i64 8, i8* nonnull %21)
  store i64 %42, i64* %6, align 8
  %51 = getelementptr inbounds [4 x i16], [4 x i16]* %22, i64 0, i64 2
  store i16 %50, i16* %51, align 4
  %52 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %21)
  %53 = getelementptr inbounds %struct.int16v4_t, %struct.int16v4_t* %8, i64 0, i32 0, i64 3
  %54 = load i16, i16* %53, align 2
  %55 = sext i16 %54 to i64
  %56 = sext i16 %20 to i64
  %57 = mul nsw i64 %56, %55
  %58 = lshr i64 %57, 14
  %59 = add nuw nsw i64 %58, 1
  %60 = lshr i64 %59, 1
  %61 = trunc i64 %60 to i16
  call void @llvm.lifetime.start(i64 8, i8* nonnull %21)
  store i64 %52, i64* %6, align 8
  %62 = getelementptr inbounds [4 x i16], [4 x i16]* %22, i64 0, i64 3
  store i16 %61, i16* %62, align 2
  %63 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %21)
  %64 = lshr i64 %63, 16
  %65 = lshr i64 %63, 32
  %66 = lshr i64 %63, 48
  %67 = trunc i64 %63 to i16
  %68 = trunc i64 %64 to i16
  %69 = trunc i64 %65 to i16
  %70 = trunc i64 %66 to i16
  %71 = bitcast i64* %2 to [4 x i16]*
  %72 = bitcast i64* %2 to i16*
  store i16 %67, i16* %72, align 1
  %73 = getelementptr inbounds [4 x i16], [4 x i16]* %71, i64 0, i64 1
  store i16 %68, i16* %73, align 1
  %74 = getelementptr inbounds [4 x i16], [4 x i16]* %71, i64 0, i64 2
  store i16 %69, i16* %74, align 1
  %75 = getelementptr inbounds [4 x i16], [4 x i16]* %71, i64 0, i64 3
  store i16 %70, i16* %75, align 1
  call void @llvm.lifetime.end(i64 8, i8* nonnull %9) 
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L8PMULHRSWI3VnWI8vec128_tE2VnIS2_ES5_EEP6MemoryS7_R5StateT_T0_T1_(%struct.Memory* readnone returned, %struct.State* nocapture readnone dereferenceable(3376), i8* nocapture, i8* nocapture readonly, i8* nocapture readonly)  {
  %6 = alloca <2 x i64>, align 16
  %7 = bitcast <2 x i64>* %6 to { i64, i64 }*
  %8 = alloca <2 x i64>, align 16
  %9 = bitcast <2 x i64>* %8 to { i64, i64 }*
  %10 = bitcast <2 x i64>* %8 to %struct.uint16v8_t*
  %11 = alloca <2 x i64>, align 16
  %12 = bitcast <2 x i64>* %11 to { i64, i64 }*
  %13 = bitcast <2 x i64>* %11 to %struct.uint16v8_t*
  %14 = bitcast <2 x i64>* %8 to i8*
  call void @llvm.lifetime.start(i64 16, i8* nonnull %14) 
  %15 = bitcast i8* %3 to <2 x i64>*
  %16 = load <2 x i64>, <2 x i64>* %15, align 1
  store <2 x i64> %16, <2 x i64>* %8, align 16
  %17 = bitcast <2 x i64>* %11 to i8*
  call void @llvm.lifetime.start(i64 16, i8* nonnull %17) 
  %18 = bitcast i8* %4 to <2 x i64>*
  %19 = load <2 x i64>, <2 x i64>* %18, align 1
  store <2 x i64> %19, <2 x i64>* %11, align 16
  %20 = bitcast <2 x i64>* %6 to i8*
  %21 = getelementptr inbounds <2 x i64>, <2 x i64>* %6, i64 0, i64 0
  %22 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %7, i64 0, i32 1
  %23 = bitcast <2 x i64>* %6 to [8 x i16]*
  %24 = extractelement <2 x i64> %16, i32 0
  %25 = shl i64 %24, 48
  %26 = ashr exact i64 %25, 48
  %27 = extractelement <2 x i64> %19, i32 0
  %28 = shl i64 %27, 48
  %29 = ashr exact i64 %28, 48
  %30 = mul nsw i64 %29, %26
  %31 = lshr i64 %30, 14
  %32 = add nuw nsw i64 %31, 1
  %33 = lshr i64 %32, 1
  %34 = trunc i64 %33 to i16
  call void @llvm.lifetime.start(i64 16, i8* nonnull %20)
  store <2 x i64> zeroinitializer, <2 x i64>* %6, align 16
  %35 = bitcast <2 x i64>* %6 to i16*
  store i16 %34, i16* %35, align 16
  %36 = load i64, i64* %21, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %20)
  %37 = shl i64 %24, 32
  %38 = ashr i64 %37, 48
  %39 = shl i64 %27, 32
  %40 = ashr i64 %39, 48
  %41 = mul nsw i64 %40, %38
  %42 = lshr i64 %41, 14
  %43 = add nuw nsw i64 %42, 1
  %44 = lshr i64 %43, 1
  %45 = trunc i64 %44 to i16
  call void @llvm.lifetime.start(i64 16, i8* nonnull %20)
  store i64 %36, i64* %21, align 16
  store i64 0, i64* %22, align 8
  %46 = getelementptr inbounds [8 x i16], [8 x i16]* %23, i64 0, i64 1
  store i16 %45, i16* %46, align 2
  %47 = load i64, i64* %21, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %20)
  %48 = shl i64 %24, 16
  %49 = ashr i64 %48, 48
  %50 = shl i64 %27, 16
  %51 = ashr i64 %50, 48
  %52 = mul nsw i64 %51, %49
  %53 = lshr i64 %52, 14
  %54 = add nuw nsw i64 %53, 1
  %55 = lshr i64 %54, 1
  %56 = trunc i64 %55 to i16
  call void @llvm.lifetime.start(i64 16, i8* nonnull %20)
  store i64 %47, i64* %21, align 16
  store i64 0, i64* %22, align 8
  %57 = getelementptr inbounds [8 x i16], [8 x i16]* %23, i64 0, i64 2
  store i16 %56, i16* %57, align 4
  %58 = load i64, i64* %21, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %20)
  %59 = getelementptr inbounds %struct.uint16v8_t, %struct.uint16v8_t* %10, i64 0, i32 0, i64 3
  %60 = load i16, i16* %59, align 2
  %61 = sext i16 %60 to i64
  %62 = ashr i64 %27, 48
  %63 = mul nsw i64 %62, %61
  %64 = lshr i64 %63, 14
  %65 = add nuw nsw i64 %64, 1
  %66 = lshr i64 %65, 1
  %67 = trunc i64 %66 to i16
  call void @llvm.lifetime.start(i64 16, i8* nonnull %20)
  store i64 %58, i64* %21, align 16
  store i64 0, i64* %22, align 8
  %68 = getelementptr inbounds [8 x i16], [8 x i16]* %23, i64 0, i64 3
  store i16 %67, i16* %68, align 2
  %69 = load i64, i64* %21, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %20)
  %70 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %9, i64 0, i32 1
  %71 = bitcast i64* %70 to i16*
  %72 = load i16, i16* %71, align 8
  %73 = sext i16 %72 to i64
  %74 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %12, i64 0, i32 1
  %75 = bitcast i64* %74 to i16*
  %76 = load i16, i16* %75, align 8
  %77 = sext i16 %76 to i64
  %78 = mul nsw i64 %77, %73
  %79 = lshr i64 %78, 14
  %80 = add nuw nsw i64 %79, 1
  %81 = lshr i64 %80, 1
  %82 = trunc i64 %81 to i16
  call void @llvm.lifetime.start(i64 16, i8* nonnull %20)
  store i64 %69, i64* %21, align 16
  store i64 0, i64* %22, align 8
  %83 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %7, i64 0, i32 1
  %84 = bitcast i64* %83 to i16*
  store i16 %82, i16* %84, align 8
  %85 = load i64, i64* %22, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %20)
  %86 = getelementptr inbounds %struct.uint16v8_t, %struct.uint16v8_t* %10, i64 0, i32 0, i64 5
  %87 = load i16, i16* %86, align 2
  %88 = sext i16 %87 to i64
  %89 = getelementptr inbounds %struct.uint16v8_t, %struct.uint16v8_t* %13, i64 0, i32 0, i64 5
  %90 = load i16, i16* %89, align 2
  %91 = sext i16 %90 to i64
  %92 = mul nsw i64 %91, %88
  %93 = lshr i64 %92, 14
  %94 = add nuw nsw i64 %93, 1
  %95 = lshr i64 %94, 1
  %96 = trunc i64 %95 to i16
  call void @llvm.lifetime.start(i64 16, i8* nonnull %20)
  store i64 %69, i64* %21, align 16
  store i64 %85, i64* %22, align 8
  %97 = getelementptr inbounds [8 x i16], [8 x i16]* %23, i64 0, i64 5
  store i16 %96, i16* %97, align 2
  %98 = load i64, i64* %22, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %20)
  %99 = getelementptr inbounds %struct.uint16v8_t, %struct.uint16v8_t* %10, i64 0, i32 0, i64 6
  %100 = load i16, i16* %99, align 4
  %101 = sext i16 %100 to i64
  %102 = getelementptr inbounds %struct.uint16v8_t, %struct.uint16v8_t* %13, i64 0, i32 0, i64 6
  %103 = load i16, i16* %102, align 4
  %104 = sext i16 %103 to i64
  %105 = mul nsw i64 %104, %101
  %106 = lshr i64 %105, 14
  %107 = add nuw nsw i64 %106, 1
  %108 = lshr i64 %107, 1
  %109 = trunc i64 %108 to i16
  call void @llvm.lifetime.start(i64 16, i8* nonnull %20)
  store i64 %69, i64* %21, align 16
  store i64 %98, i64* %22, align 8
  %110 = getelementptr inbounds [8 x i16], [8 x i16]* %23, i64 0, i64 6
  store i16 %109, i16* %110, align 4
  %111 = load i64, i64* %22, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %20)
  %112 = getelementptr inbounds %struct.uint16v8_t, %struct.uint16v8_t* %10, i64 0, i32 0, i64 7
  %113 = load i16, i16* %112, align 2
  %114 = sext i16 %113 to i64
  %115 = getelementptr inbounds %struct.uint16v8_t, %struct.uint16v8_t* %13, i64 0, i32 0, i64 7
  %116 = load i16, i16* %115, align 2
  %117 = sext i16 %116 to i64
  %118 = mul nsw i64 %117, %114
  %119 = lshr i64 %118, 14
  %120 = add nuw nsw i64 %119, 1
  %121 = lshr i64 %120, 1
  %122 = trunc i64 %121 to i16
  call void @llvm.lifetime.start(i64 16, i8* nonnull %20)
  store i64 %69, i64* %21, align 16
  store i64 %111, i64* %22, align 8
  %123 = getelementptr inbounds [8 x i16], [8 x i16]* %23, i64 0, i64 7
  store i16 %122, i16* %123, align 2
  %124 = load i64, i64* %22, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %20)
  %125 = lshr i64 %69, 16
  %126 = lshr i64 %69, 32
  %127 = lshr i64 %69, 48
  %128 = trunc i64 %69 to i16
  %129 = trunc i64 %125 to i16
  %130 = trunc i64 %126 to i16
  %131 = trunc i64 %127 to i16
  %132 = bitcast i8* %2 to i16*
  store i16 %128, i16* %132, align 1
  %133 = getelementptr inbounds i8, i8* %2, i64 2
  %134 = bitcast i8* %133 to i16*
  store i16 %129, i16* %134, align 1
  %135 = getelementptr inbounds i8, i8* %2, i64 4
  %136 = bitcast i8* %135 to i16*
  store i16 %130, i16* %136, align 1
  %137 = getelementptr inbounds i8, i8* %2, i64 6
  %138 = bitcast i8* %137 to i16*
  store i16 %131, i16* %138, align 1
  %139 = trunc i64 %124 to i16
  %140 = getelementptr inbounds i8, i8* %2, i64 8
  %141 = bitcast i8* %140 to i16*
  store i16 %139, i16* %141, align 1
  %142 = lshr i64 %124, 16
  %143 = trunc i64 %142 to i16
  %144 = getelementptr inbounds i8, i8* %2, i64 10
  %145 = bitcast i8* %144 to i16*
  store i16 %143, i16* %145, align 1
  %146 = lshr i64 %124, 32
  %147 = trunc i64 %146 to i16
  %148 = getelementptr inbounds i8, i8* %2, i64 12
  %149 = bitcast i8* %148 to i16*
  store i16 %147, i16* %149, align 1
  %150 = lshr i64 %124, 48
  %151 = trunc i64 %150 to i16
  %152 = getelementptr inbounds i8, i8* %2, i64 14
  %153 = bitcast i8* %152 to i16*
  store i16 %151, i16* %153, align 1
  call void @llvm.lifetime.end(i64 16, i8* nonnull %17) 
  call void @llvm.lifetime.end(i64 16, i8* nonnull %14) 
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L8PMULHRSWI3VnWI8vec128_tE2VnIS2_E3MVnIS2_EEEP6MemoryS9_R5StateT_T0_T1_(%struct.Memory* returned, %struct.State* nocapture readnone dereferenceable(3376), i8* nocapture, i8* nocapture readonly, i64)  {
  %6 = alloca <2 x i64>, align 16
  %7 = bitcast <2 x i64>* %6 to { i64, i64 }*
  %8 = alloca <2 x i64>, align 16
  %9 = bitcast <2 x i64>* %8 to { i64, i64 }*
  %10 = bitcast <2 x i64>* %8 to %struct.uint16v8_t*
  %11 = alloca <2 x i64>, align 16
  %12 = bitcast <2 x i64>* %11 to { i64, i64 }*
  %13 = bitcast <2 x i64>* %11 to %struct.uint16v8_t*
  %14 = bitcast <2 x i64>* %8 to i8*
  call void @llvm.lifetime.start(i64 16, i8* nonnull %14) 
  %15 = bitcast i8* %3 to <2 x i64>*
  %16 = load <2 x i64>, <2 x i64>* %15, align 1
  store <2 x i64> %16, <2 x i64>* %8, align 16
  %17 = bitcast <2 x i64>* %11 to i8*
  call void @llvm.lifetime.start(i64 16, i8* nonnull %17) 
  %18 = inttoptr i64 %4 to i16*
  %19 = load i16, i16* %18
  %20 = add i64 %4, 2
  %21 = inttoptr i64 %20 to i16*
  %22 = load i16, i16* %21
  %23 = add i64 %4, 4
  %24 = inttoptr i64 %23 to i16*
  %25 = load i16, i16* %24
  %26 = add i64 %4, 6
  %27 = inttoptr i64 %26 to i16*
  %28 = load i16, i16* %27
  %29 = add i64 %4, 8
  %30 = inttoptr i64 %29 to i16*
  %31 = load i16, i16* %30
  %32 = add i64 %4, 10
  %33 = inttoptr i64 %32 to i16*
  %34 = load i16, i16* %33
  %35 = add i64 %4, 12
  %36 = inttoptr i64 %35 to i16*
  %37 = load i16, i16* %36
  %38 = add i64 %4, 14
  %39 = inttoptr i64 %38 to i16*
  %40 = load i16, i16* %39
  %41 = insertelement <2 x i16> undef, i16 %28, i32 0
  %42 = insertelement <2 x i16> %41, i16 %40, i32 1
  %43 = zext <2 x i16> %42 to <2 x i64>
  %44 = shl nuw <2 x i64> %43, <i64 48, i64 48>
  %45 = insertelement <2 x i16> undef, i16 %25, i32 0
  %46 = insertelement <2 x i16> %45, i16 %37, i32 1
  %47 = zext <2 x i16> %46 to <2 x i64>
  %48 = shl nuw nsw <2 x i64> %47, <i64 32, i64 32>
  %49 = insertelement <2 x i16> undef, i16 %22, i32 0
  %50 = insertelement <2 x i16> %49, i16 %34, i32 1
  %51 = zext <2 x i16> %50 to <2 x i64>
  %52 = shl nuw nsw <2 x i64> %51, <i64 16, i64 16>
  %53 = insertelement <2 x i16> undef, i16 %19, i32 0
  %54 = insertelement <2 x i16> %53, i16 %31, i32 1
  %55 = zext <2 x i16> %54 to <2 x i64>
  %56 = or <2 x i64> %52, %55
  %57 = or <2 x i64> %56, %48
  %58 = or <2 x i64> %57, %44
  store <2 x i64> %58, <2 x i64>* %11, align 16
  %59 = bitcast <2 x i64>* %6 to i8*
  %60 = getelementptr inbounds <2 x i64>, <2 x i64>* %6, i64 0, i64 0
  %61 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %7, i64 0, i32 1
  %62 = bitcast <2 x i64>* %6 to [8 x i16]*
  %63 = extractelement <2 x i64> %16, i32 0
  %64 = shl i64 %63, 48
  %65 = ashr exact i64 %64, 48
  %66 = sext i16 %19 to i64
  %67 = mul nsw i64 %66, %65
  %68 = lshr i64 %67, 14
  %69 = add nuw nsw i64 %68, 1
  %70 = lshr i64 %69, 1
  %71 = trunc i64 %70 to i16
  call void @llvm.lifetime.start(i64 16, i8* nonnull %59)
  store <2 x i64> zeroinitializer, <2 x i64>* %6, align 16
  %72 = bitcast <2 x i64>* %6 to i16*
  store i16 %71, i16* %72, align 16
  %73 = load i64, i64* %60, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %59)
  %74 = shl i64 %63, 32
  %75 = ashr i64 %74, 48
  %76 = sext i16 %22 to i64
  %77 = mul nsw i64 %76, %75
  %78 = lshr i64 %77, 14
  %79 = add nuw nsw i64 %78, 1
  %80 = lshr i64 %79, 1
  %81 = trunc i64 %80 to i16
  call void @llvm.lifetime.start(i64 16, i8* nonnull %59)
  store i64 %73, i64* %60, align 16
  store i64 0, i64* %61, align 8
  %82 = getelementptr inbounds [8 x i16], [8 x i16]* %62, i64 0, i64 1
  store i16 %81, i16* %82, align 2
  %83 = load i64, i64* %60, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %59)
  %84 = getelementptr inbounds %struct.uint16v8_t, %struct.uint16v8_t* %10, i64 0, i32 0, i64 2
  %85 = load i16, i16* %84, align 4
  %86 = sext i16 %85 to i64
  %87 = sext i16 %25 to i64
  %88 = mul nsw i64 %87, %86
  %89 = lshr i64 %88, 14
  %90 = add nuw nsw i64 %89, 1
  %91 = lshr i64 %90, 1
  %92 = trunc i64 %91 to i16
  call void @llvm.lifetime.start(i64 16, i8* nonnull %59)
  store i64 %83, i64* %60, align 16
  store i64 0, i64* %61, align 8
  %93 = getelementptr inbounds [8 x i16], [8 x i16]* %62, i64 0, i64 2
  store i16 %92, i16* %93, align 4
  %94 = load i64, i64* %60, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %59)
  %95 = getelementptr inbounds %struct.uint16v8_t, %struct.uint16v8_t* %10, i64 0, i32 0, i64 3
  %96 = load i16, i16* %95, align 2
  %97 = sext i16 %96 to i64
  %98 = sext i16 %28 to i64
  %99 = mul nsw i64 %98, %97
  %100 = lshr i64 %99, 14
  %101 = add nuw nsw i64 %100, 1
  %102 = lshr i64 %101, 1
  %103 = trunc i64 %102 to i16
  call void @llvm.lifetime.start(i64 16, i8* nonnull %59)
  store i64 %94, i64* %60, align 16
  store i64 0, i64* %61, align 8
  %104 = getelementptr inbounds [8 x i16], [8 x i16]* %62, i64 0, i64 3
  store i16 %103, i16* %104, align 2
  %105 = load i64, i64* %60, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %59)
  %106 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %9, i64 0, i32 1
  %107 = bitcast i64* %106 to i16*
  %108 = load i16, i16* %107, align 8
  %109 = sext i16 %108 to i64
  %110 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %12, i64 0, i32 1
  %111 = bitcast i64* %110 to i16*
  %112 = load i16, i16* %111, align 8
  %113 = sext i16 %112 to i64
  %114 = mul nsw i64 %113, %109
  %115 = lshr i64 %114, 14
  %116 = add nuw nsw i64 %115, 1
  %117 = lshr i64 %116, 1
  %118 = trunc i64 %117 to i16
  call void @llvm.lifetime.start(i64 16, i8* nonnull %59)
  store i64 %105, i64* %60, align 16
  store i64 0, i64* %61, align 8
  %119 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %7, i64 0, i32 1
  %120 = bitcast i64* %119 to i16*
  store i16 %118, i16* %120, align 8
  %121 = load i64, i64* %61, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %59)
  %122 = getelementptr inbounds %struct.uint16v8_t, %struct.uint16v8_t* %10, i64 0, i32 0, i64 5
  %123 = load i16, i16* %122, align 2
  %124 = sext i16 %123 to i64
  %125 = getelementptr inbounds %struct.uint16v8_t, %struct.uint16v8_t* %13, i64 0, i32 0, i64 5
  %126 = load i16, i16* %125, align 2
  %127 = sext i16 %126 to i64
  %128 = mul nsw i64 %127, %124
  %129 = lshr i64 %128, 14
  %130 = add nuw nsw i64 %129, 1
  %131 = lshr i64 %130, 1
  %132 = trunc i64 %131 to i16
  call void @llvm.lifetime.start(i64 16, i8* nonnull %59)
  store i64 %105, i64* %60, align 16
  store i64 %121, i64* %61, align 8
  %133 = getelementptr inbounds [8 x i16], [8 x i16]* %62, i64 0, i64 5
  store i16 %132, i16* %133, align 2
  %134 = load i64, i64* %61, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %59)
  %135 = getelementptr inbounds %struct.uint16v8_t, %struct.uint16v8_t* %10, i64 0, i32 0, i64 6
  %136 = load i16, i16* %135, align 4
  %137 = sext i16 %136 to i64
  %138 = getelementptr inbounds %struct.uint16v8_t, %struct.uint16v8_t* %13, i64 0, i32 0, i64 6
  %139 = load i16, i16* %138, align 4
  %140 = sext i16 %139 to i64
  %141 = mul nsw i64 %140, %137
  %142 = lshr i64 %141, 14
  %143 = add nuw nsw i64 %142, 1
  %144 = lshr i64 %143, 1
  %145 = trunc i64 %144 to i16
  call void @llvm.lifetime.start(i64 16, i8* nonnull %59)
  store i64 %105, i64* %60, align 16
  store i64 %134, i64* %61, align 8
  %146 = getelementptr inbounds [8 x i16], [8 x i16]* %62, i64 0, i64 6
  store i16 %145, i16* %146, align 4
  %147 = load i64, i64* %61, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %59)
  %148 = getelementptr inbounds %struct.uint16v8_t, %struct.uint16v8_t* %10, i64 0, i32 0, i64 7
  %149 = load i16, i16* %148, align 2
  %150 = sext i16 %149 to i64
  %151 = getelementptr inbounds %struct.uint16v8_t, %struct.uint16v8_t* %13, i64 0, i32 0, i64 7
  %152 = load i16, i16* %151, align 2
  %153 = sext i16 %152 to i64
  %154 = mul nsw i64 %153, %150
  %155 = lshr i64 %154, 14
  %156 = add nuw nsw i64 %155, 1
  %157 = lshr i64 %156, 1
  %158 = trunc i64 %157 to i16
  call void @llvm.lifetime.start(i64 16, i8* nonnull %59)
  store i64 %105, i64* %60, align 16
  store i64 %147, i64* %61, align 8
  %159 = getelementptr inbounds [8 x i16], [8 x i16]* %62, i64 0, i64 7
  store i16 %158, i16* %159, align 2
  %160 = load i64, i64* %61, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %59)
  %161 = lshr i64 %105, 16
  %162 = lshr i64 %105, 32
  %163 = lshr i64 %105, 48
  %164 = trunc i64 %105 to i16
  %165 = trunc i64 %161 to i16
  %166 = trunc i64 %162 to i16
  %167 = trunc i64 %163 to i16
  %168 = bitcast i8* %2 to i16*
  store i16 %164, i16* %168, align 1
  %169 = getelementptr inbounds i8, i8* %2, i64 2
  %170 = bitcast i8* %169 to i16*
  store i16 %165, i16* %170, align 1
  %171 = getelementptr inbounds i8, i8* %2, i64 4
  %172 = bitcast i8* %171 to i16*
  store i16 %166, i16* %172, align 1
  %173 = getelementptr inbounds i8, i8* %2, i64 6
  %174 = bitcast i8* %173 to i16*
  store i16 %167, i16* %174, align 1
  %175 = trunc i64 %160 to i16
  %176 = getelementptr inbounds i8, i8* %2, i64 8
  %177 = bitcast i8* %176 to i16*
  store i16 %175, i16* %177, align 1
  %178 = lshr i64 %160, 16
  %179 = trunc i64 %178 to i16
  %180 = getelementptr inbounds i8, i8* %2, i64 10
  %181 = bitcast i8* %180 to i16*
  store i16 %179, i16* %181, align 1
  %182 = lshr i64 %160, 32
  %183 = trunc i64 %182 to i16
  %184 = getelementptr inbounds i8, i8* %2, i64 12
  %185 = bitcast i8* %184 to i16*
  store i16 %183, i16* %185, align 1
  %186 = lshr i64 %160, 48
  %187 = trunc i64 %186 to i16
  %188 = getelementptr inbounds i8, i8* %2, i64 14
  %189 = bitcast i8* %188 to i16*
  store i16 %187, i16* %189, align 1
  call void @llvm.lifetime.end(i64 16, i8* nonnull %17) 
  call void @llvm.lifetime.end(i64 16, i8* nonnull %14) 
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L7PMADDWDI4RVnWI7vec64_tE3RVnIS2_ES5_EEP6MemoryS7_R5StateT_T0_T1_(%struct.Memory* readnone returned, %struct.State* nocapture readnone dereferenceable(3376), i64* nocapture, i64, i64)  {
  %6 = alloca i64, align 8
  %7 = bitcast i64* %6 to i8*
  %8 = bitcast i64* %6 to [2 x i32]*
  %9 = trunc i64 %3 to i32
  %10 = shl i32 %9, 16
  %11 = ashr exact i32 %10, 16
  %12 = trunc i64 %4 to i32
  %13 = shl i32 %12, 16
  %14 = ashr exact i32 %13, 16
  %15 = mul nsw i32 %14, %11
  %16 = trunc i64 %3 to i32
  %17 = ashr i32 %16, 16
  %18 = trunc i64 %4 to i32
  %19 = ashr i32 %18, 16
  %20 = mul nsw i32 %19, %17
  %21 = add i32 %20, %15
  call void @llvm.lifetime.start(i64 8, i8* nonnull %7)
  store i64 0, i64* %6, align 8
  %22 = bitcast i64* %6 to i32*
  store i32 %21, i32* %22, align 8
  %23 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %7)
  %24 = lshr i64 %3, 32
  %25 = shl nuw nsw i64 %24, 16
  %26 = trunc i64 %25 to i32
  %27 = ashr exact i32 %26, 16
  %28 = lshr i64 %4, 32
  %29 = shl nuw nsw i64 %28, 16
  %30 = trunc i64 %29 to i32
  %31 = ashr exact i32 %30, 16
  %32 = mul nsw i32 %31, %27
  %33 = lshr i64 %3, 48
  %34 = shl nuw nsw i64 %33, 16
  %35 = trunc i64 %34 to i32
  %36 = ashr exact i32 %35, 16
  %37 = lshr i64 %4, 48
  %38 = shl nuw nsw i64 %37, 16
  %39 = trunc i64 %38 to i32
  %40 = ashr exact i32 %39, 16
  %41 = mul nsw i32 %40, %36
  %42 = add i32 %41, %32
  call void @llvm.lifetime.start(i64 8, i8* nonnull %7)
  store i64 %23, i64* %6, align 8
  %43 = getelementptr inbounds [2 x i32], [2 x i32]* %8, i64 0, i64 1
  store i32 %42, i32* %43, align 4
  %44 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %7)
  %45 = lshr i64 %44, 32
  %46 = trunc i64 %44 to i32
  %47 = trunc i64 %45 to i32
  %48 = bitcast i64* %2 to [2 x i32]*
  %49 = bitcast i64* %2 to i32*
  store i32 %46, i32* %49, align 1
  %50 = getelementptr inbounds [2 x i32], [2 x i32]* %48, i64 0, i64 1
  store i32 %47, i32* %50, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L7PMADDWDI4RVnWI7vec64_tE3RVnIS2_E3MVnIS2_EEEP6MemoryS9_R5StateT_T0_T1_(%struct.Memory* returned, %struct.State* nocapture readnone dereferenceable(3376), i64* nocapture, i64, i64)  {
  %6 = alloca i64, align 8
  %7 = inttoptr i64 %4 to i16*
  %8 = load i16, i16* %7
  %9 = add i64 %4, 2
  %10 = inttoptr i64 %9 to i16*
  %11 = load i16, i16* %10
  %12 = add i64 %4, 4
  %13 = inttoptr i64 %12 to i16*
  %14 = load i16, i16* %13
  %15 = add i64 %4, 6
  %16 = inttoptr i64 %15 to i16*
  %17 = load i16, i16* %16
  %18 = bitcast i64* %6 to i8*
  %19 = bitcast i64* %6 to [2 x i32]*
  %20 = trunc i64 %3 to i32
  %21 = shl i32 %20, 16
  %22 = ashr exact i32 %21, 16
  %23 = sext i16 %8 to i32
  %24 = mul nsw i32 %23, %22
  %25 = trunc i64 %3 to i32
  %26 = ashr i32 %25, 16
  %27 = sext i16 %11 to i32
  %28 = mul nsw i32 %27, %26
  %29 = add i32 %28, %24
  call void @llvm.lifetime.start(i64 8, i8* nonnull %18)
  store i64 0, i64* %6, align 8
  %30 = bitcast i64* %6 to i32*
  store i32 %29, i32* %30, align 8
  %31 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %18)
  %32 = lshr i64 %3, 32
  %33 = shl nuw nsw i64 %32, 16
  %34 = trunc i64 %33 to i32
  %35 = ashr exact i32 %34, 16
  %36 = sext i16 %14 to i32
  %37 = mul nsw i32 %36, %35
  %38 = lshr i64 %3, 48
  %39 = shl nuw nsw i64 %38, 16
  %40 = trunc i64 %39 to i32
  %41 = ashr exact i32 %40, 16
  %42 = sext i16 %17 to i32
  %43 = mul nsw i32 %42, %41
  %44 = add i32 %43, %37
  call void @llvm.lifetime.start(i64 8, i8* nonnull %18)
  store i64 %31, i64* %6, align 8
  %45 = getelementptr inbounds [2 x i32], [2 x i32]* %19, i64 0, i64 1
  store i32 %44, i32* %45, align 4
  %46 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %18)
  %47 = lshr i64 %46, 32
  %48 = trunc i64 %46 to i32
  %49 = trunc i64 %47 to i32
  %50 = bitcast i64* %2 to [2 x i32]*
  %51 = bitcast i64* %2 to i32*
  store i32 %48, i32* %51, align 1
  %52 = getelementptr inbounds [2 x i32], [2 x i32]* %50, i64 0, i64 1
  store i32 %49, i32* %52, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L7PMADDWDI3VnWI8vec128_tE2VnIS2_ES5_EEP6MemoryS7_R5StateT_T0_T1_(%struct.Memory* readnone returned, %struct.State* nocapture readnone dereferenceable(3376), i8* nocapture, i8* nocapture readonly, i8* nocapture readonly)  {
  %6 = alloca <2 x i64>, align 16
  %7 = bitcast <2 x i64>* %6 to { i64, i64 }*
  %8 = alloca { i64, i64 }, align 8
  %9 = bitcast { i64, i64 }* %8 to %struct.uint16v8_t*
  %10 = alloca { i64, i64 }, align 8
  %11 = bitcast { i64, i64 }* %10 to %struct.uint16v8_t*
  %12 = bitcast { i64, i64 }* %8 to i8*
  call void @llvm.lifetime.start(i64 16, i8* nonnull %12) 
  %13 = bitcast i8* %3 to i64*
  %14 = load i64, i64* %13, align 1
  %15 = getelementptr inbounds i8, i8* %3, i64 8
  %16 = bitcast i8* %15 to i64*
  %17 = load i64, i64* %16, align 1
  %18 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %8, i64 0, i32 0
  store i64 %14, i64* %18, align 8
  %19 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %8, i64 0, i32 1
  store i64 %17, i64* %19, align 8
  %20 = bitcast { i64, i64 }* %10 to i8*
  call void @llvm.lifetime.start(i64 16, i8* nonnull %20) 
  %21 = bitcast i8* %4 to i64*
  %22 = load i64, i64* %21, align 1
  %23 = getelementptr inbounds i8, i8* %4, i64 8
  %24 = bitcast i8* %23 to i64*
  %25 = load i64, i64* %24, align 1
  %26 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %10, i64 0, i32 0
  store i64 %22, i64* %26, align 8
  %27 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %10, i64 0, i32 1
  store i64 %25, i64* %27, align 8
  %28 = bitcast <2 x i64>* %6 to i8*
  %29 = getelementptr inbounds <2 x i64>, <2 x i64>* %6, i64 0, i64 0
  %30 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %7, i64 0, i32 1
  %31 = bitcast <2 x i64>* %6 to [4 x i32]*
  %32 = trunc i64 %14 to i32
  %33 = shl i32 %32, 16
  %34 = ashr exact i32 %33, 16
  %35 = trunc i64 %22 to i32
  %36 = shl i32 %35, 16
  %37 = ashr exact i32 %36, 16
  %38 = mul nsw i32 %37, %34
  %39 = trunc i64 %14 to i32
  %40 = ashr i32 %39, 16
  %41 = trunc i64 %22 to i32
  %42 = ashr i32 %41, 16
  %43 = mul nsw i32 %42, %40
  %44 = add i32 %43, %38
  call void @llvm.lifetime.start(i64 16, i8* nonnull %28)
  store <2 x i64> zeroinitializer, <2 x i64>* %6, align 16
  %45 = bitcast <2 x i64>* %6 to i32*
  store i32 %44, i32* %45, align 16
  %46 = load i64, i64* %29, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %28)
  %47 = lshr i64 %14, 32
  %48 = shl nuw nsw i64 %47, 16
  %49 = trunc i64 %48 to i32
  %50 = ashr exact i32 %49, 16
  %51 = lshr i64 %22, 32
  %52 = shl nuw nsw i64 %51, 16
  %53 = trunc i64 %52 to i32
  %54 = ashr exact i32 %53, 16
  %55 = mul nsw i32 %54, %50
  %56 = lshr i64 %14, 48
  %57 = shl nuw nsw i64 %56, 16
  %58 = trunc i64 %57 to i32
  %59 = ashr exact i32 %58, 16
  %60 = lshr i64 %22, 48
  %61 = shl nuw nsw i64 %60, 16
  %62 = trunc i64 %61 to i32
  %63 = ashr exact i32 %62, 16
  %64 = mul nsw i32 %63, %59
  %65 = add i32 %64, %55
  call void @llvm.lifetime.start(i64 16, i8* nonnull %28)
  store i64 %46, i64* %29, align 16
  store i64 0, i64* %30, align 8
  %66 = getelementptr inbounds [4 x i32], [4 x i32]* %31, i64 0, i64 1
  store i32 %65, i32* %66, align 4
  %67 = load i64, i64* %29, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %28)
  %68 = trunc i64 %17 to i32
  %69 = shl i32 %68, 16
  %70 = ashr exact i32 %69, 16
  %71 = trunc i64 %25 to i32
  %72 = shl i32 %71, 16
  %73 = ashr exact i32 %72, 16
  %74 = mul nsw i32 %73, %70
  %75 = trunc i64 %17 to i32
  %76 = ashr i32 %75, 16
  %77 = trunc i64 %25 to i32
  %78 = ashr i32 %77, 16
  %79 = mul nsw i32 %78, %76
  %80 = add i32 %79, %74
  call void @llvm.lifetime.start(i64 16, i8* nonnull %28)
  store i64 %67, i64* %29, align 16
  store i64 0, i64* %30, align 8
  %81 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %7, i64 0, i32 1
  %82 = bitcast i64* %81 to i32*
  store i32 %80, i32* %82, align 8
  %83 = load i64, i64* %30, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %28)
  %84 = getelementptr inbounds %struct.uint16v8_t, %struct.uint16v8_t* %9, i64 0, i32 0, i64 6
  %85 = load i16, i16* %84, align 4
  %86 = sext i16 %85 to i32
  %87 = lshr i64 %25, 32
  %88 = shl nuw nsw i64 %87, 16
  %89 = trunc i64 %88 to i32
  %90 = ashr exact i32 %89, 16
  %91 = mul nsw i32 %90, %86
  %92 = getelementptr inbounds %struct.uint16v8_t, %struct.uint16v8_t* %9, i64 0, i32 0, i64 7
  %93 = load i16, i16* %92, align 2
  %94 = sext i16 %93 to i32
  %95 = getelementptr inbounds %struct.uint16v8_t, %struct.uint16v8_t* %11, i64 0, i32 0, i64 7
  %96 = load i16, i16* %95, align 2
  %97 = sext i16 %96 to i32
  %98 = mul nsw i32 %97, %94
  %99 = add i32 %98, %91
  call void @llvm.lifetime.start(i64 16, i8* nonnull %28)
  store i64 %67, i64* %29, align 16
  store i64 %83, i64* %30, align 8
  %100 = getelementptr inbounds [4 x i32], [4 x i32]* %31, i64 0, i64 3
  store i32 %99, i32* %100, align 4
  %101 = load i64, i64* %30, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %28)
  %102 = lshr i64 %67, 32
  %103 = trunc i64 %67 to i32
  %104 = trunc i64 %102 to i32
  %105 = bitcast i8* %2 to i32*
  store i32 %103, i32* %105, align 1
  %106 = getelementptr inbounds i8, i8* %2, i64 4
  %107 = bitcast i8* %106 to i32*
  store i32 %104, i32* %107, align 1
  %108 = trunc i64 %101 to i32
  %109 = getelementptr inbounds i8, i8* %2, i64 8
  %110 = bitcast i8* %109 to i32*
  store i32 %108, i32* %110, align 1
  %111 = lshr i64 %101, 32
  %112 = trunc i64 %111 to i32
  %113 = getelementptr inbounds i8, i8* %2, i64 12
  %114 = bitcast i8* %113 to i32*
  store i32 %112, i32* %114, align 1
  call void @llvm.lifetime.end(i64 16, i8* nonnull %20) 
  call void @llvm.lifetime.end(i64 16, i8* nonnull %12) 
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L7PMADDWDI3VnWI8vec128_tE2VnIS2_E3MVnIS2_EEEP6MemoryS9_R5StateT_T0_T1_(%struct.Memory* returned, %struct.State* nocapture readnone dereferenceable(3376), i8* nocapture, i8* nocapture readonly, i64)  {
  %6 = alloca <2 x i64>, align 16
  %7 = bitcast <2 x i64>* %6 to { i64, i64 }*
  %8 = alloca <2 x i64>, align 16
  %9 = bitcast <2 x i64>* %8 to { i64, i64 }*
  %10 = bitcast <2 x i64>* %8 to %struct.uint16v8_t*
  %11 = bitcast <2 x i64>* %8 to i8*
  call void @llvm.lifetime.start(i64 16, i8* nonnull %11) 
  %12 = bitcast i8* %3 to <2 x i64>*
  %13 = load <2 x i64>, <2 x i64>* %12, align 1
  store <2 x i64> %13, <2 x i64>* %8, align 16
  %14 = inttoptr i64 %4 to i16*
  %15 = load i16, i16* %14
  %16 = add i64 %4, 2
  %17 = inttoptr i64 %16 to i16*
  %18 = load i16, i16* %17
  %19 = add i64 %4, 4
  %20 = inttoptr i64 %19 to i16*
  %21 = load i16, i16* %20
  %22 = add i64 %4, 6
  %23 = inttoptr i64 %22 to i16*
  %24 = load i16, i16* %23
  %25 = add i64 %4, 8
  %26 = inttoptr i64 %25 to i16*
  %27 = load i16, i16* %26
  %28 = add i64 %4, 10
  %29 = inttoptr i64 %28 to i16*
  %30 = load i16, i16* %29
  %31 = add i64 %4, 12
  %32 = inttoptr i64 %31 to i16*
  %33 = load i16, i16* %32
  %34 = add i64 %4, 14
  %35 = inttoptr i64 %34 to i16*
  %36 = load i16, i16* %35
  %37 = bitcast <2 x i64>* %6 to i8*
  %38 = getelementptr inbounds <2 x i64>, <2 x i64>* %6, i64 0, i64 0
  %39 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %7, i64 0, i32 1
  %40 = bitcast <2 x i64>* %6 to [4 x i32]*
  %41 = extractelement <2 x i64> %13, i32 0
  %42 = trunc i64 %41 to i32
  %43 = shl i32 %42, 16
  %44 = ashr exact i32 %43, 16
  %45 = sext i16 %15 to i32
  %46 = mul nsw i32 %45, %44
  %47 = trunc i64 %41 to i32
  %48 = ashr i32 %47, 16
  %49 = sext i16 %18 to i32
  %50 = mul nsw i32 %49, %48
  %51 = add i32 %50, %46
  call void @llvm.lifetime.start(i64 16, i8* nonnull %37)
  store <2 x i64> zeroinitializer, <2 x i64>* %6, align 16
  %52 = bitcast <2 x i64>* %6 to i32*
  store i32 %51, i32* %52, align 16
  %53 = load i64, i64* %38, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %37)
  %54 = lshr i64 %41, 32
  %55 = shl nuw nsw i64 %54, 16
  %56 = trunc i64 %55 to i32
  %57 = ashr exact i32 %56, 16
  %58 = sext i16 %21 to i32
  %59 = mul nsw i32 %58, %57
  %60 = lshr i64 %41, 48
  %61 = shl nuw nsw i64 %60, 16
  %62 = trunc i64 %61 to i32
  %63 = ashr exact i32 %62, 16
  %64 = sext i16 %24 to i32
  %65 = mul nsw i32 %64, %63
  %66 = add i32 %65, %59
  call void @llvm.lifetime.start(i64 16, i8* nonnull %37)
  store i64 %53, i64* %38, align 16
  store i64 0, i64* %39, align 8
  %67 = getelementptr inbounds [4 x i32], [4 x i32]* %40, i64 0, i64 1
  store i32 %66, i32* %67, align 4
  %68 = load i64, i64* %38, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %37)
  %69 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %9, i64 0, i32 1
  %70 = bitcast i64* %69 to i16*
  %71 = load i16, i16* %70, align 8
  %72 = sext i16 %71 to i32
  %73 = sext i16 %27 to i32
  %74 = mul nsw i32 %73, %72
  %75 = getelementptr inbounds %struct.uint16v8_t, %struct.uint16v8_t* %10, i64 0, i32 0, i64 5
  %76 = load i16, i16* %75, align 2
  %77 = sext i16 %76 to i32
  %78 = sext i16 %30 to i32
  %79 = mul nsw i32 %78, %77
  %80 = add i32 %79, %74
  call void @llvm.lifetime.start(i64 16, i8* nonnull %37)
  store i64 %68, i64* %38, align 16
  store i64 0, i64* %39, align 8
  %81 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %7, i64 0, i32 1
  %82 = bitcast i64* %81 to i32*
  store i32 %80, i32* %82, align 8
  %83 = load i64, i64* %39, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %37)
  %84 = getelementptr inbounds %struct.uint16v8_t, %struct.uint16v8_t* %10, i64 0, i32 0, i64 6
  %85 = load i16, i16* %84, align 4
  %86 = sext i16 %85 to i32
  %87 = sext i16 %33 to i32
  %88 = mul nsw i32 %87, %86
  %89 = getelementptr inbounds %struct.uint16v8_t, %struct.uint16v8_t* %10, i64 0, i32 0, i64 7
  %90 = load i16, i16* %89, align 2
  %91 = sext i16 %90 to i32
  %92 = sext i16 %36 to i32
  %93 = mul nsw i32 %92, %91
  %94 = add i32 %93, %88
  call void @llvm.lifetime.start(i64 16, i8* nonnull %37)
  store i64 %68, i64* %38, align 16
  store i64 %83, i64* %39, align 8
  %95 = getelementptr inbounds [4 x i32], [4 x i32]* %40, i64 0, i64 3
  store i32 %94, i32* %95, align 4
  %96 = load i64, i64* %39, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %37)
  %97 = lshr i64 %68, 32
  %98 = trunc i64 %68 to i32
  %99 = trunc i64 %97 to i32
  %100 = bitcast i8* %2 to i32*
  store i32 %98, i32* %100, align 1
  %101 = getelementptr inbounds i8, i8* %2, i64 4
  %102 = bitcast i8* %101 to i32*
  store i32 %99, i32* %102, align 1
  %103 = trunc i64 %96 to i32
  %104 = getelementptr inbounds i8, i8* %2, i64 8
  %105 = bitcast i8* %104 to i32*
  store i32 %103, i32* %105, align 1
  %106 = lshr i64 %96, 32
  %107 = trunc i64 %106 to i32
  %108 = getelementptr inbounds i8, i8* %2, i64 12
  %109 = bitcast i8* %108 to i32*
  store i32 %107, i32* %109, align 1
  call void @llvm.lifetime.end(i64 16, i8* nonnull %11) 
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L9PMADDUBSWI4RVnWI7vec64_tE3RVnIS2_ES5_EEP6MemoryS7_R5StateT_T0_T1_(%struct.Memory* readnone returned, %struct.State* nocapture readnone dereferenceable(3376), i64* nocapture, i64, i64)  {
  %6 = alloca i64, align 8
  %7 = alloca i64, align 8
  %8 = bitcast i64* %7 to %struct.uint8v8_t*
  %9 = alloca i64, align 8
  %10 = bitcast i64* %9 to %struct.uint8v8_t*
  %11 = bitcast i64* %7 to i8*
  call void @llvm.lifetime.start(i64 8, i8* nonnull %11) 
  store i64 %3, i64* %7, align 8
  %12 = bitcast i64* %9 to i8*
  call void @llvm.lifetime.start(i64 8, i8* nonnull %12) 
  store i64 %4, i64* %9, align 8
  %13 = bitcast i64* %6 to i8*
  %14 = bitcast i64* %6 to [4 x i16]*
  %15 = trunc i64 %3 to i16
  %16 = and i16 %15, 255
  %17 = trunc i64 %4 to i16
  %18 = shl i16 %17, 8
  %19 = ashr exact i16 %18, 8
  %20 = mul nsw i16 %19, %16
  %21 = lshr i64 %3, 8
  %22 = trunc i64 %21 to i16
  %23 = and i16 %22, 255
  %24 = trunc i64 %4 to i16
  %25 = ashr i16 %24, 8
  %26 = mul nsw i16 %25, %23
  %27 = add i16 %26, %20
  %28 = or i16 %26, %20
  %29 = and i16 %26, %20
  %30 = xor i16 %28, -32768
  %31 = and i16 %30, %27
  %32 = icmp slt i16 %31, 0
  %33 = select i1 %32, i16 32767, i16 %27
  %34 = xor i16 %27, -32768
  %35 = and i16 %29, %34
  %36 = icmp slt i16 %35, 0
  %37 = select i1 %36, i16 -32768, i16 %33
  call void @llvm.lifetime.start(i64 8, i8* nonnull %13)
  store i64 0, i64* %6, align 8
  %38 = bitcast i64* %6 to i16*
  store i16 %37, i16* %38, align 8
  %39 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %13)
  %40 = lshr i64 %3, 16
  %41 = trunc i64 %40 to i16
  %42 = and i16 %41, 255
  %43 = lshr i64 %4, 16
  %44 = shl nuw nsw i64 %43, 8
  %45 = trunc i64 %44 to i16
  %46 = ashr exact i16 %45, 8
  %47 = mul nsw i16 %46, %42
  %48 = lshr i64 %3, 24
  %49 = trunc i64 %48 to i16
  %50 = and i16 %49, 255
  %51 = lshr i64 %4, 24
  %52 = shl nuw nsw i64 %51, 8
  %53 = trunc i64 %52 to i16
  %54 = ashr exact i16 %53, 8
  %55 = mul nsw i16 %54, %50
  %56 = add i16 %55, %47
  %57 = or i16 %55, %47
  %58 = and i16 %55, %47
  %59 = xor i16 %57, -32768
  %60 = and i16 %59, %56
  %61 = icmp slt i16 %60, 0
  %62 = select i1 %61, i16 32767, i16 %56
  %63 = xor i16 %56, -32768
  %64 = and i16 %58, %63
  %65 = icmp slt i16 %64, 0
  %66 = select i1 %65, i16 -32768, i16 %62
  call void @llvm.lifetime.start(i64 8, i8* nonnull %13)
  store i64 %39, i64* %6, align 8
  %67 = getelementptr inbounds [4 x i16], [4 x i16]* %14, i64 0, i64 1
  store i16 %66, i16* %67, align 2
  %68 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %13)
  %69 = lshr i64 %3, 32
  %70 = trunc i64 %69 to i16
  %71 = and i16 %70, 255
  %72 = lshr i64 %4, 32
  %73 = shl nuw nsw i64 %72, 8
  %74 = trunc i64 %73 to i16
  %75 = ashr exact i16 %74, 8
  %76 = mul nsw i16 %75, %71
  %77 = lshr i64 %3, 40
  %78 = trunc i64 %77 to i16
  %79 = and i16 %78, 255
  %80 = getelementptr inbounds %struct.uint8v8_t, %struct.uint8v8_t* %10, i64 0, i32 0, i64 5
  %81 = load i8, i8* %80, align 1
  %82 = sext i8 %81 to i16
  %83 = mul nsw i16 %82, %79
  %84 = add i16 %83, %76
  %85 = or i16 %83, %76
  %86 = and i16 %83, %76
  %87 = xor i16 %85, -32768
  %88 = and i16 %87, %84
  %89 = icmp slt i16 %88, 0
  %90 = select i1 %89, i16 32767, i16 %84
  %91 = xor i16 %84, -32768
  %92 = and i16 %86, %91
  %93 = icmp slt i16 %92, 0
  %94 = select i1 %93, i16 -32768, i16 %90
  call void @llvm.lifetime.start(i64 8, i8* nonnull %13)
  store i64 %68, i64* %6, align 8
  %95 = getelementptr inbounds [4 x i16], [4 x i16]* %14, i64 0, i64 2
  store i16 %94, i16* %95, align 4
  %96 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %13)
  %97 = getelementptr inbounds %struct.uint8v8_t, %struct.uint8v8_t* %8, i64 0, i32 0, i64 6
  %98 = load i8, i8* %97, align 2
  %99 = zext i8 %98 to i16
  %100 = getelementptr inbounds %struct.uint8v8_t, %struct.uint8v8_t* %10, i64 0, i32 0, i64 6
  %101 = load i8, i8* %100, align 2
  %102 = sext i8 %101 to i16
  %103 = mul nsw i16 %102, %99
  %104 = getelementptr inbounds %struct.uint8v8_t, %struct.uint8v8_t* %8, i64 0, i32 0, i64 7
  %105 = load i8, i8* %104, align 1
  %106 = zext i8 %105 to i16
  %107 = getelementptr inbounds %struct.uint8v8_t, %struct.uint8v8_t* %10, i64 0, i32 0, i64 7
  %108 = load i8, i8* %107, align 1
  %109 = sext i8 %108 to i16
  %110 = mul nsw i16 %109, %106
  %111 = add i16 %110, %103
  %112 = or i16 %110, %103
  %113 = and i16 %110, %103
  %114 = xor i16 %112, -32768
  %115 = and i16 %114, %111
  %116 = icmp slt i16 %115, 0
  %117 = select i1 %116, i16 32767, i16 %111
  %118 = xor i16 %111, -32768
  %119 = and i16 %113, %118
  %120 = icmp slt i16 %119, 0
  %121 = select i1 %120, i16 -32768, i16 %117
  call void @llvm.lifetime.start(i64 8, i8* nonnull %13)
  store i64 %96, i64* %6, align 8
  %122 = getelementptr inbounds [4 x i16], [4 x i16]* %14, i64 0, i64 3
  store i16 %121, i16* %122, align 2
  %123 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %13)
  %124 = lshr i64 %123, 16
  %125 = lshr i64 %123, 32
  %126 = lshr i64 %123, 48
  %127 = trunc i64 %123 to i16
  %128 = trunc i64 %124 to i16
  %129 = trunc i64 %125 to i16
  %130 = trunc i64 %126 to i16
  %131 = bitcast i64* %2 to [4 x i16]*
  %132 = bitcast i64* %2 to i16*
  store i16 %127, i16* %132, align 1
  %133 = getelementptr inbounds [4 x i16], [4 x i16]* %131, i64 0, i64 1
  store i16 %128, i16* %133, align 1
  %134 = getelementptr inbounds [4 x i16], [4 x i16]* %131, i64 0, i64 2
  store i16 %129, i16* %134, align 1
  %135 = getelementptr inbounds [4 x i16], [4 x i16]* %131, i64 0, i64 3
  store i16 %130, i16* %135, align 1
  call void @llvm.lifetime.end(i64 8, i8* nonnull %12) 
  call void @llvm.lifetime.end(i64 8, i8* nonnull %11) 
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L9PMADDUBSWI4RVnWI7vec64_tE3RVnIS2_E3MVnIS2_EEEP6MemoryS9_R5StateT_T0_T1_(%struct.Memory* returned, %struct.State* nocapture readnone dereferenceable(3376), i64* nocapture, i64, i64)  {
  %6 = alloca i64, align 8
  %7 = alloca i64, align 8
  %8 = bitcast i64* %7 to %struct.uint8v8_t*
  %9 = alloca i64, align 8
  %10 = bitcast i64* %9 to %struct.uint8v8_t*
  %11 = bitcast i64* %7 to i8*
  call void @llvm.lifetime.start(i64 8, i8* nonnull %11) 
  store i64 %3, i64* %7, align 8
  %12 = bitcast i64* %9 to i8*
  call void @llvm.lifetime.start(i64 8, i8* nonnull %12) 
  %13 = inttoptr i64 %4 to i8*
  %14 = load i8, i8* %13
  %15 = add i64 %4, 1
  %16 = inttoptr i64 %15 to i8*
  %17 = load i8, i8* %16
  %18 = add i64 %4, 2
  %19 = inttoptr i64 %18 to i8*
  %20 = load i8, i8* %19
  %21 = add i64 %4, 3
  %22 = inttoptr i64 %21 to i8*
  %23 = load i8, i8* %22
  %24 = add i64 %4, 4
  %25 = inttoptr i64 %24 to i8*
  %26 = load i8, i8* %25
  %27 = add i64 %4, 5
  %28 = inttoptr i64 %27 to i8*
  %29 = load i8, i8* %28
  %30 = add i64 %4, 6
  %31 = inttoptr i64 %30 to i8*
  %32 = load i8, i8* %31
  %33 = add i64 %4, 7
  %34 = inttoptr i64 %33 to i8*
  %35 = load i8, i8* %34
  %36 = zext i8 %35 to i64
  %37 = shl nuw i64 %36, 56
  %38 = zext i8 %32 to i64
  %39 = shl nuw nsw i64 %38, 48
  %40 = zext i8 %29 to i64
  %41 = shl nuw nsw i64 %40, 40
  %42 = zext i8 %26 to i64
  %43 = shl nuw nsw i64 %42, 32
  %44 = zext i8 %23 to i64
  %45 = shl nuw nsw i64 %44, 24
  %46 = zext i8 %20 to i64
  %47 = shl nuw nsw i64 %46, 16
  %48 = zext i8 %17 to i64
  %49 = shl nuw nsw i64 %48, 8
  %50 = zext i8 %14 to i64
  %51 = or i64 %49, %50
  %52 = or i64 %51, %47
  %53 = or i64 %52, %45
  %54 = or i64 %53, %43
  %55 = or i64 %54, %41
  %56 = or i64 %55, %39
  %57 = or i64 %56, %37
  store i64 %57, i64* %9, align 8
  %58 = bitcast i64* %6 to i8*
  %59 = bitcast i64* %6 to [4 x i16]*
  %60 = trunc i64 %3 to i16
  %61 = and i16 %60, 255
  %62 = sext i8 %14 to i16
  %63 = mul nsw i16 %62, %61
  %64 = lshr i64 %3, 8
  %65 = trunc i64 %64 to i16
  %66 = and i16 %65, 255
  %67 = sext i8 %17 to i16
  %68 = mul nsw i16 %67, %66
  %69 = add i16 %68, %63
  %70 = or i16 %68, %63
  %71 = and i16 %68, %63
  %72 = xor i16 %70, -32768
  %73 = and i16 %72, %69
  %74 = icmp slt i16 %73, 0
  %75 = select i1 %74, i16 32767, i16 %69
  %76 = xor i16 %69, -32768
  %77 = and i16 %71, %76
  %78 = icmp slt i16 %77, 0
  %79 = select i1 %78, i16 -32768, i16 %75
  call void @llvm.lifetime.start(i64 8, i8* nonnull %58)
  store i64 0, i64* %6, align 8
  %80 = bitcast i64* %6 to i16*
  store i16 %79, i16* %80, align 8
  %81 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %58)
  %82 = lshr i64 %3, 16
  %83 = trunc i64 %82 to i16
  %84 = and i16 %83, 255
  %85 = sext i8 %20 to i16
  %86 = mul nsw i16 %85, %84
  %87 = lshr i64 %3, 24
  %88 = trunc i64 %87 to i16
  %89 = and i16 %88, 255
  %90 = sext i8 %23 to i16
  %91 = mul nsw i16 %90, %89
  %92 = add i16 %91, %86
  %93 = or i16 %91, %86
  %94 = and i16 %91, %86
  %95 = xor i16 %93, -32768
  %96 = and i16 %95, %92
  %97 = icmp slt i16 %96, 0
  %98 = select i1 %97, i16 32767, i16 %92
  %99 = xor i16 %92, -32768
  %100 = and i16 %94, %99
  %101 = icmp slt i16 %100, 0
  %102 = select i1 %101, i16 -32768, i16 %98
  call void @llvm.lifetime.start(i64 8, i8* nonnull %58)
  store i64 %81, i64* %6, align 8
  %103 = getelementptr inbounds [4 x i16], [4 x i16]* %59, i64 0, i64 1
  store i16 %102, i16* %103, align 2
  %104 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %58)
  %105 = getelementptr inbounds %struct.uint8v8_t, %struct.uint8v8_t* %8, i64 0, i32 0, i64 4
  %106 = load i8, i8* %105, align 4
  %107 = zext i8 %106 to i16
  %108 = lshr i64 %54, 32
  %109 = shl nuw nsw i64 %108, 8
  %110 = trunc i64 %109 to i16
  %111 = ashr exact i16 %110, 8
  %112 = mul nsw i16 %111, %107
  %113 = getelementptr inbounds %struct.uint8v8_t, %struct.uint8v8_t* %8, i64 0, i32 0, i64 5
  %114 = load i8, i8* %113, align 1
  %115 = zext i8 %114 to i16
  %116 = lshr i64 %55, 40
  %117 = shl nuw nsw i64 %116, 8
  %118 = trunc i64 %117 to i16
  %119 = ashr exact i16 %118, 8
  %120 = mul nsw i16 %119, %115
  %121 = add i16 %120, %112
  %122 = or i16 %120, %112
  %123 = and i16 %120, %112
  %124 = xor i16 %122, -32768
  %125 = and i16 %124, %121
  %126 = icmp slt i16 %125, 0
  %127 = select i1 %126, i16 32767, i16 %121
  %128 = xor i16 %121, -32768
  %129 = and i16 %123, %128
  %130 = icmp slt i16 %129, 0
  %131 = select i1 %130, i16 -32768, i16 %127
  call void @llvm.lifetime.start(i64 8, i8* nonnull %58)
  store i64 %104, i64* %6, align 8
  %132 = getelementptr inbounds [4 x i16], [4 x i16]* %59, i64 0, i64 2
  store i16 %131, i16* %132, align 4
  %133 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %58)
  %134 = getelementptr inbounds %struct.uint8v8_t, %struct.uint8v8_t* %8, i64 0, i32 0, i64 6
  %135 = load i8, i8* %134, align 2
  %136 = zext i8 %135 to i16
  %137 = getelementptr inbounds %struct.uint8v8_t, %struct.uint8v8_t* %10, i64 0, i32 0, i64 6
  %138 = load i8, i8* %137, align 2
  %139 = sext i8 %138 to i16
  %140 = mul nsw i16 %139, %136
  %141 = getelementptr inbounds %struct.uint8v8_t, %struct.uint8v8_t* %8, i64 0, i32 0, i64 7
  %142 = load i8, i8* %141, align 1
  %143 = zext i8 %142 to i16
  %144 = getelementptr inbounds %struct.uint8v8_t, %struct.uint8v8_t* %10, i64 0, i32 0, i64 7
  %145 = load i8, i8* %144, align 1
  %146 = sext i8 %145 to i16
  %147 = mul nsw i16 %146, %143
  %148 = add i16 %147, %140
  %149 = or i16 %147, %140
  %150 = and i16 %147, %140
  %151 = xor i16 %149, -32768
  %152 = and i16 %151, %148
  %153 = icmp slt i16 %152, 0
  %154 = select i1 %153, i16 32767, i16 %148
  %155 = xor i16 %148, -32768
  %156 = and i16 %150, %155
  %157 = icmp slt i16 %156, 0
  %158 = select i1 %157, i16 -32768, i16 %154
  call void @llvm.lifetime.start(i64 8, i8* nonnull %58)
  store i64 %133, i64* %6, align 8
  %159 = getelementptr inbounds [4 x i16], [4 x i16]* %59, i64 0, i64 3
  store i16 %158, i16* %159, align 2
  %160 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %58)
  %161 = lshr i64 %160, 16
  %162 = lshr i64 %160, 32
  %163 = lshr i64 %160, 48
  %164 = trunc i64 %160 to i16
  %165 = trunc i64 %161 to i16
  %166 = trunc i64 %162 to i16
  %167 = trunc i64 %163 to i16
  %168 = bitcast i64* %2 to [4 x i16]*
  %169 = bitcast i64* %2 to i16*
  store i16 %164, i16* %169, align 1
  %170 = getelementptr inbounds [4 x i16], [4 x i16]* %168, i64 0, i64 1
  store i16 %165, i16* %170, align 1
  %171 = getelementptr inbounds [4 x i16], [4 x i16]* %168, i64 0, i64 2
  store i16 %166, i16* %171, align 1
  %172 = getelementptr inbounds [4 x i16], [4 x i16]* %168, i64 0, i64 3
  store i16 %167, i16* %172, align 1
  call void @llvm.lifetime.end(i64 8, i8* nonnull %12) 
  call void @llvm.lifetime.end(i64 8, i8* nonnull %11) 
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L9PMADDUBSWI3VnWI8vec128_tE2VnIS2_ES5_EEP6MemoryS7_R5StateT_T0_T1_(%struct.Memory* readnone returned, %struct.State* nocapture readnone dereferenceable(3376), i8* nocapture, i8* nocapture readonly, i8* nocapture readonly)  {
  %6 = alloca <2 x i64>, align 16
  %7 = bitcast <2 x i64>* %6 to { i64, i64 }*
  %8 = alloca <2 x i64>, align 16
  %9 = bitcast <2 x i64>* %8 to { i64, i64 }*
  %10 = bitcast <2 x i64>* %8 to %struct.uint8v16_t*
  %11 = alloca <2 x i64>, align 16
  %12 = bitcast <2 x i64>* %11 to { i64, i64 }*
  %13 = bitcast <2 x i64>* %11 to %struct.uint8v16_t*
  %14 = bitcast <2 x i64>* %8 to i8*
  call void @llvm.lifetime.start(i64 16, i8* nonnull %14) 
  %15 = bitcast i8* %3 to <2 x i64>*
  %16 = load <2 x i64>, <2 x i64>* %15, align 1
  store <2 x i64> %16, <2 x i64>* %8, align 16
  %17 = bitcast <2 x i64>* %11 to i8*
  call void @llvm.lifetime.start(i64 16, i8* nonnull %17) 
  %18 = bitcast i8* %4 to <2 x i64>*
  %19 = load <2 x i64>, <2 x i64>* %18, align 1
  store <2 x i64> %19, <2 x i64>* %11, align 16
  %20 = bitcast <2 x i64>* %6 to i8*
  %21 = getelementptr inbounds <2 x i64>, <2 x i64>* %6, i64 0, i64 0
  %22 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %7, i64 0, i32 1
  %23 = bitcast <2 x i64>* %6 to [8 x i16]*
  %24 = extractelement <2 x i64> %16, i32 0
  %25 = trunc i64 %24 to i16
  %26 = and i16 %25, 255
  %27 = extractelement <2 x i64> %19, i32 0
  %28 = trunc i64 %27 to i16
  %29 = shl i16 %28, 8
  %30 = ashr exact i16 %29, 8
  %31 = mul nsw i16 %30, %26
  %32 = lshr i64 %24, 8
  %33 = trunc i64 %32 to i16
  %34 = and i16 %33, 255
  %35 = trunc i64 %27 to i16
  %36 = ashr i16 %35, 8
  %37 = mul nsw i16 %36, %34
  %38 = add i16 %37, %31
  %39 = or i16 %37, %31
  %40 = and i16 %37, %31
  %41 = xor i16 %39, -32768
  %42 = and i16 %41, %38
  %43 = icmp slt i16 %42, 0
  %44 = select i1 %43, i16 32767, i16 %38
  %45 = xor i16 %38, -32768
  %46 = and i16 %40, %45
  %47 = icmp slt i16 %46, 0
  %48 = select i1 %47, i16 -32768, i16 %44
  call void @llvm.lifetime.start(i64 16, i8* nonnull %20)
  store <2 x i64> zeroinitializer, <2 x i64>* %6, align 16
  %49 = bitcast <2 x i64>* %6 to i16*
  store i16 %48, i16* %49, align 16
  %50 = load i64, i64* %21, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %20)
  %51 = lshr i64 %24, 16
  %52 = trunc i64 %51 to i16
  %53 = and i16 %52, 255
  %54 = lshr i64 %27, 16
  %55 = shl nuw nsw i64 %54, 8
  %56 = trunc i64 %55 to i16
  %57 = ashr exact i16 %56, 8
  %58 = mul nsw i16 %57, %53
  %59 = lshr i64 %24, 24
  %60 = trunc i64 %59 to i16
  %61 = and i16 %60, 255
  %62 = lshr i64 %27, 24
  %63 = shl nuw nsw i64 %62, 8
  %64 = trunc i64 %63 to i16
  %65 = ashr exact i16 %64, 8
  %66 = mul nsw i16 %65, %61
  %67 = add i16 %66, %58
  %68 = or i16 %66, %58
  %69 = and i16 %66, %58
  %70 = xor i16 %68, -32768
  %71 = and i16 %70, %67
  %72 = icmp slt i16 %71, 0
  %73 = select i1 %72, i16 32767, i16 %67
  %74 = xor i16 %67, -32768
  %75 = and i16 %69, %74
  %76 = icmp slt i16 %75, 0
  %77 = select i1 %76, i16 -32768, i16 %73
  call void @llvm.lifetime.start(i64 16, i8* nonnull %20)
  store i64 %50, i64* %21, align 16
  store i64 0, i64* %22, align 8
  %78 = getelementptr inbounds [8 x i16], [8 x i16]* %23, i64 0, i64 1
  store i16 %77, i16* %78, align 2
  %79 = load i64, i64* %21, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %20)
  %80 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %10, i64 0, i32 0, i64 4
  %81 = load i8, i8* %80, align 4
  %82 = zext i8 %81 to i16
  %83 = lshr i64 %27, 32
  %84 = shl nuw nsw i64 %83, 8
  %85 = trunc i64 %84 to i16
  %86 = ashr exact i16 %85, 8
  %87 = mul nsw i16 %86, %82
  %88 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %10, i64 0, i32 0, i64 5
  %89 = load i8, i8* %88, align 1
  %90 = zext i8 %89 to i16
  %91 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %13, i64 0, i32 0, i64 5
  %92 = load i8, i8* %91, align 1
  %93 = sext i8 %92 to i16
  %94 = mul nsw i16 %93, %90
  %95 = add i16 %94, %87
  %96 = or i16 %94, %87
  %97 = and i16 %94, %87
  %98 = xor i16 %96, -32768
  %99 = and i16 %98, %95
  %100 = icmp slt i16 %99, 0
  %101 = select i1 %100, i16 32767, i16 %95
  %102 = xor i16 %95, -32768
  %103 = and i16 %97, %102
  %104 = icmp slt i16 %103, 0
  %105 = select i1 %104, i16 -32768, i16 %101
  call void @llvm.lifetime.start(i64 16, i8* nonnull %20)
  store i64 %79, i64* %21, align 16
  store i64 0, i64* %22, align 8
  %106 = getelementptr inbounds [8 x i16], [8 x i16]* %23, i64 0, i64 2
  store i16 %105, i16* %106, align 4
  %107 = load i64, i64* %21, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %20)
  %108 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %10, i64 0, i32 0, i64 6
  %109 = load i8, i8* %108, align 2
  %110 = zext i8 %109 to i16
  %111 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %13, i64 0, i32 0, i64 6
  %112 = load i8, i8* %111, align 2
  %113 = sext i8 %112 to i16
  %114 = mul nsw i16 %113, %110
  %115 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %10, i64 0, i32 0, i64 7
  %116 = load i8, i8* %115, align 1
  %117 = zext i8 %116 to i16
  %118 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %13, i64 0, i32 0, i64 7
  %119 = load i8, i8* %118, align 1
  %120 = sext i8 %119 to i16
  %121 = mul nsw i16 %120, %117
  %122 = add i16 %121, %114
  %123 = or i16 %121, %114
  %124 = and i16 %121, %114
  %125 = xor i16 %123, -32768
  %126 = and i16 %125, %122
  %127 = icmp slt i16 %126, 0
  %128 = select i1 %127, i16 32767, i16 %122
  %129 = xor i16 %122, -32768
  %130 = and i16 %124, %129
  %131 = icmp slt i16 %130, 0
  %132 = select i1 %131, i16 -32768, i16 %128
  call void @llvm.lifetime.start(i64 16, i8* nonnull %20)
  store i64 %107, i64* %21, align 16
  store i64 0, i64* %22, align 8
  %133 = getelementptr inbounds [8 x i16], [8 x i16]* %23, i64 0, i64 3
  store i16 %132, i16* %133, align 2
  %134 = load i64, i64* %21, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %20)
  %135 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %9, i64 0, i32 1
  %136 = bitcast i64* %135 to i8*
  %137 = load i8, i8* %136, align 8
  %138 = zext i8 %137 to i16
  %139 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %12, i64 0, i32 1
  %140 = bitcast i64* %139 to i8*
  %141 = load i8, i8* %140, align 8
  %142 = sext i8 %141 to i16
  %143 = mul nsw i16 %142, %138
  %144 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %10, i64 0, i32 0, i64 9
  %145 = load i8, i8* %144, align 1
  %146 = zext i8 %145 to i16
  %147 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %13, i64 0, i32 0, i64 9
  %148 = load i8, i8* %147, align 1
  %149 = sext i8 %148 to i16
  %150 = mul nsw i16 %149, %146
  %151 = add i16 %150, %143
  %152 = or i16 %150, %143
  %153 = and i16 %150, %143
  %154 = xor i16 %152, -32768
  %155 = and i16 %154, %151
  %156 = icmp slt i16 %155, 0
  %157 = select i1 %156, i16 32767, i16 %151
  %158 = xor i16 %151, -32768
  %159 = and i16 %153, %158
  %160 = icmp slt i16 %159, 0
  %161 = select i1 %160, i16 -32768, i16 %157
  call void @llvm.lifetime.start(i64 16, i8* nonnull %20)
  store i64 %134, i64* %21, align 16
  store i64 0, i64* %22, align 8
  %162 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %7, i64 0, i32 1
  %163 = bitcast i64* %162 to i16*
  store i16 %161, i16* %163, align 8
  %164 = load i64, i64* %22, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %20)
  %165 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %10, i64 0, i32 0, i64 10
  %166 = load i8, i8* %165, align 2
  %167 = zext i8 %166 to i16
  %168 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %13, i64 0, i32 0, i64 10
  %169 = load i8, i8* %168, align 2
  %170 = sext i8 %169 to i16
  %171 = mul nsw i16 %170, %167
  %172 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %10, i64 0, i32 0, i64 11
  %173 = load i8, i8* %172, align 1
  %174 = zext i8 %173 to i16
  %175 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %13, i64 0, i32 0, i64 11
  %176 = load i8, i8* %175, align 1
  %177 = sext i8 %176 to i16
  %178 = mul nsw i16 %177, %174
  %179 = add i16 %178, %171
  %180 = or i16 %178, %171
  %181 = and i16 %178, %171
  %182 = xor i16 %180, -32768
  %183 = and i16 %182, %179
  %184 = icmp slt i16 %183, 0
  %185 = select i1 %184, i16 32767, i16 %179
  %186 = xor i16 %179, -32768
  %187 = and i16 %181, %186
  %188 = icmp slt i16 %187, 0
  %189 = select i1 %188, i16 -32768, i16 %185
  call void @llvm.lifetime.start(i64 16, i8* nonnull %20)
  store i64 %134, i64* %21, align 16
  store i64 %164, i64* %22, align 8
  %190 = getelementptr inbounds [8 x i16], [8 x i16]* %23, i64 0, i64 5
  store i16 %189, i16* %190, align 2
  %191 = load i64, i64* %22, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %20)
  %192 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %10, i64 0, i32 0, i64 12
  %193 = load i8, i8* %192, align 4
  %194 = zext i8 %193 to i16
  %195 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %13, i64 0, i32 0, i64 12
  %196 = load i8, i8* %195, align 4
  %197 = sext i8 %196 to i16
  %198 = mul nsw i16 %197, %194
  %199 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %10, i64 0, i32 0, i64 13
  %200 = load i8, i8* %199, align 1
  %201 = zext i8 %200 to i16
  %202 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %13, i64 0, i32 0, i64 13
  %203 = load i8, i8* %202, align 1
  %204 = sext i8 %203 to i16
  %205 = mul nsw i16 %204, %201
  %206 = add i16 %205, %198
  %207 = or i16 %205, %198
  %208 = and i16 %205, %198
  %209 = xor i16 %207, -32768
  %210 = and i16 %209, %206
  %211 = icmp slt i16 %210, 0
  %212 = select i1 %211, i16 32767, i16 %206
  %213 = xor i16 %206, -32768
  %214 = and i16 %208, %213
  %215 = icmp slt i16 %214, 0
  %216 = select i1 %215, i16 -32768, i16 %212
  call void @llvm.lifetime.start(i64 16, i8* nonnull %20)
  store i64 %134, i64* %21, align 16
  store i64 %191, i64* %22, align 8
  %217 = getelementptr inbounds [8 x i16], [8 x i16]* %23, i64 0, i64 6
  store i16 %216, i16* %217, align 4
  %218 = load i64, i64* %22, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %20)
  %219 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %10, i64 0, i32 0, i64 14
  %220 = load i8, i8* %219, align 2
  %221 = zext i8 %220 to i16
  %222 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %13, i64 0, i32 0, i64 14
  %223 = load i8, i8* %222, align 2
  %224 = sext i8 %223 to i16
  %225 = mul nsw i16 %224, %221
  %226 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %10, i64 0, i32 0, i64 15
  %227 = load i8, i8* %226, align 1
  %228 = zext i8 %227 to i16
  %229 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %13, i64 0, i32 0, i64 15
  %230 = load i8, i8* %229, align 1
  %231 = sext i8 %230 to i16
  %232 = mul nsw i16 %231, %228
  %233 = add i16 %232, %225
  %234 = or i16 %232, %225
  %235 = and i16 %232, %225
  %236 = xor i16 %234, -32768
  %237 = and i16 %236, %233
  %238 = icmp slt i16 %237, 0
  %239 = select i1 %238, i16 32767, i16 %233
  %240 = xor i16 %233, -32768
  %241 = and i16 %235, %240
  %242 = icmp slt i16 %241, 0
  %243 = select i1 %242, i16 -32768, i16 %239
  call void @llvm.lifetime.start(i64 16, i8* nonnull %20)
  store i64 %134, i64* %21, align 16
  store i64 %218, i64* %22, align 8
  %244 = getelementptr inbounds [8 x i16], [8 x i16]* %23, i64 0, i64 7
  store i16 %243, i16* %244, align 2
  %245 = load i64, i64* %22, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %20)
  %246 = lshr i64 %134, 16
  %247 = lshr i64 %134, 32
  %248 = lshr i64 %134, 48
  %249 = trunc i64 %134 to i16
  %250 = trunc i64 %246 to i16
  %251 = trunc i64 %247 to i16
  %252 = trunc i64 %248 to i16
  %253 = bitcast i8* %2 to i16*
  store i16 %249, i16* %253, align 1
  %254 = getelementptr inbounds i8, i8* %2, i64 2
  %255 = bitcast i8* %254 to i16*
  store i16 %250, i16* %255, align 1
  %256 = getelementptr inbounds i8, i8* %2, i64 4
  %257 = bitcast i8* %256 to i16*
  store i16 %251, i16* %257, align 1
  %258 = getelementptr inbounds i8, i8* %2, i64 6
  %259 = bitcast i8* %258 to i16*
  store i16 %252, i16* %259, align 1
  %260 = trunc i64 %245 to i16
  %261 = getelementptr inbounds i8, i8* %2, i64 8
  %262 = bitcast i8* %261 to i16*
  store i16 %260, i16* %262, align 1
  %263 = lshr i64 %245, 16
  %264 = trunc i64 %263 to i16
  %265 = getelementptr inbounds i8, i8* %2, i64 10
  %266 = bitcast i8* %265 to i16*
  store i16 %264, i16* %266, align 1
  %267 = lshr i64 %245, 32
  %268 = trunc i64 %267 to i16
  %269 = getelementptr inbounds i8, i8* %2, i64 12
  %270 = bitcast i8* %269 to i16*
  store i16 %268, i16* %270, align 1
  %271 = lshr i64 %245, 48
  %272 = trunc i64 %271 to i16
  %273 = getelementptr inbounds i8, i8* %2, i64 14
  %274 = bitcast i8* %273 to i16*
  store i16 %272, i16* %274, align 1
  call void @llvm.lifetime.end(i64 16, i8* nonnull %17) 
  call void @llvm.lifetime.end(i64 16, i8* nonnull %14) 
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L9PMADDUBSWI3VnWI8vec128_tE2VnIS2_E3MVnIS2_EEEP6MemoryS9_R5StateT_T0_T1_(%struct.Memory* returned, %struct.State* nocapture readnone dereferenceable(3376), i8* nocapture, i8* nocapture readonly, i64)  {
  %6 = alloca <2 x i64>, align 16
  %7 = bitcast <2 x i64>* %6 to { i64, i64 }*
  %8 = alloca <2 x i64>, align 16
  %9 = bitcast <2 x i64>* %8 to { i64, i64 }*
  %10 = bitcast <2 x i64>* %8 to %struct.uint8v16_t*
  %11 = alloca <2 x i64>, align 16
  %12 = bitcast <2 x i64>* %11 to { i64, i64 }*
  %13 = bitcast <2 x i64>* %11 to %struct.uint8v16_t*
  %14 = bitcast <2 x i64>* %8 to i8*
  call void @llvm.lifetime.start(i64 16, i8* nonnull %14) 
  %15 = bitcast i8* %3 to <2 x i64>*
  %16 = load <2 x i64>, <2 x i64>* %15, align 1
  store <2 x i64> %16, <2 x i64>* %8, align 16
  %17 = bitcast <2 x i64>* %11 to i8*
  call void @llvm.lifetime.start(i64 16, i8* nonnull %17) 
  %18 = inttoptr i64 %4 to i8*
  %19 = load i8, i8* %18
  %20 = add i64 %4, 1
  %21 = inttoptr i64 %20 to i8*
  %22 = load i8, i8* %21
  %23 = add i64 %4, 2
  %24 = inttoptr i64 %23 to i8*
  %25 = load i8, i8* %24
  %26 = add i64 %4, 3
  %27 = inttoptr i64 %26 to i8*
  %28 = load i8, i8* %27
  %29 = add i64 %4, 4
  %30 = inttoptr i64 %29 to i8*
  %31 = load i8, i8* %30
  %32 = add i64 %4, 5
  %33 = inttoptr i64 %32 to i8*
  %34 = load i8, i8* %33
  %35 = add i64 %4, 6
  %36 = inttoptr i64 %35 to i8*
  %37 = load i8, i8* %36
  %38 = add i64 %4, 7
  %39 = inttoptr i64 %38 to i8*
  %40 = load i8, i8* %39
  %41 = add i64 %4, 8
  %42 = inttoptr i64 %41 to i8*
  %43 = load i8, i8* %42
  %44 = add i64 %4, 9
  %45 = inttoptr i64 %44 to i8*
  %46 = load i8, i8* %45
  %47 = add i64 %4, 10
  %48 = inttoptr i64 %47 to i8*
  %49 = load i8, i8* %48
  %50 = add i64 %4, 11
  %51 = inttoptr i64 %50 to i8*
  %52 = load i8, i8* %51
  %53 = add i64 %4, 12
  %54 = inttoptr i64 %53 to i8*
  %55 = load i8, i8* %54
  %56 = add i64 %4, 13
  %57 = inttoptr i64 %56 to i8*
  %58 = load i8, i8* %57
  %59 = add i64 %4, 14
  %60 = inttoptr i64 %59 to i8*
  %61 = load i8, i8* %60
  %62 = add i64 %4, 15
  %63 = inttoptr i64 %62 to i8*
  %64 = load i8, i8* %63
  %65 = insertelement <2 x i8> undef, i8 %40, i32 0
  %66 = insertelement <2 x i8> %65, i8 %64, i32 1
  %67 = zext <2 x i8> %66 to <2 x i64>
  %68 = shl nuw <2 x i64> %67, <i64 56, i64 56>
  %69 = insertelement <2 x i8> undef, i8 %37, i32 0
  %70 = insertelement <2 x i8> %69, i8 %61, i32 1
  %71 = zext <2 x i8> %70 to <2 x i64>
  %72 = shl nuw nsw <2 x i64> %71, <i64 48, i64 48>
  %73 = insertelement <2 x i8> undef, i8 %34, i32 0
  %74 = insertelement <2 x i8> %73, i8 %58, i32 1
  %75 = zext <2 x i8> %74 to <2 x i64>
  %76 = shl nuw nsw <2 x i64> %75, <i64 40, i64 40>
  %77 = insertelement <2 x i8> undef, i8 %31, i32 0
  %78 = insertelement <2 x i8> %77, i8 %55, i32 1
  %79 = zext <2 x i8> %78 to <2 x i64>
  %80 = shl nuw nsw <2 x i64> %79, <i64 32, i64 32>
  %81 = insertelement <2 x i8> undef, i8 %28, i32 0
  %82 = insertelement <2 x i8> %81, i8 %52, i32 1
  %83 = zext <2 x i8> %82 to <2 x i64>
  %84 = shl nuw nsw <2 x i64> %83, <i64 24, i64 24>
  %85 = insertelement <2 x i8> undef, i8 %25, i32 0
  %86 = insertelement <2 x i8> %85, i8 %49, i32 1
  %87 = zext <2 x i8> %86 to <2 x i64>
  %88 = shl nuw nsw <2 x i64> %87, <i64 16, i64 16>
  %89 = insertelement <2 x i8> undef, i8 %22, i32 0
  %90 = insertelement <2 x i8> %89, i8 %46, i32 1
  %91 = zext <2 x i8> %90 to <2 x i64>
  %92 = shl nuw nsw <2 x i64> %91, <i64 8, i64 8>
  %93 = insertelement <2 x i8> undef, i8 %19, i32 0
  %94 = insertelement <2 x i8> %93, i8 %43, i32 1
  %95 = zext <2 x i8> %94 to <2 x i64>
  %96 = or <2 x i64> %92, %95
  %97 = or <2 x i64> %96, %88
  %98 = or <2 x i64> %97, %84
  %99 = or <2 x i64> %98, %80
  %100 = or <2 x i64> %99, %76
  %101 = or <2 x i64> %100, %72
  %102 = or <2 x i64> %101, %68
  store <2 x i64> %102, <2 x i64>* %11, align 16
  %103 = bitcast <2 x i64>* %6 to i8*
  %104 = getelementptr inbounds <2 x i64>, <2 x i64>* %6, i64 0, i64 0
  %105 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %7, i64 0, i32 1
  %106 = bitcast <2 x i64>* %6 to [8 x i16]*
  %107 = extractelement <2 x i64> %16, i32 0
  %108 = trunc i64 %107 to i16
  %109 = and i16 %108, 255
  %110 = sext i8 %19 to i16
  %111 = mul nsw i16 %110, %109
  %112 = lshr i64 %107, 8
  %113 = trunc i64 %112 to i16
  %114 = and i16 %113, 255
  %115 = sext i8 %22 to i16
  %116 = mul nsw i16 %115, %114
  %117 = add i16 %116, %111
  %118 = or i16 %116, %111
  %119 = and i16 %116, %111
  %120 = xor i16 %118, -32768
  %121 = and i16 %120, %117
  %122 = icmp slt i16 %121, 0
  %123 = select i1 %122, i16 32767, i16 %117
  %124 = xor i16 %117, -32768
  %125 = and i16 %119, %124
  %126 = icmp slt i16 %125, 0
  %127 = select i1 %126, i16 -32768, i16 %123
  call void @llvm.lifetime.start(i64 16, i8* nonnull %103)
  store <2 x i64> zeroinitializer, <2 x i64>* %6, align 16
  %128 = bitcast <2 x i64>* %6 to i16*
  store i16 %127, i16* %128, align 16
  %129 = load i64, i64* %104, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %103)
  %130 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %10, i64 0, i32 0, i64 2
  %131 = load i8, i8* %130, align 2
  %132 = zext i8 %131 to i16
  %133 = sext i8 %25 to i16
  %134 = mul nsw i16 %133, %132
  %135 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %10, i64 0, i32 0, i64 3
  %136 = load i8, i8* %135, align 1
  %137 = zext i8 %136 to i16
  %138 = sext i8 %28 to i16
  %139 = mul nsw i16 %138, %137
  %140 = add i16 %139, %134
  %141 = or i16 %139, %134
  %142 = and i16 %139, %134
  %143 = xor i16 %141, -32768
  %144 = and i16 %143, %140
  %145 = icmp slt i16 %144, 0
  %146 = select i1 %145, i16 32767, i16 %140
  %147 = xor i16 %140, -32768
  %148 = and i16 %142, %147
  %149 = icmp slt i16 %148, 0
  %150 = select i1 %149, i16 -32768, i16 %146
  call void @llvm.lifetime.start(i64 16, i8* nonnull %103)
  store i64 %129, i64* %104, align 16
  store i64 0, i64* %105, align 8
  %151 = getelementptr inbounds [8 x i16], [8 x i16]* %106, i64 0, i64 1
  store i16 %150, i16* %151, align 2
  %152 = load i64, i64* %104, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %103)
  %153 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %10, i64 0, i32 0, i64 4
  %154 = load i8, i8* %153, align 4
  %155 = zext i8 %154 to i16
  %156 = extractelement <2 x i64> %99, i32 0
  %157 = lshr i64 %156, 32
  %158 = shl nuw nsw i64 %157, 8
  %159 = trunc i64 %158 to i16
  %160 = ashr exact i16 %159, 8
  %161 = mul nsw i16 %160, %155
  %162 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %10, i64 0, i32 0, i64 5
  %163 = load i8, i8* %162, align 1
  %164 = zext i8 %163 to i16
  %165 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %13, i64 0, i32 0, i64 5
  %166 = load i8, i8* %165, align 1
  %167 = sext i8 %166 to i16
  %168 = mul nsw i16 %167, %164
  %169 = add i16 %168, %161
  %170 = or i16 %168, %161
  %171 = and i16 %168, %161
  %172 = xor i16 %170, -32768
  %173 = and i16 %172, %169
  %174 = icmp slt i16 %173, 0
  %175 = select i1 %174, i16 32767, i16 %169
  %176 = xor i16 %169, -32768
  %177 = and i16 %171, %176
  %178 = icmp slt i16 %177, 0
  %179 = select i1 %178, i16 -32768, i16 %175
  call void @llvm.lifetime.start(i64 16, i8* nonnull %103)
  store i64 %152, i64* %104, align 16
  store i64 0, i64* %105, align 8
  %180 = getelementptr inbounds [8 x i16], [8 x i16]* %106, i64 0, i64 2
  store i16 %179, i16* %180, align 4
  %181 = load i64, i64* %104, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %103)
  %182 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %10, i64 0, i32 0, i64 6
  %183 = load i8, i8* %182, align 2
  %184 = zext i8 %183 to i16
  %185 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %13, i64 0, i32 0, i64 6
  %186 = load i8, i8* %185, align 2
  %187 = sext i8 %186 to i16
  %188 = mul nsw i16 %187, %184
  %189 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %10, i64 0, i32 0, i64 7
  %190 = load i8, i8* %189, align 1
  %191 = zext i8 %190 to i16
  %192 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %13, i64 0, i32 0, i64 7
  %193 = load i8, i8* %192, align 1
  %194 = sext i8 %193 to i16
  %195 = mul nsw i16 %194, %191
  %196 = add i16 %195, %188
  %197 = or i16 %195, %188
  %198 = and i16 %195, %188
  %199 = xor i16 %197, -32768
  %200 = and i16 %199, %196
  %201 = icmp slt i16 %200, 0
  %202 = select i1 %201, i16 32767, i16 %196
  %203 = xor i16 %196, -32768
  %204 = and i16 %198, %203
  %205 = icmp slt i16 %204, 0
  %206 = select i1 %205, i16 -32768, i16 %202
  call void @llvm.lifetime.start(i64 16, i8* nonnull %103)
  store i64 %181, i64* %104, align 16
  store i64 0, i64* %105, align 8
  %207 = getelementptr inbounds [8 x i16], [8 x i16]* %106, i64 0, i64 3
  store i16 %206, i16* %207, align 2
  %208 = load i64, i64* %104, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %103)
  %209 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %9, i64 0, i32 1
  %210 = bitcast i64* %209 to i8*
  %211 = load i8, i8* %210, align 8
  %212 = zext i8 %211 to i16
  %213 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %12, i64 0, i32 1
  %214 = bitcast i64* %213 to i8*
  %215 = load i8, i8* %214, align 8
  %216 = sext i8 %215 to i16
  %217 = mul nsw i16 %216, %212
  %218 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %10, i64 0, i32 0, i64 9
  %219 = load i8, i8* %218, align 1
  %220 = zext i8 %219 to i16
  %221 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %13, i64 0, i32 0, i64 9
  %222 = load i8, i8* %221, align 1
  %223 = sext i8 %222 to i16
  %224 = mul nsw i16 %223, %220
  %225 = add i16 %224, %217
  %226 = or i16 %224, %217
  %227 = and i16 %224, %217
  %228 = xor i16 %226, -32768
  %229 = and i16 %228, %225
  %230 = icmp slt i16 %229, 0
  %231 = select i1 %230, i16 32767, i16 %225
  %232 = xor i16 %225, -32768
  %233 = and i16 %227, %232
  %234 = icmp slt i16 %233, 0
  %235 = select i1 %234, i16 -32768, i16 %231
  call void @llvm.lifetime.start(i64 16, i8* nonnull %103)
  store i64 %208, i64* %104, align 16
  store i64 0, i64* %105, align 8
  %236 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %7, i64 0, i32 1
  %237 = bitcast i64* %236 to i16*
  store i16 %235, i16* %237, align 8
  %238 = load i64, i64* %105, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %103)
  %239 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %10, i64 0, i32 0, i64 10
  %240 = load i8, i8* %239, align 2
  %241 = zext i8 %240 to i16
  %242 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %13, i64 0, i32 0, i64 10
  %243 = load i8, i8* %242, align 2
  %244 = sext i8 %243 to i16
  %245 = mul nsw i16 %244, %241
  %246 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %10, i64 0, i32 0, i64 11
  %247 = load i8, i8* %246, align 1
  %248 = zext i8 %247 to i16
  %249 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %13, i64 0, i32 0, i64 11
  %250 = load i8, i8* %249, align 1
  %251 = sext i8 %250 to i16
  %252 = mul nsw i16 %251, %248
  %253 = add i16 %252, %245
  %254 = or i16 %252, %245
  %255 = and i16 %252, %245
  %256 = xor i16 %254, -32768
  %257 = and i16 %256, %253
  %258 = icmp slt i16 %257, 0
  %259 = select i1 %258, i16 32767, i16 %253
  %260 = xor i16 %253, -32768
  %261 = and i16 %255, %260
  %262 = icmp slt i16 %261, 0
  %263 = select i1 %262, i16 -32768, i16 %259
  call void @llvm.lifetime.start(i64 16, i8* nonnull %103)
  store i64 %208, i64* %104, align 16
  store i64 %238, i64* %105, align 8
  %264 = getelementptr inbounds [8 x i16], [8 x i16]* %106, i64 0, i64 5
  store i16 %263, i16* %264, align 2
  %265 = load i64, i64* %105, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %103)
  %266 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %10, i64 0, i32 0, i64 12
  %267 = load i8, i8* %266, align 4
  %268 = zext i8 %267 to i16
  %269 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %13, i64 0, i32 0, i64 12
  %270 = load i8, i8* %269, align 4
  %271 = sext i8 %270 to i16
  %272 = mul nsw i16 %271, %268
  %273 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %10, i64 0, i32 0, i64 13
  %274 = load i8, i8* %273, align 1
  %275 = zext i8 %274 to i16
  %276 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %13, i64 0, i32 0, i64 13
  %277 = load i8, i8* %276, align 1
  %278 = sext i8 %277 to i16
  %279 = mul nsw i16 %278, %275
  %280 = add i16 %279, %272
  %281 = or i16 %279, %272
  %282 = and i16 %279, %272
  %283 = xor i16 %281, -32768
  %284 = and i16 %283, %280
  %285 = icmp slt i16 %284, 0
  %286 = select i1 %285, i16 32767, i16 %280
  %287 = xor i16 %280, -32768
  %288 = and i16 %282, %287
  %289 = icmp slt i16 %288, 0
  %290 = select i1 %289, i16 -32768, i16 %286
  call void @llvm.lifetime.start(i64 16, i8* nonnull %103)
  store i64 %208, i64* %104, align 16
  store i64 %265, i64* %105, align 8
  %291 = getelementptr inbounds [8 x i16], [8 x i16]* %106, i64 0, i64 6
  store i16 %290, i16* %291, align 4
  %292 = load i64, i64* %105, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %103)
  %293 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %10, i64 0, i32 0, i64 14
  %294 = load i8, i8* %293, align 2
  %295 = zext i8 %294 to i16
  %296 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %13, i64 0, i32 0, i64 14
  %297 = load i8, i8* %296, align 2
  %298 = sext i8 %297 to i16
  %299 = mul nsw i16 %298, %295
  %300 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %10, i64 0, i32 0, i64 15
  %301 = load i8, i8* %300, align 1
  %302 = zext i8 %301 to i16
  %303 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %13, i64 0, i32 0, i64 15
  %304 = load i8, i8* %303, align 1
  %305 = sext i8 %304 to i16
  %306 = mul nsw i16 %305, %302
  %307 = add i16 %306, %299
  %308 = or i16 %306, %299
  %309 = and i16 %306, %299
  %310 = xor i16 %308, -32768
  %311 = and i16 %310, %307
  %312 = icmp slt i16 %311, 0
  %313 = select i1 %312, i16 32767, i16 %307
  %314 = xor i16 %307, -32768
  %315 = and i16 %309, %314
  %316 = icmp slt i16 %315, 0
  %317 = select i1 %316, i16 -32768, i16 %313
  call void @llvm.lifetime.start(i64 16, i8* nonnull %103)
  store i64 %208, i64* %104, align 16
  store i64 %292, i64* %105, align 8
  %318 = getelementptr inbounds [8 x i16], [8 x i16]* %106, i64 0, i64 7
  store i16 %317, i16* %318, align 2
  %319 = load i64, i64* %105, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %103)
  %320 = lshr i64 %208, 16
  %321 = lshr i64 %208, 32
  %322 = lshr i64 %208, 48
  %323 = trunc i64 %208 to i16
  %324 = trunc i64 %320 to i16
  %325 = trunc i64 %321 to i16
  %326 = trunc i64 %322 to i16
  %327 = bitcast i8* %2 to i16*
  store i16 %323, i16* %327, align 1
  %328 = getelementptr inbounds i8, i8* %2, i64 2
  %329 = bitcast i8* %328 to i16*
  store i16 %324, i16* %329, align 1
  %330 = getelementptr inbounds i8, i8* %2, i64 4
  %331 = bitcast i8* %330 to i16*
  store i16 %325, i16* %331, align 1
  %332 = getelementptr inbounds i8, i8* %2, i64 6
  %333 = bitcast i8* %332 to i16*
  store i16 %326, i16* %333, align 1
  %334 = trunc i64 %319 to i16
  %335 = getelementptr inbounds i8, i8* %2, i64 8
  %336 = bitcast i8* %335 to i16*
  store i16 %334, i16* %336, align 1
  %337 = lshr i64 %319, 16
  %338 = trunc i64 %337 to i16
  %339 = getelementptr inbounds i8, i8* %2, i64 10
  %340 = bitcast i8* %339 to i16*
  store i16 %338, i16* %340, align 1
  %341 = lshr i64 %319, 32
  %342 = trunc i64 %341 to i16
  %343 = getelementptr inbounds i8, i8* %2, i64 12
  %344 = bitcast i8* %343 to i16*
  store i16 %342, i16* %344, align 1
  %345 = lshr i64 %319, 48
  %346 = trunc i64 %345 to i16
  %347 = getelementptr inbounds i8, i8* %2, i64 14
  %348 = bitcast i8* %347 to i16*
  store i16 %346, i16* %348, align 1
  call void @llvm.lifetime.end(i64 16, i8* nonnull %17) 
  call void @llvm.lifetime.end(i64 16, i8* nonnull %14) 
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L5PABSBI4RVnWI7vec64_tE3RVnIS2_EEEP6MemoryS7_R5StateT_T0_(%struct.Memory* readnone returned, %struct.State* nocapture readnone dereferenceable(3376), i64* nocapture, i64)  {
  %5 = alloca i64, align 8
  %6 = alloca i64, align 8
  %7 = bitcast i64* %6 to %struct.uint8v8_t*
  %8 = bitcast i64* %6 to i8*
  call void @llvm.lifetime.start(i64 8, i8* nonnull %8) 
  store i64 %3, i64* %6, align 8
  %9 = bitcast i64* %5 to i8*
  %10 = bitcast i64* %5 to [8 x i8]*
  %11 = trunc i64 %3 to i8
  %12 = ashr i8 %11, 7
  %13 = xor i8 %12, %11
  %14 = sub i8 %13, %12
  call void @llvm.lifetime.start(i64 8, i8* nonnull %9)
  store i64 0, i64* %5, align 8
  %15 = bitcast i64* %5 to i8*
  store i8 %14, i8* %15, align 8
  %16 = load i64, i64* %5, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %9)
  %17 = lshr i64 %3, 8
  %18 = trunc i64 %17 to i8
  %19 = ashr i8 %18, 7
  %20 = xor i8 %19, %18
  %21 = sub i8 %20, %19
  call void @llvm.lifetime.start(i64 8, i8* nonnull %9)
  store i64 %16, i64* %5, align 8
  %22 = getelementptr inbounds [8 x i8], [8 x i8]* %10, i64 0, i64 1
  store i8 %21, i8* %22, align 1
  %23 = load i64, i64* %5, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %9)
  %24 = lshr i64 %3, 16
  %25 = trunc i64 %24 to i8
  %26 = ashr i8 %25, 7
  %27 = xor i8 %26, %25
  %28 = sub i8 %27, %26
  call void @llvm.lifetime.start(i64 8, i8* nonnull %9)
  store i64 %23, i64* %5, align 8
  %29 = getelementptr inbounds [8 x i8], [8 x i8]* %10, i64 0, i64 2
  store i8 %28, i8* %29, align 2
  %30 = load i64, i64* %5, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %9)
  %31 = getelementptr inbounds %struct.uint8v8_t, %struct.uint8v8_t* %7, i64 0, i32 0, i64 3
  %32 = load i8, i8* %31, align 1
  %33 = ashr i8 %32, 7
  %34 = xor i8 %33, %32
  %35 = sub i8 %34, %33
  call void @llvm.lifetime.start(i64 8, i8* nonnull %9)
  store i64 %30, i64* %5, align 8
  %36 = getelementptr inbounds [8 x i8], [8 x i8]* %10, i64 0, i64 3
  store i8 %35, i8* %36, align 1
  %37 = load i64, i64* %5, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %9)
  %38 = getelementptr inbounds %struct.uint8v8_t, %struct.uint8v8_t* %7, i64 0, i32 0, i64 4
  %39 = load i8, i8* %38, align 4
  %40 = ashr i8 %39, 7
  %41 = xor i8 %40, %39
  %42 = sub i8 %41, %40
  call void @llvm.lifetime.start(i64 8, i8* nonnull %9)
  store i64 %37, i64* %5, align 8
  %43 = getelementptr inbounds [8 x i8], [8 x i8]* %10, i64 0, i64 4
  store i8 %42, i8* %43, align 4
  %44 = load i64, i64* %5, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %9)
  %45 = getelementptr inbounds %struct.uint8v8_t, %struct.uint8v8_t* %7, i64 0, i32 0, i64 5
  %46 = load i8, i8* %45, align 1
  %47 = ashr i8 %46, 7
  %48 = xor i8 %47, %46
  %49 = sub i8 %48, %47
  call void @llvm.lifetime.start(i64 8, i8* nonnull %9)
  store i64 %44, i64* %5, align 8
  %50 = getelementptr inbounds [8 x i8], [8 x i8]* %10, i64 0, i64 5
  store i8 %49, i8* %50, align 1
  %51 = load i64, i64* %5, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %9)
  %52 = getelementptr inbounds %struct.uint8v8_t, %struct.uint8v8_t* %7, i64 0, i32 0, i64 6
  %53 = load i8, i8* %52, align 2
  %54 = ashr i8 %53, 7
  %55 = xor i8 %54, %53
  %56 = sub i8 %55, %54
  call void @llvm.lifetime.start(i64 8, i8* nonnull %9)
  store i64 %51, i64* %5, align 8
  %57 = getelementptr inbounds [8 x i8], [8 x i8]* %10, i64 0, i64 6
  store i8 %56, i8* %57, align 2
  %58 = load i64, i64* %5, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %9)
  %59 = getelementptr inbounds %struct.uint8v8_t, %struct.uint8v8_t* %7, i64 0, i32 0, i64 7
  %60 = load i8, i8* %59, align 1
  %61 = ashr i8 %60, 7
  %62 = xor i8 %61, %60
  %63 = sub i8 %62, %61
  call void @llvm.lifetime.start(i64 8, i8* nonnull %9)
  store i64 %58, i64* %5, align 8
  %64 = getelementptr inbounds [8 x i8], [8 x i8]* %10, i64 0, i64 7
  store i8 %63, i8* %64, align 1
  %65 = load i64, i64* %5, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %9)
  %66 = lshr i64 %65, 8
  %67 = lshr i64 %65, 16
  %68 = lshr i64 %65, 24
  %69 = lshr i64 %65, 32
  %70 = lshr i64 %65, 40
  %71 = lshr i64 %65, 48
  %72 = lshr i64 %65, 56
  %73 = trunc i64 %65 to i8
  %74 = trunc i64 %66 to i8
  %75 = trunc i64 %67 to i8
  %76 = trunc i64 %68 to i8
  %77 = trunc i64 %69 to i8
  %78 = trunc i64 %70 to i8
  %79 = trunc i64 %71 to i8
  %80 = trunc i64 %72 to i8
  %81 = bitcast i64* %2 to [8 x i8]*
  %82 = bitcast i64* %2 to i8*
  store i8 %73, i8* %82, align 1
  %83 = getelementptr inbounds [8 x i8], [8 x i8]* %81, i64 0, i64 1
  store i8 %74, i8* %83, align 1
  %84 = getelementptr inbounds [8 x i8], [8 x i8]* %81, i64 0, i64 2
  store i8 %75, i8* %84, align 1
  %85 = getelementptr inbounds [8 x i8], [8 x i8]* %81, i64 0, i64 3
  store i8 %76, i8* %85, align 1
  %86 = getelementptr inbounds [8 x i8], [8 x i8]* %81, i64 0, i64 4
  store i8 %77, i8* %86, align 1
  %87 = getelementptr inbounds [8 x i8], [8 x i8]* %81, i64 0, i64 5
  store i8 %78, i8* %87, align 1
  %88 = getelementptr inbounds [8 x i8], [8 x i8]* %81, i64 0, i64 6
  store i8 %79, i8* %88, align 1
  %89 = getelementptr inbounds [8 x i8], [8 x i8]* %81, i64 0, i64 7
  store i8 %80, i8* %89, align 1
  call void @llvm.lifetime.end(i64 8, i8* nonnull %8) 
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L5PABSBI4RVnWI7vec64_tE3MVnIS2_EEEP6MemoryS7_R5StateT_T0_(%struct.Memory* returned, %struct.State* nocapture readnone dereferenceable(3376), i64* nocapture, i64)  {
  %5 = alloca i64, align 8
  %6 = alloca i64, align 8
  %7 = bitcast i64* %6 to %struct.uint8v8_t*
  %8 = bitcast i64* %6 to i8*
  call void @llvm.lifetime.start(i64 8, i8* nonnull %8) 
  %9 = inttoptr i64 %3 to i8*
  %10 = load i8, i8* %9
  %11 = add i64 %3, 1
  %12 = inttoptr i64 %11 to i8*
  %13 = load i8, i8* %12
  %14 = add i64 %3, 2
  %15 = inttoptr i64 %14 to i8*
  %16 = load i8, i8* %15
  %17 = add i64 %3, 3
  %18 = inttoptr i64 %17 to i8*
  %19 = load i8, i8* %18
  %20 = add i64 %3, 4
  %21 = inttoptr i64 %20 to i8*
  %22 = load i8, i8* %21
  %23 = add i64 %3, 5
  %24 = inttoptr i64 %23 to i8*
  %25 = load i8, i8* %24
  %26 = add i64 %3, 6
  %27 = inttoptr i64 %26 to i8*
  %28 = load i8, i8* %27
  %29 = add i64 %3, 7
  %30 = inttoptr i64 %29 to i8*
  %31 = load i8, i8* %30
  %32 = zext i8 %31 to i64
  %33 = shl nuw i64 %32, 56
  %34 = zext i8 %28 to i64
  %35 = shl nuw nsw i64 %34, 48
  %36 = zext i8 %25 to i64
  %37 = shl nuw nsw i64 %36, 40
  %38 = zext i8 %22 to i64
  %39 = shl nuw nsw i64 %38, 32
  %40 = zext i8 %19 to i64
  %41 = shl nuw nsw i64 %40, 24
  %42 = zext i8 %16 to i64
  %43 = shl nuw nsw i64 %42, 16
  %44 = zext i8 %13 to i64
  %45 = shl nuw nsw i64 %44, 8
  %46 = zext i8 %10 to i64
  %47 = or i64 %45, %46
  %48 = or i64 %47, %43
  %49 = or i64 %48, %41
  %50 = or i64 %49, %39
  %51 = or i64 %50, %37
  %52 = or i64 %51, %35
  %53 = or i64 %52, %33
  store i64 %53, i64* %6, align 8
  %54 = bitcast i64* %5 to i8*
  %55 = bitcast i64* %5 to [8 x i8]*
  %56 = ashr i8 %10, 7
  %57 = xor i8 %56, %10
  %58 = sub i8 %57, %56
  call void @llvm.lifetime.start(i64 8, i8* nonnull %54)
  store i64 0, i64* %5, align 8
  %59 = bitcast i64* %5 to i8*
  store i8 %58, i8* %59, align 8
  %60 = load i64, i64* %5, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %54)
  %61 = ashr i8 %13, 7
  %62 = xor i8 %61, %13
  %63 = sub i8 %62, %61
  call void @llvm.lifetime.start(i64 8, i8* nonnull %54)
  store i64 %60, i64* %5, align 8
  %64 = getelementptr inbounds [8 x i8], [8 x i8]* %55, i64 0, i64 1
  store i8 %63, i8* %64, align 1
  %65 = load i64, i64* %5, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %54)
  %66 = ashr i8 %16, 7
  %67 = xor i8 %66, %16
  %68 = sub i8 %67, %66
  call void @llvm.lifetime.start(i64 8, i8* nonnull %54)
  store i64 %65, i64* %5, align 8
  %69 = getelementptr inbounds [8 x i8], [8 x i8]* %55, i64 0, i64 2
  store i8 %68, i8* %69, align 2
  %70 = load i64, i64* %5, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %54)
  %71 = getelementptr inbounds %struct.uint8v8_t, %struct.uint8v8_t* %7, i64 0, i32 0, i64 3
  %72 = load i8, i8* %71, align 1
  %73 = ashr i8 %72, 7
  %74 = xor i8 %73, %72
  %75 = sub i8 %74, %73
  call void @llvm.lifetime.start(i64 8, i8* nonnull %54)
  store i64 %70, i64* %5, align 8
  %76 = getelementptr inbounds [8 x i8], [8 x i8]* %55, i64 0, i64 3
  store i8 %75, i8* %76, align 1
  %77 = load i64, i64* %5, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %54)
  %78 = getelementptr inbounds %struct.uint8v8_t, %struct.uint8v8_t* %7, i64 0, i32 0, i64 4
  %79 = load i8, i8* %78, align 4
  %80 = ashr i8 %79, 7
  %81 = xor i8 %80, %79
  %82 = sub i8 %81, %80
  call void @llvm.lifetime.start(i64 8, i8* nonnull %54)
  store i64 %77, i64* %5, align 8
  %83 = getelementptr inbounds [8 x i8], [8 x i8]* %55, i64 0, i64 4
  store i8 %82, i8* %83, align 4
  %84 = load i64, i64* %5, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %54)
  %85 = getelementptr inbounds %struct.uint8v8_t, %struct.uint8v8_t* %7, i64 0, i32 0, i64 5
  %86 = load i8, i8* %85, align 1
  %87 = ashr i8 %86, 7
  %88 = xor i8 %87, %86
  %89 = sub i8 %88, %87
  call void @llvm.lifetime.start(i64 8, i8* nonnull %54)
  store i64 %84, i64* %5, align 8
  %90 = getelementptr inbounds [8 x i8], [8 x i8]* %55, i64 0, i64 5
  store i8 %89, i8* %90, align 1
  %91 = load i64, i64* %5, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %54)
  %92 = getelementptr inbounds %struct.uint8v8_t, %struct.uint8v8_t* %7, i64 0, i32 0, i64 6
  %93 = load i8, i8* %92, align 2
  %94 = ashr i8 %93, 7
  %95 = xor i8 %94, %93
  %96 = sub i8 %95, %94
  call void @llvm.lifetime.start(i64 8, i8* nonnull %54)
  store i64 %91, i64* %5, align 8
  %97 = getelementptr inbounds [8 x i8], [8 x i8]* %55, i64 0, i64 6
  store i8 %96, i8* %97, align 2
  %98 = load i64, i64* %5, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %54)
  %99 = getelementptr inbounds %struct.uint8v8_t, %struct.uint8v8_t* %7, i64 0, i32 0, i64 7
  %100 = load i8, i8* %99, align 1
  %101 = ashr i8 %100, 7
  %102 = xor i8 %101, %100
  %103 = sub i8 %102, %101
  call void @llvm.lifetime.start(i64 8, i8* nonnull %54)
  store i64 %98, i64* %5, align 8
  %104 = getelementptr inbounds [8 x i8], [8 x i8]* %55, i64 0, i64 7
  store i8 %103, i8* %104, align 1
  %105 = load i64, i64* %5, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %54)
  %106 = lshr i64 %105, 8
  %107 = lshr i64 %105, 16
  %108 = lshr i64 %105, 24
  %109 = lshr i64 %105, 32
  %110 = lshr i64 %105, 40
  %111 = lshr i64 %105, 48
  %112 = lshr i64 %105, 56
  %113 = trunc i64 %105 to i8
  %114 = trunc i64 %106 to i8
  %115 = trunc i64 %107 to i8
  %116 = trunc i64 %108 to i8
  %117 = trunc i64 %109 to i8
  %118 = trunc i64 %110 to i8
  %119 = trunc i64 %111 to i8
  %120 = trunc i64 %112 to i8
  %121 = bitcast i64* %2 to [8 x i8]*
  %122 = bitcast i64* %2 to i8*
  store i8 %113, i8* %122, align 1
  %123 = getelementptr inbounds [8 x i8], [8 x i8]* %121, i64 0, i64 1
  store i8 %114, i8* %123, align 1
  %124 = getelementptr inbounds [8 x i8], [8 x i8]* %121, i64 0, i64 2
  store i8 %115, i8* %124, align 1
  %125 = getelementptr inbounds [8 x i8], [8 x i8]* %121, i64 0, i64 3
  store i8 %116, i8* %125, align 1
  %126 = getelementptr inbounds [8 x i8], [8 x i8]* %121, i64 0, i64 4
  store i8 %117, i8* %126, align 1
  %127 = getelementptr inbounds [8 x i8], [8 x i8]* %121, i64 0, i64 5
  store i8 %118, i8* %127, align 1
  %128 = getelementptr inbounds [8 x i8], [8 x i8]* %121, i64 0, i64 6
  store i8 %119, i8* %128, align 1
  %129 = getelementptr inbounds [8 x i8], [8 x i8]* %121, i64 0, i64 7
  store i8 %120, i8* %129, align 1
  call void @llvm.lifetime.end(i64 8, i8* nonnull %8) 
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L5PABSBI3VnWI8vec128_tE2VnIS2_EEEP6MemoryS7_R5StateT_T0_(%struct.Memory* readnone returned, %struct.State* nocapture readnone dereferenceable(3376), i8* nocapture, i8* nocapture readonly)  {
  %5 = alloca <2 x i64>, align 16
  %6 = bitcast <2 x i64>* %5 to { i64, i64 }*
  %7 = alloca <2 x i64>, align 16
  %8 = bitcast <2 x i64>* %7 to { i64, i64 }*
  %9 = bitcast <2 x i64>* %7 to %struct.uint8v16_t*
  %10 = bitcast <2 x i64>* %7 to i8*
  call void @llvm.lifetime.start(i64 16, i8* nonnull %10) 
  %11 = bitcast i8* %3 to <2 x i64>*
  %12 = load <2 x i64>, <2 x i64>* %11, align 1
  store <2 x i64> %12, <2 x i64>* %7, align 16
  %13 = bitcast <2 x i64>* %5 to i8*
  %14 = getelementptr inbounds <2 x i64>, <2 x i64>* %5, i64 0, i64 0
  %15 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %6, i64 0, i32 1
  %16 = bitcast <2 x i64>* %5 to [16 x i8]*
  %17 = extractelement <2 x i64> %12, i32 0
  %18 = trunc i64 %17 to i8
  %19 = ashr i8 %18, 7
  %20 = xor i8 %19, %18
  %21 = sub i8 %20, %19
  call void @llvm.lifetime.start(i64 16, i8* nonnull %13)
  store <2 x i64> zeroinitializer, <2 x i64>* %5, align 16
  %22 = bitcast <2 x i64>* %5 to i8*
  store i8 %21, i8* %22, align 16
  %23 = load i64, i64* %14, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %13)
  %24 = lshr i64 %17, 8
  %25 = trunc i64 %24 to i8
  %26 = ashr i8 %25, 7
  %27 = xor i8 %26, %25
  %28 = sub i8 %27, %26
  call void @llvm.lifetime.start(i64 16, i8* nonnull %13)
  store i64 %23, i64* %14, align 16
  store i64 0, i64* %15, align 8
  %29 = getelementptr inbounds [16 x i8], [16 x i8]* %16, i64 0, i64 1
  store i8 %28, i8* %29, align 1
  %30 = load i64, i64* %14, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %13)
  %31 = lshr i64 %17, 16
  %32 = trunc i64 %31 to i8
  %33 = ashr i8 %32, 7
  %34 = xor i8 %33, %32
  %35 = sub i8 %34, %33
  call void @llvm.lifetime.start(i64 16, i8* nonnull %13)
  store i64 %30, i64* %14, align 16
  store i64 0, i64* %15, align 8
  %36 = getelementptr inbounds [16 x i8], [16 x i8]* %16, i64 0, i64 2
  store i8 %35, i8* %36, align 2
  %37 = load i64, i64* %14, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %13)
  %38 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %9, i64 0, i32 0, i64 3
  %39 = load i8, i8* %38, align 1
  %40 = ashr i8 %39, 7
  %41 = xor i8 %40, %39
  %42 = sub i8 %41, %40
  call void @llvm.lifetime.start(i64 16, i8* nonnull %13)
  store i64 %37, i64* %14, align 16
  store i64 0, i64* %15, align 8
  %43 = getelementptr inbounds [16 x i8], [16 x i8]* %16, i64 0, i64 3
  store i8 %42, i8* %43, align 1
  %44 = load i64, i64* %14, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %13)
  %45 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %9, i64 0, i32 0, i64 4
  %46 = load i8, i8* %45, align 4
  %47 = ashr i8 %46, 7
  %48 = xor i8 %47, %46
  %49 = sub i8 %48, %47
  call void @llvm.lifetime.start(i64 16, i8* nonnull %13)
  store i64 %44, i64* %14, align 16
  store i64 0, i64* %15, align 8
  %50 = getelementptr inbounds [16 x i8], [16 x i8]* %16, i64 0, i64 4
  store i8 %49, i8* %50, align 4
  %51 = load i64, i64* %14, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %13)
  %52 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %9, i64 0, i32 0, i64 5
  %53 = load i8, i8* %52, align 1
  %54 = ashr i8 %53, 7
  %55 = xor i8 %54, %53
  %56 = sub i8 %55, %54
  call void @llvm.lifetime.start(i64 16, i8* nonnull %13)
  store i64 %51, i64* %14, align 16
  store i64 0, i64* %15, align 8
  %57 = getelementptr inbounds [16 x i8], [16 x i8]* %16, i64 0, i64 5
  store i8 %56, i8* %57, align 1
  %58 = load i64, i64* %14, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %13)
  %59 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %9, i64 0, i32 0, i64 6
  %60 = load i8, i8* %59, align 2
  %61 = ashr i8 %60, 7
  %62 = xor i8 %61, %60
  %63 = sub i8 %62, %61
  call void @llvm.lifetime.start(i64 16, i8* nonnull %13)
  store i64 %58, i64* %14, align 16
  store i64 0, i64* %15, align 8
  %64 = getelementptr inbounds [16 x i8], [16 x i8]* %16, i64 0, i64 6
  store i8 %63, i8* %64, align 2
  %65 = load i64, i64* %14, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %13)
  %66 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %9, i64 0, i32 0, i64 7
  %67 = load i8, i8* %66, align 1
  %68 = ashr i8 %67, 7
  %69 = xor i8 %68, %67
  %70 = sub i8 %69, %68
  call void @llvm.lifetime.start(i64 16, i8* nonnull %13)
  store i64 %65, i64* %14, align 16
  store i64 0, i64* %15, align 8
  %71 = getelementptr inbounds [16 x i8], [16 x i8]* %16, i64 0, i64 7
  store i8 %70, i8* %71, align 1
  %72 = load i64, i64* %14, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %13)
  %73 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %8, i64 0, i32 1
  %74 = bitcast i64* %73 to i8*
  %75 = load i8, i8* %74, align 8
  %76 = ashr i8 %75, 7
  %77 = xor i8 %76, %75
  %78 = sub i8 %77, %76
  call void @llvm.lifetime.start(i64 16, i8* nonnull %13)
  store i64 %72, i64* %14, align 16
  store i64 0, i64* %15, align 8
  %79 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %6, i64 0, i32 1
  %80 = bitcast i64* %79 to i8*
  store i8 %78, i8* %80, align 8
  %81 = load i64, i64* %15, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %13)
  %82 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %9, i64 0, i32 0, i64 9
  %83 = load i8, i8* %82, align 1
  %84 = ashr i8 %83, 7
  %85 = xor i8 %84, %83
  %86 = sub i8 %85, %84
  call void @llvm.lifetime.start(i64 16, i8* nonnull %13)
  store i64 %72, i64* %14, align 16
  store i64 %81, i64* %15, align 8
  %87 = getelementptr inbounds [16 x i8], [16 x i8]* %16, i64 0, i64 9
  store i8 %86, i8* %87, align 1
  %88 = load i64, i64* %15, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %13)
  %89 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %9, i64 0, i32 0, i64 10
  %90 = load i8, i8* %89, align 2
  %91 = ashr i8 %90, 7
  %92 = xor i8 %91, %90
  %93 = sub i8 %92, %91
  call void @llvm.lifetime.start(i64 16, i8* nonnull %13)
  store i64 %72, i64* %14, align 16
  store i64 %88, i64* %15, align 8
  %94 = getelementptr inbounds [16 x i8], [16 x i8]* %16, i64 0, i64 10
  store i8 %93, i8* %94, align 2
  %95 = load i64, i64* %15, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %13)
  %96 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %9, i64 0, i32 0, i64 11
  %97 = load i8, i8* %96, align 1
  %98 = ashr i8 %97, 7
  %99 = xor i8 %98, %97
  %100 = sub i8 %99, %98
  call void @llvm.lifetime.start(i64 16, i8* nonnull %13)
  store i64 %72, i64* %14, align 16
  store i64 %95, i64* %15, align 8
  %101 = getelementptr inbounds [16 x i8], [16 x i8]* %16, i64 0, i64 11
  store i8 %100, i8* %101, align 1
  %102 = load i64, i64* %15, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %13)
  %103 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %9, i64 0, i32 0, i64 12
  %104 = load i8, i8* %103, align 4
  %105 = ashr i8 %104, 7
  %106 = xor i8 %105, %104
  %107 = sub i8 %106, %105
  call void @llvm.lifetime.start(i64 16, i8* nonnull %13)
  store i64 %72, i64* %14, align 16
  store i64 %102, i64* %15, align 8
  %108 = getelementptr inbounds [16 x i8], [16 x i8]* %16, i64 0, i64 12
  store i8 %107, i8* %108, align 4
  %109 = load i64, i64* %15, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %13)
  %110 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %9, i64 0, i32 0, i64 13
  %111 = load i8, i8* %110, align 1
  %112 = ashr i8 %111, 7
  %113 = xor i8 %112, %111
  %114 = sub i8 %113, %112
  call void @llvm.lifetime.start(i64 16, i8* nonnull %13)
  store i64 %72, i64* %14, align 16
  store i64 %109, i64* %15, align 8
  %115 = getelementptr inbounds [16 x i8], [16 x i8]* %16, i64 0, i64 13
  store i8 %114, i8* %115, align 1
  %116 = load i64, i64* %15, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %13)
  %117 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %9, i64 0, i32 0, i64 14
  %118 = load i8, i8* %117, align 2
  %119 = ashr i8 %118, 7
  %120 = xor i8 %119, %118
  %121 = sub i8 %120, %119
  call void @llvm.lifetime.start(i64 16, i8* nonnull %13)
  store i64 %72, i64* %14, align 16
  store i64 %116, i64* %15, align 8
  %122 = getelementptr inbounds [16 x i8], [16 x i8]* %16, i64 0, i64 14
  store i8 %121, i8* %122, align 2
  %123 = load i64, i64* %15, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %13)
  %124 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %9, i64 0, i32 0, i64 15
  %125 = load i8, i8* %124, align 1
  %126 = ashr i8 %125, 7
  %127 = xor i8 %126, %125
  %128 = sub i8 %127, %126
  call void @llvm.lifetime.start(i64 16, i8* nonnull %13)
  store i64 %72, i64* %14, align 16
  store i64 %123, i64* %15, align 8
  %129 = getelementptr inbounds [16 x i8], [16 x i8]* %16, i64 0, i64 15
  store i8 %128, i8* %129, align 1
  %130 = load i64, i64* %15, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %13)
  %131 = lshr i64 %72, 8
  %132 = lshr i64 %72, 16
  %133 = lshr i64 %72, 24
  %134 = lshr i64 %72, 32
  %135 = lshr i64 %72, 40
  %136 = lshr i64 %72, 48
  %137 = lshr i64 %72, 56
  %138 = trunc i64 %72 to i8
  %139 = trunc i64 %131 to i8
  %140 = trunc i64 %132 to i8
  %141 = trunc i64 %133 to i8
  %142 = trunc i64 %134 to i8
  %143 = trunc i64 %135 to i8
  %144 = trunc i64 %136 to i8
  %145 = trunc i64 %137 to i8
  store i8 %138, i8* %2, align 1
  %146 = getelementptr inbounds i8, i8* %2, i64 1
  store i8 %139, i8* %146, align 1
  %147 = getelementptr inbounds i8, i8* %2, i64 2
  store i8 %140, i8* %147, align 1
  %148 = getelementptr inbounds i8, i8* %2, i64 3
  store i8 %141, i8* %148, align 1
  %149 = getelementptr inbounds i8, i8* %2, i64 4
  store i8 %142, i8* %149, align 1
  %150 = getelementptr inbounds i8, i8* %2, i64 5
  store i8 %143, i8* %150, align 1
  %151 = getelementptr inbounds i8, i8* %2, i64 6
  store i8 %144, i8* %151, align 1
  %152 = getelementptr inbounds i8, i8* %2, i64 7
  store i8 %145, i8* %152, align 1
  %153 = trunc i64 %130 to i8
  %154 = getelementptr inbounds i8, i8* %2, i64 8
  store i8 %153, i8* %154, align 1
  %155 = lshr i64 %130, 8
  %156 = trunc i64 %155 to i8
  %157 = getelementptr inbounds i8, i8* %2, i64 9
  store i8 %156, i8* %157, align 1
  %158 = lshr i64 %130, 16
  %159 = trunc i64 %158 to i8
  %160 = getelementptr inbounds i8, i8* %2, i64 10
  store i8 %159, i8* %160, align 1
  %161 = lshr i64 %130, 24
  %162 = trunc i64 %161 to i8
  %163 = getelementptr inbounds i8, i8* %2, i64 11
  store i8 %162, i8* %163, align 1
  %164 = lshr i64 %130, 32
  %165 = trunc i64 %164 to i8
  %166 = getelementptr inbounds i8, i8* %2, i64 12
  store i8 %165, i8* %166, align 1
  %167 = lshr i64 %130, 40
  %168 = trunc i64 %167 to i8
  %169 = getelementptr inbounds i8, i8* %2, i64 13
  store i8 %168, i8* %169, align 1
  %170 = lshr i64 %130, 48
  %171 = trunc i64 %170 to i8
  %172 = getelementptr inbounds i8, i8* %2, i64 14
  store i8 %171, i8* %172, align 1
  %173 = lshr i64 %130, 56
  %174 = trunc i64 %173 to i8
  %175 = getelementptr inbounds i8, i8* %2, i64 15
  store i8 %174, i8* %175, align 1
  call void @llvm.lifetime.end(i64 16, i8* nonnull %10) 
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L5PABSBI3VnWI8vec128_tE3MVnIS2_EEEP6MemoryS7_R5StateT_T0_(%struct.Memory* returned, %struct.State* nocapture readnone dereferenceable(3376), i8* nocapture, i64)  {
  %5 = alloca <2 x i64>, align 16
  %6 = bitcast <2 x i64>* %5 to { i64, i64 }*
  %7 = alloca <2 x i64>, align 16
  %8 = bitcast <2 x i64>* %7 to { i64, i64 }*
  %9 = bitcast <2 x i64>* %7 to %struct.uint8v16_t*
  %10 = bitcast <2 x i64>* %7 to i8*
  call void @llvm.lifetime.start(i64 16, i8* nonnull %10) 
  %11 = inttoptr i64 %3 to i8*
  %12 = load i8, i8* %11
  %13 = add i64 %3, 1
  %14 = inttoptr i64 %13 to i8*
  %15 = load i8, i8* %14
  %16 = add i64 %3, 2
  %17 = inttoptr i64 %16 to i8*
  %18 = load i8, i8* %17
  %19 = add i64 %3, 3
  %20 = inttoptr i64 %19 to i8*
  %21 = load i8, i8* %20
  %22 = add i64 %3, 4
  %23 = inttoptr i64 %22 to i8*
  %24 = load i8, i8* %23
  %25 = add i64 %3, 5
  %26 = inttoptr i64 %25 to i8*
  %27 = load i8, i8* %26
  %28 = add i64 %3, 6
  %29 = inttoptr i64 %28 to i8*
  %30 = load i8, i8* %29
  %31 = add i64 %3, 7
  %32 = inttoptr i64 %31 to i8*
  %33 = load i8, i8* %32
  %34 = add i64 %3, 8
  %35 = inttoptr i64 %34 to i8*
  %36 = load i8, i8* %35
  %37 = add i64 %3, 9
  %38 = inttoptr i64 %37 to i8*
  %39 = load i8, i8* %38
  %40 = add i64 %3, 10
  %41 = inttoptr i64 %40 to i8*
  %42 = load i8, i8* %41
  %43 = add i64 %3, 11
  %44 = inttoptr i64 %43 to i8*
  %45 = load i8, i8* %44
  %46 = add i64 %3, 12
  %47 = inttoptr i64 %46 to i8*
  %48 = load i8, i8* %47
  %49 = add i64 %3, 13
  %50 = inttoptr i64 %49 to i8*
  %51 = load i8, i8* %50
  %52 = add i64 %3, 14
  %53 = inttoptr i64 %52 to i8*
  %54 = load i8, i8* %53
  %55 = add i64 %3, 15
  %56 = inttoptr i64 %55 to i8*
  %57 = load i8, i8* %56
  %58 = insertelement <2 x i8> undef, i8 %33, i32 0
  %59 = insertelement <2 x i8> %58, i8 %57, i32 1
  %60 = zext <2 x i8> %59 to <2 x i64>
  %61 = shl nuw <2 x i64> %60, <i64 56, i64 56>
  %62 = insertelement <2 x i8> undef, i8 %30, i32 0
  %63 = insertelement <2 x i8> %62, i8 %54, i32 1
  %64 = zext <2 x i8> %63 to <2 x i64>
  %65 = shl nuw nsw <2 x i64> %64, <i64 48, i64 48>
  %66 = insertelement <2 x i8> undef, i8 %27, i32 0
  %67 = insertelement <2 x i8> %66, i8 %51, i32 1
  %68 = zext <2 x i8> %67 to <2 x i64>
  %69 = shl nuw nsw <2 x i64> %68, <i64 40, i64 40>
  %70 = insertelement <2 x i8> undef, i8 %24, i32 0
  %71 = insertelement <2 x i8> %70, i8 %48, i32 1
  %72 = zext <2 x i8> %71 to <2 x i64>
  %73 = shl nuw nsw <2 x i64> %72, <i64 32, i64 32>
  %74 = insertelement <2 x i8> undef, i8 %21, i32 0
  %75 = insertelement <2 x i8> %74, i8 %45, i32 1
  %76 = zext <2 x i8> %75 to <2 x i64>
  %77 = shl nuw nsw <2 x i64> %76, <i64 24, i64 24>
  %78 = insertelement <2 x i8> undef, i8 %18, i32 0
  %79 = insertelement <2 x i8> %78, i8 %42, i32 1
  %80 = zext <2 x i8> %79 to <2 x i64>
  %81 = shl nuw nsw <2 x i64> %80, <i64 16, i64 16>
  %82 = insertelement <2 x i8> undef, i8 %15, i32 0
  %83 = insertelement <2 x i8> %82, i8 %39, i32 1
  %84 = zext <2 x i8> %83 to <2 x i64>
  %85 = shl nuw nsw <2 x i64> %84, <i64 8, i64 8>
  %86 = insertelement <2 x i8> undef, i8 %12, i32 0
  %87 = insertelement <2 x i8> %86, i8 %36, i32 1
  %88 = zext <2 x i8> %87 to <2 x i64>
  %89 = or <2 x i64> %85, %88
  %90 = or <2 x i64> %89, %81
  %91 = or <2 x i64> %90, %77
  %92 = or <2 x i64> %91, %73
  %93 = or <2 x i64> %92, %69
  %94 = or <2 x i64> %93, %65
  %95 = or <2 x i64> %94, %61
  store <2 x i64> %95, <2 x i64>* %7, align 16
  %96 = bitcast <2 x i64>* %5 to i8*
  %97 = getelementptr inbounds <2 x i64>, <2 x i64>* %5, i64 0, i64 0
  %98 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %6, i64 0, i32 1
  %99 = bitcast <2 x i64>* %5 to [16 x i8]*
  %100 = ashr i8 %12, 7
  %101 = xor i8 %100, %12
  %102 = sub i8 %101, %100
  call void @llvm.lifetime.start(i64 16, i8* nonnull %96)
  store <2 x i64> zeroinitializer, <2 x i64>* %5, align 16
  %103 = bitcast <2 x i64>* %5 to i8*
  store i8 %102, i8* %103, align 16
  %104 = load i64, i64* %97, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %96)
  %105 = ashr i8 %15, 7
  %106 = xor i8 %105, %15
  %107 = sub i8 %106, %105
  call void @llvm.lifetime.start(i64 16, i8* nonnull %96)
  store i64 %104, i64* %97, align 16
  store i64 0, i64* %98, align 8
  %108 = getelementptr inbounds [16 x i8], [16 x i8]* %99, i64 0, i64 1
  store i8 %107, i8* %108, align 1
  %109 = load i64, i64* %97, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %96)
  %110 = ashr i8 %18, 7
  %111 = xor i8 %110, %18
  %112 = sub i8 %111, %110
  call void @llvm.lifetime.start(i64 16, i8* nonnull %96)
  store i64 %109, i64* %97, align 16
  store i64 0, i64* %98, align 8
  %113 = getelementptr inbounds [16 x i8], [16 x i8]* %99, i64 0, i64 2
  store i8 %112, i8* %113, align 2
  %114 = load i64, i64* %97, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %96)
  %115 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %9, i64 0, i32 0, i64 3
  %116 = load i8, i8* %115, align 1
  %117 = ashr i8 %116, 7
  %118 = xor i8 %117, %116
  %119 = sub i8 %118, %117
  call void @llvm.lifetime.start(i64 16, i8* nonnull %96)
  store i64 %114, i64* %97, align 16
  store i64 0, i64* %98, align 8
  %120 = getelementptr inbounds [16 x i8], [16 x i8]* %99, i64 0, i64 3
  store i8 %119, i8* %120, align 1
  %121 = load i64, i64* %97, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %96)
  %122 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %9, i64 0, i32 0, i64 4
  %123 = load i8, i8* %122, align 4
  %124 = ashr i8 %123, 7
  %125 = xor i8 %124, %123
  %126 = sub i8 %125, %124
  call void @llvm.lifetime.start(i64 16, i8* nonnull %96)
  store i64 %121, i64* %97, align 16
  store i64 0, i64* %98, align 8
  %127 = getelementptr inbounds [16 x i8], [16 x i8]* %99, i64 0, i64 4
  store i8 %126, i8* %127, align 4
  %128 = load i64, i64* %97, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %96)
  %129 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %9, i64 0, i32 0, i64 5
  %130 = load i8, i8* %129, align 1
  %131 = ashr i8 %130, 7
  %132 = xor i8 %131, %130
  %133 = sub i8 %132, %131
  call void @llvm.lifetime.start(i64 16, i8* nonnull %96)
  store i64 %128, i64* %97, align 16
  store i64 0, i64* %98, align 8
  %134 = getelementptr inbounds [16 x i8], [16 x i8]* %99, i64 0, i64 5
  store i8 %133, i8* %134, align 1
  %135 = load i64, i64* %97, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %96)
  %136 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %9, i64 0, i32 0, i64 6
  %137 = load i8, i8* %136, align 2
  %138 = ashr i8 %137, 7
  %139 = xor i8 %138, %137
  %140 = sub i8 %139, %138
  call void @llvm.lifetime.start(i64 16, i8* nonnull %96)
  store i64 %135, i64* %97, align 16
  store i64 0, i64* %98, align 8
  %141 = getelementptr inbounds [16 x i8], [16 x i8]* %99, i64 0, i64 6
  store i8 %140, i8* %141, align 2
  %142 = load i64, i64* %97, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %96)
  %143 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %9, i64 0, i32 0, i64 7
  %144 = load i8, i8* %143, align 1
  %145 = ashr i8 %144, 7
  %146 = xor i8 %145, %144
  %147 = sub i8 %146, %145
  call void @llvm.lifetime.start(i64 16, i8* nonnull %96)
  store i64 %142, i64* %97, align 16
  store i64 0, i64* %98, align 8
  %148 = getelementptr inbounds [16 x i8], [16 x i8]* %99, i64 0, i64 7
  store i8 %147, i8* %148, align 1
  %149 = load i64, i64* %97, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %96)
  %150 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %8, i64 0, i32 1
  %151 = bitcast i64* %150 to i8*
  %152 = load i8, i8* %151, align 8
  %153 = ashr i8 %152, 7
  %154 = xor i8 %153, %152
  %155 = sub i8 %154, %153
  call void @llvm.lifetime.start(i64 16, i8* nonnull %96)
  store i64 %149, i64* %97, align 16
  store i64 0, i64* %98, align 8
  %156 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %6, i64 0, i32 1
  %157 = bitcast i64* %156 to i8*
  store i8 %155, i8* %157, align 8
  %158 = load i64, i64* %98, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %96)
  %159 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %9, i64 0, i32 0, i64 9
  %160 = load i8, i8* %159, align 1
  %161 = ashr i8 %160, 7
  %162 = xor i8 %161, %160
  %163 = sub i8 %162, %161
  call void @llvm.lifetime.start(i64 16, i8* nonnull %96)
  store i64 %149, i64* %97, align 16
  store i64 %158, i64* %98, align 8
  %164 = getelementptr inbounds [16 x i8], [16 x i8]* %99, i64 0, i64 9
  store i8 %163, i8* %164, align 1
  %165 = load i64, i64* %98, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %96)
  %166 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %9, i64 0, i32 0, i64 10
  %167 = load i8, i8* %166, align 2
  %168 = ashr i8 %167, 7
  %169 = xor i8 %168, %167
  %170 = sub i8 %169, %168
  call void @llvm.lifetime.start(i64 16, i8* nonnull %96)
  store i64 %149, i64* %97, align 16
  store i64 %165, i64* %98, align 8
  %171 = getelementptr inbounds [16 x i8], [16 x i8]* %99, i64 0, i64 10
  store i8 %170, i8* %171, align 2
  %172 = load i64, i64* %98, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %96)
  %173 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %9, i64 0, i32 0, i64 11
  %174 = load i8, i8* %173, align 1
  %175 = ashr i8 %174, 7
  %176 = xor i8 %175, %174
  %177 = sub i8 %176, %175
  call void @llvm.lifetime.start(i64 16, i8* nonnull %96)
  store i64 %149, i64* %97, align 16
  store i64 %172, i64* %98, align 8
  %178 = getelementptr inbounds [16 x i8], [16 x i8]* %99, i64 0, i64 11
  store i8 %177, i8* %178, align 1
  %179 = load i64, i64* %98, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %96)
  %180 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %9, i64 0, i32 0, i64 12
  %181 = load i8, i8* %180, align 4
  %182 = ashr i8 %181, 7
  %183 = xor i8 %182, %181
  %184 = sub i8 %183, %182
  call void @llvm.lifetime.start(i64 16, i8* nonnull %96)
  store i64 %149, i64* %97, align 16
  store i64 %179, i64* %98, align 8
  %185 = getelementptr inbounds [16 x i8], [16 x i8]* %99, i64 0, i64 12
  store i8 %184, i8* %185, align 4
  %186 = load i64, i64* %98, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %96)
  %187 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %9, i64 0, i32 0, i64 13
  %188 = load i8, i8* %187, align 1
  %189 = ashr i8 %188, 7
  %190 = xor i8 %189, %188
  %191 = sub i8 %190, %189
  call void @llvm.lifetime.start(i64 16, i8* nonnull %96)
  store i64 %149, i64* %97, align 16
  store i64 %186, i64* %98, align 8
  %192 = getelementptr inbounds [16 x i8], [16 x i8]* %99, i64 0, i64 13
  store i8 %191, i8* %192, align 1
  %193 = load i64, i64* %98, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %96)
  %194 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %9, i64 0, i32 0, i64 14
  %195 = load i8, i8* %194, align 2
  %196 = ashr i8 %195, 7
  %197 = xor i8 %196, %195
  %198 = sub i8 %197, %196
  call void @llvm.lifetime.start(i64 16, i8* nonnull %96)
  store i64 %149, i64* %97, align 16
  store i64 %193, i64* %98, align 8
  %199 = getelementptr inbounds [16 x i8], [16 x i8]* %99, i64 0, i64 14
  store i8 %198, i8* %199, align 2
  %200 = load i64, i64* %98, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %96)
  %201 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %9, i64 0, i32 0, i64 15
  %202 = load i8, i8* %201, align 1
  %203 = ashr i8 %202, 7
  %204 = xor i8 %203, %202
  %205 = sub i8 %204, %203
  call void @llvm.lifetime.start(i64 16, i8* nonnull %96)
  store i64 %149, i64* %97, align 16
  store i64 %200, i64* %98, align 8
  %206 = getelementptr inbounds [16 x i8], [16 x i8]* %99, i64 0, i64 15
  store i8 %205, i8* %206, align 1
  %207 = load i64, i64* %98, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %96)
  %208 = lshr i64 %149, 8
  %209 = lshr i64 %149, 16
  %210 = lshr i64 %149, 24
  %211 = lshr i64 %149, 32
  %212 = lshr i64 %149, 40
  %213 = lshr i64 %149, 48
  %214 = lshr i64 %149, 56
  %215 = trunc i64 %149 to i8
  %216 = trunc i64 %208 to i8
  %217 = trunc i64 %209 to i8
  %218 = trunc i64 %210 to i8
  %219 = trunc i64 %211 to i8
  %220 = trunc i64 %212 to i8
  %221 = trunc i64 %213 to i8
  %222 = trunc i64 %214 to i8
  store i8 %215, i8* %2, align 1
  %223 = getelementptr inbounds i8, i8* %2, i64 1
  store i8 %216, i8* %223, align 1
  %224 = getelementptr inbounds i8, i8* %2, i64 2
  store i8 %217, i8* %224, align 1
  %225 = getelementptr inbounds i8, i8* %2, i64 3
  store i8 %218, i8* %225, align 1
  %226 = getelementptr inbounds i8, i8* %2, i64 4
  store i8 %219, i8* %226, align 1
  %227 = getelementptr inbounds i8, i8* %2, i64 5
  store i8 %220, i8* %227, align 1
  %228 = getelementptr inbounds i8, i8* %2, i64 6
  store i8 %221, i8* %228, align 1
  %229 = getelementptr inbounds i8, i8* %2, i64 7
  store i8 %222, i8* %229, align 1
  %230 = trunc i64 %207 to i8
  %231 = getelementptr inbounds i8, i8* %2, i64 8
  store i8 %230, i8* %231, align 1
  %232 = lshr i64 %207, 8
  %233 = trunc i64 %232 to i8
  %234 = getelementptr inbounds i8, i8* %2, i64 9
  store i8 %233, i8* %234, align 1
  %235 = lshr i64 %207, 16
  %236 = trunc i64 %235 to i8
  %237 = getelementptr inbounds i8, i8* %2, i64 10
  store i8 %236, i8* %237, align 1
  %238 = lshr i64 %207, 24
  %239 = trunc i64 %238 to i8
  %240 = getelementptr inbounds i8, i8* %2, i64 11
  store i8 %239, i8* %240, align 1
  %241 = lshr i64 %207, 32
  %242 = trunc i64 %241 to i8
  %243 = getelementptr inbounds i8, i8* %2, i64 12
  store i8 %242, i8* %243, align 1
  %244 = lshr i64 %207, 40
  %245 = trunc i64 %244 to i8
  %246 = getelementptr inbounds i8, i8* %2, i64 13
  store i8 %245, i8* %246, align 1
  %247 = lshr i64 %207, 48
  %248 = trunc i64 %247 to i8
  %249 = getelementptr inbounds i8, i8* %2, i64 14
  store i8 %248, i8* %249, align 1
  %250 = lshr i64 %207, 56
  %251 = trunc i64 %250 to i8
  %252 = getelementptr inbounds i8, i8* %2, i64 15
  store i8 %251, i8* %252, align 1
  call void @llvm.lifetime.end(i64 16, i8* nonnull %10) 
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L5PABSWI4RVnWI7vec64_tE3RVnIS2_EEEP6MemoryS7_R5StateT_T0_(%struct.Memory* readnone returned, %struct.State* nocapture readnone dereferenceable(3376), i64* nocapture, i64)  {
  %5 = alloca i64, align 8
  %6 = bitcast i64* %5 to i8*
  %7 = bitcast i64* %5 to [4 x i16]*
  %8 = trunc i64 %3 to i16
  %9 = ashr i16 %8, 15
  %10 = xor i16 %9, %8
  %11 = sub i16 %10, %9
  call void @llvm.lifetime.start(i64 8, i8* nonnull %6)
  store i64 0, i64* %5, align 8
  %12 = bitcast i64* %5 to i16*
  store i16 %11, i16* %12, align 8
  %13 = load i64, i64* %5, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %6)
  %14 = lshr i64 %3, 16
  %15 = trunc i64 %14 to i16
  %16 = ashr i16 %15, 15
  %17 = xor i16 %16, %15
  %18 = sub i16 %17, %16
  call void @llvm.lifetime.start(i64 8, i8* nonnull %6)
  store i64 %13, i64* %5, align 8
  %19 = getelementptr inbounds [4 x i16], [4 x i16]* %7, i64 0, i64 1
  store i16 %18, i16* %19, align 2
  %20 = load i64, i64* %5, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %6)
  %21 = lshr i64 %3, 32
  %22 = trunc i64 %21 to i16
  %23 = ashr i16 %22, 15
  %24 = xor i16 %23, %22
  %25 = sub i16 %24, %23
  call void @llvm.lifetime.start(i64 8, i8* nonnull %6)
  store i64 %20, i64* %5, align 8
  %26 = getelementptr inbounds [4 x i16], [4 x i16]* %7, i64 0, i64 2
  store i16 %25, i16* %26, align 4
  %27 = load i64, i64* %5, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %6)
  %28 = lshr i64 %3, 48
  %29 = trunc i64 %28 to i16
  %30 = ashr i16 %29, 15
  %31 = xor i16 %30, %29
  %32 = sub i16 %31, %30
  call void @llvm.lifetime.start(i64 8, i8* nonnull %6)
  store i64 %27, i64* %5, align 8
  %33 = getelementptr inbounds [4 x i16], [4 x i16]* %7, i64 0, i64 3
  store i16 %32, i16* %33, align 2
  %34 = load i64, i64* %5, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %6)
  %35 = lshr i64 %34, 16
  %36 = lshr i64 %34, 32
  %37 = lshr i64 %34, 48
  %38 = trunc i64 %34 to i16
  %39 = trunc i64 %35 to i16
  %40 = trunc i64 %36 to i16
  %41 = trunc i64 %37 to i16
  %42 = bitcast i64* %2 to [4 x i16]*
  %43 = bitcast i64* %2 to i16*
  store i16 %38, i16* %43, align 1
  %44 = getelementptr inbounds [4 x i16], [4 x i16]* %42, i64 0, i64 1
  store i16 %39, i16* %44, align 1
  %45 = getelementptr inbounds [4 x i16], [4 x i16]* %42, i64 0, i64 2
  store i16 %40, i16* %45, align 1
  %46 = getelementptr inbounds [4 x i16], [4 x i16]* %42, i64 0, i64 3
  store i16 %41, i16* %46, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L5PABSWI4RVnWI7vec64_tE3MVnIS2_EEEP6MemoryS7_R5StateT_T0_(%struct.Memory* returned, %struct.State* nocapture readnone dereferenceable(3376), i64* nocapture, i64)  {
  %5 = alloca i64, align 8
  %6 = inttoptr i64 %3 to i16*
  %7 = load i16, i16* %6
  %8 = add i64 %3, 2
  %9 = inttoptr i64 %8 to i16*
  %10 = load i16, i16* %9
  %11 = add i64 %3, 4
  %12 = inttoptr i64 %11 to i16*
  %13 = load i16, i16* %12
  %14 = add i64 %3, 6
  %15 = inttoptr i64 %14 to i16*
  %16 = load i16, i16* %15
  %17 = bitcast i64* %5 to i8*
  %18 = bitcast i64* %5 to [4 x i16]*
  %19 = ashr i16 %7, 15
  %20 = xor i16 %19, %7
  %21 = sub i16 %20, %19
  call void @llvm.lifetime.start(i64 8, i8* nonnull %17)
  store i64 0, i64* %5, align 8
  %22 = bitcast i64* %5 to i16*
  store i16 %21, i16* %22, align 8
  %23 = load i64, i64* %5, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %17)
  %24 = ashr i16 %10, 15
  %25 = xor i16 %24, %10
  %26 = sub i16 %25, %24
  call void @llvm.lifetime.start(i64 8, i8* nonnull %17)
  store i64 %23, i64* %5, align 8
  %27 = getelementptr inbounds [4 x i16], [4 x i16]* %18, i64 0, i64 1
  store i16 %26, i16* %27, align 2
  %28 = load i64, i64* %5, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %17)
  %29 = ashr i16 %13, 15
  %30 = xor i16 %29, %13
  %31 = sub i16 %30, %29
  call void @llvm.lifetime.start(i64 8, i8* nonnull %17)
  store i64 %28, i64* %5, align 8
  %32 = getelementptr inbounds [4 x i16], [4 x i16]* %18, i64 0, i64 2
  store i16 %31, i16* %32, align 4
  %33 = load i64, i64* %5, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %17)
  %34 = ashr i16 %16, 15
  %35 = xor i16 %34, %16
  %36 = sub i16 %35, %34
  call void @llvm.lifetime.start(i64 8, i8* nonnull %17)
  store i64 %33, i64* %5, align 8
  %37 = getelementptr inbounds [4 x i16], [4 x i16]* %18, i64 0, i64 3
  store i16 %36, i16* %37, align 2
  %38 = load i64, i64* %5, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %17)
  %39 = lshr i64 %38, 16
  %40 = lshr i64 %38, 32
  %41 = lshr i64 %38, 48
  %42 = trunc i64 %38 to i16
  %43 = trunc i64 %39 to i16
  %44 = trunc i64 %40 to i16
  %45 = trunc i64 %41 to i16
  %46 = bitcast i64* %2 to [4 x i16]*
  %47 = bitcast i64* %2 to i16*
  store i16 %42, i16* %47, align 1
  %48 = getelementptr inbounds [4 x i16], [4 x i16]* %46, i64 0, i64 1
  store i16 %43, i16* %48, align 1
  %49 = getelementptr inbounds [4 x i16], [4 x i16]* %46, i64 0, i64 2
  store i16 %44, i16* %49, align 1
  %50 = getelementptr inbounds [4 x i16], [4 x i16]* %46, i64 0, i64 3
  store i16 %45, i16* %50, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L5PABSWI3VnWI8vec128_tE2VnIS2_EEEP6MemoryS7_R5StateT_T0_(%struct.Memory* readnone returned, %struct.State* nocapture readnone dereferenceable(3376), i8* nocapture, i8* nocapture readonly)  {
  %5 = alloca <2 x i64>, align 16
  %6 = bitcast <2 x i64>* %5 to { i64, i64 }*
  %7 = alloca { i64, i64 }, align 8
  %8 = bitcast { i64, i64 }* %7 to %struct.uint16v8_t*
  %9 = bitcast { i64, i64 }* %7 to i8*
  call void @llvm.lifetime.start(i64 16, i8* nonnull %9) 
  %10 = bitcast i8* %3 to i64*
  %11 = load i64, i64* %10, align 1
  %12 = getelementptr inbounds i8, i8* %3, i64 8
  %13 = bitcast i8* %12 to i64*
  %14 = load i64, i64* %13, align 1
  %15 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %7, i64 0, i32 0
  store i64 %11, i64* %15, align 8
  %16 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %7, i64 0, i32 1
  store i64 %14, i64* %16, align 8
  %17 = bitcast <2 x i64>* %5 to i8*
  %18 = getelementptr inbounds <2 x i64>, <2 x i64>* %5, i64 0, i64 0
  %19 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %6, i64 0, i32 1
  %20 = bitcast <2 x i64>* %5 to [8 x i16]*
  %21 = trunc i64 %11 to i16
  %22 = ashr i16 %21, 15
  %23 = xor i16 %22, %21
  %24 = sub i16 %23, %22
  call void @llvm.lifetime.start(i64 16, i8* nonnull %17)
  store <2 x i64> zeroinitializer, <2 x i64>* %5, align 16
  %25 = bitcast <2 x i64>* %5 to i16*
  store i16 %24, i16* %25, align 16
  %26 = load i64, i64* %18, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %17)
  %27 = lshr i64 %11, 16
  %28 = trunc i64 %27 to i16
  %29 = ashr i16 %28, 15
  %30 = xor i16 %29, %28
  %31 = sub i16 %30, %29
  call void @llvm.lifetime.start(i64 16, i8* nonnull %17)
  store i64 %26, i64* %18, align 16
  store i64 0, i64* %19, align 8
  %32 = getelementptr inbounds [8 x i16], [8 x i16]* %20, i64 0, i64 1
  store i16 %31, i16* %32, align 2
  %33 = load i64, i64* %18, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %17)
  %34 = lshr i64 %11, 32
  %35 = trunc i64 %34 to i16
  %36 = ashr i16 %35, 15
  %37 = xor i16 %36, %35
  %38 = sub i16 %37, %36
  call void @llvm.lifetime.start(i64 16, i8* nonnull %17)
  store i64 %33, i64* %18, align 16
  store i64 0, i64* %19, align 8
  %39 = getelementptr inbounds [8 x i16], [8 x i16]* %20, i64 0, i64 2
  store i16 %38, i16* %39, align 4
  %40 = load i64, i64* %18, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %17)
  %41 = lshr i64 %11, 48
  %42 = trunc i64 %41 to i16
  %43 = ashr i16 %42, 15
  %44 = xor i16 %43, %42
  %45 = sub i16 %44, %43
  call void @llvm.lifetime.start(i64 16, i8* nonnull %17)
  store i64 %40, i64* %18, align 16
  store i64 0, i64* %19, align 8
  %46 = getelementptr inbounds [8 x i16], [8 x i16]* %20, i64 0, i64 3
  store i16 %45, i16* %46, align 2
  %47 = load i64, i64* %18, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %17)
  %48 = trunc i64 %14 to i16
  %49 = ashr i16 %48, 15
  %50 = xor i16 %49, %48
  %51 = sub i16 %50, %49
  call void @llvm.lifetime.start(i64 16, i8* nonnull %17)
  store i64 %47, i64* %18, align 16
  store i64 0, i64* %19, align 8
  %52 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %6, i64 0, i32 1
  %53 = bitcast i64* %52 to i16*
  store i16 %51, i16* %53, align 8
  %54 = load i64, i64* %19, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %17)
  %55 = getelementptr inbounds %struct.uint16v8_t, %struct.uint16v8_t* %8, i64 0, i32 0, i64 5
  %56 = load i16, i16* %55, align 2
  %57 = ashr i16 %56, 15
  %58 = xor i16 %57, %56
  %59 = sub i16 %58, %57
  call void @llvm.lifetime.start(i64 16, i8* nonnull %17)
  store i64 %47, i64* %18, align 16
  store i64 %54, i64* %19, align 8
  %60 = getelementptr inbounds [8 x i16], [8 x i16]* %20, i64 0, i64 5
  store i16 %59, i16* %60, align 2
  %61 = load i64, i64* %19, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %17)
  %62 = getelementptr inbounds %struct.uint16v8_t, %struct.uint16v8_t* %8, i64 0, i32 0, i64 6
  %63 = load i16, i16* %62, align 4
  %64 = ashr i16 %63, 15
  %65 = xor i16 %64, %63
  %66 = sub i16 %65, %64
  call void @llvm.lifetime.start(i64 16, i8* nonnull %17)
  store i64 %47, i64* %18, align 16
  store i64 %61, i64* %19, align 8
  %67 = getelementptr inbounds [8 x i16], [8 x i16]* %20, i64 0, i64 6
  store i16 %66, i16* %67, align 4
  %68 = load i64, i64* %19, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %17)
  %69 = getelementptr inbounds %struct.uint16v8_t, %struct.uint16v8_t* %8, i64 0, i32 0, i64 7
  %70 = load i16, i16* %69, align 2
  %71 = ashr i16 %70, 15
  %72 = xor i16 %71, %70
  %73 = sub i16 %72, %71
  call void @llvm.lifetime.start(i64 16, i8* nonnull %17)
  store i64 %47, i64* %18, align 16
  store i64 %68, i64* %19, align 8
  %74 = getelementptr inbounds [8 x i16], [8 x i16]* %20, i64 0, i64 7
  store i16 %73, i16* %74, align 2
  %75 = load i64, i64* %19, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %17)
  %76 = lshr i64 %47, 16
  %77 = lshr i64 %47, 32
  %78 = lshr i64 %47, 48
  %79 = trunc i64 %47 to i16
  %80 = trunc i64 %76 to i16
  %81 = trunc i64 %77 to i16
  %82 = trunc i64 %78 to i16
  %83 = bitcast i8* %2 to i16*
  store i16 %79, i16* %83, align 1
  %84 = getelementptr inbounds i8, i8* %2, i64 2
  %85 = bitcast i8* %84 to i16*
  store i16 %80, i16* %85, align 1
  %86 = getelementptr inbounds i8, i8* %2, i64 4
  %87 = bitcast i8* %86 to i16*
  store i16 %81, i16* %87, align 1
  %88 = getelementptr inbounds i8, i8* %2, i64 6
  %89 = bitcast i8* %88 to i16*
  store i16 %82, i16* %89, align 1
  %90 = trunc i64 %75 to i16
  %91 = getelementptr inbounds i8, i8* %2, i64 8
  %92 = bitcast i8* %91 to i16*
  store i16 %90, i16* %92, align 1
  %93 = lshr i64 %75, 16
  %94 = trunc i64 %93 to i16
  %95 = getelementptr inbounds i8, i8* %2, i64 10
  %96 = bitcast i8* %95 to i16*
  store i16 %94, i16* %96, align 1
  %97 = lshr i64 %75, 32
  %98 = trunc i64 %97 to i16
  %99 = getelementptr inbounds i8, i8* %2, i64 12
  %100 = bitcast i8* %99 to i16*
  store i16 %98, i16* %100, align 1
  %101 = lshr i64 %75, 48
  %102 = trunc i64 %101 to i16
  %103 = getelementptr inbounds i8, i8* %2, i64 14
  %104 = bitcast i8* %103 to i16*
  store i16 %102, i16* %104, align 1
  call void @llvm.lifetime.end(i64 16, i8* nonnull %9) 
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L5PABSWI3VnWI8vec128_tE3MVnIS2_EEEP6MemoryS7_R5StateT_T0_(%struct.Memory* returned, %struct.State* nocapture readnone dereferenceable(3376), i8* nocapture, i64)  {
  %5 = alloca <2 x i64>, align 16
  %6 = bitcast <2 x i64>* %5 to { i64, i64 }*
  %7 = alloca <2 x i64>, align 16
  %8 = bitcast <2 x i64>* %7 to %struct.uint16v8_t*
  %9 = bitcast <2 x i64>* %7 to i8*
  call void @llvm.lifetime.start(i64 16, i8* nonnull %9) 
  %10 = inttoptr i64 %3 to i16*
  %11 = load i16, i16* %10
  %12 = add i64 %3, 2
  %13 = inttoptr i64 %12 to i16*
  %14 = load i16, i16* %13
  %15 = add i64 %3, 4
  %16 = inttoptr i64 %15 to i16*
  %17 = load i16, i16* %16
  %18 = add i64 %3, 6
  %19 = inttoptr i64 %18 to i16*
  %20 = load i16, i16* %19
  %21 = add i64 %3, 8
  %22 = inttoptr i64 %21 to i16*
  %23 = load i16, i16* %22
  %24 = add i64 %3, 10
  %25 = inttoptr i64 %24 to i16*
  %26 = load i16, i16* %25
  %27 = add i64 %3, 12
  %28 = inttoptr i64 %27 to i16*
  %29 = load i16, i16* %28
  %30 = add i64 %3, 14
  %31 = inttoptr i64 %30 to i16*
  %32 = load i16, i16* %31
  %33 = insertelement <2 x i16> undef, i16 %20, i32 0
  %34 = insertelement <2 x i16> %33, i16 %32, i32 1
  %35 = zext <2 x i16> %34 to <2 x i64>
  %36 = shl nuw <2 x i64> %35, <i64 48, i64 48>
  %37 = insertelement <2 x i16> undef, i16 %17, i32 0
  %38 = insertelement <2 x i16> %37, i16 %29, i32 1
  %39 = zext <2 x i16> %38 to <2 x i64>
  %40 = shl nuw nsw <2 x i64> %39, <i64 32, i64 32>
  %41 = insertelement <2 x i16> undef, i16 %14, i32 0
  %42 = insertelement <2 x i16> %41, i16 %26, i32 1
  %43 = zext <2 x i16> %42 to <2 x i64>
  %44 = shl nuw nsw <2 x i64> %43, <i64 16, i64 16>
  %45 = insertelement <2 x i16> undef, i16 %11, i32 0
  %46 = insertelement <2 x i16> %45, i16 %23, i32 1
  %47 = zext <2 x i16> %46 to <2 x i64>
  %48 = or <2 x i64> %44, %47
  %49 = or <2 x i64> %48, %40
  %50 = or <2 x i64> %49, %36
  store <2 x i64> %50, <2 x i64>* %7, align 16
  %51 = bitcast <2 x i64>* %5 to i8*
  %52 = getelementptr inbounds <2 x i64>, <2 x i64>* %5, i64 0, i64 0
  %53 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %6, i64 0, i32 1
  %54 = bitcast <2 x i64>* %5 to [8 x i16]*
  %55 = ashr i16 %11, 15
  %56 = xor i16 %55, %11
  %57 = sub i16 %56, %55
  call void @llvm.lifetime.start(i64 16, i8* nonnull %51)
  store <2 x i64> zeroinitializer, <2 x i64>* %5, align 16
  %58 = bitcast <2 x i64>* %5 to i16*
  store i16 %57, i16* %58, align 16
  %59 = load i64, i64* %52, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %51)
  %60 = ashr i16 %14, 15
  %61 = xor i16 %60, %14
  %62 = sub i16 %61, %60
  call void @llvm.lifetime.start(i64 16, i8* nonnull %51)
  store i64 %59, i64* %52, align 16
  store i64 0, i64* %53, align 8
  %63 = getelementptr inbounds [8 x i16], [8 x i16]* %54, i64 0, i64 1
  store i16 %62, i16* %63, align 2
  %64 = load i64, i64* %52, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %51)
  %65 = ashr i16 %17, 15
  %66 = xor i16 %65, %17
  %67 = sub i16 %66, %65
  call void @llvm.lifetime.start(i64 16, i8* nonnull %51)
  store i64 %64, i64* %52, align 16
  store i64 0, i64* %53, align 8
  %68 = getelementptr inbounds [8 x i16], [8 x i16]* %54, i64 0, i64 2
  store i16 %67, i16* %68, align 4
  %69 = load i64, i64* %52, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %51)
  %70 = ashr i16 %20, 15
  %71 = xor i16 %70, %20
  %72 = sub i16 %71, %70
  call void @llvm.lifetime.start(i64 16, i8* nonnull %51)
  store i64 %69, i64* %52, align 16
  store i64 0, i64* %53, align 8
  %73 = getelementptr inbounds [8 x i16], [8 x i16]* %54, i64 0, i64 3
  store i16 %72, i16* %73, align 2
  %74 = load i64, i64* %52, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %51)
  %75 = ashr i16 %23, 15
  %76 = xor i16 %75, %23
  %77 = sub i16 %76, %75
  call void @llvm.lifetime.start(i64 16, i8* nonnull %51)
  store i64 %74, i64* %52, align 16
  store i64 0, i64* %53, align 8
  %78 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %6, i64 0, i32 1
  %79 = bitcast i64* %78 to i16*
  store i16 %77, i16* %79, align 8
  %80 = load i64, i64* %53, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %51)
  %81 = getelementptr inbounds %struct.uint16v8_t, %struct.uint16v8_t* %8, i64 0, i32 0, i64 5
  %82 = load i16, i16* %81, align 2
  %83 = ashr i16 %82, 15
  %84 = xor i16 %83, %82
  %85 = sub i16 %84, %83
  call void @llvm.lifetime.start(i64 16, i8* nonnull %51)
  store i64 %74, i64* %52, align 16
  store i64 %80, i64* %53, align 8
  %86 = getelementptr inbounds [8 x i16], [8 x i16]* %54, i64 0, i64 5
  store i16 %85, i16* %86, align 2
  %87 = load i64, i64* %53, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %51)
  %88 = getelementptr inbounds %struct.uint16v8_t, %struct.uint16v8_t* %8, i64 0, i32 0, i64 6
  %89 = load i16, i16* %88, align 4
  %90 = ashr i16 %89, 15
  %91 = xor i16 %90, %89
  %92 = sub i16 %91, %90
  call void @llvm.lifetime.start(i64 16, i8* nonnull %51)
  store i64 %74, i64* %52, align 16
  store i64 %87, i64* %53, align 8
  %93 = getelementptr inbounds [8 x i16], [8 x i16]* %54, i64 0, i64 6
  store i16 %92, i16* %93, align 4
  %94 = load i64, i64* %53, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %51)
  %95 = getelementptr inbounds %struct.uint16v8_t, %struct.uint16v8_t* %8, i64 0, i32 0, i64 7
  %96 = load i16, i16* %95, align 2
  %97 = ashr i16 %96, 15
  %98 = xor i16 %97, %96
  %99 = sub i16 %98, %97
  call void @llvm.lifetime.start(i64 16, i8* nonnull %51)
  store i64 %74, i64* %52, align 16
  store i64 %94, i64* %53, align 8
  %100 = getelementptr inbounds [8 x i16], [8 x i16]* %54, i64 0, i64 7
  store i16 %99, i16* %100, align 2
  %101 = load i64, i64* %53, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %51)
  %102 = lshr i64 %74, 16
  %103 = lshr i64 %74, 32
  %104 = lshr i64 %74, 48
  %105 = trunc i64 %74 to i16
  %106 = trunc i64 %102 to i16
  %107 = trunc i64 %103 to i16
  %108 = trunc i64 %104 to i16
  %109 = bitcast i8* %2 to i16*
  store i16 %105, i16* %109, align 1
  %110 = getelementptr inbounds i8, i8* %2, i64 2
  %111 = bitcast i8* %110 to i16*
  store i16 %106, i16* %111, align 1
  %112 = getelementptr inbounds i8, i8* %2, i64 4
  %113 = bitcast i8* %112 to i16*
  store i16 %107, i16* %113, align 1
  %114 = getelementptr inbounds i8, i8* %2, i64 6
  %115 = bitcast i8* %114 to i16*
  store i16 %108, i16* %115, align 1
  %116 = trunc i64 %101 to i16
  %117 = getelementptr inbounds i8, i8* %2, i64 8
  %118 = bitcast i8* %117 to i16*
  store i16 %116, i16* %118, align 1
  %119 = lshr i64 %101, 16
  %120 = trunc i64 %119 to i16
  %121 = getelementptr inbounds i8, i8* %2, i64 10
  %122 = bitcast i8* %121 to i16*
  store i16 %120, i16* %122, align 1
  %123 = lshr i64 %101, 32
  %124 = trunc i64 %123 to i16
  %125 = getelementptr inbounds i8, i8* %2, i64 12
  %126 = bitcast i8* %125 to i16*
  store i16 %124, i16* %126, align 1
  %127 = lshr i64 %101, 48
  %128 = trunc i64 %127 to i16
  %129 = getelementptr inbounds i8, i8* %2, i64 14
  %130 = bitcast i8* %129 to i16*
  store i16 %128, i16* %130, align 1
  call void @llvm.lifetime.end(i64 16, i8* nonnull %9) 
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L5PABSDI4RVnWI7vec64_tE3RVnIS2_EEEP6MemoryS7_R5StateT_T0_(%struct.Memory* readnone returned, %struct.State* nocapture readnone dereferenceable(3376), i64* nocapture, i64)  {
  %5 = alloca i64, align 8
  %6 = bitcast i64* %5 to i8*
  %7 = bitcast i64* %5 to [2 x i32]*
  %8 = trunc i64 %3 to i32
  %9 = ashr i32 %8, 31
  %10 = xor i32 %9, %8
  %11 = sub i32 %10, %9
  call void @llvm.lifetime.start(i64 8, i8* nonnull %6)
  store i64 0, i64* %5, align 8
  %12 = bitcast i64* %5 to i32*
  store i32 %11, i32* %12, align 8
  %13 = load i64, i64* %5, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %6)
  %14 = lshr i64 %3, 32
  %15 = trunc i64 %14 to i32
  %16 = ashr i32 %15, 31
  %17 = xor i32 %16, %15
  %18 = sub i32 %17, %16
  call void @llvm.lifetime.start(i64 8, i8* nonnull %6)
  store i64 %13, i64* %5, align 8
  %19 = getelementptr inbounds [2 x i32], [2 x i32]* %7, i64 0, i64 1
  store i32 %18, i32* %19, align 4
  %20 = load i64, i64* %5, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %6)
  %21 = lshr i64 %20, 32
  %22 = trunc i64 %20 to i32
  %23 = trunc i64 %21 to i32
  %24 = bitcast i64* %2 to [2 x i32]*
  %25 = bitcast i64* %2 to i32*
  store i32 %22, i32* %25, align 1
  %26 = getelementptr inbounds [2 x i32], [2 x i32]* %24, i64 0, i64 1
  store i32 %23, i32* %26, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L5PABSDI4RVnWI7vec64_tE3MVnIS2_EEEP6MemoryS7_R5StateT_T0_(%struct.Memory* returned, %struct.State* nocapture readnone dereferenceable(3376), i64* nocapture, i64)  {
  %5 = alloca i64, align 8
  %6 = inttoptr i64 %3 to i32*
  %7 = load i32, i32* %6
  %8 = add i64 %3, 4
  %9 = inttoptr i64 %8 to i32*
  %10 = load i32, i32* %9
  %11 = bitcast i64* %5 to i8*
  %12 = bitcast i64* %5 to [2 x i32]*
  %13 = ashr i32 %7, 31
  %14 = xor i32 %13, %7
  %15 = sub i32 %14, %13
  call void @llvm.lifetime.start(i64 8, i8* nonnull %11)
  store i64 0, i64* %5, align 8
  %16 = bitcast i64* %5 to i32*
  store i32 %15, i32* %16, align 8
  %17 = load i64, i64* %5, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %11)
  %18 = ashr i32 %10, 31
  %19 = xor i32 %18, %10
  %20 = sub i32 %19, %18
  call void @llvm.lifetime.start(i64 8, i8* nonnull %11)
  store i64 %17, i64* %5, align 8
  %21 = getelementptr inbounds [2 x i32], [2 x i32]* %12, i64 0, i64 1
  store i32 %20, i32* %21, align 4
  %22 = load i64, i64* %5, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %11)
  %23 = lshr i64 %22, 32
  %24 = trunc i64 %22 to i32
  %25 = trunc i64 %23 to i32
  %26 = bitcast i64* %2 to [2 x i32]*
  %27 = bitcast i64* %2 to i32*
  store i32 %24, i32* %27, align 1
  %28 = getelementptr inbounds [2 x i32], [2 x i32]* %26, i64 0, i64 1
  store i32 %25, i32* %28, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L5PABSDI3VnWI8vec128_tE2VnIS2_EEEP6MemoryS7_R5StateT_T0_(%struct.Memory* readnone returned, %struct.State* nocapture readnone dereferenceable(3376), i8* nocapture, i8* nocapture readonly)  {
  %5 = alloca <2 x i64>, align 16
  %6 = bitcast <2 x i64>* %5 to { i64, i64 }*
  %7 = bitcast i8* %3 to i64*
  %8 = load i64, i64* %7, align 1
  %9 = getelementptr inbounds i8, i8* %3, i64 8
  %10 = bitcast i8* %9 to i64*
  %11 = load i64, i64* %10, align 1
  %12 = bitcast <2 x i64>* %5 to i8*
  %13 = getelementptr inbounds <2 x i64>, <2 x i64>* %5, i64 0, i64 0
  %14 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %6, i64 0, i32 1
  %15 = bitcast <2 x i64>* %5 to [4 x i32]*
  %16 = trunc i64 %8 to i32
  %17 = ashr i32 %16, 31
  %18 = xor i32 %17, %16
  %19 = sub i32 %18, %17
  call void @llvm.lifetime.start(i64 16, i8* nonnull %12)
  store <2 x i64> zeroinitializer, <2 x i64>* %5, align 16
  %20 = bitcast <2 x i64>* %5 to i32*
  store i32 %19, i32* %20, align 16
  %21 = load i64, i64* %13, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %12)
  %22 = lshr i64 %8, 32
  %23 = trunc i64 %22 to i32
  %24 = ashr i32 %23, 31
  %25 = xor i32 %24, %23
  %26 = sub i32 %25, %24
  call void @llvm.lifetime.start(i64 16, i8* nonnull %12)
  store i64 %21, i64* %13, align 16
  store i64 0, i64* %14, align 8
  %27 = getelementptr inbounds [4 x i32], [4 x i32]* %15, i64 0, i64 1
  store i32 %26, i32* %27, align 4
  %28 = load i64, i64* %13, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %12)
  %29 = trunc i64 %11 to i32
  %30 = ashr i32 %29, 31
  %31 = xor i32 %30, %29
  %32 = sub i32 %31, %30
  call void @llvm.lifetime.start(i64 16, i8* nonnull %12)
  store i64 %28, i64* %13, align 16
  store i64 0, i64* %14, align 8
  %33 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %6, i64 0, i32 1
  %34 = bitcast i64* %33 to i32*
  store i32 %32, i32* %34, align 8
  %35 = load i64, i64* %14, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %12)
  %36 = lshr i64 %11, 32
  %37 = trunc i64 %36 to i32
  %38 = ashr i32 %37, 31
  %39 = xor i32 %38, %37
  %40 = sub i32 %39, %38
  call void @llvm.lifetime.start(i64 16, i8* nonnull %12)
  store i64 %28, i64* %13, align 16
  store i64 %35, i64* %14, align 8
  %41 = getelementptr inbounds [4 x i32], [4 x i32]* %15, i64 0, i64 3
  store i32 %40, i32* %41, align 4
  %42 = load i64, i64* %14, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %12)
  %43 = lshr i64 %28, 32
  %44 = trunc i64 %28 to i32
  %45 = trunc i64 %43 to i32
  %46 = bitcast i8* %2 to i32*
  store i32 %44, i32* %46, align 1
  %47 = getelementptr inbounds i8, i8* %2, i64 4
  %48 = bitcast i8* %47 to i32*
  store i32 %45, i32* %48, align 1
  %49 = trunc i64 %42 to i32
  %50 = getelementptr inbounds i8, i8* %2, i64 8
  %51 = bitcast i8* %50 to i32*
  store i32 %49, i32* %51, align 1
  %52 = lshr i64 %42, 32
  %53 = trunc i64 %52 to i32
  %54 = getelementptr inbounds i8, i8* %2, i64 12
  %55 = bitcast i8* %54 to i32*
  store i32 %53, i32* %55, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L5PABSDI3VnWI8vec128_tE3MVnIS2_EEEP6MemoryS7_R5StateT_T0_(%struct.Memory* returned, %struct.State* nocapture readnone dereferenceable(3376), i8* nocapture, i64)  {
  %5 = alloca <2 x i64>, align 16
  %6 = bitcast <2 x i64>* %5 to { i64, i64 }*
  %7 = inttoptr i64 %3 to i32*
  %8 = load i32, i32* %7
  %9 = add i64 %3, 4
  %10 = inttoptr i64 %9 to i32*
  %11 = load i32, i32* %10
  %12 = add i64 %3, 8
  %13 = inttoptr i64 %12 to i32*
  %14 = load i32, i32* %13
  %15 = add i64 %3, 12
  %16 = inttoptr i64 %15 to i32*
  %17 = load i32, i32* %16
  %18 = bitcast <2 x i64>* %5 to i8*
  %19 = getelementptr inbounds <2 x i64>, <2 x i64>* %5, i64 0, i64 0
  %20 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %6, i64 0, i32 1
  %21 = bitcast <2 x i64>* %5 to [4 x i32]*
  %22 = ashr i32 %8, 31
  %23 = xor i32 %22, %8
  %24 = sub i32 %23, %22
  call void @llvm.lifetime.start(i64 16, i8* nonnull %18)
  store <2 x i64> zeroinitializer, <2 x i64>* %5, align 16
  %25 = bitcast <2 x i64>* %5 to i32*
  store i32 %24, i32* %25, align 16
  %26 = load i64, i64* %19, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %18)
  %27 = ashr i32 %11, 31
  %28 = xor i32 %27, %11
  %29 = sub i32 %28, %27
  call void @llvm.lifetime.start(i64 16, i8* nonnull %18)
  store i64 %26, i64* %19, align 16
  store i64 0, i64* %20, align 8
  %30 = getelementptr inbounds [4 x i32], [4 x i32]* %21, i64 0, i64 1
  store i32 %29, i32* %30, align 4
  %31 = load i64, i64* %19, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %18)
  %32 = ashr i32 %14, 31
  %33 = xor i32 %32, %14
  %34 = sub i32 %33, %32
  call void @llvm.lifetime.start(i64 16, i8* nonnull %18)
  store i64 %31, i64* %19, align 16
  store i64 0, i64* %20, align 8
  %35 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %6, i64 0, i32 1
  %36 = bitcast i64* %35 to i32*
  store i32 %34, i32* %36, align 8
  %37 = load i64, i64* %20, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %18)
  %38 = ashr i32 %17, 31
  %39 = xor i32 %38, %17
  %40 = sub i32 %39, %38
  call void @llvm.lifetime.start(i64 16, i8* nonnull %18)
  store i64 %31, i64* %19, align 16
  store i64 %37, i64* %20, align 8
  %41 = getelementptr inbounds [4 x i32], [4 x i32]* %21, i64 0, i64 3
  store i32 %40, i32* %41, align 4
  %42 = load i64, i64* %20, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %18)
  %43 = lshr i64 %31, 32
  %44 = trunc i64 %31 to i32
  %45 = trunc i64 %43 to i32
  %46 = bitcast i8* %2 to i32*
  store i32 %44, i32* %46, align 1
  %47 = getelementptr inbounds i8, i8* %2, i64 4
  %48 = bitcast i8* %47 to i32*
  store i32 %45, i32* %48, align 1
  %49 = trunc i64 %42 to i32
  %50 = getelementptr inbounds i8, i8* %2, i64 8
  %51 = bitcast i8* %50 to i32*
  store i32 %49, i32* %51, align 1
  %52 = lshr i64 %42, 32
  %53 = trunc i64 %52 to i32
  %54 = getelementptr inbounds i8, i8* %2, i64 12
  %55 = bitcast i8* %54 to i32*
  store i32 %53, i32* %55, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L8PACKSSWBI4RVnWI7vec64_tE3RVnIS2_ES5_EEP6MemoryS7_R5StateT_T0_T1_(%struct.Memory* readnone returned, %struct.State* nocapture readnone dereferenceable(3376), i64* nocapture, i64, i64)  {
  %6 = alloca i64, align 8
  %7 = alloca i64, align 8
  %8 = alloca i64, align 8
  %9 = bitcast i64* %8 to %struct.int16v4_t*
  %10 = alloca i64, align 8
  %11 = bitcast i64* %8 to i8*
  call void @llvm.lifetime.start(i64 8, i8* nonnull %11) 
  store i64 %3, i64* %8, align 8
  %12 = bitcast i64* %10 to i8*
  call void @llvm.lifetime.start(i64 8, i8* nonnull %12) 
  store i64 %4, i64* %10, align 8
  %13 = bitcast i64* %6 to i8*
  %14 = bitcast i64* %6 to [8 x i8]*
  %15 = trunc i64 %3 to i16
  %16 = icmp slt i16 %15, 127
  %17 = select i1 %16, i16 %15, i16 127
  %18 = trunc i16 %17 to i8
  %19 = icmp slt i16 %15, -128
  %20 = select i1 %19, i8 -128, i8 %18
  call void @llvm.lifetime.start(i64 8, i8* nonnull %13)
  store i64 0, i64* %6, align 8
  %21 = bitcast i64* %6 to i8*
  store i8 %20, i8* %21, align 8
  %22 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %13)
  %23 = lshr i64 %3, 16
  %24 = trunc i64 %23 to i16
  %25 = icmp slt i16 %24, 127
  %26 = select i1 %25, i16 %24, i16 127
  %27 = trunc i16 %26 to i8
  %28 = icmp slt i16 %24, -128
  %29 = select i1 %28, i8 -128, i8 %27
  call void @llvm.lifetime.start(i64 8, i8* nonnull %13)
  store i64 %22, i64* %6, align 8
  %30 = getelementptr inbounds [8 x i8], [8 x i8]* %14, i64 0, i64 1
  store i8 %29, i8* %30, align 1
  %31 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %13)
  %32 = lshr i64 %3, 32
  %33 = trunc i64 %32 to i16
  %34 = icmp slt i16 %33, 127
  %35 = select i1 %34, i16 %33, i16 127
  %36 = trunc i16 %35 to i8
  %37 = icmp slt i16 %33, -128
  %38 = select i1 %37, i8 -128, i8 %36
  call void @llvm.lifetime.start(i64 8, i8* nonnull %13)
  store i64 %31, i64* %6, align 8
  %39 = getelementptr inbounds [8 x i8], [8 x i8]* %14, i64 0, i64 2
  store i8 %38, i8* %39, align 2
  %40 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %13)
  %41 = getelementptr inbounds %struct.int16v4_t, %struct.int16v4_t* %9, i64 0, i32 0, i64 3
  %42 = load i16, i16* %41, align 2
  %43 = icmp slt i16 %42, 127
  %44 = select i1 %43, i16 %42, i16 127
  %45 = trunc i16 %44 to i8
  %46 = icmp slt i16 %42, -128
  %47 = select i1 %46, i8 -128, i8 %45
  call void @llvm.lifetime.start(i64 8, i8* nonnull %13)
  store i64 %40, i64* %6, align 8
  %48 = getelementptr inbounds [8 x i8], [8 x i8]* %14, i64 0, i64 3
  store i8 %47, i8* %48, align 1
  %49 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %13)
  %50 = bitcast i64* %10 to %struct.int16v4_t*
  %51 = bitcast i64* %7 to i8*
  %52 = bitcast i64* %7 to [8 x i8]*
  %53 = bitcast i64* %10 to i16*
  %54 = load i16, i16* %53, align 8
  %55 = icmp slt i16 %54, 127
  %56 = select i1 %55, i16 %54, i16 127
  %57 = trunc i16 %56 to i8
  %58 = icmp slt i16 %54, -128
  %59 = select i1 %58, i8 -128, i8 %57
  call void @llvm.lifetime.start(i64 8, i8* nonnull %51)
  store i64 %49, i64* %7, align 8
  %60 = getelementptr inbounds [8 x i8], [8 x i8]* %52, i64 0, i64 4
  store i8 %59, i8* %60, align 4
  %61 = load i64, i64* %7, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %51)
  %62 = getelementptr inbounds %struct.int16v4_t, %struct.int16v4_t* %50, i64 0, i32 0, i64 1
  %63 = load i16, i16* %62, align 2
  %64 = icmp slt i16 %63, 127
  %65 = select i1 %64, i16 %63, i16 127
  %66 = trunc i16 %65 to i8
  %67 = icmp slt i16 %63, -128
  %68 = select i1 %67, i8 -128, i8 %66
  call void @llvm.lifetime.start(i64 8, i8* nonnull %51)
  store i64 %61, i64* %7, align 8
  %69 = getelementptr inbounds [8 x i8], [8 x i8]* %52, i64 0, i64 5
  store i8 %68, i8* %69, align 1
  %70 = load i64, i64* %7, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %51)
  %71 = getelementptr inbounds %struct.int16v4_t, %struct.int16v4_t* %50, i64 0, i32 0, i64 2
  %72 = load i16, i16* %71, align 4
  %73 = icmp slt i16 %72, 127
  %74 = select i1 %73, i16 %72, i16 127
  %75 = trunc i16 %74 to i8
  %76 = icmp slt i16 %72, -128
  %77 = select i1 %76, i8 -128, i8 %75
  call void @llvm.lifetime.start(i64 8, i8* nonnull %51)
  store i64 %70, i64* %7, align 8
  %78 = getelementptr inbounds [8 x i8], [8 x i8]* %52, i64 0, i64 6
  store i8 %77, i8* %78, align 2
  %79 = load i64, i64* %7, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %51)
  %80 = getelementptr inbounds %struct.int16v4_t, %struct.int16v4_t* %50, i64 0, i32 0, i64 3
  %81 = load i16, i16* %80, align 2
  %82 = icmp slt i16 %81, 127
  %83 = select i1 %82, i16 %81, i16 127
  %84 = trunc i16 %83 to i8
  %85 = icmp slt i16 %81, -128
  %86 = select i1 %85, i8 -128, i8 %84
  call void @llvm.lifetime.start(i64 8, i8* nonnull %51)
  store i64 %79, i64* %7, align 8
  %87 = getelementptr inbounds [8 x i8], [8 x i8]* %52, i64 0, i64 7
  store i8 %86, i8* %87, align 1
  %88 = load i64, i64* %7, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %51)
  %89 = lshr i64 %88, 8
  %90 = lshr i64 %88, 16
  %91 = lshr i64 %88, 24
  %92 = lshr i64 %88, 32
  %93 = lshr i64 %88, 40
  %94 = lshr i64 %88, 48
  %95 = lshr i64 %88, 56
  %96 = trunc i64 %88 to i8
  %97 = trunc i64 %89 to i8
  %98 = trunc i64 %90 to i8
  %99 = trunc i64 %91 to i8
  %100 = trunc i64 %92 to i8
  %101 = trunc i64 %93 to i8
  %102 = trunc i64 %94 to i8
  %103 = trunc i64 %95 to i8
  %104 = bitcast i64* %2 to [8 x i8]*
  %105 = bitcast i64* %2 to i8*
  store i8 %96, i8* %105, align 1
  %106 = getelementptr inbounds [8 x i8], [8 x i8]* %104, i64 0, i64 1
  store i8 %97, i8* %106, align 1
  %107 = getelementptr inbounds [8 x i8], [8 x i8]* %104, i64 0, i64 2
  store i8 %98, i8* %107, align 1
  %108 = getelementptr inbounds [8 x i8], [8 x i8]* %104, i64 0, i64 3
  store i8 %99, i8* %108, align 1
  %109 = getelementptr inbounds [8 x i8], [8 x i8]* %104, i64 0, i64 4
  store i8 %100, i8* %109, align 1
  %110 = getelementptr inbounds [8 x i8], [8 x i8]* %104, i64 0, i64 5
  store i8 %101, i8* %110, align 1
  %111 = getelementptr inbounds [8 x i8], [8 x i8]* %104, i64 0, i64 6
  store i8 %102, i8* %111, align 1
  %112 = getelementptr inbounds [8 x i8], [8 x i8]* %104, i64 0, i64 7
  store i8 %103, i8* %112, align 1
  call void @llvm.lifetime.end(i64 8, i8* nonnull %12) 
  call void @llvm.lifetime.end(i64 8, i8* nonnull %11) 
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L8PACKSSWBI4RVnWI7vec64_tE3RVnIS2_E3MVnIS2_EEEP6MemoryS9_R5StateT_T0_T1_(%struct.Memory* returned, %struct.State* nocapture readnone dereferenceable(3376), i64* nocapture, i64, i64)  {
  %6 = alloca i64, align 8
  %7 = alloca i64, align 8
  %8 = alloca i64, align 8
  %9 = bitcast i64* %8 to %struct.int16v4_t*
  %10 = alloca i64, align 8
  %11 = bitcast i64* %8 to i8*
  call void @llvm.lifetime.start(i64 8, i8* nonnull %11) 
  store i64 %3, i64* %8, align 8
  %12 = bitcast i64* %10 to i8*
  call void @llvm.lifetime.start(i64 8, i8* nonnull %12) 
  %13 = inttoptr i64 %4 to i16*
  %14 = load i16, i16* %13
  %15 = add i64 %4, 2
  %16 = inttoptr i64 %15 to i16*
  %17 = load i16, i16* %16
  %18 = add i64 %4, 4
  %19 = inttoptr i64 %18 to i16*
  %20 = load i16, i16* %19
  %21 = add i64 %4, 6
  %22 = inttoptr i64 %21 to i16*
  %23 = load i16, i16* %22
  %24 = zext i16 %23 to i64
  %25 = shl nuw i64 %24, 48
  %26 = zext i16 %20 to i64
  %27 = shl nuw nsw i64 %26, 32
  %28 = zext i16 %17 to i64
  %29 = shl nuw nsw i64 %28, 16
  %30 = zext i16 %14 to i64
  %31 = or i64 %29, %30
  %32 = or i64 %31, %27
  %33 = or i64 %32, %25
  store i64 %33, i64* %10, align 8
  %34 = bitcast i64* %6 to i8*
  %35 = bitcast i64* %6 to [8 x i8]*
  %36 = trunc i64 %3 to i16
  %37 = icmp slt i16 %36, 127
  %38 = select i1 %37, i16 %36, i16 127
  %39 = trunc i16 %38 to i8
  %40 = icmp slt i16 %36, -128
  %41 = select i1 %40, i8 -128, i8 %39
  call void @llvm.lifetime.start(i64 8, i8* nonnull %34)
  store i64 0, i64* %6, align 8
  %42 = bitcast i64* %6 to i8*
  store i8 %41, i8* %42, align 8
  %43 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %34)
  %44 = lshr i64 %3, 16
  %45 = trunc i64 %44 to i16
  %46 = icmp slt i16 %45, 127
  %47 = select i1 %46, i16 %45, i16 127
  %48 = trunc i16 %47 to i8
  %49 = icmp slt i16 %45, -128
  %50 = select i1 %49, i8 -128, i8 %48
  call void @llvm.lifetime.start(i64 8, i8* nonnull %34)
  store i64 %43, i64* %6, align 8
  %51 = getelementptr inbounds [8 x i8], [8 x i8]* %35, i64 0, i64 1
  store i8 %50, i8* %51, align 1
  %52 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %34)
  %53 = lshr i64 %3, 32
  %54 = trunc i64 %53 to i16
  %55 = icmp slt i16 %54, 127
  %56 = select i1 %55, i16 %54, i16 127
  %57 = trunc i16 %56 to i8
  %58 = icmp slt i16 %54, -128
  %59 = select i1 %58, i8 -128, i8 %57
  call void @llvm.lifetime.start(i64 8, i8* nonnull %34)
  store i64 %52, i64* %6, align 8
  %60 = getelementptr inbounds [8 x i8], [8 x i8]* %35, i64 0, i64 2
  store i8 %59, i8* %60, align 2
  %61 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %34)
  %62 = getelementptr inbounds %struct.int16v4_t, %struct.int16v4_t* %9, i64 0, i32 0, i64 3
  %63 = load i16, i16* %62, align 2
  %64 = icmp slt i16 %63, 127
  %65 = select i1 %64, i16 %63, i16 127
  %66 = trunc i16 %65 to i8
  %67 = icmp slt i16 %63, -128
  %68 = select i1 %67, i8 -128, i8 %66
  call void @llvm.lifetime.start(i64 8, i8* nonnull %34)
  store i64 %61, i64* %6, align 8
  %69 = getelementptr inbounds [8 x i8], [8 x i8]* %35, i64 0, i64 3
  store i8 %68, i8* %69, align 1
  %70 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %34)
  %71 = bitcast i64* %10 to %struct.int16v4_t*
  %72 = bitcast i64* %7 to i8*
  %73 = bitcast i64* %7 to [8 x i8]*
  %74 = bitcast i64* %10 to i16*
  %75 = load i16, i16* %74, align 8
  %76 = icmp slt i16 %75, 127
  %77 = select i1 %76, i16 %75, i16 127
  %78 = trunc i16 %77 to i8
  %79 = icmp slt i16 %75, -128
  %80 = select i1 %79, i8 -128, i8 %78
  call void @llvm.lifetime.start(i64 8, i8* nonnull %72)
  store i64 %70, i64* %7, align 8
  %81 = getelementptr inbounds [8 x i8], [8 x i8]* %73, i64 0, i64 4
  store i8 %80, i8* %81, align 4
  %82 = load i64, i64* %7, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %72)
  %83 = getelementptr inbounds %struct.int16v4_t, %struct.int16v4_t* %71, i64 0, i32 0, i64 1
  %84 = load i16, i16* %83, align 2
  %85 = icmp slt i16 %84, 127
  %86 = select i1 %85, i16 %84, i16 127
  %87 = trunc i16 %86 to i8
  %88 = icmp slt i16 %84, -128
  %89 = select i1 %88, i8 -128, i8 %87
  call void @llvm.lifetime.start(i64 8, i8* nonnull %72)
  store i64 %82, i64* %7, align 8
  %90 = getelementptr inbounds [8 x i8], [8 x i8]* %73, i64 0, i64 5
  store i8 %89, i8* %90, align 1
  %91 = load i64, i64* %7, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %72)
  %92 = getelementptr inbounds %struct.int16v4_t, %struct.int16v4_t* %71, i64 0, i32 0, i64 2
  %93 = load i16, i16* %92, align 4
  %94 = icmp slt i16 %93, 127
  %95 = select i1 %94, i16 %93, i16 127
  %96 = trunc i16 %95 to i8
  %97 = icmp slt i16 %93, -128
  %98 = select i1 %97, i8 -128, i8 %96
  call void @llvm.lifetime.start(i64 8, i8* nonnull %72)
  store i64 %91, i64* %7, align 8
  %99 = getelementptr inbounds [8 x i8], [8 x i8]* %73, i64 0, i64 6
  store i8 %98, i8* %99, align 2
  %100 = load i64, i64* %7, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %72)
  %101 = getelementptr inbounds %struct.int16v4_t, %struct.int16v4_t* %71, i64 0, i32 0, i64 3
  %102 = load i16, i16* %101, align 2
  %103 = icmp slt i16 %102, 127
  %104 = select i1 %103, i16 %102, i16 127
  %105 = trunc i16 %104 to i8
  %106 = icmp slt i16 %102, -128
  %107 = select i1 %106, i8 -128, i8 %105
  call void @llvm.lifetime.start(i64 8, i8* nonnull %72)
  store i64 %100, i64* %7, align 8
  %108 = getelementptr inbounds [8 x i8], [8 x i8]* %73, i64 0, i64 7
  store i8 %107, i8* %108, align 1
  %109 = load i64, i64* %7, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %72)
  %110 = lshr i64 %109, 8
  %111 = lshr i64 %109, 16
  %112 = lshr i64 %109, 24
  %113 = lshr i64 %109, 32
  %114 = lshr i64 %109, 40
  %115 = lshr i64 %109, 48
  %116 = lshr i64 %109, 56
  %117 = trunc i64 %109 to i8
  %118 = trunc i64 %110 to i8
  %119 = trunc i64 %111 to i8
  %120 = trunc i64 %112 to i8
  %121 = trunc i64 %113 to i8
  %122 = trunc i64 %114 to i8
  %123 = trunc i64 %115 to i8
  %124 = trunc i64 %116 to i8
  %125 = bitcast i64* %2 to [8 x i8]*
  %126 = bitcast i64* %2 to i8*
  store i8 %117, i8* %126, align 1
  %127 = getelementptr inbounds [8 x i8], [8 x i8]* %125, i64 0, i64 1
  store i8 %118, i8* %127, align 1
  %128 = getelementptr inbounds [8 x i8], [8 x i8]* %125, i64 0, i64 2
  store i8 %119, i8* %128, align 1
  %129 = getelementptr inbounds [8 x i8], [8 x i8]* %125, i64 0, i64 3
  store i8 %120, i8* %129, align 1
  %130 = getelementptr inbounds [8 x i8], [8 x i8]* %125, i64 0, i64 4
  store i8 %121, i8* %130, align 1
  %131 = getelementptr inbounds [8 x i8], [8 x i8]* %125, i64 0, i64 5
  store i8 %122, i8* %131, align 1
  %132 = getelementptr inbounds [8 x i8], [8 x i8]* %125, i64 0, i64 6
  store i8 %123, i8* %132, align 1
  %133 = getelementptr inbounds [8 x i8], [8 x i8]* %125, i64 0, i64 7
  store i8 %124, i8* %133, align 1
  call void @llvm.lifetime.end(i64 8, i8* nonnull %12) 
  call void @llvm.lifetime.end(i64 8, i8* nonnull %11) 
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L8PACKSSWBI3VnWI8vec128_tE2VnIS2_ES5_EEP6MemoryS7_R5StateT_T0_T1_(%struct.Memory* readnone returned, %struct.State* nocapture readnone dereferenceable(3376), i8* nocapture, i8* nocapture readonly, i8* nocapture readonly)  {
  %6 = alloca <2 x i64>, align 16
  %7 = bitcast <2 x i64>* %6 to { i64, i64 }*
  %8 = alloca { i64, i64 }, align 8
  %9 = alloca <2 x i64>, align 16
  %10 = bitcast <2 x i64>* %9 to { i64, i64 }*
  %11 = bitcast <2 x i64>* %9 to %struct.uint16v8_t*
  %12 = alloca <2 x i64>, align 16
  %13 = bitcast <2 x i64>* %12 to { i64, i64 }*
  %14 = bitcast <2 x i64>* %9 to i8*
  call void @llvm.lifetime.start(i64 16, i8* nonnull %14) 
  %15 = bitcast i8* %3 to <2 x i64>*
  %16 = load <2 x i64>, <2 x i64>* %15, align 1
  store <2 x i64> %16, <2 x i64>* %9, align 16
  %17 = bitcast <2 x i64>* %12 to i8*
  call void @llvm.lifetime.start(i64 16, i8* nonnull %17) 
  %18 = bitcast i8* %4 to <2 x i64>*
  %19 = load <2 x i64>, <2 x i64>* %18, align 1
  store <2 x i64> %19, <2 x i64>* %12, align 16
  %20 = bitcast <2 x i64>* %6 to i8*
  %21 = getelementptr inbounds <2 x i64>, <2 x i64>* %6, i64 0, i64 0
  %22 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %7, i64 0, i32 1
  %23 = bitcast <2 x i64>* %6 to [16 x i8]*
  %24 = extractelement <2 x i64> %16, i32 0
  %25 = trunc i64 %24 to i16
  %26 = icmp slt i16 %25, 127
  %27 = select i1 %26, i16 %25, i16 127
  %28 = trunc i16 %27 to i8
  %29 = icmp slt i16 %25, -128
  %30 = select i1 %29, i8 -128, i8 %28
  call void @llvm.lifetime.start(i64 16, i8* nonnull %20)
  store <2 x i64> zeroinitializer, <2 x i64>* %6, align 16
  %31 = bitcast <2 x i64>* %6 to i8*
  store i8 %30, i8* %31, align 16
  %32 = load i64, i64* %21, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %20)
  %33 = lshr i64 %24, 16
  %34 = trunc i64 %33 to i16
  %35 = icmp slt i16 %34, 127
  %36 = select i1 %35, i16 %34, i16 127
  %37 = trunc i16 %36 to i8
  %38 = icmp slt i16 %34, -128
  %39 = select i1 %38, i8 -128, i8 %37
  call void @llvm.lifetime.start(i64 16, i8* nonnull %20)
  store i64 %32, i64* %21, align 16
  store i64 0, i64* %22, align 8
  %40 = getelementptr inbounds [16 x i8], [16 x i8]* %23, i64 0, i64 1
  store i8 %39, i8* %40, align 1
  %41 = load i64, i64* %21, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %20)
  %42 = lshr i64 %24, 32
  %43 = trunc i64 %42 to i16
  %44 = icmp slt i16 %43, 127
  %45 = select i1 %44, i16 %43, i16 127
  %46 = trunc i16 %45 to i8
  %47 = icmp slt i16 %43, -128
  %48 = select i1 %47, i8 -128, i8 %46
  call void @llvm.lifetime.start(i64 16, i8* nonnull %20)
  store i64 %41, i64* %21, align 16
  store i64 0, i64* %22, align 8
  %49 = getelementptr inbounds [16 x i8], [16 x i8]* %23, i64 0, i64 2
  store i8 %48, i8* %49, align 2
  %50 = load i64, i64* %21, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %20)
  %51 = getelementptr inbounds %struct.uint16v8_t, %struct.uint16v8_t* %11, i64 0, i32 0, i64 3
  %52 = load i16, i16* %51, align 2
  %53 = icmp slt i16 %52, 127
  %54 = select i1 %53, i16 %52, i16 127
  %55 = trunc i16 %54 to i8
  %56 = icmp slt i16 %52, -128
  %57 = select i1 %56, i8 -128, i8 %55
  call void @llvm.lifetime.start(i64 16, i8* nonnull %20)
  store i64 %50, i64* %21, align 16
  store i64 0, i64* %22, align 8
  %58 = getelementptr inbounds [16 x i8], [16 x i8]* %23, i64 0, i64 3
  store i8 %57, i8* %58, align 1
  %59 = load i64, i64* %21, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %20)
  %60 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %10, i64 0, i32 1
  %61 = bitcast i64* %60 to i16*
  %62 = load i16, i16* %61, align 8
  %63 = icmp slt i16 %62, 127
  %64 = select i1 %63, i16 %62, i16 127
  %65 = trunc i16 %64 to i8
  %66 = icmp slt i16 %62, -128
  %67 = select i1 %66, i8 -128, i8 %65
  call void @llvm.lifetime.start(i64 16, i8* nonnull %20)
  store i64 %59, i64* %21, align 16
  store i64 0, i64* %22, align 8
  %68 = getelementptr inbounds [16 x i8], [16 x i8]* %23, i64 0, i64 4
  store i8 %67, i8* %68, align 4
  %69 = load i64, i64* %21, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %20)
  %70 = getelementptr inbounds %struct.uint16v8_t, %struct.uint16v8_t* %11, i64 0, i32 0, i64 5
  %71 = load i16, i16* %70, align 2
  %72 = icmp slt i16 %71, 127
  %73 = select i1 %72, i16 %71, i16 127
  %74 = trunc i16 %73 to i8
  %75 = icmp slt i16 %71, -128
  %76 = select i1 %75, i8 -128, i8 %74
  call void @llvm.lifetime.start(i64 16, i8* nonnull %20)
  store i64 %69, i64* %21, align 16
  store i64 0, i64* %22, align 8
  %77 = getelementptr inbounds [16 x i8], [16 x i8]* %23, i64 0, i64 5
  store i8 %76, i8* %77, align 1
  %78 = load i64, i64* %21, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %20)
  %79 = getelementptr inbounds %struct.uint16v8_t, %struct.uint16v8_t* %11, i64 0, i32 0, i64 6
  %80 = load i16, i16* %79, align 4
  %81 = icmp slt i16 %80, 127
  %82 = select i1 %81, i16 %80, i16 127
  %83 = trunc i16 %82 to i8
  %84 = icmp slt i16 %80, -128
  %85 = select i1 %84, i8 -128, i8 %83
  call void @llvm.lifetime.start(i64 16, i8* nonnull %20)
  store i64 %78, i64* %21, align 16
  store i64 0, i64* %22, align 8
  %86 = getelementptr inbounds [16 x i8], [16 x i8]* %23, i64 0, i64 6
  store i8 %85, i8* %86, align 2
  %87 = load i64, i64* %21, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %20)
  %88 = getelementptr inbounds %struct.uint16v8_t, %struct.uint16v8_t* %11, i64 0, i32 0, i64 7
  %89 = load i16, i16* %88, align 2
  %90 = icmp slt i16 %89, 127
  %91 = select i1 %90, i16 %89, i16 127
  %92 = trunc i16 %91 to i8
  %93 = icmp slt i16 %89, -128
  %94 = select i1 %93, i8 -128, i8 %92
  call void @llvm.lifetime.start(i64 16, i8* nonnull %20)
  store i64 %87, i64* %21, align 16
  store i64 0, i64* %22, align 8
  %95 = getelementptr inbounds [16 x i8], [16 x i8]* %23, i64 0, i64 7
  store i8 %94, i8* %95, align 1
  %96 = load i64, i64* %21, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %20)
  %97 = bitcast <2 x i64>* %12 to %struct.uint16v8_t*
  %98 = bitcast { i64, i64 }* %8 to i8*
  %99 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %8, i64 0, i32 0
  %100 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %8, i64 0, i32 1
  %101 = bitcast { i64, i64 }* %8 to [16 x i8]*
  %102 = bitcast <2 x i64>* %12 to i16*
  %103 = load i16, i16* %102, align 16
  %104 = icmp slt i16 %103, 127
  %105 = select i1 %104, i16 %103, i16 127
  %106 = trunc i16 %105 to i8
  %107 = icmp slt i16 %103, -128
  %108 = select i1 %107, i8 -128, i8 %106
  call void @llvm.lifetime.start(i64 16, i8* nonnull %98)
  store i64 %96, i64* %99, align 8
  store i64 0, i64* %100, align 8
  %109 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %8, i64 0, i32 1
  %110 = bitcast i64* %109 to i8*
  store i8 %108, i8* %110, align 8
  %111 = load i64, i64* %100, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %98)
  %112 = getelementptr inbounds %struct.uint16v8_t, %struct.uint16v8_t* %97, i64 0, i32 0, i64 1
  %113 = load i16, i16* %112, align 2
  %114 = icmp slt i16 %113, 127
  %115 = select i1 %114, i16 %113, i16 127
  %116 = trunc i16 %115 to i8
  %117 = icmp slt i16 %113, -128
  %118 = select i1 %117, i8 -128, i8 %116
  call void @llvm.lifetime.start(i64 16, i8* nonnull %98)
  store i64 %96, i64* %99, align 8
  store i64 %111, i64* %100, align 8
  %119 = getelementptr inbounds [16 x i8], [16 x i8]* %101, i64 0, i64 9
  store i8 %118, i8* %119, align 1
  %120 = load i64, i64* %100, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %98)
  %121 = getelementptr inbounds %struct.uint16v8_t, %struct.uint16v8_t* %97, i64 0, i32 0, i64 2
  %122 = load i16, i16* %121, align 4
  %123 = icmp slt i16 %122, 127
  %124 = select i1 %123, i16 %122, i16 127
  %125 = trunc i16 %124 to i8
  %126 = icmp slt i16 %122, -128
  %127 = select i1 %126, i8 -128, i8 %125
  call void @llvm.lifetime.start(i64 16, i8* nonnull %98)
  store i64 %96, i64* %99, align 8
  store i64 %120, i64* %100, align 8
  %128 = getelementptr inbounds [16 x i8], [16 x i8]* %101, i64 0, i64 10
  store i8 %127, i8* %128, align 2
  %129 = load i64, i64* %100, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %98)
  %130 = getelementptr inbounds %struct.uint16v8_t, %struct.uint16v8_t* %97, i64 0, i32 0, i64 3
  %131 = load i16, i16* %130, align 2
  %132 = icmp slt i16 %131, 127
  %133 = select i1 %132, i16 %131, i16 127
  %134 = trunc i16 %133 to i8
  %135 = icmp slt i16 %131, -128
  %136 = select i1 %135, i8 -128, i8 %134
  call void @llvm.lifetime.start(i64 16, i8* nonnull %98)
  store i64 %96, i64* %99, align 8
  store i64 %129, i64* %100, align 8
  %137 = getelementptr inbounds [16 x i8], [16 x i8]* %101, i64 0, i64 11
  store i8 %136, i8* %137, align 1
  %138 = load i64, i64* %100, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %98)
  %139 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %13, i64 0, i32 1
  %140 = bitcast i64* %139 to i16*
  %141 = load i16, i16* %140, align 8
  %142 = icmp slt i16 %141, 127
  %143 = select i1 %142, i16 %141, i16 127
  %144 = trunc i16 %143 to i8
  %145 = icmp slt i16 %141, -128
  %146 = select i1 %145, i8 -128, i8 %144
  call void @llvm.lifetime.start(i64 16, i8* nonnull %98)
  store i64 %96, i64* %99, align 8
  store i64 %138, i64* %100, align 8
  %147 = getelementptr inbounds [16 x i8], [16 x i8]* %101, i64 0, i64 12
  store i8 %146, i8* %147, align 4
  %148 = load i64, i64* %100, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %98)
  %149 = getelementptr inbounds %struct.uint16v8_t, %struct.uint16v8_t* %97, i64 0, i32 0, i64 5
  %150 = load i16, i16* %149, align 2
  %151 = icmp slt i16 %150, 127
  %152 = select i1 %151, i16 %150, i16 127
  %153 = trunc i16 %152 to i8
  %154 = icmp slt i16 %150, -128
  %155 = select i1 %154, i8 -128, i8 %153
  call void @llvm.lifetime.start(i64 16, i8* nonnull %98)
  store i64 %96, i64* %99, align 8
  store i64 %148, i64* %100, align 8
  %156 = getelementptr inbounds [16 x i8], [16 x i8]* %101, i64 0, i64 13
  store i8 %155, i8* %156, align 1
  %157 = load i64, i64* %100, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %98)
  %158 = getelementptr inbounds %struct.uint16v8_t, %struct.uint16v8_t* %97, i64 0, i32 0, i64 6
  %159 = load i16, i16* %158, align 4
  %160 = icmp slt i16 %159, 127
  %161 = select i1 %160, i16 %159, i16 127
  %162 = trunc i16 %161 to i8
  %163 = icmp slt i16 %159, -128
  %164 = select i1 %163, i8 -128, i8 %162
  call void @llvm.lifetime.start(i64 16, i8* nonnull %98)
  store i64 %96, i64* %99, align 8
  store i64 %157, i64* %100, align 8
  %165 = getelementptr inbounds [16 x i8], [16 x i8]* %101, i64 0, i64 14
  store i8 %164, i8* %165, align 2
  %166 = load i64, i64* %100, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %98)
  %167 = getelementptr inbounds %struct.uint16v8_t, %struct.uint16v8_t* %97, i64 0, i32 0, i64 7
  %168 = load i16, i16* %167, align 2
  %169 = icmp slt i16 %168, 127
  %170 = select i1 %169, i16 %168, i16 127
  %171 = trunc i16 %170 to i8
  %172 = icmp slt i16 %168, -128
  %173 = select i1 %172, i8 -128, i8 %171
  call void @llvm.lifetime.start(i64 16, i8* nonnull %98)
  store i64 %96, i64* %99, align 8
  store i64 %166, i64* %100, align 8
  %174 = getelementptr inbounds [16 x i8], [16 x i8]* %101, i64 0, i64 15
  store i8 %173, i8* %174, align 1
  %175 = load i64, i64* %100, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %98)
  %176 = lshr i64 %96, 8
  %177 = lshr i64 %96, 16
  %178 = lshr i64 %96, 24
  %179 = lshr i64 %96, 32
  %180 = lshr i64 %96, 40
  %181 = lshr i64 %96, 48
  %182 = lshr i64 %96, 56
  %183 = trunc i64 %96 to i8
  %184 = trunc i64 %176 to i8
  %185 = trunc i64 %177 to i8
  %186 = trunc i64 %178 to i8
  %187 = trunc i64 %179 to i8
  %188 = trunc i64 %180 to i8
  %189 = trunc i64 %181 to i8
  %190 = trunc i64 %182 to i8
  store i8 %183, i8* %2, align 1
  %191 = getelementptr inbounds i8, i8* %2, i64 1
  store i8 %184, i8* %191, align 1
  %192 = getelementptr inbounds i8, i8* %2, i64 2
  store i8 %185, i8* %192, align 1
  %193 = getelementptr inbounds i8, i8* %2, i64 3
  store i8 %186, i8* %193, align 1
  %194 = getelementptr inbounds i8, i8* %2, i64 4
  store i8 %187, i8* %194, align 1
  %195 = getelementptr inbounds i8, i8* %2, i64 5
  store i8 %188, i8* %195, align 1
  %196 = getelementptr inbounds i8, i8* %2, i64 6
  store i8 %189, i8* %196, align 1
  %197 = getelementptr inbounds i8, i8* %2, i64 7
  store i8 %190, i8* %197, align 1
  %198 = trunc i64 %175 to i8
  %199 = getelementptr inbounds i8, i8* %2, i64 8
  store i8 %198, i8* %199, align 1
  %200 = lshr i64 %175, 8
  %201 = trunc i64 %200 to i8
  %202 = getelementptr inbounds i8, i8* %2, i64 9
  store i8 %201, i8* %202, align 1
  %203 = lshr i64 %175, 16
  %204 = trunc i64 %203 to i8
  %205 = getelementptr inbounds i8, i8* %2, i64 10
  store i8 %204, i8* %205, align 1
  %206 = lshr i64 %175, 24
  %207 = trunc i64 %206 to i8
  %208 = getelementptr inbounds i8, i8* %2, i64 11
  store i8 %207, i8* %208, align 1
  %209 = lshr i64 %175, 32
  %210 = trunc i64 %209 to i8
  %211 = getelementptr inbounds i8, i8* %2, i64 12
  store i8 %210, i8* %211, align 1
  %212 = lshr i64 %175, 40
  %213 = trunc i64 %212 to i8
  %214 = getelementptr inbounds i8, i8* %2, i64 13
  store i8 %213, i8* %214, align 1
  %215 = lshr i64 %175, 48
  %216 = trunc i64 %215 to i8
  %217 = getelementptr inbounds i8, i8* %2, i64 14
  store i8 %216, i8* %217, align 1
  %218 = lshr i64 %175, 56
  %219 = trunc i64 %218 to i8
  %220 = getelementptr inbounds i8, i8* %2, i64 15
  store i8 %219, i8* %220, align 1
  call void @llvm.lifetime.end(i64 16, i8* nonnull %17) 
  call void @llvm.lifetime.end(i64 16, i8* nonnull %14) 
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L8PACKSSWBI3VnWI8vec128_tE2VnIS2_E3MVnIS2_EEEP6MemoryS9_R5StateT_T0_T1_(%struct.Memory* returned, %struct.State* nocapture readnone dereferenceable(3376), i8* nocapture, i8* nocapture readonly, i64)  {
  %6 = alloca <2 x i64>, align 16
  %7 = bitcast <2 x i64>* %6 to { i64, i64 }*
  %8 = alloca { i64, i64 }, align 8
  %9 = alloca <2 x i64>, align 16
  %10 = bitcast <2 x i64>* %9 to { i64, i64 }*
  %11 = bitcast <2 x i64>* %9 to %struct.uint16v8_t*
  %12 = alloca <2 x i64>, align 16
  %13 = bitcast <2 x i64>* %12 to { i64, i64 }*
  %14 = bitcast <2 x i64>* %9 to i8*
  call void @llvm.lifetime.start(i64 16, i8* nonnull %14) 
  %15 = bitcast i8* %3 to <2 x i64>*
  %16 = load <2 x i64>, <2 x i64>* %15, align 1
  store <2 x i64> %16, <2 x i64>* %9, align 16
  %17 = bitcast <2 x i64>* %12 to i8*
  call void @llvm.lifetime.start(i64 16, i8* nonnull %17) 
  %18 = inttoptr i64 %4 to i16*
  %19 = load i16, i16* %18
  %20 = add i64 %4, 2
  %21 = inttoptr i64 %20 to i16*
  %22 = load i16, i16* %21
  %23 = add i64 %4, 4
  %24 = inttoptr i64 %23 to i16*
  %25 = load i16, i16* %24
  %26 = add i64 %4, 6
  %27 = inttoptr i64 %26 to i16*
  %28 = load i16, i16* %27
  %29 = add i64 %4, 8
  %30 = inttoptr i64 %29 to i16*
  %31 = load i16, i16* %30
  %32 = add i64 %4, 10
  %33 = inttoptr i64 %32 to i16*
  %34 = load i16, i16* %33
  %35 = add i64 %4, 12
  %36 = inttoptr i64 %35 to i16*
  %37 = load i16, i16* %36
  %38 = add i64 %4, 14
  %39 = inttoptr i64 %38 to i16*
  %40 = load i16, i16* %39
  %41 = insertelement <2 x i16> undef, i16 %28, i32 0
  %42 = insertelement <2 x i16> %41, i16 %40, i32 1
  %43 = zext <2 x i16> %42 to <2 x i64>
  %44 = shl nuw <2 x i64> %43, <i64 48, i64 48>
  %45 = insertelement <2 x i16> undef, i16 %25, i32 0
  %46 = insertelement <2 x i16> %45, i16 %37, i32 1
  %47 = zext <2 x i16> %46 to <2 x i64>
  %48 = shl nuw nsw <2 x i64> %47, <i64 32, i64 32>
  %49 = insertelement <2 x i16> undef, i16 %22, i32 0
  %50 = insertelement <2 x i16> %49, i16 %34, i32 1
  %51 = zext <2 x i16> %50 to <2 x i64>
  %52 = shl nuw nsw <2 x i64> %51, <i64 16, i64 16>
  %53 = insertelement <2 x i16> undef, i16 %19, i32 0
  %54 = insertelement <2 x i16> %53, i16 %31, i32 1
  %55 = zext <2 x i16> %54 to <2 x i64>
  %56 = or <2 x i64> %52, %55
  %57 = or <2 x i64> %56, %48
  %58 = or <2 x i64> %57, %44
  store <2 x i64> %58, <2 x i64>* %12, align 16
  %59 = bitcast <2 x i64>* %6 to i8*
  %60 = getelementptr inbounds <2 x i64>, <2 x i64>* %6, i64 0, i64 0
  %61 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %7, i64 0, i32 1
  %62 = bitcast <2 x i64>* %6 to [16 x i8]*
  %63 = extractelement <2 x i64> %16, i32 0
  %64 = trunc i64 %63 to i16
  %65 = icmp slt i16 %64, 127
  %66 = select i1 %65, i16 %64, i16 127
  %67 = trunc i16 %66 to i8
  %68 = icmp slt i16 %64, -128
  %69 = select i1 %68, i8 -128, i8 %67
  call void @llvm.lifetime.start(i64 16, i8* nonnull %59)
  store <2 x i64> zeroinitializer, <2 x i64>* %6, align 16
  %70 = bitcast <2 x i64>* %6 to i8*
  store i8 %69, i8* %70, align 16
  %71 = load i64, i64* %60, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %59)
  %72 = lshr i64 %63, 16
  %73 = trunc i64 %72 to i16
  %74 = icmp slt i16 %73, 127
  %75 = select i1 %74, i16 %73, i16 127
  %76 = trunc i16 %75 to i8
  %77 = icmp slt i16 %73, -128
  %78 = select i1 %77, i8 -128, i8 %76
  call void @llvm.lifetime.start(i64 16, i8* nonnull %59)
  store i64 %71, i64* %60, align 16
  store i64 0, i64* %61, align 8
  %79 = getelementptr inbounds [16 x i8], [16 x i8]* %62, i64 0, i64 1
  store i8 %78, i8* %79, align 1
  %80 = load i64, i64* %60, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %59)
  %81 = getelementptr inbounds %struct.uint16v8_t, %struct.uint16v8_t* %11, i64 0, i32 0, i64 2
  %82 = load i16, i16* %81, align 4
  %83 = icmp slt i16 %82, 127
  %84 = select i1 %83, i16 %82, i16 127
  %85 = trunc i16 %84 to i8
  %86 = icmp slt i16 %82, -128
  %87 = select i1 %86, i8 -128, i8 %85
  call void @llvm.lifetime.start(i64 16, i8* nonnull %59)
  store i64 %80, i64* %60, align 16
  store i64 0, i64* %61, align 8
  %88 = getelementptr inbounds [16 x i8], [16 x i8]* %62, i64 0, i64 2
  store i8 %87, i8* %88, align 2
  %89 = load i64, i64* %60, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %59)
  %90 = getelementptr inbounds %struct.uint16v8_t, %struct.uint16v8_t* %11, i64 0, i32 0, i64 3
  %91 = load i16, i16* %90, align 2
  %92 = icmp slt i16 %91, 127
  %93 = select i1 %92, i16 %91, i16 127
  %94 = trunc i16 %93 to i8
  %95 = icmp slt i16 %91, -128
  %96 = select i1 %95, i8 -128, i8 %94
  call void @llvm.lifetime.start(i64 16, i8* nonnull %59)
  store i64 %89, i64* %60, align 16
  store i64 0, i64* %61, align 8
  %97 = getelementptr inbounds [16 x i8], [16 x i8]* %62, i64 0, i64 3
  store i8 %96, i8* %97, align 1
  %98 = load i64, i64* %60, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %59)
  %99 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %10, i64 0, i32 1
  %100 = bitcast i64* %99 to i16*
  %101 = load i16, i16* %100, align 8
  %102 = icmp slt i16 %101, 127
  %103 = select i1 %102, i16 %101, i16 127
  %104 = trunc i16 %103 to i8
  %105 = icmp slt i16 %101, -128
  %106 = select i1 %105, i8 -128, i8 %104
  call void @llvm.lifetime.start(i64 16, i8* nonnull %59)
  store i64 %98, i64* %60, align 16
  store i64 0, i64* %61, align 8
  %107 = getelementptr inbounds [16 x i8], [16 x i8]* %62, i64 0, i64 4
  store i8 %106, i8* %107, align 4
  %108 = load i64, i64* %60, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %59)
  %109 = getelementptr inbounds %struct.uint16v8_t, %struct.uint16v8_t* %11, i64 0, i32 0, i64 5
  %110 = load i16, i16* %109, align 2
  %111 = icmp slt i16 %110, 127
  %112 = select i1 %111, i16 %110, i16 127
  %113 = trunc i16 %112 to i8
  %114 = icmp slt i16 %110, -128
  %115 = select i1 %114, i8 -128, i8 %113
  call void @llvm.lifetime.start(i64 16, i8* nonnull %59)
  store i64 %108, i64* %60, align 16
  store i64 0, i64* %61, align 8
  %116 = getelementptr inbounds [16 x i8], [16 x i8]* %62, i64 0, i64 5
  store i8 %115, i8* %116, align 1
  %117 = load i64, i64* %60, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %59)
  %118 = getelementptr inbounds %struct.uint16v8_t, %struct.uint16v8_t* %11, i64 0, i32 0, i64 6
  %119 = load i16, i16* %118, align 4
  %120 = icmp slt i16 %119, 127
  %121 = select i1 %120, i16 %119, i16 127
  %122 = trunc i16 %121 to i8
  %123 = icmp slt i16 %119, -128
  %124 = select i1 %123, i8 -128, i8 %122
  call void @llvm.lifetime.start(i64 16, i8* nonnull %59)
  store i64 %117, i64* %60, align 16
  store i64 0, i64* %61, align 8
  %125 = getelementptr inbounds [16 x i8], [16 x i8]* %62, i64 0, i64 6
  store i8 %124, i8* %125, align 2
  %126 = load i64, i64* %60, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %59)
  %127 = getelementptr inbounds %struct.uint16v8_t, %struct.uint16v8_t* %11, i64 0, i32 0, i64 7
  %128 = load i16, i16* %127, align 2
  %129 = icmp slt i16 %128, 127
  %130 = select i1 %129, i16 %128, i16 127
  %131 = trunc i16 %130 to i8
  %132 = icmp slt i16 %128, -128
  %133 = select i1 %132, i8 -128, i8 %131
  call void @llvm.lifetime.start(i64 16, i8* nonnull %59)
  store i64 %126, i64* %60, align 16
  store i64 0, i64* %61, align 8
  %134 = getelementptr inbounds [16 x i8], [16 x i8]* %62, i64 0, i64 7
  store i8 %133, i8* %134, align 1
  %135 = load i64, i64* %60, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %59)
  %136 = bitcast <2 x i64>* %12 to %struct.uint16v8_t*
  %137 = bitcast { i64, i64 }* %8 to i8*
  %138 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %8, i64 0, i32 0
  %139 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %8, i64 0, i32 1
  %140 = bitcast { i64, i64 }* %8 to [16 x i8]*
  %141 = bitcast <2 x i64>* %12 to i16*
  %142 = load i16, i16* %141, align 16
  %143 = icmp slt i16 %142, 127
  %144 = select i1 %143, i16 %142, i16 127
  %145 = trunc i16 %144 to i8
  %146 = icmp slt i16 %142, -128
  %147 = select i1 %146, i8 -128, i8 %145
  call void @llvm.lifetime.start(i64 16, i8* nonnull %137)
  store i64 %135, i64* %138, align 8
  store i64 0, i64* %139, align 8
  %148 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %8, i64 0, i32 1
  %149 = bitcast i64* %148 to i8*
  store i8 %147, i8* %149, align 8
  %150 = load i64, i64* %139, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %137)
  %151 = getelementptr inbounds %struct.uint16v8_t, %struct.uint16v8_t* %136, i64 0, i32 0, i64 1
  %152 = load i16, i16* %151, align 2
  %153 = icmp slt i16 %152, 127
  %154 = select i1 %153, i16 %152, i16 127
  %155 = trunc i16 %154 to i8
  %156 = icmp slt i16 %152, -128
  %157 = select i1 %156, i8 -128, i8 %155
  call void @llvm.lifetime.start(i64 16, i8* nonnull %137)
  store i64 %135, i64* %138, align 8
  store i64 %150, i64* %139, align 8
  %158 = getelementptr inbounds [16 x i8], [16 x i8]* %140, i64 0, i64 9
  store i8 %157, i8* %158, align 1
  %159 = load i64, i64* %139, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %137)
  %160 = getelementptr inbounds %struct.uint16v8_t, %struct.uint16v8_t* %136, i64 0, i32 0, i64 2
  %161 = load i16, i16* %160, align 4
  %162 = icmp slt i16 %161, 127
  %163 = select i1 %162, i16 %161, i16 127
  %164 = trunc i16 %163 to i8
  %165 = icmp slt i16 %161, -128
  %166 = select i1 %165, i8 -128, i8 %164
  call void @llvm.lifetime.start(i64 16, i8* nonnull %137)
  store i64 %135, i64* %138, align 8
  store i64 %159, i64* %139, align 8
  %167 = getelementptr inbounds [16 x i8], [16 x i8]* %140, i64 0, i64 10
  store i8 %166, i8* %167, align 2
  %168 = load i64, i64* %139, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %137)
  %169 = getelementptr inbounds %struct.uint16v8_t, %struct.uint16v8_t* %136, i64 0, i32 0, i64 3
  %170 = load i16, i16* %169, align 2
  %171 = icmp slt i16 %170, 127
  %172 = select i1 %171, i16 %170, i16 127
  %173 = trunc i16 %172 to i8
  %174 = icmp slt i16 %170, -128
  %175 = select i1 %174, i8 -128, i8 %173
  call void @llvm.lifetime.start(i64 16, i8* nonnull %137)
  store i64 %135, i64* %138, align 8
  store i64 %168, i64* %139, align 8
  %176 = getelementptr inbounds [16 x i8], [16 x i8]* %140, i64 0, i64 11
  store i8 %175, i8* %176, align 1
  %177 = load i64, i64* %139, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %137)
  %178 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %13, i64 0, i32 1
  %179 = bitcast i64* %178 to i16*
  %180 = load i16, i16* %179, align 8
  %181 = icmp slt i16 %180, 127
  %182 = select i1 %181, i16 %180, i16 127
  %183 = trunc i16 %182 to i8
  %184 = icmp slt i16 %180, -128
  %185 = select i1 %184, i8 -128, i8 %183
  call void @llvm.lifetime.start(i64 16, i8* nonnull %137)
  store i64 %135, i64* %138, align 8
  store i64 %177, i64* %139, align 8
  %186 = getelementptr inbounds [16 x i8], [16 x i8]* %140, i64 0, i64 12
  store i8 %185, i8* %186, align 4
  %187 = load i64, i64* %139, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %137)
  %188 = getelementptr inbounds %struct.uint16v8_t, %struct.uint16v8_t* %136, i64 0, i32 0, i64 5
  %189 = load i16, i16* %188, align 2
  %190 = icmp slt i16 %189, 127
  %191 = select i1 %190, i16 %189, i16 127
  %192 = trunc i16 %191 to i8
  %193 = icmp slt i16 %189, -128
  %194 = select i1 %193, i8 -128, i8 %192
  call void @llvm.lifetime.start(i64 16, i8* nonnull %137)
  store i64 %135, i64* %138, align 8
  store i64 %187, i64* %139, align 8
  %195 = getelementptr inbounds [16 x i8], [16 x i8]* %140, i64 0, i64 13
  store i8 %194, i8* %195, align 1
  %196 = load i64, i64* %139, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %137)
  %197 = getelementptr inbounds %struct.uint16v8_t, %struct.uint16v8_t* %136, i64 0, i32 0, i64 6
  %198 = load i16, i16* %197, align 4
  %199 = icmp slt i16 %198, 127
  %200 = select i1 %199, i16 %198, i16 127
  %201 = trunc i16 %200 to i8
  %202 = icmp slt i16 %198, -128
  %203 = select i1 %202, i8 -128, i8 %201
  call void @llvm.lifetime.start(i64 16, i8* nonnull %137)
  store i64 %135, i64* %138, align 8
  store i64 %196, i64* %139, align 8
  %204 = getelementptr inbounds [16 x i8], [16 x i8]* %140, i64 0, i64 14
  store i8 %203, i8* %204, align 2
  %205 = load i64, i64* %139, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %137)
  %206 = getelementptr inbounds %struct.uint16v8_t, %struct.uint16v8_t* %136, i64 0, i32 0, i64 7
  %207 = load i16, i16* %206, align 2
  %208 = icmp slt i16 %207, 127
  %209 = select i1 %208, i16 %207, i16 127
  %210 = trunc i16 %209 to i8
  %211 = icmp slt i16 %207, -128
  %212 = select i1 %211, i8 -128, i8 %210
  call void @llvm.lifetime.start(i64 16, i8* nonnull %137)
  store i64 %135, i64* %138, align 8
  store i64 %205, i64* %139, align 8
  %213 = getelementptr inbounds [16 x i8], [16 x i8]* %140, i64 0, i64 15
  store i8 %212, i8* %213, align 1
  %214 = load i64, i64* %139, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %137)
  %215 = lshr i64 %135, 8
  %216 = lshr i64 %135, 16
  %217 = lshr i64 %135, 24
  %218 = lshr i64 %135, 32
  %219 = lshr i64 %135, 40
  %220 = lshr i64 %135, 48
  %221 = lshr i64 %135, 56
  %222 = trunc i64 %135 to i8
  %223 = trunc i64 %215 to i8
  %224 = trunc i64 %216 to i8
  %225 = trunc i64 %217 to i8
  %226 = trunc i64 %218 to i8
  %227 = trunc i64 %219 to i8
  %228 = trunc i64 %220 to i8
  %229 = trunc i64 %221 to i8
  store i8 %222, i8* %2, align 1
  %230 = getelementptr inbounds i8, i8* %2, i64 1
  store i8 %223, i8* %230, align 1
  %231 = getelementptr inbounds i8, i8* %2, i64 2
  store i8 %224, i8* %231, align 1
  %232 = getelementptr inbounds i8, i8* %2, i64 3
  store i8 %225, i8* %232, align 1
  %233 = getelementptr inbounds i8, i8* %2, i64 4
  store i8 %226, i8* %233, align 1
  %234 = getelementptr inbounds i8, i8* %2, i64 5
  store i8 %227, i8* %234, align 1
  %235 = getelementptr inbounds i8, i8* %2, i64 6
  store i8 %228, i8* %235, align 1
  %236 = getelementptr inbounds i8, i8* %2, i64 7
  store i8 %229, i8* %236, align 1
  %237 = trunc i64 %214 to i8
  %238 = getelementptr inbounds i8, i8* %2, i64 8
  store i8 %237, i8* %238, align 1
  %239 = lshr i64 %214, 8
  %240 = trunc i64 %239 to i8
  %241 = getelementptr inbounds i8, i8* %2, i64 9
  store i8 %240, i8* %241, align 1
  %242 = lshr i64 %214, 16
  %243 = trunc i64 %242 to i8
  %244 = getelementptr inbounds i8, i8* %2, i64 10
  store i8 %243, i8* %244, align 1
  %245 = lshr i64 %214, 24
  %246 = trunc i64 %245 to i8
  %247 = getelementptr inbounds i8, i8* %2, i64 11
  store i8 %246, i8* %247, align 1
  %248 = lshr i64 %214, 32
  %249 = trunc i64 %248 to i8
  %250 = getelementptr inbounds i8, i8* %2, i64 12
  store i8 %249, i8* %250, align 1
  %251 = lshr i64 %214, 40
  %252 = trunc i64 %251 to i8
  %253 = getelementptr inbounds i8, i8* %2, i64 13
  store i8 %252, i8* %253, align 1
  %254 = lshr i64 %214, 48
  %255 = trunc i64 %254 to i8
  %256 = getelementptr inbounds i8, i8* %2, i64 14
  store i8 %255, i8* %256, align 1
  %257 = lshr i64 %214, 56
  %258 = trunc i64 %257 to i8
  %259 = getelementptr inbounds i8, i8* %2, i64 15
  store i8 %258, i8* %259, align 1
  call void @llvm.lifetime.end(i64 16, i8* nonnull %17) 
  call void @llvm.lifetime.end(i64 16, i8* nonnull %14) 
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L8PACKSSDWI4RVnWI7vec64_tE3RVnIS2_ES5_EEP6MemoryS7_R5StateT_T0_T1_(%struct.Memory* readnone returned, %struct.State* nocapture readnone dereferenceable(3376), i64* nocapture, i64, i64)  {
  %6 = alloca i64, align 8
  %7 = alloca i64, align 8
  %8 = bitcast i64* %6 to i8*
  %9 = bitcast i64* %6 to [4 x i16]*
  %10 = trunc i64 %3 to i32
  %11 = icmp slt i32 %10, 32767
  %12 = select i1 %11, i32 %10, i32 32767
  %13 = trunc i32 %12 to i16
  %14 = icmp slt i32 %10, -32768
  %15 = select i1 %14, i16 -32768, i16 %13
  call void @llvm.lifetime.start(i64 8, i8* nonnull %8)
  store i64 0, i64* %6, align 8
  %16 = bitcast i64* %6 to i16*
  store i16 %15, i16* %16, align 8
  %17 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %8)
  %18 = lshr i64 %3, 32
  %19 = trunc i64 %18 to i32
  %20 = icmp slt i32 %19, 32767
  %21 = select i1 %20, i32 %19, i32 32767
  %22 = trunc i32 %21 to i16
  %23 = icmp slt i32 %19, -32768
  %24 = select i1 %23, i16 -32768, i16 %22
  call void @llvm.lifetime.start(i64 8, i8* nonnull %8)
  store i64 %17, i64* %6, align 8
  %25 = getelementptr inbounds [4 x i16], [4 x i16]* %9, i64 0, i64 1
  store i16 %24, i16* %25, align 2
  %26 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %8)
  %27 = bitcast i64* %7 to i8*
  %28 = bitcast i64* %7 to [4 x i16]*
  %29 = trunc i64 %4 to i32
  %30 = icmp slt i32 %29, 32767
  %31 = select i1 %30, i32 %29, i32 32767
  %32 = trunc i32 %31 to i16
  %33 = icmp slt i32 %29, -32768
  %34 = select i1 %33, i16 -32768, i16 %32
  call void @llvm.lifetime.start(i64 8, i8* nonnull %27)
  store i64 %26, i64* %7, align 8
  %35 = getelementptr inbounds [4 x i16], [4 x i16]* %28, i64 0, i64 2
  store i16 %34, i16* %35, align 4
  %36 = load i64, i64* %7, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %27)
  %37 = lshr i64 %4, 32
  %38 = trunc i64 %37 to i32
  %39 = icmp slt i32 %38, 32767
  %40 = select i1 %39, i32 %38, i32 32767
  %41 = trunc i32 %40 to i16
  %42 = icmp slt i32 %38, -32768
  %43 = select i1 %42, i16 -32768, i16 %41
  call void @llvm.lifetime.start(i64 8, i8* nonnull %27)
  store i64 %36, i64* %7, align 8
  %44 = getelementptr inbounds [4 x i16], [4 x i16]* %28, i64 0, i64 3
  store i16 %43, i16* %44, align 2
  %45 = load i64, i64* %7, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %27)
  %46 = lshr i64 %45, 16
  %47 = lshr i64 %45, 32
  %48 = lshr i64 %45, 48
  %49 = trunc i64 %45 to i16
  %50 = trunc i64 %46 to i16
  %51 = trunc i64 %47 to i16
  %52 = trunc i64 %48 to i16
  %53 = bitcast i64* %2 to [4 x i16]*
  %54 = bitcast i64* %2 to i16*
  store i16 %49, i16* %54, align 1
  %55 = getelementptr inbounds [4 x i16], [4 x i16]* %53, i64 0, i64 1
  store i16 %50, i16* %55, align 1
  %56 = getelementptr inbounds [4 x i16], [4 x i16]* %53, i64 0, i64 2
  store i16 %51, i16* %56, align 1
  %57 = getelementptr inbounds [4 x i16], [4 x i16]* %53, i64 0, i64 3
  store i16 %52, i16* %57, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L8PACKSSDWI4RVnWI7vec64_tE3RVnIS2_E3MVnIS2_EEEP6MemoryS9_R5StateT_T0_T1_(%struct.Memory* returned, %struct.State* nocapture readnone dereferenceable(3376), i64* nocapture, i64, i64)  {
  %6 = alloca i64, align 8
  %7 = alloca i64, align 8
  %8 = inttoptr i64 %4 to i32*
  %9 = load i32, i32* %8
  %10 = add i64 %4, 4
  %11 = inttoptr i64 %10 to i32*
  %12 = load i32, i32* %11
  %13 = bitcast i64* %6 to i8*
  %14 = bitcast i64* %6 to [4 x i16]*
  %15 = trunc i64 %3 to i32
  %16 = icmp slt i32 %15, 32767
  %17 = select i1 %16, i32 %15, i32 32767
  %18 = trunc i32 %17 to i16
  %19 = icmp slt i32 %15, -32768
  %20 = select i1 %19, i16 -32768, i16 %18
  call void @llvm.lifetime.start(i64 8, i8* nonnull %13)
  store i64 0, i64* %6, align 8
  %21 = bitcast i64* %6 to i16*
  store i16 %20, i16* %21, align 8
  %22 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %13)
  %23 = lshr i64 %3, 32
  %24 = trunc i64 %23 to i32
  %25 = icmp slt i32 %24, 32767
  %26 = select i1 %25, i32 %24, i32 32767
  %27 = trunc i32 %26 to i16
  %28 = icmp slt i32 %24, -32768
  %29 = select i1 %28, i16 -32768, i16 %27
  call void @llvm.lifetime.start(i64 8, i8* nonnull %13)
  store i64 %22, i64* %6, align 8
  %30 = getelementptr inbounds [4 x i16], [4 x i16]* %14, i64 0, i64 1
  store i16 %29, i16* %30, align 2
  %31 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %13)
  %32 = bitcast i64* %7 to i8*
  %33 = bitcast i64* %7 to [4 x i16]*
  %34 = icmp slt i32 %9, 32767
  %35 = select i1 %34, i32 %9, i32 32767
  %36 = trunc i32 %35 to i16
  %37 = icmp slt i32 %9, -32768
  %38 = select i1 %37, i16 -32768, i16 %36
  call void @llvm.lifetime.start(i64 8, i8* nonnull %32)
  store i64 %31, i64* %7, align 8
  %39 = getelementptr inbounds [4 x i16], [4 x i16]* %33, i64 0, i64 2
  store i16 %38, i16* %39, align 4
  %40 = load i64, i64* %7, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %32)
  %41 = icmp slt i32 %12, 32767
  %42 = select i1 %41, i32 %12, i32 32767
  %43 = trunc i32 %42 to i16
  %44 = icmp slt i32 %12, -32768
  %45 = select i1 %44, i16 -32768, i16 %43
  call void @llvm.lifetime.start(i64 8, i8* nonnull %32)
  store i64 %40, i64* %7, align 8
  %46 = getelementptr inbounds [4 x i16], [4 x i16]* %33, i64 0, i64 3
  store i16 %45, i16* %46, align 2
  %47 = load i64, i64* %7, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %32)
  %48 = lshr i64 %47, 16
  %49 = lshr i64 %47, 32
  %50 = lshr i64 %47, 48
  %51 = trunc i64 %47 to i16
  %52 = trunc i64 %48 to i16
  %53 = trunc i64 %49 to i16
  %54 = trunc i64 %50 to i16
  %55 = bitcast i64* %2 to [4 x i16]*
  %56 = bitcast i64* %2 to i16*
  store i16 %51, i16* %56, align 1
  %57 = getelementptr inbounds [4 x i16], [4 x i16]* %55, i64 0, i64 1
  store i16 %52, i16* %57, align 1
  %58 = getelementptr inbounds [4 x i16], [4 x i16]* %55, i64 0, i64 2
  store i16 %53, i16* %58, align 1
  %59 = getelementptr inbounds [4 x i16], [4 x i16]* %55, i64 0, i64 3
  store i16 %54, i16* %59, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L8PACKSSDWI3VnWI8vec128_tE2VnIS2_ES5_EEP6MemoryS7_R5StateT_T0_T1_(%struct.Memory* readnone returned, %struct.State* nocapture readnone dereferenceable(3376), i8* nocapture, i8* nocapture readonly, i8* nocapture readonly)  {
  %6 = alloca <2 x i64>, align 16
  %7 = bitcast <2 x i64>* %6 to { i64, i64 }*
  %8 = alloca { i64, i64 }, align 8
  %9 = alloca <2 x i64>, align 16
  %10 = bitcast <2 x i64>* %9 to { i64, i64 }*
  %11 = bitcast i8* %3 to i64*
  %12 = load i64, i64* %11, align 1
  %13 = getelementptr inbounds i8, i8* %3, i64 8
  %14 = bitcast i8* %13 to i64*
  %15 = load i64, i64* %14, align 1
  %16 = bitcast <2 x i64>* %9 to i8*
  call void @llvm.lifetime.start(i64 16, i8* nonnull %16) 
  %17 = bitcast i8* %4 to <2 x i64>*
  %18 = load <2 x i64>, <2 x i64>* %17, align 1
  store <2 x i64> %18, <2 x i64>* %9, align 16
  %19 = bitcast <2 x i64>* %6 to i8*
  %20 = getelementptr inbounds <2 x i64>, <2 x i64>* %6, i64 0, i64 0
  %21 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %7, i64 0, i32 1
  %22 = bitcast <2 x i64>* %6 to [8 x i16]*
  %23 = trunc i64 %12 to i32
  %24 = icmp slt i32 %23, 32767
  %25 = select i1 %24, i32 %23, i32 32767
  %26 = trunc i32 %25 to i16
  %27 = icmp slt i32 %23, -32768
  %28 = select i1 %27, i16 -32768, i16 %26
  call void @llvm.lifetime.start(i64 16, i8* nonnull %19)
  store <2 x i64> zeroinitializer, <2 x i64>* %6, align 16
  %29 = bitcast <2 x i64>* %6 to i16*
  store i16 %28, i16* %29, align 16
  %30 = load i64, i64* %20, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %19)
  %31 = lshr i64 %12, 32
  %32 = trunc i64 %31 to i32
  %33 = icmp slt i32 %32, 32767
  %34 = select i1 %33, i32 %32, i32 32767
  %35 = trunc i32 %34 to i16
  %36 = icmp slt i32 %32, -32768
  %37 = select i1 %36, i16 -32768, i16 %35
  call void @llvm.lifetime.start(i64 16, i8* nonnull %19)
  store i64 %30, i64* %20, align 16
  store i64 0, i64* %21, align 8
  %38 = getelementptr inbounds [8 x i16], [8 x i16]* %22, i64 0, i64 1
  store i16 %37, i16* %38, align 2
  %39 = load i64, i64* %20, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %19)
  %40 = trunc i64 %15 to i32
  %41 = icmp slt i32 %40, 32767
  %42 = select i1 %41, i32 %40, i32 32767
  %43 = trunc i32 %42 to i16
  %44 = icmp slt i32 %40, -32768
  %45 = select i1 %44, i16 -32768, i16 %43
  call void @llvm.lifetime.start(i64 16, i8* nonnull %19)
  store i64 %39, i64* %20, align 16
  store i64 0, i64* %21, align 8
  %46 = getelementptr inbounds [8 x i16], [8 x i16]* %22, i64 0, i64 2
  store i16 %45, i16* %46, align 4
  %47 = load i64, i64* %20, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %19)
  %48 = lshr i64 %15, 32
  %49 = trunc i64 %48 to i32
  %50 = icmp slt i32 %49, 32767
  %51 = select i1 %50, i32 %49, i32 32767
  %52 = trunc i32 %51 to i16
  %53 = icmp slt i32 %49, -32768
  %54 = select i1 %53, i16 -32768, i16 %52
  call void @llvm.lifetime.start(i64 16, i8* nonnull %19)
  store i64 %47, i64* %20, align 16
  store i64 0, i64* %21, align 8
  %55 = getelementptr inbounds [8 x i16], [8 x i16]* %22, i64 0, i64 3
  store i16 %54, i16* %55, align 2
  %56 = load i64, i64* %20, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %19)
  %57 = bitcast <2 x i64>* %9 to %struct.int32v4_t*
  %58 = bitcast { i64, i64 }* %8 to i8*
  %59 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %8, i64 0, i32 0
  %60 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %8, i64 0, i32 1
  %61 = bitcast { i64, i64 }* %8 to [8 x i16]*
  %62 = bitcast <2 x i64>* %9 to i32*
  %63 = load i32, i32* %62, align 16
  %64 = icmp slt i32 %63, 32767
  %65 = select i1 %64, i32 %63, i32 32767
  %66 = trunc i32 %65 to i16
  %67 = icmp slt i32 %63, -32768
  %68 = select i1 %67, i16 -32768, i16 %66
  call void @llvm.lifetime.start(i64 16, i8* nonnull %58)
  store i64 %56, i64* %59, align 8
  store i64 0, i64* %60, align 8
  %69 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %8, i64 0, i32 1
  %70 = bitcast i64* %69 to i16*
  store i16 %68, i16* %70, align 8
  %71 = load i64, i64* %60, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %58)
  %72 = getelementptr inbounds %struct.int32v4_t, %struct.int32v4_t* %57, i64 0, i32 0, i64 1
  %73 = load i32, i32* %72, align 4
  %74 = icmp slt i32 %73, 32767
  %75 = select i1 %74, i32 %73, i32 32767
  %76 = trunc i32 %75 to i16
  %77 = icmp slt i32 %73, -32768
  %78 = select i1 %77, i16 -32768, i16 %76
  call void @llvm.lifetime.start(i64 16, i8* nonnull %58)
  store i64 %56, i64* %59, align 8
  store i64 %71, i64* %60, align 8
  %79 = getelementptr inbounds [8 x i16], [8 x i16]* %61, i64 0, i64 5
  store i16 %78, i16* %79, align 2
  %80 = load i64, i64* %60, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %58)
  %81 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %10, i64 0, i32 1
  %82 = bitcast i64* %81 to i32*
  %83 = load i32, i32* %82, align 8
  %84 = icmp slt i32 %83, 32767
  %85 = select i1 %84, i32 %83, i32 32767
  %86 = trunc i32 %85 to i16
  %87 = icmp slt i32 %83, -32768
  %88 = select i1 %87, i16 -32768, i16 %86
  call void @llvm.lifetime.start(i64 16, i8* nonnull %58)
  store i64 %56, i64* %59, align 8
  store i64 %80, i64* %60, align 8
  %89 = getelementptr inbounds [8 x i16], [8 x i16]* %61, i64 0, i64 6
  store i16 %88, i16* %89, align 4
  %90 = load i64, i64* %60, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %58)
  %91 = getelementptr inbounds %struct.int32v4_t, %struct.int32v4_t* %57, i64 0, i32 0, i64 3
  %92 = load i32, i32* %91, align 4
  %93 = icmp slt i32 %92, 32767
  %94 = select i1 %93, i32 %92, i32 32767
  %95 = trunc i32 %94 to i16
  %96 = icmp slt i32 %92, -32768
  %97 = select i1 %96, i16 -32768, i16 %95
  call void @llvm.lifetime.start(i64 16, i8* nonnull %58)
  store i64 %56, i64* %59, align 8
  store i64 %90, i64* %60, align 8
  %98 = getelementptr inbounds [8 x i16], [8 x i16]* %61, i64 0, i64 7
  store i16 %97, i16* %98, align 2
  %99 = load i64, i64* %60, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %58)
  %100 = lshr i64 %56, 16
  %101 = lshr i64 %56, 32
  %102 = lshr i64 %56, 48
  %103 = trunc i64 %56 to i16
  %104 = trunc i64 %100 to i16
  %105 = trunc i64 %101 to i16
  %106 = trunc i64 %102 to i16
  %107 = bitcast i8* %2 to i16*
  store i16 %103, i16* %107, align 1
  %108 = getelementptr inbounds i8, i8* %2, i64 2
  %109 = bitcast i8* %108 to i16*
  store i16 %104, i16* %109, align 1
  %110 = getelementptr inbounds i8, i8* %2, i64 4
  %111 = bitcast i8* %110 to i16*
  store i16 %105, i16* %111, align 1
  %112 = getelementptr inbounds i8, i8* %2, i64 6
  %113 = bitcast i8* %112 to i16*
  store i16 %106, i16* %113, align 1
  %114 = trunc i64 %99 to i16
  %115 = getelementptr inbounds i8, i8* %2, i64 8
  %116 = bitcast i8* %115 to i16*
  store i16 %114, i16* %116, align 1
  %117 = lshr i64 %99, 16
  %118 = trunc i64 %117 to i16
  %119 = getelementptr inbounds i8, i8* %2, i64 10
  %120 = bitcast i8* %119 to i16*
  store i16 %118, i16* %120, align 1
  %121 = lshr i64 %99, 32
  %122 = trunc i64 %121 to i16
  %123 = getelementptr inbounds i8, i8* %2, i64 12
  %124 = bitcast i8* %123 to i16*
  store i16 %122, i16* %124, align 1
  %125 = lshr i64 %99, 48
  %126 = trunc i64 %125 to i16
  %127 = getelementptr inbounds i8, i8* %2, i64 14
  %128 = bitcast i8* %127 to i16*
  store i16 %126, i16* %128, align 1
  call void @llvm.lifetime.end(i64 16, i8* nonnull %16) 
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L8PACKSSDWI3VnWI8vec128_tE2VnIS2_E3MVnIS2_EEEP6MemoryS9_R5StateT_T0_T1_(%struct.Memory* returned, %struct.State* nocapture readnone dereferenceable(3376), i8* nocapture, i8* nocapture readonly, i64)  {
  %6 = alloca <2 x i64>, align 16
  %7 = bitcast <2 x i64>* %6 to { i64, i64 }*
  %8 = alloca { i64, i64 }, align 8
  %9 = alloca { i64, i64 }, align 8
  %10 = bitcast i8* %3 to i64*
  %11 = load i64, i64* %10, align 1
  %12 = getelementptr inbounds i8, i8* %3, i64 8
  %13 = bitcast i8* %12 to i64*
  %14 = load i64, i64* %13, align 1
  %15 = bitcast { i64, i64 }* %9 to i8*
  call void @llvm.lifetime.start(i64 16, i8* nonnull %15) 
  %16 = inttoptr i64 %4 to i32*
  %17 = load i32, i32* %16
  %18 = add i64 %4, 4
  %19 = inttoptr i64 %18 to i32*
  %20 = load i32, i32* %19
  %21 = add i64 %4, 8
  %22 = inttoptr i64 %21 to i32*
  %23 = load i32, i32* %22
  %24 = zext i32 %23 to i64
  %25 = add i64 %4, 12
  %26 = inttoptr i64 %25 to i32*
  %27 = load i32, i32* %26
  %28 = zext i32 %27 to i64
  %29 = shl nuw i64 %28, 32
  %30 = or i64 %29, %24
  %31 = zext i32 %20 to i64
  %32 = shl nuw i64 %31, 32
  %33 = zext i32 %17 to i64
  %34 = or i64 %32, %33
  %35 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %9, i64 0, i32 0
  store i64 %34, i64* %35, align 8
  %36 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %9, i64 0, i32 1
  store i64 %30, i64* %36, align 8
  %37 = bitcast <2 x i64>* %6 to i8*
  %38 = getelementptr inbounds <2 x i64>, <2 x i64>* %6, i64 0, i64 0
  %39 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %7, i64 0, i32 1
  %40 = bitcast <2 x i64>* %6 to [8 x i16]*
  %41 = trunc i64 %11 to i32
  %42 = icmp slt i32 %41, 32767
  %43 = select i1 %42, i32 %41, i32 32767
  %44 = trunc i32 %43 to i16
  %45 = icmp slt i32 %41, -32768
  %46 = select i1 %45, i16 -32768, i16 %44
  call void @llvm.lifetime.start(i64 16, i8* nonnull %37)
  store <2 x i64> zeroinitializer, <2 x i64>* %6, align 16
  %47 = bitcast <2 x i64>* %6 to i16*
  store i16 %46, i16* %47, align 16
  %48 = load i64, i64* %38, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %37)
  %49 = lshr i64 %11, 32
  %50 = trunc i64 %49 to i32
  %51 = icmp slt i32 %50, 32767
  %52 = select i1 %51, i32 %50, i32 32767
  %53 = trunc i32 %52 to i16
  %54 = icmp slt i32 %50, -32768
  %55 = select i1 %54, i16 -32768, i16 %53
  call void @llvm.lifetime.start(i64 16, i8* nonnull %37)
  store i64 %48, i64* %38, align 16
  store i64 0, i64* %39, align 8
  %56 = getelementptr inbounds [8 x i16], [8 x i16]* %40, i64 0, i64 1
  store i16 %55, i16* %56, align 2
  %57 = load i64, i64* %38, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %37)
  %58 = trunc i64 %14 to i32
  %59 = icmp slt i32 %58, 32767
  %60 = select i1 %59, i32 %58, i32 32767
  %61 = trunc i32 %60 to i16
  %62 = icmp slt i32 %58, -32768
  %63 = select i1 %62, i16 -32768, i16 %61
  call void @llvm.lifetime.start(i64 16, i8* nonnull %37)
  store i64 %57, i64* %38, align 16
  store i64 0, i64* %39, align 8
  %64 = getelementptr inbounds [8 x i16], [8 x i16]* %40, i64 0, i64 2
  store i16 %63, i16* %64, align 4
  %65 = load i64, i64* %38, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %37)
  %66 = lshr i64 %14, 32
  %67 = trunc i64 %66 to i32
  %68 = icmp slt i32 %67, 32767
  %69 = select i1 %68, i32 %67, i32 32767
  %70 = trunc i32 %69 to i16
  %71 = icmp slt i32 %67, -32768
  %72 = select i1 %71, i16 -32768, i16 %70
  call void @llvm.lifetime.start(i64 16, i8* nonnull %37)
  store i64 %65, i64* %38, align 16
  store i64 0, i64* %39, align 8
  %73 = getelementptr inbounds [8 x i16], [8 x i16]* %40, i64 0, i64 3
  store i16 %72, i16* %73, align 2
  %74 = load i64, i64* %38, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %37)
  %75 = bitcast { i64, i64 }* %9 to %struct.int32v4_t*
  %76 = bitcast { i64, i64 }* %8 to i8*
  %77 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %8, i64 0, i32 0
  %78 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %8, i64 0, i32 1
  %79 = bitcast { i64, i64 }* %8 to [8 x i16]*
  %80 = bitcast { i64, i64 }* %9 to i32*
  %81 = load i32, i32* %80, align 8
  %82 = icmp slt i32 %81, 32767
  %83 = select i1 %82, i32 %81, i32 32767
  %84 = trunc i32 %83 to i16
  %85 = icmp slt i32 %81, -32768
  %86 = select i1 %85, i16 -32768, i16 %84
  call void @llvm.lifetime.start(i64 16, i8* nonnull %76)
  store i64 %74, i64* %77, align 8
  store i64 0, i64* %78, align 8
  %87 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %8, i64 0, i32 1
  %88 = bitcast i64* %87 to i16*
  store i16 %86, i16* %88, align 8
  %89 = load i64, i64* %78, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %76)
  %90 = getelementptr inbounds %struct.int32v4_t, %struct.int32v4_t* %75, i64 0, i32 0, i64 1
  %91 = load i32, i32* %90, align 4
  %92 = icmp slt i32 %91, 32767
  %93 = select i1 %92, i32 %91, i32 32767
  %94 = trunc i32 %93 to i16
  %95 = icmp slt i32 %91, -32768
  %96 = select i1 %95, i16 -32768, i16 %94
  call void @llvm.lifetime.start(i64 16, i8* nonnull %76)
  store i64 %74, i64* %77, align 8
  store i64 %89, i64* %78, align 8
  %97 = getelementptr inbounds [8 x i16], [8 x i16]* %79, i64 0, i64 5
  store i16 %96, i16* %97, align 2
  %98 = load i64, i64* %78, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %76)
  %99 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %9, i64 0, i32 1
  %100 = bitcast i64* %99 to i32*
  %101 = load i32, i32* %100, align 8
  %102 = icmp slt i32 %101, 32767
  %103 = select i1 %102, i32 %101, i32 32767
  %104 = trunc i32 %103 to i16
  %105 = icmp slt i32 %101, -32768
  %106 = select i1 %105, i16 -32768, i16 %104
  call void @llvm.lifetime.start(i64 16, i8* nonnull %76)
  store i64 %74, i64* %77, align 8
  store i64 %98, i64* %78, align 8
  %107 = getelementptr inbounds [8 x i16], [8 x i16]* %79, i64 0, i64 6
  store i16 %106, i16* %107, align 4
  %108 = load i64, i64* %78, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %76)
  %109 = getelementptr inbounds %struct.int32v4_t, %struct.int32v4_t* %75, i64 0, i32 0, i64 3
  %110 = load i32, i32* %109, align 4
  %111 = icmp slt i32 %110, 32767
  %112 = select i1 %111, i32 %110, i32 32767
  %113 = trunc i32 %112 to i16
  %114 = icmp slt i32 %110, -32768
  %115 = select i1 %114, i16 -32768, i16 %113
  call void @llvm.lifetime.start(i64 16, i8* nonnull %76)
  store i64 %74, i64* %77, align 8
  store i64 %108, i64* %78, align 8
  %116 = getelementptr inbounds [8 x i16], [8 x i16]* %79, i64 0, i64 7
  store i16 %115, i16* %116, align 2
  %117 = load i64, i64* %78, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %76)
  %118 = lshr i64 %74, 16
  %119 = lshr i64 %74, 32
  %120 = lshr i64 %74, 48
  %121 = trunc i64 %74 to i16
  %122 = trunc i64 %118 to i16
  %123 = trunc i64 %119 to i16
  %124 = trunc i64 %120 to i16
  %125 = bitcast i8* %2 to i16*
  store i16 %121, i16* %125, align 1
  %126 = getelementptr inbounds i8, i8* %2, i64 2
  %127 = bitcast i8* %126 to i16*
  store i16 %122, i16* %127, align 1
  %128 = getelementptr inbounds i8, i8* %2, i64 4
  %129 = bitcast i8* %128 to i16*
  store i16 %123, i16* %129, align 1
  %130 = getelementptr inbounds i8, i8* %2, i64 6
  %131 = bitcast i8* %130 to i16*
  store i16 %124, i16* %131, align 1
  %132 = trunc i64 %117 to i16
  %133 = getelementptr inbounds i8, i8* %2, i64 8
  %134 = bitcast i8* %133 to i16*
  store i16 %132, i16* %134, align 1
  %135 = lshr i64 %117, 16
  %136 = trunc i64 %135 to i16
  %137 = getelementptr inbounds i8, i8* %2, i64 10
  %138 = bitcast i8* %137 to i16*
  store i16 %136, i16* %138, align 1
  %139 = lshr i64 %117, 32
  %140 = trunc i64 %139 to i16
  %141 = getelementptr inbounds i8, i8* %2, i64 12
  %142 = bitcast i8* %141 to i16*
  store i16 %140, i16* %142, align 1
  %143 = lshr i64 %117, 48
  %144 = trunc i64 %143 to i16
  %145 = getelementptr inbounds i8, i8* %2, i64 14
  %146 = bitcast i8* %145 to i16*
  store i16 %144, i16* %146, align 1
  call void @llvm.lifetime.end(i64 16, i8* nonnull %15) 
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind readonly
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L6PEXTRBI3MnWIhE2VnI8vec128_tEEEP6MemoryS7_R5StateT_T0_2InIhE(%struct.Memory* readnone, %struct.State* nocapture readnone dereferenceable(3376), i64, i8* nocapture readonly, i64)  {
  %6 = alloca <2 x i64>, align 16
  %7 = bitcast <2 x i64>* %6 to %struct.uint8v16_t*
  %8 = bitcast <2 x i64>* %6 to i8*
  call void @llvm.lifetime.start(i64 16, i8* nonnull %8) 
  %9 = bitcast i8* %3 to <2 x i64>*
  %10 = load <2 x i64>, <2 x i64>* %9, align 1
  store <2 x i64> %10, <2 x i64>* %6, align 16
  %11 = and i64 %4, 15
  %12 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %7, i64 0, i32 0, i64 %11
  %13 = load i8, i8* %12, align 1
  %14 = inttoptr i64 %2 to i8*
  store i8 %13, i8* %14
  call void @llvm.lifetime.end(i64 16, i8* nonnull %8) 
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L6PEXTRBI3RnWImE2VnI8vec128_tEEEP6MemoryS7_R5StateT_T0_2InIhE(%struct.Memory* readnone returned, %struct.State* nocapture readnone dereferenceable(3376), i64* nocapture, i8* nocapture readonly, i64)  {
  %6 = alloca <2 x i64>, align 16
  %7 = bitcast <2 x i64>* %6 to %struct.uint8v16_t*
  %8 = bitcast <2 x i64>* %6 to i8*
  call void @llvm.lifetime.start(i64 16, i8* nonnull %8) 
  %9 = bitcast i8* %3 to <2 x i64>*
  %10 = load <2 x i64>, <2 x i64>* %9, align 1
  store <2 x i64> %10, <2 x i64>* %6, align 16
  %11 = and i64 %4, 15
  %12 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %7, i64 0, i32 0, i64 %11
  %13 = load i8, i8* %12, align 1
  %14 = zext i8 %13 to i64
  store i64 %14, i64* %2, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %8) 
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L6PEXTRWI3RnWImE3RVnI7vec64_tEEEP6MemoryS7_R5StateT_T0_2InIhE(%struct.Memory* readnone returned, %struct.State* nocapture readnone dereferenceable(3376), i64* nocapture, i64, i64)  {
  %6 = alloca i64, align 8
  %7 = bitcast i64* %6 to %struct.int16v4_t*
  %8 = bitcast i64* %6 to i8*
  call void @llvm.lifetime.start(i64 8, i8* nonnull %8) 
  store i64 %3, i64* %6, align 8
  %9 = and i64 %4, 3
  %10 = getelementptr inbounds %struct.int16v4_t, %struct.int16v4_t* %7, i64 0, i32 0, i64 %9
  %11 = load i16, i16* %10, align 2
  %12 = zext i16 %11 to i64
  store i64 %12, i64* %2, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %8) 
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L6PEXTRWI3RnWImE2VnI8vec128_tEEEP6MemoryS7_R5StateT_T0_2InIhE(%struct.Memory* readnone returned, %struct.State* nocapture readnone dereferenceable(3376), i64* nocapture, i8* nocapture readonly, i64)  {
  %6 = alloca <2 x i64>, align 16
  %7 = bitcast <2 x i64>* %6 to %struct.uint16v8_t*
  %8 = bitcast <2 x i64>* %6 to i8*
  call void @llvm.lifetime.start(i64 16, i8* nonnull %8) 
  %9 = bitcast i8* %3 to <2 x i64>*
  %10 = load <2 x i64>, <2 x i64>* %9, align 1
  store <2 x i64> %10, <2 x i64>* %6, align 16
  %11 = and i64 %4, 7
  %12 = getelementptr inbounds %struct.uint16v8_t, %struct.uint16v8_t* %7, i64 0, i32 0, i64 %11
  %13 = load i16, i16* %12, align 2
  %14 = zext i16 %13 to i64
  store i64 %14, i64* %2, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %8) 
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind readonly
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L6PEXTRWI3MnWItE2VnI8vec128_tEEEP6MemoryS7_R5StateT_T0_2InIhE(%struct.Memory* readnone, %struct.State* nocapture readnone dereferenceable(3376), i64, i8* nocapture readonly, i64)  {
  %6 = alloca <2 x i64>, align 16
  %7 = bitcast <2 x i64>* %6 to %struct.uint16v8_t*
  %8 = bitcast <2 x i64>* %6 to i8*
  call void @llvm.lifetime.start(i64 16, i8* nonnull %8) 
  %9 = bitcast i8* %3 to <2 x i64>*
  %10 = load <2 x i64>, <2 x i64>* %9, align 1
  store <2 x i64> %10, <2 x i64>* %6, align 16
  %11 = and i64 %4, 7
  %12 = getelementptr inbounds %struct.uint16v8_t, %struct.uint16v8_t* %7, i64 0, i32 0, i64 %11
  %13 = load i16, i16* %12, align 2
  %14 = inttoptr i64 %2 to i16*
  store i16 %13, i16* %14
  call void @llvm.lifetime.end(i64 16, i8* nonnull %8) 
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind readonly
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L6PEXTRDI3MnWIjE2VnI8vec128_tEEEP6MemoryS7_R5StateT_T0_2InIhE(%struct.Memory* readnone, %struct.State* nocapture readnone dereferenceable(3376), i64, i8* nocapture readonly, i64)  {
  %6 = alloca <2 x i64>, align 16
  %7 = bitcast <2 x i64>* %6 to %struct.int32v4_t*
  %8 = bitcast <2 x i64>* %6 to i8*
  call void @llvm.lifetime.start(i64 16, i8* nonnull %8) 
  %9 = bitcast i8* %3 to <2 x i64>*
  %10 = load <2 x i64>, <2 x i64>* %9, align 1
  store <2 x i64> %10, <2 x i64>* %6, align 16
  %11 = and i64 %4, 3
  %12 = getelementptr inbounds %struct.int32v4_t, %struct.int32v4_t* %7, i64 0, i32 0, i64 %11
  %13 = load i32, i32* %12, align 4
  %14 = inttoptr i64 %2 to i32*
  store i32 %13, i32* %14
  call void @llvm.lifetime.end(i64 16, i8* nonnull %8) 
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L6PEXTRDI3RnWImE2VnI8vec128_tEEEP6MemoryS7_R5StateT_T0_2InIhE(%struct.Memory* readnone returned, %struct.State* nocapture readnone dereferenceable(3376), i64* nocapture, i8* nocapture readonly, i64)  {
  %6 = alloca <2 x i64>, align 16
  %7 = bitcast <2 x i64>* %6 to %struct.int32v4_t*
  %8 = bitcast <2 x i64>* %6 to i8*
  call void @llvm.lifetime.start(i64 16, i8* nonnull %8) 
  %9 = bitcast i8* %3 to <2 x i64>*
  %10 = load <2 x i64>, <2 x i64>* %9, align 1
  store <2 x i64> %10, <2 x i64>* %6, align 16
  %11 = and i64 %4, 3
  %12 = getelementptr inbounds %struct.int32v4_t, %struct.int32v4_t* %7, i64 0, i32 0, i64 %11
  %13 = load i32, i32* %12, align 4
  %14 = zext i32 %13 to i64
  store i64 %14, i64* %2, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %8) 
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind readonly
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L6PEXTRQI3MnWImE2VnI8vec128_tEEEP6MemoryS7_R5StateT_T0_2InIhE(%struct.Memory* readnone, %struct.State* nocapture readnone dereferenceable(3376), i64, i8* nocapture readonly, i64)  {
  %6 = alloca <2 x i64>, align 16
  %7 = bitcast <2 x i64>* %6 to %struct.uint64v2_t*
  %8 = bitcast <2 x i64>* %6 to i8*
  call void @llvm.lifetime.start(i64 16, i8* nonnull %8) 
  %9 = bitcast i8* %3 to <2 x i64>*
  %10 = load <2 x i64>, <2 x i64>* %9, align 1
  store <2 x i64> %10, <2 x i64>* %6, align 16
  %11 = and i64 %4, 1
  %12 = getelementptr inbounds %struct.uint64v2_t, %struct.uint64v2_t* %7, i64 0, i32 0, i64 %11
  %13 = load i64, i64* %12, align 8
  %14 = inttoptr i64 %2 to i64*
  store i64 %13, i64* %14
  call void @llvm.lifetime.end(i64 16, i8* nonnull %8) 
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L6PEXTRQI3RnWImE2VnI8vec128_tEEEP6MemoryS7_R5StateT_T0_2InIhE(%struct.Memory* readnone returned, %struct.State* nocapture readnone dereferenceable(3376), i64* nocapture, i8* nocapture readonly, i64)  {
  %6 = alloca <2 x i64>, align 16
  %7 = bitcast <2 x i64>* %6 to %struct.uint64v2_t*
  %8 = bitcast <2 x i64>* %6 to i8*
  call void @llvm.lifetime.start(i64 16, i8* nonnull %8) 
  %9 = bitcast i8* %3 to <2 x i64>*
  %10 = load <2 x i64>, <2 x i64>* %9, align 1
  store <2 x i64> %10, <2 x i64>* %6, align 16
  %11 = and i64 %4, 1
  %12 = getelementptr inbounds %struct.uint64v2_t, %struct.uint64v2_t* %7, i64 0, i32 0, i64 %11
  %13 = load i64, i64* %12, align 8
  store i64 %13, i64* %2, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %8) 
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L10PALIGNR_64I3RVnI7vec64_tEEEP6MemoryS5_R5State4RVnWIS2_ES3_T_2InIhE(%struct.Memory* readnone returned, %struct.State* nocapture readnone dereferenceable(3376), i64* nocapture, i64, i64, i64)  {
  %7 = shl i64 %5, 3
  %8 = and i64 %7, 248
  %9 = urem i64 %8, 65
  %10 = icmp eq i64 %9, 0
  %11 = icmp eq i64 %9, 64
  %12 = sub nsw i64 64, %9
  %13 = shl i64 %3, %12
  %14 = select i1 %10, i64 0, i64 %13
  %15 = lshr i64 %4, %9
  %16 = select i1 %11, i64 %3, i64 %15
  %17 = or i64 %14, %16
  store i64 %17, i64* %2, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L10PALIGNR_64I3MVnI7vec64_tEEEP6MemoryS5_R5State4RVnWIS2_E3RVnIS2_ET_2InIhE(%struct.Memory* returned, %struct.State* nocapture readnone dereferenceable(3376), i64* nocapture, i64, i64, i64)  {
  %7 = inttoptr i64 %4 to i64*
  %8 = load i64, i64* %7
  %9 = shl i64 %5, 3
  %10 = and i64 %9, 248
  %11 = urem i64 %10, 65
  %12 = icmp eq i64 %11, 0
  %13 = icmp eq i64 %11, 64
  %14 = sub nsw i64 64, %11
  %15 = shl i64 %3, %14
  %16 = select i1 %12, i64 0, i64 %15
  %17 = lshr i64 %8, %11
  %18 = select i1 %13, i64 %3, i64 %17
  %19 = or i64 %18, %16
  store i64 %19, i64* %2, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L11PALIGNR_128I2VnI8vec128_tEEEP6MemoryS5_R5State3VnWIS2_ES3_T_2InIhE(%struct.Memory* readnone returned, %struct.State* nocapture readnone dereferenceable(3376), i8* nocapture, i8* nocapture readonly, i8* nocapture readonly, i64)  {
  %7 = bitcast i8* %3 to i64*
  %8 = load i64, i64* %7, align 1
  %9 = getelementptr inbounds i8, i8* %3, i64 8
  %10 = bitcast i8* %9 to i64*
  %11 = load i64, i64* %10, align 1
  %12 = bitcast i8* %4 to i64*
  %13 = load i64, i64* %12, align 1
  %14 = getelementptr inbounds i8, i8* %4, i64 8
  %15 = bitcast i8* %14 to i64*
  %16 = load i64, i64* %15, align 1
  %17 = shl i64 %5, 3
  %18 = and i64 %17, 248
  %19 = urem i64 %18, 129
  %20 = zext i64 %19 to i128
  %21 = icmp eq i64 %19, 0
  %22 = icmp eq i64 %19, 128
  %23 = sub nsw i128 128, %20
  %24 = zext i64 %11 to i128
  %25 = shl nuw i128 %24, 64
  %26 = zext i64 %8 to i128
  %27 = or i128 %25, %26
  %28 = shl i128 %27, %23
  %29 = select i1 %21, i128 0, i128 %28
  %30 = zext i64 %16 to i128
  %31 = shl nuw i128 %30, 64
  %32 = zext i64 %13 to i128
  %33 = or i128 %31, %32
  %34 = lshr i128 %33, %20
  %35 = select i1 %22, i128 %27, i128 %34
  %36 = or i128 %35, %29
  %37 = bitcast i8* %2 to i128*
  store i128 %36, i128* %37, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L11PALIGNR_128I3MVnI8vec128_tEEEP6MemoryS5_R5State3VnWIS2_E2VnIS2_ET_2InIhE(%struct.Memory* returned, %struct.State* nocapture readnone dereferenceable(3376), i8* nocapture, i8* nocapture readonly, i64, i64)  {
  %7 = bitcast i8* %3 to i64*
  %8 = load i64, i64* %7, align 1
  %9 = getelementptr inbounds i8, i8* %3, i64 8
  %10 = bitcast i8* %9 to i64*
  %11 = load i64, i64* %10, align 1
  %12 = inttoptr i64 %4 to i64*
  %13 = load i64, i64* %12
  %14 = add i64 %4, 8
  %15 = inttoptr i64 %14 to i64*
  %16 = load i64, i64* %15
  %17 = shl i64 %5, 3
  %18 = and i64 %17, 248
  %19 = urem i64 %18, 129
  %20 = zext i64 %19 to i128
  %21 = icmp eq i64 %19, 0
  %22 = icmp eq i64 %19, 128
  %23 = sub nsw i128 128, %20
  %24 = zext i64 %11 to i128
  %25 = shl nuw i128 %24, 64
  %26 = zext i64 %8 to i128
  %27 = or i128 %25, %26
  %28 = shl i128 %27, %23
  %29 = select i1 %21, i128 0, i128 %28
  %30 = zext i64 %16 to i128
  %31 = shl nuw i128 %30, 64
  %32 = zext i64 %13 to i128
  %33 = or i128 %31, %32
  %34 = lshr i128 %33, %20
  %35 = select i1 %22, i128 %27, i128 %34
  %36 = or i128 %35, %29
  %37 = bitcast i8* %2 to i128*
  store i128 %36, i128* %37, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L5PSRLWI4RVnWI7vec64_tE3RVnIS2_E2InIhEEEP6MemoryS9_R5StateT_T0_T1_(%struct.Memory* readnone returned, %struct.State* nocapture readnone dereferenceable(3376), i64* nocapture, i64, i64)  {
  %6 = alloca i64, align 8
  %7 = trunc i64 %4 to i8
  %8 = icmp ugt i8 %7, 15
  %9 = and i64 %4, 255
  %10 = bitcast i64* %6 to i8*
  %11 = bitcast i64* %6 to [4 x i16]*
  br i1 %8, label %35, label %12

; <label>:12:                                     ; preds = %5
  %13 = lshr i64 %3, 48
  %14 = lshr i64 %3, 32
  %15 = lshr i64 %3, 16
  %16 = and i64 %3, 65535
  %17 = lshr i64 %16, %9
  %18 = trunc i64 %17 to i16
  call void @llvm.lifetime.start(i64 8, i8* nonnull %10)
  store i64 0, i64* %6, align 8
  %19 = bitcast i64* %6 to i16*
  store i16 %18, i16* %19, align 8
  %20 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %10)
  %21 = and i64 %15, 65535
  %22 = lshr i64 %21, %9
  %23 = trunc i64 %22 to i16
  call void @llvm.lifetime.start(i64 8, i8* nonnull %10)
  store i64 %20, i64* %6, align 8
  %24 = getelementptr inbounds [4 x i16], [4 x i16]* %11, i64 0, i64 1
  store i16 %23, i16* %24, align 2
  %25 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %10)
  %26 = and i64 %14, 65535
  %27 = lshr i64 %26, %9
  %28 = trunc i64 %27 to i16
  call void @llvm.lifetime.start(i64 8, i8* nonnull %10)
  store i64 %25, i64* %6, align 8
  %29 = getelementptr inbounds [4 x i16], [4 x i16]* %11, i64 0, i64 2
  store i16 %28, i16* %29, align 4
  %30 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %10)
  %31 = lshr i64 %13, %9
  %32 = trunc i64 %31 to i16
  call void @llvm.lifetime.start(i64 8, i8* nonnull %10)
  store i64 %30, i64* %6, align 8
  %33 = getelementptr inbounds [4 x i16], [4 x i16]* %11, i64 0, i64 3
  store i16 %32, i16* %33, align 2
  %34 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %10)
  br label %44

; <label>:35:                                     ; preds = %5
  call void @llvm.lifetime.start(i64 8, i8* nonnull %10)
  store i64 0, i64* %6, align 8
  %36 = bitcast i64* %6 to i16*
  store i16 0, i16* %36, align 8
  %37 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %10)
  call void @llvm.lifetime.start(i64 8, i8* nonnull %10)
  store i64 %37, i64* %6, align 8
  %38 = getelementptr inbounds [4 x i16], [4 x i16]* %11, i64 0, i64 1
  store i16 0, i16* %38, align 2
  %39 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %10)
  call void @llvm.lifetime.start(i64 8, i8* nonnull %10)
  store i64 %39, i64* %6, align 8
  %40 = getelementptr inbounds [4 x i16], [4 x i16]* %11, i64 0, i64 2
  store i16 0, i16* %40, align 4
  %41 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %10)
  call void @llvm.lifetime.start(i64 8, i8* nonnull %10)
  store i64 %41, i64* %6, align 8
  %42 = getelementptr inbounds [4 x i16], [4 x i16]* %11, i64 0, i64 3
  store i16 0, i16* %42, align 2
  %43 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %10)
  br label %44

; <label>:44:                                     ; preds = %35, %12
  %45 = phi i64 [ %43, %35 ], [ %34, %12 ]
  %46 = lshr i64 %45, 16
  %47 = lshr i64 %45, 32
  %48 = lshr i64 %45, 48
  %49 = trunc i64 %45 to i16
  %50 = trunc i64 %46 to i16
  %51 = trunc i64 %47 to i16
  %52 = trunc i64 %48 to i16
  %53 = bitcast i64* %2 to [4 x i16]*
  %54 = bitcast i64* %2 to i16*
  store i16 %49, i16* %54, align 1
  %55 = getelementptr inbounds [4 x i16], [4 x i16]* %53, i64 0, i64 1
  store i16 %50, i16* %55, align 1
  %56 = getelementptr inbounds [4 x i16], [4 x i16]* %53, i64 0, i64 2
  store i16 %51, i16* %56, align 1
  %57 = getelementptr inbounds [4 x i16], [4 x i16]* %53, i64 0, i64 3
  store i16 %52, i16* %57, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L5PSRLWI4RVnWI7vec64_tE3RVnIS2_E2RnImEEEP6MemoryS9_R5StateT_T0_T1_(%struct.Memory* readnone returned, %struct.State* nocapture readnone dereferenceable(3376), i64* nocapture, i64, i64)  {
  %6 = alloca i64, align 8
  %7 = icmp ugt i64 %4, 15
  %8 = and i64 %4, 65535
  %9 = bitcast i64* %6 to i8*
  %10 = bitcast i64* %6 to [4 x i16]*
  br i1 %7, label %34, label %11

; <label>:11:                                     ; preds = %5
  %12 = lshr i64 %3, 48
  %13 = lshr i64 %3, 32
  %14 = lshr i64 %3, 16
  %15 = and i64 %3, 65535
  %16 = lshr i64 %15, %8
  %17 = trunc i64 %16 to i16
  call void @llvm.lifetime.start(i64 8, i8* nonnull %9)
  store i64 0, i64* %6, align 8
  %18 = bitcast i64* %6 to i16*
  store i16 %17, i16* %18, align 8
  %19 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %9)
  %20 = and i64 %14, 65535
  %21 = lshr i64 %20, %8
  %22 = trunc i64 %21 to i16
  call void @llvm.lifetime.start(i64 8, i8* nonnull %9)
  store i64 %19, i64* %6, align 8
  %23 = getelementptr inbounds [4 x i16], [4 x i16]* %10, i64 0, i64 1
  store i16 %22, i16* %23, align 2
  %24 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %9)
  %25 = and i64 %13, 65535
  %26 = lshr i64 %25, %8
  %27 = trunc i64 %26 to i16
  call void @llvm.lifetime.start(i64 8, i8* nonnull %9)
  store i64 %24, i64* %6, align 8
  %28 = getelementptr inbounds [4 x i16], [4 x i16]* %10, i64 0, i64 2
  store i16 %27, i16* %28, align 4
  %29 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %9)
  %30 = lshr i64 %12, %8
  %31 = trunc i64 %30 to i16
  call void @llvm.lifetime.start(i64 8, i8* nonnull %9)
  store i64 %29, i64* %6, align 8
  %32 = getelementptr inbounds [4 x i16], [4 x i16]* %10, i64 0, i64 3
  store i16 %31, i16* %32, align 2
  %33 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %9)
  br label %43

; <label>:34:                                     ; preds = %5
  call void @llvm.lifetime.start(i64 8, i8* nonnull %9)
  store i64 0, i64* %6, align 8
  %35 = bitcast i64* %6 to i16*
  store i16 0, i16* %35, align 8
  %36 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %9)
  call void @llvm.lifetime.start(i64 8, i8* nonnull %9)
  store i64 %36, i64* %6, align 8
  %37 = getelementptr inbounds [4 x i16], [4 x i16]* %10, i64 0, i64 1
  store i16 0, i16* %37, align 2
  %38 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %9)
  call void @llvm.lifetime.start(i64 8, i8* nonnull %9)
  store i64 %38, i64* %6, align 8
  %39 = getelementptr inbounds [4 x i16], [4 x i16]* %10, i64 0, i64 2
  store i16 0, i16* %39, align 4
  %40 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %9)
  call void @llvm.lifetime.start(i64 8, i8* nonnull %9)
  store i64 %40, i64* %6, align 8
  %41 = getelementptr inbounds [4 x i16], [4 x i16]* %10, i64 0, i64 3
  store i16 0, i16* %41, align 2
  %42 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %9)
  br label %43

; <label>:43:                                     ; preds = %34, %11
  %44 = phi i64 [ %42, %34 ], [ %33, %11 ]
  %45 = lshr i64 %44, 16
  %46 = lshr i64 %44, 32
  %47 = lshr i64 %44, 48
  %48 = trunc i64 %44 to i16
  %49 = trunc i64 %45 to i16
  %50 = trunc i64 %46 to i16
  %51 = trunc i64 %47 to i16
  %52 = bitcast i64* %2 to [4 x i16]*
  %53 = bitcast i64* %2 to i16*
  store i16 %48, i16* %53, align 1
  %54 = getelementptr inbounds [4 x i16], [4 x i16]* %52, i64 0, i64 1
  store i16 %49, i16* %54, align 1
  %55 = getelementptr inbounds [4 x i16], [4 x i16]* %52, i64 0, i64 2
  store i16 %50, i16* %55, align 1
  %56 = getelementptr inbounds [4 x i16], [4 x i16]* %52, i64 0, i64 3
  store i16 %51, i16* %56, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L5PSRLWI4RVnWI7vec64_tE3RVnIS2_E2MnImEEEP6MemoryS9_R5StateT_T0_T1_(%struct.Memory*, %struct.State* nocapture readnone dereferenceable(3376), i64* nocapture, i64, i64)  {
  %6 = alloca i64, align 8
  %7 = inttoptr i64 %4 to i64*
  %8 = load i64, i64* %7
  %9 = icmp ugt i64 %8, 15
  %10 = and i64 %8, 65535
  %11 = bitcast i64* %6 to i8*
  %12 = bitcast i64* %6 to [4 x i16]*
  br i1 %9, label %36, label %13

; <label>:13:                                     ; preds = %5
  %14 = lshr i64 %3, 48
  %15 = lshr i64 %3, 32
  %16 = lshr i64 %3, 16
  %17 = and i64 %3, 65535
  %18 = lshr i64 %17, %10
  %19 = trunc i64 %18 to i16
  call void @llvm.lifetime.start(i64 8, i8* nonnull %11)
  store i64 0, i64* %6, align 8
  %20 = bitcast i64* %6 to i16*
  store i16 %19, i16* %20, align 8
  %21 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %11)
  %22 = and i64 %16, 65535
  %23 = lshr i64 %22, %10
  %24 = trunc i64 %23 to i16
  call void @llvm.lifetime.start(i64 8, i8* nonnull %11)
  store i64 %21, i64* %6, align 8
  %25 = getelementptr inbounds [4 x i16], [4 x i16]* %12, i64 0, i64 1
  store i16 %24, i16* %25, align 2
  %26 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %11)
  %27 = and i64 %15, 65535
  %28 = lshr i64 %27, %10
  %29 = trunc i64 %28 to i16
  call void @llvm.lifetime.start(i64 8, i8* nonnull %11)
  store i64 %26, i64* %6, align 8
  %30 = getelementptr inbounds [4 x i16], [4 x i16]* %12, i64 0, i64 2
  store i16 %29, i16* %30, align 4
  %31 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %11)
  %32 = lshr i64 %14, %10
  %33 = trunc i64 %32 to i16
  call void @llvm.lifetime.start(i64 8, i8* nonnull %11)
  store i64 %31, i64* %6, align 8
  %34 = getelementptr inbounds [4 x i16], [4 x i16]* %12, i64 0, i64 3
  store i16 %33, i16* %34, align 2
  %35 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %11)
  br label %45

; <label>:36:                                     ; preds = %5
  call void @llvm.lifetime.start(i64 8, i8* nonnull %11)
  store i64 0, i64* %6, align 8
  %37 = bitcast i64* %6 to i16*
  store i16 0, i16* %37, align 8
  %38 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %11)
  call void @llvm.lifetime.start(i64 8, i8* nonnull %11)
  store i64 %38, i64* %6, align 8
  %39 = getelementptr inbounds [4 x i16], [4 x i16]* %12, i64 0, i64 1
  store i16 0, i16* %39, align 2
  %40 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %11)
  call void @llvm.lifetime.start(i64 8, i8* nonnull %11)
  store i64 %40, i64* %6, align 8
  %41 = getelementptr inbounds [4 x i16], [4 x i16]* %12, i64 0, i64 2
  store i16 0, i16* %41, align 4
  %42 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %11)
  call void @llvm.lifetime.start(i64 8, i8* nonnull %11)
  store i64 %42, i64* %6, align 8
  %43 = getelementptr inbounds [4 x i16], [4 x i16]* %12, i64 0, i64 3
  store i16 0, i16* %43, align 2
  %44 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %11)
  br label %45

; <label>:45:                                     ; preds = %36, %13
  %46 = phi i64 [ %44, %36 ], [ %35, %13 ]
  %47 = lshr i64 %46, 16
  %48 = lshr i64 %46, 32
  %49 = lshr i64 %46, 48
  %50 = trunc i64 %46 to i16
  %51 = trunc i64 %47 to i16
  %52 = trunc i64 %48 to i16
  %53 = trunc i64 %49 to i16
  %54 = bitcast i64* %2 to [4 x i16]*
  %55 = bitcast i64* %2 to i16*
  store i16 %50, i16* %55, align 1
  %56 = getelementptr inbounds [4 x i16], [4 x i16]* %54, i64 0, i64 1
  store i16 %51, i16* %56, align 1
  %57 = getelementptr inbounds [4 x i16], [4 x i16]* %54, i64 0, i64 2
  store i16 %52, i16* %57, align 1
  %58 = getelementptr inbounds [4 x i16], [4 x i16]* %54, i64 0, i64 3
  store i16 %53, i16* %58, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L5PSRLWI3VnWI8vec128_tE2VnIS2_E2InIhEEEP6MemoryS9_R5StateT_T0_T1_(%struct.Memory* readnone returned, %struct.State* nocapture readnone dereferenceable(3376), i8* nocapture, i8* nocapture readonly, i64)  {
  %6 = alloca <2 x i64>, align 16
  %7 = bitcast <2 x i64>* %6 to { i64, i64 }*
  %8 = alloca { i64, i64 }, align 8
  %9 = bitcast { i64, i64 }* %8 to %struct.uint16v8_t*
  %10 = bitcast { i64, i64 }* %8 to i8*
  call void @llvm.lifetime.start(i64 16, i8* nonnull %10) 
  %11 = bitcast i8* %3 to i64*
  %12 = load i64, i64* %11, align 1
  %13 = getelementptr inbounds i8, i8* %3, i64 8
  %14 = bitcast i8* %13 to i64*
  %15 = load i64, i64* %14, align 1
  %16 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %8, i64 0, i32 0
  store i64 %12, i64* %16, align 8
  %17 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %8, i64 0, i32 1
  store i64 %15, i64* %17, align 8
  %18 = trunc i64 %4 to i8
  %19 = icmp ugt i8 %18, 15
  %20 = and i64 %4, 255
  %21 = bitcast <2 x i64>* %6 to i8*
  %22 = getelementptr inbounds <2 x i64>, <2 x i64>* %6, i64 0, i64 0
  %23 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %7, i64 0, i32 1
  %24 = bitcast <2 x i64>* %6 to [8 x i16]*
  br i1 %19, label %75, label %25

; <label>:25:                                     ; preds = %5
  %26 = lshr i64 %12, 48
  %27 = lshr i64 %12, 32
  %28 = lshr i64 %12, 16
  %29 = and i64 %12, 65535
  %30 = lshr i64 %29, %20
  %31 = trunc i64 %30 to i16
  call void @llvm.lifetime.start(i64 16, i8* nonnull %21)
  store <2 x i64> zeroinitializer, <2 x i64>* %6, align 16
  %32 = bitcast <2 x i64>* %6 to i16*
  store i16 %31, i16* %32, align 16
  %33 = load i64, i64* %22, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %21)
  %34 = and i64 %28, 65535
  %35 = lshr i64 %34, %20
  %36 = trunc i64 %35 to i16
  call void @llvm.lifetime.start(i64 16, i8* nonnull %21)
  store i64 %33, i64* %22, align 16
  store i64 0, i64* %23, align 8
  %37 = getelementptr inbounds [8 x i16], [8 x i16]* %24, i64 0, i64 1
  store i16 %36, i16* %37, align 2
  %38 = load i64, i64* %22, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %21)
  %39 = and i64 %27, 65535
  %40 = lshr i64 %39, %20
  %41 = trunc i64 %40 to i16
  call void @llvm.lifetime.start(i64 16, i8* nonnull %21)
  store i64 %38, i64* %22, align 16
  store i64 0, i64* %23, align 8
  %42 = getelementptr inbounds [8 x i16], [8 x i16]* %24, i64 0, i64 2
  store i16 %41, i16* %42, align 4
  %43 = load i64, i64* %22, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %21)
  %44 = lshr i64 %26, %20
  %45 = trunc i64 %44 to i16
  call void @llvm.lifetime.start(i64 16, i8* nonnull %21)
  store i64 %43, i64* %22, align 16
  store i64 0, i64* %23, align 8
  %46 = getelementptr inbounds [8 x i16], [8 x i16]* %24, i64 0, i64 3
  store i16 %45, i16* %46, align 2
  %47 = load i64, i64* %22, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %21)
  %48 = and i64 %15, 65535
  %49 = lshr i64 %48, %20
  %50 = trunc i64 %49 to i16
  call void @llvm.lifetime.start(i64 16, i8* nonnull %21)
  store i64 %47, i64* %22, align 16
  store i64 0, i64* %23, align 8
  %51 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %7, i64 0, i32 1
  %52 = bitcast i64* %51 to i16*
  store i16 %50, i16* %52, align 8
  %53 = load i64, i64* %23, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %21)
  %54 = getelementptr inbounds %struct.uint16v8_t, %struct.uint16v8_t* %9, i64 0, i32 0, i64 5
  %55 = load i16, i16* %54, align 2
  %56 = zext i16 %55 to i64
  %57 = lshr i64 %56, %20
  %58 = trunc i64 %57 to i16
  call void @llvm.lifetime.start(i64 16, i8* nonnull %21)
  store i64 %47, i64* %22, align 16
  store i64 %53, i64* %23, align 8
  %59 = getelementptr inbounds [8 x i16], [8 x i16]* %24, i64 0, i64 5
  store i16 %58, i16* %59, align 2
  %60 = load i64, i64* %23, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %21)
  %61 = getelementptr inbounds %struct.uint16v8_t, %struct.uint16v8_t* %9, i64 0, i32 0, i64 6
  %62 = load i16, i16* %61, align 4
  %63 = zext i16 %62 to i64
  %64 = lshr i64 %63, %20
  %65 = trunc i64 %64 to i16
  call void @llvm.lifetime.start(i64 16, i8* nonnull %21)
  store i64 %47, i64* %22, align 16
  store i64 %60, i64* %23, align 8
  %66 = getelementptr inbounds [8 x i16], [8 x i16]* %24, i64 0, i64 6
  store i16 %65, i16* %66, align 4
  %67 = load i64, i64* %23, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %21)
  %68 = getelementptr inbounds %struct.uint16v8_t, %struct.uint16v8_t* %9, i64 0, i32 0, i64 7
  %69 = load i16, i16* %68, align 2
  %70 = zext i16 %69 to i64
  %71 = lshr i64 %70, %20
  %72 = trunc i64 %71 to i16
  call void @llvm.lifetime.start(i64 16, i8* nonnull %21)
  store i64 %47, i64* %22, align 16
  store i64 %67, i64* %23, align 8
  %73 = getelementptr inbounds [8 x i16], [8 x i16]* %24, i64 0, i64 7
  store i16 %72, i16* %73, align 2
  %74 = load i64, i64* %23, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %21)
  br label %93

; <label>:75:                                     ; preds = %5
  call void @llvm.lifetime.start(i64 16, i8* nonnull %21)
  store <2 x i64> zeroinitializer, <2 x i64>* %6, align 16
  %76 = bitcast <2 x i64>* %6 to i16*
  store i16 0, i16* %76, align 16
  %77 = load i64, i64* %22, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %21)
  call void @llvm.lifetime.start(i64 16, i8* nonnull %21)
  store i64 %77, i64* %22, align 16
  store i64 0, i64* %23, align 8
  %78 = getelementptr inbounds [8 x i16], [8 x i16]* %24, i64 0, i64 1
  store i16 0, i16* %78, align 2
  %79 = load i64, i64* %22, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %21)
  call void @llvm.lifetime.start(i64 16, i8* nonnull %21)
  store i64 %79, i64* %22, align 16
  store i64 0, i64* %23, align 8
  %80 = getelementptr inbounds [8 x i16], [8 x i16]* %24, i64 0, i64 2
  store i16 0, i16* %80, align 4
  %81 = load i64, i64* %22, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %21)
  call void @llvm.lifetime.start(i64 16, i8* nonnull %21)
  store i64 %81, i64* %22, align 16
  store i64 0, i64* %23, align 8
  %82 = getelementptr inbounds [8 x i16], [8 x i16]* %24, i64 0, i64 3
  store i16 0, i16* %82, align 2
  %83 = load i64, i64* %22, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %21)
  call void @llvm.lifetime.start(i64 16, i8* nonnull %21)
  store i64 %83, i64* %22, align 16
  store i64 0, i64* %23, align 8
  %84 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %7, i64 0, i32 1
  %85 = bitcast i64* %84 to i16*
  store i16 0, i16* %85, align 8
  %86 = load i64, i64* %23, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %21)
  call void @llvm.lifetime.start(i64 16, i8* nonnull %21)
  store i64 %83, i64* %22, align 16
  store i64 %86, i64* %23, align 8
  %87 = getelementptr inbounds [8 x i16], [8 x i16]* %24, i64 0, i64 5
  store i16 0, i16* %87, align 2
  %88 = load i64, i64* %23, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %21)
  call void @llvm.lifetime.start(i64 16, i8* nonnull %21)
  store i64 %83, i64* %22, align 16
  store i64 %88, i64* %23, align 8
  %89 = getelementptr inbounds [8 x i16], [8 x i16]* %24, i64 0, i64 6
  store i16 0, i16* %89, align 4
  %90 = load i64, i64* %23, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %21)
  call void @llvm.lifetime.start(i64 16, i8* nonnull %21)
  store i64 %83, i64* %22, align 16
  store i64 %90, i64* %23, align 8
  %91 = getelementptr inbounds [8 x i16], [8 x i16]* %24, i64 0, i64 7
  store i16 0, i16* %91, align 2
  %92 = load i64, i64* %23, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %21)
  br label %93

; <label>:93:                                     ; preds = %75, %25
  %94 = phi i64 [ %83, %75 ], [ %47, %25 ]
  %95 = phi i64 [ %92, %75 ], [ %74, %25 ]
  %96 = lshr i64 %94, 16
  %97 = lshr i64 %94, 32
  %98 = lshr i64 %94, 48
  %99 = trunc i64 %94 to i16
  %100 = trunc i64 %96 to i16
  %101 = trunc i64 %97 to i16
  %102 = trunc i64 %98 to i16
  %103 = bitcast i8* %2 to i16*
  store i16 %99, i16* %103, align 1
  %104 = getelementptr inbounds i8, i8* %2, i64 2
  %105 = bitcast i8* %104 to i16*
  store i16 %100, i16* %105, align 1
  %106 = getelementptr inbounds i8, i8* %2, i64 4
  %107 = bitcast i8* %106 to i16*
  store i16 %101, i16* %107, align 1
  %108 = getelementptr inbounds i8, i8* %2, i64 6
  %109 = bitcast i8* %108 to i16*
  store i16 %102, i16* %109, align 1
  %110 = trunc i64 %95 to i16
  %111 = getelementptr inbounds i8, i8* %2, i64 8
  %112 = bitcast i8* %111 to i16*
  store i16 %110, i16* %112, align 1
  %113 = lshr i64 %95, 16
  %114 = trunc i64 %113 to i16
  %115 = getelementptr inbounds i8, i8* %2, i64 10
  %116 = bitcast i8* %115 to i16*
  store i16 %114, i16* %116, align 1
  %117 = lshr i64 %95, 32
  %118 = trunc i64 %117 to i16
  %119 = getelementptr inbounds i8, i8* %2, i64 12
  %120 = bitcast i8* %119 to i16*
  store i16 %118, i16* %120, align 1
  %121 = lshr i64 %95, 48
  %122 = trunc i64 %121 to i16
  %123 = getelementptr inbounds i8, i8* %2, i64 14
  %124 = bitcast i8* %123 to i16*
  store i16 %122, i16* %124, align 1
  call void @llvm.lifetime.end(i64 16, i8* nonnull %10) 
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L7PSRLW_VI3VnWI8vec128_tE2VnIS2_ES5_EEP6MemoryS7_R5StateT_T0_T1_(%struct.Memory* readnone returned, %struct.State* nocapture readnone dereferenceable(3376), i8* nocapture, i8* nocapture readonly, i8* nocapture readonly)  {
  %6 = alloca <2 x i64>, align 16
  %7 = bitcast <2 x i64>* %6 to { i64, i64 }*
  %8 = alloca { i64, i64 }, align 8
  %9 = bitcast { i64, i64 }* %8 to %struct.uint16v8_t*
  %10 = bitcast { i64, i64 }* %8 to i8*
  call void @llvm.lifetime.start(i64 16, i8* nonnull %10) 
  %11 = bitcast i8* %3 to i64*
  %12 = load i64, i64* %11, align 1
  %13 = getelementptr inbounds i8, i8* %3, i64 8
  %14 = bitcast i8* %13 to i64*
  %15 = load i64, i64* %14, align 1
  %16 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %8, i64 0, i32 0
  store i64 %12, i64* %16, align 8
  %17 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %8, i64 0, i32 1
  store i64 %15, i64* %17, align 8
  %18 = bitcast i8* %4 to i64*
  %19 = load i64, i64* %18, align 1
  %20 = icmp ugt i64 %19, 15
  %21 = and i64 %19, 65535
  %22 = bitcast <2 x i64>* %6 to i8*
  %23 = getelementptr inbounds <2 x i64>, <2 x i64>* %6, i64 0, i64 0
  %24 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %7, i64 0, i32 1
  %25 = bitcast <2 x i64>* %6 to [8 x i16]*
  br i1 %20, label %76, label %26

; <label>:26:                                     ; preds = %5
  %27 = lshr i64 %12, 48
  %28 = lshr i64 %12, 32
  %29 = lshr i64 %12, 16
  %30 = and i64 %12, 65535
  %31 = lshr i64 %30, %21
  %32 = trunc i64 %31 to i16
  call void @llvm.lifetime.start(i64 16, i8* nonnull %22)
  store <2 x i64> zeroinitializer, <2 x i64>* %6, align 16
  %33 = bitcast <2 x i64>* %6 to i16*
  store i16 %32, i16* %33, align 16
  %34 = load i64, i64* %23, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %22)
  %35 = and i64 %29, 65535
  %36 = lshr i64 %35, %21
  %37 = trunc i64 %36 to i16
  call void @llvm.lifetime.start(i64 16, i8* nonnull %22)
  store i64 %34, i64* %23, align 16
  store i64 0, i64* %24, align 8
  %38 = getelementptr inbounds [8 x i16], [8 x i16]* %25, i64 0, i64 1
  store i16 %37, i16* %38, align 2
  %39 = load i64, i64* %23, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %22)
  %40 = and i64 %28, 65535
  %41 = lshr i64 %40, %21
  %42 = trunc i64 %41 to i16
  call void @llvm.lifetime.start(i64 16, i8* nonnull %22)
  store i64 %39, i64* %23, align 16
  store i64 0, i64* %24, align 8
  %43 = getelementptr inbounds [8 x i16], [8 x i16]* %25, i64 0, i64 2
  store i16 %42, i16* %43, align 4
  %44 = load i64, i64* %23, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %22)
  %45 = lshr i64 %27, %21
  %46 = trunc i64 %45 to i16
  call void @llvm.lifetime.start(i64 16, i8* nonnull %22)
  store i64 %44, i64* %23, align 16
  store i64 0, i64* %24, align 8
  %47 = getelementptr inbounds [8 x i16], [8 x i16]* %25, i64 0, i64 3
  store i16 %46, i16* %47, align 2
  %48 = load i64, i64* %23, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %22)
  %49 = and i64 %15, 65535
  %50 = lshr i64 %49, %21
  %51 = trunc i64 %50 to i16
  call void @llvm.lifetime.start(i64 16, i8* nonnull %22)
  store i64 %48, i64* %23, align 16
  store i64 0, i64* %24, align 8
  %52 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %7, i64 0, i32 1
  %53 = bitcast i64* %52 to i16*
  store i16 %51, i16* %53, align 8
  %54 = load i64, i64* %24, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %22)
  %55 = getelementptr inbounds %struct.uint16v8_t, %struct.uint16v8_t* %9, i64 0, i32 0, i64 5
  %56 = load i16, i16* %55, align 2
  %57 = zext i16 %56 to i64
  %58 = lshr i64 %57, %21
  %59 = trunc i64 %58 to i16
  call void @llvm.lifetime.start(i64 16, i8* nonnull %22)
  store i64 %48, i64* %23, align 16
  store i64 %54, i64* %24, align 8
  %60 = getelementptr inbounds [8 x i16], [8 x i16]* %25, i64 0, i64 5
  store i16 %59, i16* %60, align 2
  %61 = load i64, i64* %24, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %22)
  %62 = getelementptr inbounds %struct.uint16v8_t, %struct.uint16v8_t* %9, i64 0, i32 0, i64 6
  %63 = load i16, i16* %62, align 4
  %64 = zext i16 %63 to i64
  %65 = lshr i64 %64, %21
  %66 = trunc i64 %65 to i16
  call void @llvm.lifetime.start(i64 16, i8* nonnull %22)
  store i64 %48, i64* %23, align 16
  store i64 %61, i64* %24, align 8
  %67 = getelementptr inbounds [8 x i16], [8 x i16]* %25, i64 0, i64 6
  store i16 %66, i16* %67, align 4
  %68 = load i64, i64* %24, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %22)
  %69 = getelementptr inbounds %struct.uint16v8_t, %struct.uint16v8_t* %9, i64 0, i32 0, i64 7
  %70 = load i16, i16* %69, align 2
  %71 = zext i16 %70 to i64
  %72 = lshr i64 %71, %21
  %73 = trunc i64 %72 to i16
  call void @llvm.lifetime.start(i64 16, i8* nonnull %22)
  store i64 %48, i64* %23, align 16
  store i64 %68, i64* %24, align 8
  %74 = getelementptr inbounds [8 x i16], [8 x i16]* %25, i64 0, i64 7
  store i16 %73, i16* %74, align 2
  %75 = load i64, i64* %24, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %22)
  br label %94

; <label>:76:                                     ; preds = %5
  call void @llvm.lifetime.start(i64 16, i8* nonnull %22)
  store <2 x i64> zeroinitializer, <2 x i64>* %6, align 16
  %77 = bitcast <2 x i64>* %6 to i16*
  store i16 0, i16* %77, align 16
  %78 = load i64, i64* %23, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %22)
  call void @llvm.lifetime.start(i64 16, i8* nonnull %22)
  store i64 %78, i64* %23, align 16
  store i64 0, i64* %24, align 8
  %79 = getelementptr inbounds [8 x i16], [8 x i16]* %25, i64 0, i64 1
  store i16 0, i16* %79, align 2
  %80 = load i64, i64* %23, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %22)
  call void @llvm.lifetime.start(i64 16, i8* nonnull %22)
  store i64 %80, i64* %23, align 16
  store i64 0, i64* %24, align 8
  %81 = getelementptr inbounds [8 x i16], [8 x i16]* %25, i64 0, i64 2
  store i16 0, i16* %81, align 4
  %82 = load i64, i64* %23, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %22)
  call void @llvm.lifetime.start(i64 16, i8* nonnull %22)
  store i64 %82, i64* %23, align 16
  store i64 0, i64* %24, align 8
  %83 = getelementptr inbounds [8 x i16], [8 x i16]* %25, i64 0, i64 3
  store i16 0, i16* %83, align 2
  %84 = load i64, i64* %23, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %22)
  call void @llvm.lifetime.start(i64 16, i8* nonnull %22)
  store i64 %84, i64* %23, align 16
  store i64 0, i64* %24, align 8
  %85 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %7, i64 0, i32 1
  %86 = bitcast i64* %85 to i16*
  store i16 0, i16* %86, align 8
  %87 = load i64, i64* %24, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %22)
  call void @llvm.lifetime.start(i64 16, i8* nonnull %22)
  store i64 %84, i64* %23, align 16
  store i64 %87, i64* %24, align 8
  %88 = getelementptr inbounds [8 x i16], [8 x i16]* %25, i64 0, i64 5
  store i16 0, i16* %88, align 2
  %89 = load i64, i64* %24, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %22)
  call void @llvm.lifetime.start(i64 16, i8* nonnull %22)
  store i64 %84, i64* %23, align 16
  store i64 %89, i64* %24, align 8
  %90 = getelementptr inbounds [8 x i16], [8 x i16]* %25, i64 0, i64 6
  store i16 0, i16* %90, align 4
  %91 = load i64, i64* %24, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %22)
  call void @llvm.lifetime.start(i64 16, i8* nonnull %22)
  store i64 %84, i64* %23, align 16
  store i64 %91, i64* %24, align 8
  %92 = getelementptr inbounds [8 x i16], [8 x i16]* %25, i64 0, i64 7
  store i16 0, i16* %92, align 2
  %93 = load i64, i64* %24, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %22)
  br label %94

; <label>:94:                                     ; preds = %76, %26
  %95 = phi i64 [ %84, %76 ], [ %48, %26 ]
  %96 = phi i64 [ %93, %76 ], [ %75, %26 ]
  %97 = lshr i64 %95, 16
  %98 = lshr i64 %95, 32
  %99 = lshr i64 %95, 48
  %100 = trunc i64 %95 to i16
  %101 = trunc i64 %97 to i16
  %102 = trunc i64 %98 to i16
  %103 = trunc i64 %99 to i16
  %104 = bitcast i8* %2 to i16*
  store i16 %100, i16* %104, align 1
  %105 = getelementptr inbounds i8, i8* %2, i64 2
  %106 = bitcast i8* %105 to i16*
  store i16 %101, i16* %106, align 1
  %107 = getelementptr inbounds i8, i8* %2, i64 4
  %108 = bitcast i8* %107 to i16*
  store i16 %102, i16* %108, align 1
  %109 = getelementptr inbounds i8, i8* %2, i64 6
  %110 = bitcast i8* %109 to i16*
  store i16 %103, i16* %110, align 1
  %111 = trunc i64 %96 to i16
  %112 = getelementptr inbounds i8, i8* %2, i64 8
  %113 = bitcast i8* %112 to i16*
  store i16 %111, i16* %113, align 1
  %114 = lshr i64 %96, 16
  %115 = trunc i64 %114 to i16
  %116 = getelementptr inbounds i8, i8* %2, i64 10
  %117 = bitcast i8* %116 to i16*
  store i16 %115, i16* %117, align 1
  %118 = lshr i64 %96, 32
  %119 = trunc i64 %118 to i16
  %120 = getelementptr inbounds i8, i8* %2, i64 12
  %121 = bitcast i8* %120 to i16*
  store i16 %119, i16* %121, align 1
  %122 = lshr i64 %96, 48
  %123 = trunc i64 %122 to i16
  %124 = getelementptr inbounds i8, i8* %2, i64 14
  %125 = bitcast i8* %124 to i16*
  store i16 %123, i16* %125, align 1
  call void @llvm.lifetime.end(i64 16, i8* nonnull %10) 
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L7PSRLW_VI3VnWI8vec128_tE2VnIS2_E3MVnIS2_EEEP6MemoryS9_R5StateT_T0_T1_(%struct.Memory* returned, %struct.State* nocapture readnone dereferenceable(3376), i8* nocapture, i8* nocapture readonly, i64)  {
  %6 = alloca <2 x i64>, align 16
  %7 = bitcast <2 x i64>* %6 to { i64, i64 }*
  %8 = alloca { i64, i64 }, align 8
  %9 = bitcast { i64, i64 }* %8 to %struct.uint16v8_t*
  %10 = bitcast { i64, i64 }* %8 to i8*
  call void @llvm.lifetime.start(i64 16, i8* nonnull %10) 
  %11 = bitcast i8* %3 to i64*
  %12 = load i64, i64* %11, align 1
  %13 = getelementptr inbounds i8, i8* %3, i64 8
  %14 = bitcast i8* %13 to i64*
  %15 = load i64, i64* %14, align 1
  %16 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %8, i64 0, i32 0
  store i64 %12, i64* %16, align 8
  %17 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %8, i64 0, i32 1
  store i64 %15, i64* %17, align 8
  %18 = inttoptr i64 %4 to i64*
  %19 = load i64, i64* %18
  %20 = icmp ugt i64 %19, 15
  %21 = and i64 %19, 65535
  %22 = bitcast <2 x i64>* %6 to i8*
  %23 = getelementptr inbounds <2 x i64>, <2 x i64>* %6, i64 0, i64 0
  %24 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %7, i64 0, i32 1
  %25 = bitcast <2 x i64>* %6 to [8 x i16]*
  br i1 %20, label %76, label %26

; <label>:26:                                     ; preds = %5
  %27 = lshr i64 %12, 48
  %28 = lshr i64 %12, 32
  %29 = lshr i64 %12, 16
  %30 = and i64 %12, 65535
  %31 = lshr i64 %30, %21
  %32 = trunc i64 %31 to i16
  call void @llvm.lifetime.start(i64 16, i8* nonnull %22)
  store <2 x i64> zeroinitializer, <2 x i64>* %6, align 16
  %33 = bitcast <2 x i64>* %6 to i16*
  store i16 %32, i16* %33, align 16
  %34 = load i64, i64* %23, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %22)
  %35 = and i64 %29, 65535
  %36 = lshr i64 %35, %21
  %37 = trunc i64 %36 to i16
  call void @llvm.lifetime.start(i64 16, i8* nonnull %22)
  store i64 %34, i64* %23, align 16
  store i64 0, i64* %24, align 8
  %38 = getelementptr inbounds [8 x i16], [8 x i16]* %25, i64 0, i64 1
  store i16 %37, i16* %38, align 2
  %39 = load i64, i64* %23, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %22)
  %40 = and i64 %28, 65535
  %41 = lshr i64 %40, %21
  %42 = trunc i64 %41 to i16
  call void @llvm.lifetime.start(i64 16, i8* nonnull %22)
  store i64 %39, i64* %23, align 16
  store i64 0, i64* %24, align 8
  %43 = getelementptr inbounds [8 x i16], [8 x i16]* %25, i64 0, i64 2
  store i16 %42, i16* %43, align 4
  %44 = load i64, i64* %23, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %22)
  %45 = lshr i64 %27, %21
  %46 = trunc i64 %45 to i16
  call void @llvm.lifetime.start(i64 16, i8* nonnull %22)
  store i64 %44, i64* %23, align 16
  store i64 0, i64* %24, align 8
  %47 = getelementptr inbounds [8 x i16], [8 x i16]* %25, i64 0, i64 3
  store i16 %46, i16* %47, align 2
  %48 = load i64, i64* %23, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %22)
  %49 = and i64 %15, 65535
  %50 = lshr i64 %49, %21
  %51 = trunc i64 %50 to i16
  call void @llvm.lifetime.start(i64 16, i8* nonnull %22)
  store i64 %48, i64* %23, align 16
  store i64 0, i64* %24, align 8
  %52 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %7, i64 0, i32 1
  %53 = bitcast i64* %52 to i16*
  store i16 %51, i16* %53, align 8
  %54 = load i64, i64* %24, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %22)
  %55 = getelementptr inbounds %struct.uint16v8_t, %struct.uint16v8_t* %9, i64 0, i32 0, i64 5
  %56 = load i16, i16* %55, align 2
  %57 = zext i16 %56 to i64
  %58 = lshr i64 %57, %21
  %59 = trunc i64 %58 to i16
  call void @llvm.lifetime.start(i64 16, i8* nonnull %22)
  store i64 %48, i64* %23, align 16
  store i64 %54, i64* %24, align 8
  %60 = getelementptr inbounds [8 x i16], [8 x i16]* %25, i64 0, i64 5
  store i16 %59, i16* %60, align 2
  %61 = load i64, i64* %24, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %22)
  %62 = getelementptr inbounds %struct.uint16v8_t, %struct.uint16v8_t* %9, i64 0, i32 0, i64 6
  %63 = load i16, i16* %62, align 4
  %64 = zext i16 %63 to i64
  %65 = lshr i64 %64, %21
  %66 = trunc i64 %65 to i16
  call void @llvm.lifetime.start(i64 16, i8* nonnull %22)
  store i64 %48, i64* %23, align 16
  store i64 %61, i64* %24, align 8
  %67 = getelementptr inbounds [8 x i16], [8 x i16]* %25, i64 0, i64 6
  store i16 %66, i16* %67, align 4
  %68 = load i64, i64* %24, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %22)
  %69 = getelementptr inbounds %struct.uint16v8_t, %struct.uint16v8_t* %9, i64 0, i32 0, i64 7
  %70 = load i16, i16* %69, align 2
  %71 = zext i16 %70 to i64
  %72 = lshr i64 %71, %21
  %73 = trunc i64 %72 to i16
  call void @llvm.lifetime.start(i64 16, i8* nonnull %22)
  store i64 %48, i64* %23, align 16
  store i64 %68, i64* %24, align 8
  %74 = getelementptr inbounds [8 x i16], [8 x i16]* %25, i64 0, i64 7
  store i16 %73, i16* %74, align 2
  %75 = load i64, i64* %24, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %22)
  br label %94

; <label>:76:                                     ; preds = %5
  call void @llvm.lifetime.start(i64 16, i8* nonnull %22)
  store <2 x i64> zeroinitializer, <2 x i64>* %6, align 16
  %77 = bitcast <2 x i64>* %6 to i16*
  store i16 0, i16* %77, align 16
  %78 = load i64, i64* %23, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %22)
  call void @llvm.lifetime.start(i64 16, i8* nonnull %22)
  store i64 %78, i64* %23, align 16
  store i64 0, i64* %24, align 8
  %79 = getelementptr inbounds [8 x i16], [8 x i16]* %25, i64 0, i64 1
  store i16 0, i16* %79, align 2
  %80 = load i64, i64* %23, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %22)
  call void @llvm.lifetime.start(i64 16, i8* nonnull %22)
  store i64 %80, i64* %23, align 16
  store i64 0, i64* %24, align 8
  %81 = getelementptr inbounds [8 x i16], [8 x i16]* %25, i64 0, i64 2
  store i16 0, i16* %81, align 4
  %82 = load i64, i64* %23, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %22)
  call void @llvm.lifetime.start(i64 16, i8* nonnull %22)
  store i64 %82, i64* %23, align 16
  store i64 0, i64* %24, align 8
  %83 = getelementptr inbounds [8 x i16], [8 x i16]* %25, i64 0, i64 3
  store i16 0, i16* %83, align 2
  %84 = load i64, i64* %23, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %22)
  call void @llvm.lifetime.start(i64 16, i8* nonnull %22)
  store i64 %84, i64* %23, align 16
  store i64 0, i64* %24, align 8
  %85 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %7, i64 0, i32 1
  %86 = bitcast i64* %85 to i16*
  store i16 0, i16* %86, align 8
  %87 = load i64, i64* %24, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %22)
  call void @llvm.lifetime.start(i64 16, i8* nonnull %22)
  store i64 %84, i64* %23, align 16
  store i64 %87, i64* %24, align 8
  %88 = getelementptr inbounds [8 x i16], [8 x i16]* %25, i64 0, i64 5
  store i16 0, i16* %88, align 2
  %89 = load i64, i64* %24, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %22)
  call void @llvm.lifetime.start(i64 16, i8* nonnull %22)
  store i64 %84, i64* %23, align 16
  store i64 %89, i64* %24, align 8
  %90 = getelementptr inbounds [8 x i16], [8 x i16]* %25, i64 0, i64 6
  store i16 0, i16* %90, align 4
  %91 = load i64, i64* %24, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %22)
  call void @llvm.lifetime.start(i64 16, i8* nonnull %22)
  store i64 %84, i64* %23, align 16
  store i64 %91, i64* %24, align 8
  %92 = getelementptr inbounds [8 x i16], [8 x i16]* %25, i64 0, i64 7
  store i16 0, i16* %92, align 2
  %93 = load i64, i64* %24, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %22)
  br label %94

; <label>:94:                                     ; preds = %76, %26
  %95 = phi i64 [ %84, %76 ], [ %48, %26 ]
  %96 = phi i64 [ %93, %76 ], [ %75, %26 ]
  %97 = lshr i64 %95, 16
  %98 = lshr i64 %95, 32
  %99 = lshr i64 %95, 48
  %100 = trunc i64 %95 to i16
  %101 = trunc i64 %97 to i16
  %102 = trunc i64 %98 to i16
  %103 = trunc i64 %99 to i16
  %104 = bitcast i8* %2 to i16*
  store i16 %100, i16* %104, align 1
  %105 = getelementptr inbounds i8, i8* %2, i64 2
  %106 = bitcast i8* %105 to i16*
  store i16 %101, i16* %106, align 1
  %107 = getelementptr inbounds i8, i8* %2, i64 4
  %108 = bitcast i8* %107 to i16*
  store i16 %102, i16* %108, align 1
  %109 = getelementptr inbounds i8, i8* %2, i64 6
  %110 = bitcast i8* %109 to i16*
  store i16 %103, i16* %110, align 1
  %111 = trunc i64 %96 to i16
  %112 = getelementptr inbounds i8, i8* %2, i64 8
  %113 = bitcast i8* %112 to i16*
  store i16 %111, i16* %113, align 1
  %114 = lshr i64 %96, 16
  %115 = trunc i64 %114 to i16
  %116 = getelementptr inbounds i8, i8* %2, i64 10
  %117 = bitcast i8* %116 to i16*
  store i16 %115, i16* %117, align 1
  %118 = lshr i64 %96, 32
  %119 = trunc i64 %118 to i16
  %120 = getelementptr inbounds i8, i8* %2, i64 12
  %121 = bitcast i8* %120 to i16*
  store i16 %119, i16* %121, align 1
  %122 = lshr i64 %96, 48
  %123 = trunc i64 %122 to i16
  %124 = getelementptr inbounds i8, i8* %2, i64 14
  %125 = bitcast i8* %124 to i16*
  store i16 %123, i16* %125, align 1
  call void @llvm.lifetime.end(i64 16, i8* nonnull %10) 
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L5PSRLDI4RVnWI7vec64_tE3RVnIS2_E2InIhEEEP6MemoryS9_R5StateT_T0_T1_(%struct.Memory* readnone returned, %struct.State* nocapture readnone dereferenceable(3376), i64* nocapture, i64, i64)  {
  %6 = alloca i64, align 8
  %7 = trunc i64 %4 to i8
  %8 = icmp ugt i8 %7, 31
  %9 = and i64 %4, 255
  %10 = bitcast i64* %6 to i8*
  %11 = bitcast i64* %6 to [2 x i32]*
  br i1 %8, label %23, label %12

; <label>:12:                                     ; preds = %5
  %13 = lshr i64 %3, 32
  %14 = and i64 %3, 4294967295
  %15 = lshr i64 %14, %9
  %16 = trunc i64 %15 to i32
  call void @llvm.lifetime.start(i64 8, i8* nonnull %10)
  store i64 0, i64* %6, align 8
  %17 = bitcast i64* %6 to i32*
  store i32 %16, i32* %17, align 8
  %18 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %10)
  %19 = lshr i64 %13, %9
  %20 = trunc i64 %19 to i32
  call void @llvm.lifetime.start(i64 8, i8* nonnull %10)
  store i64 %18, i64* %6, align 8
  %21 = getelementptr inbounds [2 x i32], [2 x i32]* %11, i64 0, i64 1
  store i32 %20, i32* %21, align 4
  %22 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %10)
  br label %28

; <label>:23:                                     ; preds = %5
  call void @llvm.lifetime.start(i64 8, i8* nonnull %10)
  store i64 0, i64* %6, align 8
  %24 = bitcast i64* %6 to i32*
  store i32 0, i32* %24, align 8
  %25 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %10)
  call void @llvm.lifetime.start(i64 8, i8* nonnull %10)
  store i64 %25, i64* %6, align 8
  %26 = getelementptr inbounds [2 x i32], [2 x i32]* %11, i64 0, i64 1
  store i32 0, i32* %26, align 4
  %27 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %10)
  br label %28

; <label>:28:                                     ; preds = %23, %12
  %29 = phi i64 [ %27, %23 ], [ %22, %12 ]
  %30 = lshr i64 %29, 32
  %31 = trunc i64 %29 to i32
  %32 = trunc i64 %30 to i32
  %33 = bitcast i64* %2 to [2 x i32]*
  %34 = bitcast i64* %2 to i32*
  store i32 %31, i32* %34, align 1
  %35 = getelementptr inbounds [2 x i32], [2 x i32]* %33, i64 0, i64 1
  store i32 %32, i32* %35, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L5PSRLDI4RVnWI7vec64_tE3RVnIS2_E2RnImEEEP6MemoryS9_R5StateT_T0_T1_(%struct.Memory* readnone returned, %struct.State* nocapture readnone dereferenceable(3376), i64* nocapture, i64, i64)  {
  %6 = alloca i64, align 8
  %7 = icmp ugt i64 %4, 31
  %8 = and i64 %4, 4294967295
  %9 = bitcast i64* %6 to i8*
  %10 = bitcast i64* %6 to [2 x i32]*
  br i1 %7, label %22, label %11

; <label>:11:                                     ; preds = %5
  %12 = lshr i64 %3, 32
  %13 = and i64 %3, 4294967295
  %14 = lshr i64 %13, %8
  %15 = trunc i64 %14 to i32
  call void @llvm.lifetime.start(i64 8, i8* nonnull %9)
  store i64 0, i64* %6, align 8
  %16 = bitcast i64* %6 to i32*
  store i32 %15, i32* %16, align 8
  %17 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %9)
  %18 = lshr i64 %12, %8
  %19 = trunc i64 %18 to i32
  call void @llvm.lifetime.start(i64 8, i8* nonnull %9)
  store i64 %17, i64* %6, align 8
  %20 = getelementptr inbounds [2 x i32], [2 x i32]* %10, i64 0, i64 1
  store i32 %19, i32* %20, align 4
  %21 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %9)
  br label %27

; <label>:22:                                     ; preds = %5
  call void @llvm.lifetime.start(i64 8, i8* nonnull %9)
  store i64 0, i64* %6, align 8
  %23 = bitcast i64* %6 to i32*
  store i32 0, i32* %23, align 8
  %24 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %9)
  call void @llvm.lifetime.start(i64 8, i8* nonnull %9)
  store i64 %24, i64* %6, align 8
  %25 = getelementptr inbounds [2 x i32], [2 x i32]* %10, i64 0, i64 1
  store i32 0, i32* %25, align 4
  %26 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %9)
  br label %27

; <label>:27:                                     ; preds = %22, %11
  %28 = phi i64 [ %26, %22 ], [ %21, %11 ]
  %29 = lshr i64 %28, 32
  %30 = trunc i64 %28 to i32
  %31 = trunc i64 %29 to i32
  %32 = bitcast i64* %2 to [2 x i32]*
  %33 = bitcast i64* %2 to i32*
  store i32 %30, i32* %33, align 1
  %34 = getelementptr inbounds [2 x i32], [2 x i32]* %32, i64 0, i64 1
  store i32 %31, i32* %34, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L5PSRLDI4RVnWI7vec64_tE3RVnIS2_E2MnImEEEP6MemoryS9_R5StateT_T0_T1_(%struct.Memory*, %struct.State* nocapture readnone dereferenceable(3376), i64* nocapture, i64, i64)  {
  %6 = alloca i64, align 8
  %7 = inttoptr i64 %4 to i64*
  %8 = load i64, i64* %7
  %9 = icmp ugt i64 %8, 31
  %10 = and i64 %8, 4294967295
  %11 = bitcast i64* %6 to i8*
  %12 = bitcast i64* %6 to [2 x i32]*
  br i1 %9, label %24, label %13

; <label>:13:                                     ; preds = %5
  %14 = lshr i64 %3, 32
  %15 = and i64 %3, 4294967295
  %16 = lshr i64 %15, %10
  %17 = trunc i64 %16 to i32
  call void @llvm.lifetime.start(i64 8, i8* nonnull %11)
  store i64 0, i64* %6, align 8
  %18 = bitcast i64* %6 to i32*
  store i32 %17, i32* %18, align 8
  %19 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %11)
  %20 = lshr i64 %14, %10
  %21 = trunc i64 %20 to i32
  call void @llvm.lifetime.start(i64 8, i8* nonnull %11)
  store i64 %19, i64* %6, align 8
  %22 = getelementptr inbounds [2 x i32], [2 x i32]* %12, i64 0, i64 1
  store i32 %21, i32* %22, align 4
  %23 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %11)
  br label %29

; <label>:24:                                     ; preds = %5
  call void @llvm.lifetime.start(i64 8, i8* nonnull %11)
  store i64 0, i64* %6, align 8
  %25 = bitcast i64* %6 to i32*
  store i32 0, i32* %25, align 8
  %26 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %11)
  call void @llvm.lifetime.start(i64 8, i8* nonnull %11)
  store i64 %26, i64* %6, align 8
  %27 = getelementptr inbounds [2 x i32], [2 x i32]* %12, i64 0, i64 1
  store i32 0, i32* %27, align 4
  %28 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %11)
  br label %29

; <label>:29:                                     ; preds = %24, %13
  %30 = phi i64 [ %28, %24 ], [ %23, %13 ]
  %31 = lshr i64 %30, 32
  %32 = trunc i64 %30 to i32
  %33 = trunc i64 %31 to i32
  %34 = bitcast i64* %2 to [2 x i32]*
  %35 = bitcast i64* %2 to i32*
  store i32 %32, i32* %35, align 1
  %36 = getelementptr inbounds [2 x i32], [2 x i32]* %34, i64 0, i64 1
  store i32 %33, i32* %36, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L5PSRLDI3VnWI8vec128_tE2VnIS2_E2InIhEEEP6MemoryS9_R5StateT_T0_T1_(%struct.Memory* readnone returned, %struct.State* nocapture readnone dereferenceable(3376), i8* nocapture, i8* nocapture readonly, i64)  {
  %6 = alloca <2 x i64>, align 16
  %7 = bitcast <2 x i64>* %6 to { i64, i64 }*
  %8 = bitcast i8* %3 to i64*
  %9 = load i64, i64* %8, align 1
  %10 = getelementptr inbounds i8, i8* %3, i64 8
  %11 = bitcast i8* %10 to i64*
  %12 = load i64, i64* %11, align 1
  %13 = trunc i64 %4 to i8
  %14 = icmp ugt i8 %13, 31
  %15 = and i64 %4, 255
  %16 = bitcast <2 x i64>* %6 to i8*
  %17 = getelementptr inbounds <2 x i64>, <2 x i64>* %6, i64 0, i64 0
  %18 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %7, i64 0, i32 1
  %19 = bitcast <2 x i64>* %6 to [4 x i32]*
  br i1 %14, label %42, label %20

; <label>:20:                                     ; preds = %5
  %21 = lshr i64 %12, 32
  %22 = lshr i64 %9, 32
  %23 = and i64 %9, 4294967295
  %24 = lshr i64 %23, %15
  %25 = trunc i64 %24 to i32
  call void @llvm.lifetime.start(i64 16, i8* nonnull %16)
  store <2 x i64> zeroinitializer, <2 x i64>* %6, align 16
  %26 = bitcast <2 x i64>* %6 to i32*
  store i32 %25, i32* %26, align 16
  %27 = load i64, i64* %17, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %16)
  %28 = lshr i64 %22, %15
  %29 = trunc i64 %28 to i32
  call void @llvm.lifetime.start(i64 16, i8* nonnull %16)
  store i64 %27, i64* %17, align 16
  store i64 0, i64* %18, align 8
  %30 = getelementptr inbounds [4 x i32], [4 x i32]* %19, i64 0, i64 1
  store i32 %29, i32* %30, align 4
  %31 = load i64, i64* %17, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %16)
  %32 = and i64 %12, 4294967295
  %33 = lshr i64 %32, %15
  %34 = trunc i64 %33 to i32
  call void @llvm.lifetime.start(i64 16, i8* nonnull %16)
  store i64 %31, i64* %17, align 16
  store i64 0, i64* %18, align 8
  %35 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %7, i64 0, i32 1
  %36 = bitcast i64* %35 to i32*
  store i32 %34, i32* %36, align 8
  %37 = load i64, i64* %18, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %16)
  %38 = lshr i64 %21, %15
  %39 = trunc i64 %38 to i32
  call void @llvm.lifetime.start(i64 16, i8* nonnull %16)
  store i64 %31, i64* %17, align 16
  store i64 %37, i64* %18, align 8
  %40 = getelementptr inbounds [4 x i32], [4 x i32]* %19, i64 0, i64 3
  store i32 %39, i32* %40, align 4
  %41 = load i64, i64* %18, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %16)
  br label %52

; <label>:42:                                     ; preds = %5
  call void @llvm.lifetime.start(i64 16, i8* nonnull %16)
  store <2 x i64> zeroinitializer, <2 x i64>* %6, align 16
  %43 = bitcast <2 x i64>* %6 to i32*
  store i32 0, i32* %43, align 16
  %44 = load i64, i64* %17, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %16)
  call void @llvm.lifetime.start(i64 16, i8* nonnull %16)
  store i64 %44, i64* %17, align 16
  store i64 0, i64* %18, align 8
  %45 = getelementptr inbounds [4 x i32], [4 x i32]* %19, i64 0, i64 1
  store i32 0, i32* %45, align 4
  %46 = load i64, i64* %17, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %16)
  call void @llvm.lifetime.start(i64 16, i8* nonnull %16)
  store i64 %46, i64* %17, align 16
  store i64 0, i64* %18, align 8
  %47 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %7, i64 0, i32 1
  %48 = bitcast i64* %47 to i32*
  store i32 0, i32* %48, align 8
  %49 = load i64, i64* %18, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %16)
  call void @llvm.lifetime.start(i64 16, i8* nonnull %16)
  store i64 %46, i64* %17, align 16
  store i64 %49, i64* %18, align 8
  %50 = getelementptr inbounds [4 x i32], [4 x i32]* %19, i64 0, i64 3
  store i32 0, i32* %50, align 4
  %51 = load i64, i64* %18, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %16)
  br label %52

; <label>:52:                                     ; preds = %42, %20
  %53 = phi i64 [ %46, %42 ], [ %31, %20 ]
  %54 = phi i64 [ %51, %42 ], [ %41, %20 ]
  %55 = lshr i64 %53, 32
  %56 = trunc i64 %53 to i32
  %57 = trunc i64 %55 to i32
  %58 = bitcast i8* %2 to i32*
  store i32 %56, i32* %58, align 1
  %59 = getelementptr inbounds i8, i8* %2, i64 4
  %60 = bitcast i8* %59 to i32*
  store i32 %57, i32* %60, align 1
  %61 = trunc i64 %54 to i32
  %62 = getelementptr inbounds i8, i8* %2, i64 8
  %63 = bitcast i8* %62 to i32*
  store i32 %61, i32* %63, align 1
  %64 = lshr i64 %54, 32
  %65 = trunc i64 %64 to i32
  %66 = getelementptr inbounds i8, i8* %2, i64 12
  %67 = bitcast i8* %66 to i32*
  store i32 %65, i32* %67, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L7PSRLD_VI3VnWI8vec128_tE2VnIS2_ES5_EEP6MemoryS7_R5StateT_T0_T1_(%struct.Memory* readnone returned, %struct.State* nocapture readnone dereferenceable(3376), i8* nocapture, i8* nocapture readonly, i8* nocapture readonly)  {
  %6 = alloca <2 x i64>, align 16
  %7 = bitcast <2 x i64>* %6 to { i64, i64 }*
  %8 = bitcast i8* %3 to i64*
  %9 = load i64, i64* %8, align 1
  %10 = getelementptr inbounds i8, i8* %3, i64 8
  %11 = bitcast i8* %10 to i64*
  %12 = load i64, i64* %11, align 1
  %13 = bitcast i8* %4 to i64*
  %14 = load i64, i64* %13, align 1
  %15 = icmp ugt i64 %14, 31
  %16 = and i64 %14, 4294967295
  %17 = bitcast <2 x i64>* %6 to i8*
  %18 = getelementptr inbounds <2 x i64>, <2 x i64>* %6, i64 0, i64 0
  %19 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %7, i64 0, i32 1
  %20 = bitcast <2 x i64>* %6 to [4 x i32]*
  br i1 %15, label %43, label %21

; <label>:21:                                     ; preds = %5
  %22 = lshr i64 %12, 32
  %23 = lshr i64 %9, 32
  %24 = and i64 %9, 4294967295
  %25 = lshr i64 %24, %16
  %26 = trunc i64 %25 to i32
  call void @llvm.lifetime.start(i64 16, i8* nonnull %17)
  store <2 x i64> zeroinitializer, <2 x i64>* %6, align 16
  %27 = bitcast <2 x i64>* %6 to i32*
  store i32 %26, i32* %27, align 16
  %28 = load i64, i64* %18, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %17)
  %29 = lshr i64 %23, %16
  %30 = trunc i64 %29 to i32
  call void @llvm.lifetime.start(i64 16, i8* nonnull %17)
  store i64 %28, i64* %18, align 16
  store i64 0, i64* %19, align 8
  %31 = getelementptr inbounds [4 x i32], [4 x i32]* %20, i64 0, i64 1
  store i32 %30, i32* %31, align 4
  %32 = load i64, i64* %18, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %17)
  %33 = and i64 %12, 4294967295
  %34 = lshr i64 %33, %16
  %35 = trunc i64 %34 to i32
  call void @llvm.lifetime.start(i64 16, i8* nonnull %17)
  store i64 %32, i64* %18, align 16
  store i64 0, i64* %19, align 8
  %36 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %7, i64 0, i32 1
  %37 = bitcast i64* %36 to i32*
  store i32 %35, i32* %37, align 8
  %38 = load i64, i64* %19, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %17)
  %39 = lshr i64 %22, %16
  %40 = trunc i64 %39 to i32
  call void @llvm.lifetime.start(i64 16, i8* nonnull %17)
  store i64 %32, i64* %18, align 16
  store i64 %38, i64* %19, align 8
  %41 = getelementptr inbounds [4 x i32], [4 x i32]* %20, i64 0, i64 3
  store i32 %40, i32* %41, align 4
  %42 = load i64, i64* %19, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %17)
  br label %53

; <label>:43:                                     ; preds = %5
  call void @llvm.lifetime.start(i64 16, i8* nonnull %17)
  store <2 x i64> zeroinitializer, <2 x i64>* %6, align 16
  %44 = bitcast <2 x i64>* %6 to i32*
  store i32 0, i32* %44, align 16
  %45 = load i64, i64* %18, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %17)
  call void @llvm.lifetime.start(i64 16, i8* nonnull %17)
  store i64 %45, i64* %18, align 16
  store i64 0, i64* %19, align 8
  %46 = getelementptr inbounds [4 x i32], [4 x i32]* %20, i64 0, i64 1
  store i32 0, i32* %46, align 4
  %47 = load i64, i64* %18, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %17)
  call void @llvm.lifetime.start(i64 16, i8* nonnull %17)
  store i64 %47, i64* %18, align 16
  store i64 0, i64* %19, align 8
  %48 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %7, i64 0, i32 1
  %49 = bitcast i64* %48 to i32*
  store i32 0, i32* %49, align 8
  %50 = load i64, i64* %19, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %17)
  call void @llvm.lifetime.start(i64 16, i8* nonnull %17)
  store i64 %47, i64* %18, align 16
  store i64 %50, i64* %19, align 8
  %51 = getelementptr inbounds [4 x i32], [4 x i32]* %20, i64 0, i64 3
  store i32 0, i32* %51, align 4
  %52 = load i64, i64* %19, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %17)
  br label %53

; <label>:53:                                     ; preds = %43, %21
  %54 = phi i64 [ %47, %43 ], [ %32, %21 ]
  %55 = phi i64 [ %52, %43 ], [ %42, %21 ]
  %56 = lshr i64 %54, 32
  %57 = trunc i64 %54 to i32
  %58 = trunc i64 %56 to i32
  %59 = bitcast i8* %2 to i32*
  store i32 %57, i32* %59, align 1
  %60 = getelementptr inbounds i8, i8* %2, i64 4
  %61 = bitcast i8* %60 to i32*
  store i32 %58, i32* %61, align 1
  %62 = trunc i64 %55 to i32
  %63 = getelementptr inbounds i8, i8* %2, i64 8
  %64 = bitcast i8* %63 to i32*
  store i32 %62, i32* %64, align 1
  %65 = lshr i64 %55, 32
  %66 = trunc i64 %65 to i32
  %67 = getelementptr inbounds i8, i8* %2, i64 12
  %68 = bitcast i8* %67 to i32*
  store i32 %66, i32* %68, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L7PSRLD_VI3VnWI8vec128_tE2VnIS2_E3MVnIS2_EEEP6MemoryS9_R5StateT_T0_T1_(%struct.Memory* returned, %struct.State* nocapture readnone dereferenceable(3376), i8* nocapture, i8* nocapture readonly, i64)  {
  %6 = alloca <2 x i64>, align 16
  %7 = bitcast <2 x i64>* %6 to { i64, i64 }*
  %8 = bitcast i8* %3 to i64*
  %9 = load i64, i64* %8, align 1
  %10 = getelementptr inbounds i8, i8* %3, i64 8
  %11 = bitcast i8* %10 to i64*
  %12 = load i64, i64* %11, align 1
  %13 = inttoptr i64 %4 to i64*
  %14 = load i64, i64* %13
  %15 = icmp ugt i64 %14, 31
  %16 = and i64 %14, 4294967295
  %17 = bitcast <2 x i64>* %6 to i8*
  %18 = getelementptr inbounds <2 x i64>, <2 x i64>* %6, i64 0, i64 0
  %19 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %7, i64 0, i32 1
  %20 = bitcast <2 x i64>* %6 to [4 x i32]*
  br i1 %15, label %43, label %21

; <label>:21:                                     ; preds = %5
  %22 = lshr i64 %12, 32
  %23 = lshr i64 %9, 32
  %24 = and i64 %9, 4294967295
  %25 = lshr i64 %24, %16
  %26 = trunc i64 %25 to i32
  call void @llvm.lifetime.start(i64 16, i8* nonnull %17)
  store <2 x i64> zeroinitializer, <2 x i64>* %6, align 16
  %27 = bitcast <2 x i64>* %6 to i32*
  store i32 %26, i32* %27, align 16
  %28 = load i64, i64* %18, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %17)
  %29 = lshr i64 %23, %16
  %30 = trunc i64 %29 to i32
  call void @llvm.lifetime.start(i64 16, i8* nonnull %17)
  store i64 %28, i64* %18, align 16
  store i64 0, i64* %19, align 8
  %31 = getelementptr inbounds [4 x i32], [4 x i32]* %20, i64 0, i64 1
  store i32 %30, i32* %31, align 4
  %32 = load i64, i64* %18, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %17)
  %33 = and i64 %12, 4294967295
  %34 = lshr i64 %33, %16
  %35 = trunc i64 %34 to i32
  call void @llvm.lifetime.start(i64 16, i8* nonnull %17)
  store i64 %32, i64* %18, align 16
  store i64 0, i64* %19, align 8
  %36 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %7, i64 0, i32 1
  %37 = bitcast i64* %36 to i32*
  store i32 %35, i32* %37, align 8
  %38 = load i64, i64* %19, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %17)
  %39 = lshr i64 %22, %16
  %40 = trunc i64 %39 to i32
  call void @llvm.lifetime.start(i64 16, i8* nonnull %17)
  store i64 %32, i64* %18, align 16
  store i64 %38, i64* %19, align 8
  %41 = getelementptr inbounds [4 x i32], [4 x i32]* %20, i64 0, i64 3
  store i32 %40, i32* %41, align 4
  %42 = load i64, i64* %19, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %17)
  br label %53

; <label>:43:                                     ; preds = %5
  call void @llvm.lifetime.start(i64 16, i8* nonnull %17)
  store <2 x i64> zeroinitializer, <2 x i64>* %6, align 16
  %44 = bitcast <2 x i64>* %6 to i32*
  store i32 0, i32* %44, align 16
  %45 = load i64, i64* %18, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %17)
  call void @llvm.lifetime.start(i64 16, i8* nonnull %17)
  store i64 %45, i64* %18, align 16
  store i64 0, i64* %19, align 8
  %46 = getelementptr inbounds [4 x i32], [4 x i32]* %20, i64 0, i64 1
  store i32 0, i32* %46, align 4
  %47 = load i64, i64* %18, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %17)
  call void @llvm.lifetime.start(i64 16, i8* nonnull %17)
  store i64 %47, i64* %18, align 16
  store i64 0, i64* %19, align 8
  %48 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %7, i64 0, i32 1
  %49 = bitcast i64* %48 to i32*
  store i32 0, i32* %49, align 8
  %50 = load i64, i64* %19, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %17)
  call void @llvm.lifetime.start(i64 16, i8* nonnull %17)
  store i64 %47, i64* %18, align 16
  store i64 %50, i64* %19, align 8
  %51 = getelementptr inbounds [4 x i32], [4 x i32]* %20, i64 0, i64 3
  store i32 0, i32* %51, align 4
  %52 = load i64, i64* %19, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %17)
  br label %53

; <label>:53:                                     ; preds = %43, %21
  %54 = phi i64 [ %47, %43 ], [ %32, %21 ]
  %55 = phi i64 [ %52, %43 ], [ %42, %21 ]
  %56 = lshr i64 %54, 32
  %57 = trunc i64 %54 to i32
  %58 = trunc i64 %56 to i32
  %59 = bitcast i8* %2 to i32*
  store i32 %57, i32* %59, align 1
  %60 = getelementptr inbounds i8, i8* %2, i64 4
  %61 = bitcast i8* %60 to i32*
  store i32 %58, i32* %61, align 1
  %62 = trunc i64 %55 to i32
  %63 = getelementptr inbounds i8, i8* %2, i64 8
  %64 = bitcast i8* %63 to i32*
  store i32 %62, i32* %64, align 1
  %65 = lshr i64 %55, 32
  %66 = trunc i64 %65 to i32
  %67 = getelementptr inbounds i8, i8* %2, i64 12
  %68 = bitcast i8* %67 to i32*
  store i32 %66, i32* %68, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L5PSRLQI4RVnWI7vec64_tE3RVnIS2_E2InIhEEEP6MemoryS9_R5StateT_T0_T1_(%struct.Memory* readnone returned, %struct.State* nocapture readnone dereferenceable(3376), i64* nocapture, i64, i64)  {
  %6 = trunc i64 %4 to i8
  %7 = icmp ugt i8 %6, 63
  %8 = and i64 %4, 255
  %9 = lshr i64 %3, %8
  %10 = select i1 %7, i64 0, i64 %9
  store i64 %10, i64* %2, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L5PSRLQI4RVnWI7vec64_tE3RVnIS2_E2RnImEEEP6MemoryS9_R5StateT_T0_T1_(%struct.Memory* readnone returned, %struct.State* nocapture readnone dereferenceable(3376), i64* nocapture, i64, i64)  {
  %6 = icmp ugt i64 %4, 63
  %7 = lshr i64 %3, %4
  %8 = select i1 %6, i64 0, i64 %7
  store i64 %8, i64* %2, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L5PSRLQI4RVnWI7vec64_tE3RVnIS2_E2MnImEEEP6MemoryS9_R5StateT_T0_T1_(%struct.Memory*, %struct.State* nocapture readnone dereferenceable(3376), i64* nocapture, i64, i64)  {
  %6 = inttoptr i64 %4 to i64*
  %7 = load i64, i64* %6
  %8 = icmp ugt i64 %7, 63
  %9 = lshr i64 %3, %7
  %10 = select i1 %8, i64 0, i64 %9
  store i64 %10, i64* %2, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L5PSRLQI3VnWI8vec128_tE2VnIS2_E2InIhEEEP6MemoryS9_R5StateT_T0_T1_(%struct.Memory* readnone returned, %struct.State* nocapture readnone dereferenceable(3376), i8* nocapture, i8* nocapture readonly, i64)  {
  %6 = trunc i64 %4 to i8
  %7 = icmp ugt i8 %6, 63
  %8 = and i64 %4, 255
  br i1 %7, label %17, label %9

; <label>:9:                                      ; preds = %5
  %10 = getelementptr inbounds i8, i8* %3, i64 8
  %11 = bitcast i8* %10 to i64*
  %12 = load i64, i64* %11, align 1
  %13 = bitcast i8* %3 to i64*
  %14 = load i64, i64* %13, align 1
  %15 = lshr i64 %14, %8
  %16 = lshr i64 %12, %8
  br label %17

; <label>:17:                                     ; preds = %9, %5
  %18 = phi i64 [ %16, %9 ], [ 0, %5 ]
  %19 = phi i64 [ %15, %9 ], [ 0, %5 ]
  %20 = bitcast i8* %2 to i64*
  store i64 %19, i64* %20, align 1
  %21 = getelementptr inbounds i8, i8* %2, i64 8
  %22 = bitcast i8* %21 to i64*
  store i64 %18, i64* %22, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L7PSRLQ_VI3VnWI8vec128_tE2VnIS2_ES5_EEP6MemoryS7_R5StateT_T0_T1_(%struct.Memory* readnone returned, %struct.State* nocapture readnone dereferenceable(3376), i8* nocapture, i8* nocapture readonly, i8* nocapture readonly)  {
  %6 = bitcast i8* %4 to i64*
  %7 = load i64, i64* %6, align 1
  %8 = icmp ugt i64 %7, 63
  br i1 %8, label %17, label %9

; <label>:9:                                      ; preds = %5
  %10 = getelementptr inbounds i8, i8* %3, i64 8
  %11 = bitcast i8* %10 to i64*
  %12 = load i64, i64* %11, align 1
  %13 = bitcast i8* %3 to i64*
  %14 = load i64, i64* %13, align 1
  %15 = lshr i64 %14, %7
  %16 = lshr i64 %12, %7
  br label %17

; <label>:17:                                     ; preds = %9, %5
  %18 = phi i64 [ %16, %9 ], [ 0, %5 ]
  %19 = phi i64 [ %15, %9 ], [ 0, %5 ]
  %20 = bitcast i8* %2 to i64*
  store i64 %19, i64* %20, align 1
  %21 = getelementptr inbounds i8, i8* %2, i64 8
  %22 = bitcast i8* %21 to i64*
  store i64 %18, i64* %22, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L7PSRLQ_VI3VnWI8vec128_tE2VnIS2_E3MVnIS2_EEEP6MemoryS9_R5StateT_T0_T1_(%struct.Memory* returned, %struct.State* nocapture readnone dereferenceable(3376), i8* nocapture, i8* nocapture readonly, i64)  {
  %6 = inttoptr i64 %4 to i64*
  %7 = load i64, i64* %6
  %8 = icmp ugt i64 %7, 63
  br i1 %8, label %17, label %9

; <label>:9:                                      ; preds = %5
  %10 = getelementptr inbounds i8, i8* %3, i64 8
  %11 = bitcast i8* %10 to i64*
  %12 = load i64, i64* %11, align 1
  %13 = bitcast i8* %3 to i64*
  %14 = load i64, i64* %13, align 1
  %15 = lshr i64 %14, %7
  %16 = lshr i64 %12, %7
  br label %17

; <label>:17:                                     ; preds = %9, %5
  %18 = phi i64 [ %16, %9 ], [ 0, %5 ]
  %19 = phi i64 [ %15, %9 ], [ 0, %5 ]
  %20 = bitcast i8* %2 to i64*
  store i64 %19, i64* %20, align 1
  %21 = getelementptr inbounds i8, i8* %2, i64 8
  %22 = bitcast i8* %21 to i64*
  store i64 %18, i64* %22, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L5PSRAWI4RVnWI7vec64_tE3RVnIS2_E2InIhEEEP6MemoryS9_R5StateT_T0_T1_(%struct.Memory* readnone returned, %struct.State* nocapture readnone dereferenceable(3376), i64* nocapture, i64, i64)  {
  %6 = alloca i64, align 8
  %7 = trunc i64 %4 to i8
  %8 = bitcast i64* %6 to i8*
  %9 = bitcast i64* %6 to [4 x i16]*
  %10 = icmp ult i8 %7, 16
  %11 = shl i64 %3, 48
  %12 = ashr exact i64 %11, 48
  %13 = icmp ult i8 %7, 16
  %14 = and i64 %4, 255
  %15 = select i1 %13, i64 %14, i64 16
  %16 = ashr i64 %12, %15
  %17 = trunc i64 %16 to i16
  call void @llvm.lifetime.start(i64 8, i8* nonnull %8)
  store i64 0, i64* %6, align 8
  %18 = bitcast i64* %6 to i16*
  store i16 %17, i16* %18, align 8
  %19 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %8)
  %20 = shl i64 %3, 32
  %21 = ashr i64 %20, 48
  %22 = icmp ult i8 %7, 16
  %23 = and i64 %4, 255
  %24 = select i1 %22, i64 %23, i64 16
  %25 = ashr i64 %21, %24
  %26 = trunc i64 %25 to i16
  call void @llvm.lifetime.start(i64 8, i8* nonnull %8)
  store i64 %19, i64* %6, align 8
  %27 = getelementptr inbounds [4 x i16], [4 x i16]* %9, i64 0, i64 1
  store i16 %26, i16* %27, align 2
  %28 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %8)
  %29 = shl i64 %3, 16
  %30 = ashr i64 %29, 48
  %31 = and i64 %4, 255
  %32 = select i1 %10, i64 %31, i64 16
  %33 = ashr i64 %30, %32
  %34 = trunc i64 %33 to i16
  call void @llvm.lifetime.start(i64 8, i8* nonnull %8)
  store i64 %28, i64* %6, align 8
  %35 = getelementptr inbounds [4 x i16], [4 x i16]* %9, i64 0, i64 2
  store i16 %34, i16* %35, align 4
  %36 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %8)
  %37 = ashr i64 %3, 48
  %38 = icmp ult i8 %7, 16
  %39 = and i64 %4, 255
  %40 = select i1 %38, i64 %39, i64 16
  %41 = ashr i64 %37, %40
  %42 = trunc i64 %41 to i16
  call void @llvm.lifetime.start(i64 8, i8* nonnull %8)
  store i64 %36, i64* %6, align 8
  %43 = getelementptr inbounds [4 x i16], [4 x i16]* %9, i64 0, i64 3
  store i16 %42, i16* %43, align 2
  %44 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %8)
  %45 = lshr i64 %44, 16
  %46 = lshr i64 %44, 32
  %47 = lshr i64 %44, 48
  %48 = trunc i64 %44 to i16
  %49 = trunc i64 %45 to i16
  %50 = trunc i64 %46 to i16
  %51 = trunc i64 %47 to i16
  %52 = bitcast i64* %2 to [4 x i16]*
  %53 = bitcast i64* %2 to i16*
  store i16 %48, i16* %53, align 1
  %54 = getelementptr inbounds [4 x i16], [4 x i16]* %52, i64 0, i64 1
  store i16 %49, i16* %54, align 1
  %55 = getelementptr inbounds [4 x i16], [4 x i16]* %52, i64 0, i64 2
  store i16 %50, i16* %55, align 1
  %56 = getelementptr inbounds [4 x i16], [4 x i16]* %52, i64 0, i64 3
  store i16 %51, i16* %56, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L5PSRAWI4RVnWI7vec64_tE3RVnIS2_E2RnImEEEP6MemoryS9_R5StateT_T0_T1_(%struct.Memory* readnone returned, %struct.State* nocapture readnone dereferenceable(3376), i64* nocapture, i64, i64)  {
  %6 = alloca i64, align 8
  %7 = bitcast i64* %6 to i8*
  %8 = bitcast i64* %6 to [4 x i16]*
  %9 = icmp ult i64 %4, 16
  %10 = select i1 %9, i64 %4, i64 16
  %11 = shl i64 %3, 48
  %12 = ashr exact i64 %11, 48
  %13 = ashr i64 %12, %10
  %14 = trunc i64 %13 to i16
  call void @llvm.lifetime.start(i64 8, i8* nonnull %7)
  store i64 0, i64* %6, align 8
  %15 = bitcast i64* %6 to i16*
  store i16 %14, i16* %15, align 8
  %16 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %7)
  %17 = select i1 %9, i64 %4, i64 16
  %18 = shl i64 %3, 32
  %19 = ashr i64 %18, 48
  %20 = ashr i64 %19, %17
  %21 = trunc i64 %20 to i16
  call void @llvm.lifetime.start(i64 8, i8* nonnull %7)
  store i64 %16, i64* %6, align 8
  %22 = getelementptr inbounds [4 x i16], [4 x i16]* %8, i64 0, i64 1
  store i16 %21, i16* %22, align 2
  %23 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %7)
  %24 = select i1 %9, i64 %4, i64 16
  %25 = shl i64 %3, 16
  %26 = ashr i64 %25, 48
  %27 = ashr i64 %26, %24
  %28 = trunc i64 %27 to i16
  call void @llvm.lifetime.start(i64 8, i8* nonnull %7)
  store i64 %23, i64* %6, align 8
  %29 = getelementptr inbounds [4 x i16], [4 x i16]* %8, i64 0, i64 2
  store i16 %28, i16* %29, align 4
  %30 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %7)
  %31 = select i1 %9, i64 %4, i64 16
  %32 = ashr i64 %3, 48
  %33 = ashr i64 %32, %31
  %34 = trunc i64 %33 to i16
  call void @llvm.lifetime.start(i64 8, i8* nonnull %7)
  store i64 %30, i64* %6, align 8
  %35 = getelementptr inbounds [4 x i16], [4 x i16]* %8, i64 0, i64 3
  store i16 %34, i16* %35, align 2
  %36 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %7)
  %37 = lshr i64 %36, 16
  %38 = lshr i64 %36, 32
  %39 = lshr i64 %36, 48
  %40 = trunc i64 %36 to i16
  %41 = trunc i64 %37 to i16
  %42 = trunc i64 %38 to i16
  %43 = trunc i64 %39 to i16
  %44 = bitcast i64* %2 to [4 x i16]*
  %45 = bitcast i64* %2 to i16*
  store i16 %40, i16* %45, align 1
  %46 = getelementptr inbounds [4 x i16], [4 x i16]* %44, i64 0, i64 1
  store i16 %41, i16* %46, align 1
  %47 = getelementptr inbounds [4 x i16], [4 x i16]* %44, i64 0, i64 2
  store i16 %42, i16* %47, align 1
  %48 = getelementptr inbounds [4 x i16], [4 x i16]* %44, i64 0, i64 3
  store i16 %43, i16* %48, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L5PSRAWI4RVnWI7vec64_tE3RVnIS2_E2MnImEEEP6MemoryS9_R5StateT_T0_T1_(%struct.Memory*, %struct.State* nocapture readnone dereferenceable(3376), i64* nocapture, i64, i64)  {
  %6 = alloca i64, align 8
  %7 = inttoptr i64 %4 to i64*
  %8 = load i64, i64* %7
  %9 = bitcast i64* %6 to i8*
  %10 = bitcast i64* %6 to [4 x i16]*
  %11 = icmp ult i64 %8, 16
  %12 = select i1 %11, i64 %8, i64 16
  %13 = shl i64 %3, 48
  %14 = ashr exact i64 %13, 48
  %15 = ashr i64 %14, %12
  %16 = trunc i64 %15 to i16
  call void @llvm.lifetime.start(i64 8, i8* nonnull %9)
  store i64 0, i64* %6, align 8
  %17 = bitcast i64* %6 to i16*
  store i16 %16, i16* %17, align 8
  %18 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %9)
  %19 = select i1 %11, i64 %8, i64 16
  %20 = shl i64 %3, 32
  %21 = ashr i64 %20, 48
  %22 = ashr i64 %21, %19
  %23 = trunc i64 %22 to i16
  call void @llvm.lifetime.start(i64 8, i8* nonnull %9)
  store i64 %18, i64* %6, align 8
  %24 = getelementptr inbounds [4 x i16], [4 x i16]* %10, i64 0, i64 1
  store i16 %23, i16* %24, align 2
  %25 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %9)
  %26 = select i1 %11, i64 %8, i64 16
  %27 = shl i64 %3, 16
  %28 = ashr i64 %27, 48
  %29 = ashr i64 %28, %26
  %30 = trunc i64 %29 to i16
  call void @llvm.lifetime.start(i64 8, i8* nonnull %9)
  store i64 %25, i64* %6, align 8
  %31 = getelementptr inbounds [4 x i16], [4 x i16]* %10, i64 0, i64 2
  store i16 %30, i16* %31, align 4
  %32 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %9)
  %33 = select i1 %11, i64 %8, i64 16
  %34 = ashr i64 %3, 48
  %35 = ashr i64 %34, %33
  %36 = trunc i64 %35 to i16
  call void @llvm.lifetime.start(i64 8, i8* nonnull %9)
  store i64 %32, i64* %6, align 8
  %37 = getelementptr inbounds [4 x i16], [4 x i16]* %10, i64 0, i64 3
  store i16 %36, i16* %37, align 2
  %38 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %9)
  %39 = lshr i64 %38, 16
  %40 = lshr i64 %38, 32
  %41 = lshr i64 %38, 48
  %42 = trunc i64 %38 to i16
  %43 = trunc i64 %39 to i16
  %44 = trunc i64 %40 to i16
  %45 = trunc i64 %41 to i16
  %46 = bitcast i64* %2 to [4 x i16]*
  %47 = bitcast i64* %2 to i16*
  store i16 %42, i16* %47, align 1
  %48 = getelementptr inbounds [4 x i16], [4 x i16]* %46, i64 0, i64 1
  store i16 %43, i16* %48, align 1
  %49 = getelementptr inbounds [4 x i16], [4 x i16]* %46, i64 0, i64 2
  store i16 %44, i16* %49, align 1
  %50 = getelementptr inbounds [4 x i16], [4 x i16]* %46, i64 0, i64 3
  store i16 %45, i16* %50, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L5PSRAWI3VnWI8vec128_tE2VnIS2_E2InIhEEEP6MemoryS9_R5StateT_T0_T1_(%struct.Memory* readnone returned, %struct.State* nocapture readnone dereferenceable(3376), i8* nocapture, i8* nocapture readonly, i64)  {
  %6 = alloca <2 x i64>, align 16
  %7 = bitcast <2 x i64>* %6 to { i64, i64 }*
  %8 = alloca <2 x i64>, align 16
  %9 = bitcast <2 x i64>* %8 to { i64, i64 }*
  %10 = bitcast <2 x i64>* %8 to %struct.uint16v8_t*
  %11 = bitcast <2 x i64>* %8 to i8*
  call void @llvm.lifetime.start(i64 16, i8* nonnull %11) 
  %12 = bitcast i8* %3 to <2 x i64>*
  %13 = load <2 x i64>, <2 x i64>* %12, align 1
  store <2 x i64> %13, <2 x i64>* %8, align 16
  %14 = trunc i64 %4 to i8
  %15 = bitcast <2 x i64>* %6 to i8*
  %16 = getelementptr inbounds <2 x i64>, <2 x i64>* %6, i64 0, i64 0
  %17 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %7, i64 0, i32 1
  %18 = bitcast <2 x i64>* %6 to [8 x i16]*
  %19 = icmp ult i8 %14, 16
  %20 = extractelement <2 x i64> %13, i32 0
  %21 = shl i64 %20, 48
  %22 = ashr exact i64 %21, 48
  %23 = icmp ult i8 %14, 16
  %24 = and i64 %4, 255
  %25 = select i1 %23, i64 %24, i64 16
  %26 = ashr i64 %22, %25
  %27 = trunc i64 %26 to i16
  call void @llvm.lifetime.start(i64 16, i8* nonnull %15)
  store <2 x i64> zeroinitializer, <2 x i64>* %6, align 16
  %28 = bitcast <2 x i64>* %6 to i16*
  store i16 %27, i16* %28, align 16
  %29 = load i64, i64* %16, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %15)
  %30 = shl i64 %20, 32
  %31 = ashr i64 %30, 48
  %32 = icmp ult i8 %14, 16
  %33 = and i64 %4, 255
  %34 = select i1 %32, i64 %33, i64 16
  %35 = ashr i64 %31, %34
  %36 = trunc i64 %35 to i16
  call void @llvm.lifetime.start(i64 16, i8* nonnull %15)
  store i64 %29, i64* %16, align 16
  store i64 0, i64* %17, align 8
  %37 = getelementptr inbounds [8 x i16], [8 x i16]* %18, i64 0, i64 1
  store i16 %36, i16* %37, align 2
  %38 = load i64, i64* %16, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %15)
  %39 = shl i64 %20, 16
  %40 = ashr i64 %39, 48
  %41 = icmp ult i8 %14, 16
  %42 = and i64 %4, 255
  %43 = select i1 %41, i64 %42, i64 16
  %44 = ashr i64 %40, %43
  %45 = trunc i64 %44 to i16
  call void @llvm.lifetime.start(i64 16, i8* nonnull %15)
  store i64 %38, i64* %16, align 16
  store i64 0, i64* %17, align 8
  %46 = getelementptr inbounds [8 x i16], [8 x i16]* %18, i64 0, i64 2
  store i16 %45, i16* %46, align 4
  %47 = load i64, i64* %16, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %15)
  %48 = ashr i64 %20, 48
  %49 = icmp ult i8 %14, 16
  %50 = and i64 %4, 255
  %51 = select i1 %49, i64 %50, i64 16
  %52 = ashr i64 %48, %51
  %53 = trunc i64 %52 to i16
  call void @llvm.lifetime.start(i64 16, i8* nonnull %15)
  store i64 %47, i64* %16, align 16
  store i64 0, i64* %17, align 8
  %54 = getelementptr inbounds [8 x i16], [8 x i16]* %18, i64 0, i64 3
  store i16 %53, i16* %54, align 2
  %55 = load i64, i64* %16, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %15)
  %56 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %9, i64 0, i32 1
  %57 = bitcast i64* %56 to i16*
  %58 = load i16, i16* %57, align 8
  %59 = sext i16 %58 to i64
  %60 = icmp ult i8 %14, 16
  %61 = and i64 %4, 255
  %62 = select i1 %60, i64 %61, i64 16
  %63 = ashr i64 %59, %62
  %64 = trunc i64 %63 to i16
  call void @llvm.lifetime.start(i64 16, i8* nonnull %15)
  store i64 %55, i64* %16, align 16
  store i64 0, i64* %17, align 8
  %65 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %7, i64 0, i32 1
  %66 = bitcast i64* %65 to i16*
  store i16 %64, i16* %66, align 8
  %67 = load i64, i64* %17, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %15)
  %68 = getelementptr inbounds %struct.uint16v8_t, %struct.uint16v8_t* %10, i64 0, i32 0, i64 5
  %69 = load i16, i16* %68, align 2
  %70 = sext i16 %69 to i64
  %71 = icmp ult i8 %14, 16
  %72 = and i64 %4, 255
  %73 = select i1 %71, i64 %72, i64 16
  %74 = ashr i64 %70, %73
  %75 = trunc i64 %74 to i16
  call void @llvm.lifetime.start(i64 16, i8* nonnull %15)
  store i64 %55, i64* %16, align 16
  store i64 %67, i64* %17, align 8
  %76 = getelementptr inbounds [8 x i16], [8 x i16]* %18, i64 0, i64 5
  store i16 %75, i16* %76, align 2
  %77 = load i64, i64* %17, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %15)
  %78 = getelementptr inbounds %struct.uint16v8_t, %struct.uint16v8_t* %10, i64 0, i32 0, i64 6
  %79 = load i16, i16* %78, align 4
  %80 = sext i16 %79 to i64
  %81 = and i64 %4, 255
  %82 = select i1 %19, i64 %81, i64 16
  %83 = ashr i64 %80, %82
  %84 = trunc i64 %83 to i16
  call void @llvm.lifetime.start(i64 16, i8* nonnull %15)
  store i64 %55, i64* %16, align 16
  store i64 %77, i64* %17, align 8
  %85 = getelementptr inbounds [8 x i16], [8 x i16]* %18, i64 0, i64 6
  store i16 %84, i16* %85, align 4
  %86 = load i64, i64* %17, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %15)
  %87 = getelementptr inbounds %struct.uint16v8_t, %struct.uint16v8_t* %10, i64 0, i32 0, i64 7
  %88 = load i16, i16* %87, align 2
  %89 = sext i16 %88 to i64
  %90 = icmp ult i8 %14, 16
  %91 = and i64 %4, 255
  %92 = select i1 %90, i64 %91, i64 16
  %93 = ashr i64 %89, %92
  %94 = trunc i64 %93 to i16
  call void @llvm.lifetime.start(i64 16, i8* nonnull %15)
  store i64 %55, i64* %16, align 16
  store i64 %86, i64* %17, align 8
  %95 = getelementptr inbounds [8 x i16], [8 x i16]* %18, i64 0, i64 7
  store i16 %94, i16* %95, align 2
  %96 = load i64, i64* %17, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %15)
  %97 = lshr i64 %55, 16
  %98 = lshr i64 %55, 32
  %99 = lshr i64 %55, 48
  %100 = trunc i64 %55 to i16
  %101 = trunc i64 %97 to i16
  %102 = trunc i64 %98 to i16
  %103 = trunc i64 %99 to i16
  %104 = bitcast i8* %2 to i16*
  store i16 %100, i16* %104, align 1
  %105 = getelementptr inbounds i8, i8* %2, i64 2
  %106 = bitcast i8* %105 to i16*
  store i16 %101, i16* %106, align 1
  %107 = getelementptr inbounds i8, i8* %2, i64 4
  %108 = bitcast i8* %107 to i16*
  store i16 %102, i16* %108, align 1
  %109 = getelementptr inbounds i8, i8* %2, i64 6
  %110 = bitcast i8* %109 to i16*
  store i16 %103, i16* %110, align 1
  %111 = trunc i64 %96 to i16
  %112 = getelementptr inbounds i8, i8* %2, i64 8
  %113 = bitcast i8* %112 to i16*
  store i16 %111, i16* %113, align 1
  %114 = lshr i64 %96, 16
  %115 = trunc i64 %114 to i16
  %116 = getelementptr inbounds i8, i8* %2, i64 10
  %117 = bitcast i8* %116 to i16*
  store i16 %115, i16* %117, align 1
  %118 = lshr i64 %96, 32
  %119 = trunc i64 %118 to i16
  %120 = getelementptr inbounds i8, i8* %2, i64 12
  %121 = bitcast i8* %120 to i16*
  store i16 %119, i16* %121, align 1
  %122 = lshr i64 %96, 48
  %123 = trunc i64 %122 to i16
  %124 = getelementptr inbounds i8, i8* %2, i64 14
  %125 = bitcast i8* %124 to i16*
  store i16 %123, i16* %125, align 1
  call void @llvm.lifetime.end(i64 16, i8* nonnull %11) 
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L7PSRAW_VI3VnWI8vec128_tE2VnIS2_ES5_EEP6MemoryS7_R5StateT_T0_T1_(%struct.Memory* readnone returned, %struct.State* nocapture readnone dereferenceable(3376), i8* nocapture, i8* nocapture readonly, i8* nocapture readonly)  {
  %6 = alloca <2 x i64>, align 16
  %7 = bitcast <2 x i64>* %6 to { i64, i64 }*
  %8 = alloca <2 x i64>, align 16
  %9 = bitcast <2 x i64>* %8 to { i64, i64 }*
  %10 = bitcast <2 x i64>* %8 to %struct.uint16v8_t*
  %11 = bitcast <2 x i64>* %8 to i8*
  call void @llvm.lifetime.start(i64 16, i8* nonnull %11) 
  %12 = bitcast i8* %3 to <2 x i64>*
  %13 = load <2 x i64>, <2 x i64>* %12, align 1
  store <2 x i64> %13, <2 x i64>* %8, align 16
  %14 = bitcast i8* %4 to i64*
  %15 = load i64, i64* %14, align 1
  %16 = bitcast <2 x i64>* %6 to i8*
  %17 = getelementptr inbounds <2 x i64>, <2 x i64>* %6, i64 0, i64 0
  %18 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %7, i64 0, i32 1
  %19 = bitcast <2 x i64>* %6 to [8 x i16]*
  %20 = icmp ult i64 %15, 16
  %21 = select i1 %20, i64 %15, i64 16
  %22 = extractelement <2 x i64> %13, i32 0
  %23 = shl i64 %22, 48
  %24 = ashr exact i64 %23, 48
  %25 = ashr i64 %24, %21
  %26 = trunc i64 %25 to i16
  call void @llvm.lifetime.start(i64 16, i8* nonnull %16)
  store <2 x i64> zeroinitializer, <2 x i64>* %6, align 16
  %27 = bitcast <2 x i64>* %6 to i16*
  store i16 %26, i16* %27, align 16
  %28 = load i64, i64* %17, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %16)
  %29 = select i1 %20, i64 %15, i64 16
  %30 = shl i64 %22, 32
  %31 = ashr i64 %30, 48
  %32 = ashr i64 %31, %29
  %33 = trunc i64 %32 to i16
  call void @llvm.lifetime.start(i64 16, i8* nonnull %16)
  store i64 %28, i64* %17, align 16
  store i64 0, i64* %18, align 8
  %34 = getelementptr inbounds [8 x i16], [8 x i16]* %19, i64 0, i64 1
  store i16 %33, i16* %34, align 2
  %35 = load i64, i64* %17, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %16)
  %36 = select i1 %20, i64 %15, i64 16
  %37 = shl i64 %22, 16
  %38 = ashr i64 %37, 48
  %39 = ashr i64 %38, %36
  %40 = trunc i64 %39 to i16
  call void @llvm.lifetime.start(i64 16, i8* nonnull %16)
  store i64 %35, i64* %17, align 16
  store i64 0, i64* %18, align 8
  %41 = getelementptr inbounds [8 x i16], [8 x i16]* %19, i64 0, i64 2
  store i16 %40, i16* %41, align 4
  %42 = load i64, i64* %17, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %16)
  %43 = select i1 %20, i64 %15, i64 16
  %44 = ashr i64 %22, 48
  %45 = ashr i64 %44, %43
  %46 = trunc i64 %45 to i16
  call void @llvm.lifetime.start(i64 16, i8* nonnull %16)
  store i64 %42, i64* %17, align 16
  store i64 0, i64* %18, align 8
  %47 = getelementptr inbounds [8 x i16], [8 x i16]* %19, i64 0, i64 3
  store i16 %46, i16* %47, align 2
  %48 = load i64, i64* %17, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %16)
  %49 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %9, i64 0, i32 1
  %50 = bitcast i64* %49 to i16*
  %51 = load i16, i16* %50, align 8
  %52 = select i1 %20, i64 %15, i64 16
  %53 = sext i16 %51 to i64
  %54 = ashr i64 %53, %52
  %55 = trunc i64 %54 to i16
  call void @llvm.lifetime.start(i64 16, i8* nonnull %16)
  store i64 %48, i64* %17, align 16
  store i64 0, i64* %18, align 8
  %56 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %7, i64 0, i32 1
  %57 = bitcast i64* %56 to i16*
  store i16 %55, i16* %57, align 8
  %58 = load i64, i64* %18, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %16)
  %59 = getelementptr inbounds %struct.uint16v8_t, %struct.uint16v8_t* %10, i64 0, i32 0, i64 5
  %60 = load i16, i16* %59, align 2
  %61 = select i1 %20, i64 %15, i64 16
  %62 = sext i16 %60 to i64
  %63 = ashr i64 %62, %61
  %64 = trunc i64 %63 to i16
  call void @llvm.lifetime.start(i64 16, i8* nonnull %16)
  store i64 %48, i64* %17, align 16
  store i64 %58, i64* %18, align 8
  %65 = getelementptr inbounds [8 x i16], [8 x i16]* %19, i64 0, i64 5
  store i16 %64, i16* %65, align 2
  %66 = load i64, i64* %18, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %16)
  %67 = getelementptr inbounds %struct.uint16v8_t, %struct.uint16v8_t* %10, i64 0, i32 0, i64 6
  %68 = load i16, i16* %67, align 4
  %69 = select i1 %20, i64 %15, i64 16
  %70 = sext i16 %68 to i64
  %71 = ashr i64 %70, %69
  %72 = trunc i64 %71 to i16
  call void @llvm.lifetime.start(i64 16, i8* nonnull %16)
  store i64 %48, i64* %17, align 16
  store i64 %66, i64* %18, align 8
  %73 = getelementptr inbounds [8 x i16], [8 x i16]* %19, i64 0, i64 6
  store i16 %72, i16* %73, align 4
  %74 = load i64, i64* %18, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %16)
  %75 = getelementptr inbounds %struct.uint16v8_t, %struct.uint16v8_t* %10, i64 0, i32 0, i64 7
  %76 = load i16, i16* %75, align 2
  %77 = select i1 %20, i64 %15, i64 16
  %78 = sext i16 %76 to i64
  %79 = ashr i64 %78, %77
  %80 = trunc i64 %79 to i16
  call void @llvm.lifetime.start(i64 16, i8* nonnull %16)
  store i64 %48, i64* %17, align 16
  store i64 %74, i64* %18, align 8
  %81 = getelementptr inbounds [8 x i16], [8 x i16]* %19, i64 0, i64 7
  store i16 %80, i16* %81, align 2
  %82 = load i64, i64* %18, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %16)
  %83 = lshr i64 %48, 16
  %84 = lshr i64 %48, 32
  %85 = lshr i64 %48, 48
  %86 = trunc i64 %48 to i16
  %87 = trunc i64 %83 to i16
  %88 = trunc i64 %84 to i16
  %89 = trunc i64 %85 to i16
  %90 = bitcast i8* %2 to i16*
  store i16 %86, i16* %90, align 1
  %91 = getelementptr inbounds i8, i8* %2, i64 2
  %92 = bitcast i8* %91 to i16*
  store i16 %87, i16* %92, align 1
  %93 = getelementptr inbounds i8, i8* %2, i64 4
  %94 = bitcast i8* %93 to i16*
  store i16 %88, i16* %94, align 1
  %95 = getelementptr inbounds i8, i8* %2, i64 6
  %96 = bitcast i8* %95 to i16*
  store i16 %89, i16* %96, align 1
  %97 = trunc i64 %82 to i16
  %98 = getelementptr inbounds i8, i8* %2, i64 8
  %99 = bitcast i8* %98 to i16*
  store i16 %97, i16* %99, align 1
  %100 = lshr i64 %82, 16
  %101 = trunc i64 %100 to i16
  %102 = getelementptr inbounds i8, i8* %2, i64 10
  %103 = bitcast i8* %102 to i16*
  store i16 %101, i16* %103, align 1
  %104 = lshr i64 %82, 32
  %105 = trunc i64 %104 to i16
  %106 = getelementptr inbounds i8, i8* %2, i64 12
  %107 = bitcast i8* %106 to i16*
  store i16 %105, i16* %107, align 1
  %108 = lshr i64 %82, 48
  %109 = trunc i64 %108 to i16
  %110 = getelementptr inbounds i8, i8* %2, i64 14
  %111 = bitcast i8* %110 to i16*
  store i16 %109, i16* %111, align 1
  call void @llvm.lifetime.end(i64 16, i8* nonnull %11) 
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L7PSRAW_VI3VnWI8vec128_tE2VnIS2_E3MVnIS2_EEEP6MemoryS9_R5StateT_T0_T1_(%struct.Memory* returned, %struct.State* nocapture readnone dereferenceable(3376), i8* nocapture, i8* nocapture readonly, i64)  {
  %6 = alloca <2 x i64>, align 16
  %7 = bitcast <2 x i64>* %6 to { i64, i64 }*
  %8 = alloca <2 x i64>, align 16
  %9 = bitcast <2 x i64>* %8 to { i64, i64 }*
  %10 = bitcast <2 x i64>* %8 to %struct.uint16v8_t*
  %11 = bitcast <2 x i64>* %8 to i8*
  call void @llvm.lifetime.start(i64 16, i8* nonnull %11) 
  %12 = bitcast i8* %3 to <2 x i64>*
  %13 = load <2 x i64>, <2 x i64>* %12, align 1
  store <2 x i64> %13, <2 x i64>* %8, align 16
  %14 = inttoptr i64 %4 to i64*
  %15 = load i64, i64* %14
  %16 = bitcast <2 x i64>* %6 to i8*
  %17 = getelementptr inbounds <2 x i64>, <2 x i64>* %6, i64 0, i64 0
  %18 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %7, i64 0, i32 1
  %19 = bitcast <2 x i64>* %6 to [8 x i16]*
  %20 = icmp ult i64 %15, 16
  %21 = select i1 %20, i64 %15, i64 16
  %22 = extractelement <2 x i64> %13, i32 0
  %23 = shl i64 %22, 48
  %24 = ashr exact i64 %23, 48
  %25 = ashr i64 %24, %21
  %26 = trunc i64 %25 to i16
  call void @llvm.lifetime.start(i64 16, i8* nonnull %16)
  store <2 x i64> zeroinitializer, <2 x i64>* %6, align 16
  %27 = bitcast <2 x i64>* %6 to i16*
  store i16 %26, i16* %27, align 16
  %28 = load i64, i64* %17, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %16)
  %29 = select i1 %20, i64 %15, i64 16
  %30 = shl i64 %22, 32
  %31 = ashr i64 %30, 48
  %32 = ashr i64 %31, %29
  %33 = trunc i64 %32 to i16
  call void @llvm.lifetime.start(i64 16, i8* nonnull %16)
  store i64 %28, i64* %17, align 16
  store i64 0, i64* %18, align 8
  %34 = getelementptr inbounds [8 x i16], [8 x i16]* %19, i64 0, i64 1
  store i16 %33, i16* %34, align 2
  %35 = load i64, i64* %17, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %16)
  %36 = select i1 %20, i64 %15, i64 16
  %37 = shl i64 %22, 16
  %38 = ashr i64 %37, 48
  %39 = ashr i64 %38, %36
  %40 = trunc i64 %39 to i16
  call void @llvm.lifetime.start(i64 16, i8* nonnull %16)
  store i64 %35, i64* %17, align 16
  store i64 0, i64* %18, align 8
  %41 = getelementptr inbounds [8 x i16], [8 x i16]* %19, i64 0, i64 2
  store i16 %40, i16* %41, align 4
  %42 = load i64, i64* %17, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %16)
  %43 = select i1 %20, i64 %15, i64 16
  %44 = ashr i64 %22, 48
  %45 = ashr i64 %44, %43
  %46 = trunc i64 %45 to i16
  call void @llvm.lifetime.start(i64 16, i8* nonnull %16)
  store i64 %42, i64* %17, align 16
  store i64 0, i64* %18, align 8
  %47 = getelementptr inbounds [8 x i16], [8 x i16]* %19, i64 0, i64 3
  store i16 %46, i16* %47, align 2
  %48 = load i64, i64* %17, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %16)
  %49 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %9, i64 0, i32 1
  %50 = bitcast i64* %49 to i16*
  %51 = load i16, i16* %50, align 8
  %52 = select i1 %20, i64 %15, i64 16
  %53 = sext i16 %51 to i64
  %54 = ashr i64 %53, %52
  %55 = trunc i64 %54 to i16
  call void @llvm.lifetime.start(i64 16, i8* nonnull %16)
  store i64 %48, i64* %17, align 16
  store i64 0, i64* %18, align 8
  %56 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %7, i64 0, i32 1
  %57 = bitcast i64* %56 to i16*
  store i16 %55, i16* %57, align 8
  %58 = load i64, i64* %18, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %16)
  %59 = getelementptr inbounds %struct.uint16v8_t, %struct.uint16v8_t* %10, i64 0, i32 0, i64 5
  %60 = load i16, i16* %59, align 2
  %61 = select i1 %20, i64 %15, i64 16
  %62 = sext i16 %60 to i64
  %63 = ashr i64 %62, %61
  %64 = trunc i64 %63 to i16
  call void @llvm.lifetime.start(i64 16, i8* nonnull %16)
  store i64 %48, i64* %17, align 16
  store i64 %58, i64* %18, align 8
  %65 = getelementptr inbounds [8 x i16], [8 x i16]* %19, i64 0, i64 5
  store i16 %64, i16* %65, align 2
  %66 = load i64, i64* %18, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %16)
  %67 = getelementptr inbounds %struct.uint16v8_t, %struct.uint16v8_t* %10, i64 0, i32 0, i64 6
  %68 = load i16, i16* %67, align 4
  %69 = select i1 %20, i64 %15, i64 16
  %70 = sext i16 %68 to i64
  %71 = ashr i64 %70, %69
  %72 = trunc i64 %71 to i16
  call void @llvm.lifetime.start(i64 16, i8* nonnull %16)
  store i64 %48, i64* %17, align 16
  store i64 %66, i64* %18, align 8
  %73 = getelementptr inbounds [8 x i16], [8 x i16]* %19, i64 0, i64 6
  store i16 %72, i16* %73, align 4
  %74 = load i64, i64* %18, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %16)
  %75 = getelementptr inbounds %struct.uint16v8_t, %struct.uint16v8_t* %10, i64 0, i32 0, i64 7
  %76 = load i16, i16* %75, align 2
  %77 = select i1 %20, i64 %15, i64 16
  %78 = sext i16 %76 to i64
  %79 = ashr i64 %78, %77
  %80 = trunc i64 %79 to i16
  call void @llvm.lifetime.start(i64 16, i8* nonnull %16)
  store i64 %48, i64* %17, align 16
  store i64 %74, i64* %18, align 8
  %81 = getelementptr inbounds [8 x i16], [8 x i16]* %19, i64 0, i64 7
  store i16 %80, i16* %81, align 2
  %82 = load i64, i64* %18, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %16)
  %83 = lshr i64 %48, 16
  %84 = lshr i64 %48, 32
  %85 = lshr i64 %48, 48
  %86 = trunc i64 %48 to i16
  %87 = trunc i64 %83 to i16
  %88 = trunc i64 %84 to i16
  %89 = trunc i64 %85 to i16
  %90 = bitcast i8* %2 to i16*
  store i16 %86, i16* %90, align 1
  %91 = getelementptr inbounds i8, i8* %2, i64 2
  %92 = bitcast i8* %91 to i16*
  store i16 %87, i16* %92, align 1
  %93 = getelementptr inbounds i8, i8* %2, i64 4
  %94 = bitcast i8* %93 to i16*
  store i16 %88, i16* %94, align 1
  %95 = getelementptr inbounds i8, i8* %2, i64 6
  %96 = bitcast i8* %95 to i16*
  store i16 %89, i16* %96, align 1
  %97 = trunc i64 %82 to i16
  %98 = getelementptr inbounds i8, i8* %2, i64 8
  %99 = bitcast i8* %98 to i16*
  store i16 %97, i16* %99, align 1
  %100 = lshr i64 %82, 16
  %101 = trunc i64 %100 to i16
  %102 = getelementptr inbounds i8, i8* %2, i64 10
  %103 = bitcast i8* %102 to i16*
  store i16 %101, i16* %103, align 1
  %104 = lshr i64 %82, 32
  %105 = trunc i64 %104 to i16
  %106 = getelementptr inbounds i8, i8* %2, i64 12
  %107 = bitcast i8* %106 to i16*
  store i16 %105, i16* %107, align 1
  %108 = lshr i64 %82, 48
  %109 = trunc i64 %108 to i16
  %110 = getelementptr inbounds i8, i8* %2, i64 14
  %111 = bitcast i8* %110 to i16*
  store i16 %109, i16* %111, align 1
  call void @llvm.lifetime.end(i64 16, i8* nonnull %11) 
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L5PSRADI4RVnWI7vec64_tE3RVnIS2_E2InIhEEEP6MemoryS9_R5StateT_T0_T1_(%struct.Memory* readnone returned, %struct.State* nocapture readnone dereferenceable(3376), i64* nocapture, i64, i64)  {
  %6 = alloca i64, align 8
  %7 = trunc i64 %4 to i8
  %8 = bitcast i64* %6 to i8*
  %9 = bitcast i64* %6 to [2 x i32]*
  %10 = icmp ult i8 %7, 32
  %11 = shl i64 %3, 32
  %12 = ashr exact i64 %11, 32
  %13 = and i64 %4, 255
  %14 = select i1 %10, i64 %13, i64 32
  %15 = ashr i64 %12, %14
  %16 = trunc i64 %15 to i32
  call void @llvm.lifetime.start(i64 8, i8* nonnull %8)
  store i64 0, i64* %6, align 8
  %17 = bitcast i64* %6 to i32*
  store i32 %16, i32* %17, align 8
  %18 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %8)
  %19 = ashr i64 %3, 32
  %20 = icmp ult i8 %7, 32
  %21 = and i64 %4, 255
  %22 = select i1 %20, i64 %21, i64 32
  %23 = ashr i64 %19, %22
  %24 = trunc i64 %23 to i32
  call void @llvm.lifetime.start(i64 8, i8* nonnull %8)
  store i64 %18, i64* %6, align 8
  %25 = getelementptr inbounds [2 x i32], [2 x i32]* %9, i64 0, i64 1
  store i32 %24, i32* %25, align 4
  %26 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %8)
  %27 = lshr i64 %26, 32
  %28 = trunc i64 %26 to i32
  %29 = trunc i64 %27 to i32
  %30 = bitcast i64* %2 to [2 x i32]*
  %31 = bitcast i64* %2 to i32*
  store i32 %28, i32* %31, align 1
  %32 = getelementptr inbounds [2 x i32], [2 x i32]* %30, i64 0, i64 1
  store i32 %29, i32* %32, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L5PSRADI4RVnWI7vec64_tE3RVnIS2_E2RnImEEEP6MemoryS9_R5StateT_T0_T1_(%struct.Memory* readnone returned, %struct.State* nocapture readnone dereferenceable(3376), i64* nocapture, i64, i64)  {
  %6 = alloca i64, align 8
  %7 = bitcast i64* %6 to i8*
  %8 = bitcast i64* %6 to [2 x i32]*
  %9 = icmp ult i64 %4, 32
  %10 = select i1 %9, i64 %4, i64 32
  %11 = shl i64 %3, 32
  %12 = ashr exact i64 %11, 32
  %13 = ashr i64 %12, %10
  %14 = trunc i64 %13 to i32
  call void @llvm.lifetime.start(i64 8, i8* nonnull %7)
  store i64 0, i64* %6, align 8
  %15 = bitcast i64* %6 to i32*
  store i32 %14, i32* %15, align 8
  %16 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %7)
  %17 = select i1 %9, i64 %4, i64 32
  %18 = ashr i64 %3, 32
  %19 = ashr i64 %18, %17
  %20 = trunc i64 %19 to i32
  call void @llvm.lifetime.start(i64 8, i8* nonnull %7)
  store i64 %16, i64* %6, align 8
  %21 = getelementptr inbounds [2 x i32], [2 x i32]* %8, i64 0, i64 1
  store i32 %20, i32* %21, align 4
  %22 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %7)
  %23 = lshr i64 %22, 32
  %24 = trunc i64 %22 to i32
  %25 = trunc i64 %23 to i32
  %26 = bitcast i64* %2 to [2 x i32]*
  %27 = bitcast i64* %2 to i32*
  store i32 %24, i32* %27, align 1
  %28 = getelementptr inbounds [2 x i32], [2 x i32]* %26, i64 0, i64 1
  store i32 %25, i32* %28, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L5PSRADI4RVnWI7vec64_tE3RVnIS2_E2MnImEEEP6MemoryS9_R5StateT_T0_T1_(%struct.Memory*, %struct.State* nocapture readnone dereferenceable(3376), i64* nocapture, i64, i64)  {
  %6 = alloca i64, align 8
  %7 = inttoptr i64 %4 to i64*
  %8 = load i64, i64* %7
  %9 = bitcast i64* %6 to i8*
  %10 = bitcast i64* %6 to [2 x i32]*
  %11 = icmp ult i64 %8, 32
  %12 = select i1 %11, i64 %8, i64 32
  %13 = shl i64 %3, 32
  %14 = ashr exact i64 %13, 32
  %15 = ashr i64 %14, %12
  %16 = trunc i64 %15 to i32
  call void @llvm.lifetime.start(i64 8, i8* nonnull %9)
  store i64 0, i64* %6, align 8
  %17 = bitcast i64* %6 to i32*
  store i32 %16, i32* %17, align 8
  %18 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %9)
  %19 = select i1 %11, i64 %8, i64 32
  %20 = ashr i64 %3, 32
  %21 = ashr i64 %20, %19
  %22 = trunc i64 %21 to i32
  call void @llvm.lifetime.start(i64 8, i8* nonnull %9)
  store i64 %18, i64* %6, align 8
  %23 = getelementptr inbounds [2 x i32], [2 x i32]* %10, i64 0, i64 1
  store i32 %22, i32* %23, align 4
  %24 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %9)
  %25 = lshr i64 %24, 32
  %26 = trunc i64 %24 to i32
  %27 = trunc i64 %25 to i32
  %28 = bitcast i64* %2 to [2 x i32]*
  %29 = bitcast i64* %2 to i32*
  store i32 %26, i32* %29, align 1
  %30 = getelementptr inbounds [2 x i32], [2 x i32]* %28, i64 0, i64 1
  store i32 %27, i32* %30, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L5PSRADI3VnWI8vec128_tE2VnIS2_E2InIhEEEP6MemoryS9_R5StateT_T0_T1_(%struct.Memory* readnone returned, %struct.State* nocapture readnone dereferenceable(3376), i8* nocapture, i8* nocapture readonly, i64)  {
  %6 = alloca <2 x i64>, align 16
  %7 = bitcast <2 x i64>* %6 to { i64, i64 }*
  %8 = bitcast i8* %3 to i64*
  %9 = load i64, i64* %8, align 1
  %10 = getelementptr inbounds i8, i8* %3, i64 8
  %11 = bitcast i8* %10 to i64*
  %12 = load i64, i64* %11, align 1
  %13 = trunc i64 %4 to i8
  %14 = bitcast <2 x i64>* %6 to i8*
  %15 = getelementptr inbounds <2 x i64>, <2 x i64>* %6, i64 0, i64 0
  %16 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %7, i64 0, i32 1
  %17 = bitcast <2 x i64>* %6 to [4 x i32]*
  %18 = icmp ult i8 %13, 32
  %19 = shl i64 %9, 32
  %20 = ashr exact i64 %19, 32
  %21 = icmp ult i8 %13, 32
  %22 = and i64 %4, 255
  %23 = select i1 %21, i64 %22, i64 32
  %24 = ashr i64 %20, %23
  %25 = trunc i64 %24 to i32
  call void @llvm.lifetime.start(i64 16, i8* nonnull %14)
  store <2 x i64> zeroinitializer, <2 x i64>* %6, align 16
  %26 = bitcast <2 x i64>* %6 to i32*
  store i32 %25, i32* %26, align 16
  %27 = load i64, i64* %15, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %14)
  %28 = ashr i64 %9, 32
  %29 = icmp ult i8 %13, 32
  %30 = and i64 %4, 255
  %31 = select i1 %29, i64 %30, i64 32
  %32 = ashr i64 %28, %31
  %33 = trunc i64 %32 to i32
  call void @llvm.lifetime.start(i64 16, i8* nonnull %14)
  store i64 %27, i64* %15, align 16
  store i64 0, i64* %16, align 8
  %34 = getelementptr inbounds [4 x i32], [4 x i32]* %17, i64 0, i64 1
  store i32 %33, i32* %34, align 4
  %35 = load i64, i64* %15, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %14)
  %36 = shl i64 %12, 32
  %37 = ashr exact i64 %36, 32
  %38 = and i64 %4, 255
  %39 = select i1 %18, i64 %38, i64 32
  %40 = ashr i64 %37, %39
  %41 = trunc i64 %40 to i32
  call void @llvm.lifetime.start(i64 16, i8* nonnull %14)
  store i64 %35, i64* %15, align 16
  store i64 0, i64* %16, align 8
  %42 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %7, i64 0, i32 1
  %43 = bitcast i64* %42 to i32*
  store i32 %41, i32* %43, align 8
  %44 = load i64, i64* %16, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %14)
  %45 = ashr i64 %12, 32
  %46 = icmp ult i8 %13, 32
  %47 = and i64 %4, 255
  %48 = select i1 %46, i64 %47, i64 32
  %49 = ashr i64 %45, %48
  %50 = trunc i64 %49 to i32
  call void @llvm.lifetime.start(i64 16, i8* nonnull %14)
  store i64 %35, i64* %15, align 16
  store i64 %44, i64* %16, align 8
  %51 = getelementptr inbounds [4 x i32], [4 x i32]* %17, i64 0, i64 3
  store i32 %50, i32* %51, align 4
  %52 = load i64, i64* %16, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %14)
  %53 = lshr i64 %35, 32
  %54 = trunc i64 %35 to i32
  %55 = trunc i64 %53 to i32
  %56 = bitcast i8* %2 to i32*
  store i32 %54, i32* %56, align 1
  %57 = getelementptr inbounds i8, i8* %2, i64 4
  %58 = bitcast i8* %57 to i32*
  store i32 %55, i32* %58, align 1
  %59 = trunc i64 %52 to i32
  %60 = getelementptr inbounds i8, i8* %2, i64 8
  %61 = bitcast i8* %60 to i32*
  store i32 %59, i32* %61, align 1
  %62 = lshr i64 %52, 32
  %63 = trunc i64 %62 to i32
  %64 = getelementptr inbounds i8, i8* %2, i64 12
  %65 = bitcast i8* %64 to i32*
  store i32 %63, i32* %65, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L7PSRAD_VI3VnWI8vec128_tE2VnIS2_ES5_EEP6MemoryS7_R5StateT_T0_T1_(%struct.Memory* readnone returned, %struct.State* nocapture readnone dereferenceable(3376), i8* nocapture, i8* nocapture readonly, i8* nocapture readonly)  {
  %6 = alloca <2 x i64>, align 16
  %7 = bitcast <2 x i64>* %6 to { i64, i64 }*
  %8 = bitcast i8* %3 to i64*
  %9 = load i64, i64* %8, align 1
  %10 = getelementptr inbounds i8, i8* %3, i64 8
  %11 = bitcast i8* %10 to i64*
  %12 = load i64, i64* %11, align 1
  %13 = bitcast i8* %4 to i64*
  %14 = load i64, i64* %13, align 1
  %15 = bitcast <2 x i64>* %6 to i8*
  %16 = getelementptr inbounds <2 x i64>, <2 x i64>* %6, i64 0, i64 0
  %17 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %7, i64 0, i32 1
  %18 = bitcast <2 x i64>* %6 to [4 x i32]*
  %19 = icmp ult i64 %14, 32
  %20 = select i1 %19, i64 %14, i64 32
  %21 = shl i64 %9, 32
  %22 = ashr exact i64 %21, 32
  %23 = ashr i64 %22, %20
  %24 = trunc i64 %23 to i32
  call void @llvm.lifetime.start(i64 16, i8* nonnull %15)
  store <2 x i64> zeroinitializer, <2 x i64>* %6, align 16
  %25 = bitcast <2 x i64>* %6 to i32*
  store i32 %24, i32* %25, align 16
  %26 = load i64, i64* %16, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %15)
  %27 = select i1 %19, i64 %14, i64 32
  %28 = ashr i64 %9, 32
  %29 = ashr i64 %28, %27
  %30 = trunc i64 %29 to i32
  call void @llvm.lifetime.start(i64 16, i8* nonnull %15)
  store i64 %26, i64* %16, align 16
  store i64 0, i64* %17, align 8
  %31 = getelementptr inbounds [4 x i32], [4 x i32]* %18, i64 0, i64 1
  store i32 %30, i32* %31, align 4
  %32 = load i64, i64* %16, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %15)
  %33 = select i1 %19, i64 %14, i64 32
  %34 = shl i64 %12, 32
  %35 = ashr exact i64 %34, 32
  %36 = ashr i64 %35, %33
  %37 = trunc i64 %36 to i32
  call void @llvm.lifetime.start(i64 16, i8* nonnull %15)
  store i64 %32, i64* %16, align 16
  store i64 0, i64* %17, align 8
  %38 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %7, i64 0, i32 1
  %39 = bitcast i64* %38 to i32*
  store i32 %37, i32* %39, align 8
  %40 = load i64, i64* %17, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %15)
  %41 = select i1 %19, i64 %14, i64 32
  %42 = ashr i64 %12, 32
  %43 = ashr i64 %42, %41
  %44 = trunc i64 %43 to i32
  call void @llvm.lifetime.start(i64 16, i8* nonnull %15)
  store i64 %32, i64* %16, align 16
  store i64 %40, i64* %17, align 8
  %45 = getelementptr inbounds [4 x i32], [4 x i32]* %18, i64 0, i64 3
  store i32 %44, i32* %45, align 4
  %46 = load i64, i64* %17, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %15)
  %47 = lshr i64 %32, 32
  %48 = trunc i64 %32 to i32
  %49 = trunc i64 %47 to i32
  %50 = bitcast i8* %2 to i32*
  store i32 %48, i32* %50, align 1
  %51 = getelementptr inbounds i8, i8* %2, i64 4
  %52 = bitcast i8* %51 to i32*
  store i32 %49, i32* %52, align 1
  %53 = trunc i64 %46 to i32
  %54 = getelementptr inbounds i8, i8* %2, i64 8
  %55 = bitcast i8* %54 to i32*
  store i32 %53, i32* %55, align 1
  %56 = lshr i64 %46, 32
  %57 = trunc i64 %56 to i32
  %58 = getelementptr inbounds i8, i8* %2, i64 12
  %59 = bitcast i8* %58 to i32*
  store i32 %57, i32* %59, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L7PSRAD_VI3VnWI8vec128_tE2VnIS2_E3MVnIS2_EEEP6MemoryS9_R5StateT_T0_T1_(%struct.Memory* returned, %struct.State* nocapture readnone dereferenceable(3376), i8* nocapture, i8* nocapture readonly, i64)  {
  %6 = alloca <2 x i64>, align 16
  %7 = bitcast <2 x i64>* %6 to { i64, i64 }*
  %8 = bitcast i8* %3 to i64*
  %9 = load i64, i64* %8, align 1
  %10 = getelementptr inbounds i8, i8* %3, i64 8
  %11 = bitcast i8* %10 to i64*
  %12 = load i64, i64* %11, align 1
  %13 = inttoptr i64 %4 to i64*
  %14 = load i64, i64* %13
  %15 = bitcast <2 x i64>* %6 to i8*
  %16 = getelementptr inbounds <2 x i64>, <2 x i64>* %6, i64 0, i64 0
  %17 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %7, i64 0, i32 1
  %18 = bitcast <2 x i64>* %6 to [4 x i32]*
  %19 = icmp ult i64 %14, 32
  %20 = select i1 %19, i64 %14, i64 32
  %21 = shl i64 %9, 32
  %22 = ashr exact i64 %21, 32
  %23 = ashr i64 %22, %20
  %24 = trunc i64 %23 to i32
  call void @llvm.lifetime.start(i64 16, i8* nonnull %15)
  store <2 x i64> zeroinitializer, <2 x i64>* %6, align 16
  %25 = bitcast <2 x i64>* %6 to i32*
  store i32 %24, i32* %25, align 16
  %26 = load i64, i64* %16, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %15)
  %27 = select i1 %19, i64 %14, i64 32
  %28 = ashr i64 %9, 32
  %29 = ashr i64 %28, %27
  %30 = trunc i64 %29 to i32
  call void @llvm.lifetime.start(i64 16, i8* nonnull %15)
  store i64 %26, i64* %16, align 16
  store i64 0, i64* %17, align 8
  %31 = getelementptr inbounds [4 x i32], [4 x i32]* %18, i64 0, i64 1
  store i32 %30, i32* %31, align 4
  %32 = load i64, i64* %16, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %15)
  %33 = select i1 %19, i64 %14, i64 32
  %34 = shl i64 %12, 32
  %35 = ashr exact i64 %34, 32
  %36 = ashr i64 %35, %33
  %37 = trunc i64 %36 to i32
  call void @llvm.lifetime.start(i64 16, i8* nonnull %15)
  store i64 %32, i64* %16, align 16
  store i64 0, i64* %17, align 8
  %38 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %7, i64 0, i32 1
  %39 = bitcast i64* %38 to i32*
  store i32 %37, i32* %39, align 8
  %40 = load i64, i64* %17, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %15)
  %41 = select i1 %19, i64 %14, i64 32
  %42 = ashr i64 %12, 32
  %43 = ashr i64 %42, %41
  %44 = trunc i64 %43 to i32
  call void @llvm.lifetime.start(i64 16, i8* nonnull %15)
  store i64 %32, i64* %16, align 16
  store i64 %40, i64* %17, align 8
  %45 = getelementptr inbounds [4 x i32], [4 x i32]* %18, i64 0, i64 3
  store i32 %44, i32* %45, align 4
  %46 = load i64, i64* %17, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %15)
  %47 = lshr i64 %32, 32
  %48 = trunc i64 %32 to i32
  %49 = trunc i64 %47 to i32
  %50 = bitcast i8* %2 to i32*
  store i32 %48, i32* %50, align 1
  %51 = getelementptr inbounds i8, i8* %2, i64 4
  %52 = bitcast i8* %51 to i32*
  store i32 %49, i32* %52, align 1
  %53 = trunc i64 %46 to i32
  %54 = getelementptr inbounds i8, i8* %2, i64 8
  %55 = bitcast i8* %54 to i32*
  store i32 %53, i32* %55, align 1
  %56 = lshr i64 %46, 32
  %57 = trunc i64 %56 to i32
  %58 = getelementptr inbounds i8, i8* %2, i64 12
  %59 = bitcast i8* %58 to i32*
  store i32 %57, i32* %59, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L5PSLLWI4RVnWI7vec64_tE3RVnIS2_E2InIhEEEP6MemoryS9_R5StateT_T0_T1_(%struct.Memory* readnone returned, %struct.State* nocapture readnone dereferenceable(3376), i64* nocapture, i64, i64)  {
  %6 = alloca i64, align 8
  %7 = trunc i64 %4 to i8
  %8 = icmp ugt i8 %7, 15
  %9 = and i64 %4, 255
  %10 = bitcast i64* %6 to i8*
  %11 = bitcast i64* %6 to [4 x i16]*
  br i1 %8, label %36, label %12

; <label>:12:                                     ; preds = %5
  %13 = shl i64 %3, 48
  %14 = ashr exact i64 %13, 48
  %15 = shl i64 %14, %9
  %16 = trunc i64 %15 to i16
  call void @llvm.lifetime.start(i64 8, i8* nonnull %10)
  store i64 0, i64* %6, align 8
  %17 = bitcast i64* %6 to i16*
  store i16 %16, i16* %17, align 8
  %18 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %10)
  %19 = shl i64 %3, 32
  %20 = ashr i64 %19, 48
  %21 = shl i64 %20, %9
  %22 = trunc i64 %21 to i16
  call void @llvm.lifetime.start(i64 8, i8* nonnull %10)
  store i64 %18, i64* %6, align 8
  %23 = getelementptr inbounds [4 x i16], [4 x i16]* %11, i64 0, i64 1
  store i16 %22, i16* %23, align 2
  %24 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %10)
  %25 = shl i64 %3, 16
  %26 = ashr i64 %25, 48
  %27 = shl i64 %26, %9
  %28 = trunc i64 %27 to i16
  call void @llvm.lifetime.start(i64 8, i8* nonnull %10)
  store i64 %24, i64* %6, align 8
  %29 = getelementptr inbounds [4 x i16], [4 x i16]* %11, i64 0, i64 2
  store i16 %28, i16* %29, align 4
  %30 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %10)
  %31 = ashr i64 %3, 48
  %32 = shl i64 %31, %9
  %33 = trunc i64 %32 to i16
  call void @llvm.lifetime.start(i64 8, i8* nonnull %10)
  store i64 %30, i64* %6, align 8
  %34 = getelementptr inbounds [4 x i16], [4 x i16]* %11, i64 0, i64 3
  store i16 %33, i16* %34, align 2
  %35 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %10)
  br label %45

; <label>:36:                                     ; preds = %5
  call void @llvm.lifetime.start(i64 8, i8* nonnull %10)
  store i64 0, i64* %6, align 8
  %37 = bitcast i64* %6 to i16*
  store i16 0, i16* %37, align 8
  %38 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %10)
  call void @llvm.lifetime.start(i64 8, i8* nonnull %10)
  store i64 %38, i64* %6, align 8
  %39 = getelementptr inbounds [4 x i16], [4 x i16]* %11, i64 0, i64 1
  store i16 0, i16* %39, align 2
  %40 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %10)
  call void @llvm.lifetime.start(i64 8, i8* nonnull %10)
  store i64 %40, i64* %6, align 8
  %41 = getelementptr inbounds [4 x i16], [4 x i16]* %11, i64 0, i64 2
  store i16 0, i16* %41, align 4
  %42 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %10)
  call void @llvm.lifetime.start(i64 8, i8* nonnull %10)
  store i64 %42, i64* %6, align 8
  %43 = getelementptr inbounds [4 x i16], [4 x i16]* %11, i64 0, i64 3
  store i16 0, i16* %43, align 2
  %44 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %10)
  br label %45

; <label>:45:                                     ; preds = %36, %12
  %46 = phi i64 [ %44, %36 ], [ %35, %12 ]
  %47 = lshr i64 %46, 16
  %48 = lshr i64 %46, 32
  %49 = lshr i64 %46, 48
  %50 = trunc i64 %46 to i16
  %51 = trunc i64 %47 to i16
  %52 = trunc i64 %48 to i16
  %53 = trunc i64 %49 to i16
  %54 = bitcast i64* %2 to [4 x i16]*
  %55 = bitcast i64* %2 to i16*
  store i16 %50, i16* %55, align 1
  %56 = getelementptr inbounds [4 x i16], [4 x i16]* %54, i64 0, i64 1
  store i16 %51, i16* %56, align 1
  %57 = getelementptr inbounds [4 x i16], [4 x i16]* %54, i64 0, i64 2
  store i16 %52, i16* %57, align 1
  %58 = getelementptr inbounds [4 x i16], [4 x i16]* %54, i64 0, i64 3
  store i16 %53, i16* %58, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L5PSLLWI4RVnWI7vec64_tE3RVnIS2_E2RnImEEEP6MemoryS9_R5StateT_T0_T1_(%struct.Memory* readnone returned, %struct.State* nocapture readnone dereferenceable(3376), i64* nocapture, i64, i64)  {
  %6 = alloca i64, align 8
  %7 = icmp ugt i64 %4, 15
  %8 = shl i64 %4, 48
  %9 = ashr exact i64 %8, 48
  %10 = bitcast i64* %6 to i8*
  %11 = bitcast i64* %6 to [4 x i16]*
  br i1 %7, label %36, label %12

; <label>:12:                                     ; preds = %5
  %13 = shl i64 %3, 48
  %14 = ashr exact i64 %13, 48
  %15 = shl i64 %14, %9
  %16 = trunc i64 %15 to i16
  call void @llvm.lifetime.start(i64 8, i8* nonnull %10)
  store i64 0, i64* %6, align 8
  %17 = bitcast i64* %6 to i16*
  store i16 %16, i16* %17, align 8
  %18 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %10)
  %19 = shl i64 %3, 32
  %20 = ashr i64 %19, 48
  %21 = shl i64 %20, %9
  %22 = trunc i64 %21 to i16
  call void @llvm.lifetime.start(i64 8, i8* nonnull %10)
  store i64 %18, i64* %6, align 8
  %23 = getelementptr inbounds [4 x i16], [4 x i16]* %11, i64 0, i64 1
  store i16 %22, i16* %23, align 2
  %24 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %10)
  %25 = shl i64 %3, 16
  %26 = ashr i64 %25, 48
  %27 = shl i64 %26, %9
  %28 = trunc i64 %27 to i16
  call void @llvm.lifetime.start(i64 8, i8* nonnull %10)
  store i64 %24, i64* %6, align 8
  %29 = getelementptr inbounds [4 x i16], [4 x i16]* %11, i64 0, i64 2
  store i16 %28, i16* %29, align 4
  %30 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %10)
  %31 = ashr i64 %3, 48
  %32 = shl i64 %31, %9
  %33 = trunc i64 %32 to i16
  call void @llvm.lifetime.start(i64 8, i8* nonnull %10)
  store i64 %30, i64* %6, align 8
  %34 = getelementptr inbounds [4 x i16], [4 x i16]* %11, i64 0, i64 3
  store i16 %33, i16* %34, align 2
  %35 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %10)
  br label %45

; <label>:36:                                     ; preds = %5
  call void @llvm.lifetime.start(i64 8, i8* nonnull %10)
  store i64 0, i64* %6, align 8
  %37 = bitcast i64* %6 to i16*
  store i16 0, i16* %37, align 8
  %38 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %10)
  call void @llvm.lifetime.start(i64 8, i8* nonnull %10)
  store i64 %38, i64* %6, align 8
  %39 = getelementptr inbounds [4 x i16], [4 x i16]* %11, i64 0, i64 1
  store i16 0, i16* %39, align 2
  %40 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %10)
  call void @llvm.lifetime.start(i64 8, i8* nonnull %10)
  store i64 %40, i64* %6, align 8
  %41 = getelementptr inbounds [4 x i16], [4 x i16]* %11, i64 0, i64 2
  store i16 0, i16* %41, align 4
  %42 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %10)
  call void @llvm.lifetime.start(i64 8, i8* nonnull %10)
  store i64 %42, i64* %6, align 8
  %43 = getelementptr inbounds [4 x i16], [4 x i16]* %11, i64 0, i64 3
  store i16 0, i16* %43, align 2
  %44 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %10)
  br label %45

; <label>:45:                                     ; preds = %36, %12
  %46 = phi i64 [ %44, %36 ], [ %35, %12 ]
  %47 = lshr i64 %46, 16
  %48 = lshr i64 %46, 32
  %49 = lshr i64 %46, 48
  %50 = trunc i64 %46 to i16
  %51 = trunc i64 %47 to i16
  %52 = trunc i64 %48 to i16
  %53 = trunc i64 %49 to i16
  %54 = bitcast i64* %2 to [4 x i16]*
  %55 = bitcast i64* %2 to i16*
  store i16 %50, i16* %55, align 1
  %56 = getelementptr inbounds [4 x i16], [4 x i16]* %54, i64 0, i64 1
  store i16 %51, i16* %56, align 1
  %57 = getelementptr inbounds [4 x i16], [4 x i16]* %54, i64 0, i64 2
  store i16 %52, i16* %57, align 1
  %58 = getelementptr inbounds [4 x i16], [4 x i16]* %54, i64 0, i64 3
  store i16 %53, i16* %58, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L5PSLLWI4RVnWI7vec64_tE3RVnIS2_E2MnImEEEP6MemoryS9_R5StateT_T0_T1_(%struct.Memory*, %struct.State* nocapture readnone dereferenceable(3376), i64* nocapture, i64, i64)  {
  %6 = alloca i64, align 8
  %7 = inttoptr i64 %4 to i64*
  %8 = load i64, i64* %7
  %9 = icmp ugt i64 %8, 15
  %10 = shl i64 %8, 48
  %11 = ashr exact i64 %10, 48
  %12 = bitcast i64* %6 to i8*
  %13 = bitcast i64* %6 to [4 x i16]*
  br i1 %9, label %38, label %14

; <label>:14:                                     ; preds = %5
  %15 = shl i64 %3, 48
  %16 = ashr exact i64 %15, 48
  %17 = shl i64 %16, %11
  %18 = trunc i64 %17 to i16
  call void @llvm.lifetime.start(i64 8, i8* nonnull %12)
  store i64 0, i64* %6, align 8
  %19 = bitcast i64* %6 to i16*
  store i16 %18, i16* %19, align 8
  %20 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %12)
  %21 = shl i64 %3, 32
  %22 = ashr i64 %21, 48
  %23 = shl i64 %22, %11
  %24 = trunc i64 %23 to i16
  call void @llvm.lifetime.start(i64 8, i8* nonnull %12)
  store i64 %20, i64* %6, align 8
  %25 = getelementptr inbounds [4 x i16], [4 x i16]* %13, i64 0, i64 1
  store i16 %24, i16* %25, align 2
  %26 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %12)
  %27 = shl i64 %3, 16
  %28 = ashr i64 %27, 48
  %29 = shl i64 %28, %11
  %30 = trunc i64 %29 to i16
  call void @llvm.lifetime.start(i64 8, i8* nonnull %12)
  store i64 %26, i64* %6, align 8
  %31 = getelementptr inbounds [4 x i16], [4 x i16]* %13, i64 0, i64 2
  store i16 %30, i16* %31, align 4
  %32 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %12)
  %33 = ashr i64 %3, 48
  %34 = shl i64 %33, %11
  %35 = trunc i64 %34 to i16
  call void @llvm.lifetime.start(i64 8, i8* nonnull %12)
  store i64 %32, i64* %6, align 8
  %36 = getelementptr inbounds [4 x i16], [4 x i16]* %13, i64 0, i64 3
  store i16 %35, i16* %36, align 2
  %37 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %12)
  br label %47

; <label>:38:                                     ; preds = %5
  call void @llvm.lifetime.start(i64 8, i8* nonnull %12)
  store i64 0, i64* %6, align 8
  %39 = bitcast i64* %6 to i16*
  store i16 0, i16* %39, align 8
  %40 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %12)
  call void @llvm.lifetime.start(i64 8, i8* nonnull %12)
  store i64 %40, i64* %6, align 8
  %41 = getelementptr inbounds [4 x i16], [4 x i16]* %13, i64 0, i64 1
  store i16 0, i16* %41, align 2
  %42 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %12)
  call void @llvm.lifetime.start(i64 8, i8* nonnull %12)
  store i64 %42, i64* %6, align 8
  %43 = getelementptr inbounds [4 x i16], [4 x i16]* %13, i64 0, i64 2
  store i16 0, i16* %43, align 4
  %44 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %12)
  call void @llvm.lifetime.start(i64 8, i8* nonnull %12)
  store i64 %44, i64* %6, align 8
  %45 = getelementptr inbounds [4 x i16], [4 x i16]* %13, i64 0, i64 3
  store i16 0, i16* %45, align 2
  %46 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %12)
  br label %47

; <label>:47:                                     ; preds = %38, %14
  %48 = phi i64 [ %46, %38 ], [ %37, %14 ]
  %49 = lshr i64 %48, 16
  %50 = lshr i64 %48, 32
  %51 = lshr i64 %48, 48
  %52 = trunc i64 %48 to i16
  %53 = trunc i64 %49 to i16
  %54 = trunc i64 %50 to i16
  %55 = trunc i64 %51 to i16
  %56 = bitcast i64* %2 to [4 x i16]*
  %57 = bitcast i64* %2 to i16*
  store i16 %52, i16* %57, align 1
  %58 = getelementptr inbounds [4 x i16], [4 x i16]* %56, i64 0, i64 1
  store i16 %53, i16* %58, align 1
  %59 = getelementptr inbounds [4 x i16], [4 x i16]* %56, i64 0, i64 2
  store i16 %54, i16* %59, align 1
  %60 = getelementptr inbounds [4 x i16], [4 x i16]* %56, i64 0, i64 3
  store i16 %55, i16* %60, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L5PSLLWI3VnWI8vec128_tE2VnIS2_E2InIhEEEP6MemoryS9_R5StateT_T0_T1_(%struct.Memory* readnone returned, %struct.State* nocapture readnone dereferenceable(3376), i8* nocapture, i8* nocapture readonly, i64)  {
  %6 = alloca <2 x i64>, align 16
  %7 = bitcast <2 x i64>* %6 to { i64, i64 }*
  %8 = alloca { i64, i64 }, align 8
  %9 = bitcast { i64, i64 }* %8 to %struct.uint16v8_t*
  %10 = bitcast { i64, i64 }* %8 to i8*
  call void @llvm.lifetime.start(i64 16, i8* nonnull %10) 
  %11 = bitcast i8* %3 to i64*
  %12 = load i64, i64* %11, align 1
  %13 = getelementptr inbounds i8, i8* %3, i64 8
  %14 = bitcast i8* %13 to i64*
  %15 = load i64, i64* %14, align 1
  %16 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %8, i64 0, i32 0
  store i64 %12, i64* %16, align 8
  %17 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %8, i64 0, i32 1
  store i64 %15, i64* %17, align 8
  %18 = trunc i64 %4 to i8
  %19 = icmp ugt i8 %18, 15
  %20 = and i64 %4, 255
  %21 = bitcast <2 x i64>* %6 to i8*
  %22 = getelementptr inbounds <2 x i64>, <2 x i64>* %6, i64 0, i64 0
  %23 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %7, i64 0, i32 1
  %24 = bitcast <2 x i64>* %6 to [8 x i16]*
  br i1 %19, label %77, label %25

; <label>:25:                                     ; preds = %5
  %26 = shl i64 %12, 48
  %27 = ashr exact i64 %26, 48
  %28 = shl i64 %27, %20
  %29 = trunc i64 %28 to i16
  call void @llvm.lifetime.start(i64 16, i8* nonnull %21)
  store <2 x i64> zeroinitializer, <2 x i64>* %6, align 16
  %30 = bitcast <2 x i64>* %6 to i16*
  store i16 %29, i16* %30, align 16
  %31 = load i64, i64* %22, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %21)
  %32 = shl i64 %12, 32
  %33 = ashr i64 %32, 48
  %34 = shl i64 %33, %20
  %35 = trunc i64 %34 to i16
  call void @llvm.lifetime.start(i64 16, i8* nonnull %21)
  store i64 %31, i64* %22, align 16
  store i64 0, i64* %23, align 8
  %36 = getelementptr inbounds [8 x i16], [8 x i16]* %24, i64 0, i64 1
  store i16 %35, i16* %36, align 2
  %37 = load i64, i64* %22, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %21)
  %38 = shl i64 %12, 16
  %39 = ashr i64 %38, 48
  %40 = shl i64 %39, %20
  %41 = trunc i64 %40 to i16
  call void @llvm.lifetime.start(i64 16, i8* nonnull %21)
  store i64 %37, i64* %22, align 16
  store i64 0, i64* %23, align 8
  %42 = getelementptr inbounds [8 x i16], [8 x i16]* %24, i64 0, i64 2
  store i16 %41, i16* %42, align 4
  %43 = load i64, i64* %22, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %21)
  %44 = ashr i64 %12, 48
  %45 = shl i64 %44, %20
  %46 = trunc i64 %45 to i16
  call void @llvm.lifetime.start(i64 16, i8* nonnull %21)
  store i64 %43, i64* %22, align 16
  store i64 0, i64* %23, align 8
  %47 = getelementptr inbounds [8 x i16], [8 x i16]* %24, i64 0, i64 3
  store i16 %46, i16* %47, align 2
  %48 = load i64, i64* %22, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %21)
  %49 = shl i64 %15, 48
  %50 = ashr exact i64 %49, 48
  %51 = shl i64 %50, %20
  %52 = trunc i64 %51 to i16
  call void @llvm.lifetime.start(i64 16, i8* nonnull %21)
  store i64 %48, i64* %22, align 16
  store i64 0, i64* %23, align 8
  %53 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %7, i64 0, i32 1
  %54 = bitcast i64* %53 to i16*
  store i16 %52, i16* %54, align 8
  %55 = load i64, i64* %23, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %21)
  %56 = getelementptr inbounds %struct.uint16v8_t, %struct.uint16v8_t* %9, i64 0, i32 0, i64 5
  %57 = load i16, i16* %56, align 2
  %58 = sext i16 %57 to i64
  %59 = shl i64 %58, %20
  %60 = trunc i64 %59 to i16
  call void @llvm.lifetime.start(i64 16, i8* nonnull %21)
  store i64 %48, i64* %22, align 16
  store i64 %55, i64* %23, align 8
  %61 = getelementptr inbounds [8 x i16], [8 x i16]* %24, i64 0, i64 5
  store i16 %60, i16* %61, align 2
  %62 = load i64, i64* %23, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %21)
  %63 = getelementptr inbounds %struct.uint16v8_t, %struct.uint16v8_t* %9, i64 0, i32 0, i64 6
  %64 = load i16, i16* %63, align 4
  %65 = sext i16 %64 to i64
  %66 = shl i64 %65, %20
  %67 = trunc i64 %66 to i16
  call void @llvm.lifetime.start(i64 16, i8* nonnull %21)
  store i64 %48, i64* %22, align 16
  store i64 %62, i64* %23, align 8
  %68 = getelementptr inbounds [8 x i16], [8 x i16]* %24, i64 0, i64 6
  store i16 %67, i16* %68, align 4
  %69 = load i64, i64* %23, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %21)
  %70 = getelementptr inbounds %struct.uint16v8_t, %struct.uint16v8_t* %9, i64 0, i32 0, i64 7
  %71 = load i16, i16* %70, align 2
  %72 = sext i16 %71 to i64
  %73 = shl i64 %72, %20
  %74 = trunc i64 %73 to i16
  call void @llvm.lifetime.start(i64 16, i8* nonnull %21)
  store i64 %48, i64* %22, align 16
  store i64 %69, i64* %23, align 8
  %75 = getelementptr inbounds [8 x i16], [8 x i16]* %24, i64 0, i64 7
  store i16 %74, i16* %75, align 2
  %76 = load i64, i64* %23, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %21)
  br label %95

; <label>:77:                                     ; preds = %5
  call void @llvm.lifetime.start(i64 16, i8* nonnull %21)
  store <2 x i64> zeroinitializer, <2 x i64>* %6, align 16
  %78 = bitcast <2 x i64>* %6 to i16*
  store i16 0, i16* %78, align 16
  %79 = load i64, i64* %22, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %21)
  call void @llvm.lifetime.start(i64 16, i8* nonnull %21)
  store i64 %79, i64* %22, align 16
  store i64 0, i64* %23, align 8
  %80 = getelementptr inbounds [8 x i16], [8 x i16]* %24, i64 0, i64 1
  store i16 0, i16* %80, align 2
  %81 = load i64, i64* %22, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %21)
  call void @llvm.lifetime.start(i64 16, i8* nonnull %21)
  store i64 %81, i64* %22, align 16
  store i64 0, i64* %23, align 8
  %82 = getelementptr inbounds [8 x i16], [8 x i16]* %24, i64 0, i64 2
  store i16 0, i16* %82, align 4
  %83 = load i64, i64* %22, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %21)
  call void @llvm.lifetime.start(i64 16, i8* nonnull %21)
  store i64 %83, i64* %22, align 16
  store i64 0, i64* %23, align 8
  %84 = getelementptr inbounds [8 x i16], [8 x i16]* %24, i64 0, i64 3
  store i16 0, i16* %84, align 2
  %85 = load i64, i64* %22, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %21)
  call void @llvm.lifetime.start(i64 16, i8* nonnull %21)
  store i64 %85, i64* %22, align 16
  store i64 0, i64* %23, align 8
  %86 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %7, i64 0, i32 1
  %87 = bitcast i64* %86 to i16*
  store i16 0, i16* %87, align 8
  %88 = load i64, i64* %23, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %21)
  call void @llvm.lifetime.start(i64 16, i8* nonnull %21)
  store i64 %85, i64* %22, align 16
  store i64 %88, i64* %23, align 8
  %89 = getelementptr inbounds [8 x i16], [8 x i16]* %24, i64 0, i64 5
  store i16 0, i16* %89, align 2
  %90 = load i64, i64* %23, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %21)
  call void @llvm.lifetime.start(i64 16, i8* nonnull %21)
  store i64 %85, i64* %22, align 16
  store i64 %90, i64* %23, align 8
  %91 = getelementptr inbounds [8 x i16], [8 x i16]* %24, i64 0, i64 6
  store i16 0, i16* %91, align 4
  %92 = load i64, i64* %23, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %21)
  call void @llvm.lifetime.start(i64 16, i8* nonnull %21)
  store i64 %85, i64* %22, align 16
  store i64 %92, i64* %23, align 8
  %93 = getelementptr inbounds [8 x i16], [8 x i16]* %24, i64 0, i64 7
  store i16 0, i16* %93, align 2
  %94 = load i64, i64* %23, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %21)
  br label %95

; <label>:95:                                     ; preds = %77, %25
  %96 = phi i64 [ %85, %77 ], [ %48, %25 ]
  %97 = phi i64 [ %94, %77 ], [ %76, %25 ]
  %98 = lshr i64 %96, 16
  %99 = lshr i64 %96, 32
  %100 = lshr i64 %96, 48
  %101 = trunc i64 %96 to i16
  %102 = trunc i64 %98 to i16
  %103 = trunc i64 %99 to i16
  %104 = trunc i64 %100 to i16
  %105 = bitcast i8* %2 to i16*
  store i16 %101, i16* %105, align 1
  %106 = getelementptr inbounds i8, i8* %2, i64 2
  %107 = bitcast i8* %106 to i16*
  store i16 %102, i16* %107, align 1
  %108 = getelementptr inbounds i8, i8* %2, i64 4
  %109 = bitcast i8* %108 to i16*
  store i16 %103, i16* %109, align 1
  %110 = getelementptr inbounds i8, i8* %2, i64 6
  %111 = bitcast i8* %110 to i16*
  store i16 %104, i16* %111, align 1
  %112 = trunc i64 %97 to i16
  %113 = getelementptr inbounds i8, i8* %2, i64 8
  %114 = bitcast i8* %113 to i16*
  store i16 %112, i16* %114, align 1
  %115 = lshr i64 %97, 16
  %116 = trunc i64 %115 to i16
  %117 = getelementptr inbounds i8, i8* %2, i64 10
  %118 = bitcast i8* %117 to i16*
  store i16 %116, i16* %118, align 1
  %119 = lshr i64 %97, 32
  %120 = trunc i64 %119 to i16
  %121 = getelementptr inbounds i8, i8* %2, i64 12
  %122 = bitcast i8* %121 to i16*
  store i16 %120, i16* %122, align 1
  %123 = lshr i64 %97, 48
  %124 = trunc i64 %123 to i16
  %125 = getelementptr inbounds i8, i8* %2, i64 14
  %126 = bitcast i8* %125 to i16*
  store i16 %124, i16* %126, align 1
  call void @llvm.lifetime.end(i64 16, i8* nonnull %10) 
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L7PSLLW_VI3VnWI8vec128_tE2VnIS2_ES5_EEP6MemoryS7_R5StateT_T0_T1_(%struct.Memory* readnone returned, %struct.State* nocapture readnone dereferenceable(3376), i8* nocapture, i8* nocapture readonly, i8* nocapture readonly)  {
  %6 = alloca <2 x i64>, align 16
  %7 = bitcast <2 x i64>* %6 to { i64, i64 }*
  %8 = alloca { i64, i64 }, align 8
  %9 = bitcast { i64, i64 }* %8 to %struct.uint16v8_t*
  %10 = bitcast { i64, i64 }* %8 to i8*
  call void @llvm.lifetime.start(i64 16, i8* nonnull %10) 
  %11 = bitcast i8* %3 to i64*
  %12 = load i64, i64* %11, align 1
  %13 = getelementptr inbounds i8, i8* %3, i64 8
  %14 = bitcast i8* %13 to i64*
  %15 = load i64, i64* %14, align 1
  %16 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %8, i64 0, i32 0
  store i64 %12, i64* %16, align 8
  %17 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %8, i64 0, i32 1
  store i64 %15, i64* %17, align 8
  %18 = bitcast i8* %4 to i64*
  %19 = load i64, i64* %18, align 1
  %20 = icmp ugt i64 %19, 15
  %21 = shl i64 %19, 48
  %22 = ashr exact i64 %21, 48
  %23 = bitcast <2 x i64>* %6 to i8*
  %24 = getelementptr inbounds <2 x i64>, <2 x i64>* %6, i64 0, i64 0
  %25 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %7, i64 0, i32 1
  %26 = bitcast <2 x i64>* %6 to [8 x i16]*
  br i1 %20, label %79, label %27

; <label>:27:                                     ; preds = %5
  %28 = shl i64 %12, 48
  %29 = ashr exact i64 %28, 48
  %30 = shl i64 %29, %22
  %31 = trunc i64 %30 to i16
  call void @llvm.lifetime.start(i64 16, i8* nonnull %23)
  store <2 x i64> zeroinitializer, <2 x i64>* %6, align 16
  %32 = bitcast <2 x i64>* %6 to i16*
  store i16 %31, i16* %32, align 16
  %33 = load i64, i64* %24, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %23)
  %34 = shl i64 %12, 32
  %35 = ashr i64 %34, 48
  %36 = shl i64 %35, %22
  %37 = trunc i64 %36 to i16
  call void @llvm.lifetime.start(i64 16, i8* nonnull %23)
  store i64 %33, i64* %24, align 16
  store i64 0, i64* %25, align 8
  %38 = getelementptr inbounds [8 x i16], [8 x i16]* %26, i64 0, i64 1
  store i16 %37, i16* %38, align 2
  %39 = load i64, i64* %24, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %23)
  %40 = shl i64 %12, 16
  %41 = ashr i64 %40, 48
  %42 = shl i64 %41, %22
  %43 = trunc i64 %42 to i16
  call void @llvm.lifetime.start(i64 16, i8* nonnull %23)
  store i64 %39, i64* %24, align 16
  store i64 0, i64* %25, align 8
  %44 = getelementptr inbounds [8 x i16], [8 x i16]* %26, i64 0, i64 2
  store i16 %43, i16* %44, align 4
  %45 = load i64, i64* %24, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %23)
  %46 = ashr i64 %12, 48
  %47 = shl i64 %46, %22
  %48 = trunc i64 %47 to i16
  call void @llvm.lifetime.start(i64 16, i8* nonnull %23)
  store i64 %45, i64* %24, align 16
  store i64 0, i64* %25, align 8
  %49 = getelementptr inbounds [8 x i16], [8 x i16]* %26, i64 0, i64 3
  store i16 %48, i16* %49, align 2
  %50 = load i64, i64* %24, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %23)
  %51 = shl i64 %15, 48
  %52 = ashr exact i64 %51, 48
  %53 = shl i64 %52, %22
  %54 = trunc i64 %53 to i16
  call void @llvm.lifetime.start(i64 16, i8* nonnull %23)
  store i64 %50, i64* %24, align 16
  store i64 0, i64* %25, align 8
  %55 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %7, i64 0, i32 1
  %56 = bitcast i64* %55 to i16*
  store i16 %54, i16* %56, align 8
  %57 = load i64, i64* %25, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %23)
  %58 = getelementptr inbounds %struct.uint16v8_t, %struct.uint16v8_t* %9, i64 0, i32 0, i64 5
  %59 = load i16, i16* %58, align 2
  %60 = sext i16 %59 to i64
  %61 = shl i64 %60, %22
  %62 = trunc i64 %61 to i16
  call void @llvm.lifetime.start(i64 16, i8* nonnull %23)
  store i64 %50, i64* %24, align 16
  store i64 %57, i64* %25, align 8
  %63 = getelementptr inbounds [8 x i16], [8 x i16]* %26, i64 0, i64 5
  store i16 %62, i16* %63, align 2
  %64 = load i64, i64* %25, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %23)
  %65 = getelementptr inbounds %struct.uint16v8_t, %struct.uint16v8_t* %9, i64 0, i32 0, i64 6
  %66 = load i16, i16* %65, align 4
  %67 = sext i16 %66 to i64
  %68 = shl i64 %67, %22
  %69 = trunc i64 %68 to i16
  call void @llvm.lifetime.start(i64 16, i8* nonnull %23)
  store i64 %50, i64* %24, align 16
  store i64 %64, i64* %25, align 8
  %70 = getelementptr inbounds [8 x i16], [8 x i16]* %26, i64 0, i64 6
  store i16 %69, i16* %70, align 4
  %71 = load i64, i64* %25, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %23)
  %72 = getelementptr inbounds %struct.uint16v8_t, %struct.uint16v8_t* %9, i64 0, i32 0, i64 7
  %73 = load i16, i16* %72, align 2
  %74 = sext i16 %73 to i64
  %75 = shl i64 %74, %22
  %76 = trunc i64 %75 to i16
  call void @llvm.lifetime.start(i64 16, i8* nonnull %23)
  store i64 %50, i64* %24, align 16
  store i64 %71, i64* %25, align 8
  %77 = getelementptr inbounds [8 x i16], [8 x i16]* %26, i64 0, i64 7
  store i16 %76, i16* %77, align 2
  %78 = load i64, i64* %25, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %23)
  br label %97

; <label>:79:                                     ; preds = %5
  call void @llvm.lifetime.start(i64 16, i8* nonnull %23)
  store <2 x i64> zeroinitializer, <2 x i64>* %6, align 16
  %80 = bitcast <2 x i64>* %6 to i16*
  store i16 0, i16* %80, align 16
  %81 = load i64, i64* %24, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %23)
  call void @llvm.lifetime.start(i64 16, i8* nonnull %23)
  store i64 %81, i64* %24, align 16
  store i64 0, i64* %25, align 8
  %82 = getelementptr inbounds [8 x i16], [8 x i16]* %26, i64 0, i64 1
  store i16 0, i16* %82, align 2
  %83 = load i64, i64* %24, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %23)
  call void @llvm.lifetime.start(i64 16, i8* nonnull %23)
  store i64 %83, i64* %24, align 16
  store i64 0, i64* %25, align 8
  %84 = getelementptr inbounds [8 x i16], [8 x i16]* %26, i64 0, i64 2
  store i16 0, i16* %84, align 4
  %85 = load i64, i64* %24, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %23)
  call void @llvm.lifetime.start(i64 16, i8* nonnull %23)
  store i64 %85, i64* %24, align 16
  store i64 0, i64* %25, align 8
  %86 = getelementptr inbounds [8 x i16], [8 x i16]* %26, i64 0, i64 3
  store i16 0, i16* %86, align 2
  %87 = load i64, i64* %24, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %23)
  call void @llvm.lifetime.start(i64 16, i8* nonnull %23)
  store i64 %87, i64* %24, align 16
  store i64 0, i64* %25, align 8
  %88 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %7, i64 0, i32 1
  %89 = bitcast i64* %88 to i16*
  store i16 0, i16* %89, align 8
  %90 = load i64, i64* %25, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %23)
  call void @llvm.lifetime.start(i64 16, i8* nonnull %23)
  store i64 %87, i64* %24, align 16
  store i64 %90, i64* %25, align 8
  %91 = getelementptr inbounds [8 x i16], [8 x i16]* %26, i64 0, i64 5
  store i16 0, i16* %91, align 2
  %92 = load i64, i64* %25, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %23)
  call void @llvm.lifetime.start(i64 16, i8* nonnull %23)
  store i64 %87, i64* %24, align 16
  store i64 %92, i64* %25, align 8
  %93 = getelementptr inbounds [8 x i16], [8 x i16]* %26, i64 0, i64 6
  store i16 0, i16* %93, align 4
  %94 = load i64, i64* %25, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %23)
  call void @llvm.lifetime.start(i64 16, i8* nonnull %23)
  store i64 %87, i64* %24, align 16
  store i64 %94, i64* %25, align 8
  %95 = getelementptr inbounds [8 x i16], [8 x i16]* %26, i64 0, i64 7
  store i16 0, i16* %95, align 2
  %96 = load i64, i64* %25, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %23)
  br label %97

; <label>:97:                                     ; preds = %79, %27
  %98 = phi i64 [ %87, %79 ], [ %50, %27 ]
  %99 = phi i64 [ %96, %79 ], [ %78, %27 ]
  %100 = lshr i64 %98, 16
  %101 = lshr i64 %98, 32
  %102 = lshr i64 %98, 48
  %103 = trunc i64 %98 to i16
  %104 = trunc i64 %100 to i16
  %105 = trunc i64 %101 to i16
  %106 = trunc i64 %102 to i16
  %107 = bitcast i8* %2 to i16*
  store i16 %103, i16* %107, align 1
  %108 = getelementptr inbounds i8, i8* %2, i64 2
  %109 = bitcast i8* %108 to i16*
  store i16 %104, i16* %109, align 1
  %110 = getelementptr inbounds i8, i8* %2, i64 4
  %111 = bitcast i8* %110 to i16*
  store i16 %105, i16* %111, align 1
  %112 = getelementptr inbounds i8, i8* %2, i64 6
  %113 = bitcast i8* %112 to i16*
  store i16 %106, i16* %113, align 1
  %114 = trunc i64 %99 to i16
  %115 = getelementptr inbounds i8, i8* %2, i64 8
  %116 = bitcast i8* %115 to i16*
  store i16 %114, i16* %116, align 1
  %117 = lshr i64 %99, 16
  %118 = trunc i64 %117 to i16
  %119 = getelementptr inbounds i8, i8* %2, i64 10
  %120 = bitcast i8* %119 to i16*
  store i16 %118, i16* %120, align 1
  %121 = lshr i64 %99, 32
  %122 = trunc i64 %121 to i16
  %123 = getelementptr inbounds i8, i8* %2, i64 12
  %124 = bitcast i8* %123 to i16*
  store i16 %122, i16* %124, align 1
  %125 = lshr i64 %99, 48
  %126 = trunc i64 %125 to i16
  %127 = getelementptr inbounds i8, i8* %2, i64 14
  %128 = bitcast i8* %127 to i16*
  store i16 %126, i16* %128, align 1
  call void @llvm.lifetime.end(i64 16, i8* nonnull %10) 
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L7PSLLW_VI3VnWI8vec128_tE2VnIS2_E3MVnIS2_EEEP6MemoryS9_R5StateT_T0_T1_(%struct.Memory* returned, %struct.State* nocapture readnone dereferenceable(3376), i8* nocapture, i8* nocapture readonly, i64)  {
  %6 = alloca <2 x i64>, align 16
  %7 = bitcast <2 x i64>* %6 to { i64, i64 }*
  %8 = alloca { i64, i64 }, align 8
  %9 = bitcast { i64, i64 }* %8 to %struct.uint16v8_t*
  %10 = bitcast { i64, i64 }* %8 to i8*
  call void @llvm.lifetime.start(i64 16, i8* nonnull %10) 
  %11 = bitcast i8* %3 to i64*
  %12 = load i64, i64* %11, align 1
  %13 = getelementptr inbounds i8, i8* %3, i64 8
  %14 = bitcast i8* %13 to i64*
  %15 = load i64, i64* %14, align 1
  %16 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %8, i64 0, i32 0
  store i64 %12, i64* %16, align 8
  %17 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %8, i64 0, i32 1
  store i64 %15, i64* %17, align 8
  %18 = inttoptr i64 %4 to i64*
  %19 = load i64, i64* %18
  %20 = icmp ugt i64 %19, 15
  %21 = shl i64 %19, 48
  %22 = ashr exact i64 %21, 48
  %23 = bitcast <2 x i64>* %6 to i8*
  %24 = getelementptr inbounds <2 x i64>, <2 x i64>* %6, i64 0, i64 0
  %25 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %7, i64 0, i32 1
  %26 = bitcast <2 x i64>* %6 to [8 x i16]*
  br i1 %20, label %79, label %27

; <label>:27:                                     ; preds = %5
  %28 = shl i64 %12, 48
  %29 = ashr exact i64 %28, 48
  %30 = shl i64 %29, %22
  %31 = trunc i64 %30 to i16
  call void @llvm.lifetime.start(i64 16, i8* nonnull %23)
  store <2 x i64> zeroinitializer, <2 x i64>* %6, align 16
  %32 = bitcast <2 x i64>* %6 to i16*
  store i16 %31, i16* %32, align 16
  %33 = load i64, i64* %24, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %23)
  %34 = shl i64 %12, 32
  %35 = ashr i64 %34, 48
  %36 = shl i64 %35, %22
  %37 = trunc i64 %36 to i16
  call void @llvm.lifetime.start(i64 16, i8* nonnull %23)
  store i64 %33, i64* %24, align 16
  store i64 0, i64* %25, align 8
  %38 = getelementptr inbounds [8 x i16], [8 x i16]* %26, i64 0, i64 1
  store i16 %37, i16* %38, align 2
  %39 = load i64, i64* %24, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %23)
  %40 = shl i64 %12, 16
  %41 = ashr i64 %40, 48
  %42 = shl i64 %41, %22
  %43 = trunc i64 %42 to i16
  call void @llvm.lifetime.start(i64 16, i8* nonnull %23)
  store i64 %39, i64* %24, align 16
  store i64 0, i64* %25, align 8
  %44 = getelementptr inbounds [8 x i16], [8 x i16]* %26, i64 0, i64 2
  store i16 %43, i16* %44, align 4
  %45 = load i64, i64* %24, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %23)
  %46 = ashr i64 %12, 48
  %47 = shl i64 %46, %22
  %48 = trunc i64 %47 to i16
  call void @llvm.lifetime.start(i64 16, i8* nonnull %23)
  store i64 %45, i64* %24, align 16
  store i64 0, i64* %25, align 8
  %49 = getelementptr inbounds [8 x i16], [8 x i16]* %26, i64 0, i64 3
  store i16 %48, i16* %49, align 2
  %50 = load i64, i64* %24, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %23)
  %51 = shl i64 %15, 48
  %52 = ashr exact i64 %51, 48
  %53 = shl i64 %52, %22
  %54 = trunc i64 %53 to i16
  call void @llvm.lifetime.start(i64 16, i8* nonnull %23)
  store i64 %50, i64* %24, align 16
  store i64 0, i64* %25, align 8
  %55 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %7, i64 0, i32 1
  %56 = bitcast i64* %55 to i16*
  store i16 %54, i16* %56, align 8
  %57 = load i64, i64* %25, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %23)
  %58 = getelementptr inbounds %struct.uint16v8_t, %struct.uint16v8_t* %9, i64 0, i32 0, i64 5
  %59 = load i16, i16* %58, align 2
  %60 = sext i16 %59 to i64
  %61 = shl i64 %60, %22
  %62 = trunc i64 %61 to i16
  call void @llvm.lifetime.start(i64 16, i8* nonnull %23)
  store i64 %50, i64* %24, align 16
  store i64 %57, i64* %25, align 8
  %63 = getelementptr inbounds [8 x i16], [8 x i16]* %26, i64 0, i64 5
  store i16 %62, i16* %63, align 2
  %64 = load i64, i64* %25, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %23)
  %65 = getelementptr inbounds %struct.uint16v8_t, %struct.uint16v8_t* %9, i64 0, i32 0, i64 6
  %66 = load i16, i16* %65, align 4
  %67 = sext i16 %66 to i64
  %68 = shl i64 %67, %22
  %69 = trunc i64 %68 to i16
  call void @llvm.lifetime.start(i64 16, i8* nonnull %23)
  store i64 %50, i64* %24, align 16
  store i64 %64, i64* %25, align 8
  %70 = getelementptr inbounds [8 x i16], [8 x i16]* %26, i64 0, i64 6
  store i16 %69, i16* %70, align 4
  %71 = load i64, i64* %25, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %23)
  %72 = getelementptr inbounds %struct.uint16v8_t, %struct.uint16v8_t* %9, i64 0, i32 0, i64 7
  %73 = load i16, i16* %72, align 2
  %74 = sext i16 %73 to i64
  %75 = shl i64 %74, %22
  %76 = trunc i64 %75 to i16
  call void @llvm.lifetime.start(i64 16, i8* nonnull %23)
  store i64 %50, i64* %24, align 16
  store i64 %71, i64* %25, align 8
  %77 = getelementptr inbounds [8 x i16], [8 x i16]* %26, i64 0, i64 7
  store i16 %76, i16* %77, align 2
  %78 = load i64, i64* %25, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %23)
  br label %97

; <label>:79:                                     ; preds = %5
  call void @llvm.lifetime.start(i64 16, i8* nonnull %23)
  store <2 x i64> zeroinitializer, <2 x i64>* %6, align 16
  %80 = bitcast <2 x i64>* %6 to i16*
  store i16 0, i16* %80, align 16
  %81 = load i64, i64* %24, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %23)
  call void @llvm.lifetime.start(i64 16, i8* nonnull %23)
  store i64 %81, i64* %24, align 16
  store i64 0, i64* %25, align 8
  %82 = getelementptr inbounds [8 x i16], [8 x i16]* %26, i64 0, i64 1
  store i16 0, i16* %82, align 2
  %83 = load i64, i64* %24, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %23)
  call void @llvm.lifetime.start(i64 16, i8* nonnull %23)
  store i64 %83, i64* %24, align 16
  store i64 0, i64* %25, align 8
  %84 = getelementptr inbounds [8 x i16], [8 x i16]* %26, i64 0, i64 2
  store i16 0, i16* %84, align 4
  %85 = load i64, i64* %24, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %23)
  call void @llvm.lifetime.start(i64 16, i8* nonnull %23)
  store i64 %85, i64* %24, align 16
  store i64 0, i64* %25, align 8
  %86 = getelementptr inbounds [8 x i16], [8 x i16]* %26, i64 0, i64 3
  store i16 0, i16* %86, align 2
  %87 = load i64, i64* %24, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %23)
  call void @llvm.lifetime.start(i64 16, i8* nonnull %23)
  store i64 %87, i64* %24, align 16
  store i64 0, i64* %25, align 8
  %88 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %7, i64 0, i32 1
  %89 = bitcast i64* %88 to i16*
  store i16 0, i16* %89, align 8
  %90 = load i64, i64* %25, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %23)
  call void @llvm.lifetime.start(i64 16, i8* nonnull %23)
  store i64 %87, i64* %24, align 16
  store i64 %90, i64* %25, align 8
  %91 = getelementptr inbounds [8 x i16], [8 x i16]* %26, i64 0, i64 5
  store i16 0, i16* %91, align 2
  %92 = load i64, i64* %25, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %23)
  call void @llvm.lifetime.start(i64 16, i8* nonnull %23)
  store i64 %87, i64* %24, align 16
  store i64 %92, i64* %25, align 8
  %93 = getelementptr inbounds [8 x i16], [8 x i16]* %26, i64 0, i64 6
  store i16 0, i16* %93, align 4
  %94 = load i64, i64* %25, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %23)
  call void @llvm.lifetime.start(i64 16, i8* nonnull %23)
  store i64 %87, i64* %24, align 16
  store i64 %94, i64* %25, align 8
  %95 = getelementptr inbounds [8 x i16], [8 x i16]* %26, i64 0, i64 7
  store i16 0, i16* %95, align 2
  %96 = load i64, i64* %25, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %23)
  br label %97

; <label>:97:                                     ; preds = %79, %27
  %98 = phi i64 [ %87, %79 ], [ %50, %27 ]
  %99 = phi i64 [ %96, %79 ], [ %78, %27 ]
  %100 = lshr i64 %98, 16
  %101 = lshr i64 %98, 32
  %102 = lshr i64 %98, 48
  %103 = trunc i64 %98 to i16
  %104 = trunc i64 %100 to i16
  %105 = trunc i64 %101 to i16
  %106 = trunc i64 %102 to i16
  %107 = bitcast i8* %2 to i16*
  store i16 %103, i16* %107, align 1
  %108 = getelementptr inbounds i8, i8* %2, i64 2
  %109 = bitcast i8* %108 to i16*
  store i16 %104, i16* %109, align 1
  %110 = getelementptr inbounds i8, i8* %2, i64 4
  %111 = bitcast i8* %110 to i16*
  store i16 %105, i16* %111, align 1
  %112 = getelementptr inbounds i8, i8* %2, i64 6
  %113 = bitcast i8* %112 to i16*
  store i16 %106, i16* %113, align 1
  %114 = trunc i64 %99 to i16
  %115 = getelementptr inbounds i8, i8* %2, i64 8
  %116 = bitcast i8* %115 to i16*
  store i16 %114, i16* %116, align 1
  %117 = lshr i64 %99, 16
  %118 = trunc i64 %117 to i16
  %119 = getelementptr inbounds i8, i8* %2, i64 10
  %120 = bitcast i8* %119 to i16*
  store i16 %118, i16* %120, align 1
  %121 = lshr i64 %99, 32
  %122 = trunc i64 %121 to i16
  %123 = getelementptr inbounds i8, i8* %2, i64 12
  %124 = bitcast i8* %123 to i16*
  store i16 %122, i16* %124, align 1
  %125 = lshr i64 %99, 48
  %126 = trunc i64 %125 to i16
  %127 = getelementptr inbounds i8, i8* %2, i64 14
  %128 = bitcast i8* %127 to i16*
  store i16 %126, i16* %128, align 1
  call void @llvm.lifetime.end(i64 16, i8* nonnull %10) 
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L5PSLLDI4RVnWI7vec64_tE3RVnIS2_E2InIhEEEP6MemoryS9_R5StateT_T0_T1_(%struct.Memory* readnone returned, %struct.State* nocapture readnone dereferenceable(3376), i64* nocapture, i64, i64)  {
  %6 = alloca i64, align 8
  %7 = trunc i64 %4 to i8
  %8 = icmp ugt i8 %7, 31
  %9 = and i64 %4, 255
  %10 = bitcast i64* %6 to i8*
  %11 = bitcast i64* %6 to [2 x i32]*
  br i1 %8, label %24, label %12

; <label>:12:                                     ; preds = %5
  %13 = shl i64 %3, 32
  %14 = ashr exact i64 %13, 32
  %15 = shl i64 %14, %9
  %16 = trunc i64 %15 to i32
  call void @llvm.lifetime.start(i64 8, i8* nonnull %10)
  store i64 0, i64* %6, align 8
  %17 = bitcast i64* %6 to i32*
  store i32 %16, i32* %17, align 8
  %18 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %10)
  %19 = ashr i64 %3, 32
  %20 = shl i64 %19, %9
  %21 = trunc i64 %20 to i32
  call void @llvm.lifetime.start(i64 8, i8* nonnull %10)
  store i64 %18, i64* %6, align 8
  %22 = getelementptr inbounds [2 x i32], [2 x i32]* %11, i64 0, i64 1
  store i32 %21, i32* %22, align 4
  %23 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %10)
  br label %29

; <label>:24:                                     ; preds = %5
  call void @llvm.lifetime.start(i64 8, i8* nonnull %10)
  store i64 0, i64* %6, align 8
  %25 = bitcast i64* %6 to i32*
  store i32 0, i32* %25, align 8
  %26 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %10)
  call void @llvm.lifetime.start(i64 8, i8* nonnull %10)
  store i64 %26, i64* %6, align 8
  %27 = getelementptr inbounds [2 x i32], [2 x i32]* %11, i64 0, i64 1
  store i32 0, i32* %27, align 4
  %28 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %10)
  br label %29

; <label>:29:                                     ; preds = %24, %12
  %30 = phi i64 [ %28, %24 ], [ %23, %12 ]
  %31 = lshr i64 %30, 32
  %32 = trunc i64 %30 to i32
  %33 = trunc i64 %31 to i32
  %34 = bitcast i64* %2 to [2 x i32]*
  %35 = bitcast i64* %2 to i32*
  store i32 %32, i32* %35, align 1
  %36 = getelementptr inbounds [2 x i32], [2 x i32]* %34, i64 0, i64 1
  store i32 %33, i32* %36, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L5PSLLDI4RVnWI7vec64_tE3RVnIS2_E2RnImEEEP6MemoryS9_R5StateT_T0_T1_(%struct.Memory* readnone returned, %struct.State* nocapture readnone dereferenceable(3376), i64* nocapture, i64, i64)  {
  %6 = alloca i64, align 8
  %7 = icmp ugt i64 %4, 31
  %8 = shl i64 %4, 32
  %9 = ashr exact i64 %8, 32
  %10 = bitcast i64* %6 to i8*
  %11 = bitcast i64* %6 to [2 x i32]*
  br i1 %7, label %24, label %12

; <label>:12:                                     ; preds = %5
  %13 = shl i64 %3, 32
  %14 = ashr exact i64 %13, 32
  %15 = shl i64 %14, %9
  %16 = trunc i64 %15 to i32
  call void @llvm.lifetime.start(i64 8, i8* nonnull %10)
  store i64 0, i64* %6, align 8
  %17 = bitcast i64* %6 to i32*
  store i32 %16, i32* %17, align 8
  %18 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %10)
  %19 = ashr i64 %3, 32
  %20 = shl i64 %19, %9
  %21 = trunc i64 %20 to i32
  call void @llvm.lifetime.start(i64 8, i8* nonnull %10)
  store i64 %18, i64* %6, align 8
  %22 = getelementptr inbounds [2 x i32], [2 x i32]* %11, i64 0, i64 1
  store i32 %21, i32* %22, align 4
  %23 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %10)
  br label %29

; <label>:24:                                     ; preds = %5
  call void @llvm.lifetime.start(i64 8, i8* nonnull %10)
  store i64 0, i64* %6, align 8
  %25 = bitcast i64* %6 to i32*
  store i32 0, i32* %25, align 8
  %26 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %10)
  call void @llvm.lifetime.start(i64 8, i8* nonnull %10)
  store i64 %26, i64* %6, align 8
  %27 = getelementptr inbounds [2 x i32], [2 x i32]* %11, i64 0, i64 1
  store i32 0, i32* %27, align 4
  %28 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %10)
  br label %29

; <label>:29:                                     ; preds = %24, %12
  %30 = phi i64 [ %28, %24 ], [ %23, %12 ]
  %31 = lshr i64 %30, 32
  %32 = trunc i64 %30 to i32
  %33 = trunc i64 %31 to i32
  %34 = bitcast i64* %2 to [2 x i32]*
  %35 = bitcast i64* %2 to i32*
  store i32 %32, i32* %35, align 1
  %36 = getelementptr inbounds [2 x i32], [2 x i32]* %34, i64 0, i64 1
  store i32 %33, i32* %36, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L5PSLLDI4RVnWI7vec64_tE3RVnIS2_E2MnImEEEP6MemoryS9_R5StateT_T0_T1_(%struct.Memory*, %struct.State* nocapture readnone dereferenceable(3376), i64* nocapture, i64, i64)  {
  %6 = alloca i64, align 8
  %7 = inttoptr i64 %4 to i64*
  %8 = load i64, i64* %7
  %9 = icmp ugt i64 %8, 31
  %10 = shl i64 %8, 32
  %11 = ashr exact i64 %10, 32
  %12 = bitcast i64* %6 to i8*
  %13 = bitcast i64* %6 to [2 x i32]*
  br i1 %9, label %26, label %14

; <label>:14:                                     ; preds = %5
  %15 = shl i64 %3, 32
  %16 = ashr exact i64 %15, 32
  %17 = shl i64 %16, %11
  %18 = trunc i64 %17 to i32
  call void @llvm.lifetime.start(i64 8, i8* nonnull %12)
  store i64 0, i64* %6, align 8
  %19 = bitcast i64* %6 to i32*
  store i32 %18, i32* %19, align 8
  %20 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %12)
  %21 = ashr i64 %3, 32
  %22 = shl i64 %21, %11
  %23 = trunc i64 %22 to i32
  call void @llvm.lifetime.start(i64 8, i8* nonnull %12)
  store i64 %20, i64* %6, align 8
  %24 = getelementptr inbounds [2 x i32], [2 x i32]* %13, i64 0, i64 1
  store i32 %23, i32* %24, align 4
  %25 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %12)
  br label %31

; <label>:26:                                     ; preds = %5
  call void @llvm.lifetime.start(i64 8, i8* nonnull %12)
  store i64 0, i64* %6, align 8
  %27 = bitcast i64* %6 to i32*
  store i32 0, i32* %27, align 8
  %28 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %12)
  call void @llvm.lifetime.start(i64 8, i8* nonnull %12)
  store i64 %28, i64* %6, align 8
  %29 = getelementptr inbounds [2 x i32], [2 x i32]* %13, i64 0, i64 1
  store i32 0, i32* %29, align 4
  %30 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %12)
  br label %31

; <label>:31:                                     ; preds = %26, %14
  %32 = phi i64 [ %30, %26 ], [ %25, %14 ]
  %33 = lshr i64 %32, 32
  %34 = trunc i64 %32 to i32
  %35 = trunc i64 %33 to i32
  %36 = bitcast i64* %2 to [2 x i32]*
  %37 = bitcast i64* %2 to i32*
  store i32 %34, i32* %37, align 1
  %38 = getelementptr inbounds [2 x i32], [2 x i32]* %36, i64 0, i64 1
  store i32 %35, i32* %38, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L5PSLLDI3VnWI8vec128_tE2VnIS2_E2InIhEEEP6MemoryS9_R5StateT_T0_T1_(%struct.Memory* readnone returned, %struct.State* nocapture readnone dereferenceable(3376), i8* nocapture, i8* nocapture readonly, i64)  {
  %6 = alloca <2 x i64>, align 16
  %7 = bitcast <2 x i64>* %6 to { i64, i64 }*
  %8 = bitcast i8* %3 to i64*
  %9 = load i64, i64* %8, align 1
  %10 = getelementptr inbounds i8, i8* %3, i64 8
  %11 = bitcast i8* %10 to i64*
  %12 = load i64, i64* %11, align 1
  %13 = trunc i64 %4 to i8
  %14 = icmp ugt i8 %13, 31
  %15 = and i64 %4, 255
  %16 = bitcast <2 x i64>* %6 to i8*
  %17 = getelementptr inbounds <2 x i64>, <2 x i64>* %6, i64 0, i64 0
  %18 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %7, i64 0, i32 1
  %19 = bitcast <2 x i64>* %6 to [4 x i32]*
  br i1 %14, label %44, label %20

; <label>:20:                                     ; preds = %5
  %21 = shl i64 %9, 32
  %22 = ashr exact i64 %21, 32
  %23 = shl i64 %22, %15
  %24 = trunc i64 %23 to i32
  call void @llvm.lifetime.start(i64 16, i8* nonnull %16)
  store <2 x i64> zeroinitializer, <2 x i64>* %6, align 16
  %25 = bitcast <2 x i64>* %6 to i32*
  store i32 %24, i32* %25, align 16
  %26 = load i64, i64* %17, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %16)
  %27 = ashr i64 %9, 32
  %28 = shl i64 %27, %15
  %29 = trunc i64 %28 to i32
  call void @llvm.lifetime.start(i64 16, i8* nonnull %16)
  store i64 %26, i64* %17, align 16
  store i64 0, i64* %18, align 8
  %30 = getelementptr inbounds [4 x i32], [4 x i32]* %19, i64 0, i64 1
  store i32 %29, i32* %30, align 4
  %31 = load i64, i64* %17, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %16)
  %32 = shl i64 %12, 32
  %33 = ashr exact i64 %32, 32
  %34 = shl i64 %33, %15
  %35 = trunc i64 %34 to i32
  call void @llvm.lifetime.start(i64 16, i8* nonnull %16)
  store i64 %31, i64* %17, align 16
  store i64 0, i64* %18, align 8
  %36 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %7, i64 0, i32 1
  %37 = bitcast i64* %36 to i32*
  store i32 %35, i32* %37, align 8
  %38 = load i64, i64* %18, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %16)
  %39 = ashr i64 %12, 32
  %40 = shl i64 %39, %15
  %41 = trunc i64 %40 to i32
  call void @llvm.lifetime.start(i64 16, i8* nonnull %16)
  store i64 %31, i64* %17, align 16
  store i64 %38, i64* %18, align 8
  %42 = getelementptr inbounds [4 x i32], [4 x i32]* %19, i64 0, i64 3
  store i32 %41, i32* %42, align 4
  %43 = load i64, i64* %18, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %16)
  br label %54

; <label>:44:                                     ; preds = %5
  call void @llvm.lifetime.start(i64 16, i8* nonnull %16)
  store <2 x i64> zeroinitializer, <2 x i64>* %6, align 16
  %45 = bitcast <2 x i64>* %6 to i32*
  store i32 0, i32* %45, align 16
  %46 = load i64, i64* %17, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %16)
  call void @llvm.lifetime.start(i64 16, i8* nonnull %16)
  store i64 %46, i64* %17, align 16
  store i64 0, i64* %18, align 8
  %47 = getelementptr inbounds [4 x i32], [4 x i32]* %19, i64 0, i64 1
  store i32 0, i32* %47, align 4
  %48 = load i64, i64* %17, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %16)
  call void @llvm.lifetime.start(i64 16, i8* nonnull %16)
  store i64 %48, i64* %17, align 16
  store i64 0, i64* %18, align 8
  %49 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %7, i64 0, i32 1
  %50 = bitcast i64* %49 to i32*
  store i32 0, i32* %50, align 8
  %51 = load i64, i64* %18, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %16)
  call void @llvm.lifetime.start(i64 16, i8* nonnull %16)
  store i64 %48, i64* %17, align 16
  store i64 %51, i64* %18, align 8
  %52 = getelementptr inbounds [4 x i32], [4 x i32]* %19, i64 0, i64 3
  store i32 0, i32* %52, align 4
  %53 = load i64, i64* %18, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %16)
  br label %54

; <label>:54:                                     ; preds = %44, %20
  %55 = phi i64 [ %48, %44 ], [ %31, %20 ]
  %56 = phi i64 [ %53, %44 ], [ %43, %20 ]
  %57 = lshr i64 %55, 32
  %58 = trunc i64 %55 to i32
  %59 = trunc i64 %57 to i32
  %60 = bitcast i8* %2 to i32*
  store i32 %58, i32* %60, align 1
  %61 = getelementptr inbounds i8, i8* %2, i64 4
  %62 = bitcast i8* %61 to i32*
  store i32 %59, i32* %62, align 1
  %63 = trunc i64 %56 to i32
  %64 = getelementptr inbounds i8, i8* %2, i64 8
  %65 = bitcast i8* %64 to i32*
  store i32 %63, i32* %65, align 1
  %66 = lshr i64 %56, 32
  %67 = trunc i64 %66 to i32
  %68 = getelementptr inbounds i8, i8* %2, i64 12
  %69 = bitcast i8* %68 to i32*
  store i32 %67, i32* %69, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L7PSLLD_VI3VnWI8vec128_tE2VnIS2_ES5_EEP6MemoryS7_R5StateT_T0_T1_(%struct.Memory* readnone returned, %struct.State* nocapture readnone dereferenceable(3376), i8* nocapture, i8* nocapture readonly, i8* nocapture readonly)  {
  %6 = alloca <2 x i64>, align 16
  %7 = bitcast <2 x i64>* %6 to { i64, i64 }*
  %8 = bitcast i8* %3 to i64*
  %9 = load i64, i64* %8, align 1
  %10 = getelementptr inbounds i8, i8* %3, i64 8
  %11 = bitcast i8* %10 to i64*
  %12 = load i64, i64* %11, align 1
  %13 = bitcast i8* %4 to i64*
  %14 = load i64, i64* %13, align 1
  %15 = icmp ugt i64 %14, 31
  %16 = shl i64 %14, 32
  %17 = ashr exact i64 %16, 32
  %18 = bitcast <2 x i64>* %6 to i8*
  %19 = getelementptr inbounds <2 x i64>, <2 x i64>* %6, i64 0, i64 0
  %20 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %7, i64 0, i32 1
  %21 = bitcast <2 x i64>* %6 to [4 x i32]*
  br i1 %15, label %46, label %22

; <label>:22:                                     ; preds = %5
  %23 = shl i64 %9, 32
  %24 = ashr exact i64 %23, 32
  %25 = shl i64 %24, %17
  %26 = trunc i64 %25 to i32
  call void @llvm.lifetime.start(i64 16, i8* nonnull %18)
  store <2 x i64> zeroinitializer, <2 x i64>* %6, align 16
  %27 = bitcast <2 x i64>* %6 to i32*
  store i32 %26, i32* %27, align 16
  %28 = load i64, i64* %19, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %18)
  %29 = ashr i64 %9, 32
  %30 = shl i64 %29, %17
  %31 = trunc i64 %30 to i32
  call void @llvm.lifetime.start(i64 16, i8* nonnull %18)
  store i64 %28, i64* %19, align 16
  store i64 0, i64* %20, align 8
  %32 = getelementptr inbounds [4 x i32], [4 x i32]* %21, i64 0, i64 1
  store i32 %31, i32* %32, align 4
  %33 = load i64, i64* %19, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %18)
  %34 = shl i64 %12, 32
  %35 = ashr exact i64 %34, 32
  %36 = shl i64 %35, %17
  %37 = trunc i64 %36 to i32
  call void @llvm.lifetime.start(i64 16, i8* nonnull %18)
  store i64 %33, i64* %19, align 16
  store i64 0, i64* %20, align 8
  %38 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %7, i64 0, i32 1
  %39 = bitcast i64* %38 to i32*
  store i32 %37, i32* %39, align 8
  %40 = load i64, i64* %20, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %18)
  %41 = ashr i64 %12, 32
  %42 = shl i64 %41, %17
  %43 = trunc i64 %42 to i32
  call void @llvm.lifetime.start(i64 16, i8* nonnull %18)
  store i64 %33, i64* %19, align 16
  store i64 %40, i64* %20, align 8
  %44 = getelementptr inbounds [4 x i32], [4 x i32]* %21, i64 0, i64 3
  store i32 %43, i32* %44, align 4
  %45 = load i64, i64* %20, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %18)
  br label %56

; <label>:46:                                     ; preds = %5
  call void @llvm.lifetime.start(i64 16, i8* nonnull %18)
  store <2 x i64> zeroinitializer, <2 x i64>* %6, align 16
  %47 = bitcast <2 x i64>* %6 to i32*
  store i32 0, i32* %47, align 16
  %48 = load i64, i64* %19, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %18)
  call void @llvm.lifetime.start(i64 16, i8* nonnull %18)
  store i64 %48, i64* %19, align 16
  store i64 0, i64* %20, align 8
  %49 = getelementptr inbounds [4 x i32], [4 x i32]* %21, i64 0, i64 1
  store i32 0, i32* %49, align 4
  %50 = load i64, i64* %19, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %18)
  call void @llvm.lifetime.start(i64 16, i8* nonnull %18)
  store i64 %50, i64* %19, align 16
  store i64 0, i64* %20, align 8
  %51 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %7, i64 0, i32 1
  %52 = bitcast i64* %51 to i32*
  store i32 0, i32* %52, align 8
  %53 = load i64, i64* %20, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %18)
  call void @llvm.lifetime.start(i64 16, i8* nonnull %18)
  store i64 %50, i64* %19, align 16
  store i64 %53, i64* %20, align 8
  %54 = getelementptr inbounds [4 x i32], [4 x i32]* %21, i64 0, i64 3
  store i32 0, i32* %54, align 4
  %55 = load i64, i64* %20, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %18)
  br label %56

; <label>:56:                                     ; preds = %46, %22
  %57 = phi i64 [ %50, %46 ], [ %33, %22 ]
  %58 = phi i64 [ %55, %46 ], [ %45, %22 ]
  %59 = lshr i64 %57, 32
  %60 = trunc i64 %57 to i32
  %61 = trunc i64 %59 to i32
  %62 = bitcast i8* %2 to i32*
  store i32 %60, i32* %62, align 1
  %63 = getelementptr inbounds i8, i8* %2, i64 4
  %64 = bitcast i8* %63 to i32*
  store i32 %61, i32* %64, align 1
  %65 = trunc i64 %58 to i32
  %66 = getelementptr inbounds i8, i8* %2, i64 8
  %67 = bitcast i8* %66 to i32*
  store i32 %65, i32* %67, align 1
  %68 = lshr i64 %58, 32
  %69 = trunc i64 %68 to i32
  %70 = getelementptr inbounds i8, i8* %2, i64 12
  %71 = bitcast i8* %70 to i32*
  store i32 %69, i32* %71, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L7PSLLD_VI3VnWI8vec128_tE2VnIS2_E3MVnIS2_EEEP6MemoryS9_R5StateT_T0_T1_(%struct.Memory* returned, %struct.State* nocapture readnone dereferenceable(3376), i8* nocapture, i8* nocapture readonly, i64)  {
  %6 = alloca <2 x i64>, align 16
  %7 = bitcast <2 x i64>* %6 to { i64, i64 }*
  %8 = bitcast i8* %3 to i64*
  %9 = load i64, i64* %8, align 1
  %10 = getelementptr inbounds i8, i8* %3, i64 8
  %11 = bitcast i8* %10 to i64*
  %12 = load i64, i64* %11, align 1
  %13 = inttoptr i64 %4 to i64*
  %14 = load i64, i64* %13
  %15 = icmp ugt i64 %14, 31
  %16 = shl i64 %14, 32
  %17 = ashr exact i64 %16, 32
  %18 = bitcast <2 x i64>* %6 to i8*
  %19 = getelementptr inbounds <2 x i64>, <2 x i64>* %6, i64 0, i64 0
  %20 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %7, i64 0, i32 1
  %21 = bitcast <2 x i64>* %6 to [4 x i32]*
  br i1 %15, label %46, label %22

; <label>:22:                                     ; preds = %5
  %23 = shl i64 %9, 32
  %24 = ashr exact i64 %23, 32
  %25 = shl i64 %24, %17
  %26 = trunc i64 %25 to i32
  call void @llvm.lifetime.start(i64 16, i8* nonnull %18)
  store <2 x i64> zeroinitializer, <2 x i64>* %6, align 16
  %27 = bitcast <2 x i64>* %6 to i32*
  store i32 %26, i32* %27, align 16
  %28 = load i64, i64* %19, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %18)
  %29 = ashr i64 %9, 32
  %30 = shl i64 %29, %17
  %31 = trunc i64 %30 to i32
  call void @llvm.lifetime.start(i64 16, i8* nonnull %18)
  store i64 %28, i64* %19, align 16
  store i64 0, i64* %20, align 8
  %32 = getelementptr inbounds [4 x i32], [4 x i32]* %21, i64 0, i64 1
  store i32 %31, i32* %32, align 4
  %33 = load i64, i64* %19, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %18)
  %34 = shl i64 %12, 32
  %35 = ashr exact i64 %34, 32
  %36 = shl i64 %35, %17
  %37 = trunc i64 %36 to i32
  call void @llvm.lifetime.start(i64 16, i8* nonnull %18)
  store i64 %33, i64* %19, align 16
  store i64 0, i64* %20, align 8
  %38 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %7, i64 0, i32 1
  %39 = bitcast i64* %38 to i32*
  store i32 %37, i32* %39, align 8
  %40 = load i64, i64* %20, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %18)
  %41 = ashr i64 %12, 32
  %42 = shl i64 %41, %17
  %43 = trunc i64 %42 to i32
  call void @llvm.lifetime.start(i64 16, i8* nonnull %18)
  store i64 %33, i64* %19, align 16
  store i64 %40, i64* %20, align 8
  %44 = getelementptr inbounds [4 x i32], [4 x i32]* %21, i64 0, i64 3
  store i32 %43, i32* %44, align 4
  %45 = load i64, i64* %20, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %18)
  br label %56

; <label>:46:                                     ; preds = %5
  call void @llvm.lifetime.start(i64 16, i8* nonnull %18)
  store <2 x i64> zeroinitializer, <2 x i64>* %6, align 16
  %47 = bitcast <2 x i64>* %6 to i32*
  store i32 0, i32* %47, align 16
  %48 = load i64, i64* %19, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %18)
  call void @llvm.lifetime.start(i64 16, i8* nonnull %18)
  store i64 %48, i64* %19, align 16
  store i64 0, i64* %20, align 8
  %49 = getelementptr inbounds [4 x i32], [4 x i32]* %21, i64 0, i64 1
  store i32 0, i32* %49, align 4
  %50 = load i64, i64* %19, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %18)
  call void @llvm.lifetime.start(i64 16, i8* nonnull %18)
  store i64 %50, i64* %19, align 16
  store i64 0, i64* %20, align 8
  %51 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %7, i64 0, i32 1
  %52 = bitcast i64* %51 to i32*
  store i32 0, i32* %52, align 8
  %53 = load i64, i64* %20, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %18)
  call void @llvm.lifetime.start(i64 16, i8* nonnull %18)
  store i64 %50, i64* %19, align 16
  store i64 %53, i64* %20, align 8
  %54 = getelementptr inbounds [4 x i32], [4 x i32]* %21, i64 0, i64 3
  store i32 0, i32* %54, align 4
  %55 = load i64, i64* %20, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %18)
  br label %56

; <label>:56:                                     ; preds = %46, %22
  %57 = phi i64 [ %50, %46 ], [ %33, %22 ]
  %58 = phi i64 [ %55, %46 ], [ %45, %22 ]
  %59 = lshr i64 %57, 32
  %60 = trunc i64 %57 to i32
  %61 = trunc i64 %59 to i32
  %62 = bitcast i8* %2 to i32*
  store i32 %60, i32* %62, align 1
  %63 = getelementptr inbounds i8, i8* %2, i64 4
  %64 = bitcast i8* %63 to i32*
  store i32 %61, i32* %64, align 1
  %65 = trunc i64 %58 to i32
  %66 = getelementptr inbounds i8, i8* %2, i64 8
  %67 = bitcast i8* %66 to i32*
  store i32 %65, i32* %67, align 1
  %68 = lshr i64 %58, 32
  %69 = trunc i64 %68 to i32
  %70 = getelementptr inbounds i8, i8* %2, i64 12
  %71 = bitcast i8* %70 to i32*
  store i32 %69, i32* %71, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L5PSLLQI4RVnWI7vec64_tE3RVnIS2_E2InIhEEEP6MemoryS9_R5StateT_T0_T1_(%struct.Memory* readnone returned, %struct.State* nocapture readnone dereferenceable(3376), i64* nocapture, i64, i64)  {
  %6 = trunc i64 %4 to i8
  %7 = icmp ugt i8 %6, 63
  %8 = and i64 %4, 255
  %9 = shl i64 %3, %8
  %10 = select i1 %7, i64 0, i64 %9
  store i64 %10, i64* %2, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L5PSLLQI4RVnWI7vec64_tE3RVnIS2_E2RnImEEEP6MemoryS9_R5StateT_T0_T1_(%struct.Memory* readnone returned, %struct.State* nocapture readnone dereferenceable(3376), i64* nocapture, i64, i64)  {
  %6 = icmp ugt i64 %4, 63
  %7 = shl i64 %3, %4
  %8 = select i1 %6, i64 0, i64 %7
  store i64 %8, i64* %2, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L5PSLLQI4RVnWI7vec64_tE3RVnIS2_E2MnImEEEP6MemoryS9_R5StateT_T0_T1_(%struct.Memory*, %struct.State* nocapture readnone dereferenceable(3376), i64* nocapture, i64, i64)  {
  %6 = inttoptr i64 %4 to i64*
  %7 = load i64, i64* %6
  %8 = icmp ugt i64 %7, 63
  %9 = shl i64 %3, %7
  %10 = select i1 %8, i64 0, i64 %9
  store i64 %10, i64* %2, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L5PSLLQI3VnWI8vec128_tE2VnIS2_E2InIhEEEP6MemoryS9_R5StateT_T0_T1_(%struct.Memory* readnone returned, %struct.State* nocapture readnone dereferenceable(3376), i8* nocapture, i8* nocapture readonly, i64)  {
  %6 = trunc i64 %4 to i8
  %7 = icmp ugt i8 %6, 63
  %8 = and i64 %4, 255
  br i1 %7, label %17, label %9

; <label>:9:                                      ; preds = %5
  %10 = getelementptr inbounds i8, i8* %3, i64 8
  %11 = bitcast i8* %10 to i64*
  %12 = load i64, i64* %11, align 1
  %13 = bitcast i8* %3 to i64*
  %14 = load i64, i64* %13, align 1
  %15 = shl i64 %14, %8
  %16 = shl i64 %12, %8
  br label %17

; <label>:17:                                     ; preds = %9, %5
  %18 = phi i64 [ %16, %9 ], [ 0, %5 ]
  %19 = phi i64 [ %15, %9 ], [ 0, %5 ]
  %20 = bitcast i8* %2 to i64*
  store i64 %19, i64* %20, align 1
  %21 = getelementptr inbounds i8, i8* %2, i64 8
  %22 = bitcast i8* %21 to i64*
  store i64 %18, i64* %22, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L7PSLLQ_VI3VnWI8vec128_tE2VnIS2_ES5_EEP6MemoryS7_R5StateT_T0_T1_(%struct.Memory* readnone returned, %struct.State* nocapture readnone dereferenceable(3376), i8* nocapture, i8* nocapture readonly, i8* nocapture readonly)  {
  %6 = bitcast i8* %4 to i64*
  %7 = load i64, i64* %6, align 1
  %8 = icmp ugt i64 %7, 63
  br i1 %8, label %17, label %9

; <label>:9:                                      ; preds = %5
  %10 = getelementptr inbounds i8, i8* %3, i64 8
  %11 = bitcast i8* %10 to i64*
  %12 = load i64, i64* %11, align 1
  %13 = bitcast i8* %3 to i64*
  %14 = load i64, i64* %13, align 1
  %15 = shl i64 %14, %7
  %16 = shl i64 %12, %7
  br label %17

; <label>:17:                                     ; preds = %9, %5
  %18 = phi i64 [ %16, %9 ], [ 0, %5 ]
  %19 = phi i64 [ %15, %9 ], [ 0, %5 ]
  %20 = bitcast i8* %2 to i64*
  store i64 %19, i64* %20, align 1
  %21 = getelementptr inbounds i8, i8* %2, i64 8
  %22 = bitcast i8* %21 to i64*
  store i64 %18, i64* %22, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L7PSLLQ_VI3VnWI8vec128_tE2VnIS2_E3MVnIS2_EEEP6MemoryS9_R5StateT_T0_T1_(%struct.Memory* returned, %struct.State* nocapture readnone dereferenceable(3376), i8* nocapture, i8* nocapture readonly, i64)  {
  %6 = inttoptr i64 %4 to i64*
  %7 = load i64, i64* %6
  %8 = icmp ugt i64 %7, 63
  br i1 %8, label %17, label %9

; <label>:9:                                      ; preds = %5
  %10 = getelementptr inbounds i8, i8* %3, i64 8
  %11 = bitcast i8* %10 to i64*
  %12 = load i64, i64* %11, align 1
  %13 = bitcast i8* %3 to i64*
  %14 = load i64, i64* %13, align 1
  %15 = shl i64 %14, %7
  %16 = shl i64 %12, %7
  br label %17

; <label>:17:                                     ; preds = %9, %5
  %18 = phi i64 [ %16, %9 ], [ 0, %5 ]
  %19 = phi i64 [ %15, %9 ], [ 0, %5 ]
  %20 = bitcast i8* %2 to i64*
  store i64 %19, i64* %20, align 1
  %21 = getelementptr inbounds i8, i8* %2, i64 8
  %22 = bitcast i8* %21 to i64*
  store i64 %18, i64* %22, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L6PSIGNBI4RVnWI7vec64_tE3RVnIS2_ES5_EEP6MemoryS7_R5StateT_T0_T1_(%struct.Memory* readnone returned, %struct.State* nocapture readnone dereferenceable(3376), i64* nocapture, i64, i64)  {
  %6 = alloca i64, align 8
  %7 = alloca i64, align 8
  %8 = bitcast i64* %7 to %struct.uint8v8_t*
  %9 = alloca i64, align 8
  %10 = bitcast i64* %9 to %struct.uint8v8_t*
  %11 = bitcast i64* %7 to i8*
  call void @llvm.lifetime.start(i64 8, i8* nonnull %11) 
  store i64 %3, i64* %7, align 8
  %12 = bitcast i64* %9 to i8*
  call void @llvm.lifetime.start(i64 8, i8* nonnull %12) 
  store i64 %4, i64* %9, align 8
  %13 = bitcast i64* %6 to i8*
  %14 = bitcast i64* %6 to [8 x i8]*
  %15 = trunc i64 %3 to i8
  %16 = trunc i64 %4 to i8
  %17 = icmp slt i8 %16, 0
  %18 = icmp eq i8 %16, 0
  %19 = sub i8 0, %15
  %20 = select i1 %17, i8 %19, i8 %15
  %21 = select i1 %18, i8 0, i8 %20
  call void @llvm.lifetime.start(i64 8, i8* nonnull %13)
  store i64 0, i64* %6, align 8
  %22 = bitcast i64* %6 to i8*
  store i8 %21, i8* %22, align 8
  %23 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %13)
  %24 = lshr i64 %3, 8
  %25 = trunc i64 %24 to i8
  %26 = lshr i64 %4, 8
  %27 = trunc i64 %26 to i8
  %28 = icmp slt i8 %27, 0
  %29 = icmp eq i8 %27, 0
  %30 = sub i8 0, %25
  %31 = select i1 %28, i8 %30, i8 %25
  %32 = select i1 %29, i8 0, i8 %31
  call void @llvm.lifetime.start(i64 8, i8* nonnull %13)
  store i64 %23, i64* %6, align 8
  %33 = getelementptr inbounds [8 x i8], [8 x i8]* %14, i64 0, i64 1
  store i8 %32, i8* %33, align 1
  %34 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %13)
  %35 = lshr i64 %3, 16
  %36 = trunc i64 %35 to i8
  %37 = lshr i64 %4, 16
  %38 = trunc i64 %37 to i8
  %39 = icmp slt i8 %38, 0
  %40 = icmp eq i8 %38, 0
  %41 = sub i8 0, %36
  %42 = select i1 %39, i8 %41, i8 %36
  %43 = select i1 %40, i8 0, i8 %42
  call void @llvm.lifetime.start(i64 8, i8* nonnull %13)
  store i64 %34, i64* %6, align 8
  %44 = getelementptr inbounds [8 x i8], [8 x i8]* %14, i64 0, i64 2
  store i8 %43, i8* %44, align 2
  %45 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %13)
  %46 = getelementptr inbounds %struct.uint8v8_t, %struct.uint8v8_t* %8, i64 0, i32 0, i64 3
  %47 = load i8, i8* %46, align 1
  %48 = getelementptr inbounds %struct.uint8v8_t, %struct.uint8v8_t* %10, i64 0, i32 0, i64 3
  %49 = load i8, i8* %48, align 1
  %50 = icmp slt i8 %49, 0
  %51 = icmp eq i8 %49, 0
  %52 = sub i8 0, %47
  %53 = select i1 %50, i8 %52, i8 %47
  %54 = select i1 %51, i8 0, i8 %53
  call void @llvm.lifetime.start(i64 8, i8* nonnull %13)
  store i64 %45, i64* %6, align 8
  %55 = getelementptr inbounds [8 x i8], [8 x i8]* %14, i64 0, i64 3
  store i8 %54, i8* %55, align 1
  %56 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %13)
  %57 = getelementptr inbounds %struct.uint8v8_t, %struct.uint8v8_t* %8, i64 0, i32 0, i64 4
  %58 = load i8, i8* %57, align 4
  %59 = getelementptr inbounds %struct.uint8v8_t, %struct.uint8v8_t* %10, i64 0, i32 0, i64 4
  %60 = load i8, i8* %59, align 4
  %61 = icmp slt i8 %60, 0
  %62 = icmp eq i8 %60, 0
  %63 = sub i8 0, %58
  %64 = select i1 %61, i8 %63, i8 %58
  %65 = select i1 %62, i8 0, i8 %64
  call void @llvm.lifetime.start(i64 8, i8* nonnull %13)
  store i64 %56, i64* %6, align 8
  %66 = getelementptr inbounds [8 x i8], [8 x i8]* %14, i64 0, i64 4
  store i8 %65, i8* %66, align 4
  %67 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %13)
  %68 = getelementptr inbounds %struct.uint8v8_t, %struct.uint8v8_t* %8, i64 0, i32 0, i64 5
  %69 = load i8, i8* %68, align 1
  %70 = getelementptr inbounds %struct.uint8v8_t, %struct.uint8v8_t* %10, i64 0, i32 0, i64 5
  %71 = load i8, i8* %70, align 1
  %72 = icmp slt i8 %71, 0
  %73 = icmp eq i8 %71, 0
  %74 = sub i8 0, %69
  %75 = select i1 %72, i8 %74, i8 %69
  %76 = select i1 %73, i8 0, i8 %75
  call void @llvm.lifetime.start(i64 8, i8* nonnull %13)
  store i64 %67, i64* %6, align 8
  %77 = getelementptr inbounds [8 x i8], [8 x i8]* %14, i64 0, i64 5
  store i8 %76, i8* %77, align 1
  %78 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %13)
  %79 = getelementptr inbounds %struct.uint8v8_t, %struct.uint8v8_t* %8, i64 0, i32 0, i64 6
  %80 = load i8, i8* %79, align 2
  %81 = getelementptr inbounds %struct.uint8v8_t, %struct.uint8v8_t* %10, i64 0, i32 0, i64 6
  %82 = load i8, i8* %81, align 2
  %83 = icmp slt i8 %82, 0
  %84 = icmp eq i8 %82, 0
  %85 = sub i8 0, %80
  %86 = select i1 %83, i8 %85, i8 %80
  %87 = select i1 %84, i8 0, i8 %86
  call void @llvm.lifetime.start(i64 8, i8* nonnull %13)
  store i64 %78, i64* %6, align 8
  %88 = getelementptr inbounds [8 x i8], [8 x i8]* %14, i64 0, i64 6
  store i8 %87, i8* %88, align 2
  %89 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %13)
  %90 = getelementptr inbounds %struct.uint8v8_t, %struct.uint8v8_t* %8, i64 0, i32 0, i64 7
  %91 = load i8, i8* %90, align 1
  %92 = getelementptr inbounds %struct.uint8v8_t, %struct.uint8v8_t* %10, i64 0, i32 0, i64 7
  %93 = load i8, i8* %92, align 1
  %94 = icmp slt i8 %93, 0
  %95 = icmp eq i8 %93, 0
  %96 = sub i8 0, %91
  %97 = select i1 %94, i8 %96, i8 %91
  %98 = select i1 %95, i8 0, i8 %97
  call void @llvm.lifetime.start(i64 8, i8* nonnull %13)
  store i64 %89, i64* %6, align 8
  %99 = getelementptr inbounds [8 x i8], [8 x i8]* %14, i64 0, i64 7
  store i8 %98, i8* %99, align 1
  %100 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %13)
  %101 = lshr i64 %100, 8
  %102 = lshr i64 %100, 16
  %103 = lshr i64 %100, 24
  %104 = lshr i64 %100, 32
  %105 = lshr i64 %100, 40
  %106 = lshr i64 %100, 48
  %107 = lshr i64 %100, 56
  %108 = trunc i64 %100 to i8
  %109 = trunc i64 %101 to i8
  %110 = trunc i64 %102 to i8
  %111 = trunc i64 %103 to i8
  %112 = trunc i64 %104 to i8
  %113 = trunc i64 %105 to i8
  %114 = trunc i64 %106 to i8
  %115 = trunc i64 %107 to i8
  %116 = bitcast i64* %2 to [8 x i8]*
  %117 = bitcast i64* %2 to i8*
  store i8 %108, i8* %117, align 1
  %118 = getelementptr inbounds [8 x i8], [8 x i8]* %116, i64 0, i64 1
  store i8 %109, i8* %118, align 1
  %119 = getelementptr inbounds [8 x i8], [8 x i8]* %116, i64 0, i64 2
  store i8 %110, i8* %119, align 1
  %120 = getelementptr inbounds [8 x i8], [8 x i8]* %116, i64 0, i64 3
  store i8 %111, i8* %120, align 1
  %121 = getelementptr inbounds [8 x i8], [8 x i8]* %116, i64 0, i64 4
  store i8 %112, i8* %121, align 1
  %122 = getelementptr inbounds [8 x i8], [8 x i8]* %116, i64 0, i64 5
  store i8 %113, i8* %122, align 1
  %123 = getelementptr inbounds [8 x i8], [8 x i8]* %116, i64 0, i64 6
  store i8 %114, i8* %123, align 1
  %124 = getelementptr inbounds [8 x i8], [8 x i8]* %116, i64 0, i64 7
  store i8 %115, i8* %124, align 1
  call void @llvm.lifetime.end(i64 8, i8* nonnull %12) 
  call void @llvm.lifetime.end(i64 8, i8* nonnull %11) 
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L6PSIGNBI4RVnWI7vec64_tE3RVnIS2_E3MVnIS2_EEEP6MemoryS9_R5StateT_T0_T1_(%struct.Memory* returned, %struct.State* nocapture readnone dereferenceable(3376), i64* nocapture, i64, i64)  {
  %6 = alloca i64, align 8
  %7 = alloca i64, align 8
  %8 = bitcast i64* %7 to %struct.uint8v8_t*
  %9 = alloca i64, align 8
  %10 = bitcast i64* %9 to %struct.uint8v8_t*
  %11 = bitcast i64* %7 to i8*
  call void @llvm.lifetime.start(i64 8, i8* nonnull %11) 
  store i64 %3, i64* %7, align 8
  %12 = bitcast i64* %9 to i8*
  call void @llvm.lifetime.start(i64 8, i8* nonnull %12) 
  %13 = inttoptr i64 %4 to i8*
  %14 = load i8, i8* %13
  %15 = add i64 %4, 1
  %16 = inttoptr i64 %15 to i8*
  %17 = load i8, i8* %16
  %18 = add i64 %4, 2
  %19 = inttoptr i64 %18 to i8*
  %20 = load i8, i8* %19
  %21 = add i64 %4, 3
  %22 = inttoptr i64 %21 to i8*
  %23 = load i8, i8* %22
  %24 = add i64 %4, 4
  %25 = inttoptr i64 %24 to i8*
  %26 = load i8, i8* %25
  %27 = add i64 %4, 5
  %28 = inttoptr i64 %27 to i8*
  %29 = load i8, i8* %28
  %30 = add i64 %4, 6
  %31 = inttoptr i64 %30 to i8*
  %32 = load i8, i8* %31
  %33 = add i64 %4, 7
  %34 = inttoptr i64 %33 to i8*
  %35 = load i8, i8* %34
  %36 = zext i8 %35 to i64
  %37 = shl nuw i64 %36, 56
  %38 = zext i8 %32 to i64
  %39 = shl nuw nsw i64 %38, 48
  %40 = zext i8 %29 to i64
  %41 = shl nuw nsw i64 %40, 40
  %42 = zext i8 %26 to i64
  %43 = shl nuw nsw i64 %42, 32
  %44 = zext i8 %23 to i64
  %45 = shl nuw nsw i64 %44, 24
  %46 = zext i8 %20 to i64
  %47 = shl nuw nsw i64 %46, 16
  %48 = zext i8 %17 to i64
  %49 = shl nuw nsw i64 %48, 8
  %50 = zext i8 %14 to i64
  %51 = or i64 %49, %50
  %52 = or i64 %51, %47
  %53 = or i64 %52, %45
  %54 = or i64 %53, %43
  %55 = or i64 %54, %41
  %56 = or i64 %55, %39
  %57 = or i64 %56, %37
  store i64 %57, i64* %9, align 8
  %58 = bitcast i64* %6 to i8*
  %59 = bitcast i64* %6 to [8 x i8]*
  %60 = trunc i64 %3 to i8
  %61 = icmp slt i8 %14, 0
  %62 = icmp eq i8 %14, 0
  %63 = sub i8 0, %60
  %64 = select i1 %61, i8 %63, i8 %60
  %65 = select i1 %62, i8 0, i8 %64
  call void @llvm.lifetime.start(i64 8, i8* nonnull %58)
  store i64 0, i64* %6, align 8
  %66 = bitcast i64* %6 to i8*
  store i8 %65, i8* %66, align 8
  %67 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %58)
  %68 = lshr i64 %3, 8
  %69 = trunc i64 %68 to i8
  %70 = icmp slt i8 %17, 0
  %71 = icmp eq i8 %17, 0
  %72 = sub i8 0, %69
  %73 = select i1 %70, i8 %72, i8 %69
  %74 = select i1 %71, i8 0, i8 %73
  call void @llvm.lifetime.start(i64 8, i8* nonnull %58)
  store i64 %67, i64* %6, align 8
  %75 = getelementptr inbounds [8 x i8], [8 x i8]* %59, i64 0, i64 1
  store i8 %74, i8* %75, align 1
  %76 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %58)
  %77 = getelementptr inbounds %struct.uint8v8_t, %struct.uint8v8_t* %8, i64 0, i32 0, i64 2
  %78 = load i8, i8* %77, align 2
  %79 = icmp slt i8 %20, 0
  %80 = icmp eq i8 %20, 0
  %81 = sub i8 0, %78
  %82 = select i1 %79, i8 %81, i8 %78
  %83 = select i1 %80, i8 0, i8 %82
  call void @llvm.lifetime.start(i64 8, i8* nonnull %58)
  store i64 %76, i64* %6, align 8
  %84 = getelementptr inbounds [8 x i8], [8 x i8]* %59, i64 0, i64 2
  store i8 %83, i8* %84, align 2
  %85 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %58)
  %86 = getelementptr inbounds %struct.uint8v8_t, %struct.uint8v8_t* %8, i64 0, i32 0, i64 3
  %87 = load i8, i8* %86, align 1
  %88 = getelementptr inbounds %struct.uint8v8_t, %struct.uint8v8_t* %10, i64 0, i32 0, i64 3
  %89 = load i8, i8* %88, align 1
  %90 = icmp slt i8 %89, 0
  %91 = icmp eq i8 %89, 0
  %92 = sub i8 0, %87
  %93 = select i1 %90, i8 %92, i8 %87
  %94 = select i1 %91, i8 0, i8 %93
  call void @llvm.lifetime.start(i64 8, i8* nonnull %58)
  store i64 %85, i64* %6, align 8
  %95 = getelementptr inbounds [8 x i8], [8 x i8]* %59, i64 0, i64 3
  store i8 %94, i8* %95, align 1
  %96 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %58)
  %97 = getelementptr inbounds %struct.uint8v8_t, %struct.uint8v8_t* %8, i64 0, i32 0, i64 4
  %98 = load i8, i8* %97, align 4
  %99 = getelementptr inbounds %struct.uint8v8_t, %struct.uint8v8_t* %10, i64 0, i32 0, i64 4
  %100 = load i8, i8* %99, align 4
  %101 = icmp slt i8 %100, 0
  %102 = icmp eq i8 %100, 0
  %103 = sub i8 0, %98
  %104 = select i1 %101, i8 %103, i8 %98
  %105 = select i1 %102, i8 0, i8 %104
  call void @llvm.lifetime.start(i64 8, i8* nonnull %58)
  store i64 %96, i64* %6, align 8
  %106 = getelementptr inbounds [8 x i8], [8 x i8]* %59, i64 0, i64 4
  store i8 %105, i8* %106, align 4
  %107 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %58)
  %108 = getelementptr inbounds %struct.uint8v8_t, %struct.uint8v8_t* %8, i64 0, i32 0, i64 5
  %109 = load i8, i8* %108, align 1
  %110 = getelementptr inbounds %struct.uint8v8_t, %struct.uint8v8_t* %10, i64 0, i32 0, i64 5
  %111 = load i8, i8* %110, align 1
  %112 = icmp slt i8 %111, 0
  %113 = icmp eq i8 %111, 0
  %114 = sub i8 0, %109
  %115 = select i1 %112, i8 %114, i8 %109
  %116 = select i1 %113, i8 0, i8 %115
  call void @llvm.lifetime.start(i64 8, i8* nonnull %58)
  store i64 %107, i64* %6, align 8
  %117 = getelementptr inbounds [8 x i8], [8 x i8]* %59, i64 0, i64 5
  store i8 %116, i8* %117, align 1
  %118 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %58)
  %119 = getelementptr inbounds %struct.uint8v8_t, %struct.uint8v8_t* %8, i64 0, i32 0, i64 6
  %120 = load i8, i8* %119, align 2
  %121 = getelementptr inbounds %struct.uint8v8_t, %struct.uint8v8_t* %10, i64 0, i32 0, i64 6
  %122 = load i8, i8* %121, align 2
  %123 = icmp slt i8 %122, 0
  %124 = icmp eq i8 %122, 0
  %125 = sub i8 0, %120
  %126 = select i1 %123, i8 %125, i8 %120
  %127 = select i1 %124, i8 0, i8 %126
  call void @llvm.lifetime.start(i64 8, i8* nonnull %58)
  store i64 %118, i64* %6, align 8
  %128 = getelementptr inbounds [8 x i8], [8 x i8]* %59, i64 0, i64 6
  store i8 %127, i8* %128, align 2
  %129 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %58)
  %130 = getelementptr inbounds %struct.uint8v8_t, %struct.uint8v8_t* %8, i64 0, i32 0, i64 7
  %131 = load i8, i8* %130, align 1
  %132 = getelementptr inbounds %struct.uint8v8_t, %struct.uint8v8_t* %10, i64 0, i32 0, i64 7
  %133 = load i8, i8* %132, align 1
  %134 = icmp slt i8 %133, 0
  %135 = icmp eq i8 %133, 0
  %136 = sub i8 0, %131
  %137 = select i1 %134, i8 %136, i8 %131
  %138 = select i1 %135, i8 0, i8 %137
  call void @llvm.lifetime.start(i64 8, i8* nonnull %58)
  store i64 %129, i64* %6, align 8
  %139 = getelementptr inbounds [8 x i8], [8 x i8]* %59, i64 0, i64 7
  store i8 %138, i8* %139, align 1
  %140 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %58)
  %141 = lshr i64 %140, 8
  %142 = lshr i64 %140, 16
  %143 = lshr i64 %140, 24
  %144 = lshr i64 %140, 32
  %145 = lshr i64 %140, 40
  %146 = lshr i64 %140, 48
  %147 = lshr i64 %140, 56
  %148 = trunc i64 %140 to i8
  %149 = trunc i64 %141 to i8
  %150 = trunc i64 %142 to i8
  %151 = trunc i64 %143 to i8
  %152 = trunc i64 %144 to i8
  %153 = trunc i64 %145 to i8
  %154 = trunc i64 %146 to i8
  %155 = trunc i64 %147 to i8
  %156 = bitcast i64* %2 to [8 x i8]*
  %157 = bitcast i64* %2 to i8*
  store i8 %148, i8* %157, align 1
  %158 = getelementptr inbounds [8 x i8], [8 x i8]* %156, i64 0, i64 1
  store i8 %149, i8* %158, align 1
  %159 = getelementptr inbounds [8 x i8], [8 x i8]* %156, i64 0, i64 2
  store i8 %150, i8* %159, align 1
  %160 = getelementptr inbounds [8 x i8], [8 x i8]* %156, i64 0, i64 3
  store i8 %151, i8* %160, align 1
  %161 = getelementptr inbounds [8 x i8], [8 x i8]* %156, i64 0, i64 4
  store i8 %152, i8* %161, align 1
  %162 = getelementptr inbounds [8 x i8], [8 x i8]* %156, i64 0, i64 5
  store i8 %153, i8* %162, align 1
  %163 = getelementptr inbounds [8 x i8], [8 x i8]* %156, i64 0, i64 6
  store i8 %154, i8* %163, align 1
  %164 = getelementptr inbounds [8 x i8], [8 x i8]* %156, i64 0, i64 7
  store i8 %155, i8* %164, align 1
  call void @llvm.lifetime.end(i64 8, i8* nonnull %12) 
  call void @llvm.lifetime.end(i64 8, i8* nonnull %11) 
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L6PSIGNBI3VnWI8vec128_tE2VnIS2_ES5_EEP6MemoryS7_R5StateT_T0_T1_(%struct.Memory* readnone returned, %struct.State* nocapture readnone dereferenceable(3376), i8* nocapture, i8* nocapture readonly, i8* nocapture readonly)  {
  %6 = alloca <2 x i64>, align 16
  %7 = bitcast <2 x i64>* %6 to { i64, i64 }*
  %8 = alloca <2 x i64>, align 16
  %9 = bitcast <2 x i64>* %8 to { i64, i64 }*
  %10 = bitcast <2 x i64>* %8 to %struct.uint8v16_t*
  %11 = alloca <2 x i64>, align 16
  %12 = bitcast <2 x i64>* %11 to { i64, i64 }*
  %13 = bitcast <2 x i64>* %11 to %struct.uint8v16_t*
  %14 = bitcast <2 x i64>* %8 to i8*
  call void @llvm.lifetime.start(i64 16, i8* nonnull %14) 
  %15 = bitcast i8* %3 to <2 x i64>*
  %16 = load <2 x i64>, <2 x i64>* %15, align 1
  store <2 x i64> %16, <2 x i64>* %8, align 16
  %17 = bitcast <2 x i64>* %11 to i8*
  call void @llvm.lifetime.start(i64 16, i8* nonnull %17) 
  %18 = bitcast i8* %4 to <2 x i64>*
  %19 = load <2 x i64>, <2 x i64>* %18, align 1
  store <2 x i64> %19, <2 x i64>* %11, align 16
  %20 = bitcast <2 x i64>* %6 to i8*
  %21 = getelementptr inbounds <2 x i64>, <2 x i64>* %6, i64 0, i64 0
  %22 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %7, i64 0, i32 1
  %23 = bitcast <2 x i64>* %6 to [16 x i8]*
  %24 = extractelement <2 x i64> %16, i32 0
  %25 = trunc i64 %24 to i8
  %26 = extractelement <2 x i64> %19, i32 0
  %27 = trunc i64 %26 to i8
  %28 = icmp slt i8 %27, 0
  %29 = icmp eq i8 %27, 0
  %30 = sub i8 0, %25
  %31 = select i1 %28, i8 %30, i8 %25
  %32 = select i1 %29, i8 0, i8 %31
  call void @llvm.lifetime.start(i64 16, i8* nonnull %20)
  store <2 x i64> zeroinitializer, <2 x i64>* %6, align 16
  %33 = bitcast <2 x i64>* %6 to i8*
  store i8 %32, i8* %33, align 16
  %34 = load i64, i64* %21, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %20)
  %35 = lshr i64 %24, 8
  %36 = trunc i64 %35 to i8
  %37 = lshr i64 %26, 8
  %38 = trunc i64 %37 to i8
  %39 = icmp slt i8 %38, 0
  %40 = icmp eq i8 %38, 0
  %41 = sub i8 0, %36
  %42 = select i1 %39, i8 %41, i8 %36
  %43 = select i1 %40, i8 0, i8 %42
  call void @llvm.lifetime.start(i64 16, i8* nonnull %20)
  store i64 %34, i64* %21, align 16
  store i64 0, i64* %22, align 8
  %44 = getelementptr inbounds [16 x i8], [16 x i8]* %23, i64 0, i64 1
  store i8 %43, i8* %44, align 1
  %45 = load i64, i64* %21, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %20)
  %46 = lshr i64 %24, 16
  %47 = trunc i64 %46 to i8
  %48 = lshr i64 %26, 16
  %49 = trunc i64 %48 to i8
  %50 = icmp slt i8 %49, 0
  %51 = icmp eq i8 %49, 0
  %52 = sub i8 0, %47
  %53 = select i1 %50, i8 %52, i8 %47
  %54 = select i1 %51, i8 0, i8 %53
  call void @llvm.lifetime.start(i64 16, i8* nonnull %20)
  store i64 %45, i64* %21, align 16
  store i64 0, i64* %22, align 8
  %55 = getelementptr inbounds [16 x i8], [16 x i8]* %23, i64 0, i64 2
  store i8 %54, i8* %55, align 2
  %56 = load i64, i64* %21, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %20)
  %57 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %10, i64 0, i32 0, i64 3
  %58 = load i8, i8* %57, align 1
  %59 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %13, i64 0, i32 0, i64 3
  %60 = load i8, i8* %59, align 1
  %61 = icmp slt i8 %60, 0
  %62 = icmp eq i8 %60, 0
  %63 = sub i8 0, %58
  %64 = select i1 %61, i8 %63, i8 %58
  %65 = select i1 %62, i8 0, i8 %64
  call void @llvm.lifetime.start(i64 16, i8* nonnull %20)
  store i64 %56, i64* %21, align 16
  store i64 0, i64* %22, align 8
  %66 = getelementptr inbounds [16 x i8], [16 x i8]* %23, i64 0, i64 3
  store i8 %65, i8* %66, align 1
  %67 = load i64, i64* %21, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %20)
  %68 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %10, i64 0, i32 0, i64 4
  %69 = load i8, i8* %68, align 4
  %70 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %13, i64 0, i32 0, i64 4
  %71 = load i8, i8* %70, align 4
  %72 = icmp slt i8 %71, 0
  %73 = icmp eq i8 %71, 0
  %74 = sub i8 0, %69
  %75 = select i1 %72, i8 %74, i8 %69
  %76 = select i1 %73, i8 0, i8 %75
  call void @llvm.lifetime.start(i64 16, i8* nonnull %20)
  store i64 %67, i64* %21, align 16
  store i64 0, i64* %22, align 8
  %77 = getelementptr inbounds [16 x i8], [16 x i8]* %23, i64 0, i64 4
  store i8 %76, i8* %77, align 4
  %78 = load i64, i64* %21, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %20)
  %79 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %10, i64 0, i32 0, i64 5
  %80 = load i8, i8* %79, align 1
  %81 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %13, i64 0, i32 0, i64 5
  %82 = load i8, i8* %81, align 1
  %83 = icmp slt i8 %82, 0
  %84 = icmp eq i8 %82, 0
  %85 = sub i8 0, %80
  %86 = select i1 %83, i8 %85, i8 %80
  %87 = select i1 %84, i8 0, i8 %86
  call void @llvm.lifetime.start(i64 16, i8* nonnull %20)
  store i64 %78, i64* %21, align 16
  store i64 0, i64* %22, align 8
  %88 = getelementptr inbounds [16 x i8], [16 x i8]* %23, i64 0, i64 5
  store i8 %87, i8* %88, align 1
  %89 = load i64, i64* %21, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %20)
  %90 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %10, i64 0, i32 0, i64 6
  %91 = load i8, i8* %90, align 2
  %92 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %13, i64 0, i32 0, i64 6
  %93 = load i8, i8* %92, align 2
  %94 = icmp slt i8 %93, 0
  %95 = icmp eq i8 %93, 0
  %96 = sub i8 0, %91
  %97 = select i1 %94, i8 %96, i8 %91
  %98 = select i1 %95, i8 0, i8 %97
  call void @llvm.lifetime.start(i64 16, i8* nonnull %20)
  store i64 %89, i64* %21, align 16
  store i64 0, i64* %22, align 8
  %99 = getelementptr inbounds [16 x i8], [16 x i8]* %23, i64 0, i64 6
  store i8 %98, i8* %99, align 2
  %100 = load i64, i64* %21, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %20)
  %101 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %10, i64 0, i32 0, i64 7
  %102 = load i8, i8* %101, align 1
  %103 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %13, i64 0, i32 0, i64 7
  %104 = load i8, i8* %103, align 1
  %105 = icmp slt i8 %104, 0
  %106 = icmp eq i8 %104, 0
  %107 = sub i8 0, %102
  %108 = select i1 %105, i8 %107, i8 %102
  %109 = select i1 %106, i8 0, i8 %108
  call void @llvm.lifetime.start(i64 16, i8* nonnull %20)
  store i64 %100, i64* %21, align 16
  store i64 0, i64* %22, align 8
  %110 = getelementptr inbounds [16 x i8], [16 x i8]* %23, i64 0, i64 7
  store i8 %109, i8* %110, align 1
  %111 = load i64, i64* %21, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %20)
  %112 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %9, i64 0, i32 1
  %113 = bitcast i64* %112 to i8*
  %114 = load i8, i8* %113, align 8
  %115 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %12, i64 0, i32 1
  %116 = bitcast i64* %115 to i8*
  %117 = load i8, i8* %116, align 8
  %118 = icmp slt i8 %117, 0
  %119 = icmp eq i8 %117, 0
  %120 = sub i8 0, %114
  %121 = select i1 %118, i8 %120, i8 %114
  %122 = select i1 %119, i8 0, i8 %121
  call void @llvm.lifetime.start(i64 16, i8* nonnull %20)
  store i64 %111, i64* %21, align 16
  store i64 0, i64* %22, align 8
  %123 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %7, i64 0, i32 1
  %124 = bitcast i64* %123 to i8*
  store i8 %122, i8* %124, align 8
  %125 = load i64, i64* %22, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %20)
  %126 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %10, i64 0, i32 0, i64 9
  %127 = load i8, i8* %126, align 1
  %128 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %13, i64 0, i32 0, i64 9
  %129 = load i8, i8* %128, align 1
  %130 = icmp slt i8 %129, 0
  %131 = icmp eq i8 %129, 0
  %132 = sub i8 0, %127
  %133 = select i1 %130, i8 %132, i8 %127
  %134 = select i1 %131, i8 0, i8 %133
  call void @llvm.lifetime.start(i64 16, i8* nonnull %20)
  store i64 %111, i64* %21, align 16
  store i64 %125, i64* %22, align 8
  %135 = getelementptr inbounds [16 x i8], [16 x i8]* %23, i64 0, i64 9
  store i8 %134, i8* %135, align 1
  %136 = load i64, i64* %22, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %20)
  %137 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %10, i64 0, i32 0, i64 10
  %138 = load i8, i8* %137, align 2
  %139 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %13, i64 0, i32 0, i64 10
  %140 = load i8, i8* %139, align 2
  %141 = icmp slt i8 %140, 0
  %142 = icmp eq i8 %140, 0
  %143 = sub i8 0, %138
  %144 = select i1 %141, i8 %143, i8 %138
  %145 = select i1 %142, i8 0, i8 %144
  call void @llvm.lifetime.start(i64 16, i8* nonnull %20)
  store i64 %111, i64* %21, align 16
  store i64 %136, i64* %22, align 8
  %146 = getelementptr inbounds [16 x i8], [16 x i8]* %23, i64 0, i64 10
  store i8 %145, i8* %146, align 2
  %147 = load i64, i64* %22, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %20)
  %148 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %10, i64 0, i32 0, i64 11
  %149 = load i8, i8* %148, align 1
  %150 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %13, i64 0, i32 0, i64 11
  %151 = load i8, i8* %150, align 1
  %152 = icmp slt i8 %151, 0
  %153 = icmp eq i8 %151, 0
  %154 = sub i8 0, %149
  %155 = select i1 %152, i8 %154, i8 %149
  %156 = select i1 %153, i8 0, i8 %155
  call void @llvm.lifetime.start(i64 16, i8* nonnull %20)
  store i64 %111, i64* %21, align 16
  store i64 %147, i64* %22, align 8
  %157 = getelementptr inbounds [16 x i8], [16 x i8]* %23, i64 0, i64 11
  store i8 %156, i8* %157, align 1
  %158 = load i64, i64* %22, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %20)
  %159 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %10, i64 0, i32 0, i64 12
  %160 = load i8, i8* %159, align 4
  %161 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %13, i64 0, i32 0, i64 12
  %162 = load i8, i8* %161, align 4
  %163 = icmp slt i8 %162, 0
  %164 = icmp eq i8 %162, 0
  %165 = sub i8 0, %160
  %166 = select i1 %163, i8 %165, i8 %160
  %167 = select i1 %164, i8 0, i8 %166
  call void @llvm.lifetime.start(i64 16, i8* nonnull %20)
  store i64 %111, i64* %21, align 16
  store i64 %158, i64* %22, align 8
  %168 = getelementptr inbounds [16 x i8], [16 x i8]* %23, i64 0, i64 12
  store i8 %167, i8* %168, align 4
  %169 = load i64, i64* %22, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %20)
  %170 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %10, i64 0, i32 0, i64 13
  %171 = load i8, i8* %170, align 1
  %172 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %13, i64 0, i32 0, i64 13
  %173 = load i8, i8* %172, align 1
  %174 = icmp slt i8 %173, 0
  %175 = icmp eq i8 %173, 0
  %176 = sub i8 0, %171
  %177 = select i1 %174, i8 %176, i8 %171
  %178 = select i1 %175, i8 0, i8 %177
  call void @llvm.lifetime.start(i64 16, i8* nonnull %20)
  store i64 %111, i64* %21, align 16
  store i64 %169, i64* %22, align 8
  %179 = getelementptr inbounds [16 x i8], [16 x i8]* %23, i64 0, i64 13
  store i8 %178, i8* %179, align 1
  %180 = load i64, i64* %22, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %20)
  %181 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %10, i64 0, i32 0, i64 14
  %182 = load i8, i8* %181, align 2
  %183 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %13, i64 0, i32 0, i64 14
  %184 = load i8, i8* %183, align 2
  %185 = icmp slt i8 %184, 0
  %186 = icmp eq i8 %184, 0
  %187 = sub i8 0, %182
  %188 = select i1 %185, i8 %187, i8 %182
  %189 = select i1 %186, i8 0, i8 %188
  call void @llvm.lifetime.start(i64 16, i8* nonnull %20)
  store i64 %111, i64* %21, align 16
  store i64 %180, i64* %22, align 8
  %190 = getelementptr inbounds [16 x i8], [16 x i8]* %23, i64 0, i64 14
  store i8 %189, i8* %190, align 2
  %191 = load i64, i64* %22, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %20)
  %192 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %10, i64 0, i32 0, i64 15
  %193 = load i8, i8* %192, align 1
  %194 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %13, i64 0, i32 0, i64 15
  %195 = load i8, i8* %194, align 1
  %196 = icmp slt i8 %195, 0
  %197 = icmp eq i8 %195, 0
  %198 = sub i8 0, %193
  %199 = select i1 %196, i8 %198, i8 %193
  %200 = select i1 %197, i8 0, i8 %199
  call void @llvm.lifetime.start(i64 16, i8* nonnull %20)
  store i64 %111, i64* %21, align 16
  store i64 %191, i64* %22, align 8
  %201 = getelementptr inbounds [16 x i8], [16 x i8]* %23, i64 0, i64 15
  store i8 %200, i8* %201, align 1
  %202 = load i64, i64* %22, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %20)
  %203 = lshr i64 %111, 8
  %204 = lshr i64 %111, 16
  %205 = lshr i64 %111, 24
  %206 = lshr i64 %111, 32
  %207 = lshr i64 %111, 40
  %208 = lshr i64 %111, 48
  %209 = lshr i64 %111, 56
  %210 = trunc i64 %111 to i8
  %211 = trunc i64 %203 to i8
  %212 = trunc i64 %204 to i8
  %213 = trunc i64 %205 to i8
  %214 = trunc i64 %206 to i8
  %215 = trunc i64 %207 to i8
  %216 = trunc i64 %208 to i8
  %217 = trunc i64 %209 to i8
  store i8 %210, i8* %2, align 1
  %218 = getelementptr inbounds i8, i8* %2, i64 1
  store i8 %211, i8* %218, align 1
  %219 = getelementptr inbounds i8, i8* %2, i64 2
  store i8 %212, i8* %219, align 1
  %220 = getelementptr inbounds i8, i8* %2, i64 3
  store i8 %213, i8* %220, align 1
  %221 = getelementptr inbounds i8, i8* %2, i64 4
  store i8 %214, i8* %221, align 1
  %222 = getelementptr inbounds i8, i8* %2, i64 5
  store i8 %215, i8* %222, align 1
  %223 = getelementptr inbounds i8, i8* %2, i64 6
  store i8 %216, i8* %223, align 1
  %224 = getelementptr inbounds i8, i8* %2, i64 7
  store i8 %217, i8* %224, align 1
  %225 = trunc i64 %202 to i8
  %226 = getelementptr inbounds i8, i8* %2, i64 8
  store i8 %225, i8* %226, align 1
  %227 = lshr i64 %202, 8
  %228 = trunc i64 %227 to i8
  %229 = getelementptr inbounds i8, i8* %2, i64 9
  store i8 %228, i8* %229, align 1
  %230 = lshr i64 %202, 16
  %231 = trunc i64 %230 to i8
  %232 = getelementptr inbounds i8, i8* %2, i64 10
  store i8 %231, i8* %232, align 1
  %233 = lshr i64 %202, 24
  %234 = trunc i64 %233 to i8
  %235 = getelementptr inbounds i8, i8* %2, i64 11
  store i8 %234, i8* %235, align 1
  %236 = lshr i64 %202, 32
  %237 = trunc i64 %236 to i8
  %238 = getelementptr inbounds i8, i8* %2, i64 12
  store i8 %237, i8* %238, align 1
  %239 = lshr i64 %202, 40
  %240 = trunc i64 %239 to i8
  %241 = getelementptr inbounds i8, i8* %2, i64 13
  store i8 %240, i8* %241, align 1
  %242 = lshr i64 %202, 48
  %243 = trunc i64 %242 to i8
  %244 = getelementptr inbounds i8, i8* %2, i64 14
  store i8 %243, i8* %244, align 1
  %245 = lshr i64 %202, 56
  %246 = trunc i64 %245 to i8
  %247 = getelementptr inbounds i8, i8* %2, i64 15
  store i8 %246, i8* %247, align 1
  call void @llvm.lifetime.end(i64 16, i8* nonnull %17) 
  call void @llvm.lifetime.end(i64 16, i8* nonnull %14) 
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L6PSIGNBI3VnWI8vec128_tE2VnIS2_E3MVnIS2_EEEP6MemoryS9_R5StateT_T0_T1_(%struct.Memory* returned, %struct.State* nocapture readnone dereferenceable(3376), i8* nocapture, i8* nocapture readonly, i64)  {
  %6 = alloca <2 x i64>, align 16
  %7 = bitcast <2 x i64>* %6 to { i64, i64 }*
  %8 = alloca <2 x i64>, align 16
  %9 = bitcast <2 x i64>* %8 to { i64, i64 }*
  %10 = bitcast <2 x i64>* %8 to %struct.uint8v16_t*
  %11 = alloca <2 x i64>, align 16
  %12 = bitcast <2 x i64>* %11 to { i64, i64 }*
  %13 = bitcast <2 x i64>* %11 to %struct.uint8v16_t*
  %14 = bitcast <2 x i64>* %8 to i8*
  call void @llvm.lifetime.start(i64 16, i8* nonnull %14) 
  %15 = bitcast i8* %3 to <2 x i64>*
  %16 = load <2 x i64>, <2 x i64>* %15, align 1
  store <2 x i64> %16, <2 x i64>* %8, align 16
  %17 = bitcast <2 x i64>* %11 to i8*
  call void @llvm.lifetime.start(i64 16, i8* nonnull %17) 
  %18 = inttoptr i64 %4 to i8*
  %19 = load i8, i8* %18
  %20 = add i64 %4, 1
  %21 = inttoptr i64 %20 to i8*
  %22 = load i8, i8* %21
  %23 = add i64 %4, 2
  %24 = inttoptr i64 %23 to i8*
  %25 = load i8, i8* %24
  %26 = add i64 %4, 3
  %27 = inttoptr i64 %26 to i8*
  %28 = load i8, i8* %27
  %29 = add i64 %4, 4
  %30 = inttoptr i64 %29 to i8*
  %31 = load i8, i8* %30
  %32 = add i64 %4, 5
  %33 = inttoptr i64 %32 to i8*
  %34 = load i8, i8* %33
  %35 = add i64 %4, 6
  %36 = inttoptr i64 %35 to i8*
  %37 = load i8, i8* %36
  %38 = add i64 %4, 7
  %39 = inttoptr i64 %38 to i8*
  %40 = load i8, i8* %39
  %41 = add i64 %4, 8
  %42 = inttoptr i64 %41 to i8*
  %43 = load i8, i8* %42
  %44 = add i64 %4, 9
  %45 = inttoptr i64 %44 to i8*
  %46 = load i8, i8* %45
  %47 = add i64 %4, 10
  %48 = inttoptr i64 %47 to i8*
  %49 = load i8, i8* %48
  %50 = add i64 %4, 11
  %51 = inttoptr i64 %50 to i8*
  %52 = load i8, i8* %51
  %53 = add i64 %4, 12
  %54 = inttoptr i64 %53 to i8*
  %55 = load i8, i8* %54
  %56 = add i64 %4, 13
  %57 = inttoptr i64 %56 to i8*
  %58 = load i8, i8* %57
  %59 = add i64 %4, 14
  %60 = inttoptr i64 %59 to i8*
  %61 = load i8, i8* %60
  %62 = add i64 %4, 15
  %63 = inttoptr i64 %62 to i8*
  %64 = load i8, i8* %63
  %65 = insertelement <2 x i8> undef, i8 %40, i32 0
  %66 = insertelement <2 x i8> %65, i8 %64, i32 1
  %67 = zext <2 x i8> %66 to <2 x i64>
  %68 = shl nuw <2 x i64> %67, <i64 56, i64 56>
  %69 = insertelement <2 x i8> undef, i8 %37, i32 0
  %70 = insertelement <2 x i8> %69, i8 %61, i32 1
  %71 = zext <2 x i8> %70 to <2 x i64>
  %72 = shl nuw nsw <2 x i64> %71, <i64 48, i64 48>
  %73 = insertelement <2 x i8> undef, i8 %34, i32 0
  %74 = insertelement <2 x i8> %73, i8 %58, i32 1
  %75 = zext <2 x i8> %74 to <2 x i64>
  %76 = shl nuw nsw <2 x i64> %75, <i64 40, i64 40>
  %77 = insertelement <2 x i8> undef, i8 %31, i32 0
  %78 = insertelement <2 x i8> %77, i8 %55, i32 1
  %79 = zext <2 x i8> %78 to <2 x i64>
  %80 = shl nuw nsw <2 x i64> %79, <i64 32, i64 32>
  %81 = insertelement <2 x i8> undef, i8 %28, i32 0
  %82 = insertelement <2 x i8> %81, i8 %52, i32 1
  %83 = zext <2 x i8> %82 to <2 x i64>
  %84 = shl nuw nsw <2 x i64> %83, <i64 24, i64 24>
  %85 = insertelement <2 x i8> undef, i8 %25, i32 0
  %86 = insertelement <2 x i8> %85, i8 %49, i32 1
  %87 = zext <2 x i8> %86 to <2 x i64>
  %88 = shl nuw nsw <2 x i64> %87, <i64 16, i64 16>
  %89 = insertelement <2 x i8> undef, i8 %22, i32 0
  %90 = insertelement <2 x i8> %89, i8 %46, i32 1
  %91 = zext <2 x i8> %90 to <2 x i64>
  %92 = shl nuw nsw <2 x i64> %91, <i64 8, i64 8>
  %93 = insertelement <2 x i8> undef, i8 %19, i32 0
  %94 = insertelement <2 x i8> %93, i8 %43, i32 1
  %95 = zext <2 x i8> %94 to <2 x i64>
  %96 = or <2 x i64> %92, %95
  %97 = or <2 x i64> %96, %88
  %98 = or <2 x i64> %97, %84
  %99 = or <2 x i64> %98, %80
  %100 = or <2 x i64> %99, %76
  %101 = or <2 x i64> %100, %72
  %102 = or <2 x i64> %101, %68
  store <2 x i64> %102, <2 x i64>* %11, align 16
  %103 = bitcast <2 x i64>* %6 to i8*
  %104 = getelementptr inbounds <2 x i64>, <2 x i64>* %6, i64 0, i64 0
  %105 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %7, i64 0, i32 1
  %106 = bitcast <2 x i64>* %6 to [16 x i8]*
  %107 = extractelement <2 x i64> %16, i32 0
  %108 = trunc i64 %107 to i8
  %109 = icmp slt i8 %19, 0
  %110 = icmp eq i8 %19, 0
  %111 = sub i8 0, %108
  %112 = select i1 %109, i8 %111, i8 %108
  %113 = select i1 %110, i8 0, i8 %112
  call void @llvm.lifetime.start(i64 16, i8* nonnull %103)
  store <2 x i64> zeroinitializer, <2 x i64>* %6, align 16
  %114 = bitcast <2 x i64>* %6 to i8*
  store i8 %113, i8* %114, align 16
  %115 = load i64, i64* %104, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %103)
  %116 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %10, i64 0, i32 0, i64 1
  %117 = load i8, i8* %116, align 1
  %118 = icmp slt i8 %22, 0
  %119 = icmp eq i8 %22, 0
  %120 = sub i8 0, %117
  %121 = select i1 %118, i8 %120, i8 %117
  %122 = select i1 %119, i8 0, i8 %121
  call void @llvm.lifetime.start(i64 16, i8* nonnull %103)
  store i64 %115, i64* %104, align 16
  store i64 0, i64* %105, align 8
  %123 = getelementptr inbounds [16 x i8], [16 x i8]* %106, i64 0, i64 1
  store i8 %122, i8* %123, align 1
  %124 = load i64, i64* %104, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %103)
  %125 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %10, i64 0, i32 0, i64 2
  %126 = load i8, i8* %125, align 2
  %127 = icmp slt i8 %25, 0
  %128 = icmp eq i8 %25, 0
  %129 = sub i8 0, %126
  %130 = select i1 %127, i8 %129, i8 %126
  %131 = select i1 %128, i8 0, i8 %130
  call void @llvm.lifetime.start(i64 16, i8* nonnull %103)
  store i64 %124, i64* %104, align 16
  store i64 0, i64* %105, align 8
  %132 = getelementptr inbounds [16 x i8], [16 x i8]* %106, i64 0, i64 2
  store i8 %131, i8* %132, align 2
  %133 = load i64, i64* %104, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %103)
  %134 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %10, i64 0, i32 0, i64 3
  %135 = load i8, i8* %134, align 1
  %136 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %13, i64 0, i32 0, i64 3
  %137 = load i8, i8* %136, align 1
  %138 = icmp slt i8 %137, 0
  %139 = icmp eq i8 %137, 0
  %140 = sub i8 0, %135
  %141 = select i1 %138, i8 %140, i8 %135
  %142 = select i1 %139, i8 0, i8 %141
  call void @llvm.lifetime.start(i64 16, i8* nonnull %103)
  store i64 %133, i64* %104, align 16
  store i64 0, i64* %105, align 8
  %143 = getelementptr inbounds [16 x i8], [16 x i8]* %106, i64 0, i64 3
  store i8 %142, i8* %143, align 1
  %144 = load i64, i64* %104, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %103)
  %145 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %10, i64 0, i32 0, i64 4
  %146 = load i8, i8* %145, align 4
  %147 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %13, i64 0, i32 0, i64 4
  %148 = load i8, i8* %147, align 4
  %149 = icmp slt i8 %148, 0
  %150 = icmp eq i8 %148, 0
  %151 = sub i8 0, %146
  %152 = select i1 %149, i8 %151, i8 %146
  %153 = select i1 %150, i8 0, i8 %152
  call void @llvm.lifetime.start(i64 16, i8* nonnull %103)
  store i64 %144, i64* %104, align 16
  store i64 0, i64* %105, align 8
  %154 = getelementptr inbounds [16 x i8], [16 x i8]* %106, i64 0, i64 4
  store i8 %153, i8* %154, align 4
  %155 = load i64, i64* %104, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %103)
  %156 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %10, i64 0, i32 0, i64 5
  %157 = load i8, i8* %156, align 1
  %158 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %13, i64 0, i32 0, i64 5
  %159 = load i8, i8* %158, align 1
  %160 = icmp slt i8 %159, 0
  %161 = icmp eq i8 %159, 0
  %162 = sub i8 0, %157
  %163 = select i1 %160, i8 %162, i8 %157
  %164 = select i1 %161, i8 0, i8 %163
  call void @llvm.lifetime.start(i64 16, i8* nonnull %103)
  store i64 %155, i64* %104, align 16
  store i64 0, i64* %105, align 8
  %165 = getelementptr inbounds [16 x i8], [16 x i8]* %106, i64 0, i64 5
  store i8 %164, i8* %165, align 1
  %166 = load i64, i64* %104, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %103)
  %167 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %10, i64 0, i32 0, i64 6
  %168 = load i8, i8* %167, align 2
  %169 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %13, i64 0, i32 0, i64 6
  %170 = load i8, i8* %169, align 2
  %171 = icmp slt i8 %170, 0
  %172 = icmp eq i8 %170, 0
  %173 = sub i8 0, %168
  %174 = select i1 %171, i8 %173, i8 %168
  %175 = select i1 %172, i8 0, i8 %174
  call void @llvm.lifetime.start(i64 16, i8* nonnull %103)
  store i64 %166, i64* %104, align 16
  store i64 0, i64* %105, align 8
  %176 = getelementptr inbounds [16 x i8], [16 x i8]* %106, i64 0, i64 6
  store i8 %175, i8* %176, align 2
  %177 = load i64, i64* %104, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %103)
  %178 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %10, i64 0, i32 0, i64 7
  %179 = load i8, i8* %178, align 1
  %180 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %13, i64 0, i32 0, i64 7
  %181 = load i8, i8* %180, align 1
  %182 = icmp slt i8 %181, 0
  %183 = icmp eq i8 %181, 0
  %184 = sub i8 0, %179
  %185 = select i1 %182, i8 %184, i8 %179
  %186 = select i1 %183, i8 0, i8 %185
  call void @llvm.lifetime.start(i64 16, i8* nonnull %103)
  store i64 %177, i64* %104, align 16
  store i64 0, i64* %105, align 8
  %187 = getelementptr inbounds [16 x i8], [16 x i8]* %106, i64 0, i64 7
  store i8 %186, i8* %187, align 1
  %188 = load i64, i64* %104, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %103)
  %189 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %9, i64 0, i32 1
  %190 = bitcast i64* %189 to i8*
  %191 = load i8, i8* %190, align 8
  %192 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %12, i64 0, i32 1
  %193 = bitcast i64* %192 to i8*
  %194 = load i8, i8* %193, align 8
  %195 = icmp slt i8 %194, 0
  %196 = icmp eq i8 %194, 0
  %197 = sub i8 0, %191
  %198 = select i1 %195, i8 %197, i8 %191
  %199 = select i1 %196, i8 0, i8 %198
  call void @llvm.lifetime.start(i64 16, i8* nonnull %103)
  store i64 %188, i64* %104, align 16
  store i64 0, i64* %105, align 8
  %200 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %7, i64 0, i32 1
  %201 = bitcast i64* %200 to i8*
  store i8 %199, i8* %201, align 8
  %202 = load i64, i64* %105, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %103)
  %203 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %10, i64 0, i32 0, i64 9
  %204 = load i8, i8* %203, align 1
  %205 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %13, i64 0, i32 0, i64 9
  %206 = load i8, i8* %205, align 1
  %207 = icmp slt i8 %206, 0
  %208 = icmp eq i8 %206, 0
  %209 = sub i8 0, %204
  %210 = select i1 %207, i8 %209, i8 %204
  %211 = select i1 %208, i8 0, i8 %210
  call void @llvm.lifetime.start(i64 16, i8* nonnull %103)
  store i64 %188, i64* %104, align 16
  store i64 %202, i64* %105, align 8
  %212 = getelementptr inbounds [16 x i8], [16 x i8]* %106, i64 0, i64 9
  store i8 %211, i8* %212, align 1
  %213 = load i64, i64* %105, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %103)
  %214 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %10, i64 0, i32 0, i64 10
  %215 = load i8, i8* %214, align 2
  %216 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %13, i64 0, i32 0, i64 10
  %217 = load i8, i8* %216, align 2
  %218 = icmp slt i8 %217, 0
  %219 = icmp eq i8 %217, 0
  %220 = sub i8 0, %215
  %221 = select i1 %218, i8 %220, i8 %215
  %222 = select i1 %219, i8 0, i8 %221
  call void @llvm.lifetime.start(i64 16, i8* nonnull %103)
  store i64 %188, i64* %104, align 16
  store i64 %213, i64* %105, align 8
  %223 = getelementptr inbounds [16 x i8], [16 x i8]* %106, i64 0, i64 10
  store i8 %222, i8* %223, align 2
  %224 = load i64, i64* %105, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %103)
  %225 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %10, i64 0, i32 0, i64 11
  %226 = load i8, i8* %225, align 1
  %227 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %13, i64 0, i32 0, i64 11
  %228 = load i8, i8* %227, align 1
  %229 = icmp slt i8 %228, 0
  %230 = icmp eq i8 %228, 0
  %231 = sub i8 0, %226
  %232 = select i1 %229, i8 %231, i8 %226
  %233 = select i1 %230, i8 0, i8 %232
  call void @llvm.lifetime.start(i64 16, i8* nonnull %103)
  store i64 %188, i64* %104, align 16
  store i64 %224, i64* %105, align 8
  %234 = getelementptr inbounds [16 x i8], [16 x i8]* %106, i64 0, i64 11
  store i8 %233, i8* %234, align 1
  %235 = load i64, i64* %105, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %103)
  %236 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %10, i64 0, i32 0, i64 12
  %237 = load i8, i8* %236, align 4
  %238 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %13, i64 0, i32 0, i64 12
  %239 = load i8, i8* %238, align 4
  %240 = icmp slt i8 %239, 0
  %241 = icmp eq i8 %239, 0
  %242 = sub i8 0, %237
  %243 = select i1 %240, i8 %242, i8 %237
  %244 = select i1 %241, i8 0, i8 %243
  call void @llvm.lifetime.start(i64 16, i8* nonnull %103)
  store i64 %188, i64* %104, align 16
  store i64 %235, i64* %105, align 8
  %245 = getelementptr inbounds [16 x i8], [16 x i8]* %106, i64 0, i64 12
  store i8 %244, i8* %245, align 4
  %246 = load i64, i64* %105, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %103)
  %247 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %10, i64 0, i32 0, i64 13
  %248 = load i8, i8* %247, align 1
  %249 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %13, i64 0, i32 0, i64 13
  %250 = load i8, i8* %249, align 1
  %251 = icmp slt i8 %250, 0
  %252 = icmp eq i8 %250, 0
  %253 = sub i8 0, %248
  %254 = select i1 %251, i8 %253, i8 %248
  %255 = select i1 %252, i8 0, i8 %254
  call void @llvm.lifetime.start(i64 16, i8* nonnull %103)
  store i64 %188, i64* %104, align 16
  store i64 %246, i64* %105, align 8
  %256 = getelementptr inbounds [16 x i8], [16 x i8]* %106, i64 0, i64 13
  store i8 %255, i8* %256, align 1
  %257 = load i64, i64* %105, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %103)
  %258 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %10, i64 0, i32 0, i64 14
  %259 = load i8, i8* %258, align 2
  %260 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %13, i64 0, i32 0, i64 14
  %261 = load i8, i8* %260, align 2
  %262 = icmp slt i8 %261, 0
  %263 = icmp eq i8 %261, 0
  %264 = sub i8 0, %259
  %265 = select i1 %262, i8 %264, i8 %259
  %266 = select i1 %263, i8 0, i8 %265
  call void @llvm.lifetime.start(i64 16, i8* nonnull %103)
  store i64 %188, i64* %104, align 16
  store i64 %257, i64* %105, align 8
  %267 = getelementptr inbounds [16 x i8], [16 x i8]* %106, i64 0, i64 14
  store i8 %266, i8* %267, align 2
  %268 = load i64, i64* %105, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %103)
  %269 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %10, i64 0, i32 0, i64 15
  %270 = load i8, i8* %269, align 1
  %271 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %13, i64 0, i32 0, i64 15
  %272 = load i8, i8* %271, align 1
  %273 = icmp slt i8 %272, 0
  %274 = icmp eq i8 %272, 0
  %275 = sub i8 0, %270
  %276 = select i1 %273, i8 %275, i8 %270
  %277 = select i1 %274, i8 0, i8 %276
  call void @llvm.lifetime.start(i64 16, i8* nonnull %103)
  store i64 %188, i64* %104, align 16
  store i64 %268, i64* %105, align 8
  %278 = getelementptr inbounds [16 x i8], [16 x i8]* %106, i64 0, i64 15
  store i8 %277, i8* %278, align 1
  %279 = load i64, i64* %105, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %103)
  %280 = lshr i64 %188, 8
  %281 = lshr i64 %188, 16
  %282 = lshr i64 %188, 24
  %283 = lshr i64 %188, 32
  %284 = lshr i64 %188, 40
  %285 = lshr i64 %188, 48
  %286 = lshr i64 %188, 56
  %287 = trunc i64 %188 to i8
  %288 = trunc i64 %280 to i8
  %289 = trunc i64 %281 to i8
  %290 = trunc i64 %282 to i8
  %291 = trunc i64 %283 to i8
  %292 = trunc i64 %284 to i8
  %293 = trunc i64 %285 to i8
  %294 = trunc i64 %286 to i8
  store i8 %287, i8* %2, align 1
  %295 = getelementptr inbounds i8, i8* %2, i64 1
  store i8 %288, i8* %295, align 1
  %296 = getelementptr inbounds i8, i8* %2, i64 2
  store i8 %289, i8* %296, align 1
  %297 = getelementptr inbounds i8, i8* %2, i64 3
  store i8 %290, i8* %297, align 1
  %298 = getelementptr inbounds i8, i8* %2, i64 4
  store i8 %291, i8* %298, align 1
  %299 = getelementptr inbounds i8, i8* %2, i64 5
  store i8 %292, i8* %299, align 1
  %300 = getelementptr inbounds i8, i8* %2, i64 6
  store i8 %293, i8* %300, align 1
  %301 = getelementptr inbounds i8, i8* %2, i64 7
  store i8 %294, i8* %301, align 1
  %302 = trunc i64 %279 to i8
  %303 = getelementptr inbounds i8, i8* %2, i64 8
  store i8 %302, i8* %303, align 1
  %304 = lshr i64 %279, 8
  %305 = trunc i64 %304 to i8
  %306 = getelementptr inbounds i8, i8* %2, i64 9
  store i8 %305, i8* %306, align 1
  %307 = lshr i64 %279, 16
  %308 = trunc i64 %307 to i8
  %309 = getelementptr inbounds i8, i8* %2, i64 10
  store i8 %308, i8* %309, align 1
  %310 = lshr i64 %279, 24
  %311 = trunc i64 %310 to i8
  %312 = getelementptr inbounds i8, i8* %2, i64 11
  store i8 %311, i8* %312, align 1
  %313 = lshr i64 %279, 32
  %314 = trunc i64 %313 to i8
  %315 = getelementptr inbounds i8, i8* %2, i64 12
  store i8 %314, i8* %315, align 1
  %316 = lshr i64 %279, 40
  %317 = trunc i64 %316 to i8
  %318 = getelementptr inbounds i8, i8* %2, i64 13
  store i8 %317, i8* %318, align 1
  %319 = lshr i64 %279, 48
  %320 = trunc i64 %319 to i8
  %321 = getelementptr inbounds i8, i8* %2, i64 14
  store i8 %320, i8* %321, align 1
  %322 = lshr i64 %279, 56
  %323 = trunc i64 %322 to i8
  %324 = getelementptr inbounds i8, i8* %2, i64 15
  store i8 %323, i8* %324, align 1
  call void @llvm.lifetime.end(i64 16, i8* nonnull %17) 
  call void @llvm.lifetime.end(i64 16, i8* nonnull %14) 
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L6PSIGNWI4RVnWI7vec64_tE3RVnIS2_ES5_EEP6MemoryS7_R5StateT_T0_T1_(%struct.Memory* readnone returned, %struct.State* nocapture readnone dereferenceable(3376), i64* nocapture, i64, i64)  {
  %6 = alloca i64, align 8
  %7 = bitcast i64* %6 to i8*
  %8 = bitcast i64* %6 to [4 x i16]*
  %9 = trunc i64 %3 to i16
  %10 = trunc i64 %4 to i16
  %11 = icmp slt i16 %10, 0
  %12 = icmp eq i16 %10, 0
  %13 = sub i16 0, %9
  %14 = select i1 %11, i16 %13, i16 %9
  %15 = select i1 %12, i16 0, i16 %14
  call void @llvm.lifetime.start(i64 8, i8* nonnull %7)
  store i64 0, i64* %6, align 8
  %16 = bitcast i64* %6 to i16*
  store i16 %15, i16* %16, align 8
  %17 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %7)
  %18 = lshr i64 %3, 16
  %19 = trunc i64 %18 to i16
  %20 = lshr i64 %4, 16
  %21 = trunc i64 %20 to i16
  %22 = icmp slt i16 %21, 0
  %23 = icmp eq i16 %21, 0
  %24 = sub i16 0, %19
  %25 = select i1 %22, i16 %24, i16 %19
  %26 = select i1 %23, i16 0, i16 %25
  call void @llvm.lifetime.start(i64 8, i8* nonnull %7)
  store i64 %17, i64* %6, align 8
  %27 = getelementptr inbounds [4 x i16], [4 x i16]* %8, i64 0, i64 1
  store i16 %26, i16* %27, align 2
  %28 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %7)
  %29 = lshr i64 %3, 32
  %30 = trunc i64 %29 to i16
  %31 = lshr i64 %4, 32
  %32 = trunc i64 %31 to i16
  %33 = icmp slt i16 %32, 0
  %34 = icmp eq i16 %32, 0
  %35 = sub i16 0, %30
  %36 = select i1 %33, i16 %35, i16 %30
  %37 = select i1 %34, i16 0, i16 %36
  call void @llvm.lifetime.start(i64 8, i8* nonnull %7)
  store i64 %28, i64* %6, align 8
  %38 = getelementptr inbounds [4 x i16], [4 x i16]* %8, i64 0, i64 2
  store i16 %37, i16* %38, align 4
  %39 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %7)
  %40 = lshr i64 %3, 48
  %41 = trunc i64 %40 to i16
  %42 = lshr i64 %4, 48
  %43 = trunc i64 %42 to i16
  %44 = icmp slt i16 %43, 0
  %45 = icmp eq i16 %43, 0
  %46 = sub i16 0, %41
  %47 = select i1 %44, i16 %46, i16 %41
  %48 = select i1 %45, i16 0, i16 %47
  call void @llvm.lifetime.start(i64 8, i8* nonnull %7)
  store i64 %39, i64* %6, align 8
  %49 = getelementptr inbounds [4 x i16], [4 x i16]* %8, i64 0, i64 3
  store i16 %48, i16* %49, align 2
  %50 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %7)
  %51 = lshr i64 %50, 16
  %52 = lshr i64 %50, 32
  %53 = lshr i64 %50, 48
  %54 = trunc i64 %50 to i16
  %55 = trunc i64 %51 to i16
  %56 = trunc i64 %52 to i16
  %57 = trunc i64 %53 to i16
  %58 = bitcast i64* %2 to [4 x i16]*
  %59 = bitcast i64* %2 to i16*
  store i16 %54, i16* %59, align 1
  %60 = getelementptr inbounds [4 x i16], [4 x i16]* %58, i64 0, i64 1
  store i16 %55, i16* %60, align 1
  %61 = getelementptr inbounds [4 x i16], [4 x i16]* %58, i64 0, i64 2
  store i16 %56, i16* %61, align 1
  %62 = getelementptr inbounds [4 x i16], [4 x i16]* %58, i64 0, i64 3
  store i16 %57, i16* %62, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L6PSIGNWI4RVnWI7vec64_tE3RVnIS2_E3MVnIS2_EEEP6MemoryS9_R5StateT_T0_T1_(%struct.Memory* returned, %struct.State* nocapture readnone dereferenceable(3376), i64* nocapture, i64, i64)  {
  %6 = alloca i64, align 8
  %7 = alloca i64, align 8
  %8 = bitcast i64* %7 to %struct.int16v4_t*
  %9 = bitcast i64* %7 to i8*
  call void @llvm.lifetime.start(i64 8, i8* nonnull %9) 
  store i64 %3, i64* %7, align 8
  %10 = inttoptr i64 %4 to i16*
  %11 = load i16, i16* %10
  %12 = add i64 %4, 2
  %13 = inttoptr i64 %12 to i16*
  %14 = load i16, i16* %13
  %15 = add i64 %4, 4
  %16 = inttoptr i64 %15 to i16*
  %17 = load i16, i16* %16
  %18 = add i64 %4, 6
  %19 = inttoptr i64 %18 to i16*
  %20 = load i16, i16* %19
  %21 = bitcast i64* %6 to i8*
  %22 = bitcast i64* %6 to [4 x i16]*
  %23 = trunc i64 %3 to i16
  %24 = icmp slt i16 %11, 0
  %25 = icmp eq i16 %11, 0
  %26 = sub i16 0, %23
  %27 = select i1 %24, i16 %26, i16 %23
  %28 = select i1 %25, i16 0, i16 %27
  call void @llvm.lifetime.start(i64 8, i8* nonnull %21)
  store i64 0, i64* %6, align 8
  %29 = bitcast i64* %6 to i16*
  store i16 %28, i16* %29, align 8
  %30 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %21)
  %31 = lshr i64 %3, 16
  %32 = trunc i64 %31 to i16
  %33 = icmp slt i16 %14, 0
  %34 = icmp eq i16 %14, 0
  %35 = sub i16 0, %32
  %36 = select i1 %33, i16 %35, i16 %32
  %37 = select i1 %34, i16 0, i16 %36
  call void @llvm.lifetime.start(i64 8, i8* nonnull %21)
  store i64 %30, i64* %6, align 8
  %38 = getelementptr inbounds [4 x i16], [4 x i16]* %22, i64 0, i64 1
  store i16 %37, i16* %38, align 2
  %39 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %21)
  %40 = lshr i64 %3, 32
  %41 = trunc i64 %40 to i16
  %42 = icmp slt i16 %17, 0
  %43 = icmp eq i16 %17, 0
  %44 = sub i16 0, %41
  %45 = select i1 %42, i16 %44, i16 %41
  %46 = select i1 %43, i16 0, i16 %45
  call void @llvm.lifetime.start(i64 8, i8* nonnull %21)
  store i64 %39, i64* %6, align 8
  %47 = getelementptr inbounds [4 x i16], [4 x i16]* %22, i64 0, i64 2
  store i16 %46, i16* %47, align 4
  %48 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %21)
  %49 = getelementptr inbounds %struct.int16v4_t, %struct.int16v4_t* %8, i64 0, i32 0, i64 3
  %50 = load i16, i16* %49, align 2
  %51 = icmp slt i16 %20, 0
  %52 = icmp eq i16 %20, 0
  %53 = sub i16 0, %50
  %54 = select i1 %51, i16 %53, i16 %50
  %55 = select i1 %52, i16 0, i16 %54
  call void @llvm.lifetime.start(i64 8, i8* nonnull %21)
  store i64 %48, i64* %6, align 8
  %56 = getelementptr inbounds [4 x i16], [4 x i16]* %22, i64 0, i64 3
  store i16 %55, i16* %56, align 2
  %57 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %21)
  %58 = lshr i64 %57, 16
  %59 = lshr i64 %57, 32
  %60 = lshr i64 %57, 48
  %61 = trunc i64 %57 to i16
  %62 = trunc i64 %58 to i16
  %63 = trunc i64 %59 to i16
  %64 = trunc i64 %60 to i16
  %65 = bitcast i64* %2 to [4 x i16]*
  %66 = bitcast i64* %2 to i16*
  store i16 %61, i16* %66, align 1
  %67 = getelementptr inbounds [4 x i16], [4 x i16]* %65, i64 0, i64 1
  store i16 %62, i16* %67, align 1
  %68 = getelementptr inbounds [4 x i16], [4 x i16]* %65, i64 0, i64 2
  store i16 %63, i16* %68, align 1
  %69 = getelementptr inbounds [4 x i16], [4 x i16]* %65, i64 0, i64 3
  store i16 %64, i16* %69, align 1
  call void @llvm.lifetime.end(i64 8, i8* nonnull %9) 
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L6PSIGNWI3VnWI8vec128_tE2VnIS2_ES5_EEP6MemoryS7_R5StateT_T0_T1_(%struct.Memory* readnone returned, %struct.State* nocapture readnone dereferenceable(3376), i8* nocapture, i8* nocapture readonly, i8* nocapture readonly)  {
  %6 = alloca <2 x i64>, align 16
  %7 = bitcast <2 x i64>* %6 to { i64, i64 }*
  %8 = alloca <2 x i64>, align 16
  %9 = bitcast <2 x i64>* %8 to { i64, i64 }*
  %10 = bitcast <2 x i64>* %8 to %struct.uint16v8_t*
  %11 = alloca <2 x i64>, align 16
  %12 = bitcast <2 x i64>* %11 to { i64, i64 }*
  %13 = bitcast <2 x i64>* %11 to %struct.uint16v8_t*
  %14 = bitcast <2 x i64>* %8 to i8*
  call void @llvm.lifetime.start(i64 16, i8* nonnull %14) 
  %15 = bitcast i8* %3 to <2 x i64>*
  %16 = load <2 x i64>, <2 x i64>* %15, align 1
  store <2 x i64> %16, <2 x i64>* %8, align 16
  %17 = bitcast <2 x i64>* %11 to i8*
  call void @llvm.lifetime.start(i64 16, i8* nonnull %17) 
  %18 = bitcast i8* %4 to <2 x i64>*
  %19 = load <2 x i64>, <2 x i64>* %18, align 1
  store <2 x i64> %19, <2 x i64>* %11, align 16
  %20 = bitcast <2 x i64>* %6 to i8*
  %21 = getelementptr inbounds <2 x i64>, <2 x i64>* %6, i64 0, i64 0
  %22 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %7, i64 0, i32 1
  %23 = bitcast <2 x i64>* %6 to [8 x i16]*
  %24 = extractelement <2 x i64> %16, i32 0
  %25 = trunc i64 %24 to i16
  %26 = extractelement <2 x i64> %19, i32 0
  %27 = trunc i64 %26 to i16
  %28 = icmp slt i16 %27, 0
  %29 = icmp eq i16 %27, 0
  %30 = sub i16 0, %25
  %31 = select i1 %28, i16 %30, i16 %25
  %32 = select i1 %29, i16 0, i16 %31
  call void @llvm.lifetime.start(i64 16, i8* nonnull %20)
  store <2 x i64> zeroinitializer, <2 x i64>* %6, align 16
  %33 = bitcast <2 x i64>* %6 to i16*
  store i16 %32, i16* %33, align 16
  %34 = load i64, i64* %21, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %20)
  %35 = lshr i64 %24, 16
  %36 = trunc i64 %35 to i16
  %37 = lshr i64 %26, 16
  %38 = trunc i64 %37 to i16
  %39 = icmp slt i16 %38, 0
  %40 = icmp eq i16 %38, 0
  %41 = sub i16 0, %36
  %42 = select i1 %39, i16 %41, i16 %36
  %43 = select i1 %40, i16 0, i16 %42
  call void @llvm.lifetime.start(i64 16, i8* nonnull %20)
  store i64 %34, i64* %21, align 16
  store i64 0, i64* %22, align 8
  %44 = getelementptr inbounds [8 x i16], [8 x i16]* %23, i64 0, i64 1
  store i16 %43, i16* %44, align 2
  %45 = load i64, i64* %21, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %20)
  %46 = lshr i64 %24, 32
  %47 = trunc i64 %46 to i16
  %48 = lshr i64 %26, 32
  %49 = trunc i64 %48 to i16
  %50 = icmp slt i16 %49, 0
  %51 = icmp eq i16 %49, 0
  %52 = sub i16 0, %47
  %53 = select i1 %50, i16 %52, i16 %47
  %54 = select i1 %51, i16 0, i16 %53
  call void @llvm.lifetime.start(i64 16, i8* nonnull %20)
  store i64 %45, i64* %21, align 16
  store i64 0, i64* %22, align 8
  %55 = getelementptr inbounds [8 x i16], [8 x i16]* %23, i64 0, i64 2
  store i16 %54, i16* %55, align 4
  %56 = load i64, i64* %21, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %20)
  %57 = lshr i64 %24, 48
  %58 = trunc i64 %57 to i16
  %59 = lshr i64 %26, 48
  %60 = trunc i64 %59 to i16
  %61 = icmp slt i16 %60, 0
  %62 = icmp eq i16 %60, 0
  %63 = sub i16 0, %58
  %64 = select i1 %61, i16 %63, i16 %58
  %65 = select i1 %62, i16 0, i16 %64
  call void @llvm.lifetime.start(i64 16, i8* nonnull %20)
  store i64 %56, i64* %21, align 16
  store i64 0, i64* %22, align 8
  %66 = getelementptr inbounds [8 x i16], [8 x i16]* %23, i64 0, i64 3
  store i16 %65, i16* %66, align 2
  %67 = load i64, i64* %21, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %20)
  %68 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %9, i64 0, i32 1
  %69 = bitcast i64* %68 to i16*
  %70 = load i16, i16* %69, align 8
  %71 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %12, i64 0, i32 1
  %72 = bitcast i64* %71 to i16*
  %73 = load i16, i16* %72, align 8
  %74 = icmp slt i16 %73, 0
  %75 = icmp eq i16 %73, 0
  %76 = sub i16 0, %70
  %77 = select i1 %74, i16 %76, i16 %70
  %78 = select i1 %75, i16 0, i16 %77
  call void @llvm.lifetime.start(i64 16, i8* nonnull %20)
  store i64 %67, i64* %21, align 16
  store i64 0, i64* %22, align 8
  %79 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %7, i64 0, i32 1
  %80 = bitcast i64* %79 to i16*
  store i16 %78, i16* %80, align 8
  %81 = load i64, i64* %22, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %20)
  %82 = getelementptr inbounds %struct.uint16v8_t, %struct.uint16v8_t* %10, i64 0, i32 0, i64 5
  %83 = load i16, i16* %82, align 2
  %84 = getelementptr inbounds %struct.uint16v8_t, %struct.uint16v8_t* %13, i64 0, i32 0, i64 5
  %85 = load i16, i16* %84, align 2
  %86 = icmp slt i16 %85, 0
  %87 = icmp eq i16 %85, 0
  %88 = sub i16 0, %83
  %89 = select i1 %86, i16 %88, i16 %83
  %90 = select i1 %87, i16 0, i16 %89
  call void @llvm.lifetime.start(i64 16, i8* nonnull %20)
  store i64 %67, i64* %21, align 16
  store i64 %81, i64* %22, align 8
  %91 = getelementptr inbounds [8 x i16], [8 x i16]* %23, i64 0, i64 5
  store i16 %90, i16* %91, align 2
  %92 = load i64, i64* %22, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %20)
  %93 = getelementptr inbounds %struct.uint16v8_t, %struct.uint16v8_t* %10, i64 0, i32 0, i64 6
  %94 = load i16, i16* %93, align 4
  %95 = getelementptr inbounds %struct.uint16v8_t, %struct.uint16v8_t* %13, i64 0, i32 0, i64 6
  %96 = load i16, i16* %95, align 4
  %97 = icmp slt i16 %96, 0
  %98 = icmp eq i16 %96, 0
  %99 = sub i16 0, %94
  %100 = select i1 %97, i16 %99, i16 %94
  %101 = select i1 %98, i16 0, i16 %100
  call void @llvm.lifetime.start(i64 16, i8* nonnull %20)
  store i64 %67, i64* %21, align 16
  store i64 %92, i64* %22, align 8
  %102 = getelementptr inbounds [8 x i16], [8 x i16]* %23, i64 0, i64 6
  store i16 %101, i16* %102, align 4
  %103 = load i64, i64* %22, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %20)
  %104 = getelementptr inbounds %struct.uint16v8_t, %struct.uint16v8_t* %10, i64 0, i32 0, i64 7
  %105 = load i16, i16* %104, align 2
  %106 = getelementptr inbounds %struct.uint16v8_t, %struct.uint16v8_t* %13, i64 0, i32 0, i64 7
  %107 = load i16, i16* %106, align 2
  %108 = icmp slt i16 %107, 0
  %109 = icmp eq i16 %107, 0
  %110 = sub i16 0, %105
  %111 = select i1 %108, i16 %110, i16 %105
  %112 = select i1 %109, i16 0, i16 %111
  call void @llvm.lifetime.start(i64 16, i8* nonnull %20)
  store i64 %67, i64* %21, align 16
  store i64 %103, i64* %22, align 8
  %113 = getelementptr inbounds [8 x i16], [8 x i16]* %23, i64 0, i64 7
  store i16 %112, i16* %113, align 2
  %114 = load i64, i64* %22, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %20)
  %115 = lshr i64 %67, 16
  %116 = lshr i64 %67, 32
  %117 = lshr i64 %67, 48
  %118 = trunc i64 %67 to i16
  %119 = trunc i64 %115 to i16
  %120 = trunc i64 %116 to i16
  %121 = trunc i64 %117 to i16
  %122 = bitcast i8* %2 to i16*
  store i16 %118, i16* %122, align 1
  %123 = getelementptr inbounds i8, i8* %2, i64 2
  %124 = bitcast i8* %123 to i16*
  store i16 %119, i16* %124, align 1
  %125 = getelementptr inbounds i8, i8* %2, i64 4
  %126 = bitcast i8* %125 to i16*
  store i16 %120, i16* %126, align 1
  %127 = getelementptr inbounds i8, i8* %2, i64 6
  %128 = bitcast i8* %127 to i16*
  store i16 %121, i16* %128, align 1
  %129 = trunc i64 %114 to i16
  %130 = getelementptr inbounds i8, i8* %2, i64 8
  %131 = bitcast i8* %130 to i16*
  store i16 %129, i16* %131, align 1
  %132 = lshr i64 %114, 16
  %133 = trunc i64 %132 to i16
  %134 = getelementptr inbounds i8, i8* %2, i64 10
  %135 = bitcast i8* %134 to i16*
  store i16 %133, i16* %135, align 1
  %136 = lshr i64 %114, 32
  %137 = trunc i64 %136 to i16
  %138 = getelementptr inbounds i8, i8* %2, i64 12
  %139 = bitcast i8* %138 to i16*
  store i16 %137, i16* %139, align 1
  %140 = lshr i64 %114, 48
  %141 = trunc i64 %140 to i16
  %142 = getelementptr inbounds i8, i8* %2, i64 14
  %143 = bitcast i8* %142 to i16*
  store i16 %141, i16* %143, align 1
  call void @llvm.lifetime.end(i64 16, i8* nonnull %17) 
  call void @llvm.lifetime.end(i64 16, i8* nonnull %14) 
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L6PSIGNWI3VnWI8vec128_tE2VnIS2_E3MVnIS2_EEEP6MemoryS9_R5StateT_T0_T1_(%struct.Memory* returned, %struct.State* nocapture readnone dereferenceable(3376), i8* nocapture, i8* nocapture readonly, i64)  {
  %6 = alloca <2 x i64>, align 16
  %7 = bitcast <2 x i64>* %6 to { i64, i64 }*
  %8 = alloca <2 x i64>, align 16
  %9 = bitcast <2 x i64>* %8 to { i64, i64 }*
  %10 = bitcast <2 x i64>* %8 to %struct.uint16v8_t*
  %11 = alloca <2 x i64>, align 16
  %12 = bitcast <2 x i64>* %11 to { i64, i64 }*
  %13 = bitcast <2 x i64>* %11 to %struct.uint16v8_t*
  %14 = bitcast <2 x i64>* %8 to i8*
  call void @llvm.lifetime.start(i64 16, i8* nonnull %14) 
  %15 = bitcast i8* %3 to <2 x i64>*
  %16 = load <2 x i64>, <2 x i64>* %15, align 1
  store <2 x i64> %16, <2 x i64>* %8, align 16
  %17 = bitcast <2 x i64>* %11 to i8*
  call void @llvm.lifetime.start(i64 16, i8* nonnull %17) 
  %18 = inttoptr i64 %4 to i16*
  %19 = load i16, i16* %18
  %20 = add i64 %4, 2
  %21 = inttoptr i64 %20 to i16*
  %22 = load i16, i16* %21
  %23 = add i64 %4, 4
  %24 = inttoptr i64 %23 to i16*
  %25 = load i16, i16* %24
  %26 = add i64 %4, 6
  %27 = inttoptr i64 %26 to i16*
  %28 = load i16, i16* %27
  %29 = add i64 %4, 8
  %30 = inttoptr i64 %29 to i16*
  %31 = load i16, i16* %30
  %32 = add i64 %4, 10
  %33 = inttoptr i64 %32 to i16*
  %34 = load i16, i16* %33
  %35 = add i64 %4, 12
  %36 = inttoptr i64 %35 to i16*
  %37 = load i16, i16* %36
  %38 = add i64 %4, 14
  %39 = inttoptr i64 %38 to i16*
  %40 = load i16, i16* %39
  %41 = insertelement <2 x i16> undef, i16 %28, i32 0
  %42 = insertelement <2 x i16> %41, i16 %40, i32 1
  %43 = zext <2 x i16> %42 to <2 x i64>
  %44 = shl nuw <2 x i64> %43, <i64 48, i64 48>
  %45 = insertelement <2 x i16> undef, i16 %25, i32 0
  %46 = insertelement <2 x i16> %45, i16 %37, i32 1
  %47 = zext <2 x i16> %46 to <2 x i64>
  %48 = shl nuw nsw <2 x i64> %47, <i64 32, i64 32>
  %49 = insertelement <2 x i16> undef, i16 %22, i32 0
  %50 = insertelement <2 x i16> %49, i16 %34, i32 1
  %51 = zext <2 x i16> %50 to <2 x i64>
  %52 = shl nuw nsw <2 x i64> %51, <i64 16, i64 16>
  %53 = insertelement <2 x i16> undef, i16 %19, i32 0
  %54 = insertelement <2 x i16> %53, i16 %31, i32 1
  %55 = zext <2 x i16> %54 to <2 x i64>
  %56 = or <2 x i64> %52, %55
  %57 = or <2 x i64> %56, %48
  %58 = or <2 x i64> %57, %44
  store <2 x i64> %58, <2 x i64>* %11, align 16
  %59 = bitcast <2 x i64>* %6 to i8*
  %60 = getelementptr inbounds <2 x i64>, <2 x i64>* %6, i64 0, i64 0
  %61 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %7, i64 0, i32 1
  %62 = bitcast <2 x i64>* %6 to [8 x i16]*
  %63 = extractelement <2 x i64> %16, i32 0
  %64 = trunc i64 %63 to i16
  %65 = icmp slt i16 %19, 0
  %66 = icmp eq i16 %19, 0
  %67 = sub i16 0, %64
  %68 = select i1 %65, i16 %67, i16 %64
  %69 = select i1 %66, i16 0, i16 %68
  call void @llvm.lifetime.start(i64 16, i8* nonnull %59)
  store <2 x i64> zeroinitializer, <2 x i64>* %6, align 16
  %70 = bitcast <2 x i64>* %6 to i16*
  store i16 %69, i16* %70, align 16
  %71 = load i64, i64* %60, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %59)
  %72 = lshr i64 %63, 16
  %73 = trunc i64 %72 to i16
  %74 = icmp slt i16 %22, 0
  %75 = icmp eq i16 %22, 0
  %76 = sub i16 0, %73
  %77 = select i1 %74, i16 %76, i16 %73
  %78 = select i1 %75, i16 0, i16 %77
  call void @llvm.lifetime.start(i64 16, i8* nonnull %59)
  store i64 %71, i64* %60, align 16
  store i64 0, i64* %61, align 8
  %79 = getelementptr inbounds [8 x i16], [8 x i16]* %62, i64 0, i64 1
  store i16 %78, i16* %79, align 2
  %80 = load i64, i64* %60, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %59)
  %81 = lshr i64 %63, 32
  %82 = trunc i64 %81 to i16
  %83 = icmp slt i16 %25, 0
  %84 = icmp eq i16 %25, 0
  %85 = sub i16 0, %82
  %86 = select i1 %83, i16 %85, i16 %82
  %87 = select i1 %84, i16 0, i16 %86
  call void @llvm.lifetime.start(i64 16, i8* nonnull %59)
  store i64 %80, i64* %60, align 16
  store i64 0, i64* %61, align 8
  %88 = getelementptr inbounds [8 x i16], [8 x i16]* %62, i64 0, i64 2
  store i16 %87, i16* %88, align 4
  %89 = load i64, i64* %60, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %59)
  %90 = getelementptr inbounds %struct.uint16v8_t, %struct.uint16v8_t* %10, i64 0, i32 0, i64 3
  %91 = load i16, i16* %90, align 2
  %92 = icmp slt i16 %28, 0
  %93 = icmp eq i16 %28, 0
  %94 = sub i16 0, %91
  %95 = select i1 %92, i16 %94, i16 %91
  %96 = select i1 %93, i16 0, i16 %95
  call void @llvm.lifetime.start(i64 16, i8* nonnull %59)
  store i64 %89, i64* %60, align 16
  store i64 0, i64* %61, align 8
  %97 = getelementptr inbounds [8 x i16], [8 x i16]* %62, i64 0, i64 3
  store i16 %96, i16* %97, align 2
  %98 = load i64, i64* %60, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %59)
  %99 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %9, i64 0, i32 1
  %100 = bitcast i64* %99 to i16*
  %101 = load i16, i16* %100, align 8
  %102 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %12, i64 0, i32 1
  %103 = bitcast i64* %102 to i16*
  %104 = load i16, i16* %103, align 8
  %105 = icmp slt i16 %104, 0
  %106 = icmp eq i16 %104, 0
  %107 = sub i16 0, %101
  %108 = select i1 %105, i16 %107, i16 %101
  %109 = select i1 %106, i16 0, i16 %108
  call void @llvm.lifetime.start(i64 16, i8* nonnull %59)
  store i64 %98, i64* %60, align 16
  store i64 0, i64* %61, align 8
  %110 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %7, i64 0, i32 1
  %111 = bitcast i64* %110 to i16*
  store i16 %109, i16* %111, align 8
  %112 = load i64, i64* %61, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %59)
  %113 = getelementptr inbounds %struct.uint16v8_t, %struct.uint16v8_t* %10, i64 0, i32 0, i64 5
  %114 = load i16, i16* %113, align 2
  %115 = getelementptr inbounds %struct.uint16v8_t, %struct.uint16v8_t* %13, i64 0, i32 0, i64 5
  %116 = load i16, i16* %115, align 2
  %117 = icmp slt i16 %116, 0
  %118 = icmp eq i16 %116, 0
  %119 = sub i16 0, %114
  %120 = select i1 %117, i16 %119, i16 %114
  %121 = select i1 %118, i16 0, i16 %120
  call void @llvm.lifetime.start(i64 16, i8* nonnull %59)
  store i64 %98, i64* %60, align 16
  store i64 %112, i64* %61, align 8
  %122 = getelementptr inbounds [8 x i16], [8 x i16]* %62, i64 0, i64 5
  store i16 %121, i16* %122, align 2
  %123 = load i64, i64* %61, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %59)
  %124 = getelementptr inbounds %struct.uint16v8_t, %struct.uint16v8_t* %10, i64 0, i32 0, i64 6
  %125 = load i16, i16* %124, align 4
  %126 = getelementptr inbounds %struct.uint16v8_t, %struct.uint16v8_t* %13, i64 0, i32 0, i64 6
  %127 = load i16, i16* %126, align 4
  %128 = icmp slt i16 %127, 0
  %129 = icmp eq i16 %127, 0
  %130 = sub i16 0, %125
  %131 = select i1 %128, i16 %130, i16 %125
  %132 = select i1 %129, i16 0, i16 %131
  call void @llvm.lifetime.start(i64 16, i8* nonnull %59)
  store i64 %98, i64* %60, align 16
  store i64 %123, i64* %61, align 8
  %133 = getelementptr inbounds [8 x i16], [8 x i16]* %62, i64 0, i64 6
  store i16 %132, i16* %133, align 4
  %134 = load i64, i64* %61, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %59)
  %135 = getelementptr inbounds %struct.uint16v8_t, %struct.uint16v8_t* %10, i64 0, i32 0, i64 7
  %136 = load i16, i16* %135, align 2
  %137 = getelementptr inbounds %struct.uint16v8_t, %struct.uint16v8_t* %13, i64 0, i32 0, i64 7
  %138 = load i16, i16* %137, align 2
  %139 = icmp slt i16 %138, 0
  %140 = icmp eq i16 %138, 0
  %141 = sub i16 0, %136
  %142 = select i1 %139, i16 %141, i16 %136
  %143 = select i1 %140, i16 0, i16 %142
  call void @llvm.lifetime.start(i64 16, i8* nonnull %59)
  store i64 %98, i64* %60, align 16
  store i64 %134, i64* %61, align 8
  %144 = getelementptr inbounds [8 x i16], [8 x i16]* %62, i64 0, i64 7
  store i16 %143, i16* %144, align 2
  %145 = load i64, i64* %61, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %59)
  %146 = lshr i64 %98, 16
  %147 = lshr i64 %98, 32
  %148 = lshr i64 %98, 48
  %149 = trunc i64 %98 to i16
  %150 = trunc i64 %146 to i16
  %151 = trunc i64 %147 to i16
  %152 = trunc i64 %148 to i16
  %153 = bitcast i8* %2 to i16*
  store i16 %149, i16* %153, align 1
  %154 = getelementptr inbounds i8, i8* %2, i64 2
  %155 = bitcast i8* %154 to i16*
  store i16 %150, i16* %155, align 1
  %156 = getelementptr inbounds i8, i8* %2, i64 4
  %157 = bitcast i8* %156 to i16*
  store i16 %151, i16* %157, align 1
  %158 = getelementptr inbounds i8, i8* %2, i64 6
  %159 = bitcast i8* %158 to i16*
  store i16 %152, i16* %159, align 1
  %160 = trunc i64 %145 to i16
  %161 = getelementptr inbounds i8, i8* %2, i64 8
  %162 = bitcast i8* %161 to i16*
  store i16 %160, i16* %162, align 1
  %163 = lshr i64 %145, 16
  %164 = trunc i64 %163 to i16
  %165 = getelementptr inbounds i8, i8* %2, i64 10
  %166 = bitcast i8* %165 to i16*
  store i16 %164, i16* %166, align 1
  %167 = lshr i64 %145, 32
  %168 = trunc i64 %167 to i16
  %169 = getelementptr inbounds i8, i8* %2, i64 12
  %170 = bitcast i8* %169 to i16*
  store i16 %168, i16* %170, align 1
  %171 = lshr i64 %145, 48
  %172 = trunc i64 %171 to i16
  %173 = getelementptr inbounds i8, i8* %2, i64 14
  %174 = bitcast i8* %173 to i16*
  store i16 %172, i16* %174, align 1
  call void @llvm.lifetime.end(i64 16, i8* nonnull %17) 
  call void @llvm.lifetime.end(i64 16, i8* nonnull %14) 
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L6PSIGNDI4RVnWI7vec64_tE3RVnIS2_ES5_EEP6MemoryS7_R5StateT_T0_T1_(%struct.Memory* readnone returned, %struct.State* nocapture readnone dereferenceable(3376), i64* nocapture, i64, i64)  {
  %6 = alloca i64, align 8
  %7 = bitcast i64* %6 to i8*
  %8 = bitcast i64* %6 to [2 x i32]*
  %9 = trunc i64 %3 to i32
  %10 = trunc i64 %4 to i32
  %11 = icmp slt i32 %10, 0
  %12 = icmp eq i32 %10, 0
  %13 = sub i32 0, %9
  %14 = select i1 %11, i32 %13, i32 %9
  %15 = select i1 %12, i32 0, i32 %14
  call void @llvm.lifetime.start(i64 8, i8* nonnull %7)
  store i64 0, i64* %6, align 8
  %16 = bitcast i64* %6 to i32*
  store i32 %15, i32* %16, align 8
  %17 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %7)
  %18 = lshr i64 %3, 32
  %19 = trunc i64 %18 to i32
  %20 = lshr i64 %4, 32
  %21 = trunc i64 %20 to i32
  %22 = icmp slt i32 %21, 0
  %23 = icmp eq i32 %21, 0
  %24 = sub i32 0, %19
  %25 = select i1 %22, i32 %24, i32 %19
  %26 = select i1 %23, i32 0, i32 %25
  call void @llvm.lifetime.start(i64 8, i8* nonnull %7)
  store i64 %17, i64* %6, align 8
  %27 = getelementptr inbounds [2 x i32], [2 x i32]* %8, i64 0, i64 1
  store i32 %26, i32* %27, align 4
  %28 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %7)
  %29 = lshr i64 %28, 32
  %30 = trunc i64 %28 to i32
  %31 = trunc i64 %29 to i32
  %32 = bitcast i64* %2 to [2 x i32]*
  %33 = bitcast i64* %2 to i32*
  store i32 %30, i32* %33, align 1
  %34 = getelementptr inbounds [2 x i32], [2 x i32]* %32, i64 0, i64 1
  store i32 %31, i32* %34, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L6PSIGNDI4RVnWI7vec64_tE3RVnIS2_E3MVnIS2_EEEP6MemoryS9_R5StateT_T0_T1_(%struct.Memory* returned, %struct.State* nocapture readnone dereferenceable(3376), i64* nocapture, i64, i64)  {
  %6 = alloca i64, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7
  %9 = add i64 %4, 4
  %10 = inttoptr i64 %9 to i32*
  %11 = load i32, i32* %10
  %12 = bitcast i64* %6 to i8*
  %13 = bitcast i64* %6 to [2 x i32]*
  %14 = trunc i64 %3 to i32
  %15 = icmp slt i32 %8, 0
  %16 = icmp eq i32 %8, 0
  %17 = sub i32 0, %14
  %18 = select i1 %15, i32 %17, i32 %14
  %19 = select i1 %16, i32 0, i32 %18
  call void @llvm.lifetime.start(i64 8, i8* nonnull %12)
  store i64 0, i64* %6, align 8
  %20 = bitcast i64* %6 to i32*
  store i32 %19, i32* %20, align 8
  %21 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %12)
  %22 = lshr i64 %3, 32
  %23 = trunc i64 %22 to i32
  %24 = icmp slt i32 %11, 0
  %25 = icmp eq i32 %11, 0
  %26 = sub i32 0, %23
  %27 = select i1 %24, i32 %26, i32 %23
  %28 = select i1 %25, i32 0, i32 %27
  call void @llvm.lifetime.start(i64 8, i8* nonnull %12)
  store i64 %21, i64* %6, align 8
  %29 = getelementptr inbounds [2 x i32], [2 x i32]* %13, i64 0, i64 1
  store i32 %28, i32* %29, align 4
  %30 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %12)
  %31 = lshr i64 %30, 32
  %32 = trunc i64 %30 to i32
  %33 = trunc i64 %31 to i32
  %34 = bitcast i64* %2 to [2 x i32]*
  %35 = bitcast i64* %2 to i32*
  store i32 %32, i32* %35, align 1
  %36 = getelementptr inbounds [2 x i32], [2 x i32]* %34, i64 0, i64 1
  store i32 %33, i32* %36, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L6PSIGNDI3VnWI8vec128_tE2VnIS2_ES5_EEP6MemoryS7_R5StateT_T0_T1_(%struct.Memory* readnone returned, %struct.State* nocapture readnone dereferenceable(3376), i8* nocapture, i8* nocapture readonly, i8* nocapture readonly)  {
  %6 = alloca <2 x i64>, align 16
  %7 = bitcast <2 x i64>* %6 to { i64, i64 }*
  %8 = bitcast i8* %3 to i64*
  %9 = load i64, i64* %8, align 1
  %10 = getelementptr inbounds i8, i8* %3, i64 8
  %11 = bitcast i8* %10 to i64*
  %12 = load i64, i64* %11, align 1
  %13 = bitcast i8* %4 to i64*
  %14 = load i64, i64* %13, align 1
  %15 = getelementptr inbounds i8, i8* %4, i64 8
  %16 = bitcast i8* %15 to i64*
  %17 = load i64, i64* %16, align 1
  %18 = bitcast <2 x i64>* %6 to i8*
  %19 = getelementptr inbounds <2 x i64>, <2 x i64>* %6, i64 0, i64 0
  %20 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %7, i64 0, i32 1
  %21 = bitcast <2 x i64>* %6 to [4 x i32]*
  %22 = trunc i64 %9 to i32
  %23 = trunc i64 %14 to i32
  %24 = icmp slt i32 %23, 0
  %25 = icmp eq i32 %23, 0
  %26 = sub i32 0, %22
  %27 = select i1 %24, i32 %26, i32 %22
  %28 = select i1 %25, i32 0, i32 %27
  call void @llvm.lifetime.start(i64 16, i8* nonnull %18)
  store <2 x i64> zeroinitializer, <2 x i64>* %6, align 16
  %29 = bitcast <2 x i64>* %6 to i32*
  store i32 %28, i32* %29, align 16
  %30 = load i64, i64* %19, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %18)
  %31 = lshr i64 %9, 32
  %32 = trunc i64 %31 to i32
  %33 = lshr i64 %14, 32
  %34 = trunc i64 %33 to i32
  %35 = icmp slt i32 %34, 0
  %36 = icmp eq i32 %34, 0
  %37 = sub i32 0, %32
  %38 = select i1 %35, i32 %37, i32 %32
  %39 = select i1 %36, i32 0, i32 %38
  call void @llvm.lifetime.start(i64 16, i8* nonnull %18)
  store i64 %30, i64* %19, align 16
  store i64 0, i64* %20, align 8
  %40 = getelementptr inbounds [4 x i32], [4 x i32]* %21, i64 0, i64 1
  store i32 %39, i32* %40, align 4
  %41 = load i64, i64* %19, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %18)
  %42 = trunc i64 %12 to i32
  %43 = trunc i64 %17 to i32
  %44 = icmp slt i32 %43, 0
  %45 = icmp eq i32 %43, 0
  %46 = sub i32 0, %42
  %47 = select i1 %44, i32 %46, i32 %42
  %48 = select i1 %45, i32 0, i32 %47
  call void @llvm.lifetime.start(i64 16, i8* nonnull %18)
  store i64 %41, i64* %19, align 16
  store i64 0, i64* %20, align 8
  %49 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %7, i64 0, i32 1
  %50 = bitcast i64* %49 to i32*
  store i32 %48, i32* %50, align 8
  %51 = load i64, i64* %20, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %18)
  %52 = lshr i64 %12, 32
  %53 = trunc i64 %52 to i32
  %54 = lshr i64 %17, 32
  %55 = trunc i64 %54 to i32
  %56 = icmp slt i32 %55, 0
  %57 = icmp eq i32 %55, 0
  %58 = sub i32 0, %53
  %59 = select i1 %56, i32 %58, i32 %53
  %60 = select i1 %57, i32 0, i32 %59
  call void @llvm.lifetime.start(i64 16, i8* nonnull %18)
  store i64 %41, i64* %19, align 16
  store i64 %51, i64* %20, align 8
  %61 = getelementptr inbounds [4 x i32], [4 x i32]* %21, i64 0, i64 3
  store i32 %60, i32* %61, align 4
  %62 = load i64, i64* %20, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %18)
  %63 = lshr i64 %41, 32
  %64 = trunc i64 %41 to i32
  %65 = trunc i64 %63 to i32
  %66 = bitcast i8* %2 to i32*
  store i32 %64, i32* %66, align 1
  %67 = getelementptr inbounds i8, i8* %2, i64 4
  %68 = bitcast i8* %67 to i32*
  store i32 %65, i32* %68, align 1
  %69 = trunc i64 %62 to i32
  %70 = getelementptr inbounds i8, i8* %2, i64 8
  %71 = bitcast i8* %70 to i32*
  store i32 %69, i32* %71, align 1
  %72 = lshr i64 %62, 32
  %73 = trunc i64 %72 to i32
  %74 = getelementptr inbounds i8, i8* %2, i64 12
  %75 = bitcast i8* %74 to i32*
  store i32 %73, i32* %75, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L6PSIGNDI3VnWI8vec128_tE2VnIS2_E3MVnIS2_EEEP6MemoryS9_R5StateT_T0_T1_(%struct.Memory* returned, %struct.State* nocapture readnone dereferenceable(3376), i8* nocapture, i8* nocapture readonly, i64)  {
  %6 = alloca <2 x i64>, align 16
  %7 = bitcast <2 x i64>* %6 to { i64, i64 }*
  %8 = bitcast i8* %3 to i64*
  %9 = load i64, i64* %8, align 1
  %10 = getelementptr inbounds i8, i8* %3, i64 8
  %11 = bitcast i8* %10 to i64*
  %12 = load i64, i64* %11, align 1
  %13 = inttoptr i64 %4 to i32*
  %14 = load i32, i32* %13
  %15 = add i64 %4, 4
  %16 = inttoptr i64 %15 to i32*
  %17 = load i32, i32* %16
  %18 = add i64 %4, 8
  %19 = inttoptr i64 %18 to i32*
  %20 = load i32, i32* %19
  %21 = add i64 %4, 12
  %22 = inttoptr i64 %21 to i32*
  %23 = load i32, i32* %22
  %24 = bitcast <2 x i64>* %6 to i8*
  %25 = getelementptr inbounds <2 x i64>, <2 x i64>* %6, i64 0, i64 0
  %26 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %7, i64 0, i32 1
  %27 = bitcast <2 x i64>* %6 to [4 x i32]*
  %28 = trunc i64 %9 to i32
  %29 = icmp slt i32 %14, 0
  %30 = icmp eq i32 %14, 0
  %31 = sub i32 0, %28
  %32 = select i1 %29, i32 %31, i32 %28
  %33 = select i1 %30, i32 0, i32 %32
  call void @llvm.lifetime.start(i64 16, i8* nonnull %24)
  store <2 x i64> zeroinitializer, <2 x i64>* %6, align 16
  %34 = bitcast <2 x i64>* %6 to i32*
  store i32 %33, i32* %34, align 16
  %35 = load i64, i64* %25, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %24)
  %36 = lshr i64 %9, 32
  %37 = trunc i64 %36 to i32
  %38 = icmp slt i32 %17, 0
  %39 = icmp eq i32 %17, 0
  %40 = sub i32 0, %37
  %41 = select i1 %38, i32 %40, i32 %37
  %42 = select i1 %39, i32 0, i32 %41
  call void @llvm.lifetime.start(i64 16, i8* nonnull %24)
  store i64 %35, i64* %25, align 16
  store i64 0, i64* %26, align 8
  %43 = getelementptr inbounds [4 x i32], [4 x i32]* %27, i64 0, i64 1
  store i32 %42, i32* %43, align 4
  %44 = load i64, i64* %25, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %24)
  %45 = trunc i64 %12 to i32
  %46 = icmp slt i32 %20, 0
  %47 = icmp eq i32 %20, 0
  %48 = sub i32 0, %45
  %49 = select i1 %46, i32 %48, i32 %45
  %50 = select i1 %47, i32 0, i32 %49
  call void @llvm.lifetime.start(i64 16, i8* nonnull %24)
  store i64 %44, i64* %25, align 16
  store i64 0, i64* %26, align 8
  %51 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %7, i64 0, i32 1
  %52 = bitcast i64* %51 to i32*
  store i32 %50, i32* %52, align 8
  %53 = load i64, i64* %26, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %24)
  %54 = lshr i64 %12, 32
  %55 = trunc i64 %54 to i32
  %56 = icmp slt i32 %23, 0
  %57 = icmp eq i32 %23, 0
  %58 = sub i32 0, %55
  %59 = select i1 %56, i32 %58, i32 %55
  %60 = select i1 %57, i32 0, i32 %59
  call void @llvm.lifetime.start(i64 16, i8* nonnull %24)
  store i64 %44, i64* %25, align 16
  store i64 %53, i64* %26, align 8
  %61 = getelementptr inbounds [4 x i32], [4 x i32]* %27, i64 0, i64 3
  store i32 %60, i32* %61, align 4
  %62 = load i64, i64* %26, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %24)
  %63 = lshr i64 %44, 32
  %64 = trunc i64 %44 to i32
  %65 = trunc i64 %63 to i32
  %66 = bitcast i8* %2 to i32*
  store i32 %64, i32* %66, align 1
  %67 = getelementptr inbounds i8, i8* %2, i64 4
  %68 = bitcast i8* %67 to i32*
  store i32 %65, i32* %68, align 1
  %69 = trunc i64 %62 to i32
  %70 = getelementptr inbounds i8, i8* %2, i64 8
  %71 = bitcast i8* %70 to i32*
  store i32 %69, i32* %71, align 1
  %72 = lshr i64 %62, 32
  %73 = trunc i64 %72 to i32
  %74 = getelementptr inbounds i8, i8* %2, i64 12
  %75 = bitcast i8* %74 to i32*
  store i32 %73, i32* %75, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L6PSHUFBI4RVnWI7vec64_tE3RVnIS2_ES5_EEP6MemoryS7_R5StateT_T0_T1_(%struct.Memory* readnone returned, %struct.State* nocapture readnone dereferenceable(3376), i64* nocapture, i64, i64)  {
  %6 = alloca i64, align 8
  %7 = alloca i64, align 8
  %8 = bitcast i64* %7 to %struct.uint8v8_t*
  %9 = alloca i64, align 8
  %10 = bitcast i64* %9 to %struct.uint8v8_t*
  %11 = bitcast i64* %7 to i8*
  call void @llvm.lifetime.start(i64 8, i8* nonnull %11) 
  store i64 %3, i64* %7, align 8
  %12 = bitcast i64* %9 to i8*
  call void @llvm.lifetime.start(i64 8, i8* nonnull %12) 
  store i64 %4, i64* %9, align 8
  %13 = bitcast i64* %6 to i8*
  %14 = bitcast i64* %6 to [8 x i8]*
  %15 = trunc i64 %4 to i8
  %16 = and i64 %4, 7
  %17 = getelementptr inbounds %struct.uint8v8_t, %struct.uint8v8_t* %8, i64 0, i32 0, i64 %16
  %18 = load i8, i8* %17, align 1
  %19 = icmp slt i8 %15, 0
  %20 = select i1 %19, i8 0, i8 %18
  call void @llvm.lifetime.start(i64 8, i8* nonnull %13)
  store i64 0, i64* %6, align 8
  %21 = bitcast i64* %6 to i8*
  store i8 %20, i8* %21, align 8
  %22 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %13)
  %23 = lshr i64 %4, 8
  %24 = trunc i64 %23 to i8
  %25 = and i64 %23, 7
  %26 = getelementptr inbounds %struct.uint8v8_t, %struct.uint8v8_t* %8, i64 0, i32 0, i64 %25
  %27 = load i8, i8* %26, align 1
  %28 = icmp slt i8 %24, 0
  %29 = select i1 %28, i8 0, i8 %27
  call void @llvm.lifetime.start(i64 8, i8* nonnull %13)
  store i64 %22, i64* %6, align 8
  %30 = getelementptr inbounds [8 x i8], [8 x i8]* %14, i64 0, i64 1
  store i8 %29, i8* %30, align 1
  %31 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %13)
  %32 = lshr i64 %4, 16
  %33 = trunc i64 %32 to i8
  %34 = and i64 %32, 7
  %35 = getelementptr inbounds %struct.uint8v8_t, %struct.uint8v8_t* %8, i64 0, i32 0, i64 %34
  %36 = load i8, i8* %35, align 1
  %37 = icmp slt i8 %33, 0
  %38 = select i1 %37, i8 0, i8 %36
  call void @llvm.lifetime.start(i64 8, i8* nonnull %13)
  store i64 %31, i64* %6, align 8
  %39 = getelementptr inbounds [8 x i8], [8 x i8]* %14, i64 0, i64 2
  store i8 %38, i8* %39, align 2
  %40 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %13)
  %41 = getelementptr inbounds %struct.uint8v8_t, %struct.uint8v8_t* %10, i64 0, i32 0, i64 3
  %42 = load i8, i8* %41, align 1
  %43 = and i8 %42, 7
  %44 = zext i8 %43 to i64
  %45 = getelementptr inbounds %struct.uint8v8_t, %struct.uint8v8_t* %8, i64 0, i32 0, i64 %44
  %46 = load i8, i8* %45, align 1
  %47 = icmp slt i8 %42, 0
  %48 = select i1 %47, i8 0, i8 %46
  call void @llvm.lifetime.start(i64 8, i8* nonnull %13)
  store i64 %40, i64* %6, align 8
  %49 = getelementptr inbounds [8 x i8], [8 x i8]* %14, i64 0, i64 3
  store i8 %48, i8* %49, align 1
  %50 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %13)
  %51 = getelementptr inbounds %struct.uint8v8_t, %struct.uint8v8_t* %10, i64 0, i32 0, i64 4
  %52 = load i8, i8* %51, align 4
  %53 = and i8 %52, 7
  %54 = zext i8 %53 to i64
  %55 = getelementptr inbounds %struct.uint8v8_t, %struct.uint8v8_t* %8, i64 0, i32 0, i64 %54
  %56 = load i8, i8* %55, align 1
  %57 = icmp slt i8 %52, 0
  %58 = select i1 %57, i8 0, i8 %56
  call void @llvm.lifetime.start(i64 8, i8* nonnull %13)
  store i64 %50, i64* %6, align 8
  %59 = getelementptr inbounds [8 x i8], [8 x i8]* %14, i64 0, i64 4
  store i8 %58, i8* %59, align 4
  %60 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %13)
  %61 = getelementptr inbounds %struct.uint8v8_t, %struct.uint8v8_t* %10, i64 0, i32 0, i64 5
  %62 = load i8, i8* %61, align 1
  %63 = and i8 %62, 7
  %64 = zext i8 %63 to i64
  %65 = getelementptr inbounds %struct.uint8v8_t, %struct.uint8v8_t* %8, i64 0, i32 0, i64 %64
  %66 = load i8, i8* %65, align 1
  %67 = icmp slt i8 %62, 0
  %68 = select i1 %67, i8 0, i8 %66
  call void @llvm.lifetime.start(i64 8, i8* nonnull %13)
  store i64 %60, i64* %6, align 8
  %69 = getelementptr inbounds [8 x i8], [8 x i8]* %14, i64 0, i64 5
  store i8 %68, i8* %69, align 1
  %70 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %13)
  %71 = getelementptr inbounds %struct.uint8v8_t, %struct.uint8v8_t* %10, i64 0, i32 0, i64 6
  %72 = load i8, i8* %71, align 2
  %73 = and i8 %72, 7
  %74 = zext i8 %73 to i64
  %75 = getelementptr inbounds %struct.uint8v8_t, %struct.uint8v8_t* %8, i64 0, i32 0, i64 %74
  %76 = load i8, i8* %75, align 1
  %77 = icmp slt i8 %72, 0
  %78 = select i1 %77, i8 0, i8 %76
  call void @llvm.lifetime.start(i64 8, i8* nonnull %13)
  store i64 %70, i64* %6, align 8
  %79 = getelementptr inbounds [8 x i8], [8 x i8]* %14, i64 0, i64 6
  store i8 %78, i8* %79, align 2
  %80 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %13)
  %81 = getelementptr inbounds %struct.uint8v8_t, %struct.uint8v8_t* %10, i64 0, i32 0, i64 7
  %82 = load i8, i8* %81, align 1
  %83 = and i8 %82, 7
  %84 = zext i8 %83 to i64
  %85 = getelementptr inbounds %struct.uint8v8_t, %struct.uint8v8_t* %8, i64 0, i32 0, i64 %84
  %86 = load i8, i8* %85, align 1
  %87 = icmp slt i8 %82, 0
  %88 = select i1 %87, i8 0, i8 %86
  call void @llvm.lifetime.start(i64 8, i8* nonnull %13)
  store i64 %80, i64* %6, align 8
  %89 = getelementptr inbounds [8 x i8], [8 x i8]* %14, i64 0, i64 7
  store i8 %88, i8* %89, align 1
  %90 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %13)
  %91 = lshr i64 %90, 8
  %92 = lshr i64 %90, 16
  %93 = lshr i64 %90, 24
  %94 = lshr i64 %90, 32
  %95 = lshr i64 %90, 40
  %96 = lshr i64 %90, 48
  %97 = lshr i64 %90, 56
  %98 = trunc i64 %90 to i8
  %99 = trunc i64 %91 to i8
  %100 = trunc i64 %92 to i8
  %101 = trunc i64 %93 to i8
  %102 = trunc i64 %94 to i8
  %103 = trunc i64 %95 to i8
  %104 = trunc i64 %96 to i8
  %105 = trunc i64 %97 to i8
  %106 = bitcast i64* %2 to [8 x i8]*
  %107 = bitcast i64* %2 to i8*
  store i8 %98, i8* %107, align 1
  %108 = getelementptr inbounds [8 x i8], [8 x i8]* %106, i64 0, i64 1
  store i8 %99, i8* %108, align 1
  %109 = getelementptr inbounds [8 x i8], [8 x i8]* %106, i64 0, i64 2
  store i8 %100, i8* %109, align 1
  %110 = getelementptr inbounds [8 x i8], [8 x i8]* %106, i64 0, i64 3
  store i8 %101, i8* %110, align 1
  %111 = getelementptr inbounds [8 x i8], [8 x i8]* %106, i64 0, i64 4
  store i8 %102, i8* %111, align 1
  %112 = getelementptr inbounds [8 x i8], [8 x i8]* %106, i64 0, i64 5
  store i8 %103, i8* %112, align 1
  %113 = getelementptr inbounds [8 x i8], [8 x i8]* %106, i64 0, i64 6
  store i8 %104, i8* %113, align 1
  %114 = getelementptr inbounds [8 x i8], [8 x i8]* %106, i64 0, i64 7
  store i8 %105, i8* %114, align 1
  call void @llvm.lifetime.end(i64 8, i8* nonnull %12) 
  call void @llvm.lifetime.end(i64 8, i8* nonnull %11) 
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L6PSHUFBI4RVnWI7vec64_tE3RVnIS2_E3MVnIS2_EEEP6MemoryS9_R5StateT_T0_T1_(%struct.Memory* returned, %struct.State* nocapture readnone dereferenceable(3376), i64* nocapture, i64, i64)  {
  %6 = alloca i64, align 8
  %7 = alloca i64, align 8
  %8 = bitcast i64* %7 to %struct.uint8v8_t*
  %9 = alloca i64, align 8
  %10 = bitcast i64* %9 to %struct.uint8v8_t*
  %11 = bitcast i64* %7 to i8*
  call void @llvm.lifetime.start(i64 8, i8* nonnull %11) 
  store i64 %3, i64* %7, align 8
  %12 = bitcast i64* %9 to i8*
  call void @llvm.lifetime.start(i64 8, i8* nonnull %12) 
  %13 = inttoptr i64 %4 to i8*
  %14 = load i8, i8* %13
  %15 = add i64 %4, 1
  %16 = inttoptr i64 %15 to i8*
  %17 = load i8, i8* %16
  %18 = add i64 %4, 2
  %19 = inttoptr i64 %18 to i8*
  %20 = load i8, i8* %19
  %21 = add i64 %4, 3
  %22 = inttoptr i64 %21 to i8*
  %23 = load i8, i8* %22
  %24 = add i64 %4, 4
  %25 = inttoptr i64 %24 to i8*
  %26 = load i8, i8* %25
  %27 = add i64 %4, 5
  %28 = inttoptr i64 %27 to i8*
  %29 = load i8, i8* %28
  %30 = add i64 %4, 6
  %31 = inttoptr i64 %30 to i8*
  %32 = load i8, i8* %31
  %33 = add i64 %4, 7
  %34 = inttoptr i64 %33 to i8*
  %35 = load i8, i8* %34
  %36 = zext i8 %35 to i64
  %37 = shl nuw i64 %36, 56
  %38 = zext i8 %32 to i64
  %39 = shl nuw nsw i64 %38, 48
  %40 = zext i8 %29 to i64
  %41 = shl nuw nsw i64 %40, 40
  %42 = zext i8 %26 to i64
  %43 = shl nuw nsw i64 %42, 32
  %44 = zext i8 %23 to i64
  %45 = shl nuw nsw i64 %44, 24
  %46 = zext i8 %20 to i64
  %47 = shl nuw nsw i64 %46, 16
  %48 = zext i8 %17 to i64
  %49 = shl nuw nsw i64 %48, 8
  %50 = zext i8 %14 to i64
  %51 = or i64 %49, %50
  %52 = or i64 %51, %47
  %53 = or i64 %52, %45
  %54 = or i64 %53, %43
  %55 = or i64 %54, %41
  %56 = or i64 %55, %39
  %57 = or i64 %56, %37
  store i64 %57, i64* %9, align 8
  %58 = bitcast i64* %6 to i8*
  %59 = bitcast i64* %6 to [8 x i8]*
  %60 = and i8 %14, 7
  %61 = zext i8 %60 to i64
  %62 = getelementptr inbounds %struct.uint8v8_t, %struct.uint8v8_t* %8, i64 0, i32 0, i64 %61
  %63 = load i8, i8* %62, align 1
  %64 = icmp slt i8 %14, 0
  %65 = select i1 %64, i8 0, i8 %63
  call void @llvm.lifetime.start(i64 8, i8* nonnull %58)
  store i64 0, i64* %6, align 8
  %66 = bitcast i64* %6 to i8*
  store i8 %65, i8* %66, align 8
  %67 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %58)
  %68 = and i64 %48, 7
  %69 = getelementptr inbounds %struct.uint8v8_t, %struct.uint8v8_t* %8, i64 0, i32 0, i64 %68
  %70 = load i8, i8* %69, align 1
  %71 = icmp slt i8 %17, 0
  %72 = select i1 %71, i8 0, i8 %70
  call void @llvm.lifetime.start(i64 8, i8* nonnull %58)
  store i64 %67, i64* %6, align 8
  %73 = getelementptr inbounds [8 x i8], [8 x i8]* %59, i64 0, i64 1
  store i8 %72, i8* %73, align 1
  %74 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %58)
  %75 = and i64 %46, 7
  %76 = getelementptr inbounds %struct.uint8v8_t, %struct.uint8v8_t* %8, i64 0, i32 0, i64 %75
  %77 = load i8, i8* %76, align 1
  %78 = icmp slt i8 %20, 0
  %79 = select i1 %78, i8 0, i8 %77
  call void @llvm.lifetime.start(i64 8, i8* nonnull %58)
  store i64 %74, i64* %6, align 8
  %80 = getelementptr inbounds [8 x i8], [8 x i8]* %59, i64 0, i64 2
  store i8 %79, i8* %80, align 2
  %81 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %58)
  %82 = getelementptr inbounds %struct.uint8v8_t, %struct.uint8v8_t* %10, i64 0, i32 0, i64 3
  %83 = load i8, i8* %82, align 1
  %84 = and i8 %83, 7
  %85 = zext i8 %84 to i64
  %86 = getelementptr inbounds %struct.uint8v8_t, %struct.uint8v8_t* %8, i64 0, i32 0, i64 %85
  %87 = load i8, i8* %86, align 1
  %88 = icmp slt i8 %83, 0
  %89 = select i1 %88, i8 0, i8 %87
  call void @llvm.lifetime.start(i64 8, i8* nonnull %58)
  store i64 %81, i64* %6, align 8
  %90 = getelementptr inbounds [8 x i8], [8 x i8]* %59, i64 0, i64 3
  store i8 %89, i8* %90, align 1
  %91 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %58)
  %92 = getelementptr inbounds %struct.uint8v8_t, %struct.uint8v8_t* %10, i64 0, i32 0, i64 4
  %93 = load i8, i8* %92, align 4
  %94 = and i8 %93, 7
  %95 = zext i8 %94 to i64
  %96 = getelementptr inbounds %struct.uint8v8_t, %struct.uint8v8_t* %8, i64 0, i32 0, i64 %95
  %97 = load i8, i8* %96, align 1
  %98 = icmp slt i8 %93, 0
  %99 = select i1 %98, i8 0, i8 %97
  call void @llvm.lifetime.start(i64 8, i8* nonnull %58)
  store i64 %91, i64* %6, align 8
  %100 = getelementptr inbounds [8 x i8], [8 x i8]* %59, i64 0, i64 4
  store i8 %99, i8* %100, align 4
  %101 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %58)
  %102 = getelementptr inbounds %struct.uint8v8_t, %struct.uint8v8_t* %10, i64 0, i32 0, i64 5
  %103 = load i8, i8* %102, align 1
  %104 = and i8 %103, 7
  %105 = zext i8 %104 to i64
  %106 = getelementptr inbounds %struct.uint8v8_t, %struct.uint8v8_t* %8, i64 0, i32 0, i64 %105
  %107 = load i8, i8* %106, align 1
  %108 = icmp slt i8 %103, 0
  %109 = select i1 %108, i8 0, i8 %107
  call void @llvm.lifetime.start(i64 8, i8* nonnull %58)
  store i64 %101, i64* %6, align 8
  %110 = getelementptr inbounds [8 x i8], [8 x i8]* %59, i64 0, i64 5
  store i8 %109, i8* %110, align 1
  %111 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %58)
  %112 = getelementptr inbounds %struct.uint8v8_t, %struct.uint8v8_t* %10, i64 0, i32 0, i64 6
  %113 = load i8, i8* %112, align 2
  %114 = and i8 %113, 7
  %115 = zext i8 %114 to i64
  %116 = getelementptr inbounds %struct.uint8v8_t, %struct.uint8v8_t* %8, i64 0, i32 0, i64 %115
  %117 = load i8, i8* %116, align 1
  %118 = icmp slt i8 %113, 0
  %119 = select i1 %118, i8 0, i8 %117
  call void @llvm.lifetime.start(i64 8, i8* nonnull %58)
  store i64 %111, i64* %6, align 8
  %120 = getelementptr inbounds [8 x i8], [8 x i8]* %59, i64 0, i64 6
  store i8 %119, i8* %120, align 2
  %121 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %58)
  %122 = getelementptr inbounds %struct.uint8v8_t, %struct.uint8v8_t* %10, i64 0, i32 0, i64 7
  %123 = load i8, i8* %122, align 1
  %124 = and i8 %123, 7
  %125 = zext i8 %124 to i64
  %126 = getelementptr inbounds %struct.uint8v8_t, %struct.uint8v8_t* %8, i64 0, i32 0, i64 %125
  %127 = load i8, i8* %126, align 1
  %128 = icmp slt i8 %123, 0
  %129 = select i1 %128, i8 0, i8 %127
  call void @llvm.lifetime.start(i64 8, i8* nonnull %58)
  store i64 %121, i64* %6, align 8
  %130 = getelementptr inbounds [8 x i8], [8 x i8]* %59, i64 0, i64 7
  store i8 %129, i8* %130, align 1
  %131 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %58)
  %132 = lshr i64 %131, 8
  %133 = lshr i64 %131, 16
  %134 = lshr i64 %131, 24
  %135 = lshr i64 %131, 32
  %136 = lshr i64 %131, 40
  %137 = lshr i64 %131, 48
  %138 = lshr i64 %131, 56
  %139 = trunc i64 %131 to i8
  %140 = trunc i64 %132 to i8
  %141 = trunc i64 %133 to i8
  %142 = trunc i64 %134 to i8
  %143 = trunc i64 %135 to i8
  %144 = trunc i64 %136 to i8
  %145 = trunc i64 %137 to i8
  %146 = trunc i64 %138 to i8
  %147 = bitcast i64* %2 to [8 x i8]*
  %148 = bitcast i64* %2 to i8*
  store i8 %139, i8* %148, align 1
  %149 = getelementptr inbounds [8 x i8], [8 x i8]* %147, i64 0, i64 1
  store i8 %140, i8* %149, align 1
  %150 = getelementptr inbounds [8 x i8], [8 x i8]* %147, i64 0, i64 2
  store i8 %141, i8* %150, align 1
  %151 = getelementptr inbounds [8 x i8], [8 x i8]* %147, i64 0, i64 3
  store i8 %142, i8* %151, align 1
  %152 = getelementptr inbounds [8 x i8], [8 x i8]* %147, i64 0, i64 4
  store i8 %143, i8* %152, align 1
  %153 = getelementptr inbounds [8 x i8], [8 x i8]* %147, i64 0, i64 5
  store i8 %144, i8* %153, align 1
  %154 = getelementptr inbounds [8 x i8], [8 x i8]* %147, i64 0, i64 6
  store i8 %145, i8* %154, align 1
  %155 = getelementptr inbounds [8 x i8], [8 x i8]* %147, i64 0, i64 7
  store i8 %146, i8* %155, align 1
  call void @llvm.lifetime.end(i64 8, i8* nonnull %12) 
  call void @llvm.lifetime.end(i64 8, i8* nonnull %11) 
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L6PSHUFBI3VnWI8vec128_tE2VnIS2_ES5_EEP6MemoryS7_R5StateT_T0_T1_(%struct.Memory* readnone returned, %struct.State* nocapture readnone dereferenceable(3376), i8* nocapture, i8* nocapture readonly, i8* nocapture readonly)  {
  %6 = alloca <2 x i64>, align 16
  %7 = bitcast <2 x i64>* %6 to { i64, i64 }*
  %8 = alloca <2 x i64>, align 16
  %9 = bitcast <2 x i64>* %8 to %struct.uint8v16_t*
  %10 = alloca <2 x i64>, align 16
  %11 = bitcast <2 x i64>* %10 to { i64, i64 }*
  %12 = bitcast <2 x i64>* %10 to %struct.uint8v16_t*
  %13 = bitcast <2 x i64>* %8 to i8*
  call void @llvm.lifetime.start(i64 16, i8* nonnull %13) 
  %14 = bitcast i8* %3 to <2 x i64>*
  %15 = load <2 x i64>, <2 x i64>* %14, align 1
  store <2 x i64> %15, <2 x i64>* %8, align 16
  %16 = bitcast <2 x i64>* %10 to i8*
  call void @llvm.lifetime.start(i64 16, i8* nonnull %16) 
  %17 = bitcast i8* %4 to <2 x i64>*
  %18 = load <2 x i64>, <2 x i64>* %17, align 1
  store <2 x i64> %18, <2 x i64>* %10, align 16
  %19 = bitcast <2 x i64>* %6 to i8*
  %20 = getelementptr inbounds <2 x i64>, <2 x i64>* %6, i64 0, i64 0
  %21 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %7, i64 0, i32 1
  %22 = bitcast <2 x i64>* %6 to [16 x i8]*
  %23 = extractelement <2 x i64> %18, i32 0
  %24 = trunc i64 %23 to i8
  %25 = and i64 %23, 7
  %26 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %9, i64 0, i32 0, i64 %25
  %27 = load i8, i8* %26, align 1
  %28 = icmp slt i8 %24, 0
  %29 = select i1 %28, i8 0, i8 %27
  call void @llvm.lifetime.start(i64 16, i8* nonnull %19)
  store <2 x i64> zeroinitializer, <2 x i64>* %6, align 16
  %30 = bitcast <2 x i64>* %6 to i8*
  store i8 %29, i8* %30, align 16
  %31 = load i64, i64* %20, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %19)
  %32 = lshr i64 %23, 8
  %33 = trunc i64 %32 to i8
  %34 = and i64 %32, 7
  %35 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %9, i64 0, i32 0, i64 %34
  %36 = load i8, i8* %35, align 1
  %37 = icmp slt i8 %33, 0
  %38 = select i1 %37, i8 0, i8 %36
  call void @llvm.lifetime.start(i64 16, i8* nonnull %19)
  store i64 %31, i64* %20, align 16
  store i64 0, i64* %21, align 8
  %39 = getelementptr inbounds [16 x i8], [16 x i8]* %22, i64 0, i64 1
  store i8 %38, i8* %39, align 1
  %40 = load i64, i64* %20, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %19)
  %41 = lshr i64 %23, 16
  %42 = trunc i64 %41 to i8
  %43 = and i64 %41, 7
  %44 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %9, i64 0, i32 0, i64 %43
  %45 = load i8, i8* %44, align 1
  %46 = icmp slt i8 %42, 0
  %47 = select i1 %46, i8 0, i8 %45
  call void @llvm.lifetime.start(i64 16, i8* nonnull %19)
  store i64 %40, i64* %20, align 16
  store i64 0, i64* %21, align 8
  %48 = getelementptr inbounds [16 x i8], [16 x i8]* %22, i64 0, i64 2
  store i8 %47, i8* %48, align 2
  %49 = load i64, i64* %20, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %19)
  %50 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %12, i64 0, i32 0, i64 3
  %51 = load i8, i8* %50, align 1
  %52 = and i8 %51, 7
  %53 = zext i8 %52 to i64
  %54 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %9, i64 0, i32 0, i64 %53
  %55 = load i8, i8* %54, align 1
  %56 = icmp slt i8 %51, 0
  %57 = select i1 %56, i8 0, i8 %55
  call void @llvm.lifetime.start(i64 16, i8* nonnull %19)
  store i64 %49, i64* %20, align 16
  store i64 0, i64* %21, align 8
  %58 = getelementptr inbounds [16 x i8], [16 x i8]* %22, i64 0, i64 3
  store i8 %57, i8* %58, align 1
  %59 = load i64, i64* %20, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %19)
  %60 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %12, i64 0, i32 0, i64 4
  %61 = load i8, i8* %60, align 4
  %62 = and i8 %61, 7
  %63 = zext i8 %62 to i64
  %64 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %9, i64 0, i32 0, i64 %63
  %65 = load i8, i8* %64, align 1
  %66 = icmp slt i8 %61, 0
  %67 = select i1 %66, i8 0, i8 %65
  call void @llvm.lifetime.start(i64 16, i8* nonnull %19)
  store i64 %59, i64* %20, align 16
  store i64 0, i64* %21, align 8
  %68 = getelementptr inbounds [16 x i8], [16 x i8]* %22, i64 0, i64 4
  store i8 %67, i8* %68, align 4
  %69 = load i64, i64* %20, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %19)
  %70 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %12, i64 0, i32 0, i64 5
  %71 = load i8, i8* %70, align 1
  %72 = and i8 %71, 7
  %73 = zext i8 %72 to i64
  %74 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %9, i64 0, i32 0, i64 %73
  %75 = load i8, i8* %74, align 1
  %76 = icmp slt i8 %71, 0
  %77 = select i1 %76, i8 0, i8 %75
  call void @llvm.lifetime.start(i64 16, i8* nonnull %19)
  store i64 %69, i64* %20, align 16
  store i64 0, i64* %21, align 8
  %78 = getelementptr inbounds [16 x i8], [16 x i8]* %22, i64 0, i64 5
  store i8 %77, i8* %78, align 1
  %79 = load i64, i64* %20, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %19)
  %80 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %12, i64 0, i32 0, i64 6
  %81 = load i8, i8* %80, align 2
  %82 = and i8 %81, 7
  %83 = zext i8 %82 to i64
  %84 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %9, i64 0, i32 0, i64 %83
  %85 = load i8, i8* %84, align 1
  %86 = icmp slt i8 %81, 0
  %87 = select i1 %86, i8 0, i8 %85
  call void @llvm.lifetime.start(i64 16, i8* nonnull %19)
  store i64 %79, i64* %20, align 16
  store i64 0, i64* %21, align 8
  %88 = getelementptr inbounds [16 x i8], [16 x i8]* %22, i64 0, i64 6
  store i8 %87, i8* %88, align 2
  %89 = load i64, i64* %20, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %19)
  %90 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %12, i64 0, i32 0, i64 7
  %91 = load i8, i8* %90, align 1
  %92 = and i8 %91, 7
  %93 = zext i8 %92 to i64
  %94 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %9, i64 0, i32 0, i64 %93
  %95 = load i8, i8* %94, align 1
  %96 = icmp slt i8 %91, 0
  %97 = select i1 %96, i8 0, i8 %95
  call void @llvm.lifetime.start(i64 16, i8* nonnull %19)
  store i64 %89, i64* %20, align 16
  store i64 0, i64* %21, align 8
  %98 = getelementptr inbounds [16 x i8], [16 x i8]* %22, i64 0, i64 7
  store i8 %97, i8* %98, align 1
  %99 = load i64, i64* %20, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %19)
  %100 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %11, i64 0, i32 1
  %101 = bitcast i64* %100 to i8*
  %102 = load i8, i8* %101, align 8
  %103 = and i8 %102, 7
  %104 = zext i8 %103 to i64
  %105 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %9, i64 0, i32 0, i64 %104
  %106 = load i8, i8* %105, align 1
  %107 = icmp slt i8 %102, 0
  %108 = select i1 %107, i8 0, i8 %106
  call void @llvm.lifetime.start(i64 16, i8* nonnull %19)
  store i64 %99, i64* %20, align 16
  store i64 0, i64* %21, align 8
  %109 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %7, i64 0, i32 1
  %110 = bitcast i64* %109 to i8*
  store i8 %108, i8* %110, align 8
  %111 = load i64, i64* %21, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %19)
  %112 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %12, i64 0, i32 0, i64 9
  %113 = load i8, i8* %112, align 1
  %114 = and i8 %113, 7
  %115 = zext i8 %114 to i64
  %116 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %9, i64 0, i32 0, i64 %115
  %117 = load i8, i8* %116, align 1
  %118 = icmp slt i8 %113, 0
  %119 = select i1 %118, i8 0, i8 %117
  call void @llvm.lifetime.start(i64 16, i8* nonnull %19)
  store i64 %99, i64* %20, align 16
  store i64 %111, i64* %21, align 8
  %120 = getelementptr inbounds [16 x i8], [16 x i8]* %22, i64 0, i64 9
  store i8 %119, i8* %120, align 1
  %121 = load i64, i64* %21, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %19)
  %122 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %12, i64 0, i32 0, i64 10
  %123 = load i8, i8* %122, align 2
  %124 = and i8 %123, 7
  %125 = zext i8 %124 to i64
  %126 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %9, i64 0, i32 0, i64 %125
  %127 = load i8, i8* %126, align 1
  %128 = icmp slt i8 %123, 0
  %129 = select i1 %128, i8 0, i8 %127
  call void @llvm.lifetime.start(i64 16, i8* nonnull %19)
  store i64 %99, i64* %20, align 16
  store i64 %121, i64* %21, align 8
  %130 = getelementptr inbounds [16 x i8], [16 x i8]* %22, i64 0, i64 10
  store i8 %129, i8* %130, align 2
  %131 = load i64, i64* %21, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %19)
  %132 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %12, i64 0, i32 0, i64 11
  %133 = load i8, i8* %132, align 1
  %134 = and i8 %133, 7
  %135 = zext i8 %134 to i64
  %136 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %9, i64 0, i32 0, i64 %135
  %137 = load i8, i8* %136, align 1
  %138 = icmp slt i8 %133, 0
  %139 = select i1 %138, i8 0, i8 %137
  call void @llvm.lifetime.start(i64 16, i8* nonnull %19)
  store i64 %99, i64* %20, align 16
  store i64 %131, i64* %21, align 8
  %140 = getelementptr inbounds [16 x i8], [16 x i8]* %22, i64 0, i64 11
  store i8 %139, i8* %140, align 1
  %141 = load i64, i64* %21, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %19)
  %142 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %12, i64 0, i32 0, i64 12
  %143 = load i8, i8* %142, align 4
  %144 = and i8 %143, 7
  %145 = zext i8 %144 to i64
  %146 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %9, i64 0, i32 0, i64 %145
  %147 = load i8, i8* %146, align 1
  %148 = icmp slt i8 %143, 0
  %149 = select i1 %148, i8 0, i8 %147
  call void @llvm.lifetime.start(i64 16, i8* nonnull %19)
  store i64 %99, i64* %20, align 16
  store i64 %141, i64* %21, align 8
  %150 = getelementptr inbounds [16 x i8], [16 x i8]* %22, i64 0, i64 12
  store i8 %149, i8* %150, align 4
  %151 = load i64, i64* %21, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %19)
  %152 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %12, i64 0, i32 0, i64 13
  %153 = load i8, i8* %152, align 1
  %154 = and i8 %153, 7
  %155 = zext i8 %154 to i64
  %156 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %9, i64 0, i32 0, i64 %155
  %157 = load i8, i8* %156, align 1
  %158 = icmp slt i8 %153, 0
  %159 = select i1 %158, i8 0, i8 %157
  call void @llvm.lifetime.start(i64 16, i8* nonnull %19)
  store i64 %99, i64* %20, align 16
  store i64 %151, i64* %21, align 8
  %160 = getelementptr inbounds [16 x i8], [16 x i8]* %22, i64 0, i64 13
  store i8 %159, i8* %160, align 1
  %161 = load i64, i64* %21, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %19)
  %162 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %12, i64 0, i32 0, i64 14
  %163 = load i8, i8* %162, align 2
  %164 = and i8 %163, 7
  %165 = zext i8 %164 to i64
  %166 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %9, i64 0, i32 0, i64 %165
  %167 = load i8, i8* %166, align 1
  %168 = icmp slt i8 %163, 0
  %169 = select i1 %168, i8 0, i8 %167
  call void @llvm.lifetime.start(i64 16, i8* nonnull %19)
  store i64 %99, i64* %20, align 16
  store i64 %161, i64* %21, align 8
  %170 = getelementptr inbounds [16 x i8], [16 x i8]* %22, i64 0, i64 14
  store i8 %169, i8* %170, align 2
  %171 = load i64, i64* %21, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %19)
  %172 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %12, i64 0, i32 0, i64 15
  %173 = load i8, i8* %172, align 1
  %174 = and i8 %173, 7
  %175 = zext i8 %174 to i64
  %176 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %9, i64 0, i32 0, i64 %175
  %177 = load i8, i8* %176, align 1
  %178 = icmp slt i8 %173, 0
  %179 = select i1 %178, i8 0, i8 %177
  call void @llvm.lifetime.start(i64 16, i8* nonnull %19)
  store i64 %99, i64* %20, align 16
  store i64 %171, i64* %21, align 8
  %180 = getelementptr inbounds [16 x i8], [16 x i8]* %22, i64 0, i64 15
  store i8 %179, i8* %180, align 1
  %181 = load i64, i64* %21, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %19)
  %182 = lshr i64 %99, 8
  %183 = lshr i64 %99, 16
  %184 = lshr i64 %99, 24
  %185 = lshr i64 %99, 32
  %186 = lshr i64 %99, 40
  %187 = lshr i64 %99, 48
  %188 = lshr i64 %99, 56
  %189 = trunc i64 %99 to i8
  %190 = trunc i64 %182 to i8
  %191 = trunc i64 %183 to i8
  %192 = trunc i64 %184 to i8
  %193 = trunc i64 %185 to i8
  %194 = trunc i64 %186 to i8
  %195 = trunc i64 %187 to i8
  %196 = trunc i64 %188 to i8
  store i8 %189, i8* %2, align 1
  %197 = getelementptr inbounds i8, i8* %2, i64 1
  store i8 %190, i8* %197, align 1
  %198 = getelementptr inbounds i8, i8* %2, i64 2
  store i8 %191, i8* %198, align 1
  %199 = getelementptr inbounds i8, i8* %2, i64 3
  store i8 %192, i8* %199, align 1
  %200 = getelementptr inbounds i8, i8* %2, i64 4
  store i8 %193, i8* %200, align 1
  %201 = getelementptr inbounds i8, i8* %2, i64 5
  store i8 %194, i8* %201, align 1
  %202 = getelementptr inbounds i8, i8* %2, i64 6
  store i8 %195, i8* %202, align 1
  %203 = getelementptr inbounds i8, i8* %2, i64 7
  store i8 %196, i8* %203, align 1
  %204 = trunc i64 %181 to i8
  %205 = getelementptr inbounds i8, i8* %2, i64 8
  store i8 %204, i8* %205, align 1
  %206 = lshr i64 %181, 8
  %207 = trunc i64 %206 to i8
  %208 = getelementptr inbounds i8, i8* %2, i64 9
  store i8 %207, i8* %208, align 1
  %209 = lshr i64 %181, 16
  %210 = trunc i64 %209 to i8
  %211 = getelementptr inbounds i8, i8* %2, i64 10
  store i8 %210, i8* %211, align 1
  %212 = lshr i64 %181, 24
  %213 = trunc i64 %212 to i8
  %214 = getelementptr inbounds i8, i8* %2, i64 11
  store i8 %213, i8* %214, align 1
  %215 = lshr i64 %181, 32
  %216 = trunc i64 %215 to i8
  %217 = getelementptr inbounds i8, i8* %2, i64 12
  store i8 %216, i8* %217, align 1
  %218 = lshr i64 %181, 40
  %219 = trunc i64 %218 to i8
  %220 = getelementptr inbounds i8, i8* %2, i64 13
  store i8 %219, i8* %220, align 1
  %221 = lshr i64 %181, 48
  %222 = trunc i64 %221 to i8
  %223 = getelementptr inbounds i8, i8* %2, i64 14
  store i8 %222, i8* %223, align 1
  %224 = lshr i64 %181, 56
  %225 = trunc i64 %224 to i8
  %226 = getelementptr inbounds i8, i8* %2, i64 15
  store i8 %225, i8* %226, align 1
  call void @llvm.lifetime.end(i64 16, i8* nonnull %16) 
  call void @llvm.lifetime.end(i64 16, i8* nonnull %13) 
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L6PSHUFBI3VnWI8vec128_tE2VnIS2_E3MVnIS2_EEEP6MemoryS9_R5StateT_T0_T1_(%struct.Memory* returned, %struct.State* nocapture readnone dereferenceable(3376), i8* nocapture, i8* nocapture readonly, i64)  {
  %6 = alloca <2 x i64>, align 16
  %7 = bitcast <2 x i64>* %6 to { i64, i64 }*
  %8 = alloca <2 x i64>, align 16
  %9 = bitcast <2 x i64>* %8 to %struct.uint8v16_t*
  %10 = alloca <2 x i64>, align 16
  %11 = bitcast <2 x i64>* %10 to { i64, i64 }*
  %12 = bitcast <2 x i64>* %10 to %struct.uint8v16_t*
  %13 = bitcast <2 x i64>* %8 to i8*
  call void @llvm.lifetime.start(i64 16, i8* nonnull %13) 
  %14 = bitcast i8* %3 to <2 x i64>*
  %15 = load <2 x i64>, <2 x i64>* %14, align 1
  store <2 x i64> %15, <2 x i64>* %8, align 16
  %16 = bitcast <2 x i64>* %10 to i8*
  call void @llvm.lifetime.start(i64 16, i8* nonnull %16) 
  %17 = inttoptr i64 %4 to i8*
  %18 = load i8, i8* %17
  %19 = add i64 %4, 1
  %20 = inttoptr i64 %19 to i8*
  %21 = load i8, i8* %20
  %22 = add i64 %4, 2
  %23 = inttoptr i64 %22 to i8*
  %24 = load i8, i8* %23
  %25 = add i64 %4, 3
  %26 = inttoptr i64 %25 to i8*
  %27 = load i8, i8* %26
  %28 = add i64 %4, 4
  %29 = inttoptr i64 %28 to i8*
  %30 = load i8, i8* %29
  %31 = add i64 %4, 5
  %32 = inttoptr i64 %31 to i8*
  %33 = load i8, i8* %32
  %34 = add i64 %4, 6
  %35 = inttoptr i64 %34 to i8*
  %36 = load i8, i8* %35
  %37 = add i64 %4, 7
  %38 = inttoptr i64 %37 to i8*
  %39 = load i8, i8* %38
  %40 = add i64 %4, 8
  %41 = inttoptr i64 %40 to i8*
  %42 = load i8, i8* %41
  %43 = add i64 %4, 9
  %44 = inttoptr i64 %43 to i8*
  %45 = load i8, i8* %44
  %46 = add i64 %4, 10
  %47 = inttoptr i64 %46 to i8*
  %48 = load i8, i8* %47
  %49 = add i64 %4, 11
  %50 = inttoptr i64 %49 to i8*
  %51 = load i8, i8* %50
  %52 = add i64 %4, 12
  %53 = inttoptr i64 %52 to i8*
  %54 = load i8, i8* %53
  %55 = add i64 %4, 13
  %56 = inttoptr i64 %55 to i8*
  %57 = load i8, i8* %56
  %58 = add i64 %4, 14
  %59 = inttoptr i64 %58 to i8*
  %60 = load i8, i8* %59
  %61 = add i64 %4, 15
  %62 = inttoptr i64 %61 to i8*
  %63 = load i8, i8* %62
  %64 = insertelement <2 x i8> undef, i8 %39, i32 0
  %65 = insertelement <2 x i8> %64, i8 %63, i32 1
  %66 = zext <2 x i8> %65 to <2 x i64>
  %67 = shl nuw <2 x i64> %66, <i64 56, i64 56>
  %68 = insertelement <2 x i8> undef, i8 %36, i32 0
  %69 = insertelement <2 x i8> %68, i8 %60, i32 1
  %70 = zext <2 x i8> %69 to <2 x i64>
  %71 = shl nuw nsw <2 x i64> %70, <i64 48, i64 48>
  %72 = insertelement <2 x i8> undef, i8 %33, i32 0
  %73 = insertelement <2 x i8> %72, i8 %57, i32 1
  %74 = zext <2 x i8> %73 to <2 x i64>
  %75 = shl nuw nsw <2 x i64> %74, <i64 40, i64 40>
  %76 = insertelement <2 x i8> undef, i8 %30, i32 0
  %77 = insertelement <2 x i8> %76, i8 %54, i32 1
  %78 = zext <2 x i8> %77 to <2 x i64>
  %79 = shl nuw nsw <2 x i64> %78, <i64 32, i64 32>
  %80 = insertelement <2 x i8> undef, i8 %27, i32 0
  %81 = insertelement <2 x i8> %80, i8 %51, i32 1
  %82 = zext <2 x i8> %81 to <2 x i64>
  %83 = shl nuw nsw <2 x i64> %82, <i64 24, i64 24>
  %84 = insertelement <2 x i8> undef, i8 %24, i32 0
  %85 = insertelement <2 x i8> %84, i8 %48, i32 1
  %86 = zext <2 x i8> %85 to <2 x i64>
  %87 = shl nuw nsw <2 x i64> %86, <i64 16, i64 16>
  %88 = insertelement <2 x i8> undef, i8 %21, i32 0
  %89 = insertelement <2 x i8> %88, i8 %45, i32 1
  %90 = zext <2 x i8> %89 to <2 x i64>
  %91 = shl nuw nsw <2 x i64> %90, <i64 8, i64 8>
  %92 = insertelement <2 x i8> undef, i8 %18, i32 0
  %93 = insertelement <2 x i8> %92, i8 %42, i32 1
  %94 = zext <2 x i8> %93 to <2 x i64>
  %95 = or <2 x i64> %91, %94
  %96 = or <2 x i64> %95, %87
  %97 = or <2 x i64> %96, %83
  %98 = or <2 x i64> %97, %79
  %99 = or <2 x i64> %98, %75
  %100 = or <2 x i64> %99, %71
  %101 = or <2 x i64> %100, %67
  store <2 x i64> %101, <2 x i64>* %10, align 16
  %102 = bitcast <2 x i64>* %6 to i8*
  %103 = getelementptr inbounds <2 x i64>, <2 x i64>* %6, i64 0, i64 0
  %104 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %7, i64 0, i32 1
  %105 = bitcast <2 x i64>* %6 to [16 x i8]*
  %106 = and i8 %18, 7
  %107 = zext i8 %106 to i64
  %108 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %9, i64 0, i32 0, i64 %107
  %109 = load i8, i8* %108, align 1
  %110 = icmp slt i8 %18, 0
  %111 = select i1 %110, i8 0, i8 %109
  call void @llvm.lifetime.start(i64 16, i8* nonnull %102)
  store <2 x i64> zeroinitializer, <2 x i64>* %6, align 16
  %112 = bitcast <2 x i64>* %6 to i8*
  store i8 %111, i8* %112, align 16
  %113 = load i64, i64* %103, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %102)
  %114 = extractelement <2 x i64> %90, i32 0
  %115 = and i64 %114, 7
  %116 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %9, i64 0, i32 0, i64 %115
  %117 = load i8, i8* %116, align 1
  %118 = icmp slt i8 %21, 0
  %119 = select i1 %118, i8 0, i8 %117
  call void @llvm.lifetime.start(i64 16, i8* nonnull %102)
  store i64 %113, i64* %103, align 16
  store i64 0, i64* %104, align 8
  %120 = getelementptr inbounds [16 x i8], [16 x i8]* %105, i64 0, i64 1
  store i8 %119, i8* %120, align 1
  %121 = load i64, i64* %103, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %102)
  %122 = extractelement <2 x i64> %86, i32 0
  %123 = and i64 %122, 7
  %124 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %9, i64 0, i32 0, i64 %123
  %125 = load i8, i8* %124, align 1
  %126 = icmp slt i8 %24, 0
  %127 = select i1 %126, i8 0, i8 %125
  call void @llvm.lifetime.start(i64 16, i8* nonnull %102)
  store i64 %121, i64* %103, align 16
  store i64 0, i64* %104, align 8
  %128 = getelementptr inbounds [16 x i8], [16 x i8]* %105, i64 0, i64 2
  store i8 %127, i8* %128, align 2
  %129 = load i64, i64* %103, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %102)
  %130 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %12, i64 0, i32 0, i64 3
  %131 = load i8, i8* %130, align 1
  %132 = and i8 %131, 7
  %133 = zext i8 %132 to i64
  %134 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %9, i64 0, i32 0, i64 %133
  %135 = load i8, i8* %134, align 1
  %136 = icmp slt i8 %131, 0
  %137 = select i1 %136, i8 0, i8 %135
  call void @llvm.lifetime.start(i64 16, i8* nonnull %102)
  store i64 %129, i64* %103, align 16
  store i64 0, i64* %104, align 8
  %138 = getelementptr inbounds [16 x i8], [16 x i8]* %105, i64 0, i64 3
  store i8 %137, i8* %138, align 1
  %139 = load i64, i64* %103, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %102)
  %140 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %12, i64 0, i32 0, i64 4
  %141 = load i8, i8* %140, align 4
  %142 = and i8 %141, 7
  %143 = zext i8 %142 to i64
  %144 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %9, i64 0, i32 0, i64 %143
  %145 = load i8, i8* %144, align 1
  %146 = icmp slt i8 %141, 0
  %147 = select i1 %146, i8 0, i8 %145
  call void @llvm.lifetime.start(i64 16, i8* nonnull %102)
  store i64 %139, i64* %103, align 16
  store i64 0, i64* %104, align 8
  %148 = getelementptr inbounds [16 x i8], [16 x i8]* %105, i64 0, i64 4
  store i8 %147, i8* %148, align 4
  %149 = load i64, i64* %103, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %102)
  %150 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %12, i64 0, i32 0, i64 5
  %151 = load i8, i8* %150, align 1
  %152 = and i8 %151, 7
  %153 = zext i8 %152 to i64
  %154 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %9, i64 0, i32 0, i64 %153
  %155 = load i8, i8* %154, align 1
  %156 = icmp slt i8 %151, 0
  %157 = select i1 %156, i8 0, i8 %155
  call void @llvm.lifetime.start(i64 16, i8* nonnull %102)
  store i64 %149, i64* %103, align 16
  store i64 0, i64* %104, align 8
  %158 = getelementptr inbounds [16 x i8], [16 x i8]* %105, i64 0, i64 5
  store i8 %157, i8* %158, align 1
  %159 = load i64, i64* %103, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %102)
  %160 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %12, i64 0, i32 0, i64 6
  %161 = load i8, i8* %160, align 2
  %162 = and i8 %161, 7
  %163 = zext i8 %162 to i64
  %164 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %9, i64 0, i32 0, i64 %163
  %165 = load i8, i8* %164, align 1
  %166 = icmp slt i8 %161, 0
  %167 = select i1 %166, i8 0, i8 %165
  call void @llvm.lifetime.start(i64 16, i8* nonnull %102)
  store i64 %159, i64* %103, align 16
  store i64 0, i64* %104, align 8
  %168 = getelementptr inbounds [16 x i8], [16 x i8]* %105, i64 0, i64 6
  store i8 %167, i8* %168, align 2
  %169 = load i64, i64* %103, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %102)
  %170 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %12, i64 0, i32 0, i64 7
  %171 = load i8, i8* %170, align 1
  %172 = and i8 %171, 7
  %173 = zext i8 %172 to i64
  %174 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %9, i64 0, i32 0, i64 %173
  %175 = load i8, i8* %174, align 1
  %176 = icmp slt i8 %171, 0
  %177 = select i1 %176, i8 0, i8 %175
  call void @llvm.lifetime.start(i64 16, i8* nonnull %102)
  store i64 %169, i64* %103, align 16
  store i64 0, i64* %104, align 8
  %178 = getelementptr inbounds [16 x i8], [16 x i8]* %105, i64 0, i64 7
  store i8 %177, i8* %178, align 1
  %179 = load i64, i64* %103, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %102)
  %180 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %11, i64 0, i32 1
  %181 = bitcast i64* %180 to i8*
  %182 = load i8, i8* %181, align 8
  %183 = and i8 %182, 7
  %184 = zext i8 %183 to i64
  %185 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %9, i64 0, i32 0, i64 %184
  %186 = load i8, i8* %185, align 1
  %187 = icmp slt i8 %182, 0
  %188 = select i1 %187, i8 0, i8 %186
  call void @llvm.lifetime.start(i64 16, i8* nonnull %102)
  store i64 %179, i64* %103, align 16
  store i64 0, i64* %104, align 8
  %189 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %7, i64 0, i32 1
  %190 = bitcast i64* %189 to i8*
  store i8 %188, i8* %190, align 8
  %191 = load i64, i64* %104, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %102)
  %192 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %12, i64 0, i32 0, i64 9
  %193 = load i8, i8* %192, align 1
  %194 = and i8 %193, 7
  %195 = zext i8 %194 to i64
  %196 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %9, i64 0, i32 0, i64 %195
  %197 = load i8, i8* %196, align 1
  %198 = icmp slt i8 %193, 0
  %199 = select i1 %198, i8 0, i8 %197
  call void @llvm.lifetime.start(i64 16, i8* nonnull %102)
  store i64 %179, i64* %103, align 16
  store i64 %191, i64* %104, align 8
  %200 = getelementptr inbounds [16 x i8], [16 x i8]* %105, i64 0, i64 9
  store i8 %199, i8* %200, align 1
  %201 = load i64, i64* %104, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %102)
  %202 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %12, i64 0, i32 0, i64 10
  %203 = load i8, i8* %202, align 2
  %204 = and i8 %203, 7
  %205 = zext i8 %204 to i64
  %206 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %9, i64 0, i32 0, i64 %205
  %207 = load i8, i8* %206, align 1
  %208 = icmp slt i8 %203, 0
  %209 = select i1 %208, i8 0, i8 %207
  call void @llvm.lifetime.start(i64 16, i8* nonnull %102)
  store i64 %179, i64* %103, align 16
  store i64 %201, i64* %104, align 8
  %210 = getelementptr inbounds [16 x i8], [16 x i8]* %105, i64 0, i64 10
  store i8 %209, i8* %210, align 2
  %211 = load i64, i64* %104, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %102)
  %212 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %12, i64 0, i32 0, i64 11
  %213 = load i8, i8* %212, align 1
  %214 = and i8 %213, 7
  %215 = zext i8 %214 to i64
  %216 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %9, i64 0, i32 0, i64 %215
  %217 = load i8, i8* %216, align 1
  %218 = icmp slt i8 %213, 0
  %219 = select i1 %218, i8 0, i8 %217
  call void @llvm.lifetime.start(i64 16, i8* nonnull %102)
  store i64 %179, i64* %103, align 16
  store i64 %211, i64* %104, align 8
  %220 = getelementptr inbounds [16 x i8], [16 x i8]* %105, i64 0, i64 11
  store i8 %219, i8* %220, align 1
  %221 = load i64, i64* %104, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %102)
  %222 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %12, i64 0, i32 0, i64 12
  %223 = load i8, i8* %222, align 4
  %224 = and i8 %223, 7
  %225 = zext i8 %224 to i64
  %226 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %9, i64 0, i32 0, i64 %225
  %227 = load i8, i8* %226, align 1
  %228 = icmp slt i8 %223, 0
  %229 = select i1 %228, i8 0, i8 %227
  call void @llvm.lifetime.start(i64 16, i8* nonnull %102)
  store i64 %179, i64* %103, align 16
  store i64 %221, i64* %104, align 8
  %230 = getelementptr inbounds [16 x i8], [16 x i8]* %105, i64 0, i64 12
  store i8 %229, i8* %230, align 4
  %231 = load i64, i64* %104, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %102)
  %232 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %12, i64 0, i32 0, i64 13
  %233 = load i8, i8* %232, align 1
  %234 = and i8 %233, 7
  %235 = zext i8 %234 to i64
  %236 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %9, i64 0, i32 0, i64 %235
  %237 = load i8, i8* %236, align 1
  %238 = icmp slt i8 %233, 0
  %239 = select i1 %238, i8 0, i8 %237
  call void @llvm.lifetime.start(i64 16, i8* nonnull %102)
  store i64 %179, i64* %103, align 16
  store i64 %231, i64* %104, align 8
  %240 = getelementptr inbounds [16 x i8], [16 x i8]* %105, i64 0, i64 13
  store i8 %239, i8* %240, align 1
  %241 = load i64, i64* %104, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %102)
  %242 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %12, i64 0, i32 0, i64 14
  %243 = load i8, i8* %242, align 2
  %244 = and i8 %243, 7
  %245 = zext i8 %244 to i64
  %246 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %9, i64 0, i32 0, i64 %245
  %247 = load i8, i8* %246, align 1
  %248 = icmp slt i8 %243, 0
  %249 = select i1 %248, i8 0, i8 %247
  call void @llvm.lifetime.start(i64 16, i8* nonnull %102)
  store i64 %179, i64* %103, align 16
  store i64 %241, i64* %104, align 8
  %250 = getelementptr inbounds [16 x i8], [16 x i8]* %105, i64 0, i64 14
  store i8 %249, i8* %250, align 2
  %251 = load i64, i64* %104, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %102)
  %252 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %12, i64 0, i32 0, i64 15
  %253 = load i8, i8* %252, align 1
  %254 = and i8 %253, 7
  %255 = zext i8 %254 to i64
  %256 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %9, i64 0, i32 0, i64 %255
  %257 = load i8, i8* %256, align 1
  %258 = icmp slt i8 %253, 0
  %259 = select i1 %258, i8 0, i8 %257
  call void @llvm.lifetime.start(i64 16, i8* nonnull %102)
  store i64 %179, i64* %103, align 16
  store i64 %251, i64* %104, align 8
  %260 = getelementptr inbounds [16 x i8], [16 x i8]* %105, i64 0, i64 15
  store i8 %259, i8* %260, align 1
  %261 = load i64, i64* %104, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %102)
  %262 = lshr i64 %179, 8
  %263 = lshr i64 %179, 16
  %264 = lshr i64 %179, 24
  %265 = lshr i64 %179, 32
  %266 = lshr i64 %179, 40
  %267 = lshr i64 %179, 48
  %268 = lshr i64 %179, 56
  %269 = trunc i64 %179 to i8
  %270 = trunc i64 %262 to i8
  %271 = trunc i64 %263 to i8
  %272 = trunc i64 %264 to i8
  %273 = trunc i64 %265 to i8
  %274 = trunc i64 %266 to i8
  %275 = trunc i64 %267 to i8
  %276 = trunc i64 %268 to i8
  store i8 %269, i8* %2, align 1
  %277 = getelementptr inbounds i8, i8* %2, i64 1
  store i8 %270, i8* %277, align 1
  %278 = getelementptr inbounds i8, i8* %2, i64 2
  store i8 %271, i8* %278, align 1
  %279 = getelementptr inbounds i8, i8* %2, i64 3
  store i8 %272, i8* %279, align 1
  %280 = getelementptr inbounds i8, i8* %2, i64 4
  store i8 %273, i8* %280, align 1
  %281 = getelementptr inbounds i8, i8* %2, i64 5
  store i8 %274, i8* %281, align 1
  %282 = getelementptr inbounds i8, i8* %2, i64 6
  store i8 %275, i8* %282, align 1
  %283 = getelementptr inbounds i8, i8* %2, i64 7
  store i8 %276, i8* %283, align 1
  %284 = trunc i64 %261 to i8
  %285 = getelementptr inbounds i8, i8* %2, i64 8
  store i8 %284, i8* %285, align 1
  %286 = lshr i64 %261, 8
  %287 = trunc i64 %286 to i8
  %288 = getelementptr inbounds i8, i8* %2, i64 9
  store i8 %287, i8* %288, align 1
  %289 = lshr i64 %261, 16
  %290 = trunc i64 %289 to i8
  %291 = getelementptr inbounds i8, i8* %2, i64 10
  store i8 %290, i8* %291, align 1
  %292 = lshr i64 %261, 24
  %293 = trunc i64 %292 to i8
  %294 = getelementptr inbounds i8, i8* %2, i64 11
  store i8 %293, i8* %294, align 1
  %295 = lshr i64 %261, 32
  %296 = trunc i64 %295 to i8
  %297 = getelementptr inbounds i8, i8* %2, i64 12
  store i8 %296, i8* %297, align 1
  %298 = lshr i64 %261, 40
  %299 = trunc i64 %298 to i8
  %300 = getelementptr inbounds i8, i8* %2, i64 13
  store i8 %299, i8* %300, align 1
  %301 = lshr i64 %261, 48
  %302 = trunc i64 %301 to i8
  %303 = getelementptr inbounds i8, i8* %2, i64 14
  store i8 %302, i8* %303, align 1
  %304 = lshr i64 %261, 56
  %305 = trunc i64 %304 to i8
  %306 = getelementptr inbounds i8, i8* %2, i64 15
  store i8 %305, i8* %306, align 1
  call void @llvm.lifetime.end(i64 16, i8* nonnull %16) 
  call void @llvm.lifetime.end(i64 16, i8* nonnull %13) 
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L6PSHUFWI4RVnWI7vec64_tE3RVnIS2_EEEP6MemoryS7_R5StateT_T0_2InIhE(%struct.Memory* readnone returned, %struct.State* nocapture readnone dereferenceable(3376), i64* nocapture, i64, i64)  {
  %6 = alloca i64, align 8
  %7 = alloca i64, align 8
  %8 = bitcast i64* %7 to %struct.int16v4_t*
  %9 = bitcast i64* %7 to i8*
  call void @llvm.lifetime.start(i64 8, i8* nonnull %9) 
  store i64 %3, i64* %7, align 8
  %10 = bitcast i64* %6 to i8*
  %11 = bitcast i64* %6 to [4 x i16]*
  %12 = and i64 %4, 3
  %13 = getelementptr inbounds %struct.int16v4_t, %struct.int16v4_t* %8, i64 0, i32 0, i64 %12
  %14 = load i16, i16* %13, align 2
  call void @llvm.lifetime.start(i64 8, i8* nonnull %10)
  store i64 0, i64* %6, align 8
  %15 = bitcast i64* %6 to i16*
  store i16 %14, i16* %15, align 8
  %16 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %10)
  %17 = lshr i64 %4, 1
  %18 = and i64 %17, 3
  %19 = getelementptr inbounds %struct.int16v4_t, %struct.int16v4_t* %8, i64 0, i32 0, i64 %18
  %20 = load i16, i16* %19, align 2
  call void @llvm.lifetime.start(i64 8, i8* nonnull %10)
  store i64 %16, i64* %6, align 8
  %21 = getelementptr inbounds [4 x i16], [4 x i16]* %11, i64 0, i64 1
  store i16 %20, i16* %21, align 2
  %22 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %10)
  %23 = lshr i64 %4, 2
  %24 = and i64 %23, 3
  %25 = getelementptr inbounds %struct.int16v4_t, %struct.int16v4_t* %8, i64 0, i32 0, i64 %24
  %26 = load i16, i16* %25, align 2
  call void @llvm.lifetime.start(i64 8, i8* nonnull %10)
  store i64 %22, i64* %6, align 8
  %27 = getelementptr inbounds [4 x i16], [4 x i16]* %11, i64 0, i64 2
  store i16 %26, i16* %27, align 4
  %28 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %10)
  %29 = lshr i64 %4, 3
  %30 = and i64 %29, 3
  %31 = getelementptr inbounds %struct.int16v4_t, %struct.int16v4_t* %8, i64 0, i32 0, i64 %30
  %32 = load i16, i16* %31, align 2
  call void @llvm.lifetime.start(i64 8, i8* nonnull %10)
  store i64 %28, i64* %6, align 8
  %33 = getelementptr inbounds [4 x i16], [4 x i16]* %11, i64 0, i64 3
  store i16 %32, i16* %33, align 2
  %34 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %10)
  %35 = lshr i64 %34, 16
  %36 = lshr i64 %34, 32
  %37 = lshr i64 %34, 48
  %38 = trunc i64 %34 to i16
  %39 = trunc i64 %35 to i16
  %40 = trunc i64 %36 to i16
  %41 = trunc i64 %37 to i16
  %42 = bitcast i64* %2 to [4 x i16]*
  %43 = bitcast i64* %2 to i16*
  store i16 %38, i16* %43, align 1
  %44 = getelementptr inbounds [4 x i16], [4 x i16]* %42, i64 0, i64 1
  store i16 %39, i16* %44, align 1
  %45 = getelementptr inbounds [4 x i16], [4 x i16]* %42, i64 0, i64 2
  store i16 %40, i16* %45, align 1
  %46 = getelementptr inbounds [4 x i16], [4 x i16]* %42, i64 0, i64 3
  store i16 %41, i16* %46, align 1
  call void @llvm.lifetime.end(i64 8, i8* nonnull %9) 
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L6PSHUFWI4RVnWI7vec64_tE3MVnIS2_EEEP6MemoryS7_R5StateT_T0_2InIhE(%struct.Memory* returned, %struct.State* nocapture readnone dereferenceable(3376), i64* nocapture, i64, i64)  {
  %6 = alloca i64, align 8
  %7 = alloca i64, align 8
  %8 = bitcast i64* %7 to %struct.int16v4_t*
  %9 = bitcast i64* %7 to i8*
  call void @llvm.lifetime.start(i64 8, i8* nonnull %9) 
  %10 = inttoptr i64 %3 to i16*
  %11 = load i16, i16* %10
  %12 = add i64 %3, 2
  %13 = inttoptr i64 %12 to i16*
  %14 = load i16, i16* %13
  %15 = add i64 %3, 4
  %16 = inttoptr i64 %15 to i16*
  %17 = load i16, i16* %16
  %18 = add i64 %3, 6
  %19 = inttoptr i64 %18 to i16*
  %20 = load i16, i16* %19
  %21 = zext i16 %20 to i64
  %22 = shl nuw i64 %21, 48
  %23 = zext i16 %17 to i64
  %24 = shl nuw nsw i64 %23, 32
  %25 = zext i16 %14 to i64
  %26 = shl nuw nsw i64 %25, 16
  %27 = zext i16 %11 to i64
  %28 = or i64 %26, %27
  %29 = or i64 %28, %24
  %30 = or i64 %29, %22
  store i64 %30, i64* %7, align 8
  %31 = bitcast i64* %6 to i8*
  %32 = bitcast i64* %6 to [4 x i16]*
  %33 = and i64 %4, 3
  %34 = getelementptr inbounds %struct.int16v4_t, %struct.int16v4_t* %8, i64 0, i32 0, i64 %33
  %35 = load i16, i16* %34, align 2
  call void @llvm.lifetime.start(i64 8, i8* nonnull %31)
  store i64 0, i64* %6, align 8
  %36 = bitcast i64* %6 to i16*
  store i16 %35, i16* %36, align 8
  %37 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %31)
  %38 = lshr i64 %4, 1
  %39 = and i64 %38, 3
  %40 = getelementptr inbounds %struct.int16v4_t, %struct.int16v4_t* %8, i64 0, i32 0, i64 %39
  %41 = load i16, i16* %40, align 2
  call void @llvm.lifetime.start(i64 8, i8* nonnull %31)
  store i64 %37, i64* %6, align 8
  %42 = getelementptr inbounds [4 x i16], [4 x i16]* %32, i64 0, i64 1
  store i16 %41, i16* %42, align 2
  %43 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %31)
  %44 = lshr i64 %4, 2
  %45 = and i64 %44, 3
  %46 = getelementptr inbounds %struct.int16v4_t, %struct.int16v4_t* %8, i64 0, i32 0, i64 %45
  %47 = load i16, i16* %46, align 2
  call void @llvm.lifetime.start(i64 8, i8* nonnull %31)
  store i64 %43, i64* %6, align 8
  %48 = getelementptr inbounds [4 x i16], [4 x i16]* %32, i64 0, i64 2
  store i16 %47, i16* %48, align 4
  %49 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %31)
  %50 = lshr i64 %4, 3
  %51 = and i64 %50, 3
  %52 = getelementptr inbounds %struct.int16v4_t, %struct.int16v4_t* %8, i64 0, i32 0, i64 %51
  %53 = load i16, i16* %52, align 2
  call void @llvm.lifetime.start(i64 8, i8* nonnull %31)
  store i64 %49, i64* %6, align 8
  %54 = getelementptr inbounds [4 x i16], [4 x i16]* %32, i64 0, i64 3
  store i16 %53, i16* %54, align 2
  %55 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %31)
  %56 = lshr i64 %55, 16
  %57 = lshr i64 %55, 32
  %58 = lshr i64 %55, 48
  %59 = trunc i64 %55 to i16
  %60 = trunc i64 %56 to i16
  %61 = trunc i64 %57 to i16
  %62 = trunc i64 %58 to i16
  %63 = bitcast i64* %2 to [4 x i16]*
  %64 = bitcast i64* %2 to i16*
  store i16 %59, i16* %64, align 1
  %65 = getelementptr inbounds [4 x i16], [4 x i16]* %63, i64 0, i64 1
  store i16 %60, i16* %65, align 1
  %66 = getelementptr inbounds [4 x i16], [4 x i16]* %63, i64 0, i64 2
  store i16 %61, i16* %66, align 1
  %67 = getelementptr inbounds [4 x i16], [4 x i16]* %63, i64 0, i64 3
  store i16 %62, i16* %67, align 1
  call void @llvm.lifetime.end(i64 8, i8* nonnull %9) 
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L6PSADBWI4RVnWI7vec64_tE3RVnIS2_ES5_EEP6MemoryS7_R5StateT_T0_T1_(%struct.Memory* readnone returned, %struct.State* nocapture readnone dereferenceable(3376), i64* nocapture, i64, i64)  {
  %6 = trunc i64 %3 to i8
  %7 = trunc i64 %4 to i8
  %8 = icmp uge i8 %6, %7
  %9 = sub i64 %3, %4
  %10 = sub i64 %4, %3
  %11 = select i1 %8, i64 %9, i64 %10
  %12 = and i64 %11, 255
  %13 = lshr i64 %3, 8
  %14 = trunc i64 %13 to i8
  %15 = lshr i64 %4, 8
  %16 = trunc i64 %15 to i8
  %17 = icmp uge i8 %14, %16
  %18 = sub nsw i64 %13, %15
  %19 = sub nsw i64 %15, %13
  %20 = select i1 %17, i64 %18, i64 %19
  %21 = and i64 %20, 255
  %22 = add nuw nsw i64 %21, %12
  %23 = lshr i64 %3, 16
  %24 = trunc i64 %23 to i8
  %25 = lshr i64 %4, 16
  %26 = trunc i64 %25 to i8
  %27 = icmp uge i8 %24, %26
  %28 = sub nsw i64 %23, %25
  %29 = sub nsw i64 %25, %23
  %30 = select i1 %27, i64 %28, i64 %29
  %31 = and i64 %30, 255
  %32 = add nuw nsw i64 %31, %22
  %33 = lshr i64 %3, 24
  %34 = trunc i64 %33 to i8
  %35 = lshr i64 %4, 24
  %36 = trunc i64 %35 to i8
  %37 = icmp uge i8 %34, %36
  %38 = sub nsw i64 %33, %35
  %39 = sub nsw i64 %35, %33
  %40 = select i1 %37, i64 %38, i64 %39
  %41 = and i64 %40, 255
  %42 = add nuw nsw i64 %41, %32
  %43 = lshr i64 %3, 32
  %44 = trunc i64 %43 to i8
  %45 = lshr i64 %4, 32
  %46 = trunc i64 %45 to i8
  %47 = icmp uge i8 %44, %46
  %48 = sub nsw i64 %43, %45
  %49 = sub nsw i64 %45, %43
  %50 = select i1 %47, i64 %48, i64 %49
  %51 = and i64 %50, 255
  %52 = add nuw nsw i64 %51, %42
  %53 = lshr i64 %3, 40
  %54 = trunc i64 %53 to i8
  %55 = lshr i64 %4, 40
  %56 = trunc i64 %55 to i8
  %57 = icmp uge i8 %54, %56
  %58 = sub nsw i64 %53, %55
  %59 = sub nsw i64 %55, %53
  %60 = select i1 %57, i64 %58, i64 %59
  %61 = and i64 %60, 255
  %62 = add nuw nsw i64 %61, %52
  %63 = lshr i64 %3, 48
  %64 = trunc i64 %63 to i8
  %65 = lshr i64 %4, 48
  %66 = trunc i64 %65 to i8
  %67 = icmp uge i8 %64, %66
  %68 = sub nsw i64 %63, %65
  %69 = sub nsw i64 %65, %63
  %70 = select i1 %67, i64 %68, i64 %69
  %71 = and i64 %70, 255
  %72 = add nuw nsw i64 %71, %62
  %73 = lshr i64 %3, 56
  %74 = trunc i64 %73 to i8
  %75 = lshr i64 %4, 56
  %76 = trunc i64 %75 to i8
  %77 = icmp uge i8 %74, %76
  %78 = sub nsw i64 %73, %75
  %79 = sub nsw i64 %75, %73
  %80 = select i1 %77, i64 %78, i64 %79
  %81 = and i64 %80, 255
  %82 = add i64 %81, %72
  %83 = and i64 %82, 65535
  store i64 %83, i64* %2, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L6PSADBWI4RVnWI7vec64_tE3RVnIS2_E3MVnIS2_EEEP6MemoryS9_R5StateT_T0_T1_(%struct.Memory* returned, %struct.State* nocapture readnone dereferenceable(3376), i64* nocapture, i64, i64)  {
  %6 = alloca i64, align 8
  %7 = bitcast i64* %6 to %struct.uint8v8_t*
  %8 = bitcast i64* %6 to i8*
  call void @llvm.lifetime.start(i64 8, i8* nonnull %8) 
  store i64 %3, i64* %6, align 8
  %9 = inttoptr i64 %4 to i8*
  %10 = load i8, i8* %9
  %11 = add i64 %4, 1
  %12 = inttoptr i64 %11 to i8*
  %13 = load i8, i8* %12
  %14 = add i64 %4, 2
  %15 = inttoptr i64 %14 to i8*
  %16 = load i8, i8* %15
  %17 = add i64 %4, 3
  %18 = inttoptr i64 %17 to i8*
  %19 = load i8, i8* %18
  %20 = add i64 %4, 4
  %21 = inttoptr i64 %20 to i8*
  %22 = load i8, i8* %21
  %23 = add i64 %4, 5
  %24 = inttoptr i64 %23 to i8*
  %25 = load i8, i8* %24
  %26 = add i64 %4, 6
  %27 = inttoptr i64 %26 to i8*
  %28 = load i8, i8* %27
  %29 = add i64 %4, 7
  %30 = inttoptr i64 %29 to i8*
  %31 = load i8, i8* %30
  %32 = zext i8 %25 to i64
  %33 = zext i8 %22 to i64
  %34 = zext i8 %19 to i64
  %35 = zext i8 %16 to i64
  %36 = zext i8 %13 to i64
  %37 = trunc i64 %3 to i8
  %38 = icmp uge i8 %37, %10
  %39 = sub i8 %37, %10
  %40 = sub i8 %10, %37
  %41 = select i1 %38, i8 %39, i8 %40
  %42 = zext i8 %41 to i64
  %43 = lshr i64 %3, 8
  %44 = trunc i64 %43 to i8
  %45 = icmp uge i8 %44, %13
  %46 = sub nsw i64 %43, %36
  %47 = sub nsw i64 %36, %43
  %48 = select i1 %45, i64 %46, i64 %47
  %49 = and i64 %48, 255
  %50 = add nuw nsw i64 %49, %42
  %51 = lshr i64 %3, 16
  %52 = trunc i64 %51 to i8
  %53 = icmp uge i8 %52, %16
  %54 = sub nsw i64 %51, %35
  %55 = sub nsw i64 %35, %51
  %56 = select i1 %53, i64 %54, i64 %55
  %57 = and i64 %56, 255
  %58 = add nuw nsw i64 %57, %50
  %59 = lshr i64 %3, 24
  %60 = trunc i64 %59 to i8
  %61 = icmp uge i8 %60, %19
  %62 = sub nsw i64 %59, %34
  %63 = sub nsw i64 %34, %59
  %64 = select i1 %61, i64 %62, i64 %63
  %65 = and i64 %64, 255
  %66 = add nuw nsw i64 %65, %58
  %67 = lshr i64 %3, 32
  %68 = trunc i64 %67 to i8
  %69 = icmp uge i8 %68, %22
  %70 = sub nsw i64 %67, %33
  %71 = sub nsw i64 %33, %67
  %72 = select i1 %69, i64 %70, i64 %71
  %73 = and i64 %72, 255
  %74 = add nuw nsw i64 %73, %66
  %75 = lshr i64 %3, 40
  %76 = trunc i64 %75 to i8
  %77 = icmp uge i8 %76, %25
  %78 = sub nsw i64 %75, %32
  %79 = sub nsw i64 %32, %75
  %80 = select i1 %77, i64 %78, i64 %79
  %81 = and i64 %80, 255
  %82 = add nuw nsw i64 %81, %74
  %83 = getelementptr inbounds %struct.uint8v8_t, %struct.uint8v8_t* %7, i64 0, i32 0, i64 6
  %84 = load i8, i8* %83, align 2
  %85 = icmp uge i8 %84, %28
  %86 = sub i8 %84, %28
  %87 = sub i8 %28, %84
  %88 = select i1 %85, i8 %86, i8 %87
  %89 = zext i8 %88 to i64
  %90 = add nuw nsw i64 %89, %82
  %91 = getelementptr inbounds %struct.uint8v8_t, %struct.uint8v8_t* %7, i64 0, i32 0, i64 7
  %92 = load i8, i8* %91, align 1
  %93 = icmp uge i8 %92, %31
  %94 = sub i8 %92, %31
  %95 = sub i8 %31, %92
  %96 = select i1 %93, i8 %94, i8 %95
  %97 = zext i8 %96 to i64
  %98 = add i64 %97, %90
  %99 = and i64 %98, 65535
  store i64 %99, i64* %2, align 1
  call void @llvm.lifetime.end(i64 8, i8* nonnull %8) 
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L6PSADBWI3VnWI8vec128_tE2VnIS2_ES5_EEP6MemoryS7_R5StateT_T0_T1_(%struct.Memory* readnone returned, %struct.State* nocapture readnone dereferenceable(3376), i8* nocapture, i8* nocapture readonly, i8* nocapture readonly)  {
  %6 = alloca <2 x i64>, align 16
  %7 = bitcast <2 x i64>* %6 to { i64, i64 }*
  %8 = bitcast <2 x i64>* %6 to %struct.uint8v16_t*
  %9 = alloca <2 x i64>, align 16
  %10 = bitcast <2 x i64>* %9 to { i64, i64 }*
  %11 = bitcast <2 x i64>* %9 to %struct.uint8v16_t*
  %12 = bitcast <2 x i64>* %6 to i8*
  call void @llvm.lifetime.start(i64 16, i8* nonnull %12) 
  %13 = bitcast i8* %3 to <2 x i64>*
  %14 = load <2 x i64>, <2 x i64>* %13, align 1
  store <2 x i64> %14, <2 x i64>* %6, align 16
  %15 = bitcast <2 x i64>* %9 to i8*
  call void @llvm.lifetime.start(i64 16, i8* nonnull %15) 
  %16 = bitcast i8* %4 to <2 x i64>*
  %17 = load <2 x i64>, <2 x i64>* %16, align 1
  store <2 x i64> %17, <2 x i64>* %9, align 16
  %18 = extractelement <2 x i64> %14, i32 0
  %19 = trunc i64 %18 to i8
  %20 = extractelement <2 x i64> %17, i32 0
  %21 = trunc i64 %20 to i8
  %22 = icmp uge i8 %19, %21
  %23 = sub i64 %18, %20
  %24 = sub i64 %20, %18
  %25 = select i1 %22, i64 %23, i64 %24
  %26 = and i64 %25, 255
  %27 = lshr i64 %18, 8
  %28 = trunc i64 %27 to i8
  %29 = lshr i64 %20, 8
  %30 = trunc i64 %29 to i8
  %31 = icmp uge i8 %28, %30
  %32 = sub nsw i64 %27, %29
  %33 = sub nsw i64 %29, %27
  %34 = select i1 %31, i64 %32, i64 %33
  %35 = and i64 %34, 255
  %36 = add nuw nsw i64 %35, %26
  %37 = lshr i64 %18, 16
  %38 = trunc i64 %37 to i8
  %39 = lshr i64 %20, 16
  %40 = trunc i64 %39 to i8
  %41 = icmp uge i8 %38, %40
  %42 = sub nsw i64 %37, %39
  %43 = sub nsw i64 %39, %37
  %44 = select i1 %41, i64 %42, i64 %43
  %45 = and i64 %44, 255
  %46 = add nuw nsw i64 %45, %36
  %47 = lshr i64 %18, 24
  %48 = trunc i64 %47 to i8
  %49 = lshr i64 %20, 24
  %50 = trunc i64 %49 to i8
  %51 = icmp uge i8 %48, %50
  %52 = sub nsw i64 %47, %49
  %53 = sub nsw i64 %49, %47
  %54 = select i1 %51, i64 %52, i64 %53
  %55 = and i64 %54, 255
  %56 = add nuw nsw i64 %55, %46
  %57 = lshr i64 %18, 32
  %58 = trunc i64 %57 to i8
  %59 = lshr i64 %20, 32
  %60 = trunc i64 %59 to i8
  %61 = icmp uge i8 %58, %60
  %62 = sub nsw i64 %57, %59
  %63 = sub nsw i64 %59, %57
  %64 = select i1 %61, i64 %62, i64 %63
  %65 = and i64 %64, 255
  %66 = add nuw nsw i64 %65, %56
  %67 = lshr i64 %18, 40
  %68 = trunc i64 %67 to i8
  %69 = lshr i64 %20, 40
  %70 = trunc i64 %69 to i8
  %71 = icmp uge i8 %68, %70
  %72 = sub nsw i64 %67, %69
  %73 = sub nsw i64 %69, %67
  %74 = select i1 %71, i64 %72, i64 %73
  %75 = and i64 %74, 255
  %76 = add nuw nsw i64 %75, %66
  %77 = lshr i64 %18, 48
  %78 = trunc i64 %77 to i8
  %79 = lshr i64 %20, 48
  %80 = trunc i64 %79 to i8
  %81 = icmp uge i8 %78, %80
  %82 = sub nsw i64 %77, %79
  %83 = sub nsw i64 %79, %77
  %84 = select i1 %81, i64 %82, i64 %83
  %85 = and i64 %84, 255
  %86 = add nuw nsw i64 %85, %76
  %87 = lshr i64 %18, 56
  %88 = trunc i64 %87 to i8
  %89 = lshr i64 %20, 56
  %90 = trunc i64 %89 to i8
  %91 = icmp uge i8 %88, %90
  %92 = sub nsw i64 %87, %89
  %93 = sub nsw i64 %89, %87
  %94 = select i1 %91, i64 %92, i64 %93
  %95 = and i64 %94, 255
  %96 = add i64 %95, %86
  %97 = and i64 %96, 65535
  %98 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %7, i64 0, i32 1
  %99 = bitcast i64* %98 to i8*
  %100 = load i8, i8* %99, align 8
  %101 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %10, i64 0, i32 1
  %102 = bitcast i64* %101 to i8*
  %103 = load i8, i8* %102, align 8
  %104 = icmp uge i8 %100, %103
  %105 = sub i8 %100, %103
  %106 = sub i8 %103, %100
  %107 = select i1 %104, i8 %105, i8 %106
  %108 = zext i8 %107 to i64
  %109 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %8, i64 0, i32 0, i64 9
  %110 = load i8, i8* %109, align 1
  %111 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %11, i64 0, i32 0, i64 9
  %112 = load i8, i8* %111, align 1
  %113 = icmp uge i8 %110, %112
  %114 = sub i8 %110, %112
  %115 = sub i8 %112, %110
  %116 = select i1 %113, i8 %114, i8 %115
  %117 = zext i8 %116 to i64
  %118 = add nuw nsw i64 %117, %108
  %119 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %8, i64 0, i32 0, i64 10
  %120 = load i8, i8* %119, align 2
  %121 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %11, i64 0, i32 0, i64 10
  %122 = load i8, i8* %121, align 2
  %123 = icmp uge i8 %120, %122
  %124 = sub i8 %120, %122
  %125 = sub i8 %122, %120
  %126 = select i1 %123, i8 %124, i8 %125
  %127 = zext i8 %126 to i64
  %128 = add nuw nsw i64 %127, %118
  %129 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %8, i64 0, i32 0, i64 11
  %130 = load i8, i8* %129, align 1
  %131 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %11, i64 0, i32 0, i64 11
  %132 = load i8, i8* %131, align 1
  %133 = icmp uge i8 %130, %132
  %134 = sub i8 %130, %132
  %135 = sub i8 %132, %130
  %136 = select i1 %133, i8 %134, i8 %135
  %137 = zext i8 %136 to i64
  %138 = add nuw nsw i64 %137, %128
  %139 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %8, i64 0, i32 0, i64 12
  %140 = load i8, i8* %139, align 4
  %141 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %11, i64 0, i32 0, i64 12
  %142 = load i8, i8* %141, align 4
  %143 = icmp uge i8 %140, %142
  %144 = sub i8 %140, %142
  %145 = sub i8 %142, %140
  %146 = select i1 %143, i8 %144, i8 %145
  %147 = zext i8 %146 to i64
  %148 = add nuw nsw i64 %147, %138
  %149 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %8, i64 0, i32 0, i64 13
  %150 = load i8, i8* %149, align 1
  %151 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %11, i64 0, i32 0, i64 13
  %152 = load i8, i8* %151, align 1
  %153 = icmp uge i8 %150, %152
  %154 = sub i8 %150, %152
  %155 = sub i8 %152, %150
  %156 = select i1 %153, i8 %154, i8 %155
  %157 = zext i8 %156 to i64
  %158 = add nuw nsw i64 %157, %148
  %159 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %8, i64 0, i32 0, i64 14
  %160 = load i8, i8* %159, align 2
  %161 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %11, i64 0, i32 0, i64 14
  %162 = load i8, i8* %161, align 2
  %163 = icmp uge i8 %160, %162
  %164 = sub i8 %160, %162
  %165 = sub i8 %162, %160
  %166 = select i1 %163, i8 %164, i8 %165
  %167 = zext i8 %166 to i64
  %168 = add nuw nsw i64 %167, %158
  %169 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %8, i64 0, i32 0, i64 15
  %170 = load i8, i8* %169, align 1
  %171 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %11, i64 0, i32 0, i64 15
  %172 = load i8, i8* %171, align 1
  %173 = icmp uge i8 %170, %172
  %174 = sub i8 %170, %172
  %175 = sub i8 %172, %170
  %176 = select i1 %173, i8 %174, i8 %175
  %177 = zext i8 %176 to i64
  %178 = add i64 %177, %168
  %179 = and i64 %178, 65535
  %180 = bitcast i8* %2 to i64*
  store i64 %97, i64* %180, align 1
  %181 = getelementptr inbounds i8, i8* %2, i64 8
  %182 = bitcast i8* %181 to i64*
  store i64 %179, i64* %182, align 1
  call void @llvm.lifetime.end(i64 16, i8* nonnull %15) 
  call void @llvm.lifetime.end(i64 16, i8* nonnull %12) 
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L6PSADBWI3VnWI8vec128_tE2VnIS2_E3MVnIS2_EEEP6MemoryS9_R5StateT_T0_T1_(%struct.Memory* returned, %struct.State* nocapture readnone dereferenceable(3376), i8* nocapture, i8* nocapture readonly, i64)  {
  %6 = alloca <2 x i64>, align 16
  %7 = bitcast <2 x i64>* %6 to { i64, i64 }*
  %8 = bitcast <2 x i64>* %6 to %struct.uint8v16_t*
  %9 = alloca <2 x i64>, align 16
  %10 = bitcast <2 x i64>* %9 to { i64, i64 }*
  %11 = bitcast <2 x i64>* %9 to %struct.uint8v16_t*
  %12 = bitcast <2 x i64>* %6 to i8*
  call void @llvm.lifetime.start(i64 16, i8* nonnull %12) 
  %13 = bitcast i8* %3 to <2 x i64>*
  %14 = load <2 x i64>, <2 x i64>* %13, align 1
  store <2 x i64> %14, <2 x i64>* %6, align 16
  %15 = bitcast <2 x i64>* %9 to i8*
  call void @llvm.lifetime.start(i64 16, i8* nonnull %15) 
  %16 = inttoptr i64 %4 to i8*
  %17 = load i8, i8* %16
  %18 = add i64 %4, 1
  %19 = inttoptr i64 %18 to i8*
  %20 = load i8, i8* %19
  %21 = add i64 %4, 2
  %22 = inttoptr i64 %21 to i8*
  %23 = load i8, i8* %22
  %24 = add i64 %4, 3
  %25 = inttoptr i64 %24 to i8*
  %26 = load i8, i8* %25
  %27 = add i64 %4, 4
  %28 = inttoptr i64 %27 to i8*
  %29 = load i8, i8* %28
  %30 = add i64 %4, 5
  %31 = inttoptr i64 %30 to i8*
  %32 = load i8, i8* %31
  %33 = add i64 %4, 6
  %34 = inttoptr i64 %33 to i8*
  %35 = load i8, i8* %34
  %36 = add i64 %4, 7
  %37 = inttoptr i64 %36 to i8*
  %38 = load i8, i8* %37
  %39 = add i64 %4, 8
  %40 = inttoptr i64 %39 to i8*
  %41 = load i8, i8* %40
  %42 = add i64 %4, 9
  %43 = inttoptr i64 %42 to i8*
  %44 = load i8, i8* %43
  %45 = add i64 %4, 10
  %46 = inttoptr i64 %45 to i8*
  %47 = load i8, i8* %46
  %48 = add i64 %4, 11
  %49 = inttoptr i64 %48 to i8*
  %50 = load i8, i8* %49
  %51 = add i64 %4, 12
  %52 = inttoptr i64 %51 to i8*
  %53 = load i8, i8* %52
  %54 = add i64 %4, 13
  %55 = inttoptr i64 %54 to i8*
  %56 = load i8, i8* %55
  %57 = add i64 %4, 14
  %58 = inttoptr i64 %57 to i8*
  %59 = load i8, i8* %58
  %60 = add i64 %4, 15
  %61 = inttoptr i64 %60 to i8*
  %62 = load i8, i8* %61
  %63 = insertelement <2 x i8> undef, i8 %38, i32 0
  %64 = insertelement <2 x i8> %63, i8 %62, i32 1
  %65 = zext <2 x i8> %64 to <2 x i64>
  %66 = shl nuw <2 x i64> %65, <i64 56, i64 56>
  %67 = insertelement <2 x i8> undef, i8 %35, i32 0
  %68 = insertelement <2 x i8> %67, i8 %59, i32 1
  %69 = zext <2 x i8> %68 to <2 x i64>
  %70 = shl nuw nsw <2 x i64> %69, <i64 48, i64 48>
  %71 = insertelement <2 x i8> undef, i8 %32, i32 0
  %72 = insertelement <2 x i8> %71, i8 %56, i32 1
  %73 = zext <2 x i8> %72 to <2 x i64>
  %74 = shl nuw nsw <2 x i64> %73, <i64 40, i64 40>
  %75 = insertelement <2 x i8> undef, i8 %29, i32 0
  %76 = insertelement <2 x i8> %75, i8 %53, i32 1
  %77 = zext <2 x i8> %76 to <2 x i64>
  %78 = shl nuw nsw <2 x i64> %77, <i64 32, i64 32>
  %79 = insertelement <2 x i8> undef, i8 %26, i32 0
  %80 = insertelement <2 x i8> %79, i8 %50, i32 1
  %81 = zext <2 x i8> %80 to <2 x i64>
  %82 = shl nuw nsw <2 x i64> %81, <i64 24, i64 24>
  %83 = insertelement <2 x i8> undef, i8 %23, i32 0
  %84 = insertelement <2 x i8> %83, i8 %47, i32 1
  %85 = zext <2 x i8> %84 to <2 x i64>
  %86 = shl nuw nsw <2 x i64> %85, <i64 16, i64 16>
  %87 = insertelement <2 x i8> undef, i8 %20, i32 0
  %88 = insertelement <2 x i8> %87, i8 %44, i32 1
  %89 = zext <2 x i8> %88 to <2 x i64>
  %90 = shl nuw nsw <2 x i64> %89, <i64 8, i64 8>
  %91 = insertelement <2 x i8> undef, i8 %17, i32 0
  %92 = insertelement <2 x i8> %91, i8 %41, i32 1
  %93 = zext <2 x i8> %92 to <2 x i64>
  %94 = or <2 x i64> %90, %93
  %95 = or <2 x i64> %94, %86
  %96 = or <2 x i64> %95, %82
  %97 = or <2 x i64> %96, %78
  %98 = or <2 x i64> %97, %74
  %99 = or <2 x i64> %98, %70
  %100 = or <2 x i64> %99, %66
  store <2 x i64> %100, <2 x i64>* %9, align 16
  %101 = extractelement <2 x i64> %14, i32 0
  %102 = trunc i64 %101 to i8
  %103 = icmp uge i8 %102, %17
  %104 = sub i8 %102, %17
  %105 = sub i8 %17, %102
  %106 = select i1 %103, i8 %104, i8 %105
  %107 = zext i8 %106 to i64
  %108 = lshr i64 %101, 8
  %109 = trunc i64 %108 to i8
  %110 = icmp uge i8 %109, %20
  %111 = extractelement <2 x i64> %89, i32 0
  %112 = sub nsw i64 %108, %111
  %113 = sub nsw i64 %111, %108
  %114 = select i1 %110, i64 %112, i64 %113
  %115 = and i64 %114, 255
  %116 = add nuw nsw i64 %115, %107
  %117 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %8, i64 0, i32 0, i64 2
  %118 = load i8, i8* %117, align 2
  %119 = icmp uge i8 %118, %23
  %120 = sub i8 %118, %23
  %121 = sub i8 %23, %118
  %122 = select i1 %119, i8 %120, i8 %121
  %123 = zext i8 %122 to i64
  %124 = add nuw nsw i64 %123, %116
  %125 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %8, i64 0, i32 0, i64 3
  %126 = load i8, i8* %125, align 1
  %127 = icmp uge i8 %126, %26
  %128 = sub i8 %126, %26
  %129 = sub i8 %26, %126
  %130 = select i1 %127, i8 %128, i8 %129
  %131 = zext i8 %130 to i64
  %132 = add nuw nsw i64 %131, %124
  %133 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %8, i64 0, i32 0, i64 4
  %134 = load i8, i8* %133, align 4
  %135 = extractelement <2 x i64> %97, i32 0
  %136 = lshr i64 %135, 32
  %137 = trunc i64 %136 to i8
  %138 = icmp uge i8 %134, %137
  %139 = sub i8 %134, %137
  %140 = sub i8 %137, %134
  %141 = select i1 %138, i8 %139, i8 %140
  %142 = zext i8 %141 to i64
  %143 = add nuw nsw i64 %142, %132
  %144 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %8, i64 0, i32 0, i64 5
  %145 = load i8, i8* %144, align 1
  %146 = extractelement <2 x i64> %98, i32 0
  %147 = lshr i64 %146, 40
  %148 = trunc i64 %147 to i8
  %149 = icmp uge i8 %145, %148
  %150 = sub i8 %145, %148
  %151 = sub i8 %148, %145
  %152 = select i1 %149, i8 %150, i8 %151
  %153 = zext i8 %152 to i64
  %154 = add nuw nsw i64 %153, %143
  %155 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %8, i64 0, i32 0, i64 6
  %156 = load i8, i8* %155, align 2
  %157 = extractelement <2 x i64> %99, i32 0
  %158 = lshr i64 %157, 48
  %159 = trunc i64 %158 to i8
  %160 = icmp uge i8 %156, %159
  %161 = sub i8 %156, %159
  %162 = sub i8 %159, %156
  %163 = select i1 %160, i8 %161, i8 %162
  %164 = zext i8 %163 to i64
  %165 = add nuw nsw i64 %164, %154
  %166 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %8, i64 0, i32 0, i64 7
  %167 = load i8, i8* %166, align 1
  %168 = extractelement <2 x i64> %100, i32 0
  %169 = lshr i64 %168, 56
  %170 = trunc i64 %169 to i8
  %171 = icmp uge i8 %167, %170
  %172 = sub i8 %167, %170
  %173 = sub i8 %170, %167
  %174 = select i1 %171, i8 %172, i8 %173
  %175 = zext i8 %174 to i64
  %176 = add i64 %175, %165
  %177 = and i64 %176, 65535
  %178 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %7, i64 0, i32 1
  %179 = bitcast i64* %178 to i8*
  %180 = load i8, i8* %179, align 8
  %181 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %10, i64 0, i32 1
  %182 = bitcast i64* %181 to i8*
  %183 = load i8, i8* %182, align 8
  %184 = icmp uge i8 %180, %183
  %185 = sub i8 %180, %183
  %186 = sub i8 %183, %180
  %187 = select i1 %184, i8 %185, i8 %186
  %188 = zext i8 %187 to i64
  %189 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %8, i64 0, i32 0, i64 9
  %190 = load i8, i8* %189, align 1
  %191 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %11, i64 0, i32 0, i64 9
  %192 = load i8, i8* %191, align 1
  %193 = icmp uge i8 %190, %192
  %194 = sub i8 %190, %192
  %195 = sub i8 %192, %190
  %196 = select i1 %193, i8 %194, i8 %195
  %197 = zext i8 %196 to i64
  %198 = add nuw nsw i64 %197, %188
  %199 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %8, i64 0, i32 0, i64 10
  %200 = load i8, i8* %199, align 2
  %201 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %11, i64 0, i32 0, i64 10
  %202 = load i8, i8* %201, align 2
  %203 = icmp uge i8 %200, %202
  %204 = sub i8 %200, %202
  %205 = sub i8 %202, %200
  %206 = select i1 %203, i8 %204, i8 %205
  %207 = zext i8 %206 to i64
  %208 = add nuw nsw i64 %207, %198
  %209 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %8, i64 0, i32 0, i64 11
  %210 = load i8, i8* %209, align 1
  %211 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %11, i64 0, i32 0, i64 11
  %212 = load i8, i8* %211, align 1
  %213 = icmp uge i8 %210, %212
  %214 = sub i8 %210, %212
  %215 = sub i8 %212, %210
  %216 = select i1 %213, i8 %214, i8 %215
  %217 = zext i8 %216 to i64
  %218 = add nuw nsw i64 %217, %208
  %219 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %8, i64 0, i32 0, i64 12
  %220 = load i8, i8* %219, align 4
  %221 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %11, i64 0, i32 0, i64 12
  %222 = load i8, i8* %221, align 4
  %223 = icmp uge i8 %220, %222
  %224 = sub i8 %220, %222
  %225 = sub i8 %222, %220
  %226 = select i1 %223, i8 %224, i8 %225
  %227 = zext i8 %226 to i64
  %228 = add nuw nsw i64 %227, %218
  %229 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %8, i64 0, i32 0, i64 13
  %230 = load i8, i8* %229, align 1
  %231 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %11, i64 0, i32 0, i64 13
  %232 = load i8, i8* %231, align 1
  %233 = icmp uge i8 %230, %232
  %234 = sub i8 %230, %232
  %235 = sub i8 %232, %230
  %236 = select i1 %233, i8 %234, i8 %235
  %237 = zext i8 %236 to i64
  %238 = add nuw nsw i64 %237, %228
  %239 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %8, i64 0, i32 0, i64 14
  %240 = load i8, i8* %239, align 2
  %241 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %11, i64 0, i32 0, i64 14
  %242 = load i8, i8* %241, align 2
  %243 = icmp uge i8 %240, %242
  %244 = sub i8 %240, %242
  %245 = sub i8 %242, %240
  %246 = select i1 %243, i8 %244, i8 %245
  %247 = zext i8 %246 to i64
  %248 = add nuw nsw i64 %247, %238
  %249 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %8, i64 0, i32 0, i64 15
  %250 = load i8, i8* %249, align 1
  %251 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %11, i64 0, i32 0, i64 15
  %252 = load i8, i8* %251, align 1
  %253 = icmp uge i8 %250, %252
  %254 = sub i8 %250, %252
  %255 = sub i8 %252, %250
  %256 = select i1 %253, i8 %254, i8 %255
  %257 = zext i8 %256 to i64
  %258 = add i64 %257, %248
  %259 = and i64 %258, 65535
  %260 = bitcast i8* %2 to i64*
  store i64 %177, i64* %260, align 1
  %261 = getelementptr inbounds i8, i8* %2, i64 8
  %262 = bitcast i8* %261 to i64*
  store i64 %259, i64* %262, align 1
  call void @llvm.lifetime.end(i64 16, i8* nonnull %15) 
  call void @llvm.lifetime.end(i64 16, i8* nonnull %12) 
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L7PMULUDQI4RVnWI7vec64_tE3RVnIS2_ES5_EEP6MemoryS7_R5StateT_T0_T1_(%struct.Memory* readnone returned, %struct.State* nocapture readnone dereferenceable(3376), i64* nocapture, i64, i64)  {
  %6 = and i64 %3, 4294967295
  %7 = and i64 %4, 4294967295
  %8 = mul nuw i64 %7, %6
  store i64 %8, i64* %2, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L7PMULUDQI4RVnWI7vec64_tE3RVnIS2_E3MVnIS2_EEEP6MemoryS9_R5StateT_T0_T1_(%struct.Memory* returned, %struct.State* nocapture readnone dereferenceable(3376), i64* nocapture, i64, i64)  {
  %6 = inttoptr i64 %4 to i32*
  %7 = load i32, i32* %6
  %8 = and i64 %3, 4294967295
  %9 = zext i32 %7 to i64
  %10 = mul nuw i64 %9, %8
  store i64 %10, i64* %2, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L7PMULUDQI3VnWI8vec128_tE2VnIS2_ES5_EEP6MemoryS7_R5StateT_T0_T1_(%struct.Memory* readnone returned, %struct.State* nocapture readnone dereferenceable(3376), i8* nocapture, i8* nocapture readonly, i8* nocapture readonly)  {
  %6 = bitcast i8* %3 to i64*
  %7 = load i64, i64* %6, align 1
  %8 = bitcast i8* %4 to i64*
  %9 = load i64, i64* %8, align 1
  %10 = and i64 %7, 4294967295
  %11 = and i64 %9, 4294967295
  %12 = mul nuw i64 %11, %10
  %13 = bitcast i8* %2 to i64*
  store i64 %12, i64* %13, align 1
  %14 = getelementptr inbounds i8, i8* %2, i64 8
  %15 = bitcast i8* %14 to i64*
  store i64 0, i64* %15, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L7PMULUDQI3VnWI8vec128_tE2VnIS2_E3MVnIS2_EEEP6MemoryS9_R5StateT_T0_T1_(%struct.Memory* returned, %struct.State* nocapture readnone dereferenceable(3376), i8* nocapture, i8* nocapture readonly, i64)  {
  %6 = bitcast i8* %3 to i64*
  %7 = load i64, i64* %6, align 1
  %8 = inttoptr i64 %4 to i32*
  %9 = load i32, i32* %8
  %10 = and i64 %7, 4294967295
  %11 = zext i32 %9 to i64
  %12 = mul nuw i64 %11, %10
  %13 = bitcast i8* %2 to i64*
  store i64 %12, i64* %13, align 1
  %14 = getelementptr inbounds i8, i8* %2, i64 8
  %15 = bitcast i8* %14 to i64*
  store i64 0, i64* %15, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L6PMULLWI4RVnWI7vec64_tE3RVnIS2_ES5_EEP6MemoryS7_R5StateT_T0_T1_(%struct.Memory* readnone returned, %struct.State* nocapture readnone dereferenceable(3376), i64* nocapture, i64, i64)  {
  %6 = alloca i64, align 8
  %7 = bitcast i64* %6 to i8*
  %8 = bitcast i64* %6 to [4 x i16]*
  %9 = trunc i64 %3 to i16
  %10 = trunc i64 %4 to i16
  %11 = mul i16 %10, %9
  call void @llvm.lifetime.start(i64 8, i8* nonnull %7)
  store i64 0, i64* %6, align 8
  %12 = bitcast i64* %6 to i16*
  store i16 %11, i16* %12, align 8
  %13 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %7)
  %14 = lshr i64 %3, 16
  %15 = trunc i64 %14 to i16
  %16 = lshr i64 %4, 16
  %17 = trunc i64 %16 to i16
  %18 = mul i16 %17, %15
  call void @llvm.lifetime.start(i64 8, i8* nonnull %7)
  store i64 %13, i64* %6, align 8
  %19 = getelementptr inbounds [4 x i16], [4 x i16]* %8, i64 0, i64 1
  store i16 %18, i16* %19, align 2
  %20 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %7)
  %21 = lshr i64 %3, 32
  %22 = trunc i64 %21 to i16
  %23 = lshr i64 %4, 32
  %24 = trunc i64 %23 to i16
  %25 = mul i16 %24, %22
  call void @llvm.lifetime.start(i64 8, i8* nonnull %7)
  store i64 %20, i64* %6, align 8
  %26 = getelementptr inbounds [4 x i16], [4 x i16]* %8, i64 0, i64 2
  store i16 %25, i16* %26, align 4
  %27 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %7)
  %28 = lshr i64 %3, 48
  %29 = trunc i64 %28 to i16
  %30 = lshr i64 %4, 48
  %31 = trunc i64 %30 to i16
  %32 = mul i16 %31, %29
  call void @llvm.lifetime.start(i64 8, i8* nonnull %7)
  store i64 %27, i64* %6, align 8
  %33 = getelementptr inbounds [4 x i16], [4 x i16]* %8, i64 0, i64 3
  store i16 %32, i16* %33, align 2
  %34 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %7)
  %35 = lshr i64 %34, 16
  %36 = lshr i64 %34, 32
  %37 = lshr i64 %34, 48
  %38 = trunc i64 %34 to i16
  %39 = trunc i64 %35 to i16
  %40 = trunc i64 %36 to i16
  %41 = trunc i64 %37 to i16
  %42 = bitcast i64* %2 to [4 x i16]*
  %43 = bitcast i64* %2 to i16*
  store i16 %38, i16* %43, align 1
  %44 = getelementptr inbounds [4 x i16], [4 x i16]* %42, i64 0, i64 1
  store i16 %39, i16* %44, align 1
  %45 = getelementptr inbounds [4 x i16], [4 x i16]* %42, i64 0, i64 2
  store i16 %40, i16* %45, align 1
  %46 = getelementptr inbounds [4 x i16], [4 x i16]* %42, i64 0, i64 3
  store i16 %41, i16* %46, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L6PMULLWI4RVnWI7vec64_tE3RVnIS2_E3MVnIS2_EEEP6MemoryS9_R5StateT_T0_T1_(%struct.Memory* returned, %struct.State* nocapture readnone dereferenceable(3376), i64* nocapture, i64, i64)  {
  %6 = alloca i64, align 8
  %7 = inttoptr i64 %4 to i16*
  %8 = load i16, i16* %7
  %9 = add i64 %4, 2
  %10 = inttoptr i64 %9 to i16*
  %11 = load i16, i16* %10
  %12 = add i64 %4, 4
  %13 = inttoptr i64 %12 to i16*
  %14 = load i16, i16* %13
  %15 = add i64 %4, 6
  %16 = inttoptr i64 %15 to i16*
  %17 = load i16, i16* %16
  %18 = bitcast i64* %6 to i8*
  %19 = bitcast i64* %6 to [4 x i16]*
  %20 = trunc i64 %3 to i16
  %21 = mul i16 %8, %20
  call void @llvm.lifetime.start(i64 8, i8* nonnull %18)
  store i64 0, i64* %6, align 8
  %22 = bitcast i64* %6 to i16*
  store i16 %21, i16* %22, align 8
  %23 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %18)
  %24 = lshr i64 %3, 16
  %25 = trunc i64 %24 to i16
  %26 = mul i16 %11, %25
  call void @llvm.lifetime.start(i64 8, i8* nonnull %18)
  store i64 %23, i64* %6, align 8
  %27 = getelementptr inbounds [4 x i16], [4 x i16]* %19, i64 0, i64 1
  store i16 %26, i16* %27, align 2
  %28 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %18)
  %29 = lshr i64 %3, 32
  %30 = trunc i64 %29 to i16
  %31 = mul i16 %14, %30
  call void @llvm.lifetime.start(i64 8, i8* nonnull %18)
  store i64 %28, i64* %6, align 8
  %32 = getelementptr inbounds [4 x i16], [4 x i16]* %19, i64 0, i64 2
  store i16 %31, i16* %32, align 4
  %33 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %18)
  %34 = lshr i64 %3, 48
  %35 = trunc i64 %34 to i16
  %36 = mul i16 %17, %35
  call void @llvm.lifetime.start(i64 8, i8* nonnull %18)
  store i64 %33, i64* %6, align 8
  %37 = getelementptr inbounds [4 x i16], [4 x i16]* %19, i64 0, i64 3
  store i16 %36, i16* %37, align 2
  %38 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %18)
  %39 = lshr i64 %38, 16
  %40 = lshr i64 %38, 32
  %41 = lshr i64 %38, 48
  %42 = trunc i64 %38 to i16
  %43 = trunc i64 %39 to i16
  %44 = trunc i64 %40 to i16
  %45 = trunc i64 %41 to i16
  %46 = bitcast i64* %2 to [4 x i16]*
  %47 = bitcast i64* %2 to i16*
  store i16 %42, i16* %47, align 1
  %48 = getelementptr inbounds [4 x i16], [4 x i16]* %46, i64 0, i64 1
  store i16 %43, i16* %48, align 1
  %49 = getelementptr inbounds [4 x i16], [4 x i16]* %46, i64 0, i64 2
  store i16 %44, i16* %49, align 1
  %50 = getelementptr inbounds [4 x i16], [4 x i16]* %46, i64 0, i64 3
  store i16 %45, i16* %50, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L6PMULLWI3VnWI8vec128_tE2VnIS2_ES5_EEP6MemoryS7_R5StateT_T0_T1_(%struct.Memory* readnone returned, %struct.State* nocapture readnone dereferenceable(3376), i8* nocapture, i8* nocapture readonly, i8* nocapture readonly)  {
  %6 = alloca <2 x i64>, align 16
  %7 = bitcast <2 x i64>* %6 to { i64, i64 }*
  %8 = alloca <2 x i64>, align 16
  %9 = bitcast <2 x i64>* %8 to { i64, i64 }*
  %10 = bitcast <2 x i64>* %8 to %struct.uint16v8_t*
  %11 = alloca <2 x i64>, align 16
  %12 = bitcast <2 x i64>* %11 to { i64, i64 }*
  %13 = bitcast <2 x i64>* %11 to %struct.uint16v8_t*
  %14 = bitcast <2 x i64>* %8 to i8*
  call void @llvm.lifetime.start(i64 16, i8* nonnull %14) 
  %15 = bitcast i8* %3 to <2 x i64>*
  %16 = load <2 x i64>, <2 x i64>* %15, align 1
  store <2 x i64> %16, <2 x i64>* %8, align 16
  %17 = bitcast <2 x i64>* %11 to i8*
  call void @llvm.lifetime.start(i64 16, i8* nonnull %17) 
  %18 = bitcast i8* %4 to <2 x i64>*
  %19 = load <2 x i64>, <2 x i64>* %18, align 1
  store <2 x i64> %19, <2 x i64>* %11, align 16
  %20 = bitcast <2 x i64>* %6 to i8*
  %21 = getelementptr inbounds <2 x i64>, <2 x i64>* %6, i64 0, i64 0
  %22 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %7, i64 0, i32 1
  %23 = bitcast <2 x i64>* %6 to [8 x i16]*
  %24 = extractelement <2 x i64> %16, i32 0
  %25 = trunc i64 %24 to i16
  %26 = extractelement <2 x i64> %19, i32 0
  %27 = trunc i64 %26 to i16
  %28 = mul i16 %27, %25
  call void @llvm.lifetime.start(i64 16, i8* nonnull %20)
  store <2 x i64> zeroinitializer, <2 x i64>* %6, align 16
  %29 = bitcast <2 x i64>* %6 to i16*
  store i16 %28, i16* %29, align 16
  %30 = load i64, i64* %21, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %20)
  %31 = lshr i64 %24, 16
  %32 = trunc i64 %31 to i16
  %33 = lshr i64 %26, 16
  %34 = trunc i64 %33 to i16
  %35 = mul i16 %34, %32
  call void @llvm.lifetime.start(i64 16, i8* nonnull %20)
  store i64 %30, i64* %21, align 16
  store i64 0, i64* %22, align 8
  %36 = getelementptr inbounds [8 x i16], [8 x i16]* %23, i64 0, i64 1
  store i16 %35, i16* %36, align 2
  %37 = load i64, i64* %21, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %20)
  %38 = lshr i64 %24, 32
  %39 = trunc i64 %38 to i16
  %40 = lshr i64 %26, 32
  %41 = trunc i64 %40 to i16
  %42 = mul i16 %41, %39
  call void @llvm.lifetime.start(i64 16, i8* nonnull %20)
  store i64 %37, i64* %21, align 16
  store i64 0, i64* %22, align 8
  %43 = getelementptr inbounds [8 x i16], [8 x i16]* %23, i64 0, i64 2
  store i16 %42, i16* %43, align 4
  %44 = load i64, i64* %21, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %20)
  %45 = lshr i64 %24, 48
  %46 = trunc i64 %45 to i16
  %47 = lshr i64 %26, 48
  %48 = trunc i64 %47 to i16
  %49 = mul i16 %48, %46
  call void @llvm.lifetime.start(i64 16, i8* nonnull %20)
  store i64 %44, i64* %21, align 16
  store i64 0, i64* %22, align 8
  %50 = getelementptr inbounds [8 x i16], [8 x i16]* %23, i64 0, i64 3
  store i16 %49, i16* %50, align 2
  %51 = load i64, i64* %21, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %20)
  %52 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %9, i64 0, i32 1
  %53 = bitcast i64* %52 to i16*
  %54 = load i16, i16* %53, align 8
  %55 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %12, i64 0, i32 1
  %56 = bitcast i64* %55 to i16*
  %57 = load i16, i16* %56, align 8
  %58 = mul i16 %57, %54
  call void @llvm.lifetime.start(i64 16, i8* nonnull %20)
  store i64 %51, i64* %21, align 16
  store i64 0, i64* %22, align 8
  %59 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %7, i64 0, i32 1
  %60 = bitcast i64* %59 to i16*
  store i16 %58, i16* %60, align 8
  %61 = load i64, i64* %22, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %20)
  %62 = getelementptr inbounds %struct.uint16v8_t, %struct.uint16v8_t* %10, i64 0, i32 0, i64 5
  %63 = load i16, i16* %62, align 2
  %64 = getelementptr inbounds %struct.uint16v8_t, %struct.uint16v8_t* %13, i64 0, i32 0, i64 5
  %65 = load i16, i16* %64, align 2
  %66 = mul i16 %65, %63
  call void @llvm.lifetime.start(i64 16, i8* nonnull %20)
  store i64 %51, i64* %21, align 16
  store i64 %61, i64* %22, align 8
  %67 = getelementptr inbounds [8 x i16], [8 x i16]* %23, i64 0, i64 5
  store i16 %66, i16* %67, align 2
  %68 = load i64, i64* %22, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %20)
  %69 = getelementptr inbounds %struct.uint16v8_t, %struct.uint16v8_t* %10, i64 0, i32 0, i64 6
  %70 = load i16, i16* %69, align 4
  %71 = getelementptr inbounds %struct.uint16v8_t, %struct.uint16v8_t* %13, i64 0, i32 0, i64 6
  %72 = load i16, i16* %71, align 4
  %73 = mul i16 %72, %70
  call void @llvm.lifetime.start(i64 16, i8* nonnull %20)
  store i64 %51, i64* %21, align 16
  store i64 %68, i64* %22, align 8
  %74 = getelementptr inbounds [8 x i16], [8 x i16]* %23, i64 0, i64 6
  store i16 %73, i16* %74, align 4
  %75 = load i64, i64* %22, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %20)
  %76 = getelementptr inbounds %struct.uint16v8_t, %struct.uint16v8_t* %10, i64 0, i32 0, i64 7
  %77 = load i16, i16* %76, align 2
  %78 = getelementptr inbounds %struct.uint16v8_t, %struct.uint16v8_t* %13, i64 0, i32 0, i64 7
  %79 = load i16, i16* %78, align 2
  %80 = mul i16 %79, %77
  call void @llvm.lifetime.start(i64 16, i8* nonnull %20)
  store i64 %51, i64* %21, align 16
  store i64 %75, i64* %22, align 8
  %81 = getelementptr inbounds [8 x i16], [8 x i16]* %23, i64 0, i64 7
  store i16 %80, i16* %81, align 2
  %82 = load i64, i64* %22, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %20)
  %83 = lshr i64 %51, 16
  %84 = lshr i64 %51, 32
  %85 = lshr i64 %51, 48
  %86 = trunc i64 %51 to i16
  %87 = trunc i64 %83 to i16
  %88 = trunc i64 %84 to i16
  %89 = trunc i64 %85 to i16
  %90 = bitcast i8* %2 to i16*
  store i16 %86, i16* %90, align 1
  %91 = getelementptr inbounds i8, i8* %2, i64 2
  %92 = bitcast i8* %91 to i16*
  store i16 %87, i16* %92, align 1
  %93 = getelementptr inbounds i8, i8* %2, i64 4
  %94 = bitcast i8* %93 to i16*
  store i16 %88, i16* %94, align 1
  %95 = getelementptr inbounds i8, i8* %2, i64 6
  %96 = bitcast i8* %95 to i16*
  store i16 %89, i16* %96, align 1
  %97 = trunc i64 %82 to i16
  %98 = getelementptr inbounds i8, i8* %2, i64 8
  %99 = bitcast i8* %98 to i16*
  store i16 %97, i16* %99, align 1
  %100 = lshr i64 %82, 16
  %101 = trunc i64 %100 to i16
  %102 = getelementptr inbounds i8, i8* %2, i64 10
  %103 = bitcast i8* %102 to i16*
  store i16 %101, i16* %103, align 1
  %104 = lshr i64 %82, 32
  %105 = trunc i64 %104 to i16
  %106 = getelementptr inbounds i8, i8* %2, i64 12
  %107 = bitcast i8* %106 to i16*
  store i16 %105, i16* %107, align 1
  %108 = lshr i64 %82, 48
  %109 = trunc i64 %108 to i16
  %110 = getelementptr inbounds i8, i8* %2, i64 14
  %111 = bitcast i8* %110 to i16*
  store i16 %109, i16* %111, align 1
  call void @llvm.lifetime.end(i64 16, i8* nonnull %17) 
  call void @llvm.lifetime.end(i64 16, i8* nonnull %14) 
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L6PMULLWI3VnWI8vec128_tE2VnIS2_E3MVnIS2_EEEP6MemoryS9_R5StateT_T0_T1_(%struct.Memory* returned, %struct.State* nocapture readnone dereferenceable(3376), i8* nocapture, i8* nocapture readonly, i64)  {
  %6 = alloca <2 x i64>, align 16
  %7 = bitcast <2 x i64>* %6 to { i64, i64 }*
  %8 = alloca <2 x i64>, align 16
  %9 = bitcast <2 x i64>* %8 to { i64, i64 }*
  %10 = bitcast <2 x i64>* %8 to %struct.uint16v8_t*
  %11 = alloca <2 x i64>, align 16
  %12 = bitcast <2 x i64>* %11 to { i64, i64 }*
  %13 = bitcast <2 x i64>* %11 to %struct.uint16v8_t*
  %14 = bitcast <2 x i64>* %8 to i8*
  call void @llvm.lifetime.start(i64 16, i8* nonnull %14) 
  %15 = bitcast i8* %3 to <2 x i64>*
  %16 = load <2 x i64>, <2 x i64>* %15, align 1
  store <2 x i64> %16, <2 x i64>* %8, align 16
  %17 = bitcast <2 x i64>* %11 to i8*
  call void @llvm.lifetime.start(i64 16, i8* nonnull %17) 
  %18 = inttoptr i64 %4 to i16*
  %19 = load i16, i16* %18
  %20 = add i64 %4, 2
  %21 = inttoptr i64 %20 to i16*
  %22 = load i16, i16* %21
  %23 = add i64 %4, 4
  %24 = inttoptr i64 %23 to i16*
  %25 = load i16, i16* %24
  %26 = add i64 %4, 6
  %27 = inttoptr i64 %26 to i16*
  %28 = load i16, i16* %27
  %29 = add i64 %4, 8
  %30 = inttoptr i64 %29 to i16*
  %31 = load i16, i16* %30
  %32 = add i64 %4, 10
  %33 = inttoptr i64 %32 to i16*
  %34 = load i16, i16* %33
  %35 = add i64 %4, 12
  %36 = inttoptr i64 %35 to i16*
  %37 = load i16, i16* %36
  %38 = add i64 %4, 14
  %39 = inttoptr i64 %38 to i16*
  %40 = load i16, i16* %39
  %41 = insertelement <2 x i16> undef, i16 %28, i32 0
  %42 = insertelement <2 x i16> %41, i16 %40, i32 1
  %43 = zext <2 x i16> %42 to <2 x i64>
  %44 = shl nuw <2 x i64> %43, <i64 48, i64 48>
  %45 = insertelement <2 x i16> undef, i16 %25, i32 0
  %46 = insertelement <2 x i16> %45, i16 %37, i32 1
  %47 = zext <2 x i16> %46 to <2 x i64>
  %48 = shl nuw nsw <2 x i64> %47, <i64 32, i64 32>
  %49 = insertelement <2 x i16> undef, i16 %22, i32 0
  %50 = insertelement <2 x i16> %49, i16 %34, i32 1
  %51 = zext <2 x i16> %50 to <2 x i64>
  %52 = shl nuw nsw <2 x i64> %51, <i64 16, i64 16>
  %53 = insertelement <2 x i16> undef, i16 %19, i32 0
  %54 = insertelement <2 x i16> %53, i16 %31, i32 1
  %55 = zext <2 x i16> %54 to <2 x i64>
  %56 = or <2 x i64> %52, %55
  %57 = or <2 x i64> %56, %48
  %58 = or <2 x i64> %57, %44
  store <2 x i64> %58, <2 x i64>* %11, align 16
  %59 = bitcast <2 x i64>* %6 to i8*
  %60 = getelementptr inbounds <2 x i64>, <2 x i64>* %6, i64 0, i64 0
  %61 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %7, i64 0, i32 1
  %62 = bitcast <2 x i64>* %6 to [8 x i16]*
  %63 = extractelement <2 x i64> %16, i32 0
  %64 = trunc i64 %63 to i16
  %65 = mul i16 %19, %64
  call void @llvm.lifetime.start(i64 16, i8* nonnull %59)
  store <2 x i64> zeroinitializer, <2 x i64>* %6, align 16
  %66 = bitcast <2 x i64>* %6 to i16*
  store i16 %65, i16* %66, align 16
  %67 = load i64, i64* %60, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %59)
  %68 = lshr i64 %63, 16
  %69 = trunc i64 %68 to i16
  %70 = mul i16 %22, %69
  call void @llvm.lifetime.start(i64 16, i8* nonnull %59)
  store i64 %67, i64* %60, align 16
  store i64 0, i64* %61, align 8
  %71 = getelementptr inbounds [8 x i16], [8 x i16]* %62, i64 0, i64 1
  store i16 %70, i16* %71, align 2
  %72 = load i64, i64* %60, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %59)
  %73 = lshr i64 %63, 32
  %74 = trunc i64 %73 to i16
  %75 = mul i16 %25, %74
  call void @llvm.lifetime.start(i64 16, i8* nonnull %59)
  store i64 %72, i64* %60, align 16
  store i64 0, i64* %61, align 8
  %76 = getelementptr inbounds [8 x i16], [8 x i16]* %62, i64 0, i64 2
  store i16 %75, i16* %76, align 4
  %77 = load i64, i64* %60, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %59)
  %78 = getelementptr inbounds %struct.uint16v8_t, %struct.uint16v8_t* %10, i64 0, i32 0, i64 3
  %79 = load i16, i16* %78, align 2
  %80 = mul i16 %28, %79
  call void @llvm.lifetime.start(i64 16, i8* nonnull %59)
  store i64 %77, i64* %60, align 16
  store i64 0, i64* %61, align 8
  %81 = getelementptr inbounds [8 x i16], [8 x i16]* %62, i64 0, i64 3
  store i16 %80, i16* %81, align 2
  %82 = load i64, i64* %60, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %59)
  %83 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %9, i64 0, i32 1
  %84 = bitcast i64* %83 to i16*
  %85 = load i16, i16* %84, align 8
  %86 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %12, i64 0, i32 1
  %87 = bitcast i64* %86 to i16*
  %88 = load i16, i16* %87, align 8
  %89 = mul i16 %88, %85
  call void @llvm.lifetime.start(i64 16, i8* nonnull %59)
  store i64 %82, i64* %60, align 16
  store i64 0, i64* %61, align 8
  %90 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %7, i64 0, i32 1
  %91 = bitcast i64* %90 to i16*
  store i16 %89, i16* %91, align 8
  %92 = load i64, i64* %61, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %59)
  %93 = getelementptr inbounds %struct.uint16v8_t, %struct.uint16v8_t* %10, i64 0, i32 0, i64 5
  %94 = load i16, i16* %93, align 2
  %95 = getelementptr inbounds %struct.uint16v8_t, %struct.uint16v8_t* %13, i64 0, i32 0, i64 5
  %96 = load i16, i16* %95, align 2
  %97 = mul i16 %96, %94
  call void @llvm.lifetime.start(i64 16, i8* nonnull %59)
  store i64 %82, i64* %60, align 16
  store i64 %92, i64* %61, align 8
  %98 = getelementptr inbounds [8 x i16], [8 x i16]* %62, i64 0, i64 5
  store i16 %97, i16* %98, align 2
  %99 = load i64, i64* %61, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %59)
  %100 = getelementptr inbounds %struct.uint16v8_t, %struct.uint16v8_t* %10, i64 0, i32 0, i64 6
  %101 = load i16, i16* %100, align 4
  %102 = getelementptr inbounds %struct.uint16v8_t, %struct.uint16v8_t* %13, i64 0, i32 0, i64 6
  %103 = load i16, i16* %102, align 4
  %104 = mul i16 %103, %101
  call void @llvm.lifetime.start(i64 16, i8* nonnull %59)
  store i64 %82, i64* %60, align 16
  store i64 %99, i64* %61, align 8
  %105 = getelementptr inbounds [8 x i16], [8 x i16]* %62, i64 0, i64 6
  store i16 %104, i16* %105, align 4
  %106 = load i64, i64* %61, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %59)
  %107 = getelementptr inbounds %struct.uint16v8_t, %struct.uint16v8_t* %10, i64 0, i32 0, i64 7
  %108 = load i16, i16* %107, align 2
  %109 = getelementptr inbounds %struct.uint16v8_t, %struct.uint16v8_t* %13, i64 0, i32 0, i64 7
  %110 = load i16, i16* %109, align 2
  %111 = mul i16 %110, %108
  call void @llvm.lifetime.start(i64 16, i8* nonnull %59)
  store i64 %82, i64* %60, align 16
  store i64 %106, i64* %61, align 8
  %112 = getelementptr inbounds [8 x i16], [8 x i16]* %62, i64 0, i64 7
  store i16 %111, i16* %112, align 2
  %113 = load i64, i64* %61, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %59)
  %114 = lshr i64 %82, 16
  %115 = lshr i64 %82, 32
  %116 = lshr i64 %82, 48
  %117 = trunc i64 %82 to i16
  %118 = trunc i64 %114 to i16
  %119 = trunc i64 %115 to i16
  %120 = trunc i64 %116 to i16
  %121 = bitcast i8* %2 to i16*
  store i16 %117, i16* %121, align 1
  %122 = getelementptr inbounds i8, i8* %2, i64 2
  %123 = bitcast i8* %122 to i16*
  store i16 %118, i16* %123, align 1
  %124 = getelementptr inbounds i8, i8* %2, i64 4
  %125 = bitcast i8* %124 to i16*
  store i16 %119, i16* %125, align 1
  %126 = getelementptr inbounds i8, i8* %2, i64 6
  %127 = bitcast i8* %126 to i16*
  store i16 %120, i16* %127, align 1
  %128 = trunc i64 %113 to i16
  %129 = getelementptr inbounds i8, i8* %2, i64 8
  %130 = bitcast i8* %129 to i16*
  store i16 %128, i16* %130, align 1
  %131 = lshr i64 %113, 16
  %132 = trunc i64 %131 to i16
  %133 = getelementptr inbounds i8, i8* %2, i64 10
  %134 = bitcast i8* %133 to i16*
  store i16 %132, i16* %134, align 1
  %135 = lshr i64 %113, 32
  %136 = trunc i64 %135 to i16
  %137 = getelementptr inbounds i8, i8* %2, i64 12
  %138 = bitcast i8* %137 to i16*
  store i16 %136, i16* %138, align 1
  %139 = lshr i64 %113, 48
  %140 = trunc i64 %139 to i16
  %141 = getelementptr inbounds i8, i8* %2, i64 14
  %142 = bitcast i8* %141 to i16*
  store i16 %140, i16* %142, align 1
  call void @llvm.lifetime.end(i64 16, i8* nonnull %17) 
  call void @llvm.lifetime.end(i64 16, i8* nonnull %14) 
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L6PMULHWI4RVnWI7vec64_tE3RVnIS2_ES5_EEP6MemoryS7_R5StateT_T0_T1_(%struct.Memory* readnone returned, %struct.State* nocapture readnone dereferenceable(3376), i64* nocapture, i64, i64)  {
  %6 = alloca i64, align 8
  %7 = bitcast i64* %6 to i8*
  %8 = bitcast i64* %6 to [4 x i16]*
  %9 = shl i64 %3, 48
  %10 = ashr exact i64 %9, 48
  %11 = shl i64 %4, 48
  %12 = ashr exact i64 %11, 48
  %13 = mul nsw i64 %12, %10
  %14 = lshr i64 %13, 16
  %15 = trunc i64 %14 to i16
  call void @llvm.lifetime.start(i64 8, i8* nonnull %7)
  store i64 0, i64* %6, align 8
  %16 = bitcast i64* %6 to i16*
  store i16 %15, i16* %16, align 8
  %17 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %7)
  %18 = shl i64 %3, 32
  %19 = ashr i64 %18, 48
  %20 = shl i64 %4, 32
  %21 = ashr i64 %20, 48
  %22 = mul nsw i64 %21, %19
  %23 = lshr i64 %22, 16
  %24 = trunc i64 %23 to i16
  call void @llvm.lifetime.start(i64 8, i8* nonnull %7)
  store i64 %17, i64* %6, align 8
  %25 = getelementptr inbounds [4 x i16], [4 x i16]* %8, i64 0, i64 1
  store i16 %24, i16* %25, align 2
  %26 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %7)
  %27 = shl i64 %3, 16
  %28 = ashr i64 %27, 48
  %29 = shl i64 %4, 16
  %30 = ashr i64 %29, 48
  %31 = mul nsw i64 %30, %28
  %32 = lshr i64 %31, 16
  %33 = trunc i64 %32 to i16
  call void @llvm.lifetime.start(i64 8, i8* nonnull %7)
  store i64 %26, i64* %6, align 8
  %34 = getelementptr inbounds [4 x i16], [4 x i16]* %8, i64 0, i64 2
  store i16 %33, i16* %34, align 4
  %35 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %7)
  %36 = ashr i64 %3, 48
  %37 = ashr i64 %4, 48
  %38 = mul nsw i64 %37, %36
  %39 = lshr i64 %38, 16
  %40 = trunc i64 %39 to i16
  call void @llvm.lifetime.start(i64 8, i8* nonnull %7)
  store i64 %35, i64* %6, align 8
  %41 = getelementptr inbounds [4 x i16], [4 x i16]* %8, i64 0, i64 3
  store i16 %40, i16* %41, align 2
  %42 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %7)
  %43 = lshr i64 %42, 16
  %44 = lshr i64 %42, 32
  %45 = lshr i64 %42, 48
  %46 = trunc i64 %42 to i16
  %47 = trunc i64 %43 to i16
  %48 = trunc i64 %44 to i16
  %49 = trunc i64 %45 to i16
  %50 = bitcast i64* %2 to [4 x i16]*
  %51 = bitcast i64* %2 to i16*
  store i16 %46, i16* %51, align 1
  %52 = getelementptr inbounds [4 x i16], [4 x i16]* %50, i64 0, i64 1
  store i16 %47, i16* %52, align 1
  %53 = getelementptr inbounds [4 x i16], [4 x i16]* %50, i64 0, i64 2
  store i16 %48, i16* %53, align 1
  %54 = getelementptr inbounds [4 x i16], [4 x i16]* %50, i64 0, i64 3
  store i16 %49, i16* %54, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L6PMULHWI4RVnWI7vec64_tE3RVnIS2_E3MVnIS2_EEEP6MemoryS9_R5StateT_T0_T1_(%struct.Memory* returned, %struct.State* nocapture readnone dereferenceable(3376), i64* nocapture, i64, i64)  {
  %6 = alloca i64, align 8
  %7 = alloca i64, align 8
  %8 = bitcast i64* %7 to %struct.int16v4_t*
  %9 = bitcast i64* %7 to i8*
  call void @llvm.lifetime.start(i64 8, i8* nonnull %9) 
  store i64 %3, i64* %7, align 8
  %10 = inttoptr i64 %4 to i16*
  %11 = load i16, i16* %10
  %12 = add i64 %4, 2
  %13 = inttoptr i64 %12 to i16*
  %14 = load i16, i16* %13
  %15 = add i64 %4, 4
  %16 = inttoptr i64 %15 to i16*
  %17 = load i16, i16* %16
  %18 = add i64 %4, 6
  %19 = inttoptr i64 %18 to i16*
  %20 = load i16, i16* %19
  %21 = bitcast i64* %6 to i8*
  %22 = bitcast i64* %6 to [4 x i16]*
  %23 = shl i64 %3, 48
  %24 = ashr exact i64 %23, 48
  %25 = sext i16 %11 to i64
  %26 = mul nsw i64 %25, %24
  %27 = lshr i64 %26, 16
  %28 = trunc i64 %27 to i16
  call void @llvm.lifetime.start(i64 8, i8* nonnull %21)
  store i64 0, i64* %6, align 8
  %29 = bitcast i64* %6 to i16*
  store i16 %28, i16* %29, align 8
  %30 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %21)
  %31 = shl i64 %3, 32
  %32 = ashr i64 %31, 48
  %33 = sext i16 %14 to i64
  %34 = mul nsw i64 %33, %32
  %35 = lshr i64 %34, 16
  %36 = trunc i64 %35 to i16
  call void @llvm.lifetime.start(i64 8, i8* nonnull %21)
  store i64 %30, i64* %6, align 8
  %37 = getelementptr inbounds [4 x i16], [4 x i16]* %22, i64 0, i64 1
  store i16 %36, i16* %37, align 2
  %38 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %21)
  %39 = shl i64 %3, 16
  %40 = ashr i64 %39, 48
  %41 = sext i16 %17 to i64
  %42 = mul nsw i64 %41, %40
  %43 = lshr i64 %42, 16
  %44 = trunc i64 %43 to i16
  call void @llvm.lifetime.start(i64 8, i8* nonnull %21)
  store i64 %38, i64* %6, align 8
  %45 = getelementptr inbounds [4 x i16], [4 x i16]* %22, i64 0, i64 2
  store i16 %44, i16* %45, align 4
  %46 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %21)
  %47 = getelementptr inbounds %struct.int16v4_t, %struct.int16v4_t* %8, i64 0, i32 0, i64 3
  %48 = load i16, i16* %47, align 2
  %49 = sext i16 %48 to i64
  %50 = sext i16 %20 to i64
  %51 = mul nsw i64 %50, %49
  %52 = lshr i64 %51, 16
  %53 = trunc i64 %52 to i16
  call void @llvm.lifetime.start(i64 8, i8* nonnull %21)
  store i64 %46, i64* %6, align 8
  %54 = getelementptr inbounds [4 x i16], [4 x i16]* %22, i64 0, i64 3
  store i16 %53, i16* %54, align 2
  %55 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %21)
  %56 = lshr i64 %55, 16
  %57 = lshr i64 %55, 32
  %58 = lshr i64 %55, 48
  %59 = trunc i64 %55 to i16
  %60 = trunc i64 %56 to i16
  %61 = trunc i64 %57 to i16
  %62 = trunc i64 %58 to i16
  %63 = bitcast i64* %2 to [4 x i16]*
  %64 = bitcast i64* %2 to i16*
  store i16 %59, i16* %64, align 1
  %65 = getelementptr inbounds [4 x i16], [4 x i16]* %63, i64 0, i64 1
  store i16 %60, i16* %65, align 1
  %66 = getelementptr inbounds [4 x i16], [4 x i16]* %63, i64 0, i64 2
  store i16 %61, i16* %66, align 1
  %67 = getelementptr inbounds [4 x i16], [4 x i16]* %63, i64 0, i64 3
  store i16 %62, i16* %67, align 1
  call void @llvm.lifetime.end(i64 8, i8* nonnull %9) 
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L6PMULHWI3VnWI8vec128_tE2VnIS2_ES5_EEP6MemoryS7_R5StateT_T0_T1_(%struct.Memory* readnone returned, %struct.State* nocapture readnone dereferenceable(3376), i8* nocapture, i8* nocapture readonly, i8* nocapture readonly)  {
  %6 = alloca <2 x i64>, align 16
  %7 = bitcast <2 x i64>* %6 to { i64, i64 }*
  %8 = alloca <2 x i64>, align 16
  %9 = bitcast <2 x i64>* %8 to { i64, i64 }*
  %10 = bitcast <2 x i64>* %8 to %struct.uint16v8_t*
  %11 = alloca <2 x i64>, align 16
  %12 = bitcast <2 x i64>* %11 to { i64, i64 }*
  %13 = bitcast <2 x i64>* %11 to %struct.uint16v8_t*
  %14 = bitcast <2 x i64>* %8 to i8*
  call void @llvm.lifetime.start(i64 16, i8* nonnull %14) 
  %15 = bitcast i8* %3 to <2 x i64>*
  %16 = load <2 x i64>, <2 x i64>* %15, align 1
  store <2 x i64> %16, <2 x i64>* %8, align 16
  %17 = bitcast <2 x i64>* %11 to i8*
  call void @llvm.lifetime.start(i64 16, i8* nonnull %17) 
  %18 = bitcast i8* %4 to <2 x i64>*
  %19 = load <2 x i64>, <2 x i64>* %18, align 1
  store <2 x i64> %19, <2 x i64>* %11, align 16
  %20 = bitcast <2 x i64>* %6 to i8*
  %21 = getelementptr inbounds <2 x i64>, <2 x i64>* %6, i64 0, i64 0
  %22 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %7, i64 0, i32 1
  %23 = bitcast <2 x i64>* %6 to [8 x i16]*
  %24 = extractelement <2 x i64> %16, i32 0
  %25 = shl i64 %24, 48
  %26 = ashr exact i64 %25, 48
  %27 = extractelement <2 x i64> %19, i32 0
  %28 = shl i64 %27, 48
  %29 = ashr exact i64 %28, 48
  %30 = mul nsw i64 %29, %26
  %31 = lshr i64 %30, 16
  %32 = trunc i64 %31 to i16
  call void @llvm.lifetime.start(i64 16, i8* nonnull %20)
  store <2 x i64> zeroinitializer, <2 x i64>* %6, align 16
  %33 = bitcast <2 x i64>* %6 to i16*
  store i16 %32, i16* %33, align 16
  %34 = load i64, i64* %21, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %20)
  %35 = shl i64 %24, 32
  %36 = ashr i64 %35, 48
  %37 = shl i64 %27, 32
  %38 = ashr i64 %37, 48
  %39 = mul nsw i64 %38, %36
  %40 = lshr i64 %39, 16
  %41 = trunc i64 %40 to i16
  call void @llvm.lifetime.start(i64 16, i8* nonnull %20)
  store i64 %34, i64* %21, align 16
  store i64 0, i64* %22, align 8
  %42 = getelementptr inbounds [8 x i16], [8 x i16]* %23, i64 0, i64 1
  store i16 %41, i16* %42, align 2
  %43 = load i64, i64* %21, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %20)
  %44 = shl i64 %24, 16
  %45 = ashr i64 %44, 48
  %46 = shl i64 %27, 16
  %47 = ashr i64 %46, 48
  %48 = mul nsw i64 %47, %45
  %49 = lshr i64 %48, 16
  %50 = trunc i64 %49 to i16
  call void @llvm.lifetime.start(i64 16, i8* nonnull %20)
  store i64 %43, i64* %21, align 16
  store i64 0, i64* %22, align 8
  %51 = getelementptr inbounds [8 x i16], [8 x i16]* %23, i64 0, i64 2
  store i16 %50, i16* %51, align 4
  %52 = load i64, i64* %21, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %20)
  %53 = ashr i64 %24, 48
  %54 = ashr i64 %27, 48
  %55 = mul nsw i64 %54, %53
  %56 = lshr i64 %55, 16
  %57 = trunc i64 %56 to i16
  call void @llvm.lifetime.start(i64 16, i8* nonnull %20)
  store i64 %52, i64* %21, align 16
  store i64 0, i64* %22, align 8
  %58 = getelementptr inbounds [8 x i16], [8 x i16]* %23, i64 0, i64 3
  store i16 %57, i16* %58, align 2
  %59 = load i64, i64* %21, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %20)
  %60 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %9, i64 0, i32 1
  %61 = bitcast i64* %60 to i16*
  %62 = load i16, i16* %61, align 8
  %63 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %12, i64 0, i32 1
  %64 = bitcast i64* %63 to i16*
  %65 = load i16, i16* %64, align 8
  %66 = sext i16 %62 to i64
  %67 = sext i16 %65 to i64
  %68 = mul nsw i64 %67, %66
  %69 = lshr i64 %68, 16
  %70 = trunc i64 %69 to i16
  call void @llvm.lifetime.start(i64 16, i8* nonnull %20)
  store i64 %59, i64* %21, align 16
  store i64 0, i64* %22, align 8
  %71 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %7, i64 0, i32 1
  %72 = bitcast i64* %71 to i16*
  store i16 %70, i16* %72, align 8
  %73 = load i64, i64* %22, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %20)
  %74 = getelementptr inbounds %struct.uint16v8_t, %struct.uint16v8_t* %10, i64 0, i32 0, i64 5
  %75 = load i16, i16* %74, align 2
  %76 = getelementptr inbounds %struct.uint16v8_t, %struct.uint16v8_t* %13, i64 0, i32 0, i64 5
  %77 = load i16, i16* %76, align 2
  %78 = sext i16 %75 to i64
  %79 = sext i16 %77 to i64
  %80 = mul nsw i64 %79, %78
  %81 = lshr i64 %80, 16
  %82 = trunc i64 %81 to i16
  call void @llvm.lifetime.start(i64 16, i8* nonnull %20)
  store i64 %59, i64* %21, align 16
  store i64 %73, i64* %22, align 8
  %83 = getelementptr inbounds [8 x i16], [8 x i16]* %23, i64 0, i64 5
  store i16 %82, i16* %83, align 2
  %84 = load i64, i64* %22, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %20)
  %85 = getelementptr inbounds %struct.uint16v8_t, %struct.uint16v8_t* %10, i64 0, i32 0, i64 6
  %86 = load i16, i16* %85, align 4
  %87 = getelementptr inbounds %struct.uint16v8_t, %struct.uint16v8_t* %13, i64 0, i32 0, i64 6
  %88 = load i16, i16* %87, align 4
  %89 = sext i16 %86 to i64
  %90 = sext i16 %88 to i64
  %91 = mul nsw i64 %90, %89
  %92 = lshr i64 %91, 16
  %93 = trunc i64 %92 to i16
  call void @llvm.lifetime.start(i64 16, i8* nonnull %20)
  store i64 %59, i64* %21, align 16
  store i64 %84, i64* %22, align 8
  %94 = getelementptr inbounds [8 x i16], [8 x i16]* %23, i64 0, i64 6
  store i16 %93, i16* %94, align 4
  %95 = load i64, i64* %22, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %20)
  %96 = getelementptr inbounds %struct.uint16v8_t, %struct.uint16v8_t* %10, i64 0, i32 0, i64 7
  %97 = load i16, i16* %96, align 2
  %98 = getelementptr inbounds %struct.uint16v8_t, %struct.uint16v8_t* %13, i64 0, i32 0, i64 7
  %99 = load i16, i16* %98, align 2
  %100 = sext i16 %97 to i64
  %101 = sext i16 %99 to i64
  %102 = mul nsw i64 %101, %100
  %103 = lshr i64 %102, 16
  %104 = trunc i64 %103 to i16
  call void @llvm.lifetime.start(i64 16, i8* nonnull %20)
  store i64 %59, i64* %21, align 16
  store i64 %95, i64* %22, align 8
  %105 = getelementptr inbounds [8 x i16], [8 x i16]* %23, i64 0, i64 7
  store i16 %104, i16* %105, align 2
  %106 = load i64, i64* %22, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %20)
  %107 = lshr i64 %59, 16
  %108 = lshr i64 %59, 32
  %109 = lshr i64 %59, 48
  %110 = trunc i64 %59 to i16
  %111 = trunc i64 %107 to i16
  %112 = trunc i64 %108 to i16
  %113 = trunc i64 %109 to i16
  %114 = bitcast i8* %2 to i16*
  store i16 %110, i16* %114, align 1
  %115 = getelementptr inbounds i8, i8* %2, i64 2
  %116 = bitcast i8* %115 to i16*
  store i16 %111, i16* %116, align 1
  %117 = getelementptr inbounds i8, i8* %2, i64 4
  %118 = bitcast i8* %117 to i16*
  store i16 %112, i16* %118, align 1
  %119 = getelementptr inbounds i8, i8* %2, i64 6
  %120 = bitcast i8* %119 to i16*
  store i16 %113, i16* %120, align 1
  %121 = trunc i64 %106 to i16
  %122 = getelementptr inbounds i8, i8* %2, i64 8
  %123 = bitcast i8* %122 to i16*
  store i16 %121, i16* %123, align 1
  %124 = lshr i64 %106, 16
  %125 = trunc i64 %124 to i16
  %126 = getelementptr inbounds i8, i8* %2, i64 10
  %127 = bitcast i8* %126 to i16*
  store i16 %125, i16* %127, align 1
  %128 = lshr i64 %106, 32
  %129 = trunc i64 %128 to i16
  %130 = getelementptr inbounds i8, i8* %2, i64 12
  %131 = bitcast i8* %130 to i16*
  store i16 %129, i16* %131, align 1
  %132 = lshr i64 %106, 48
  %133 = trunc i64 %132 to i16
  %134 = getelementptr inbounds i8, i8* %2, i64 14
  %135 = bitcast i8* %134 to i16*
  store i16 %133, i16* %135, align 1
  call void @llvm.lifetime.end(i64 16, i8* nonnull %17) 
  call void @llvm.lifetime.end(i64 16, i8* nonnull %14) 
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L6PMULHWI3VnWI8vec128_tE2VnIS2_E3MVnIS2_EEEP6MemoryS9_R5StateT_T0_T1_(%struct.Memory* returned, %struct.State* nocapture readnone dereferenceable(3376), i8* nocapture, i8* nocapture readonly, i64)  {
  %6 = alloca <2 x i64>, align 16
  %7 = bitcast <2 x i64>* %6 to { i64, i64 }*
  %8 = alloca <2 x i64>, align 16
  %9 = bitcast <2 x i64>* %8 to { i64, i64 }*
  %10 = bitcast <2 x i64>* %8 to %struct.uint16v8_t*
  %11 = alloca <2 x i64>, align 16
  %12 = bitcast <2 x i64>* %11 to { i64, i64 }*
  %13 = bitcast <2 x i64>* %11 to %struct.uint16v8_t*
  %14 = bitcast <2 x i64>* %8 to i8*
  call void @llvm.lifetime.start(i64 16, i8* nonnull %14) 
  %15 = bitcast i8* %3 to <2 x i64>*
  %16 = load <2 x i64>, <2 x i64>* %15, align 1
  store <2 x i64> %16, <2 x i64>* %8, align 16
  %17 = bitcast <2 x i64>* %11 to i8*
  call void @llvm.lifetime.start(i64 16, i8* nonnull %17) 
  %18 = inttoptr i64 %4 to i16*
  %19 = load i16, i16* %18
  %20 = add i64 %4, 2
  %21 = inttoptr i64 %20 to i16*
  %22 = load i16, i16* %21
  %23 = add i64 %4, 4
  %24 = inttoptr i64 %23 to i16*
  %25 = load i16, i16* %24
  %26 = add i64 %4, 6
  %27 = inttoptr i64 %26 to i16*
  %28 = load i16, i16* %27
  %29 = add i64 %4, 8
  %30 = inttoptr i64 %29 to i16*
  %31 = load i16, i16* %30
  %32 = add i64 %4, 10
  %33 = inttoptr i64 %32 to i16*
  %34 = load i16, i16* %33
  %35 = add i64 %4, 12
  %36 = inttoptr i64 %35 to i16*
  %37 = load i16, i16* %36
  %38 = add i64 %4, 14
  %39 = inttoptr i64 %38 to i16*
  %40 = load i16, i16* %39
  %41 = insertelement <2 x i16> undef, i16 %28, i32 0
  %42 = insertelement <2 x i16> %41, i16 %40, i32 1
  %43 = zext <2 x i16> %42 to <2 x i64>
  %44 = shl nuw <2 x i64> %43, <i64 48, i64 48>
  %45 = insertelement <2 x i16> undef, i16 %25, i32 0
  %46 = insertelement <2 x i16> %45, i16 %37, i32 1
  %47 = zext <2 x i16> %46 to <2 x i64>
  %48 = shl nuw nsw <2 x i64> %47, <i64 32, i64 32>
  %49 = insertelement <2 x i16> undef, i16 %22, i32 0
  %50 = insertelement <2 x i16> %49, i16 %34, i32 1
  %51 = zext <2 x i16> %50 to <2 x i64>
  %52 = shl nuw nsw <2 x i64> %51, <i64 16, i64 16>
  %53 = insertelement <2 x i16> undef, i16 %19, i32 0
  %54 = insertelement <2 x i16> %53, i16 %31, i32 1
  %55 = zext <2 x i16> %54 to <2 x i64>
  %56 = or <2 x i64> %52, %55
  %57 = or <2 x i64> %56, %48
  %58 = or <2 x i64> %57, %44
  store <2 x i64> %58, <2 x i64>* %11, align 16
  %59 = bitcast <2 x i64>* %6 to i8*
  %60 = getelementptr inbounds <2 x i64>, <2 x i64>* %6, i64 0, i64 0
  %61 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %7, i64 0, i32 1
  %62 = bitcast <2 x i64>* %6 to [8 x i16]*
  %63 = extractelement <2 x i64> %16, i32 0
  %64 = shl i64 %63, 48
  %65 = ashr exact i64 %64, 48
  %66 = sext i16 %19 to i64
  %67 = mul nsw i64 %66, %65
  %68 = lshr i64 %67, 16
  %69 = trunc i64 %68 to i16
  call void @llvm.lifetime.start(i64 16, i8* nonnull %59)
  store <2 x i64> zeroinitializer, <2 x i64>* %6, align 16
  %70 = bitcast <2 x i64>* %6 to i16*
  store i16 %69, i16* %70, align 16
  %71 = load i64, i64* %60, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %59)
  %72 = shl i64 %63, 32
  %73 = ashr i64 %72, 48
  %74 = sext i16 %22 to i64
  %75 = mul nsw i64 %74, %73
  %76 = lshr i64 %75, 16
  %77 = trunc i64 %76 to i16
  call void @llvm.lifetime.start(i64 16, i8* nonnull %59)
  store i64 %71, i64* %60, align 16
  store i64 0, i64* %61, align 8
  %78 = getelementptr inbounds [8 x i16], [8 x i16]* %62, i64 0, i64 1
  store i16 %77, i16* %78, align 2
  %79 = load i64, i64* %60, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %59)
  %80 = shl i64 %63, 16
  %81 = ashr i64 %80, 48
  %82 = sext i16 %25 to i64
  %83 = mul nsw i64 %82, %81
  %84 = lshr i64 %83, 16
  %85 = trunc i64 %84 to i16
  call void @llvm.lifetime.start(i64 16, i8* nonnull %59)
  store i64 %79, i64* %60, align 16
  store i64 0, i64* %61, align 8
  %86 = getelementptr inbounds [8 x i16], [8 x i16]* %62, i64 0, i64 2
  store i16 %85, i16* %86, align 4
  %87 = load i64, i64* %60, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %59)
  %88 = getelementptr inbounds %struct.uint16v8_t, %struct.uint16v8_t* %10, i64 0, i32 0, i64 3
  %89 = load i16, i16* %88, align 2
  %90 = sext i16 %89 to i64
  %91 = sext i16 %28 to i64
  %92 = mul nsw i64 %91, %90
  %93 = lshr i64 %92, 16
  %94 = trunc i64 %93 to i16
  call void @llvm.lifetime.start(i64 16, i8* nonnull %59)
  store i64 %87, i64* %60, align 16
  store i64 0, i64* %61, align 8
  %95 = getelementptr inbounds [8 x i16], [8 x i16]* %62, i64 0, i64 3
  store i16 %94, i16* %95, align 2
  %96 = load i64, i64* %60, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %59)
  %97 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %9, i64 0, i32 1
  %98 = bitcast i64* %97 to i16*
  %99 = load i16, i16* %98, align 8
  %100 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %12, i64 0, i32 1
  %101 = bitcast i64* %100 to i16*
  %102 = load i16, i16* %101, align 8
  %103 = sext i16 %99 to i64
  %104 = sext i16 %102 to i64
  %105 = mul nsw i64 %104, %103
  %106 = lshr i64 %105, 16
  %107 = trunc i64 %106 to i16
  call void @llvm.lifetime.start(i64 16, i8* nonnull %59)
  store i64 %96, i64* %60, align 16
  store i64 0, i64* %61, align 8
  %108 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %7, i64 0, i32 1
  %109 = bitcast i64* %108 to i16*
  store i16 %107, i16* %109, align 8
  %110 = load i64, i64* %61, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %59)
  %111 = getelementptr inbounds %struct.uint16v8_t, %struct.uint16v8_t* %10, i64 0, i32 0, i64 5
  %112 = load i16, i16* %111, align 2
  %113 = getelementptr inbounds %struct.uint16v8_t, %struct.uint16v8_t* %13, i64 0, i32 0, i64 5
  %114 = load i16, i16* %113, align 2
  %115 = sext i16 %112 to i64
  %116 = sext i16 %114 to i64
  %117 = mul nsw i64 %116, %115
  %118 = lshr i64 %117, 16
  %119 = trunc i64 %118 to i16
  call void @llvm.lifetime.start(i64 16, i8* nonnull %59)
  store i64 %96, i64* %60, align 16
  store i64 %110, i64* %61, align 8
  %120 = getelementptr inbounds [8 x i16], [8 x i16]* %62, i64 0, i64 5
  store i16 %119, i16* %120, align 2
  %121 = load i64, i64* %61, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %59)
  %122 = getelementptr inbounds %struct.uint16v8_t, %struct.uint16v8_t* %10, i64 0, i32 0, i64 6
  %123 = load i16, i16* %122, align 4
  %124 = getelementptr inbounds %struct.uint16v8_t, %struct.uint16v8_t* %13, i64 0, i32 0, i64 6
  %125 = load i16, i16* %124, align 4
  %126 = sext i16 %123 to i64
  %127 = sext i16 %125 to i64
  %128 = mul nsw i64 %127, %126
  %129 = lshr i64 %128, 16
  %130 = trunc i64 %129 to i16
  call void @llvm.lifetime.start(i64 16, i8* nonnull %59)
  store i64 %96, i64* %60, align 16
  store i64 %121, i64* %61, align 8
  %131 = getelementptr inbounds [8 x i16], [8 x i16]* %62, i64 0, i64 6
  store i16 %130, i16* %131, align 4
  %132 = load i64, i64* %61, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %59)
  %133 = getelementptr inbounds %struct.uint16v8_t, %struct.uint16v8_t* %10, i64 0, i32 0, i64 7
  %134 = load i16, i16* %133, align 2
  %135 = getelementptr inbounds %struct.uint16v8_t, %struct.uint16v8_t* %13, i64 0, i32 0, i64 7
  %136 = load i16, i16* %135, align 2
  %137 = sext i16 %134 to i64
  %138 = sext i16 %136 to i64
  %139 = mul nsw i64 %138, %137
  %140 = lshr i64 %139, 16
  %141 = trunc i64 %140 to i16
  call void @llvm.lifetime.start(i64 16, i8* nonnull %59)
  store i64 %96, i64* %60, align 16
  store i64 %132, i64* %61, align 8
  %142 = getelementptr inbounds [8 x i16], [8 x i16]* %62, i64 0, i64 7
  store i16 %141, i16* %142, align 2
  %143 = load i64, i64* %61, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %59)
  %144 = lshr i64 %96, 16
  %145 = lshr i64 %96, 32
  %146 = lshr i64 %96, 48
  %147 = trunc i64 %96 to i16
  %148 = trunc i64 %144 to i16
  %149 = trunc i64 %145 to i16
  %150 = trunc i64 %146 to i16
  %151 = bitcast i8* %2 to i16*
  store i16 %147, i16* %151, align 1
  %152 = getelementptr inbounds i8, i8* %2, i64 2
  %153 = bitcast i8* %152 to i16*
  store i16 %148, i16* %153, align 1
  %154 = getelementptr inbounds i8, i8* %2, i64 4
  %155 = bitcast i8* %154 to i16*
  store i16 %149, i16* %155, align 1
  %156 = getelementptr inbounds i8, i8* %2, i64 6
  %157 = bitcast i8* %156 to i16*
  store i16 %150, i16* %157, align 1
  %158 = trunc i64 %143 to i16
  %159 = getelementptr inbounds i8, i8* %2, i64 8
  %160 = bitcast i8* %159 to i16*
  store i16 %158, i16* %160, align 1
  %161 = lshr i64 %143, 16
  %162 = trunc i64 %161 to i16
  %163 = getelementptr inbounds i8, i8* %2, i64 10
  %164 = bitcast i8* %163 to i16*
  store i16 %162, i16* %164, align 1
  %165 = lshr i64 %143, 32
  %166 = trunc i64 %165 to i16
  %167 = getelementptr inbounds i8, i8* %2, i64 12
  %168 = bitcast i8* %167 to i16*
  store i16 %166, i16* %168, align 1
  %169 = lshr i64 %143, 48
  %170 = trunc i64 %169 to i16
  %171 = getelementptr inbounds i8, i8* %2, i64 14
  %172 = bitcast i8* %171 to i16*
  store i16 %170, i16* %172, align 1
  call void @llvm.lifetime.end(i64 16, i8* nonnull %17) 
  call void @llvm.lifetime.end(i64 16, i8* nonnull %14) 
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L7PMULHUWI4RVnWI7vec64_tE3RVnIS2_ES5_EEP6MemoryS7_R5StateT_T0_T1_(%struct.Memory* readnone returned, %struct.State* nocapture readnone dereferenceable(3376), i64* nocapture, i64, i64)  {
  %6 = alloca i64, align 8
  %7 = bitcast i64* %6 to i8*
  %8 = bitcast i64* %6 to [4 x i16]*
  %9 = trunc i64 %3 to i32
  %10 = trunc i64 %4 to i32
  %11 = and i32 %9, 65535
  %12 = and i32 %10, 65535
  %13 = mul nuw i32 %12, %11
  %14 = lshr i32 %13, 16
  %15 = trunc i32 %14 to i16
  call void @llvm.lifetime.start(i64 8, i8* nonnull %7)
  store i64 0, i64* %6, align 8
  %16 = bitcast i64* %6 to i16*
  store i16 %15, i16* %16, align 8
  %17 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %7)
  %18 = lshr i64 %3, 16
  %19 = trunc i64 %18 to i32
  %20 = lshr i64 %4, 16
  %21 = trunc i64 %20 to i32
  %22 = and i32 %19, 65535
  %23 = and i32 %21, 65535
  %24 = mul nuw i32 %23, %22
  %25 = lshr i32 %24, 16
  %26 = trunc i32 %25 to i16
  call void @llvm.lifetime.start(i64 8, i8* nonnull %7)
  store i64 %17, i64* %6, align 8
  %27 = getelementptr inbounds [4 x i16], [4 x i16]* %8, i64 0, i64 1
  store i16 %26, i16* %27, align 2
  %28 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %7)
  %29 = lshr i64 %3, 32
  %30 = trunc i64 %29 to i32
  %31 = lshr i64 %4, 32
  %32 = trunc i64 %31 to i32
  %33 = and i32 %30, 65535
  %34 = and i32 %32, 65535
  %35 = mul nuw i32 %34, %33
  %36 = lshr i32 %35, 16
  %37 = trunc i32 %36 to i16
  call void @llvm.lifetime.start(i64 8, i8* nonnull %7)
  store i64 %28, i64* %6, align 8
  %38 = getelementptr inbounds [4 x i16], [4 x i16]* %8, i64 0, i64 2
  store i16 %37, i16* %38, align 4
  %39 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %7)
  %40 = lshr i64 %3, 48
  %41 = trunc i64 %40 to i32
  %42 = lshr i64 %4, 48
  %43 = trunc i64 %42 to i32
  %44 = mul nuw i32 %43, %41
  %45 = lshr i32 %44, 16
  %46 = trunc i32 %45 to i16
  call void @llvm.lifetime.start(i64 8, i8* nonnull %7)
  store i64 %39, i64* %6, align 8
  %47 = getelementptr inbounds [4 x i16], [4 x i16]* %8, i64 0, i64 3
  store i16 %46, i16* %47, align 2
  %48 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %7)
  %49 = lshr i64 %48, 16
  %50 = lshr i64 %48, 32
  %51 = lshr i64 %48, 48
  %52 = trunc i64 %48 to i16
  %53 = trunc i64 %49 to i16
  %54 = trunc i64 %50 to i16
  %55 = trunc i64 %51 to i16
  %56 = bitcast i64* %2 to [4 x i16]*
  %57 = bitcast i64* %2 to i16*
  store i16 %52, i16* %57, align 1
  %58 = getelementptr inbounds [4 x i16], [4 x i16]* %56, i64 0, i64 1
  store i16 %53, i16* %58, align 1
  %59 = getelementptr inbounds [4 x i16], [4 x i16]* %56, i64 0, i64 2
  store i16 %54, i16* %59, align 1
  %60 = getelementptr inbounds [4 x i16], [4 x i16]* %56, i64 0, i64 3
  store i16 %55, i16* %60, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L7PMULHUWI4RVnWI7vec64_tE3RVnIS2_E3MVnIS2_EEEP6MemoryS9_R5StateT_T0_T1_(%struct.Memory* returned, %struct.State* nocapture readnone dereferenceable(3376), i64* nocapture, i64, i64)  {
  %6 = alloca i64, align 8
  %7 = alloca i64, align 8
  %8 = bitcast i64* %7 to %struct.int16v4_t*
  %9 = bitcast i64* %7 to i8*
  call void @llvm.lifetime.start(i64 8, i8* nonnull %9) 
  store i64 %3, i64* %7, align 8
  %10 = inttoptr i64 %4 to i16*
  %11 = load i16, i16* %10
  %12 = add i64 %4, 2
  %13 = inttoptr i64 %12 to i16*
  %14 = load i16, i16* %13
  %15 = add i64 %4, 4
  %16 = inttoptr i64 %15 to i16*
  %17 = load i16, i16* %16
  %18 = add i64 %4, 6
  %19 = inttoptr i64 %18 to i16*
  %20 = load i16, i16* %19
  %21 = bitcast i64* %6 to i8*
  %22 = bitcast i64* %6 to [4 x i16]*
  %23 = trunc i64 %3 to i32
  %24 = and i32 %23, 65535
  %25 = zext i16 %11 to i32
  %26 = mul nuw i32 %25, %24
  %27 = lshr i32 %26, 16
  %28 = trunc i32 %27 to i16
  call void @llvm.lifetime.start(i64 8, i8* nonnull %21)
  store i64 0, i64* %6, align 8
  %29 = bitcast i64* %6 to i16*
  store i16 %28, i16* %29, align 8
  %30 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %21)
  %31 = lshr i64 %3, 16
  %32 = trunc i64 %31 to i32
  %33 = zext i16 %14 to i32
  %34 = and i32 %32, 65535
  %35 = mul nuw i32 %33, %34
  %36 = lshr i32 %35, 16
  %37 = trunc i32 %36 to i16
  call void @llvm.lifetime.start(i64 8, i8* nonnull %21)
  store i64 %30, i64* %6, align 8
  %38 = getelementptr inbounds [4 x i16], [4 x i16]* %22, i64 0, i64 1
  store i16 %37, i16* %38, align 2
  %39 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %21)
  %40 = lshr i64 %3, 32
  %41 = trunc i64 %40 to i32
  %42 = zext i16 %17 to i32
  %43 = and i32 %41, 65535
  %44 = mul nuw i32 %42, %43
  %45 = lshr i32 %44, 16
  %46 = trunc i32 %45 to i16
  call void @llvm.lifetime.start(i64 8, i8* nonnull %21)
  store i64 %39, i64* %6, align 8
  %47 = getelementptr inbounds [4 x i16], [4 x i16]* %22, i64 0, i64 2
  store i16 %46, i16* %47, align 4
  %48 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %21)
  %49 = getelementptr inbounds %struct.int16v4_t, %struct.int16v4_t* %8, i64 0, i32 0, i64 3
  %50 = load i16, i16* %49, align 2
  %51 = zext i16 %50 to i32
  %52 = zext i16 %20 to i32
  %53 = mul nuw i32 %52, %51
  %54 = lshr i32 %53, 16
  %55 = trunc i32 %54 to i16
  call void @llvm.lifetime.start(i64 8, i8* nonnull %21)
  store i64 %48, i64* %6, align 8
  %56 = getelementptr inbounds [4 x i16], [4 x i16]* %22, i64 0, i64 3
  store i16 %55, i16* %56, align 2
  %57 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %21)
  %58 = lshr i64 %57, 16
  %59 = lshr i64 %57, 32
  %60 = lshr i64 %57, 48
  %61 = trunc i64 %57 to i16
  %62 = trunc i64 %58 to i16
  %63 = trunc i64 %59 to i16
  %64 = trunc i64 %60 to i16
  %65 = bitcast i64* %2 to [4 x i16]*
  %66 = bitcast i64* %2 to i16*
  store i16 %61, i16* %66, align 1
  %67 = getelementptr inbounds [4 x i16], [4 x i16]* %65, i64 0, i64 1
  store i16 %62, i16* %67, align 1
  %68 = getelementptr inbounds [4 x i16], [4 x i16]* %65, i64 0, i64 2
  store i16 %63, i16* %68, align 1
  %69 = getelementptr inbounds [4 x i16], [4 x i16]* %65, i64 0, i64 3
  store i16 %64, i16* %69, align 1
  call void @llvm.lifetime.end(i64 8, i8* nonnull %9) 
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L7PMULHUWI3VnWI8vec128_tE2VnIS2_ES5_EEP6MemoryS7_R5StateT_T0_T1_(%struct.Memory* readnone returned, %struct.State* nocapture readnone dereferenceable(3376), i8* nocapture, i8* nocapture readonly, i8* nocapture readonly)  {
  %6 = alloca <2 x i64>, align 16
  %7 = bitcast <2 x i64>* %6 to { i64, i64 }*
  %8 = alloca <2 x i64>, align 16
  %9 = bitcast <2 x i64>* %8 to { i64, i64 }*
  %10 = bitcast <2 x i64>* %8 to %struct.uint16v8_t*
  %11 = alloca <2 x i64>, align 16
  %12 = bitcast <2 x i64>* %11 to { i64, i64 }*
  %13 = bitcast <2 x i64>* %11 to %struct.uint16v8_t*
  %14 = bitcast <2 x i64>* %8 to i8*
  call void @llvm.lifetime.start(i64 16, i8* nonnull %14) 
  %15 = bitcast i8* %3 to <2 x i64>*
  %16 = load <2 x i64>, <2 x i64>* %15, align 1
  store <2 x i64> %16, <2 x i64>* %8, align 16
  %17 = bitcast <2 x i64>* %11 to i8*
  call void @llvm.lifetime.start(i64 16, i8* nonnull %17) 
  %18 = bitcast i8* %4 to <2 x i64>*
  %19 = load <2 x i64>, <2 x i64>* %18, align 1
  store <2 x i64> %19, <2 x i64>* %11, align 16
  %20 = bitcast <2 x i64>* %6 to i8*
  %21 = getelementptr inbounds <2 x i64>, <2 x i64>* %6, i64 0, i64 0
  %22 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %7, i64 0, i32 1
  %23 = bitcast <2 x i64>* %6 to [8 x i16]*
  %24 = extractelement <2 x i64> %16, i32 0
  %25 = trunc i64 %24 to i32
  %26 = extractelement <2 x i64> %19, i32 0
  %27 = trunc i64 %26 to i32
  %28 = and i32 %25, 65535
  %29 = and i32 %27, 65535
  %30 = mul nuw i32 %29, %28
  %31 = lshr i32 %30, 16
  %32 = trunc i32 %31 to i16
  call void @llvm.lifetime.start(i64 16, i8* nonnull %20)
  store <2 x i64> zeroinitializer, <2 x i64>* %6, align 16
  %33 = bitcast <2 x i64>* %6 to i16*
  store i16 %32, i16* %33, align 16
  %34 = load i64, i64* %21, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %20)
  %35 = lshr i64 %24, 16
  %36 = trunc i64 %35 to i32
  %37 = lshr i64 %26, 16
  %38 = trunc i64 %37 to i32
  %39 = and i32 %36, 65535
  %40 = and i32 %38, 65535
  %41 = mul nuw i32 %40, %39
  %42 = lshr i32 %41, 16
  %43 = trunc i32 %42 to i16
  call void @llvm.lifetime.start(i64 16, i8* nonnull %20)
  store i64 %34, i64* %21, align 16
  store i64 0, i64* %22, align 8
  %44 = getelementptr inbounds [8 x i16], [8 x i16]* %23, i64 0, i64 1
  store i16 %43, i16* %44, align 2
  %45 = load i64, i64* %21, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %20)
  %46 = lshr i64 %24, 32
  %47 = trunc i64 %46 to i32
  %48 = lshr i64 %26, 32
  %49 = trunc i64 %48 to i32
  %50 = and i32 %47, 65535
  %51 = and i32 %49, 65535
  %52 = mul nuw i32 %51, %50
  %53 = lshr i32 %52, 16
  %54 = trunc i32 %53 to i16
  call void @llvm.lifetime.start(i64 16, i8* nonnull %20)
  store i64 %45, i64* %21, align 16
  store i64 0, i64* %22, align 8
  %55 = getelementptr inbounds [8 x i16], [8 x i16]* %23, i64 0, i64 2
  store i16 %54, i16* %55, align 4
  %56 = load i64, i64* %21, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %20)
  %57 = lshr i64 %24, 48
  %58 = trunc i64 %57 to i32
  %59 = lshr i64 %26, 48
  %60 = trunc i64 %59 to i32
  %61 = mul nuw i32 %60, %58
  %62 = lshr i32 %61, 16
  %63 = trunc i32 %62 to i16
  call void @llvm.lifetime.start(i64 16, i8* nonnull %20)
  store i64 %56, i64* %21, align 16
  store i64 0, i64* %22, align 8
  %64 = getelementptr inbounds [8 x i16], [8 x i16]* %23, i64 0, i64 3
  store i16 %63, i16* %64, align 2
  %65 = load i64, i64* %21, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %20)
  %66 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %9, i64 0, i32 1
  %67 = bitcast i64* %66 to i16*
  %68 = load i16, i16* %67, align 8
  %69 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %12, i64 0, i32 1
  %70 = bitcast i64* %69 to i16*
  %71 = load i16, i16* %70, align 8
  %72 = zext i16 %68 to i32
  %73 = zext i16 %71 to i32
  %74 = mul nuw i32 %73, %72
  %75 = lshr i32 %74, 16
  %76 = trunc i32 %75 to i16
  call void @llvm.lifetime.start(i64 16, i8* nonnull %20)
  store i64 %65, i64* %21, align 16
  store i64 0, i64* %22, align 8
  %77 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %7, i64 0, i32 1
  %78 = bitcast i64* %77 to i16*
  store i16 %76, i16* %78, align 8
  %79 = load i64, i64* %22, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %20)
  %80 = getelementptr inbounds %struct.uint16v8_t, %struct.uint16v8_t* %10, i64 0, i32 0, i64 5
  %81 = load i16, i16* %80, align 2
  %82 = getelementptr inbounds %struct.uint16v8_t, %struct.uint16v8_t* %13, i64 0, i32 0, i64 5
  %83 = load i16, i16* %82, align 2
  %84 = zext i16 %81 to i32
  %85 = zext i16 %83 to i32
  %86 = mul nuw i32 %85, %84
  %87 = lshr i32 %86, 16
  %88 = trunc i32 %87 to i16
  call void @llvm.lifetime.start(i64 16, i8* nonnull %20)
  store i64 %65, i64* %21, align 16
  store i64 %79, i64* %22, align 8
  %89 = getelementptr inbounds [8 x i16], [8 x i16]* %23, i64 0, i64 5
  store i16 %88, i16* %89, align 2
  %90 = load i64, i64* %22, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %20)
  %91 = getelementptr inbounds %struct.uint16v8_t, %struct.uint16v8_t* %10, i64 0, i32 0, i64 6
  %92 = load i16, i16* %91, align 4
  %93 = getelementptr inbounds %struct.uint16v8_t, %struct.uint16v8_t* %13, i64 0, i32 0, i64 6
  %94 = load i16, i16* %93, align 4
  %95 = zext i16 %92 to i32
  %96 = zext i16 %94 to i32
  %97 = mul nuw i32 %96, %95
  %98 = lshr i32 %97, 16
  %99 = trunc i32 %98 to i16
  call void @llvm.lifetime.start(i64 16, i8* nonnull %20)
  store i64 %65, i64* %21, align 16
  store i64 %90, i64* %22, align 8
  %100 = getelementptr inbounds [8 x i16], [8 x i16]* %23, i64 0, i64 6
  store i16 %99, i16* %100, align 4
  %101 = load i64, i64* %22, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %20)
  %102 = getelementptr inbounds %struct.uint16v8_t, %struct.uint16v8_t* %10, i64 0, i32 0, i64 7
  %103 = load i16, i16* %102, align 2
  %104 = getelementptr inbounds %struct.uint16v8_t, %struct.uint16v8_t* %13, i64 0, i32 0, i64 7
  %105 = load i16, i16* %104, align 2
  %106 = zext i16 %103 to i32
  %107 = zext i16 %105 to i32
  %108 = mul nuw i32 %107, %106
  %109 = lshr i32 %108, 16
  %110 = trunc i32 %109 to i16
  call void @llvm.lifetime.start(i64 16, i8* nonnull %20)
  store i64 %65, i64* %21, align 16
  store i64 %101, i64* %22, align 8
  %111 = getelementptr inbounds [8 x i16], [8 x i16]* %23, i64 0, i64 7
  store i16 %110, i16* %111, align 2
  %112 = load i64, i64* %22, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %20)
  %113 = lshr i64 %65, 16
  %114 = lshr i64 %65, 32
  %115 = lshr i64 %65, 48
  %116 = trunc i64 %65 to i16
  %117 = trunc i64 %113 to i16
  %118 = trunc i64 %114 to i16
  %119 = trunc i64 %115 to i16
  %120 = bitcast i8* %2 to i16*
  store i16 %116, i16* %120, align 1
  %121 = getelementptr inbounds i8, i8* %2, i64 2
  %122 = bitcast i8* %121 to i16*
  store i16 %117, i16* %122, align 1
  %123 = getelementptr inbounds i8, i8* %2, i64 4
  %124 = bitcast i8* %123 to i16*
  store i16 %118, i16* %124, align 1
  %125 = getelementptr inbounds i8, i8* %2, i64 6
  %126 = bitcast i8* %125 to i16*
  store i16 %119, i16* %126, align 1
  %127 = trunc i64 %112 to i16
  %128 = getelementptr inbounds i8, i8* %2, i64 8
  %129 = bitcast i8* %128 to i16*
  store i16 %127, i16* %129, align 1
  %130 = lshr i64 %112, 16
  %131 = trunc i64 %130 to i16
  %132 = getelementptr inbounds i8, i8* %2, i64 10
  %133 = bitcast i8* %132 to i16*
  store i16 %131, i16* %133, align 1
  %134 = lshr i64 %112, 32
  %135 = trunc i64 %134 to i16
  %136 = getelementptr inbounds i8, i8* %2, i64 12
  %137 = bitcast i8* %136 to i16*
  store i16 %135, i16* %137, align 1
  %138 = lshr i64 %112, 48
  %139 = trunc i64 %138 to i16
  %140 = getelementptr inbounds i8, i8* %2, i64 14
  %141 = bitcast i8* %140 to i16*
  store i16 %139, i16* %141, align 1
  call void @llvm.lifetime.end(i64 16, i8* nonnull %17) 
  call void @llvm.lifetime.end(i64 16, i8* nonnull %14) 
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L7PMULHUWI3VnWI8vec128_tE2VnIS2_E3MVnIS2_EEEP6MemoryS9_R5StateT_T0_T1_(%struct.Memory* returned, %struct.State* nocapture readnone dereferenceable(3376), i8* nocapture, i8* nocapture readonly, i64)  {
  %6 = alloca <2 x i64>, align 16
  %7 = bitcast <2 x i64>* %6 to { i64, i64 }*
  %8 = alloca <2 x i64>, align 16
  %9 = bitcast <2 x i64>* %8 to { i64, i64 }*
  %10 = bitcast <2 x i64>* %8 to %struct.uint16v8_t*
  %11 = alloca <2 x i64>, align 16
  %12 = bitcast <2 x i64>* %11 to { i64, i64 }*
  %13 = bitcast <2 x i64>* %11 to %struct.uint16v8_t*
  %14 = bitcast <2 x i64>* %8 to i8*
  call void @llvm.lifetime.start(i64 16, i8* nonnull %14) 
  %15 = bitcast i8* %3 to <2 x i64>*
  %16 = load <2 x i64>, <2 x i64>* %15, align 1
  store <2 x i64> %16, <2 x i64>* %8, align 16
  %17 = bitcast <2 x i64>* %11 to i8*
  call void @llvm.lifetime.start(i64 16, i8* nonnull %17) 
  %18 = inttoptr i64 %4 to i16*
  %19 = load i16, i16* %18
  %20 = add i64 %4, 2
  %21 = inttoptr i64 %20 to i16*
  %22 = load i16, i16* %21
  %23 = add i64 %4, 4
  %24 = inttoptr i64 %23 to i16*
  %25 = load i16, i16* %24
  %26 = add i64 %4, 6
  %27 = inttoptr i64 %26 to i16*
  %28 = load i16, i16* %27
  %29 = add i64 %4, 8
  %30 = inttoptr i64 %29 to i16*
  %31 = load i16, i16* %30
  %32 = add i64 %4, 10
  %33 = inttoptr i64 %32 to i16*
  %34 = load i16, i16* %33
  %35 = add i64 %4, 12
  %36 = inttoptr i64 %35 to i16*
  %37 = load i16, i16* %36
  %38 = add i64 %4, 14
  %39 = inttoptr i64 %38 to i16*
  %40 = load i16, i16* %39
  %41 = insertelement <2 x i16> undef, i16 %28, i32 0
  %42 = insertelement <2 x i16> %41, i16 %40, i32 1
  %43 = zext <2 x i16> %42 to <2 x i64>
  %44 = shl nuw <2 x i64> %43, <i64 48, i64 48>
  %45 = insertelement <2 x i16> undef, i16 %25, i32 0
  %46 = insertelement <2 x i16> %45, i16 %37, i32 1
  %47 = zext <2 x i16> %46 to <2 x i64>
  %48 = shl nuw nsw <2 x i64> %47, <i64 32, i64 32>
  %49 = insertelement <2 x i16> undef, i16 %22, i32 0
  %50 = insertelement <2 x i16> %49, i16 %34, i32 1
  %51 = zext <2 x i16> %50 to <2 x i64>
  %52 = shl nuw nsw <2 x i64> %51, <i64 16, i64 16>
  %53 = insertelement <2 x i16> undef, i16 %19, i32 0
  %54 = insertelement <2 x i16> %53, i16 %31, i32 1
  %55 = zext <2 x i16> %54 to <2 x i64>
  %56 = or <2 x i64> %52, %55
  %57 = or <2 x i64> %56, %48
  %58 = or <2 x i64> %57, %44
  store <2 x i64> %58, <2 x i64>* %11, align 16
  %59 = bitcast <2 x i64>* %6 to i8*
  %60 = getelementptr inbounds <2 x i64>, <2 x i64>* %6, i64 0, i64 0
  %61 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %7, i64 0, i32 1
  %62 = bitcast <2 x i64>* %6 to [8 x i16]*
  %63 = extractelement <2 x i64> %16, i32 0
  %64 = trunc i64 %63 to i32
  %65 = and i32 %64, 65535
  %66 = zext i16 %19 to i32
  %67 = mul nuw i32 %66, %65
  %68 = lshr i32 %67, 16
  %69 = trunc i32 %68 to i16
  call void @llvm.lifetime.start(i64 16, i8* nonnull %59)
  store <2 x i64> zeroinitializer, <2 x i64>* %6, align 16
  %70 = bitcast <2 x i64>* %6 to i16*
  store i16 %69, i16* %70, align 16
  %71 = load i64, i64* %60, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %59)
  %72 = lshr i64 %63, 16
  %73 = trunc i64 %72 to i32
  %74 = zext i16 %22 to i32
  %75 = and i32 %73, 65535
  %76 = mul nuw i32 %74, %75
  %77 = lshr i32 %76, 16
  %78 = trunc i32 %77 to i16
  call void @llvm.lifetime.start(i64 16, i8* nonnull %59)
  store i64 %71, i64* %60, align 16
  store i64 0, i64* %61, align 8
  %79 = getelementptr inbounds [8 x i16], [8 x i16]* %62, i64 0, i64 1
  store i16 %78, i16* %79, align 2
  %80 = load i64, i64* %60, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %59)
  %81 = lshr i64 %63, 32
  %82 = trunc i64 %81 to i32
  %83 = zext i16 %25 to i32
  %84 = and i32 %82, 65535
  %85 = mul nuw i32 %83, %84
  %86 = lshr i32 %85, 16
  %87 = trunc i32 %86 to i16
  call void @llvm.lifetime.start(i64 16, i8* nonnull %59)
  store i64 %80, i64* %60, align 16
  store i64 0, i64* %61, align 8
  %88 = getelementptr inbounds [8 x i16], [8 x i16]* %62, i64 0, i64 2
  store i16 %87, i16* %88, align 4
  %89 = load i64, i64* %60, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %59)
  %90 = getelementptr inbounds %struct.uint16v8_t, %struct.uint16v8_t* %10, i64 0, i32 0, i64 3
  %91 = load i16, i16* %90, align 2
  %92 = zext i16 %91 to i32
  %93 = zext i16 %28 to i32
  %94 = mul nuw i32 %93, %92
  %95 = lshr i32 %94, 16
  %96 = trunc i32 %95 to i16
  call void @llvm.lifetime.start(i64 16, i8* nonnull %59)
  store i64 %89, i64* %60, align 16
  store i64 0, i64* %61, align 8
  %97 = getelementptr inbounds [8 x i16], [8 x i16]* %62, i64 0, i64 3
  store i16 %96, i16* %97, align 2
  %98 = load i64, i64* %60, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %59)
  %99 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %9, i64 0, i32 1
  %100 = bitcast i64* %99 to i16*
  %101 = load i16, i16* %100, align 8
  %102 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %12, i64 0, i32 1
  %103 = bitcast i64* %102 to i16*
  %104 = load i16, i16* %103, align 8
  %105 = zext i16 %101 to i32
  %106 = zext i16 %104 to i32
  %107 = mul nuw i32 %106, %105
  %108 = lshr i32 %107, 16
  %109 = trunc i32 %108 to i16
  call void @llvm.lifetime.start(i64 16, i8* nonnull %59)
  store i64 %98, i64* %60, align 16
  store i64 0, i64* %61, align 8
  %110 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %7, i64 0, i32 1
  %111 = bitcast i64* %110 to i16*
  store i16 %109, i16* %111, align 8
  %112 = load i64, i64* %61, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %59)
  %113 = getelementptr inbounds %struct.uint16v8_t, %struct.uint16v8_t* %10, i64 0, i32 0, i64 5
  %114 = load i16, i16* %113, align 2
  %115 = getelementptr inbounds %struct.uint16v8_t, %struct.uint16v8_t* %13, i64 0, i32 0, i64 5
  %116 = load i16, i16* %115, align 2
  %117 = zext i16 %114 to i32
  %118 = zext i16 %116 to i32
  %119 = mul nuw i32 %118, %117
  %120 = lshr i32 %119, 16
  %121 = trunc i32 %120 to i16
  call void @llvm.lifetime.start(i64 16, i8* nonnull %59)
  store i64 %98, i64* %60, align 16
  store i64 %112, i64* %61, align 8
  %122 = getelementptr inbounds [8 x i16], [8 x i16]* %62, i64 0, i64 5
  store i16 %121, i16* %122, align 2
  %123 = load i64, i64* %61, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %59)
  %124 = getelementptr inbounds %struct.uint16v8_t, %struct.uint16v8_t* %10, i64 0, i32 0, i64 6
  %125 = load i16, i16* %124, align 4
  %126 = getelementptr inbounds %struct.uint16v8_t, %struct.uint16v8_t* %13, i64 0, i32 0, i64 6
  %127 = load i16, i16* %126, align 4
  %128 = zext i16 %125 to i32
  %129 = zext i16 %127 to i32
  %130 = mul nuw i32 %129, %128
  %131 = lshr i32 %130, 16
  %132 = trunc i32 %131 to i16
  call void @llvm.lifetime.start(i64 16, i8* nonnull %59)
  store i64 %98, i64* %60, align 16
  store i64 %123, i64* %61, align 8
  %133 = getelementptr inbounds [8 x i16], [8 x i16]* %62, i64 0, i64 6
  store i16 %132, i16* %133, align 4
  %134 = load i64, i64* %61, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %59)
  %135 = getelementptr inbounds %struct.uint16v8_t, %struct.uint16v8_t* %10, i64 0, i32 0, i64 7
  %136 = load i16, i16* %135, align 2
  %137 = getelementptr inbounds %struct.uint16v8_t, %struct.uint16v8_t* %13, i64 0, i32 0, i64 7
  %138 = load i16, i16* %137, align 2
  %139 = zext i16 %136 to i32
  %140 = zext i16 %138 to i32
  %141 = mul nuw i32 %140, %139
  %142 = lshr i32 %141, 16
  %143 = trunc i32 %142 to i16
  call void @llvm.lifetime.start(i64 16, i8* nonnull %59)
  store i64 %98, i64* %60, align 16
  store i64 %134, i64* %61, align 8
  %144 = getelementptr inbounds [8 x i16], [8 x i16]* %62, i64 0, i64 7
  store i16 %143, i16* %144, align 2
  %145 = load i64, i64* %61, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %59)
  %146 = lshr i64 %98, 16
  %147 = lshr i64 %98, 32
  %148 = lshr i64 %98, 48
  %149 = trunc i64 %98 to i16
  %150 = trunc i64 %146 to i16
  %151 = trunc i64 %147 to i16
  %152 = trunc i64 %148 to i16
  %153 = bitcast i8* %2 to i16*
  store i16 %149, i16* %153, align 1
  %154 = getelementptr inbounds i8, i8* %2, i64 2
  %155 = bitcast i8* %154 to i16*
  store i16 %150, i16* %155, align 1
  %156 = getelementptr inbounds i8, i8* %2, i64 4
  %157 = bitcast i8* %156 to i16*
  store i16 %151, i16* %157, align 1
  %158 = getelementptr inbounds i8, i8* %2, i64 6
  %159 = bitcast i8* %158 to i16*
  store i16 %152, i16* %159, align 1
  %160 = trunc i64 %145 to i16
  %161 = getelementptr inbounds i8, i8* %2, i64 8
  %162 = bitcast i8* %161 to i16*
  store i16 %160, i16* %162, align 1
  %163 = lshr i64 %145, 16
  %164 = trunc i64 %163 to i16
  %165 = getelementptr inbounds i8, i8* %2, i64 10
  %166 = bitcast i8* %165 to i16*
  store i16 %164, i16* %166, align 1
  %167 = lshr i64 %145, 32
  %168 = trunc i64 %167 to i16
  %169 = getelementptr inbounds i8, i8* %2, i64 12
  %170 = bitcast i8* %169 to i16*
  store i16 %168, i16* %170, align 1
  %171 = lshr i64 %145, 48
  %172 = trunc i64 %171 to i16
  %173 = getelementptr inbounds i8, i8* %2, i64 14
  %174 = bitcast i8* %173 to i16*
  store i16 %172, i16* %174, align 1
  call void @llvm.lifetime.end(i64 16, i8* nonnull %17) 
  call void @llvm.lifetime.end(i64 16, i8* nonnull %14) 
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L8PMOVMSKBI3RnWImE3RVnI7vec64_tEEEP6MemoryS7_R5StateT_T0_(%struct.Memory* readnone returned, %struct.State* nocapture readnone dereferenceable(3376), i64* nocapture, i64)  {
  %5 = lshr i64 %3, 55
  %6 = lshr i64 %3, 62
  %7 = trunc i64 %6 to i32
  %8 = and i32 %7, 2
  %9 = trunc i64 %5 to i32
  %10 = and i32 %9, 1
  %11 = or i32 %10, %8
  %12 = lshr i64 %3, 47
  %13 = shl nuw nsw i32 %11, 1
  %14 = trunc i64 %12 to i32
  %15 = and i32 %14, 1
  %16 = or i32 %15, %13
  %17 = lshr i64 %3, 39
  %18 = shl nuw nsw i32 %16, 1
  %19 = trunc i64 %17 to i32
  %20 = and i32 %19, 1
  %21 = or i32 %20, %18
  %22 = lshr i64 %3, 31
  %23 = shl nuw nsw i32 %21, 1
  %24 = trunc i64 %22 to i32
  %25 = and i32 %24, 1
  %26 = or i32 %25, %23
  %27 = lshr i64 %3, 23
  %28 = shl i32 %26, 1
  %29 = trunc i64 %27 to i32
  %30 = and i32 %29, 1
  %31 = or i32 %30, %28
  %32 = lshr i64 %3, 15
  %33 = shl i32 %31, 1
  %34 = trunc i64 %32 to i32
  %35 = and i32 %34, 1
  %36 = or i32 %35, %33
  %37 = trunc i64 %3 to i32
  %38 = shl i32 %36, 1
  %39 = lshr i32 %37, 7
  %40 = and i32 %39, 1
  %41 = or i32 %40, %38
  %42 = zext i32 %41 to i64
  store i64 %42, i64* %2, align 8
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L8PMOVMSKBI3RnWImE2VnI8vec128_tEEEP6MemoryS7_R5StateT_T0_(%struct.Memory* readnone returned, %struct.State* nocapture readnone dereferenceable(3376), i64* nocapture, i8* nocapture readonly)  {
  %5 = alloca { i64, i64 }, align 8
  %6 = bitcast { i64, i64 }* %5 to i8*
  call void @llvm.lifetime.start(i64 16, i8* nonnull %6) 
  %7 = bitcast i8* %3 to i64*
  %8 = load i64, i64* %7, align 1
  %9 = getelementptr inbounds i8, i8* %3, i64 8
  %10 = bitcast i8* %9 to i64*
  %11 = load i64, i64* %10, align 1
  %12 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %5, i64 0, i32 0
  store i64 %8, i64* %12, align 8
  %13 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %5, i64 0, i32 1
  store i64 %11, i64* %13, align 8
  %14 = lshr i64 %11, 55
  %15 = lshr i64 %11, 62
  %16 = trunc i64 %15 to i32
  %17 = and i32 %16, 2
  %18 = trunc i64 %14 to i32
  %19 = and i32 %18, 1
  %20 = or i32 %19, %17
  %21 = lshr i64 %11, 47
  %22 = shl nuw nsw i32 %20, 1
  %23 = trunc i64 %21 to i32
  %24 = and i32 %23, 1
  %25 = or i32 %24, %22
  %26 = lshr i64 %11, 39
  %27 = shl nuw nsw i32 %25, 1
  %28 = trunc i64 %26 to i32
  %29 = and i32 %28, 1
  %30 = or i32 %29, %27
  %31 = lshr i64 %11, 31
  %32 = shl nuw nsw i32 %30, 1
  %33 = trunc i64 %31 to i32
  %34 = and i32 %33, 1
  %35 = or i32 %34, %32
  %36 = lshr i64 %11, 23
  %37 = shl i32 %35, 1
  %38 = trunc i64 %36 to i32
  %39 = and i32 %38, 1
  %40 = or i32 %39, %37
  %41 = lshr i64 %11, 15
  %42 = shl i32 %40, 1
  %43 = trunc i64 %41 to i32
  %44 = and i32 %43, 1
  %45 = or i32 %44, %42
  %46 = trunc i64 %11 to i32
  %47 = shl i32 %45, 1
  %48 = lshr i32 %46, 7
  %49 = and i32 %48, 1
  %50 = or i32 %49, %47
  %51 = lshr i64 %8, 63
  %52 = shl i32 %50, 1
  %53 = trunc i64 %51 to i32
  %54 = or i32 %53, %52
  %55 = lshr i64 %8, 55
  %56 = shl i32 %54, 1
  %57 = trunc i64 %55 to i32
  %58 = and i32 %57, 1
  %59 = or i32 %58, %56
  %60 = lshr i64 %8, 47
  %61 = shl i32 %59, 1
  %62 = trunc i64 %60 to i32
  %63 = and i32 %62, 1
  %64 = or i32 %63, %61
  %65 = lshr i64 %8, 39
  %66 = shl i32 %64, 1
  %67 = trunc i64 %65 to i32
  %68 = and i32 %67, 1
  %69 = or i32 %68, %66
  %70 = lshr i64 %8, 31
  %71 = shl i32 %69, 1
  %72 = trunc i64 %70 to i32
  %73 = and i32 %72, 1
  %74 = or i32 %73, %71
  %75 = lshr i64 %8, 23
  %76 = shl i32 %74, 1
  %77 = trunc i64 %75 to i32
  %78 = and i32 %77, 1
  %79 = or i32 %78, %76
  %80 = lshr i64 %8, 15
  %81 = shl i32 %79, 1
  %82 = trunc i64 %80 to i32
  %83 = and i32 %82, 1
  %84 = or i32 %83, %81
  %85 = bitcast { i64, i64 }* %5 to i8*
  %86 = load i8, i8* %85, align 8
  %87 = shl i32 %84, 1
  %88 = lshr i8 %86, 7
  %89 = zext i8 %88 to i32
  %90 = or i32 %89, %87
  %91 = zext i32 %90 to i64
  store i64 %91, i64* %2, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %6) 
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L6PINSRWI4RVnWI7vec64_tE3RVnIS2_E2MnItEEEP6MemoryS9_R5StateT_T0_T1_2InIhE(%struct.Memory*, %struct.State* nocapture readnone dereferenceable(3376), i64* nocapture, i64, i64, i64)  {
  %7 = alloca i64, align 8
  %8 = inttoptr i64 %4 to i16*
  %9 = load i16, i16* %8
  %10 = and i64 %5, 3
  %11 = bitcast i64* %7 to i8*
  call void @llvm.lifetime.start(i64 8, i8* nonnull %11)
  %12 = bitcast i64* %7 to [4 x i16]*
  store i64 %3, i64* %7, align 8
  %13 = getelementptr inbounds [4 x i16], [4 x i16]* %12, i64 0, i64 %10
  store i16 %9, i16* %13, align 2
  %14 = load i64, i64* %7, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %11)
  %15 = trunc i64 %14 to i16
  %16 = lshr i64 %14, 16
  %17 = trunc i64 %16 to i16
  %18 = lshr i64 %14, 32
  %19 = trunc i64 %18 to i16
  %20 = lshr i64 %14, 48
  %21 = trunc i64 %20 to i16
  %22 = bitcast i64* %2 to [4 x i16]*
  %23 = bitcast i64* %2 to i16*
  store i16 %15, i16* %23, align 1
  %24 = getelementptr inbounds [4 x i16], [4 x i16]* %22, i64 0, i64 1
  store i16 %17, i16* %24, align 1
  %25 = getelementptr inbounds [4 x i16], [4 x i16]* %22, i64 0, i64 2
  store i16 %19, i16* %25, align 1
  %26 = getelementptr inbounds [4 x i16], [4 x i16]* %22, i64 0, i64 3
  store i16 %21, i16* %26, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L6PINSRWI4RVnWI7vec64_tE3RVnIS2_E2RnIjEEEP6MemoryS9_R5StateT_T0_T1_2InIhE(%struct.Memory* readnone returned, %struct.State* nocapture readnone dereferenceable(3376), i64* nocapture, i64, i64, i64)  {
  %7 = alloca i64, align 8
  %8 = trunc i64 %4 to i16
  %9 = and i64 %5, 3
  %10 = bitcast i64* %7 to i8*
  call void @llvm.lifetime.start(i64 8, i8* nonnull %10)
  %11 = bitcast i64* %7 to [4 x i16]*
  store i64 %3, i64* %7, align 8
  %12 = getelementptr inbounds [4 x i16], [4 x i16]* %11, i64 0, i64 %9
  store i16 %8, i16* %12, align 2
  %13 = load i64, i64* %7, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %10)
  %14 = trunc i64 %13 to i16
  %15 = lshr i64 %13, 16
  %16 = trunc i64 %15 to i16
  %17 = lshr i64 %13, 32
  %18 = trunc i64 %17 to i16
  %19 = lshr i64 %13, 48
  %20 = trunc i64 %19 to i16
  %21 = bitcast i64* %2 to [4 x i16]*
  %22 = bitcast i64* %2 to i16*
  store i16 %14, i16* %22, align 1
  %23 = getelementptr inbounds [4 x i16], [4 x i16]* %21, i64 0, i64 1
  store i16 %16, i16* %23, align 1
  %24 = getelementptr inbounds [4 x i16], [4 x i16]* %21, i64 0, i64 2
  store i16 %18, i16* %24, align 1
  %25 = getelementptr inbounds [4 x i16], [4 x i16]* %21, i64 0, i64 3
  store i16 %20, i16* %25, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L6PINSRWI3VnWI8vec128_tE2VnIS2_E2MnItEEEP6MemoryS9_R5StateT_T0_T1_2InIhE(%struct.Memory*, %struct.State* nocapture readnone dereferenceable(3376), i8* nocapture, i8* nocapture readonly, i64, i64)  {
  %7 = alloca <2 x i64>, align 16
  %8 = bitcast <2 x i64>* %7 to { i64, i64 }*
  %9 = bitcast i8* %3 to <2 x i64>*
  %10 = load <2 x i64>, <2 x i64>* %9, align 1
  %11 = inttoptr i64 %4 to i16*
  %12 = load i16, i16* %11
  %13 = and i64 %5, 7
  %14 = bitcast <2 x i64>* %7 to i8*
  call void @llvm.lifetime.start(i64 16, i8* nonnull %14)
  %15 = getelementptr inbounds <2 x i64>, <2 x i64>* %7, i64 0, i64 0
  %16 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %8, i64 0, i32 1
  store <2 x i64> %10, <2 x i64>* %7, align 16
  %17 = bitcast <2 x i64>* %7 to [8 x i16]*
  %18 = getelementptr inbounds [8 x i16], [8 x i16]* %17, i64 0, i64 %13
  store i16 %12, i16* %18, align 2
  %19 = load i64, i64* %15, align 16
  %20 = load i64, i64* %16, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %14)
  %21 = trunc i64 %19 to i16
  %22 = lshr i64 %19, 16
  %23 = trunc i64 %22 to i16
  %24 = lshr i64 %19, 32
  %25 = trunc i64 %24 to i16
  %26 = lshr i64 %19, 48
  %27 = trunc i64 %26 to i16
  %28 = bitcast i8* %2 to i16*
  store i16 %21, i16* %28, align 1
  %29 = getelementptr inbounds i8, i8* %2, i64 2
  %30 = bitcast i8* %29 to i16*
  store i16 %23, i16* %30, align 1
  %31 = getelementptr inbounds i8, i8* %2, i64 4
  %32 = bitcast i8* %31 to i16*
  store i16 %25, i16* %32, align 1
  %33 = getelementptr inbounds i8, i8* %2, i64 6
  %34 = bitcast i8* %33 to i16*
  store i16 %27, i16* %34, align 1
  %35 = trunc i64 %20 to i16
  %36 = getelementptr inbounds i8, i8* %2, i64 8
  %37 = bitcast i8* %36 to i16*
  store i16 %35, i16* %37, align 1
  %38 = lshr i64 %20, 16
  %39 = trunc i64 %38 to i16
  %40 = getelementptr inbounds i8, i8* %2, i64 10
  %41 = bitcast i8* %40 to i16*
  store i16 %39, i16* %41, align 1
  %42 = lshr i64 %20, 32
  %43 = trunc i64 %42 to i16
  %44 = getelementptr inbounds i8, i8* %2, i64 12
  %45 = bitcast i8* %44 to i16*
  store i16 %43, i16* %45, align 1
  %46 = lshr i64 %20, 48
  %47 = trunc i64 %46 to i16
  %48 = getelementptr inbounds i8, i8* %2, i64 14
  %49 = bitcast i8* %48 to i16*
  store i16 %47, i16* %49, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L6PINSRWI3VnWI8vec128_tE2VnIS2_E2RnIjEEEP6MemoryS9_R5StateT_T0_T1_2InIhE(%struct.Memory* readnone returned, %struct.State* nocapture readnone dereferenceable(3376), i8* nocapture, i8* nocapture readonly, i64, i64)  {
  %7 = alloca <2 x i64>, align 16
  %8 = bitcast <2 x i64>* %7 to { i64, i64 }*
  %9 = bitcast i8* %3 to <2 x i64>*
  %10 = load <2 x i64>, <2 x i64>* %9, align 1
  %11 = trunc i64 %4 to i16
  %12 = and i64 %5, 7
  %13 = bitcast <2 x i64>* %7 to i8*
  call void @llvm.lifetime.start(i64 16, i8* nonnull %13)
  %14 = getelementptr inbounds <2 x i64>, <2 x i64>* %7, i64 0, i64 0
  %15 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %8, i64 0, i32 1
  store <2 x i64> %10, <2 x i64>* %7, align 16
  %16 = bitcast <2 x i64>* %7 to [8 x i16]*
  %17 = getelementptr inbounds [8 x i16], [8 x i16]* %16, i64 0, i64 %12
  store i16 %11, i16* %17, align 2
  %18 = load i64, i64* %14, align 16
  %19 = load i64, i64* %15, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %13)
  %20 = trunc i64 %18 to i16
  %21 = lshr i64 %18, 16
  %22 = trunc i64 %21 to i16
  %23 = lshr i64 %18, 32
  %24 = trunc i64 %23 to i16
  %25 = lshr i64 %18, 48
  %26 = trunc i64 %25 to i16
  %27 = bitcast i8* %2 to i16*
  store i16 %20, i16* %27, align 1
  %28 = getelementptr inbounds i8, i8* %2, i64 2
  %29 = bitcast i8* %28 to i16*
  store i16 %22, i16* %29, align 1
  %30 = getelementptr inbounds i8, i8* %2, i64 4
  %31 = bitcast i8* %30 to i16*
  store i16 %24, i16* %31, align 1
  %32 = getelementptr inbounds i8, i8* %2, i64 6
  %33 = bitcast i8* %32 to i16*
  store i16 %26, i16* %33, align 1
  %34 = trunc i64 %19 to i16
  %35 = getelementptr inbounds i8, i8* %2, i64 8
  %36 = bitcast i8* %35 to i16*
  store i16 %34, i16* %36, align 1
  %37 = lshr i64 %19, 16
  %38 = trunc i64 %37 to i16
  %39 = getelementptr inbounds i8, i8* %2, i64 10
  %40 = bitcast i8* %39 to i16*
  store i16 %38, i16* %40, align 1
  %41 = lshr i64 %19, 32
  %42 = trunc i64 %41 to i16
  %43 = getelementptr inbounds i8, i8* %2, i64 12
  %44 = bitcast i8* %43 to i16*
  store i16 %42, i16* %44, align 1
  %45 = lshr i64 %19, 48
  %46 = trunc i64 %45 to i16
  %47 = getelementptr inbounds i8, i8* %2, i64 14
  %48 = bitcast i8* %47 to i16*
  store i16 %46, i16* %48, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind readnone
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L18DoMOVNTQ_MEMq_MMXqEP6MemoryR5State4MVnWI7vec64_tE3RVnIS5_E(%struct.Memory* readnone, %struct.State* nocapture readnone dereferenceable(3376), i64, i64)  {
  %5 = inttoptr i64 %2 to i64*
  store i64 %3, i64* %5
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind readonly
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L20DoMASKMOVQ_MMXq_MMXqEP6MemoryR5State3RVnI7vec64_tES6_(%struct.Memory*, %struct.State* nocapture readonly dereferenceable(3376), i64, i64)  {
  %5 = alloca i64, align 8
  %6 = alloca i64, align 8
  %7 = bitcast i64* %6 to %struct.uint8v8_t*
  %8 = alloca i64, align 8
  %9 = bitcast i64* %8 to %struct.uint8v8_t*
  %10 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 11, i32 0, i32 0
  %11 = load i64, i64* %10, align 8
  %12 = inttoptr i64 %11 to i8*
  %13 = load i8, i8* %12
  %14 = add i64 %11, 1
  %15 = inttoptr i64 %14 to i8*
  %16 = load i8, i8* %15
  %17 = add i64 %11, 2
  %18 = inttoptr i64 %17 to i8*
  %19 = load i8, i8* %18
  %20 = add i64 %11, 3
  %21 = inttoptr i64 %20 to i8*
  %22 = load i8, i8* %21
  %23 = add i64 %11, 4
  %24 = inttoptr i64 %23 to i8*
  %25 = load i8, i8* %24
  %26 = add i64 %11, 5
  %27 = inttoptr i64 %26 to i8*
  %28 = load i8, i8* %27
  %29 = add i64 %11, 6
  %30 = inttoptr i64 %29 to i8*
  %31 = load i8, i8* %30
  %32 = add i64 %11, 7
  %33 = inttoptr i64 %32 to i8*
  %34 = load i8, i8* %33
  %35 = zext i8 %34 to i64
  %36 = shl nuw i64 %35, 56
  %37 = zext i8 %31 to i64
  %38 = shl nuw nsw i64 %37, 48
  %39 = zext i8 %28 to i64
  %40 = shl nuw nsw i64 %39, 40
  %41 = zext i8 %25 to i64
  %42 = shl nuw nsw i64 %41, 32
  %43 = zext i8 %22 to i64
  %44 = shl nuw nsw i64 %43, 24
  %45 = zext i8 %19 to i64
  %46 = shl nuw nsw i64 %45, 16
  %47 = zext i8 %16 to i64
  %48 = shl nuw nsw i64 %47, 8
  %49 = zext i8 %13 to i64
  %50 = or i64 %48, %49
  %51 = or i64 %50, %46
  %52 = or i64 %51, %44
  %53 = or i64 %52, %42
  %54 = or i64 %53, %40
  %55 = or i64 %54, %38
  %56 = or i64 %55, %36
  %57 = bitcast i64* %6 to i8*
  call void @llvm.lifetime.start(i64 8, i8* nonnull %57) 
  store i64 %2, i64* %6, align 8
  %58 = bitcast i64* %8 to i8*
  call void @llvm.lifetime.start(i64 8, i8* nonnull %58) 
  store i64 %3, i64* %8, align 8
  %59 = bitcast i64* %5 to i8*
  %60 = bitcast i64* %5 to [8 x i8]*
  %61 = trunc i64 %2 to i8
  %62 = trunc i64 %3 to i8
  %63 = icmp slt i8 %62, 0
  %64 = select i1 %63, i8 %61, i8 %13
  call void @llvm.lifetime.start(i64 8, i8* nonnull %59)
  store i64 %56, i64* %5, align 8
  %65 = bitcast i64* %5 to i8*
  store i8 %64, i8* %65, align 8
  %66 = load i64, i64* %5, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %59)
  %67 = lshr i64 %3, 8
  %68 = trunc i64 %67 to i8
  %69 = icmp slt i8 %68, 0
  %70 = select i1 %69, i64 %2, i64 %66
  %71 = lshr i64 %70, 8
  %72 = trunc i64 %71 to i8
  call void @llvm.lifetime.start(i64 8, i8* nonnull %59)
  store i64 %66, i64* %5, align 8
  %73 = getelementptr inbounds [8 x i8], [8 x i8]* %60, i64 0, i64 1
  store i8 %72, i8* %73, align 1
  %74 = load i64, i64* %5, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %59)
  %75 = lshr i64 %3, 16
  %76 = trunc i64 %75 to i8
  %77 = icmp slt i8 %76, 0
  %78 = select i1 %77, i64 %2, i64 %74
  %79 = lshr i64 %78, 16
  %80 = trunc i64 %79 to i8
  call void @llvm.lifetime.start(i64 8, i8* nonnull %59)
  store i64 %74, i64* %5, align 8
  %81 = getelementptr inbounds [8 x i8], [8 x i8]* %60, i64 0, i64 2
  store i8 %80, i8* %81, align 2
  %82 = load i64, i64* %5, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %59)
  %83 = lshr i64 %3, 24
  %84 = trunc i64 %83 to i8
  %85 = icmp slt i8 %84, 0
  %86 = select i1 %85, i64 %2, i64 %82
  %87 = lshr i64 %86, 24
  %88 = trunc i64 %87 to i8
  call void @llvm.lifetime.start(i64 8, i8* nonnull %59)
  store i64 %82, i64* %5, align 8
  %89 = getelementptr inbounds [8 x i8], [8 x i8]* %60, i64 0, i64 3
  store i8 %88, i8* %89, align 1
  %90 = load i64, i64* %5, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %59)
  %91 = lshr i64 %3, 32
  %92 = trunc i64 %91 to i8
  %93 = icmp slt i8 %92, 0
  %94 = select i1 %93, i64 %2, i64 %90
  %95 = lshr i64 %94, 32
  %96 = trunc i64 %95 to i8
  call void @llvm.lifetime.start(i64 8, i8* nonnull %59)
  store i64 %90, i64* %5, align 8
  %97 = getelementptr inbounds [8 x i8], [8 x i8]* %60, i64 0, i64 4
  store i8 %96, i8* %97, align 4
  %98 = load i64, i64* %5, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %59)
  %99 = lshr i64 %3, 40
  %100 = trunc i64 %99 to i8
  %101 = icmp slt i8 %100, 0
  %102 = select i1 %101, i64 %2, i64 %98
  %103 = lshr i64 %102, 40
  %104 = trunc i64 %103 to i8
  call void @llvm.lifetime.start(i64 8, i8* nonnull %59)
  store i64 %98, i64* %5, align 8
  %105 = getelementptr inbounds [8 x i8], [8 x i8]* %60, i64 0, i64 5
  store i8 %104, i8* %105, align 1
  %106 = load i64, i64* %5, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %59)
  %107 = getelementptr inbounds %struct.uint8v8_t, %struct.uint8v8_t* %7, i64 0, i32 0, i64 6
  %108 = load i8, i8* %107, align 2
  %109 = getelementptr inbounds %struct.uint8v8_t, %struct.uint8v8_t* %9, i64 0, i32 0, i64 6
  %110 = load i8, i8* %109, align 2
  %111 = lshr i64 %106, 48
  %112 = trunc i64 %111 to i8
  %113 = icmp slt i8 %110, 0
  %114 = select i1 %113, i8 %108, i8 %112
  call void @llvm.lifetime.start(i64 8, i8* nonnull %59)
  store i64 %106, i64* %5, align 8
  %115 = getelementptr inbounds [8 x i8], [8 x i8]* %60, i64 0, i64 6
  store i8 %114, i8* %115, align 2
  %116 = load i64, i64* %5, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %59)
  %117 = getelementptr inbounds %struct.uint8v8_t, %struct.uint8v8_t* %7, i64 0, i32 0, i64 7
  %118 = load i8, i8* %117, align 1
  %119 = getelementptr inbounds %struct.uint8v8_t, %struct.uint8v8_t* %9, i64 0, i32 0, i64 7
  %120 = load i8, i8* %119, align 1
  %121 = lshr i64 %116, 56
  %122 = trunc i64 %121 to i8
  %123 = icmp slt i8 %120, 0
  %124 = select i1 %123, i8 %118, i8 %122
  call void @llvm.lifetime.start(i64 8, i8* nonnull %59)
  store i64 %116, i64* %5, align 8
  %125 = getelementptr inbounds [8 x i8], [8 x i8]* %60, i64 0, i64 7
  store i8 %124, i8* %125, align 1
  %126 = load i64, i64* %5, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %59)
  %127 = trunc i64 %126 to i8
  %128 = inttoptr i64 %11 to i8*
  store i8 %127, i8* %128
  %129 = lshr i64 %126, 8
  %130 = trunc i64 %129 to i8
  %131 = inttoptr i64 %14 to i8*
  store i8 %130, i8* %131
  %132 = lshr i64 %126, 16
  %133 = trunc i64 %132 to i8
  %134 = inttoptr i64 %17 to i8*
  store i8 %133, i8* %134
  %135 = lshr i64 %126, 24
  %136 = trunc i64 %135 to i8
  %137 = inttoptr i64 %20 to i8*
  store i8 %136, i8* %137
  %138 = lshr i64 %126, 32
  %139 = trunc i64 %138 to i8
  %140 = inttoptr i64 %23 to i8*
  store i8 %139, i8* %140
  %141 = lshr i64 %126, 40
  %142 = trunc i64 %141 to i8
  %143 = inttoptr i64 %26 to i8*
  store i8 %142, i8* %143
  %144 = lshr i64 %126, 48
  %145 = trunc i64 %144 to i8
  %146 = inttoptr i64 %29 to i8*
  store i8 %145, i8* %146
  %147 = lshr i64 %126, 56
  %148 = trunc i64 %147 to i8
  %149 = inttoptr i64 %32 to i8*
  store i8 %148, i8* %149
  call void @llvm.lifetime.end(i64 8, i8* nonnull %58) 
  call void @llvm.lifetime.end(i64 8, i8* nonnull %57) 
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L6DoEMMSEP6MemoryR5State(%struct.Memory* readnone returned, %struct.State* nocapture dereferenceable(3376))  {
  %3 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 8, i32 0, i64 0, i32 1, i32 0, i32 0, i64 0
  store i64 0, i64* %3, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 8, i32 0, i64 1, i32 1, i32 0, i32 0, i64 0
  store i64 0, i64* %4, align 8
  %5 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 8, i32 0, i64 2, i32 1, i32 0, i32 0, i64 0
  store i64 0, i64* %5, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 8, i32 0, i64 3, i32 1, i32 0, i32 0, i64 0
  store i64 0, i64* %6, align 8
  %7 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 8, i32 0, i64 4, i32 1, i32 0, i32 0, i64 0
  store i64 0, i64* %7, align 8
  %8 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 8, i32 0, i64 5, i32 1, i32 0, i32 0, i64 0
  store i64 0, i64* %8, align 8
  %9 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 8, i32 0, i64 6, i32 1, i32 0, i32 0, i64 0
  store i64 0, i64* %9, align 8
  %10 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 8, i32 0, i64 7, i32 1, i32 0, i32 0, i64 0
  store i64 0, i64* %10, align 8
  %11 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 0, i32 1
  store double 0.000000e+00, double* %11, align 8
  %12 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 1, i32 1
  store double 0.000000e+00, double* %12, align 8
  %13 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 2, i32 1
  store double 0.000000e+00, double* %13, align 8
  %14 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 3, i32 1
  store double 0.000000e+00, double* %14, align 8
  %15 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 4, i32 1
  store double 0.000000e+00, double* %15, align 8
  %16 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 5, i32 1
  store double 0.000000e+00, double* %16, align 8
  %17 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 6, i32 1
  store double 0.000000e+00, double* %17, align 8
  %18 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 7, i32 1
  store double 0.000000e+00, double* %18, align 8
  ret %struct.Memory* %0
}

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare i64 @__remill_undefined_64() 

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare double @__remill_undefined_f64() 

; Function Attrs: alwaysinline norecurse nounwind readnone
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L8NOP_IMPLIJ2RnIhEEEEP6MemoryS4_R5StateDpT_(%struct.Memory* readnone returned, %struct.State* nocapture readnone dereferenceable(3376), i64)  {
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline norecurse nounwind readnone
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L8NOP_IMPLIJ2RnItEEEEP6MemoryS4_R5StateDpT_(%struct.Memory* readnone returned, %struct.State* nocapture readnone dereferenceable(3376), i64)  {
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline norecurse nounwind readnone
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L8NOP_IMPLIJ2RnIjEEEEP6MemoryS4_R5StateDpT_(%struct.Memory* readnone returned, %struct.State* nocapture readnone dereferenceable(3376), i64)  {
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline norecurse nounwind readnone
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L8NOP_IMPLIJ2RnImEEEEP6MemoryS4_R5StateDpT_(%struct.Memory* readnone returned, %struct.State* nocapture readnone dereferenceable(3376), i64)  {
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline norecurse nounwind readnone
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L8NOP_IMPLIJ2RnIhES2_EEEP6MemoryS4_R5StateDpT_(%struct.Memory* readnone returned, %struct.State* nocapture readnone dereferenceable(3376), i64, i64)  {
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline norecurse nounwind readnone
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L8NOP_IMPLIJ2RnItES2_EEEP6MemoryS4_R5StateDpT_(%struct.Memory* readnone returned, %struct.State* nocapture readnone dereferenceable(3376), i64, i64)  {
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline norecurse nounwind readnone
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L8NOP_IMPLIJ2RnIjES2_EEEP6MemoryS4_R5StateDpT_(%struct.Memory* readnone returned, %struct.State* nocapture readnone dereferenceable(3376), i64, i64)  {
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline norecurse nounwind readnone
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L8NOP_IMPLIJ2RnImES2_EEEP6MemoryS4_R5StateDpT_(%struct.Memory* readnone returned, %struct.State* nocapture readnone dereferenceable(3376), i64, i64)  {
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline norecurse nounwind readnone
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L8NOP_IMPLIJ2MnIhEEEEP6MemoryS4_R5StateDpT_(%struct.Memory* readnone returned, %struct.State* nocapture readnone dereferenceable(3376), i64)  {
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline norecurse nounwind readnone
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L8NOP_IMPLIJ2MnItEEEEP6MemoryS4_R5StateDpT_(%struct.Memory* readnone returned, %struct.State* nocapture readnone dereferenceable(3376), i64)  {
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline norecurse nounwind readnone
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L8NOP_IMPLIJ2MnIjEEEEP6MemoryS4_R5StateDpT_(%struct.Memory* readnone returned, %struct.State* nocapture readnone dereferenceable(3376), i64)  {
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline norecurse nounwind readnone
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L8NOP_IMPLIJ2MnImEEEEP6MemoryS4_R5StateDpT_(%struct.Memory* readnone returned, %struct.State* nocapture readnone dereferenceable(3376), i64)  {
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline norecurse nounwind readnone
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L8NOP_IMPLIJ2MnIhE2RnIhEEEEP6MemoryS6_R5StateDpT_(%struct.Memory* readnone returned, %struct.State* nocapture readnone dereferenceable(3376), i64, i64)  {
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline norecurse nounwind readnone
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L8NOP_IMPLIJ2MnItE2RnItEEEEP6MemoryS6_R5StateDpT_(%struct.Memory* readnone returned, %struct.State* nocapture readnone dereferenceable(3376), i64, i64)  {
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline norecurse nounwind readnone
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L8NOP_IMPLIJ2MnIjE2RnIjEEEEP6MemoryS6_R5StateDpT_(%struct.Memory* readnone returned, %struct.State* nocapture readnone dereferenceable(3376), i64, i64)  {
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline norecurse nounwind readnone
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L8NOP_IMPLIJ2MnImE2RnImEEEEP6MemoryS6_R5StateDpT_(%struct.Memory* readnone returned, %struct.State* nocapture readnone dereferenceable(3376), i64, i64)  {
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline norecurse nounwind readnone
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L8NOP_IMPLIJEEEP6MemoryS2_R5StateDpT_(%struct.Memory* readnone returned, %struct.State* nocapture readnone dereferenceable(3376))  {
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline norecurse nounwind readnone
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L8NOP_IMPLIJ2RnIhE2MnIhEEEEP6MemoryS6_R5StateDpT_(%struct.Memory* readnone returned, %struct.State* nocapture readnone dereferenceable(3376), i64, i64)  {
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline norecurse nounwind readnone
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L8NOP_IMPLIJ2RnItE2MnItEEEEP6MemoryS6_R5StateDpT_(%struct.Memory* readnone returned, %struct.State* nocapture readnone dereferenceable(3376), i64, i64)  {
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline norecurse nounwind readnone
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L8NOP_IMPLIJ2RnIjE2MnIjEEEEP6MemoryS6_R5StateDpT_(%struct.Memory* readnone returned, %struct.State* nocapture readnone dereferenceable(3376), i64, i64)  {
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline norecurse nounwind readnone
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L8NOP_IMPLIJ2RnImE2MnImEEEEP6MemoryS6_R5StateDpT_(%struct.Memory* readnone returned, %struct.State* nocapture readnone dereferenceable(3376), i64, i64)  {
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3POPI3RnWItEEEP6MemoryS4_R5StateT_(%struct.Memory*, %struct.State* nocapture dereferenceable(3376), i16* nocapture)  {
  %4 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 13, i32 0, i32 0
  %5 = load i64, i64* %4, align 8
  %6 = add i64 %5, 2
  %7 = inttoptr i64 %5 to i16*
  %8 = load i16, i16* %7
  store i16 %8, i16* %2, align 2
  store i64 %6, i64* %4, align 8
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3POPI3RnWImEEEP6MemoryS4_R5StateT_(%struct.Memory*, %struct.State* nocapture dereferenceable(3376), i64* nocapture)  {
  %4 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 13, i32 0, i32 0
  %5 = load i64, i64* %4, align 8
  %6 = add i64 %5, 8
  %7 = inttoptr i64 %5 to i64*
  %8 = load i64, i64* %7
  store i64 %8, i64* %2, align 8
  store i64 %6, i64* %4, align 8
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3POPI3MnWItEEEP6MemoryS4_R5StateT_(%struct.Memory*, %struct.State* nocapture dereferenceable(3376), i64)  {
  %4 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 13, i32 0, i32 0
  %5 = load i64, i64* %4, align 8
  %6 = add i64 %5, 2
  %7 = inttoptr i64 %5 to i16*
  %8 = load i16, i16* %7
  %9 = inttoptr i64 %2 to i16*
  store i16 %8, i16* %9
  store i64 %6, i64* %4, align 8
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3POPI3MnWImEEEP6MemoryS4_R5StateT_(%struct.Memory*, %struct.State* nocapture dereferenceable(3376), i64)  {
  %4 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 13, i32 0, i32 0
  %5 = load i64, i64* %4, align 8
  %6 = add i64 %5, 8
  %7 = inttoptr i64 %5 to i64*
  %8 = load i64, i64* %7
  %9 = inttoptr i64 %2 to i64*
  store i64 %8, i64* %9
  store i64 %6, i64* %4, align 8
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L6DoPOPFEP6MemoryR5State(%struct.Memory*, %struct.State* nocapture dereferenceable(3376))  {
  %3 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 13, i32 0, i32 0
  %4 = load i64, i64* %3, align 8
  %5 = add i64 %4, 2
  %6 = inttoptr i64 %4 to i16*
  %7 = load i16, i16* %6
  store i64 %5, i64* %3, align 8
  %8 = lshr i16 %7, 4
  %9 = trunc i16 %8 to i8
  %10 = and i8 %9, 1
  %11 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 %10, i8* %11, align 1
  %12 = trunc i16 %7 to i8
  %13 = and i8 %12, 1
  %14 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  store i8 %13, i8* %14, align 1
  %15 = lshr i16 %7, 10
  %16 = trunc i16 %15 to i8
  %17 = and i8 %16, 1
  %18 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 11
  store i8 %17, i8* %18, align 1
  %19 = lshr i16 %7, 11
  %20 = trunc i16 %19 to i8
  %21 = and i8 %20, 1
  %22 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 %21, i8* %22, align 1
  %23 = lshr i16 %7, 2
  %24 = trunc i16 %23 to i8
  %25 = and i8 %24, 1
  %26 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 %25, i8* %26, align 1
  %27 = lshr i16 %7, 7
  %28 = trunc i16 %27 to i8
  %29 = and i8 %28, 1
  %30 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 %29, i8* %30, align 1
  %31 = lshr i16 %7, 6
  %32 = trunc i16 %31 to i8
  %33 = and i8 %32, 1
  %34 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  store i8 %33, i8* %34, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L7DoPOPFQEP6MemoryR5State(%struct.Memory*, %struct.State* nocapture dereferenceable(3376))  {
  %3 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 13, i32 0, i32 0
  %4 = load i64, i64* %3, align 8
  %5 = add i64 %4, 8
  %6 = inttoptr i64 %4 to i64*
  %7 = load i64, i64* %6
  store i64 %5, i64* %3, align 8
  %8 = trunc i64 %7 to i32
  %9 = lshr i32 %8, 4
  %10 = trunc i32 %9 to i8
  %11 = and i8 %10, 1
  %12 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 %11, i8* %12, align 1
  %13 = trunc i64 %7 to i8
  %14 = and i8 %13, 1
  %15 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  store i8 %14, i8* %15, align 1
  %16 = lshr i32 %8, 10
  %17 = trunc i32 %16 to i8
  %18 = and i8 %17, 1
  %19 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 11
  store i8 %18, i8* %19, align 1
  %20 = lshr i32 %8, 11
  %21 = trunc i32 %20 to i8
  %22 = and i8 %21, 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 %22, i8* %23, align 1
  %24 = lshr i32 %8, 2
  %25 = trunc i32 %24 to i8
  %26 = and i8 %25, 1
  %27 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 %26, i8* %27, align 1
  %28 = lshr i32 %8, 7
  %29 = trunc i32 %28 to i8
  %30 = and i8 %29, 1
  %31 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 %30, i8* %31, align 1
  %32 = lshr i32 %8, 6
  %33 = trunc i32 %32 to i8
  %34 = and i8 %33, 1
  %35 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  store i8 %34, i8* %35, align 1
  %36 = and i32 %8, 2097152
  %37 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 3
  %38 = bitcast %union.anon* %37 to i32*
  %39 = load i32, i32* %38, align 16
  %40 = and i32 %39, -2097153
  %41 = or i32 %40, %36
  store i32 %41, i32* %38, align 16
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L6POP_ESItEEP6MemoryS2_R5State3RnWItE(%struct.Memory*, %struct.State* dereferenceable(3376), i16* nocapture)  {
  %4 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 13, i32 0, i32 0
  %5 = load i64, i64* %4, align 8
  %6 = inttoptr i64 %5 to i16*
  %7 = load i16, i16* %6
  store i16 %7, i16* %2, align 2
  %8 = add i64 %5, 2
  store i64 %8, i64* %4, align 8
  %9 = tail call %struct.Memory* @__remill_sync_hyper_call(%struct.State* nonnull dereferenceable(3376) %1, %struct.Memory* %0, i32 266) 
  ret %struct.Memory* %9
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L6POP_ESImEEP6MemoryS2_R5State3RnWItE(%struct.Memory*, %struct.State* dereferenceable(3376), i16* nocapture)  {
  %4 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 13, i32 0, i32 0
  %5 = load i64, i64* %4, align 8
  %6 = inttoptr i64 %5 to i64*
  %7 = load i64, i64* %6
  %8 = trunc i64 %7 to i16
  store i16 %8, i16* %2, align 2
  %9 = add i64 %5, 8
  store i64 %9, i64* %4, align 8
  %10 = tail call %struct.Memory* @__remill_sync_hyper_call(%struct.State* nonnull dereferenceable(3376) %1, %struct.Memory* %0, i32 266) 
  ret %struct.Memory* %10
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L6POP_SSItEEP6MemoryS2_R5State3RnWItE(%struct.Memory*, %struct.State* dereferenceable(3376), i16* nocapture)  {
  %4 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 13, i32 0, i32 0
  %5 = load i64, i64* %4, align 8
  %6 = inttoptr i64 %5 to i16*
  %7 = load i16, i16* %6
  store i16 %7, i16* %2, align 2
  %8 = add i64 %5, 2
  store i64 %8, i64* %4, align 8
  %9 = tail call %struct.Memory* @__remill_sync_hyper_call(%struct.State* nonnull dereferenceable(3376) %1, %struct.Memory* %0, i32 267) 
  ret %struct.Memory* %9
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L6POP_SSImEEP6MemoryS2_R5State3RnWItE(%struct.Memory*, %struct.State* dereferenceable(3376), i16* nocapture)  {
  %4 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 13, i32 0, i32 0
  %5 = load i64, i64* %4, align 8
  %6 = inttoptr i64 %5 to i64*
  %7 = load i64, i64* %6
  %8 = trunc i64 %7 to i16
  store i16 %8, i16* %2, align 2
  %9 = add i64 %5, 8
  store i64 %9, i64* %4, align 8
  %10 = tail call %struct.Memory* @__remill_sync_hyper_call(%struct.State* nonnull dereferenceable(3376) %1, %struct.Memory* %0, i32 267) 
  ret %struct.Memory* %10
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L6POP_DSItEEP6MemoryS2_R5State3RnWItE(%struct.Memory*, %struct.State* dereferenceable(3376), i16* nocapture)  {
  %4 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 13, i32 0, i32 0
  %5 = load i64, i64* %4, align 8
  %6 = inttoptr i64 %5 to i16*
  %7 = load i16, i16* %6
  store i16 %7, i16* %2, align 2
  %8 = add i64 %5, 2
  store i64 %8, i64* %4, align 8
  %9 = tail call %struct.Memory* @__remill_sync_hyper_call(%struct.State* nonnull dereferenceable(3376) %1, %struct.Memory* %0, i32 268) 
  ret %struct.Memory* %9
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L6POP_DSImEEP6MemoryS2_R5State3RnWItE(%struct.Memory*, %struct.State* dereferenceable(3376), i16* nocapture)  {
  %4 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 13, i32 0, i32 0
  %5 = load i64, i64* %4, align 8
  %6 = inttoptr i64 %5 to i64*
  %7 = load i64, i64* %6
  %8 = trunc i64 %7 to i16
  store i16 %8, i16* %2, align 2
  %9 = add i64 %5, 8
  store i64 %9, i64* %4, align 8
  %10 = tail call %struct.Memory* @__remill_sync_hyper_call(%struct.State* nonnull dereferenceable(3376) %1, %struct.Memory* %0, i32 268) 
  ret %struct.Memory* %10
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L6POP_FSItEEP6MemoryS2_R5State3RnWItE(%struct.Memory*, %struct.State* dereferenceable(3376), i16* nocapture)  {
  %4 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 13, i32 0, i32 0
  %5 = load i64, i64* %4, align 8
  %6 = inttoptr i64 %5 to i16*
  %7 = load i16, i16* %6
  store i16 %7, i16* %2, align 2
  %8 = add i64 %5, 2
  store i64 %8, i64* %4, align 8
  %9 = tail call %struct.Memory* @__remill_sync_hyper_call(%struct.State* nonnull dereferenceable(3376) %1, %struct.Memory* %0, i32 269) 
  ret %struct.Memory* %9
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L6POP_FSImEEP6MemoryS2_R5State3RnWItE(%struct.Memory*, %struct.State* dereferenceable(3376), i16* nocapture)  {
  %4 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 13, i32 0, i32 0
  %5 = load i64, i64* %4, align 8
  %6 = inttoptr i64 %5 to i64*
  %7 = load i64, i64* %6
  %8 = trunc i64 %7 to i16
  store i16 %8, i16* %2, align 2
  %9 = add i64 %5, 8
  store i64 %9, i64* %4, align 8
  %10 = tail call %struct.Memory* @__remill_sync_hyper_call(%struct.State* nonnull dereferenceable(3376) %1, %struct.Memory* %0, i32 269) 
  ret %struct.Memory* %10
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L6POP_GSItEEP6MemoryS2_R5State3RnWItE(%struct.Memory*, %struct.State* dereferenceable(3376), i16* nocapture)  {
  %4 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 13, i32 0, i32 0
  %5 = load i64, i64* %4, align 8
  %6 = inttoptr i64 %5 to i16*
  %7 = load i16, i16* %6
  store i16 %7, i16* %2, align 2
  %8 = add i64 %5, 2
  store i64 %8, i64* %4, align 8
  %9 = tail call %struct.Memory* @__remill_sync_hyper_call(%struct.State* nonnull dereferenceable(3376) %1, %struct.Memory* %0, i32 270) 
  ret %struct.Memory* %9
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L6POP_GSImEEP6MemoryS2_R5State3RnWItE(%struct.Memory*, %struct.State* dereferenceable(3376), i16* nocapture)  {
  %4 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 13, i32 0, i32 0
  %5 = load i64, i64* %4, align 8
  %6 = inttoptr i64 %5 to i64*
  %7 = load i64, i64* %6
  %8 = trunc i64 %7 to i16
  store i16 %8, i16* %2, align 2
  %9 = add i64 %5, 8
  store i64 %9, i64* %4, align 8
  %10 = tail call %struct.Memory* @__remill_sync_hyper_call(%struct.State* nonnull dereferenceable(3376) %1, %struct.Memory* %0, i32 270) 
  ret %struct.Memory* %10
}

; Function Attrs: alwaysinline norecurse nounwind readnone
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L8PREFETCHIJEEEP6MemoryS2_R5StateDpT_(%struct.Memory* readnone returned, %struct.State* nocapture readnone dereferenceable(3376))  {
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline norecurse nounwind readnone
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L8PREFETCHIJ2MnIhEEEEP6MemoryS4_R5StateDpT_(%struct.Memory* readnone returned, %struct.State* nocapture readnone dereferenceable(3376), i64)  {
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L4PUSHI2RnItEEEP6MemoryS4_R5StateT_(%struct.Memory*, %struct.State* nocapture dereferenceable(3376), i64)  {
  %4 = trunc i64 %2 to i16
  %5 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 13, i32 0, i32 0
  %6 = load i64, i64* %5, align 8
  %7 = add i64 %6, -2
  %8 = inttoptr i64 %7 to i16*
  store i16 %4, i16* %8
  store i64 %7, i64* %5, align 8
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L4PUSHI2InImEEEP6MemoryS4_R5StateT_(%struct.Memory*, %struct.State* nocapture dereferenceable(3376), i64)  {
  %4 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 13, i32 0, i32 0
  %5 = load i64, i64* %4, align 8
  %6 = add i64 %5, -8
  %7 = inttoptr i64 %6 to i64*
  store i64 %2, i64* %7
  store i64 %6, i64* %4, align 8
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L4PUSHI2InItEEEP6MemoryS4_R5StateT_(%struct.Memory*, %struct.State* nocapture dereferenceable(3376), i64)  {
  %4 = trunc i64 %2 to i16
  %5 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 13, i32 0, i32 0
  %6 = load i64, i64* %5, align 8
  %7 = add i64 %6, -2
  %8 = inttoptr i64 %7 to i16*
  store i16 %4, i16* %8
  store i64 %7, i64* %5, align 8
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L4PUSHI2MnItEEEP6MemoryS4_R5StateT_(%struct.Memory*, %struct.State* nocapture dereferenceable(3376), i64)  {
  %4 = inttoptr i64 %2 to i16*
  %5 = load i16, i16* %4
  %6 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 13, i32 0, i32 0
  %7 = load i64, i64* %6, align 8
  %8 = add i64 %7, -2
  %9 = inttoptr i64 %8 to i16*
  store i16 %5, i16* %9
  store i64 %8, i64* %6, align 8
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L4PUSHI2MnImEEEP6MemoryS4_R5StateT_(%struct.Memory*, %struct.State* nocapture dereferenceable(3376), i64)  {
  %4 = inttoptr i64 %2 to i64*
  %5 = load i64, i64* %4
  %6 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 13, i32 0, i32 0
  %7 = load i64, i64* %6, align 8
  %8 = add i64 %7, -8
  %9 = inttoptr i64 %8 to i64*
  store i64 %5, i64* %9
  store i64 %8, i64* %6, align 8
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L7DoPUSHFEP6MemoryR5State(%struct.Memory*, %struct.State* nocapture dereferenceable(3376))  {
  %3 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  %4 = load i8, i8* %3, align 1
  %5 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 3
  %6 = bitcast %union.anon* %5 to i32*
  %7 = load i32, i32* %6, align 16
  %8 = and i32 %7, -3286
  %9 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  %10 = load i8, i8* %9, align 1
  %11 = shl i8 %10, 2
  %12 = and i8 %11, 4
  %13 = zext i8 %12 to i32
  %14 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  %15 = load i8, i8* %14, align 1
  %16 = shl i8 %15, 4
  %17 = and i8 %4, 1
  %18 = zext i8 %17 to i32
  %19 = or i32 %8, %18
  %20 = or i32 %19, %13
  %21 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  %22 = load i8, i8* %21, align 1
  %23 = shl i8 %22, 6
  %24 = and i8 %16, 16
  %25 = zext i8 %24 to i32
  %26 = or i32 %20, %25
  %27 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  %28 = load i8, i8* %27, align 1
  %29 = shl i8 %28, 7
  %30 = zext i8 %29 to i32
  %31 = and i8 %23, 64
  %32 = zext i8 %31 to i32
  %33 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 11
  %34 = load i8, i8* %33, align 1
  %35 = and i8 %34, 1
  %36 = zext i8 %35 to i32
  %37 = shl nuw nsw i32 %36, 10
  %38 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  %39 = load i8, i8* %38, align 1
  %40 = and i8 %39, 1
  %41 = zext i8 %40 to i32
  %42 = shl nuw nsw i32 %41, 11
  %43 = or i32 %26, %32
  %44 = or i32 %43, %30
  %45 = or i32 %44, %37
  %46 = or i32 %45, %42
  store i32 %46, i32* %6, align 16
  %47 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 3, i32 0
  %48 = load i64, i64* %47, align 16
  %49 = trunc i64 %48 to i16
  %50 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 13, i32 0, i32 0
  %51 = load i64, i64* %50, align 8
  %52 = add i64 %51, -2
  %53 = inttoptr i64 %52 to i16*
  store i16 %49, i16* %53
  store i64 %52, i64* %50, align 8
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L8DoPUSHFQEP6MemoryR5State(%struct.Memory*, %struct.State* nocapture dereferenceable(3376))  {
  %3 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  %4 = load i8, i8* %3, align 1
  %5 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 3
  %6 = bitcast %union.anon* %5 to i32*
  %7 = load i32, i32* %6, align 16
  %8 = and i32 %7, -3286
  %9 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  %10 = load i8, i8* %9, align 1
  %11 = shl i8 %10, 2
  %12 = and i8 %11, 4
  %13 = zext i8 %12 to i32
  %14 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  %15 = load i8, i8* %14, align 1
  %16 = shl i8 %15, 4
  %17 = and i8 %4, 1
  %18 = zext i8 %17 to i32
  %19 = or i32 %8, %18
  %20 = or i32 %19, %13
  %21 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  %22 = load i8, i8* %21, align 1
  %23 = shl i8 %22, 6
  %24 = and i8 %16, 16
  %25 = zext i8 %24 to i32
  %26 = or i32 %20, %25
  %27 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  %28 = load i8, i8* %27, align 1
  %29 = shl i8 %28, 7
  %30 = zext i8 %29 to i32
  %31 = and i8 %23, 64
  %32 = zext i8 %31 to i32
  %33 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 11
  %34 = load i8, i8* %33, align 1
  %35 = and i8 %34, 1
  %36 = zext i8 %35 to i32
  %37 = shl nuw nsw i32 %36, 10
  %38 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  %39 = load i8, i8* %38, align 1
  %40 = and i8 %39, 1
  %41 = zext i8 %40 to i32
  %42 = shl nuw nsw i32 %41, 11
  %43 = or i32 %26, %32
  %44 = or i32 %43, %30
  %45 = or i32 %44, %37
  %46 = or i32 %45, %42
  store i32 %46, i32* %6, align 16
  %47 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 3, i32 0
  %48 = load i64, i64* %47, align 16
  %49 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 13, i32 0, i32 0
  %50 = load i64, i64* %49, align 8
  %51 = add i64 %50, -8
  %52 = inttoptr i64 %51 to i64*
  store i64 %48, i64* %52
  store i64 %51, i64* %49, align 8
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3ROLI3MnWIhE2MnIhE2InIhEEEP6MemoryS8_R5StateT_T0_T1_(%struct.Memory*, %struct.State* nocapture dereferenceable(3376), i64, i64, i64)  {
  %6 = inttoptr i64 %3 to i8*
  %7 = load i8, i8* %6
  %8 = trunc i64 %4 to i8
  %9 = and i8 %8, 7
  %10 = icmp eq i8 %9, 0
  br i1 %10, label %32, label %11

; <label>:11:                                     ; preds = %5
  %12 = zext i8 %7 to i64
  %13 = zext i8 %9 to i64
  %14 = shl i64 %12, %13
  %15 = sub nsw i8 8, %9
  %16 = zext i8 %15 to i64
  %17 = lshr i64 %12, %16
  %18 = or i64 %17, %14
  %19 = trunc i64 %18 to i8
  %20 = inttoptr i64 %2 to i8*
  store i8 %19, i8* %20
  %21 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  %22 = and i8 %19, 1
  store i8 %22, i8* %21, align 1
  %23 = icmp eq i8 %9, 1
  %24 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  br i1 %23, label %25, label %30

; <label>:25:                                     ; preds = %11
  %26 = icmp ne i8 %22, 0
  %27 = icmp slt i8 %19, 0
  %28 = xor i1 %27, %26
  %29 = zext i1 %28 to i8
  br label %30

; <label>:30:                                     ; preds = %25, %11
  %31 = phi i8 [ %29, %25 ], [ 0, %11 ]
  store i8 %31, i8* %24, align 1
  br label %34

; <label>:32:                                     ; preds = %5
  %33 = inttoptr i64 %2 to i8*
  store i8 %7, i8* %33
  br label %34

; <label>:34:                                     ; preds = %32, %30
  %35 = phi %struct.Memory* [ %0, %30 ], [ %0, %32 ]
  ret %struct.Memory* %35
}

; Function Attrs: alwaysinline norecurse nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3ROLI3RnWIhE2RnIhE2InIhEEEP6MemoryS8_R5StateT_T0_T1_(%struct.Memory* readnone, %struct.State* nocapture dereferenceable(3376), i8* nocapture, i64, i64)  {
  %6 = trunc i64 %4 to i8
  %7 = and i8 %6, 7
  %8 = icmp eq i8 %7, 0
  br i1 %8, label %29, label %9

; <label>:9:                                      ; preds = %5
  %10 = and i64 %3, 255
  %11 = zext i8 %7 to i64
  %12 = shl i64 %10, %11
  %13 = sub nsw i8 8, %7
  %14 = zext i8 %13 to i64
  %15 = lshr i64 %10, %14
  %16 = or i64 %15, %12
  %17 = trunc i64 %16 to i8
  store i8 %17, i8* %2, align 1
  %18 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  %19 = and i8 %17, 1
  store i8 %19, i8* %18, align 1
  %20 = icmp eq i8 %7, 1
  %21 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  br i1 %20, label %22, label %27

; <label>:22:                                     ; preds = %9
  %23 = icmp ne i8 %19, 0
  %24 = icmp slt i8 %17, 0
  %25 = xor i1 %24, %23
  %26 = zext i1 %25 to i8
  br label %27

; <label>:27:                                     ; preds = %22, %9
  %28 = phi i8 [ %26, %22 ], [ 0, %9 ]
  store i8 %28, i8* %21, align 1
  br label %31

; <label>:29:                                     ; preds = %5
  %30 = trunc i64 %3 to i8
  store i8 %30, i8* %2, align 1
  br label %31

; <label>:31:                                     ; preds = %29, %27
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3ROLI3MnWItE2MnItE2InItEEEP6MemoryS8_R5StateT_T0_T1_(%struct.Memory*, %struct.State* nocapture dereferenceable(3376), i64, i64, i64)  {
  %6 = inttoptr i64 %3 to i16*
  %7 = load i16, i16* %6
  %8 = trunc i64 %4 to i16
  %9 = and i16 %8, 15
  %10 = icmp eq i16 %9, 0
  br i1 %10, label %33, label %11

; <label>:11:                                     ; preds = %5
  %12 = zext i16 %7 to i64
  %13 = zext i16 %9 to i64
  %14 = shl i64 %12, %13
  %15 = sub nsw i16 16, %9
  %16 = zext i16 %15 to i64
  %17 = lshr i64 %12, %16
  %18 = or i64 %17, %14
  %19 = trunc i64 %18 to i16
  %20 = inttoptr i64 %2 to i16*
  store i16 %19, i16* %20
  %21 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  %22 = and i16 %19, 1
  %23 = trunc i16 %22 to i8
  store i8 %23, i8* %21, align 1
  %24 = icmp eq i16 %9, 1
  %25 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  br i1 %24, label %26, label %31

; <label>:26:                                     ; preds = %11
  %27 = icmp ne i16 %22, 0
  %28 = icmp slt i16 %19, 0
  %29 = xor i1 %28, %27
  %30 = zext i1 %29 to i8
  br label %31

; <label>:31:                                     ; preds = %26, %11
  %32 = phi i8 [ %30, %26 ], [ 0, %11 ]
  store i8 %32, i8* %25, align 1
  br label %35

; <label>:33:                                     ; preds = %5
  %34 = inttoptr i64 %2 to i16*
  store i16 %7, i16* %34
  br label %35

; <label>:35:                                     ; preds = %33, %31
  %36 = phi %struct.Memory* [ %0, %31 ], [ %0, %33 ]
  ret %struct.Memory* %36
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3ROLI3MnWIjE2MnIjE2InIjEEEP6MemoryS8_R5StateT_T0_T1_(%struct.Memory*, %struct.State* nocapture dereferenceable(3376), i64, i64, i64)  {
  %6 = inttoptr i64 %3 to i32*
  %7 = load i32, i32* %6
  %8 = trunc i64 %4 to i32
  %9 = and i32 %8, 31
  %10 = icmp eq i32 %9, 0
  br i1 %10, label %33, label %11

; <label>:11:                                     ; preds = %5
  %12 = zext i32 %7 to i64
  %13 = zext i32 %9 to i64
  %14 = shl i64 %12, %13
  %15 = sub nsw i32 32, %9
  %16 = zext i32 %15 to i64
  %17 = lshr i64 %12, %16
  %18 = or i64 %17, %14
  %19 = trunc i64 %18 to i32
  %20 = inttoptr i64 %2 to i32*
  store i32 %19, i32* %20
  %21 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  %22 = and i32 %19, 1
  %23 = trunc i32 %22 to i8
  store i8 %23, i8* %21, align 1
  %24 = icmp eq i32 %9, 1
  %25 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  br i1 %24, label %26, label %31

; <label>:26:                                     ; preds = %11
  %27 = icmp ne i32 %22, 0
  %28 = icmp slt i32 %19, 0
  %29 = xor i1 %28, %27
  %30 = zext i1 %29 to i8
  br label %31

; <label>:31:                                     ; preds = %26, %11
  %32 = phi i8 [ %30, %26 ], [ 0, %11 ]
  store i8 %32, i8* %25, align 1
  br label %35

; <label>:33:                                     ; preds = %5
  %34 = inttoptr i64 %2 to i32*
  store i32 %7, i32* %34
  br label %35

; <label>:35:                                     ; preds = %33, %31
  %36 = phi %struct.Memory* [ %0, %31 ], [ %0, %33 ]
  ret %struct.Memory* %36
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3ROLI3MnWImE2MnImE2InImEEEP6MemoryS8_R5StateT_T0_T1_(%struct.Memory*, %struct.State* nocapture dereferenceable(3376), i64, i64, i64)  {
  %6 = inttoptr i64 %3 to i64*
  %7 = load i64, i64* %6
  %8 = and i64 %4, 63
  %9 = icmp eq i64 %8, 0
  br i1 %9, label %28, label %10

; <label>:10:                                     ; preds = %5
  %11 = shl i64 %7, %8
  %12 = sub nsw i64 64, %8
  %13 = lshr i64 %7, %12
  %14 = or i64 %13, %11
  %15 = inttoptr i64 %2 to i64*
  store i64 %14, i64* %15
  %16 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  %17 = and i64 %14, 1
  %18 = trunc i64 %17 to i8
  store i8 %18, i8* %16, align 1
  %19 = icmp eq i64 %8, 1
  %20 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  br i1 %19, label %21, label %26

; <label>:21:                                     ; preds = %10
  %22 = icmp ne i64 %17, 0
  %23 = icmp slt i64 %14, 0
  %24 = xor i1 %23, %22
  %25 = zext i1 %24 to i8
  br label %26

; <label>:26:                                     ; preds = %21, %10
  %27 = phi i8 [ %25, %21 ], [ 0, %10 ]
  store i8 %27, i8* %20, align 1
  br label %30

; <label>:28:                                     ; preds = %5
  %29 = inttoptr i64 %2 to i64*
  store i64 %7, i64* %29
  br label %30

; <label>:30:                                     ; preds = %28, %26
  %31 = phi %struct.Memory* [ %0, %26 ], [ %0, %28 ]
  ret %struct.Memory* %31
}

; Function Attrs: alwaysinline norecurse nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3ROLI3RnWItE2RnItE2InItEEEP6MemoryS8_R5StateT_T0_T1_(%struct.Memory* readnone, %struct.State* nocapture dereferenceable(3376), i16* nocapture, i64, i64)  {
  %6 = trunc i64 %4 to i16
  %7 = and i16 %6, 15
  %8 = icmp eq i16 %7, 0
  br i1 %8, label %30, label %9

; <label>:9:                                      ; preds = %5
  %10 = and i64 %3, 65535
  %11 = zext i16 %7 to i64
  %12 = shl i64 %10, %11
  %13 = sub nsw i16 16, %7
  %14 = zext i16 %13 to i64
  %15 = lshr i64 %10, %14
  %16 = or i64 %15, %12
  %17 = trunc i64 %16 to i16
  store i16 %17, i16* %2, align 2
  %18 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  %19 = and i16 %17, 1
  %20 = trunc i16 %19 to i8
  store i8 %20, i8* %18, align 1
  %21 = icmp eq i16 %7, 1
  %22 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  br i1 %21, label %23, label %28

; <label>:23:                                     ; preds = %9
  %24 = icmp ne i16 %19, 0
  %25 = icmp slt i16 %17, 0
  %26 = xor i1 %25, %24
  %27 = zext i1 %26 to i8
  br label %28

; <label>:28:                                     ; preds = %23, %9
  %29 = phi i8 [ %27, %23 ], [ 0, %9 ]
  store i8 %29, i8* %22, align 1
  br label %32

; <label>:30:                                     ; preds = %5
  %31 = trunc i64 %3 to i16
  store i16 %31, i16* %2, align 2
  br label %32

; <label>:32:                                     ; preds = %30, %28
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline norecurse nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3ROLI3RnWImE2RnIjE2InIjEEEP6MemoryS8_R5StateT_T0_T1_(%struct.Memory* readnone, %struct.State* nocapture dereferenceable(3376), i64* nocapture, i64, i64)  {
  %6 = trunc i64 %4 to i32
  %7 = and i32 %6, 31
  %8 = icmp eq i32 %7, 0
  %9 = and i64 %3, 4294967295
  br i1 %8, label %31, label %10

; <label>:10:                                     ; preds = %5
  %11 = zext i32 %7 to i64
  %12 = shl i64 %9, %11
  %13 = sub nsw i32 32, %7
  %14 = zext i32 %13 to i64
  %15 = lshr i64 %9, %14
  %16 = or i64 %15, %12
  %17 = trunc i64 %16 to i32
  %18 = and i64 %16, 4294967295
  store i64 %18, i64* %2, align 8
  %19 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  %20 = and i32 %17, 1
  %21 = trunc i32 %20 to i8
  store i8 %21, i8* %19, align 1
  %22 = icmp eq i32 %7, 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  br i1 %22, label %24, label %29

; <label>:24:                                     ; preds = %10
  %25 = icmp ne i32 %20, 0
  %26 = icmp slt i32 %17, 0
  %27 = xor i1 %26, %25
  %28 = zext i1 %27 to i8
  br label %29

; <label>:29:                                     ; preds = %24, %10
  %30 = phi i8 [ %28, %24 ], [ 0, %10 ]
  store i8 %30, i8* %23, align 1
  br label %32

; <label>:31:                                     ; preds = %5
  store i64 %9, i64* %2, align 8
  br label %32

; <label>:32:                                     ; preds = %31, %29
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline norecurse nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3ROLI3RnWImE2RnImE2InImEEEP6MemoryS8_R5StateT_T0_T1_(%struct.Memory* readnone, %struct.State* nocapture dereferenceable(3376), i64* nocapture, i64, i64)  {
  %6 = and i64 %4, 63
  %7 = icmp eq i64 %6, 0
  br i1 %7, label %25, label %8

; <label>:8:                                      ; preds = %5
  %9 = shl i64 %3, %6
  %10 = sub nsw i64 64, %6
  %11 = lshr i64 %3, %10
  %12 = or i64 %11, %9
  store i64 %12, i64* %2, align 8
  %13 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  %14 = and i64 %12, 1
  %15 = trunc i64 %14 to i8
  store i8 %15, i8* %13, align 1
  %16 = icmp eq i64 %6, 1
  %17 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  br i1 %16, label %18, label %23

; <label>:18:                                     ; preds = %8
  %19 = icmp ne i64 %14, 0
  %20 = icmp slt i64 %12, 0
  %21 = xor i1 %20, %19
  %22 = zext i1 %21 to i8
  br label %23

; <label>:23:                                     ; preds = %18, %8
  %24 = phi i8 [ %22, %18 ], [ 0, %8 ]
  store i8 %24, i8* %17, align 1
  br label %26

; <label>:25:                                     ; preds = %5
  store i64 %3, i64* %2, align 8
  br label %26

; <label>:26:                                     ; preds = %25, %23
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3ROLI3MnWIhE2MnIhE2RnIhEEEP6MemoryS8_R5StateT_T0_T1_(%struct.Memory*, %struct.State* nocapture dereferenceable(3376), i64, i64, i64)  {
  %6 = inttoptr i64 %3 to i8*
  %7 = load i8, i8* %6
  %8 = trunc i64 %4 to i8
  %9 = and i8 %8, 7
  %10 = icmp eq i8 %9, 0
  br i1 %10, label %32, label %11

; <label>:11:                                     ; preds = %5
  %12 = zext i8 %7 to i64
  %13 = zext i8 %9 to i64
  %14 = shl i64 %12, %13
  %15 = sub nsw i8 8, %9
  %16 = zext i8 %15 to i64
  %17 = lshr i64 %12, %16
  %18 = or i64 %17, %14
  %19 = trunc i64 %18 to i8
  %20 = inttoptr i64 %2 to i8*
  store i8 %19, i8* %20
  %21 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  %22 = and i8 %19, 1
  store i8 %22, i8* %21, align 1
  %23 = icmp eq i8 %9, 1
  %24 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  br i1 %23, label %25, label %30

; <label>:25:                                     ; preds = %11
  %26 = icmp ne i8 %22, 0
  %27 = icmp slt i8 %19, 0
  %28 = xor i1 %27, %26
  %29 = zext i1 %28 to i8
  br label %30

; <label>:30:                                     ; preds = %25, %11
  %31 = phi i8 [ %29, %25 ], [ 0, %11 ]
  store i8 %31, i8* %24, align 1
  br label %34

; <label>:32:                                     ; preds = %5
  %33 = inttoptr i64 %2 to i8*
  store i8 %7, i8* %33
  br label %34

; <label>:34:                                     ; preds = %32, %30
  %35 = phi %struct.Memory* [ %0, %30 ], [ %0, %32 ]
  ret %struct.Memory* %35
}

; Function Attrs: alwaysinline norecurse nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3ROLI3RnWIhE2RnIhES4_EEP6MemoryS6_R5StateT_T0_T1_(%struct.Memory* readnone, %struct.State* nocapture dereferenceable(3376), i8* nocapture, i64, i64)  {
  %6 = trunc i64 %4 to i8
  %7 = and i8 %6, 7
  %8 = icmp eq i8 %7, 0
  br i1 %8, label %29, label %9

; <label>:9:                                      ; preds = %5
  %10 = and i64 %3, 255
  %11 = zext i8 %7 to i64
  %12 = shl i64 %10, %11
  %13 = sub nsw i8 8, %7
  %14 = zext i8 %13 to i64
  %15 = lshr i64 %10, %14
  %16 = or i64 %15, %12
  %17 = trunc i64 %16 to i8
  store i8 %17, i8* %2, align 1
  %18 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  %19 = and i8 %17, 1
  store i8 %19, i8* %18, align 1
  %20 = icmp eq i8 %7, 1
  %21 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  br i1 %20, label %22, label %27

; <label>:22:                                     ; preds = %9
  %23 = icmp ne i8 %19, 0
  %24 = icmp slt i8 %17, 0
  %25 = xor i1 %24, %23
  %26 = zext i1 %25 to i8
  br label %27

; <label>:27:                                     ; preds = %22, %9
  %28 = phi i8 [ %26, %22 ], [ 0, %9 ]
  store i8 %28, i8* %21, align 1
  br label %31

; <label>:29:                                     ; preds = %5
  %30 = trunc i64 %3 to i8
  store i8 %30, i8* %2, align 1
  br label %31

; <label>:31:                                     ; preds = %29, %27
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3ROLI3MnWItE2MnItE2RnItEEEP6MemoryS8_R5StateT_T0_T1_(%struct.Memory*, %struct.State* nocapture dereferenceable(3376), i64, i64, i64)  {
  %6 = inttoptr i64 %3 to i16*
  %7 = load i16, i16* %6
  %8 = trunc i64 %4 to i16
  %9 = and i16 %8, 15
  %10 = icmp eq i16 %9, 0
  br i1 %10, label %33, label %11

; <label>:11:                                     ; preds = %5
  %12 = zext i16 %7 to i64
  %13 = zext i16 %9 to i64
  %14 = shl i64 %12, %13
  %15 = sub nsw i16 16, %9
  %16 = zext i16 %15 to i64
  %17 = lshr i64 %12, %16
  %18 = or i64 %17, %14
  %19 = trunc i64 %18 to i16
  %20 = inttoptr i64 %2 to i16*
  store i16 %19, i16* %20
  %21 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  %22 = and i16 %19, 1
  %23 = trunc i16 %22 to i8
  store i8 %23, i8* %21, align 1
  %24 = icmp eq i16 %9, 1
  %25 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  br i1 %24, label %26, label %31

; <label>:26:                                     ; preds = %11
  %27 = icmp ne i16 %22, 0
  %28 = icmp slt i16 %19, 0
  %29 = xor i1 %28, %27
  %30 = zext i1 %29 to i8
  br label %31

; <label>:31:                                     ; preds = %26, %11
  %32 = phi i8 [ %30, %26 ], [ 0, %11 ]
  store i8 %32, i8* %25, align 1
  br label %35

; <label>:33:                                     ; preds = %5
  %34 = inttoptr i64 %2 to i16*
  store i16 %7, i16* %34
  br label %35

; <label>:35:                                     ; preds = %33, %31
  %36 = phi %struct.Memory* [ %0, %31 ], [ %0, %33 ]
  ret %struct.Memory* %36
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3ROLI3MnWIjE2MnIjE2RnIjEEEP6MemoryS8_R5StateT_T0_T1_(%struct.Memory*, %struct.State* nocapture dereferenceable(3376), i64, i64, i64)  {
  %6 = inttoptr i64 %3 to i32*
  %7 = load i32, i32* %6
  %8 = trunc i64 %4 to i32
  %9 = and i32 %8, 31
  %10 = icmp eq i32 %9, 0
  br i1 %10, label %33, label %11

; <label>:11:                                     ; preds = %5
  %12 = zext i32 %7 to i64
  %13 = zext i32 %9 to i64
  %14 = shl i64 %12, %13
  %15 = sub nsw i32 32, %9
  %16 = zext i32 %15 to i64
  %17 = lshr i64 %12, %16
  %18 = or i64 %17, %14
  %19 = trunc i64 %18 to i32
  %20 = inttoptr i64 %2 to i32*
  store i32 %19, i32* %20
  %21 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  %22 = and i32 %19, 1
  %23 = trunc i32 %22 to i8
  store i8 %23, i8* %21, align 1
  %24 = icmp eq i32 %9, 1
  %25 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  br i1 %24, label %26, label %31

; <label>:26:                                     ; preds = %11
  %27 = icmp ne i32 %22, 0
  %28 = icmp slt i32 %19, 0
  %29 = xor i1 %28, %27
  %30 = zext i1 %29 to i8
  br label %31

; <label>:31:                                     ; preds = %26, %11
  %32 = phi i8 [ %30, %26 ], [ 0, %11 ]
  store i8 %32, i8* %25, align 1
  br label %35

; <label>:33:                                     ; preds = %5
  %34 = inttoptr i64 %2 to i32*
  store i32 %7, i32* %34
  br label %35

; <label>:35:                                     ; preds = %33, %31
  %36 = phi %struct.Memory* [ %0, %31 ], [ %0, %33 ]
  ret %struct.Memory* %36
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3ROLI3MnWImE2MnImE2RnImEEEP6MemoryS8_R5StateT_T0_T1_(%struct.Memory*, %struct.State* nocapture dereferenceable(3376), i64, i64, i64)  {
  %6 = inttoptr i64 %3 to i64*
  %7 = load i64, i64* %6
  %8 = and i64 %4, 63
  %9 = icmp eq i64 %8, 0
  br i1 %9, label %28, label %10

; <label>:10:                                     ; preds = %5
  %11 = shl i64 %7, %8
  %12 = sub nsw i64 64, %8
  %13 = lshr i64 %7, %12
  %14 = or i64 %13, %11
  %15 = inttoptr i64 %2 to i64*
  store i64 %14, i64* %15
  %16 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  %17 = and i64 %14, 1
  %18 = trunc i64 %17 to i8
  store i8 %18, i8* %16, align 1
  %19 = icmp eq i64 %8, 1
  %20 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  br i1 %19, label %21, label %26

; <label>:21:                                     ; preds = %10
  %22 = icmp ne i64 %17, 0
  %23 = icmp slt i64 %14, 0
  %24 = xor i1 %23, %22
  %25 = zext i1 %24 to i8
  br label %26

; <label>:26:                                     ; preds = %21, %10
  %27 = phi i8 [ %25, %21 ], [ 0, %10 ]
  store i8 %27, i8* %20, align 1
  br label %30

; <label>:28:                                     ; preds = %5
  %29 = inttoptr i64 %2 to i64*
  store i64 %7, i64* %29
  br label %30

; <label>:30:                                     ; preds = %28, %26
  %31 = phi %struct.Memory* [ %0, %26 ], [ %0, %28 ]
  ret %struct.Memory* %31
}

; Function Attrs: alwaysinline norecurse nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3ROLI3RnWItE2RnItES4_EEP6MemoryS6_R5StateT_T0_T1_(%struct.Memory* readnone, %struct.State* nocapture dereferenceable(3376), i16* nocapture, i64, i64)  {
  %6 = trunc i64 %4 to i16
  %7 = and i16 %6, 15
  %8 = icmp eq i16 %7, 0
  br i1 %8, label %30, label %9

; <label>:9:                                      ; preds = %5
  %10 = and i64 %3, 65535
  %11 = zext i16 %7 to i64
  %12 = shl i64 %10, %11
  %13 = sub nsw i16 16, %7
  %14 = zext i16 %13 to i64
  %15 = lshr i64 %10, %14
  %16 = or i64 %15, %12
  %17 = trunc i64 %16 to i16
  store i16 %17, i16* %2, align 2
  %18 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  %19 = and i16 %17, 1
  %20 = trunc i16 %19 to i8
  store i8 %20, i8* %18, align 1
  %21 = icmp eq i16 %7, 1
  %22 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  br i1 %21, label %23, label %28

; <label>:23:                                     ; preds = %9
  %24 = icmp ne i16 %19, 0
  %25 = icmp slt i16 %17, 0
  %26 = xor i1 %25, %24
  %27 = zext i1 %26 to i8
  br label %28

; <label>:28:                                     ; preds = %23, %9
  %29 = phi i8 [ %27, %23 ], [ 0, %9 ]
  store i8 %29, i8* %22, align 1
  br label %32

; <label>:30:                                     ; preds = %5
  %31 = trunc i64 %3 to i16
  store i16 %31, i16* %2, align 2
  br label %32

; <label>:32:                                     ; preds = %30, %28
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline norecurse nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3ROLI3RnWImE2RnIjES4_EEP6MemoryS6_R5StateT_T0_T1_(%struct.Memory* readnone, %struct.State* nocapture dereferenceable(3376), i64* nocapture, i64, i64)  {
  %6 = trunc i64 %4 to i32
  %7 = and i32 %6, 31
  %8 = icmp eq i32 %7, 0
  %9 = and i64 %3, 4294967295
  br i1 %8, label %31, label %10

; <label>:10:                                     ; preds = %5
  %11 = zext i32 %7 to i64
  %12 = shl i64 %9, %11
  %13 = sub nsw i32 32, %7
  %14 = zext i32 %13 to i64
  %15 = lshr i64 %9, %14
  %16 = or i64 %15, %12
  %17 = trunc i64 %16 to i32
  %18 = and i64 %16, 4294967295
  store i64 %18, i64* %2, align 8
  %19 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  %20 = and i32 %17, 1
  %21 = trunc i32 %20 to i8
  store i8 %21, i8* %19, align 1
  %22 = icmp eq i32 %7, 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  br i1 %22, label %24, label %29

; <label>:24:                                     ; preds = %10
  %25 = icmp ne i32 %20, 0
  %26 = icmp slt i32 %17, 0
  %27 = xor i1 %26, %25
  %28 = zext i1 %27 to i8
  br label %29

; <label>:29:                                     ; preds = %24, %10
  %30 = phi i8 [ %28, %24 ], [ 0, %10 ]
  store i8 %30, i8* %23, align 1
  br label %32

; <label>:31:                                     ; preds = %5
  store i64 %9, i64* %2, align 8
  br label %32

; <label>:32:                                     ; preds = %31, %29
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline norecurse nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3ROLI3RnWImE2RnImES4_EEP6MemoryS6_R5StateT_T0_T1_(%struct.Memory* readnone, %struct.State* nocapture dereferenceable(3376), i64* nocapture, i64, i64)  {
  %6 = and i64 %4, 63
  %7 = icmp eq i64 %6, 0
  br i1 %7, label %25, label %8

; <label>:8:                                      ; preds = %5
  %9 = shl i64 %3, %6
  %10 = sub nsw i64 64, %6
  %11 = lshr i64 %3, %10
  %12 = or i64 %11, %9
  store i64 %12, i64* %2, align 8
  %13 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  %14 = and i64 %12, 1
  %15 = trunc i64 %14 to i8
  store i8 %15, i8* %13, align 1
  %16 = icmp eq i64 %6, 1
  %17 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  br i1 %16, label %18, label %23

; <label>:18:                                     ; preds = %8
  %19 = icmp ne i64 %14, 0
  %20 = icmp slt i64 %12, 0
  %21 = xor i1 %20, %19
  %22 = zext i1 %21 to i8
  br label %23

; <label>:23:                                     ; preds = %18, %8
  %24 = phi i8 [ %22, %18 ], [ 0, %8 ]
  store i8 %24, i8* %17, align 1
  br label %26

; <label>:25:                                     ; preds = %5
  store i64 %3, i64* %2, align 8
  br label %26

; <label>:26:                                     ; preds = %25, %23
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3RORI3MnWIhE2MnIhE2InIhEEEP6MemoryS8_R5StateT_T0_T1_(%struct.Memory*, %struct.State* nocapture dereferenceable(3376), i64, i64, i64)  {
  %6 = inttoptr i64 %3 to i8*
  %7 = load i8, i8* %6
  %8 = trunc i64 %4 to i8
  %9 = and i8 %8, 7
  %10 = icmp eq i8 %9, 0
  br i1 %10, label %29, label %11

; <label>:11:                                     ; preds = %5
  %12 = zext i8 %7 to i64
  %13 = zext i8 %9 to i64
  %14 = lshr i64 %12, %13
  %15 = sub nsw i8 8, %9
  %16 = zext i8 %15 to i64
  %17 = shl i64 %12, %16
  %18 = or i64 %17, %14
  %19 = trunc i64 %18 to i8
  %20 = inttoptr i64 %2 to i8*
  store i8 %19, i8* %20
  %21 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  %22 = icmp slt i8 %19, 0
  %23 = lshr i8 %19, 7
  store i8 %23, i8* %21, align 1
  %24 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  %25 = and i64 %18, 64
  %26 = icmp ne i64 %25, 0
  %27 = xor i1 %22, %26
  %28 = zext i1 %27 to i8
  store i8 %28, i8* %24, align 1
  br label %31

; <label>:29:                                     ; preds = %5
  %30 = inttoptr i64 %2 to i8*
  store i8 %7, i8* %30
  br label %31

; <label>:31:                                     ; preds = %29, %11
  %32 = phi %struct.Memory* [ %0, %29 ], [ %0, %11 ]
  ret %struct.Memory* %32
}

; Function Attrs: alwaysinline norecurse nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3RORI3RnWIhE2RnIhE2InIhEEEP6MemoryS8_R5StateT_T0_T1_(%struct.Memory* readnone, %struct.State* nocapture dereferenceable(3376), i8* nocapture, i64, i64)  {
  %6 = trunc i64 %4 to i8
  %7 = and i8 %6, 7
  %8 = icmp eq i8 %7, 0
  br i1 %8, label %26, label %9

; <label>:9:                                      ; preds = %5
  %10 = and i64 %3, 255
  %11 = zext i8 %7 to i64
  %12 = lshr i64 %10, %11
  %13 = sub nsw i8 8, %7
  %14 = zext i8 %13 to i64
  %15 = shl i64 %10, %14
  %16 = or i64 %15, %12
  %17 = trunc i64 %16 to i8
  store i8 %17, i8* %2, align 1
  %18 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  %19 = icmp slt i8 %17, 0
  %20 = lshr i8 %17, 7
  store i8 %20, i8* %18, align 1
  %21 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  %22 = and i64 %16, 64
  %23 = icmp ne i64 %22, 0
  %24 = xor i1 %19, %23
  %25 = zext i1 %24 to i8
  store i8 %25, i8* %21, align 1
  br label %28

; <label>:26:                                     ; preds = %5
  %27 = trunc i64 %3 to i8
  store i8 %27, i8* %2, align 1
  br label %28

; <label>:28:                                     ; preds = %26, %9
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3RORI3MnWItE2MnItE2InItEEEP6MemoryS8_R5StateT_T0_T1_(%struct.Memory*, %struct.State* nocapture dereferenceable(3376), i64, i64, i64)  {
  %6 = inttoptr i64 %3 to i16*
  %7 = load i16, i16* %6
  %8 = trunc i64 %4 to i16
  %9 = and i16 %8, 15
  %10 = icmp eq i16 %9, 0
  br i1 %10, label %30, label %11

; <label>:11:                                     ; preds = %5
  %12 = zext i16 %7 to i64
  %13 = zext i16 %9 to i64
  %14 = lshr i64 %12, %13
  %15 = sub nsw i16 16, %9
  %16 = zext i16 %15 to i64
  %17 = shl i64 %12, %16
  %18 = or i64 %17, %14
  %19 = trunc i64 %18 to i16
  %20 = inttoptr i64 %2 to i16*
  store i16 %19, i16* %20
  %21 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  %22 = icmp slt i16 %19, 0
  %23 = lshr i16 %19, 15
  %24 = trunc i16 %23 to i8
  store i8 %24, i8* %21, align 1
  %25 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  %26 = and i64 %18, 16384
  %27 = icmp ne i64 %26, 0
  %28 = xor i1 %22, %27
  %29 = zext i1 %28 to i8
  store i8 %29, i8* %25, align 1
  br label %32

; <label>:30:                                     ; preds = %5
  %31 = inttoptr i64 %2 to i16*
  store i16 %7, i16* %31
  br label %32

; <label>:32:                                     ; preds = %30, %11
  %33 = phi %struct.Memory* [ %0, %30 ], [ %0, %11 ]
  ret %struct.Memory* %33
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3RORI3MnWIjE2MnIjE2InIjEEEP6MemoryS8_R5StateT_T0_T1_(%struct.Memory*, %struct.State* nocapture dereferenceable(3376), i64, i64, i64)  {
  %6 = inttoptr i64 %3 to i32*
  %7 = load i32, i32* %6
  %8 = trunc i64 %4 to i32
  %9 = and i32 %8, 31
  %10 = icmp eq i32 %9, 0
  br i1 %10, label %30, label %11

; <label>:11:                                     ; preds = %5
  %12 = zext i32 %7 to i64
  %13 = zext i32 %9 to i64
  %14 = lshr i64 %12, %13
  %15 = sub nsw i32 32, %9
  %16 = zext i32 %15 to i64
  %17 = shl i64 %12, %16
  %18 = or i64 %17, %14
  %19 = trunc i64 %18 to i32
  %20 = inttoptr i64 %2 to i32*
  store i32 %19, i32* %20
  %21 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  %22 = icmp slt i32 %19, 0
  %23 = lshr i32 %19, 31
  %24 = trunc i32 %23 to i8
  store i8 %24, i8* %21, align 1
  %25 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  %26 = and i64 %18, 1073741824
  %27 = icmp ne i64 %26, 0
  %28 = xor i1 %22, %27
  %29 = zext i1 %28 to i8
  store i8 %29, i8* %25, align 1
  br label %32

; <label>:30:                                     ; preds = %5
  %31 = inttoptr i64 %2 to i32*
  store i32 %7, i32* %31
  br label %32

; <label>:32:                                     ; preds = %30, %11
  %33 = phi %struct.Memory* [ %0, %30 ], [ %0, %11 ]
  ret %struct.Memory* %33
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3RORI3MnWImE2MnImE2InImEEEP6MemoryS8_R5StateT_T0_T1_(%struct.Memory*, %struct.State* nocapture dereferenceable(3376), i64, i64, i64)  {
  %6 = inttoptr i64 %3 to i64*
  %7 = load i64, i64* %6
  %8 = and i64 %4, 63
  %9 = icmp eq i64 %8, 0
  br i1 %9, label %25, label %10

; <label>:10:                                     ; preds = %5
  %11 = lshr i64 %7, %8
  %12 = sub nsw i64 64, %8
  %13 = shl i64 %7, %12
  %14 = or i64 %13, %11
  %15 = inttoptr i64 %2 to i64*
  store i64 %14, i64* %15
  %16 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  %17 = icmp slt i64 %14, 0
  %18 = lshr i64 %14, 63
  %19 = trunc i64 %18 to i8
  store i8 %19, i8* %16, align 1
  %20 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  %21 = and i64 %14, 4611686018427387904
  %22 = icmp ne i64 %21, 0
  %23 = xor i1 %17, %22
  %24 = zext i1 %23 to i8
  store i8 %24, i8* %20, align 1
  br label %27

; <label>:25:                                     ; preds = %5
  %26 = inttoptr i64 %2 to i64*
  store i64 %7, i64* %26
  br label %27

; <label>:27:                                     ; preds = %25, %10
  %28 = phi %struct.Memory* [ %0, %25 ], [ %0, %10 ]
  ret %struct.Memory* %28
}

; Function Attrs: alwaysinline norecurse nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3RORI3RnWItE2RnItE2InItEEEP6MemoryS8_R5StateT_T0_T1_(%struct.Memory* readnone, %struct.State* nocapture dereferenceable(3376), i16* nocapture, i64, i64)  {
  %6 = trunc i64 %4 to i16
  %7 = and i16 %6, 15
  %8 = icmp eq i16 %7, 0
  br i1 %8, label %27, label %9

; <label>:9:                                      ; preds = %5
  %10 = and i64 %3, 65535
  %11 = zext i16 %7 to i64
  %12 = lshr i64 %10, %11
  %13 = sub nsw i16 16, %7
  %14 = zext i16 %13 to i64
  %15 = shl i64 %10, %14
  %16 = or i64 %15, %12
  %17 = trunc i64 %16 to i16
  store i16 %17, i16* %2, align 2
  %18 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  %19 = icmp slt i16 %17, 0
  %20 = lshr i16 %17, 15
  %21 = trunc i16 %20 to i8
  store i8 %21, i8* %18, align 1
  %22 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  %23 = and i64 %16, 16384
  %24 = icmp ne i64 %23, 0
  %25 = xor i1 %19, %24
  %26 = zext i1 %25 to i8
  store i8 %26, i8* %22, align 1
  br label %29

; <label>:27:                                     ; preds = %5
  %28 = trunc i64 %3 to i16
  store i16 %28, i16* %2, align 2
  br label %29

; <label>:29:                                     ; preds = %27, %9
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline norecurse nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3RORI3RnWImE2RnIjE2InIjEEEP6MemoryS8_R5StateT_T0_T1_(%struct.Memory* readnone, %struct.State* nocapture dereferenceable(3376), i64* nocapture, i64, i64)  {
  %6 = trunc i64 %4 to i32
  %7 = and i32 %6, 31
  %8 = icmp eq i32 %7, 0
  %9 = and i64 %3, 4294967295
  br i1 %8, label %28, label %10

; <label>:10:                                     ; preds = %5
  %11 = zext i32 %7 to i64
  %12 = lshr i64 %9, %11
  %13 = sub nsw i32 32, %7
  %14 = zext i32 %13 to i64
  %15 = shl i64 %9, %14
  %16 = or i64 %15, %12
  %17 = trunc i64 %16 to i32
  %18 = and i64 %16, 4294967295
  store i64 %18, i64* %2, align 8
  %19 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  %20 = icmp slt i32 %17, 0
  %21 = lshr i32 %17, 31
  %22 = trunc i32 %21 to i8
  store i8 %22, i8* %19, align 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  %24 = and i64 %16, 1073741824
  %25 = icmp ne i64 %24, 0
  %26 = xor i1 %20, %25
  %27 = zext i1 %26 to i8
  store i8 %27, i8* %23, align 1
  br label %29

; <label>:28:                                     ; preds = %5
  store i64 %9, i64* %2, align 8
  br label %29

; <label>:29:                                     ; preds = %28, %10
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline norecurse nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3RORI3RnWImE2RnImE2InImEEEP6MemoryS8_R5StateT_T0_T1_(%struct.Memory* readnone, %struct.State* nocapture dereferenceable(3376), i64* nocapture, i64, i64)  {
  %6 = and i64 %4, 63
  %7 = icmp eq i64 %6, 0
  br i1 %7, label %22, label %8

; <label>:8:                                      ; preds = %5
  %9 = lshr i64 %3, %6
  %10 = sub nsw i64 64, %6
  %11 = shl i64 %3, %10
  %12 = or i64 %11, %9
  store i64 %12, i64* %2, align 8
  %13 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  %14 = icmp slt i64 %12, 0
  %15 = lshr i64 %12, 63
  %16 = trunc i64 %15 to i8
  store i8 %16, i8* %13, align 1
  %17 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  %18 = and i64 %12, 4611686018427387904
  %19 = icmp ne i64 %18, 0
  %20 = xor i1 %14, %19
  %21 = zext i1 %20 to i8
  store i8 %21, i8* %17, align 1
  br label %23

; <label>:22:                                     ; preds = %5
  store i64 %3, i64* %2, align 8
  br label %23

; <label>:23:                                     ; preds = %22, %8
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3RORI3MnWIhE2MnIhE2RnIhEEEP6MemoryS8_R5StateT_T0_T1_(%struct.Memory*, %struct.State* nocapture dereferenceable(3376), i64, i64, i64)  {
  %6 = inttoptr i64 %3 to i8*
  %7 = load i8, i8* %6
  %8 = trunc i64 %4 to i8
  %9 = and i8 %8, 7
  %10 = icmp eq i8 %9, 0
  br i1 %10, label %29, label %11

; <label>:11:                                     ; preds = %5
  %12 = zext i8 %7 to i64
  %13 = zext i8 %9 to i64
  %14 = lshr i64 %12, %13
  %15 = sub nsw i8 8, %9
  %16 = zext i8 %15 to i64
  %17 = shl i64 %12, %16
  %18 = or i64 %17, %14
  %19 = trunc i64 %18 to i8
  %20 = inttoptr i64 %2 to i8*
  store i8 %19, i8* %20
  %21 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  %22 = icmp slt i8 %19, 0
  %23 = lshr i8 %19, 7
  store i8 %23, i8* %21, align 1
  %24 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  %25 = and i64 %18, 64
  %26 = icmp ne i64 %25, 0
  %27 = xor i1 %22, %26
  %28 = zext i1 %27 to i8
  store i8 %28, i8* %24, align 1
  br label %31

; <label>:29:                                     ; preds = %5
  %30 = inttoptr i64 %2 to i8*
  store i8 %7, i8* %30
  br label %31

; <label>:31:                                     ; preds = %29, %11
  %32 = phi %struct.Memory* [ %0, %29 ], [ %0, %11 ]
  ret %struct.Memory* %32
}

; Function Attrs: alwaysinline norecurse nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3RORI3RnWIhE2RnIhES4_EEP6MemoryS6_R5StateT_T0_T1_(%struct.Memory* readnone, %struct.State* nocapture dereferenceable(3376), i8* nocapture, i64, i64)  {
  %6 = trunc i64 %4 to i8
  %7 = and i8 %6, 7
  %8 = icmp eq i8 %7, 0
  br i1 %8, label %26, label %9

; <label>:9:                                      ; preds = %5
  %10 = and i64 %3, 255
  %11 = zext i8 %7 to i64
  %12 = lshr i64 %10, %11
  %13 = sub nsw i8 8, %7
  %14 = zext i8 %13 to i64
  %15 = shl i64 %10, %14
  %16 = or i64 %15, %12
  %17 = trunc i64 %16 to i8
  store i8 %17, i8* %2, align 1
  %18 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  %19 = icmp slt i8 %17, 0
  %20 = lshr i8 %17, 7
  store i8 %20, i8* %18, align 1
  %21 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  %22 = and i64 %16, 64
  %23 = icmp ne i64 %22, 0
  %24 = xor i1 %19, %23
  %25 = zext i1 %24 to i8
  store i8 %25, i8* %21, align 1
  br label %28

; <label>:26:                                     ; preds = %5
  %27 = trunc i64 %3 to i8
  store i8 %27, i8* %2, align 1
  br label %28

; <label>:28:                                     ; preds = %26, %9
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3RORI3MnWItE2MnItE2RnItEEEP6MemoryS8_R5StateT_T0_T1_(%struct.Memory*, %struct.State* nocapture dereferenceable(3376), i64, i64, i64)  {
  %6 = inttoptr i64 %3 to i16*
  %7 = load i16, i16* %6
  %8 = trunc i64 %4 to i16
  %9 = and i16 %8, 15
  %10 = icmp eq i16 %9, 0
  br i1 %10, label %30, label %11

; <label>:11:                                     ; preds = %5
  %12 = zext i16 %7 to i64
  %13 = zext i16 %9 to i64
  %14 = lshr i64 %12, %13
  %15 = sub nsw i16 16, %9
  %16 = zext i16 %15 to i64
  %17 = shl i64 %12, %16
  %18 = or i64 %17, %14
  %19 = trunc i64 %18 to i16
  %20 = inttoptr i64 %2 to i16*
  store i16 %19, i16* %20
  %21 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  %22 = icmp slt i16 %19, 0
  %23 = lshr i16 %19, 15
  %24 = trunc i16 %23 to i8
  store i8 %24, i8* %21, align 1
  %25 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  %26 = and i64 %18, 16384
  %27 = icmp ne i64 %26, 0
  %28 = xor i1 %22, %27
  %29 = zext i1 %28 to i8
  store i8 %29, i8* %25, align 1
  br label %32

; <label>:30:                                     ; preds = %5
  %31 = inttoptr i64 %2 to i16*
  store i16 %7, i16* %31
  br label %32

; <label>:32:                                     ; preds = %30, %11
  %33 = phi %struct.Memory* [ %0, %30 ], [ %0, %11 ]
  ret %struct.Memory* %33
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3RORI3MnWIjE2MnIjE2RnIjEEEP6MemoryS8_R5StateT_T0_T1_(%struct.Memory*, %struct.State* nocapture dereferenceable(3376), i64, i64, i64)  {
  %6 = inttoptr i64 %3 to i32*
  %7 = load i32, i32* %6
  %8 = trunc i64 %4 to i32
  %9 = and i32 %8, 31
  %10 = icmp eq i32 %9, 0
  br i1 %10, label %30, label %11

; <label>:11:                                     ; preds = %5
  %12 = zext i32 %7 to i64
  %13 = zext i32 %9 to i64
  %14 = lshr i64 %12, %13
  %15 = sub nsw i32 32, %9
  %16 = zext i32 %15 to i64
  %17 = shl i64 %12, %16
  %18 = or i64 %17, %14
  %19 = trunc i64 %18 to i32
  %20 = inttoptr i64 %2 to i32*
  store i32 %19, i32* %20
  %21 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  %22 = icmp slt i32 %19, 0
  %23 = lshr i32 %19, 31
  %24 = trunc i32 %23 to i8
  store i8 %24, i8* %21, align 1
  %25 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  %26 = and i64 %18, 1073741824
  %27 = icmp ne i64 %26, 0
  %28 = xor i1 %22, %27
  %29 = zext i1 %28 to i8
  store i8 %29, i8* %25, align 1
  br label %32

; <label>:30:                                     ; preds = %5
  %31 = inttoptr i64 %2 to i32*
  store i32 %7, i32* %31
  br label %32

; <label>:32:                                     ; preds = %30, %11
  %33 = phi %struct.Memory* [ %0, %30 ], [ %0, %11 ]
  ret %struct.Memory* %33
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3RORI3MnWImE2MnImE2RnImEEEP6MemoryS8_R5StateT_T0_T1_(%struct.Memory*, %struct.State* nocapture dereferenceable(3376), i64, i64, i64)  {
  %6 = inttoptr i64 %3 to i64*
  %7 = load i64, i64* %6
  %8 = and i64 %4, 63
  %9 = icmp eq i64 %8, 0
  br i1 %9, label %25, label %10

; <label>:10:                                     ; preds = %5
  %11 = lshr i64 %7, %8
  %12 = sub nsw i64 64, %8
  %13 = shl i64 %7, %12
  %14 = or i64 %13, %11
  %15 = inttoptr i64 %2 to i64*
  store i64 %14, i64* %15
  %16 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  %17 = icmp slt i64 %14, 0
  %18 = lshr i64 %14, 63
  %19 = trunc i64 %18 to i8
  store i8 %19, i8* %16, align 1
  %20 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  %21 = and i64 %14, 4611686018427387904
  %22 = icmp ne i64 %21, 0
  %23 = xor i1 %17, %22
  %24 = zext i1 %23 to i8
  store i8 %24, i8* %20, align 1
  br label %27

; <label>:25:                                     ; preds = %5
  %26 = inttoptr i64 %2 to i64*
  store i64 %7, i64* %26
  br label %27

; <label>:27:                                     ; preds = %25, %10
  %28 = phi %struct.Memory* [ %0, %25 ], [ %0, %10 ]
  ret %struct.Memory* %28
}

; Function Attrs: alwaysinline norecurse nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3RORI3RnWItE2RnItES4_EEP6MemoryS6_R5StateT_T0_T1_(%struct.Memory* readnone, %struct.State* nocapture dereferenceable(3376), i16* nocapture, i64, i64)  {
  %6 = trunc i64 %4 to i16
  %7 = and i16 %6, 15
  %8 = icmp eq i16 %7, 0
  br i1 %8, label %27, label %9

; <label>:9:                                      ; preds = %5
  %10 = and i64 %3, 65535
  %11 = zext i16 %7 to i64
  %12 = lshr i64 %10, %11
  %13 = sub nsw i16 16, %7
  %14 = zext i16 %13 to i64
  %15 = shl i64 %10, %14
  %16 = or i64 %15, %12
  %17 = trunc i64 %16 to i16
  store i16 %17, i16* %2, align 2
  %18 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  %19 = icmp slt i16 %17, 0
  %20 = lshr i16 %17, 15
  %21 = trunc i16 %20 to i8
  store i8 %21, i8* %18, align 1
  %22 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  %23 = and i64 %16, 16384
  %24 = icmp ne i64 %23, 0
  %25 = xor i1 %19, %24
  %26 = zext i1 %25 to i8
  store i8 %26, i8* %22, align 1
  br label %29

; <label>:27:                                     ; preds = %5
  %28 = trunc i64 %3 to i16
  store i16 %28, i16* %2, align 2
  br label %29

; <label>:29:                                     ; preds = %27, %9
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline norecurse nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3RORI3RnWImE2RnIjES4_EEP6MemoryS6_R5StateT_T0_T1_(%struct.Memory* readnone, %struct.State* nocapture dereferenceable(3376), i64* nocapture, i64, i64)  {
  %6 = trunc i64 %4 to i32
  %7 = and i32 %6, 31
  %8 = icmp eq i32 %7, 0
  %9 = and i64 %3, 4294967295
  br i1 %8, label %28, label %10

; <label>:10:                                     ; preds = %5
  %11 = zext i32 %7 to i64
  %12 = lshr i64 %9, %11
  %13 = sub nsw i32 32, %7
  %14 = zext i32 %13 to i64
  %15 = shl i64 %9, %14
  %16 = or i64 %15, %12
  %17 = trunc i64 %16 to i32
  %18 = and i64 %16, 4294967295
  store i64 %18, i64* %2, align 8
  %19 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  %20 = icmp slt i32 %17, 0
  %21 = lshr i32 %17, 31
  %22 = trunc i32 %21 to i8
  store i8 %22, i8* %19, align 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  %24 = and i64 %16, 1073741824
  %25 = icmp ne i64 %24, 0
  %26 = xor i1 %20, %25
  %27 = zext i1 %26 to i8
  store i8 %27, i8* %23, align 1
  br label %29

; <label>:28:                                     ; preds = %5
  store i64 %9, i64* %2, align 8
  br label %29

; <label>:29:                                     ; preds = %28, %10
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline norecurse nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3RORI3RnWImE2RnImES4_EEP6MemoryS6_R5StateT_T0_T1_(%struct.Memory* readnone, %struct.State* nocapture dereferenceable(3376), i64* nocapture, i64, i64)  {
  %6 = and i64 %4, 63
  %7 = icmp eq i64 %6, 0
  br i1 %7, label %22, label %8

; <label>:8:                                      ; preds = %5
  %9 = lshr i64 %3, %6
  %10 = sub nsw i64 64, %6
  %11 = shl i64 %3, %10
  %12 = or i64 %11, %9
  store i64 %12, i64* %2, align 8
  %13 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  %14 = icmp slt i64 %12, 0
  %15 = lshr i64 %12, 63
  %16 = trunc i64 %15 to i8
  store i8 %16, i8* %13, align 1
  %17 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  %18 = and i64 %12, 4611686018427387904
  %19 = icmp ne i64 %18, 0
  %20 = xor i1 %14, %19
  %21 = zext i1 %20 to i8
  store i8 %21, i8* %17, align 1
  br label %23

; <label>:22:                                     ; preds = %5
  store i64 %3, i64* %2, align 8
  br label %23

; <label>:23:                                     ; preds = %22, %8
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline norecurse nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L4RORXI3RnWImE2RnIjE2InIhEEEP6MemoryS8_R5StateT_T0_T1_(%struct.Memory* readnone returned, %struct.State* nocapture readnone dereferenceable(3376), i64* nocapture, i64, i64)  {
  %6 = trunc i64 %4 to i32
  %7 = and i32 %6, 31
  %8 = and i64 %3, 4294967295
  %9 = zext i32 %7 to i64
  %10 = lshr i64 %8, %9
  %11 = sub nsw i32 32, %7
  %12 = zext i32 %11 to i64
  %13 = shl i64 %8, %12
  %14 = and i64 %13, 4294967295
  %15 = or i64 %14, %10
  store i64 %15, i64* %2, align 8
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L4RORXI3RnWImE2MnIjE2InIhEEEP6MemoryS8_R5StateT_T0_T1_(%struct.Memory*, %struct.State* nocapture readnone dereferenceable(3376), i64* nocapture, i64, i64)  {
  %6 = inttoptr i64 %3 to i32*
  %7 = load i32, i32* %6
  %8 = trunc i64 %4 to i32
  %9 = and i32 %8, 31
  %10 = zext i32 %7 to i64
  %11 = zext i32 %9 to i64
  %12 = lshr i64 %10, %11
  %13 = sub nsw i32 32, %9
  %14 = zext i32 %13 to i64
  %15 = shl i64 %10, %14
  %16 = and i64 %15, 4294967295
  %17 = or i64 %16, %12
  store i64 %17, i64* %2, align 8
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline norecurse nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L4RORXI3RnWImE2RnImE2InIhEEEP6MemoryS8_R5StateT_T0_T1_(%struct.Memory* readnone returned, %struct.State* nocapture readnone dereferenceable(3376), i64* nocapture, i64, i64)  {
  %6 = and i64 %4, 63
  %7 = lshr i64 %3, %6
  %8 = sub nsw i64 64, %6
  %9 = shl i64 %3, %8
  %10 = or i64 %9, %7
  store i64 %10, i64* %2, align 8
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L4RORXI3RnWImE2MnImE2InIhEEEP6MemoryS8_R5StateT_T0_T1_(%struct.Memory*, %struct.State* nocapture readnone dereferenceable(3376), i64* nocapture, i64, i64)  {
  %6 = inttoptr i64 %3 to i64*
  %7 = load i64, i64* %6
  %8 = and i64 %4, 63
  %9 = lshr i64 %7, %8
  %10 = sub nsw i64 64, %8
  %11 = shl i64 %7, %10
  %12 = or i64 %11, %9
  store i64 %12, i64* %2, align 8
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3RCLI3MnWIhE2MnIhE2InIhEEEP6MemoryS8_R5StateT_T0_T1_(%struct.Memory*, %struct.State* nocapture dereferenceable(3376), i64, i64, i64)  {
  %6 = inttoptr i64 %3 to i8*
  %7 = load i8, i8* %6
  %8 = trunc i64 %4 to i8
  %9 = and i8 %8, 31
  %10 = urem i8 %9, 9
  %11 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  %12 = icmp eq i8 %10, 0
  br i1 %12, label %41, label %13

; <label>:13:                                     ; preds = %5
  %14 = load i8, i8* %11, align 1
  %15 = icmp ne i8 %14, 0
  %16 = sub nsw i8 8, %10
  %17 = zext i8 %7 to i64
  %18 = zext i8 %16 to i64
  %19 = lshr i64 %17, %18
  %20 = zext i8 %10 to i64
  %21 = shl i64 %17, %20
  %22 = add nsw i8 %10, -1
  %23 = zext i1 %15 to i64
  %24 = zext i8 %22 to i64
  %25 = shl i64 %23, %24
  %26 = or i64 %25, %21
  %27 = trunc i64 %26 to i8
  %28 = lshr i64 %19, 1
  %29 = trunc i64 %28 to i8
  %30 = and i8 %29, 127
  %31 = or i8 %27, %30
  %32 = inttoptr i64 %2 to i8*
  store i8 %31, i8* %32
  %33 = shl i64 %17, %24
  %34 = trunc i64 %33 to i8
  %35 = icmp slt i8 %34, 0
  %36 = lshr i8 %34, 7
  store i8 %36, i8* %11, align 1
  %37 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  %38 = icmp slt i8 %31, 0
  %39 = xor i1 %35, %38
  %40 = zext i1 %39 to i8
  store i8 %40, i8* %37, align 1
  br label %43

; <label>:41:                                     ; preds = %5
  %42 = inttoptr i64 %2 to i8*
  store i8 %7, i8* %42
  br label %43

; <label>:43:                                     ; preds = %41, %13
  %44 = phi %struct.Memory* [ %0, %41 ], [ %0, %13 ]
  ret %struct.Memory* %44
}

; Function Attrs: alwaysinline norecurse nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3RCLI3RnWIhE2RnIhE2InIhEEEP6MemoryS8_R5StateT_T0_T1_(%struct.Memory* readnone, %struct.State* nocapture dereferenceable(3376), i8* nocapture, i64, i64)  {
  %6 = trunc i64 %4 to i8
  %7 = and i8 %6, 31
  %8 = urem i8 %7, 9
  %9 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  %10 = icmp eq i8 %8, 0
  br i1 %10, label %38, label %11

; <label>:11:                                     ; preds = %5
  %12 = load i8, i8* %9, align 1
  %13 = icmp ne i8 %12, 0
  %14 = sub nsw i8 8, %8
  %15 = and i64 %3, 255
  %16 = zext i8 %14 to i64
  %17 = lshr i64 %15, %16
  %18 = zext i8 %8 to i64
  %19 = shl i64 %15, %18
  %20 = add nsw i8 %8, -1
  %21 = zext i1 %13 to i64
  %22 = zext i8 %20 to i64
  %23 = shl i64 %21, %22
  %24 = or i64 %23, %19
  %25 = trunc i64 %24 to i8
  %26 = lshr i64 %17, 1
  %27 = trunc i64 %26 to i8
  %28 = and i8 %27, 127
  %29 = or i8 %25, %28
  store i8 %29, i8* %2, align 1
  %30 = shl i64 %15, %22
  %31 = trunc i64 %30 to i8
  %32 = icmp slt i8 %31, 0
  %33 = lshr i8 %31, 7
  store i8 %33, i8* %9, align 1
  %34 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  %35 = icmp slt i8 %29, 0
  %36 = xor i1 %32, %35
  %37 = zext i1 %36 to i8
  store i8 %37, i8* %34, align 1
  br label %40

; <label>:38:                                     ; preds = %5
  %39 = trunc i64 %3 to i8
  store i8 %39, i8* %2, align 1
  br label %40

; <label>:40:                                     ; preds = %38, %11
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3RCLI3MnWItE2MnItE2InItEEEP6MemoryS8_R5StateT_T0_T1_(%struct.Memory*, %struct.State* nocapture dereferenceable(3376), i64, i64, i64)  {
  %6 = inttoptr i64 %3 to i16*
  %7 = load i16, i16* %6
  %8 = trunc i64 %4 to i16
  %9 = and i16 %8, 31
  %10 = urem i16 %9, 17
  %11 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  %12 = icmp eq i16 %10, 0
  br i1 %12, label %42, label %13

; <label>:13:                                     ; preds = %5
  %14 = load i8, i8* %11, align 1
  %15 = icmp ne i8 %14, 0
  %16 = sub nsw i16 16, %10
  %17 = zext i16 %7 to i64
  %18 = zext i16 %16 to i64
  %19 = lshr i64 %17, %18
  %20 = zext i16 %10 to i64
  %21 = shl i64 %17, %20
  %22 = add nsw i16 %10, -1
  %23 = zext i1 %15 to i64
  %24 = zext i16 %22 to i64
  %25 = shl i64 %23, %24
  %26 = or i64 %25, %21
  %27 = trunc i64 %26 to i16
  %28 = lshr i64 %19, 1
  %29 = trunc i64 %28 to i16
  %30 = and i16 %29, 32767
  %31 = or i16 %27, %30
  %32 = inttoptr i64 %2 to i16*
  store i16 %31, i16* %32
  %33 = shl i64 %17, %24
  %34 = trunc i64 %33 to i16
  %35 = icmp slt i16 %34, 0
  %36 = lshr i16 %34, 15
  %37 = trunc i16 %36 to i8
  store i8 %37, i8* %11, align 1
  %38 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  %39 = icmp slt i16 %31, 0
  %40 = xor i1 %35, %39
  %41 = zext i1 %40 to i8
  store i8 %41, i8* %38, align 1
  br label %44

; <label>:42:                                     ; preds = %5
  %43 = inttoptr i64 %2 to i16*
  store i16 %7, i16* %43
  br label %44

; <label>:44:                                     ; preds = %42, %13
  %45 = phi %struct.Memory* [ %0, %42 ], [ %0, %13 ]
  ret %struct.Memory* %45
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3RCLI3MnWIjE2MnIjE2InIjEEEP6MemoryS8_R5StateT_T0_T1_(%struct.Memory*, %struct.State* nocapture dereferenceable(3376), i64, i64, i64)  {
  %6 = inttoptr i64 %3 to i32*
  %7 = load i32, i32* %6
  %8 = trunc i64 %4 to i32
  %9 = and i32 %8, 31
  %10 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  %11 = icmp eq i32 %9, 0
  br i1 %11, label %41, label %12

; <label>:12:                                     ; preds = %5
  %13 = load i8, i8* %10, align 1
  %14 = icmp ne i8 %13, 0
  %15 = sub nsw i32 32, %9
  %16 = zext i32 %7 to i64
  %17 = zext i32 %15 to i64
  %18 = lshr i64 %16, %17
  %19 = zext i32 %9 to i64
  %20 = shl i64 %16, %19
  %21 = add nsw i32 %9, -1
  %22 = zext i1 %14 to i64
  %23 = zext i32 %21 to i64
  %24 = shl i64 %22, %23
  %25 = or i64 %24, %20
  %26 = trunc i64 %25 to i32
  %27 = lshr i64 %18, 1
  %28 = trunc i64 %27 to i32
  %29 = and i32 %28, 2147483647
  %30 = or i32 %26, %29
  %31 = inttoptr i64 %2 to i32*
  store i32 %30, i32* %31
  %32 = shl i64 %16, %23
  %33 = trunc i64 %32 to i32
  %34 = icmp slt i32 %33, 0
  %35 = lshr i32 %33, 31
  %36 = trunc i32 %35 to i8
  store i8 %36, i8* %10, align 1
  %37 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  %38 = icmp slt i32 %30, 0
  %39 = xor i1 %34, %38
  %40 = zext i1 %39 to i8
  store i8 %40, i8* %37, align 1
  br label %43

; <label>:41:                                     ; preds = %5
  %42 = inttoptr i64 %2 to i32*
  store i32 %7, i32* %42
  br label %43

; <label>:43:                                     ; preds = %41, %12
  %44 = phi %struct.Memory* [ %0, %41 ], [ %0, %12 ]
  ret %struct.Memory* %44
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3RCLI3MnWImE2MnImE2InImEEEP6MemoryS8_R5StateT_T0_T1_(%struct.Memory*, %struct.State* nocapture dereferenceable(3376), i64, i64, i64)  {
  %6 = inttoptr i64 %3 to i64*
  %7 = load i64, i64* %6
  %8 = and i64 %4, 63
  %9 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  %10 = icmp eq i64 %8, 0
  br i1 %10, label %32, label %11

; <label>:11:                                     ; preds = %5
  %12 = load i8, i8* %9, align 1
  %13 = icmp ne i8 %12, 0
  %14 = zext i1 %13 to i64
  %15 = sub nsw i64 64, %8
  %16 = lshr i64 %7, %15
  %17 = shl i64 %7, %8
  %18 = add nsw i64 %8, -1
  %19 = shl i64 %14, %18
  %20 = lshr i64 %16, 1
  %21 = or i64 %20, %17
  %22 = or i64 %21, %19
  %23 = inttoptr i64 %2 to i64*
  store i64 %22, i64* %23
  %24 = shl i64 %7, %18
  %25 = icmp slt i64 %24, 0
  %26 = lshr i64 %24, 63
  %27 = trunc i64 %26 to i8
  store i8 %27, i8* %9, align 1
  %28 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  %29 = icmp slt i64 %22, 0
  %30 = xor i1 %25, %29
  %31 = zext i1 %30 to i8
  store i8 %31, i8* %28, align 1
  br label %34

; <label>:32:                                     ; preds = %5
  %33 = inttoptr i64 %2 to i64*
  store i64 %7, i64* %33
  br label %34

; <label>:34:                                     ; preds = %32, %11
  %35 = phi %struct.Memory* [ %0, %32 ], [ %0, %11 ]
  ret %struct.Memory* %35
}

; Function Attrs: alwaysinline norecurse nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3RCLI3RnWItE2RnItE2InItEEEP6MemoryS8_R5StateT_T0_T1_(%struct.Memory* readnone, %struct.State* nocapture dereferenceable(3376), i16* nocapture, i64, i64)  {
  %6 = trunc i64 %4 to i16
  %7 = and i16 %6, 31
  %8 = urem i16 %7, 17
  %9 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  %10 = icmp eq i16 %8, 0
  br i1 %10, label %39, label %11

; <label>:11:                                     ; preds = %5
  %12 = load i8, i8* %9, align 1
  %13 = icmp ne i8 %12, 0
  %14 = sub nsw i16 16, %8
  %15 = and i64 %3, 65535
  %16 = zext i16 %14 to i64
  %17 = lshr i64 %15, %16
  %18 = zext i16 %8 to i64
  %19 = shl i64 %15, %18
  %20 = add nsw i16 %8, -1
  %21 = zext i1 %13 to i64
  %22 = zext i16 %20 to i64
  %23 = shl i64 %21, %22
  %24 = or i64 %23, %19
  %25 = trunc i64 %24 to i16
  %26 = lshr i64 %17, 1
  %27 = trunc i64 %26 to i16
  %28 = and i16 %27, 32767
  %29 = or i16 %25, %28
  store i16 %29, i16* %2, align 2
  %30 = shl i64 %15, %22
  %31 = trunc i64 %30 to i16
  %32 = icmp slt i16 %31, 0
  %33 = lshr i16 %31, 15
  %34 = trunc i16 %33 to i8
  store i8 %34, i8* %9, align 1
  %35 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  %36 = icmp slt i16 %29, 0
  %37 = xor i1 %32, %36
  %38 = zext i1 %37 to i8
  store i8 %38, i8* %35, align 1
  br label %41

; <label>:39:                                     ; preds = %5
  %40 = trunc i64 %3 to i16
  store i16 %40, i16* %2, align 2
  br label %41

; <label>:41:                                     ; preds = %39, %11
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline norecurse nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3RCLI3RnWImE2RnIjE2InIjEEEP6MemoryS8_R5StateT_T0_T1_(%struct.Memory* readnone, %struct.State* nocapture dereferenceable(3376), i64* nocapture, i64, i64)  {
  %6 = trunc i64 %4 to i32
  %7 = and i32 %6, 31
  %8 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  %9 = icmp eq i32 %7, 0
  br i1 %9, label %39, label %10

; <label>:10:                                     ; preds = %5
  %11 = load i8, i8* %8, align 1
  %12 = icmp ne i8 %11, 0
  %13 = sub nsw i32 32, %7
  %14 = and i64 %3, 4294967295
  %15 = zext i32 %13 to i64
  %16 = lshr i64 %14, %15
  %17 = zext i32 %7 to i64
  %18 = shl i64 %14, %17
  %19 = add nsw i32 %7, -1
  %20 = zext i1 %12 to i64
  %21 = zext i32 %19 to i64
  %22 = shl i64 %20, %21
  %23 = or i64 %22, %18
  %24 = trunc i64 %23 to i32
  %25 = lshr i64 %16, 1
  %26 = trunc i64 %25 to i32
  %27 = and i32 %26, 2147483647
  %28 = or i32 %24, %27
  %29 = zext i32 %28 to i64
  store i64 %29, i64* %2, align 8
  %30 = shl i64 %14, %21
  %31 = trunc i64 %30 to i32
  %32 = icmp slt i32 %31, 0
  %33 = lshr i32 %31, 31
  %34 = trunc i32 %33 to i8
  store i8 %34, i8* %8, align 1
  %35 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  %36 = icmp slt i32 %28, 0
  %37 = xor i1 %32, %36
  %38 = zext i1 %37 to i8
  store i8 %38, i8* %35, align 1
  br label %41

; <label>:39:                                     ; preds = %5
  %40 = and i64 %3, 4294967295
  store i64 %40, i64* %2, align 8
  br label %41

; <label>:41:                                     ; preds = %39, %10
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline norecurse nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3RCLI3RnWImE2RnImE2InImEEEP6MemoryS8_R5StateT_T0_T1_(%struct.Memory* readnone, %struct.State* nocapture dereferenceable(3376), i64* nocapture, i64, i64)  {
  %6 = and i64 %4, 63
  %7 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  %8 = icmp eq i64 %6, 0
  br i1 %8, label %29, label %9

; <label>:9:                                      ; preds = %5
  %10 = load i8, i8* %7, align 1
  %11 = icmp ne i8 %10, 0
  %12 = zext i1 %11 to i64
  %13 = sub nsw i64 64, %6
  %14 = lshr i64 %3, %13
  %15 = shl i64 %3, %6
  %16 = add nsw i64 %6, -1
  %17 = shl i64 %12, %16
  %18 = lshr i64 %14, 1
  %19 = or i64 %18, %15
  %20 = or i64 %19, %17
  store i64 %20, i64* %2, align 8
  %21 = shl i64 %3, %16
  %22 = icmp slt i64 %21, 0
  %23 = lshr i64 %21, 63
  %24 = trunc i64 %23 to i8
  store i8 %24, i8* %7, align 1
  %25 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  %26 = icmp slt i64 %20, 0
  %27 = xor i1 %22, %26
  %28 = zext i1 %27 to i8
  store i8 %28, i8* %25, align 1
  br label %30

; <label>:29:                                     ; preds = %5
  store i64 %3, i64* %2, align 8
  br label %30

; <label>:30:                                     ; preds = %29, %9
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3RCLI3MnWIhE2MnIhE2RnIhEEEP6MemoryS8_R5StateT_T0_T1_(%struct.Memory*, %struct.State* nocapture dereferenceable(3376), i64, i64, i64)  {
  %6 = inttoptr i64 %3 to i8*
  %7 = load i8, i8* %6
  %8 = trunc i64 %4 to i8
  %9 = and i8 %8, 31
  %10 = urem i8 %9, 9
  %11 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  %12 = icmp eq i8 %10, 0
  br i1 %12, label %41, label %13

; <label>:13:                                     ; preds = %5
  %14 = load i8, i8* %11, align 1
  %15 = icmp ne i8 %14, 0
  %16 = sub nsw i8 8, %10
  %17 = zext i8 %7 to i64
  %18 = zext i8 %16 to i64
  %19 = lshr i64 %17, %18
  %20 = zext i8 %10 to i64
  %21 = shl i64 %17, %20
  %22 = add nsw i8 %10, -1
  %23 = zext i1 %15 to i64
  %24 = zext i8 %22 to i64
  %25 = shl i64 %23, %24
  %26 = or i64 %25, %21
  %27 = trunc i64 %26 to i8
  %28 = lshr i64 %19, 1
  %29 = trunc i64 %28 to i8
  %30 = and i8 %29, 127
  %31 = or i8 %27, %30
  %32 = inttoptr i64 %2 to i8*
  store i8 %31, i8* %32
  %33 = shl i64 %17, %24
  %34 = trunc i64 %33 to i8
  %35 = icmp slt i8 %34, 0
  %36 = lshr i8 %34, 7
  store i8 %36, i8* %11, align 1
  %37 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  %38 = icmp slt i8 %31, 0
  %39 = xor i1 %35, %38
  %40 = zext i1 %39 to i8
  store i8 %40, i8* %37, align 1
  br label %43

; <label>:41:                                     ; preds = %5
  %42 = inttoptr i64 %2 to i8*
  store i8 %7, i8* %42
  br label %43

; <label>:43:                                     ; preds = %41, %13
  %44 = phi %struct.Memory* [ %0, %41 ], [ %0, %13 ]
  ret %struct.Memory* %44
}

; Function Attrs: alwaysinline norecurse nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3RCLI3RnWIhE2RnIhES4_EEP6MemoryS6_R5StateT_T0_T1_(%struct.Memory* readnone, %struct.State* nocapture dereferenceable(3376), i8* nocapture, i64, i64)  {
  %6 = trunc i64 %4 to i8
  %7 = and i8 %6, 31
  %8 = urem i8 %7, 9
  %9 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  %10 = icmp eq i8 %8, 0
  br i1 %10, label %38, label %11

; <label>:11:                                     ; preds = %5
  %12 = load i8, i8* %9, align 1
  %13 = icmp ne i8 %12, 0
  %14 = sub nsw i8 8, %8
  %15 = and i64 %3, 255
  %16 = zext i8 %14 to i64
  %17 = lshr i64 %15, %16
  %18 = zext i8 %8 to i64
  %19 = shl i64 %15, %18
  %20 = add nsw i8 %8, -1
  %21 = zext i1 %13 to i64
  %22 = zext i8 %20 to i64
  %23 = shl i64 %21, %22
  %24 = or i64 %23, %19
  %25 = trunc i64 %24 to i8
  %26 = lshr i64 %17, 1
  %27 = trunc i64 %26 to i8
  %28 = and i8 %27, 127
  %29 = or i8 %25, %28
  store i8 %29, i8* %2, align 1
  %30 = shl i64 %15, %22
  %31 = trunc i64 %30 to i8
  %32 = icmp slt i8 %31, 0
  %33 = lshr i8 %31, 7
  store i8 %33, i8* %9, align 1
  %34 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  %35 = icmp slt i8 %29, 0
  %36 = xor i1 %32, %35
  %37 = zext i1 %36 to i8
  store i8 %37, i8* %34, align 1
  br label %40

; <label>:38:                                     ; preds = %5
  %39 = trunc i64 %3 to i8
  store i8 %39, i8* %2, align 1
  br label %40

; <label>:40:                                     ; preds = %38, %11
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3RCLI3MnWItE2MnItE2RnItEEEP6MemoryS8_R5StateT_T0_T1_(%struct.Memory*, %struct.State* nocapture dereferenceable(3376), i64, i64, i64)  {
  %6 = inttoptr i64 %3 to i16*
  %7 = load i16, i16* %6
  %8 = trunc i64 %4 to i16
  %9 = and i16 %8, 31
  %10 = urem i16 %9, 17
  %11 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  %12 = icmp eq i16 %10, 0
  br i1 %12, label %42, label %13

; <label>:13:                                     ; preds = %5
  %14 = load i8, i8* %11, align 1
  %15 = icmp ne i8 %14, 0
  %16 = sub nsw i16 16, %10
  %17 = zext i16 %7 to i64
  %18 = zext i16 %16 to i64
  %19 = lshr i64 %17, %18
  %20 = zext i16 %10 to i64
  %21 = shl i64 %17, %20
  %22 = add nsw i16 %10, -1
  %23 = zext i1 %15 to i64
  %24 = zext i16 %22 to i64
  %25 = shl i64 %23, %24
  %26 = or i64 %25, %21
  %27 = trunc i64 %26 to i16
  %28 = lshr i64 %19, 1
  %29 = trunc i64 %28 to i16
  %30 = and i16 %29, 32767
  %31 = or i16 %27, %30
  %32 = inttoptr i64 %2 to i16*
  store i16 %31, i16* %32
  %33 = shl i64 %17, %24
  %34 = trunc i64 %33 to i16
  %35 = icmp slt i16 %34, 0
  %36 = lshr i16 %34, 15
  %37 = trunc i16 %36 to i8
  store i8 %37, i8* %11, align 1
  %38 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  %39 = icmp slt i16 %31, 0
  %40 = xor i1 %35, %39
  %41 = zext i1 %40 to i8
  store i8 %41, i8* %38, align 1
  br label %44

; <label>:42:                                     ; preds = %5
  %43 = inttoptr i64 %2 to i16*
  store i16 %7, i16* %43
  br label %44

; <label>:44:                                     ; preds = %42, %13
  %45 = phi %struct.Memory* [ %0, %42 ], [ %0, %13 ]
  ret %struct.Memory* %45
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3RCLI3MnWIjE2MnIjE2RnIjEEEP6MemoryS8_R5StateT_T0_T1_(%struct.Memory*, %struct.State* nocapture dereferenceable(3376), i64, i64, i64)  {
  %6 = inttoptr i64 %3 to i32*
  %7 = load i32, i32* %6
  %8 = trunc i64 %4 to i32
  %9 = and i32 %8, 31
  %10 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  %11 = icmp eq i32 %9, 0
  br i1 %11, label %41, label %12

; <label>:12:                                     ; preds = %5
  %13 = load i8, i8* %10, align 1
  %14 = icmp ne i8 %13, 0
  %15 = sub nsw i32 32, %9
  %16 = zext i32 %7 to i64
  %17 = zext i32 %15 to i64
  %18 = lshr i64 %16, %17
  %19 = zext i32 %9 to i64
  %20 = shl i64 %16, %19
  %21 = add nsw i32 %9, -1
  %22 = zext i1 %14 to i64
  %23 = zext i32 %21 to i64
  %24 = shl i64 %22, %23
  %25 = or i64 %24, %20
  %26 = trunc i64 %25 to i32
  %27 = lshr i64 %18, 1
  %28 = trunc i64 %27 to i32
  %29 = and i32 %28, 2147483647
  %30 = or i32 %26, %29
  %31 = inttoptr i64 %2 to i32*
  store i32 %30, i32* %31
  %32 = shl i64 %16, %23
  %33 = trunc i64 %32 to i32
  %34 = icmp slt i32 %33, 0
  %35 = lshr i32 %33, 31
  %36 = trunc i32 %35 to i8
  store i8 %36, i8* %10, align 1
  %37 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  %38 = icmp slt i32 %30, 0
  %39 = xor i1 %34, %38
  %40 = zext i1 %39 to i8
  store i8 %40, i8* %37, align 1
  br label %43

; <label>:41:                                     ; preds = %5
  %42 = inttoptr i64 %2 to i32*
  store i32 %7, i32* %42
  br label %43

; <label>:43:                                     ; preds = %41, %12
  %44 = phi %struct.Memory* [ %0, %41 ], [ %0, %12 ]
  ret %struct.Memory* %44
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3RCLI3MnWImE2MnImE2RnImEEEP6MemoryS8_R5StateT_T0_T1_(%struct.Memory*, %struct.State* nocapture dereferenceable(3376), i64, i64, i64)  {
  %6 = inttoptr i64 %3 to i64*
  %7 = load i64, i64* %6
  %8 = and i64 %4, 63
  %9 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  %10 = icmp eq i64 %8, 0
  br i1 %10, label %32, label %11

; <label>:11:                                     ; preds = %5
  %12 = load i8, i8* %9, align 1
  %13 = icmp ne i8 %12, 0
  %14 = zext i1 %13 to i64
  %15 = sub nsw i64 64, %8
  %16 = lshr i64 %7, %15
  %17 = shl i64 %7, %8
  %18 = add nsw i64 %8, -1
  %19 = shl i64 %14, %18
  %20 = lshr i64 %16, 1
  %21 = or i64 %20, %17
  %22 = or i64 %21, %19
  %23 = inttoptr i64 %2 to i64*
  store i64 %22, i64* %23
  %24 = shl i64 %7, %18
  %25 = icmp slt i64 %24, 0
  %26 = lshr i64 %24, 63
  %27 = trunc i64 %26 to i8
  store i8 %27, i8* %9, align 1
  %28 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  %29 = icmp slt i64 %22, 0
  %30 = xor i1 %25, %29
  %31 = zext i1 %30 to i8
  store i8 %31, i8* %28, align 1
  br label %34

; <label>:32:                                     ; preds = %5
  %33 = inttoptr i64 %2 to i64*
  store i64 %7, i64* %33
  br label %34

; <label>:34:                                     ; preds = %32, %11
  %35 = phi %struct.Memory* [ %0, %32 ], [ %0, %11 ]
  ret %struct.Memory* %35
}

; Function Attrs: alwaysinline norecurse nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3RCLI3RnWItE2RnItES4_EEP6MemoryS6_R5StateT_T0_T1_(%struct.Memory* readnone, %struct.State* nocapture dereferenceable(3376), i16* nocapture, i64, i64)  {
  %6 = trunc i64 %4 to i16
  %7 = and i16 %6, 31
  %8 = urem i16 %7, 17
  %9 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  %10 = icmp eq i16 %8, 0
  br i1 %10, label %39, label %11

; <label>:11:                                     ; preds = %5
  %12 = load i8, i8* %9, align 1
  %13 = icmp ne i8 %12, 0
  %14 = sub nsw i16 16, %8
  %15 = and i64 %3, 65535
  %16 = zext i16 %14 to i64
  %17 = lshr i64 %15, %16
  %18 = zext i16 %8 to i64
  %19 = shl i64 %15, %18
  %20 = add nsw i16 %8, -1
  %21 = zext i1 %13 to i64
  %22 = zext i16 %20 to i64
  %23 = shl i64 %21, %22
  %24 = or i64 %23, %19
  %25 = trunc i64 %24 to i16
  %26 = lshr i64 %17, 1
  %27 = trunc i64 %26 to i16
  %28 = and i16 %27, 32767
  %29 = or i16 %25, %28
  store i16 %29, i16* %2, align 2
  %30 = shl i64 %15, %22
  %31 = trunc i64 %30 to i16
  %32 = icmp slt i16 %31, 0
  %33 = lshr i16 %31, 15
  %34 = trunc i16 %33 to i8
  store i8 %34, i8* %9, align 1
  %35 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  %36 = icmp slt i16 %29, 0
  %37 = xor i1 %32, %36
  %38 = zext i1 %37 to i8
  store i8 %38, i8* %35, align 1
  br label %41

; <label>:39:                                     ; preds = %5
  %40 = trunc i64 %3 to i16
  store i16 %40, i16* %2, align 2
  br label %41

; <label>:41:                                     ; preds = %39, %11
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline norecurse nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3RCLI3RnWImE2RnIjES4_EEP6MemoryS6_R5StateT_T0_T1_(%struct.Memory* readnone, %struct.State* nocapture dereferenceable(3376), i64* nocapture, i64, i64)  {
  %6 = trunc i64 %4 to i32
  %7 = and i32 %6, 31
  %8 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  %9 = icmp eq i32 %7, 0
  br i1 %9, label %39, label %10

; <label>:10:                                     ; preds = %5
  %11 = load i8, i8* %8, align 1
  %12 = icmp ne i8 %11, 0
  %13 = sub nsw i32 32, %7
  %14 = and i64 %3, 4294967295
  %15 = zext i32 %13 to i64
  %16 = lshr i64 %14, %15
  %17 = zext i32 %7 to i64
  %18 = shl i64 %14, %17
  %19 = add nsw i32 %7, -1
  %20 = zext i1 %12 to i64
  %21 = zext i32 %19 to i64
  %22 = shl i64 %20, %21
  %23 = or i64 %22, %18
  %24 = trunc i64 %23 to i32
  %25 = lshr i64 %16, 1
  %26 = trunc i64 %25 to i32
  %27 = and i32 %26, 2147483647
  %28 = or i32 %24, %27
  %29 = zext i32 %28 to i64
  store i64 %29, i64* %2, align 8
  %30 = shl i64 %14, %21
  %31 = trunc i64 %30 to i32
  %32 = icmp slt i32 %31, 0
  %33 = lshr i32 %31, 31
  %34 = trunc i32 %33 to i8
  store i8 %34, i8* %8, align 1
  %35 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  %36 = icmp slt i32 %28, 0
  %37 = xor i1 %32, %36
  %38 = zext i1 %37 to i8
  store i8 %38, i8* %35, align 1
  br label %41

; <label>:39:                                     ; preds = %5
  %40 = and i64 %3, 4294967295
  store i64 %40, i64* %2, align 8
  br label %41

; <label>:41:                                     ; preds = %39, %10
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline norecurse nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3RCLI3RnWImE2RnImES4_EEP6MemoryS6_R5StateT_T0_T1_(%struct.Memory* readnone, %struct.State* nocapture dereferenceable(3376), i64* nocapture, i64, i64)  {
  %6 = and i64 %4, 63
  %7 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  %8 = icmp eq i64 %6, 0
  br i1 %8, label %29, label %9

; <label>:9:                                      ; preds = %5
  %10 = load i8, i8* %7, align 1
  %11 = icmp ne i8 %10, 0
  %12 = zext i1 %11 to i64
  %13 = sub nsw i64 64, %6
  %14 = lshr i64 %3, %13
  %15 = shl i64 %3, %6
  %16 = add nsw i64 %6, -1
  %17 = shl i64 %12, %16
  %18 = lshr i64 %14, 1
  %19 = or i64 %18, %15
  %20 = or i64 %19, %17
  store i64 %20, i64* %2, align 8
  %21 = shl i64 %3, %16
  %22 = icmp slt i64 %21, 0
  %23 = lshr i64 %21, 63
  %24 = trunc i64 %23 to i8
  store i8 %24, i8* %7, align 1
  %25 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  %26 = icmp slt i64 %20, 0
  %27 = xor i1 %22, %26
  %28 = zext i1 %27 to i8
  store i8 %28, i8* %25, align 1
  br label %30

; <label>:29:                                     ; preds = %5
  store i64 %3, i64* %2, align 8
  br label %30

; <label>:30:                                     ; preds = %29, %9
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3RCRI3MnWIhE2MnIhE2InIhEEEP6MemoryS8_R5StateT_T0_T1_(%struct.Memory*, %struct.State* nocapture dereferenceable(3376), i64, i64, i64)  {
  %6 = inttoptr i64 %3 to i8*
  %7 = load i8, i8* %6
  %8 = trunc i64 %4 to i8
  %9 = and i8 %8, 31
  %10 = urem i8 %9, 9
  %11 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  %12 = icmp eq i8 %10, 0
  br i1 %12, label %42, label %13

; <label>:13:                                     ; preds = %5
  %14 = load i8, i8* %11, align 1
  %15 = icmp ne i8 %14, 0
  %16 = add nsw i8 %10, -1
  %17 = zext i8 %7 to i64
  %18 = zext i8 %16 to i64
  %19 = lshr i64 %17, %18
  %20 = sub nsw i8 8, %10
  %21 = zext i8 %20 to i64
  %22 = shl i64 %17, %21
  %23 = lshr i64 %19, 1
  %24 = trunc i64 %23 to i8
  %25 = and i8 %24, 127
  %26 = zext i1 %15 to i64
  %27 = shl i64 %26, %21
  %28 = trunc i64 %27 to i8
  %29 = trunc i64 %22 to i8
  %30 = shl i8 %29, 1
  %31 = or i8 %25, %30
  %32 = or i8 %31, %28
  %33 = inttoptr i64 %2 to i8*
  store i8 %32, i8* %33
  %34 = trunc i64 %19 to i8
  %35 = and i8 %34, 1
  store i8 %35, i8* %11, align 1
  %36 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  %37 = and i8 %32, 64
  %38 = icmp ne i8 %37, 0
  %39 = icmp slt i8 %32, 0
  %40 = xor i1 %39, %38
  %41 = zext i1 %40 to i8
  store i8 %41, i8* %36, align 1
  br label %44

; <label>:42:                                     ; preds = %5
  %43 = inttoptr i64 %2 to i8*
  store i8 %7, i8* %43
  br label %44

; <label>:44:                                     ; preds = %42, %13
  %45 = phi %struct.Memory* [ %0, %42 ], [ %0, %13 ]
  ret %struct.Memory* %45
}

; Function Attrs: alwaysinline norecurse nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3RCRI3RnWIhE2RnIhE2InIhEEEP6MemoryS8_R5StateT_T0_T1_(%struct.Memory* readnone, %struct.State* nocapture dereferenceable(3376), i8* nocapture, i64, i64)  {
  %6 = trunc i64 %4 to i8
  %7 = and i8 %6, 31
  %8 = urem i8 %7, 9
  %9 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  %10 = icmp eq i8 %8, 0
  br i1 %10, label %39, label %11

; <label>:11:                                     ; preds = %5
  %12 = load i8, i8* %9, align 1
  %13 = icmp ne i8 %12, 0
  %14 = add nsw i8 %8, -1
  %15 = and i64 %3, 255
  %16 = zext i8 %14 to i64
  %17 = lshr i64 %15, %16
  %18 = sub nsw i8 8, %8
  %19 = zext i8 %18 to i64
  %20 = shl i64 %15, %19
  %21 = lshr i64 %17, 1
  %22 = trunc i64 %21 to i8
  %23 = and i8 %22, 127
  %24 = zext i1 %13 to i64
  %25 = shl i64 %24, %19
  %26 = trunc i64 %25 to i8
  %27 = trunc i64 %20 to i8
  %28 = shl i8 %27, 1
  %29 = or i8 %23, %28
  %30 = or i8 %29, %26
  store i8 %30, i8* %2, align 1
  %31 = trunc i64 %17 to i8
  %32 = and i8 %31, 1
  store i8 %32, i8* %9, align 1
  %33 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  %34 = and i8 %30, 64
  %35 = icmp ne i8 %34, 0
  %36 = icmp slt i8 %30, 0
  %37 = xor i1 %36, %35
  %38 = zext i1 %37 to i8
  store i8 %38, i8* %33, align 1
  br label %41

; <label>:39:                                     ; preds = %5
  %40 = trunc i64 %3 to i8
  store i8 %40, i8* %2, align 1
  br label %41

; <label>:41:                                     ; preds = %39, %11
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3RCRI3MnWItE2MnItE2InItEEEP6MemoryS8_R5StateT_T0_T1_(%struct.Memory*, %struct.State* nocapture dereferenceable(3376), i64, i64, i64)  {
  %6 = inttoptr i64 %3 to i16*
  %7 = load i16, i16* %6
  %8 = trunc i64 %4 to i16
  %9 = and i16 %8, 31
  %10 = urem i16 %9, 17
  %11 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  %12 = icmp eq i16 %10, 0
  br i1 %12, label %42, label %13

; <label>:13:                                     ; preds = %5
  %14 = load i8, i8* %11, align 1
  %15 = icmp ne i8 %14, 0
  %16 = add nsw i16 %10, -1
  %17 = zext i16 %7 to i64
  %18 = zext i16 %16 to i64
  %19 = lshr i64 %17, %18
  %20 = sub nsw i16 16, %10
  %21 = zext i16 %20 to i64
  %22 = shl i64 %17, %21
  %23 = lshr i64 %19, 1
  %24 = trunc i64 %23 to i16
  %25 = and i16 %24, 32767
  %26 = zext i1 %15 to i64
  %27 = shl i64 %26, %21
  %28 = trunc i64 %27 to i16
  %29 = trunc i64 %22 to i16
  %30 = shl i16 %29, 1
  %31 = or i16 %25, %30
  %32 = or i16 %31, %28
  %33 = inttoptr i64 %2 to i16*
  store i16 %32, i16* %33
  %34 = trunc i64 %19 to i8
  %35 = and i8 %34, 1
  store i8 %35, i8* %11, align 1
  %36 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  %37 = and i16 %32, 16384
  %38 = icmp ne i16 %37, 0
  %39 = icmp slt i16 %32, 0
  %40 = xor i1 %39, %38
  %41 = zext i1 %40 to i8
  store i8 %41, i8* %36, align 1
  br label %44

; <label>:42:                                     ; preds = %5
  %43 = inttoptr i64 %2 to i16*
  store i16 %7, i16* %43
  br label %44

; <label>:44:                                     ; preds = %42, %13
  %45 = phi %struct.Memory* [ %0, %42 ], [ %0, %13 ]
  ret %struct.Memory* %45
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3RCRI3MnWIjE2MnIjE2InIjEEEP6MemoryS8_R5StateT_T0_T1_(%struct.Memory*, %struct.State* nocapture dereferenceable(3376), i64, i64, i64)  {
  %6 = inttoptr i64 %3 to i32*
  %7 = load i32, i32* %6
  %8 = trunc i64 %4 to i32
  %9 = and i32 %8, 31
  %10 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  %11 = icmp eq i32 %9, 0
  br i1 %11, label %41, label %12

; <label>:12:                                     ; preds = %5
  %13 = load i8, i8* %10, align 1
  %14 = icmp ne i8 %13, 0
  %15 = add nsw i32 %9, -1
  %16 = zext i32 %7 to i64
  %17 = zext i32 %15 to i64
  %18 = lshr i64 %16, %17
  %19 = sub nsw i32 32, %9
  %20 = zext i32 %19 to i64
  %21 = shl i64 %16, %20
  %22 = lshr i64 %18, 1
  %23 = trunc i64 %22 to i32
  %24 = and i32 %23, 2147483647
  %25 = zext i1 %14 to i64
  %26 = shl i64 %25, %20
  %27 = trunc i64 %26 to i32
  %28 = trunc i64 %21 to i32
  %29 = shl i32 %28, 1
  %30 = or i32 %24, %29
  %31 = or i32 %30, %27
  %32 = inttoptr i64 %2 to i32*
  store i32 %31, i32* %32
  %33 = trunc i64 %18 to i8
  %34 = and i8 %33, 1
  store i8 %34, i8* %10, align 1
  %35 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  %36 = and i32 %31, 1073741824
  %37 = icmp ne i32 %36, 0
  %38 = icmp slt i32 %31, 0
  %39 = xor i1 %38, %37
  %40 = zext i1 %39 to i8
  store i8 %40, i8* %35, align 1
  br label %43

; <label>:41:                                     ; preds = %5
  %42 = inttoptr i64 %2 to i32*
  store i32 %7, i32* %42
  br label %43

; <label>:43:                                     ; preds = %41, %12
  %44 = phi %struct.Memory* [ %0, %41 ], [ %0, %12 ]
  ret %struct.Memory* %44
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3RCRI3MnWImE2MnImE2InImEEEP6MemoryS8_R5StateT_T0_T1_(%struct.Memory*, %struct.State* nocapture dereferenceable(3376), i64, i64, i64)  {
  %6 = inttoptr i64 %3 to i64*
  %7 = load i64, i64* %6
  %8 = and i64 %4, 63
  %9 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  %10 = icmp eq i64 %8, 0
  br i1 %10, label %33, label %11

; <label>:11:                                     ; preds = %5
  %12 = load i8, i8* %9, align 1
  %13 = icmp ne i8 %12, 0
  %14 = zext i1 %13 to i64
  %15 = add nsw i64 %8, -1
  %16 = lshr i64 %7, %15
  %17 = sub nsw i64 64, %8
  %18 = shl i64 %7, %17
  %19 = lshr i64 %16, 1
  %20 = shl i64 %14, %17
  %21 = shl i64 %18, 1
  %22 = or i64 %21, %19
  %23 = or i64 %22, %20
  %24 = inttoptr i64 %2 to i64*
  store i64 %23, i64* %24
  %25 = trunc i64 %16 to i8
  %26 = and i8 %25, 1
  store i8 %26, i8* %9, align 1
  %27 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  %28 = and i64 %23, 4611686018427387904
  %29 = icmp ne i64 %28, 0
  %30 = icmp slt i64 %23, 0
  %31 = xor i1 %30, %29
  %32 = zext i1 %31 to i8
  store i8 %32, i8* %27, align 1
  br label %35

; <label>:33:                                     ; preds = %5
  %34 = inttoptr i64 %2 to i64*
  store i64 %7, i64* %34
  br label %35

; <label>:35:                                     ; preds = %33, %11
  %36 = phi %struct.Memory* [ %0, %33 ], [ %0, %11 ]
  ret %struct.Memory* %36
}

; Function Attrs: alwaysinline norecurse nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3RCRI3RnWItE2RnItE2InItEEEP6MemoryS8_R5StateT_T0_T1_(%struct.Memory* readnone, %struct.State* nocapture dereferenceable(3376), i16* nocapture, i64, i64)  {
  %6 = trunc i64 %4 to i16
  %7 = and i16 %6, 31
  %8 = urem i16 %7, 17
  %9 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  %10 = icmp eq i16 %8, 0
  br i1 %10, label %39, label %11

; <label>:11:                                     ; preds = %5
  %12 = load i8, i8* %9, align 1
  %13 = icmp ne i8 %12, 0
  %14 = add nsw i16 %8, -1
  %15 = and i64 %3, 65535
  %16 = zext i16 %14 to i64
  %17 = lshr i64 %15, %16
  %18 = sub nsw i16 16, %8
  %19 = zext i16 %18 to i64
  %20 = shl i64 %15, %19
  %21 = lshr i64 %17, 1
  %22 = trunc i64 %21 to i16
  %23 = and i16 %22, 32767
  %24 = zext i1 %13 to i64
  %25 = shl i64 %24, %19
  %26 = trunc i64 %25 to i16
  %27 = trunc i64 %20 to i16
  %28 = shl i16 %27, 1
  %29 = or i16 %23, %28
  %30 = or i16 %29, %26
  store i16 %30, i16* %2, align 2
  %31 = trunc i64 %17 to i8
  %32 = and i8 %31, 1
  store i8 %32, i8* %9, align 1
  %33 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  %34 = and i16 %30, 16384
  %35 = icmp ne i16 %34, 0
  %36 = icmp slt i16 %30, 0
  %37 = xor i1 %36, %35
  %38 = zext i1 %37 to i8
  store i8 %38, i8* %33, align 1
  br label %41

; <label>:39:                                     ; preds = %5
  %40 = trunc i64 %3 to i16
  store i16 %40, i16* %2, align 2
  br label %41

; <label>:41:                                     ; preds = %39, %11
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline norecurse nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3RCRI3RnWImE2RnIjE2InIjEEEP6MemoryS8_R5StateT_T0_T1_(%struct.Memory* readnone, %struct.State* nocapture dereferenceable(3376), i64* nocapture, i64, i64)  {
  %6 = trunc i64 %4 to i32
  %7 = and i32 %6, 31
  %8 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  %9 = icmp eq i32 %7, 0
  br i1 %9, label %39, label %10

; <label>:10:                                     ; preds = %5
  %11 = load i8, i8* %8, align 1
  %12 = icmp ne i8 %11, 0
  %13 = add nsw i32 %7, -1
  %14 = and i64 %3, 4294967295
  %15 = zext i32 %13 to i64
  %16 = lshr i64 %14, %15
  %17 = sub nsw i32 32, %7
  %18 = zext i32 %17 to i64
  %19 = shl i64 %14, %18
  %20 = lshr i64 %16, 1
  %21 = trunc i64 %20 to i32
  %22 = and i32 %21, 2147483647
  %23 = zext i1 %12 to i64
  %24 = shl i64 %23, %18
  %25 = trunc i64 %24 to i32
  %26 = trunc i64 %19 to i32
  %27 = shl i32 %26, 1
  %28 = or i32 %22, %27
  %29 = or i32 %28, %25
  %30 = zext i32 %29 to i64
  store i64 %30, i64* %2, align 8
  %31 = trunc i64 %16 to i8
  %32 = and i8 %31, 1
  store i8 %32, i8* %8, align 1
  %33 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  %34 = and i32 %29, 1073741824
  %35 = icmp ne i32 %34, 0
  %36 = icmp slt i32 %29, 0
  %37 = xor i1 %36, %35
  %38 = zext i1 %37 to i8
  store i8 %38, i8* %33, align 1
  br label %41

; <label>:39:                                     ; preds = %5
  %40 = and i64 %3, 4294967295
  store i64 %40, i64* %2, align 8
  br label %41

; <label>:41:                                     ; preds = %39, %10
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline norecurse nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3RCRI3RnWImE2RnImE2InImEEEP6MemoryS8_R5StateT_T0_T1_(%struct.Memory* readnone, %struct.State* nocapture dereferenceable(3376), i64* nocapture, i64, i64)  {
  %6 = and i64 %4, 63
  %7 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  %8 = icmp eq i64 %6, 0
  br i1 %8, label %30, label %9

; <label>:9:                                      ; preds = %5
  %10 = load i8, i8* %7, align 1
  %11 = icmp ne i8 %10, 0
  %12 = zext i1 %11 to i64
  %13 = add nsw i64 %6, -1
  %14 = lshr i64 %3, %13
  %15 = sub nsw i64 64, %6
  %16 = shl i64 %3, %15
  %17 = lshr i64 %14, 1
  %18 = shl i64 %12, %15
  %19 = shl i64 %16, 1
  %20 = or i64 %19, %17
  %21 = or i64 %20, %18
  store i64 %21, i64* %2, align 8
  %22 = trunc i64 %14 to i8
  %23 = and i8 %22, 1
  store i8 %23, i8* %7, align 1
  %24 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  %25 = and i64 %21, 4611686018427387904
  %26 = icmp ne i64 %25, 0
  %27 = icmp slt i64 %21, 0
  %28 = xor i1 %27, %26
  %29 = zext i1 %28 to i8
  store i8 %29, i8* %24, align 1
  br label %31

; <label>:30:                                     ; preds = %5
  store i64 %3, i64* %2, align 8
  br label %31

; <label>:31:                                     ; preds = %30, %9
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3RCRI3MnWIhE2MnIhE2RnIhEEEP6MemoryS8_R5StateT_T0_T1_(%struct.Memory*, %struct.State* nocapture dereferenceable(3376), i64, i64, i64)  {
  %6 = inttoptr i64 %3 to i8*
  %7 = load i8, i8* %6
  %8 = trunc i64 %4 to i8
  %9 = and i8 %8, 31
  %10 = urem i8 %9, 9
  %11 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  %12 = icmp eq i8 %10, 0
  br i1 %12, label %42, label %13

; <label>:13:                                     ; preds = %5
  %14 = load i8, i8* %11, align 1
  %15 = icmp ne i8 %14, 0
  %16 = add nsw i8 %10, -1
  %17 = zext i8 %7 to i64
  %18 = zext i8 %16 to i64
  %19 = lshr i64 %17, %18
  %20 = sub nsw i8 8, %10
  %21 = zext i8 %20 to i64
  %22 = shl i64 %17, %21
  %23 = lshr i64 %19, 1
  %24 = trunc i64 %23 to i8
  %25 = and i8 %24, 127
  %26 = zext i1 %15 to i64
  %27 = shl i64 %26, %21
  %28 = trunc i64 %27 to i8
  %29 = trunc i64 %22 to i8
  %30 = shl i8 %29, 1
  %31 = or i8 %25, %30
  %32 = or i8 %31, %28
  %33 = inttoptr i64 %2 to i8*
  store i8 %32, i8* %33
  %34 = trunc i64 %19 to i8
  %35 = and i8 %34, 1
  store i8 %35, i8* %11, align 1
  %36 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  %37 = and i8 %32, 64
  %38 = icmp ne i8 %37, 0
  %39 = icmp slt i8 %32, 0
  %40 = xor i1 %39, %38
  %41 = zext i1 %40 to i8
  store i8 %41, i8* %36, align 1
  br label %44

; <label>:42:                                     ; preds = %5
  %43 = inttoptr i64 %2 to i8*
  store i8 %7, i8* %43
  br label %44

; <label>:44:                                     ; preds = %42, %13
  %45 = phi %struct.Memory* [ %0, %42 ], [ %0, %13 ]
  ret %struct.Memory* %45
}

; Function Attrs: alwaysinline norecurse nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3RCRI3RnWIhE2RnIhES4_EEP6MemoryS6_R5StateT_T0_T1_(%struct.Memory* readnone, %struct.State* nocapture dereferenceable(3376), i8* nocapture, i64, i64)  {
  %6 = trunc i64 %4 to i8
  %7 = and i8 %6, 31
  %8 = urem i8 %7, 9
  %9 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  %10 = icmp eq i8 %8, 0
  br i1 %10, label %39, label %11

; <label>:11:                                     ; preds = %5
  %12 = load i8, i8* %9, align 1
  %13 = icmp ne i8 %12, 0
  %14 = add nsw i8 %8, -1
  %15 = and i64 %3, 255
  %16 = zext i8 %14 to i64
  %17 = lshr i64 %15, %16
  %18 = sub nsw i8 8, %8
  %19 = zext i8 %18 to i64
  %20 = shl i64 %15, %19
  %21 = lshr i64 %17, 1
  %22 = trunc i64 %21 to i8
  %23 = and i8 %22, 127
  %24 = zext i1 %13 to i64
  %25 = shl i64 %24, %19
  %26 = trunc i64 %25 to i8
  %27 = trunc i64 %20 to i8
  %28 = shl i8 %27, 1
  %29 = or i8 %23, %28
  %30 = or i8 %29, %26
  store i8 %30, i8* %2, align 1
  %31 = trunc i64 %17 to i8
  %32 = and i8 %31, 1
  store i8 %32, i8* %9, align 1
  %33 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  %34 = and i8 %30, 64
  %35 = icmp ne i8 %34, 0
  %36 = icmp slt i8 %30, 0
  %37 = xor i1 %36, %35
  %38 = zext i1 %37 to i8
  store i8 %38, i8* %33, align 1
  br label %41

; <label>:39:                                     ; preds = %5
  %40 = trunc i64 %3 to i8
  store i8 %40, i8* %2, align 1
  br label %41

; <label>:41:                                     ; preds = %39, %11
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3RCRI3MnWItE2MnItE2RnItEEEP6MemoryS8_R5StateT_T0_T1_(%struct.Memory*, %struct.State* nocapture dereferenceable(3376), i64, i64, i64)  {
  %6 = inttoptr i64 %3 to i16*
  %7 = load i16, i16* %6
  %8 = trunc i64 %4 to i16
  %9 = and i16 %8, 31
  %10 = urem i16 %9, 17
  %11 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  %12 = icmp eq i16 %10, 0
  br i1 %12, label %42, label %13

; <label>:13:                                     ; preds = %5
  %14 = load i8, i8* %11, align 1
  %15 = icmp ne i8 %14, 0
  %16 = add nsw i16 %10, -1
  %17 = zext i16 %7 to i64
  %18 = zext i16 %16 to i64
  %19 = lshr i64 %17, %18
  %20 = sub nsw i16 16, %10
  %21 = zext i16 %20 to i64
  %22 = shl i64 %17, %21
  %23 = lshr i64 %19, 1
  %24 = trunc i64 %23 to i16
  %25 = and i16 %24, 32767
  %26 = zext i1 %15 to i64
  %27 = shl i64 %26, %21
  %28 = trunc i64 %27 to i16
  %29 = trunc i64 %22 to i16
  %30 = shl i16 %29, 1
  %31 = or i16 %25, %30
  %32 = or i16 %31, %28
  %33 = inttoptr i64 %2 to i16*
  store i16 %32, i16* %33
  %34 = trunc i64 %19 to i8
  %35 = and i8 %34, 1
  store i8 %35, i8* %11, align 1
  %36 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  %37 = and i16 %32, 16384
  %38 = icmp ne i16 %37, 0
  %39 = icmp slt i16 %32, 0
  %40 = xor i1 %39, %38
  %41 = zext i1 %40 to i8
  store i8 %41, i8* %36, align 1
  br label %44

; <label>:42:                                     ; preds = %5
  %43 = inttoptr i64 %2 to i16*
  store i16 %7, i16* %43
  br label %44

; <label>:44:                                     ; preds = %42, %13
  %45 = phi %struct.Memory* [ %0, %42 ], [ %0, %13 ]
  ret %struct.Memory* %45
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3RCRI3MnWIjE2MnIjE2RnIjEEEP6MemoryS8_R5StateT_T0_T1_(%struct.Memory*, %struct.State* nocapture dereferenceable(3376), i64, i64, i64)  {
  %6 = inttoptr i64 %3 to i32*
  %7 = load i32, i32* %6
  %8 = trunc i64 %4 to i32
  %9 = and i32 %8, 31
  %10 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  %11 = icmp eq i32 %9, 0
  br i1 %11, label %41, label %12

; <label>:12:                                     ; preds = %5
  %13 = load i8, i8* %10, align 1
  %14 = icmp ne i8 %13, 0
  %15 = add nsw i32 %9, -1
  %16 = zext i32 %7 to i64
  %17 = zext i32 %15 to i64
  %18 = lshr i64 %16, %17
  %19 = sub nsw i32 32, %9
  %20 = zext i32 %19 to i64
  %21 = shl i64 %16, %20
  %22 = lshr i64 %18, 1
  %23 = trunc i64 %22 to i32
  %24 = and i32 %23, 2147483647
  %25 = zext i1 %14 to i64
  %26 = shl i64 %25, %20
  %27 = trunc i64 %26 to i32
  %28 = trunc i64 %21 to i32
  %29 = shl i32 %28, 1
  %30 = or i32 %24, %29
  %31 = or i32 %30, %27
  %32 = inttoptr i64 %2 to i32*
  store i32 %31, i32* %32
  %33 = trunc i64 %18 to i8
  %34 = and i8 %33, 1
  store i8 %34, i8* %10, align 1
  %35 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  %36 = and i32 %31, 1073741824
  %37 = icmp ne i32 %36, 0
  %38 = icmp slt i32 %31, 0
  %39 = xor i1 %38, %37
  %40 = zext i1 %39 to i8
  store i8 %40, i8* %35, align 1
  br label %43

; <label>:41:                                     ; preds = %5
  %42 = inttoptr i64 %2 to i32*
  store i32 %7, i32* %42
  br label %43

; <label>:43:                                     ; preds = %41, %12
  %44 = phi %struct.Memory* [ %0, %41 ], [ %0, %12 ]
  ret %struct.Memory* %44
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3RCRI3MnWImE2MnImE2RnImEEEP6MemoryS8_R5StateT_T0_T1_(%struct.Memory*, %struct.State* nocapture dereferenceable(3376), i64, i64, i64)  {
  %6 = inttoptr i64 %3 to i64*
  %7 = load i64, i64* %6
  %8 = and i64 %4, 63
  %9 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  %10 = icmp eq i64 %8, 0
  br i1 %10, label %33, label %11

; <label>:11:                                     ; preds = %5
  %12 = load i8, i8* %9, align 1
  %13 = icmp ne i8 %12, 0
  %14 = zext i1 %13 to i64
  %15 = add nsw i64 %8, -1
  %16 = lshr i64 %7, %15
  %17 = sub nsw i64 64, %8
  %18 = shl i64 %7, %17
  %19 = lshr i64 %16, 1
  %20 = shl i64 %14, %17
  %21 = shl i64 %18, 1
  %22 = or i64 %21, %19
  %23 = or i64 %22, %20
  %24 = inttoptr i64 %2 to i64*
  store i64 %23, i64* %24
  %25 = trunc i64 %16 to i8
  %26 = and i8 %25, 1
  store i8 %26, i8* %9, align 1
  %27 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  %28 = and i64 %23, 4611686018427387904
  %29 = icmp ne i64 %28, 0
  %30 = icmp slt i64 %23, 0
  %31 = xor i1 %30, %29
  %32 = zext i1 %31 to i8
  store i8 %32, i8* %27, align 1
  br label %35

; <label>:33:                                     ; preds = %5
  %34 = inttoptr i64 %2 to i64*
  store i64 %7, i64* %34
  br label %35

; <label>:35:                                     ; preds = %33, %11
  %36 = phi %struct.Memory* [ %0, %33 ], [ %0, %11 ]
  ret %struct.Memory* %36
}

; Function Attrs: alwaysinline norecurse nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3RCRI3RnWItE2RnItES4_EEP6MemoryS6_R5StateT_T0_T1_(%struct.Memory* readnone, %struct.State* nocapture dereferenceable(3376), i16* nocapture, i64, i64)  {
  %6 = trunc i64 %4 to i16
  %7 = and i16 %6, 31
  %8 = urem i16 %7, 17
  %9 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  %10 = icmp eq i16 %8, 0
  br i1 %10, label %39, label %11

; <label>:11:                                     ; preds = %5
  %12 = load i8, i8* %9, align 1
  %13 = icmp ne i8 %12, 0
  %14 = add nsw i16 %8, -1
  %15 = and i64 %3, 65535
  %16 = zext i16 %14 to i64
  %17 = lshr i64 %15, %16
  %18 = sub nsw i16 16, %8
  %19 = zext i16 %18 to i64
  %20 = shl i64 %15, %19
  %21 = lshr i64 %17, 1
  %22 = trunc i64 %21 to i16
  %23 = and i16 %22, 32767
  %24 = zext i1 %13 to i64
  %25 = shl i64 %24, %19
  %26 = trunc i64 %25 to i16
  %27 = trunc i64 %20 to i16
  %28 = shl i16 %27, 1
  %29 = or i16 %23, %28
  %30 = or i16 %29, %26
  store i16 %30, i16* %2, align 2
  %31 = trunc i64 %17 to i8
  %32 = and i8 %31, 1
  store i8 %32, i8* %9, align 1
  %33 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  %34 = and i16 %30, 16384
  %35 = icmp ne i16 %34, 0
  %36 = icmp slt i16 %30, 0
  %37 = xor i1 %36, %35
  %38 = zext i1 %37 to i8
  store i8 %38, i8* %33, align 1
  br label %41

; <label>:39:                                     ; preds = %5
  %40 = trunc i64 %3 to i16
  store i16 %40, i16* %2, align 2
  br label %41

; <label>:41:                                     ; preds = %39, %11
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline norecurse nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3RCRI3RnWImE2RnIjES4_EEP6MemoryS6_R5StateT_T0_T1_(%struct.Memory* readnone, %struct.State* nocapture dereferenceable(3376), i64* nocapture, i64, i64)  {
  %6 = trunc i64 %4 to i32
  %7 = and i32 %6, 31
  %8 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  %9 = icmp eq i32 %7, 0
  br i1 %9, label %39, label %10

; <label>:10:                                     ; preds = %5
  %11 = load i8, i8* %8, align 1
  %12 = icmp ne i8 %11, 0
  %13 = add nsw i32 %7, -1
  %14 = and i64 %3, 4294967295
  %15 = zext i32 %13 to i64
  %16 = lshr i64 %14, %15
  %17 = sub nsw i32 32, %7
  %18 = zext i32 %17 to i64
  %19 = shl i64 %14, %18
  %20 = lshr i64 %16, 1
  %21 = trunc i64 %20 to i32
  %22 = and i32 %21, 2147483647
  %23 = zext i1 %12 to i64
  %24 = shl i64 %23, %18
  %25 = trunc i64 %24 to i32
  %26 = trunc i64 %19 to i32
  %27 = shl i32 %26, 1
  %28 = or i32 %22, %27
  %29 = or i32 %28, %25
  %30 = zext i32 %29 to i64
  store i64 %30, i64* %2, align 8
  %31 = trunc i64 %16 to i8
  %32 = and i8 %31, 1
  store i8 %32, i8* %8, align 1
  %33 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  %34 = and i32 %29, 1073741824
  %35 = icmp ne i32 %34, 0
  %36 = icmp slt i32 %29, 0
  %37 = xor i1 %36, %35
  %38 = zext i1 %37 to i8
  store i8 %38, i8* %33, align 1
  br label %41

; <label>:39:                                     ; preds = %5
  %40 = and i64 %3, 4294967295
  store i64 %40, i64* %2, align 8
  br label %41

; <label>:41:                                     ; preds = %39, %10
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline norecurse nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3RCRI3RnWImE2RnImES4_EEP6MemoryS6_R5StateT_T0_T1_(%struct.Memory* readnone, %struct.State* nocapture dereferenceable(3376), i64* nocapture, i64, i64)  {
  %6 = and i64 %4, 63
  %7 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  %8 = icmp eq i64 %6, 0
  br i1 %8, label %30, label %9

; <label>:9:                                      ; preds = %5
  %10 = load i8, i8* %7, align 1
  %11 = icmp ne i8 %10, 0
  %12 = zext i1 %11 to i64
  %13 = add nsw i64 %6, -1
  %14 = lshr i64 %3, %13
  %15 = sub nsw i64 64, %6
  %16 = shl i64 %3, %15
  %17 = lshr i64 %14, 1
  %18 = shl i64 %12, %15
  %19 = shl i64 %16, 1
  %20 = or i64 %19, %17
  %21 = or i64 %20, %18
  store i64 %21, i64* %2, align 8
  %22 = trunc i64 %14 to i8
  %23 = and i8 %22, 1
  store i8 %23, i8* %7, align 1
  %24 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  %25 = and i64 %21, 4611686018427387904
  %26 = icmp ne i64 %25, 0
  %27 = icmp slt i64 %21, 0
  %28 = xor i1 %27, %26
  %29 = zext i1 %28 to i8
  store i8 %29, i8* %24, align 1
  br label %31

; <label>:30:                                     ; preds = %5
  store i64 %3, i64* %2, align 8
  br label %31

; <label>:31:                                     ; preds = %30, %9
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline norecurse nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L6XBEGINEP6MemoryR5State3RnWIhE2InImES7_(%struct.Memory* readnone returned, %struct.State* nocapture dereferenceable(3376), i8* nocapture, i64, i64)  {
  store i8 1, i8* %2, align 1
  %6 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %3, i64* %6, align 8
  %7 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 1, i32 0, i32 0
  store i64 8, i64* %7, align 8
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L6DoXENDEP6MemoryR5State(%struct.Memory*, %struct.State* dereferenceable(3376))  {
  %3 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 33, i32 0, i32 0
  %4 = load i64, i64* %3, align 8
  %5 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %1, i64 %4, %struct.Memory* %0) 
  ret %struct.Memory* %5
}

; Function Attrs: alwaysinline norecurse nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L7DoXTESTEP6MemoryR5State(%struct.Memory* readnone returned, %struct.State* nocapture dereferenceable(3376))  {
  %3 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  store i8 1, i8* %3, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline norecurse nounwind readnone
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L6XABORTEP6MemoryR5State2InIhE(%struct.Memory* readnone returned, %struct.State* nocapture readnone dereferenceable(3376), i64)  {
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L10CMPXCHG_ALI3MnWIhE2MnIhE2RnIhEEEP6MemoryS8_R5StateT_T0_T1_(%struct.Memory*, %struct.State* nocapture dereferenceable(3376), i64, i64, i64)  {
  %6 = alloca i8, align 1
  %7 = trunc i64 %4 to i8
  call void @llvm.lifetime.start(i64 1, i8* nonnull %6) 
  %8 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 1, i32 0
  %9 = bitcast %union.anon* %8 to i8*
  %10 = load i8, i8* %9, align 8
  store i8 %10, i8* %6, align 1
  %11 = call %struct.Memory* @__remill_compare_exchange_memory_8(%struct.Memory* %0, i64 %2, i8* nonnull dereferenceable(1) %6, i8 zeroext %7) 
  %12 = load i8, i8* %6, align 1
  %13 = icmp eq i8 %10, %12
  %14 = zext i1 %13 to i8
  %15 = sub i8 %10, %12
  %16 = icmp ult i8 %10, %12
  %17 = zext i1 %16 to i8
  %18 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  store i8 %17, i8* %18, align 1
  %19 = zext i8 %15 to i32
  %20 = call i32 @llvm.ctpop.i32(i32 %19) 
  %21 = trunc i32 %20 to i8
  %22 = and i8 %21, 1
  %23 = xor i8 %22, 1
  %24 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 %23, i8* %24, align 1
  %25 = xor i8 %12, %10
  %26 = xor i8 %25, %15
  %27 = lshr i8 %26, 4
  %28 = and i8 %27, 1
  %29 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 %28, i8* %29, align 1
  %30 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  %31 = lshr i8 %15, 7
  %32 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 %31, i8* %32, align 1
  %33 = lshr i8 %10, 7
  %34 = lshr i8 %12, 7
  %35 = xor i8 %34, %33
  %36 = xor i8 %31, %33
  %37 = add nuw nsw i8 %36, %35
  %38 = icmp eq i8 %37, 2
  %39 = zext i1 %38 to i8
  %40 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 %39, i8* %40, align 1
  store i8 %14, i8* %30, align 1
  store i8 %12, i8* %9, align 1
  call void @llvm.lifetime.end(i64 1, i8* nonnull %6) 
  ret %struct.Memory* %11
}

declare %struct.Memory* @__remill_compare_exchange_memory_8(%struct.Memory*, i64, i8* dereferenceable(1), i8 zeroext) 

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L10CMPXCHG_ALI3RnWIhE2RnIhES4_EEP6MemoryS6_R5StateT_T0_T1_(%struct.Memory*, %struct.State* nocapture dereferenceable(3376), i8* nocapture, i64, i64)  {
  %6 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 1, i32 0
  %7 = bitcast %union.anon* %6 to i8*
  %8 = load i8, i8* %7, align 8
  %9 = load i8, i8* %2, align 1
  %10 = icmp eq i8 %9, %8
  br i1 %10, label %11, label %13

; <label>:11:                                     ; preds = %5
  %12 = trunc i64 %4 to i8
  store i8 %12, i8* %2, align 1
  br label %13

; <label>:13:                                     ; preds = %11, %5
  %14 = phi i8 [ %8, %11 ], [ %9, %5 ]
  %15 = phi i8 [ 1, %11 ], [ 0, %5 ]
  %16 = sub i8 %8, %14
  %17 = icmp ult i8 %8, %14
  %18 = zext i1 %17 to i8
  %19 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  store i8 %18, i8* %19, align 1
  %20 = zext i8 %16 to i32
  %21 = tail call i32 @llvm.ctpop.i32(i32 %20) 
  %22 = trunc i32 %21 to i8
  %23 = and i8 %22, 1
  %24 = xor i8 %23, 1
  %25 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 %24, i8* %25, align 1
  %26 = xor i8 %14, %8
  %27 = xor i8 %26, %16
  %28 = lshr i8 %27, 4
  %29 = and i8 %28, 1
  %30 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 %29, i8* %30, align 1
  %31 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  %32 = lshr i8 %16, 7
  %33 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 %32, i8* %33, align 1
  %34 = lshr i8 %8, 7
  %35 = lshr i8 %14, 7
  %36 = xor i8 %35, %34
  %37 = xor i8 %32, %34
  %38 = add nuw nsw i8 %37, %36
  %39 = icmp eq i8 %38, 2
  %40 = zext i1 %39 to i8
  %41 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 %40, i8* %41, align 1
  store i8 %15, i8* %31, align 1
  store i8 %14, i8* %7, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L10CMPXCHG_AXI3MnWItE2MnItE2RnItEEEP6MemoryS8_R5StateT_T0_T1_(%struct.Memory*, %struct.State* nocapture dereferenceable(3376), i64, i64, i64)  {
  %6 = alloca i16, align 2
  %7 = trunc i64 %4 to i16
  %8 = bitcast i16* %6 to i8*
  call void @llvm.lifetime.start(i64 2, i8* nonnull %8) 
  %9 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 1, i32 0
  %10 = bitcast %union.anon* %9 to i16*
  %11 = load i16, i16* %10, align 8
  store i16 %11, i16* %6, align 2
  %12 = call %struct.Memory* @__remill_compare_exchange_memory_16(%struct.Memory* %0, i64 %2, i16* nonnull dereferenceable(2) %6, i16 zeroext %7) 
  %13 = load i16, i16* %6, align 2
  %14 = icmp eq i16 %11, %13
  %15 = zext i1 %14 to i8
  %16 = sub i16 %11, %13
  %17 = icmp ult i16 %11, %13
  %18 = zext i1 %17 to i8
  %19 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  store i8 %18, i8* %19, align 1
  %20 = and i16 %16, 255
  %21 = zext i16 %20 to i32
  %22 = call i32 @llvm.ctpop.i32(i32 %21) 
  %23 = trunc i32 %22 to i8
  %24 = and i8 %23, 1
  %25 = xor i8 %24, 1
  %26 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 %25, i8* %26, align 1
  %27 = xor i16 %13, %11
  %28 = xor i16 %27, %16
  %29 = lshr i16 %28, 4
  %30 = trunc i16 %29 to i8
  %31 = and i8 %30, 1
  %32 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 %31, i8* %32, align 1
  %33 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  %34 = lshr i16 %16, 15
  %35 = trunc i16 %34 to i8
  %36 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 %35, i8* %36, align 1
  %37 = lshr i16 %11, 15
  %38 = lshr i16 %13, 15
  %39 = xor i16 %38, %37
  %40 = xor i16 %34, %37
  %41 = add nuw nsw i16 %40, %39
  %42 = icmp eq i16 %41, 2
  %43 = zext i1 %42 to i8
  %44 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 %43, i8* %44, align 1
  store i8 %15, i8* %33, align 1
  store i16 %13, i16* %10, align 2
  call void @llvm.lifetime.end(i64 2, i8* nonnull %8) 
  ret %struct.Memory* %12
}

declare %struct.Memory* @__remill_compare_exchange_memory_16(%struct.Memory*, i64, i16* dereferenceable(2), i16 zeroext) 

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L10CMPXCHG_AXI3RnWItE2RnItES4_EEP6MemoryS6_R5StateT_T0_T1_(%struct.Memory*, %struct.State* nocapture dereferenceable(3376), i16* nocapture, i64, i64)  {
  %6 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 1, i32 0
  %7 = bitcast %union.anon* %6 to i16*
  %8 = load i16, i16* %7, align 8
  %9 = load i16, i16* %2, align 2
  %10 = icmp eq i16 %9, %8
  br i1 %10, label %11, label %13

; <label>:11:                                     ; preds = %5
  %12 = trunc i64 %4 to i16
  store i16 %12, i16* %2, align 2
  br label %13

; <label>:13:                                     ; preds = %11, %5
  %14 = phi i16 [ %8, %11 ], [ %9, %5 ]
  %15 = phi i8 [ 1, %11 ], [ 0, %5 ]
  %16 = sub i16 %8, %14
  %17 = icmp ult i16 %8, %14
  %18 = zext i1 %17 to i8
  %19 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  store i8 %18, i8* %19, align 1
  %20 = and i16 %16, 255
  %21 = zext i16 %20 to i32
  %22 = tail call i32 @llvm.ctpop.i32(i32 %21) 
  %23 = trunc i32 %22 to i8
  %24 = and i8 %23, 1
  %25 = xor i8 %24, 1
  %26 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 %25, i8* %26, align 1
  %27 = xor i16 %14, %8
  %28 = xor i16 %27, %16
  %29 = lshr i16 %28, 4
  %30 = trunc i16 %29 to i8
  %31 = and i8 %30, 1
  %32 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 %31, i8* %32, align 1
  %33 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  %34 = lshr i16 %16, 15
  %35 = trunc i16 %34 to i8
  %36 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 %35, i8* %36, align 1
  %37 = lshr i16 %8, 15
  %38 = lshr i16 %14, 15
  %39 = xor i16 %38, %37
  %40 = xor i16 %34, %37
  %41 = add nuw nsw i16 %40, %39
  %42 = icmp eq i16 %41, 2
  %43 = zext i1 %42 to i8
  %44 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 %43, i8* %44, align 1
  store i8 %15, i8* %33, align 1
  store i16 %14, i16* %7, align 2
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L11CMPXCHG_EAXI3MnWIjE2MnIjE2RnIjEEEP6MemoryS8_R5StateT_T0_T1_(%struct.Memory*, %struct.State* nocapture dereferenceable(3376), i64, i64, i64)  {
  %6 = alloca i32, align 4
  %7 = trunc i64 %4 to i32
  %8 = bitcast i32* %6 to i8*
  call void @llvm.lifetime.start(i64 4, i8* nonnull %8) 
  %9 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 1, i32 0
  %10 = bitcast %union.anon* %9 to i32*
  %11 = load i32, i32* %10, align 8
  store i32 %11, i32* %6, align 4
  %12 = call %struct.Memory* @__remill_compare_exchange_memory_32(%struct.Memory* %0, i64 %2, i32* nonnull dereferenceable(4) %6, i32 %7) 
  %13 = load i32, i32* %6, align 4
  %14 = icmp eq i32 %11, %13
  %15 = zext i1 %14 to i8
  %16 = sub i32 %11, %13
  %17 = icmp ult i32 %11, %13
  %18 = zext i1 %17 to i8
  %19 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  store i8 %18, i8* %19, align 1
  %20 = and i32 %16, 255
  %21 = call i32 @llvm.ctpop.i32(i32 %20) 
  %22 = trunc i32 %21 to i8
  %23 = and i8 %22, 1
  %24 = xor i8 %23, 1
  %25 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 %24, i8* %25, align 1
  %26 = xor i32 %13, %11
  %27 = xor i32 %26, %16
  %28 = lshr i32 %27, 4
  %29 = trunc i32 %28 to i8
  %30 = and i8 %29, 1
  %31 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 %30, i8* %31, align 1
  %32 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  %33 = lshr i32 %16, 31
  %34 = trunc i32 %33 to i8
  %35 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 %34, i8* %35, align 1
  %36 = lshr i32 %11, 31
  %37 = lshr i32 %13, 31
  %38 = xor i32 %37, %36
  %39 = xor i32 %33, %36
  %40 = add nuw nsw i32 %39, %38
  %41 = icmp eq i32 %40, 2
  %42 = zext i1 %41 to i8
  %43 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 %42, i8* %43, align 1
  store i8 %15, i8* %32, align 1
  store i32 %13, i32* %10, align 4
  call void @llvm.lifetime.end(i64 4, i8* nonnull %8) 
  ret %struct.Memory* %12
}

declare %struct.Memory* @__remill_compare_exchange_memory_32(%struct.Memory*, i64, i32* dereferenceable(4), i32) 

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L11CMPXCHG_EAXI3RnWImE2RnIjES4_EEP6MemoryS6_R5StateT_T0_T1_(%struct.Memory*, %struct.State* nocapture dereferenceable(3376), i64* nocapture, i64, i64)  {
  %6 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 1, i32 0
  %7 = bitcast %union.anon* %6 to i32*
  %8 = load i32, i32* %7, align 8
  %9 = load i64, i64* %2, align 8
  %10 = zext i32 %8 to i64
  %11 = icmp eq i64 %9, %10
  br i1 %11, label %12, label %14

; <label>:12:                                     ; preds = %5
  %13 = and i64 %4, 4294967295
  store i64 %13, i64* %2, align 8
  br label %16

; <label>:14:                                     ; preds = %5
  %15 = trunc i64 %9 to i32
  br label %16

; <label>:16:                                     ; preds = %14, %12
  %17 = phi i32 [ %8, %12 ], [ %15, %14 ]
  %18 = phi i8 [ 1, %12 ], [ 0, %14 ]
  %19 = sub i32 %8, %17
  %20 = icmp ult i32 %8, %17
  %21 = zext i1 %20 to i8
  %22 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  store i8 %21, i8* %22, align 1
  %23 = and i32 %19, 255
  %24 = tail call i32 @llvm.ctpop.i32(i32 %23) 
  %25 = trunc i32 %24 to i8
  %26 = and i8 %25, 1
  %27 = xor i8 %26, 1
  %28 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 %27, i8* %28, align 1
  %29 = xor i32 %17, %8
  %30 = xor i32 %29, %19
  %31 = lshr i32 %30, 4
  %32 = trunc i32 %31 to i8
  %33 = and i8 %32, 1
  %34 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 %33, i8* %34, align 1
  %35 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  %36 = lshr i32 %19, 31
  %37 = trunc i32 %36 to i8
  %38 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 %37, i8* %38, align 1
  %39 = lshr i32 %8, 31
  %40 = lshr i32 %17, 31
  %41 = xor i32 %40, %39
  %42 = xor i32 %36, %39
  %43 = add nuw nsw i32 %42, %41
  %44 = icmp eq i32 %43, 2
  %45 = zext i1 %44 to i8
  %46 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 %45, i8* %46, align 1
  store i8 %18, i8* %35, align 1
  store i32 %17, i32* %7, align 4
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L11CMPXCHG_RAXI3MnWImE2MnImE2RnImEEEP6MemoryS8_R5StateT_T0_T1_(%struct.Memory*, %struct.State* nocapture dereferenceable(3376), i64, i64, i64)  {
  %6 = alloca i64, align 8
  %7 = bitcast i64* %6 to i8*
  call void @llvm.lifetime.start(i64 8, i8* nonnull %7) 
  %8 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 1, i32 0, i32 0
  %9 = load i64, i64* %8, align 8
  store i64 %9, i64* %6, align 8
  %10 = call %struct.Memory* @__remill_compare_exchange_memory_64(%struct.Memory* %0, i64 %2, i64* nonnull dereferenceable(8) %6, i64 %4) 
  %11 = load i64, i64* %6, align 8
  %12 = icmp eq i64 %9, %11
  %13 = zext i1 %12 to i8
  %14 = sub i64 %9, %11
  %15 = icmp ult i64 %9, %11
  %16 = zext i1 %15 to i8
  %17 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  store i8 %16, i8* %17, align 1
  %18 = trunc i64 %14 to i32
  %19 = and i32 %18, 255
  %20 = call i32 @llvm.ctpop.i32(i32 %19) 
  %21 = trunc i32 %20 to i8
  %22 = and i8 %21, 1
  %23 = xor i8 %22, 1
  %24 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 %23, i8* %24, align 1
  %25 = xor i64 %11, %9
  %26 = xor i64 %25, %14
  %27 = lshr i64 %26, 4
  %28 = trunc i64 %27 to i8
  %29 = and i8 %28, 1
  %30 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 %29, i8* %30, align 1
  %31 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  %32 = lshr i64 %14, 63
  %33 = trunc i64 %32 to i8
  %34 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 %33, i8* %34, align 1
  %35 = lshr i64 %9, 63
  %36 = lshr i64 %11, 63
  %37 = xor i64 %36, %35
  %38 = xor i64 %32, %35
  %39 = add nuw nsw i64 %38, %37
  %40 = icmp eq i64 %39, 2
  %41 = zext i1 %40 to i8
  %42 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 %41, i8* %42, align 1
  store i8 %13, i8* %31, align 1
  store i64 %11, i64* %8, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %7) 
  ret %struct.Memory* %10
}

declare %struct.Memory* @__remill_compare_exchange_memory_64(%struct.Memory*, i64, i64* dereferenceable(8), i64) 

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L11CMPXCHG_RAXI3RnWImE2RnImES4_EEP6MemoryS6_R5StateT_T0_T1_(%struct.Memory*, %struct.State* nocapture dereferenceable(3376), i64* nocapture, i64, i64)  {
  %6 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 1, i32 0, i32 0
  %7 = load i64, i64* %6, align 8
  %8 = load i64, i64* %2, align 8
  %9 = icmp eq i64 %8, %7
  br i1 %9, label %10, label %11

; <label>:10:                                     ; preds = %5
  store i64 %4, i64* %2, align 8
  br label %11

; <label>:11:                                     ; preds = %10, %5
  %12 = phi i64 [ %7, %10 ], [ %8, %5 ]
  %13 = phi i8 [ 1, %10 ], [ 0, %5 ]
  %14 = sub i64 %7, %12
  %15 = icmp ult i64 %7, %12
  %16 = zext i1 %15 to i8
  %17 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  store i8 %16, i8* %17, align 1
  %18 = trunc i64 %14 to i32
  %19 = and i32 %18, 255
  %20 = tail call i32 @llvm.ctpop.i32(i32 %19) 
  %21 = trunc i32 %20 to i8
  %22 = and i8 %21, 1
  %23 = xor i8 %22, 1
  %24 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 %23, i8* %24, align 1
  %25 = xor i64 %12, %7
  %26 = xor i64 %25, %14
  %27 = lshr i64 %26, 4
  %28 = trunc i64 %27 to i8
  %29 = and i8 %28, 1
  %30 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 %29, i8* %30, align 1
  %31 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  %32 = lshr i64 %14, 63
  %33 = trunc i64 %32 to i8
  %34 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 %33, i8* %34, align 1
  %35 = lshr i64 %7, 63
  %36 = lshr i64 %12, 63
  %37 = xor i64 %36, %35
  %38 = xor i64 %32, %35
  %39 = add nuw nsw i64 %38, %37
  %40 = icmp eq i64 %39, 2
  %41 = zext i1 %40 to i8
  %42 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 %41, i8* %42, align 1
  store i8 %13, i8* %31, align 1
  store i64 %12, i64* %6, align 8
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L16DoCMPXCHG8B_MEMqEP6MemoryR5State3MnWImE2MnImE(%struct.Memory*, %struct.State* nocapture dereferenceable(3376), i64, i64)  {
  %5 = alloca i64, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 7, i32 0
  %7 = bitcast %union.anon* %6 to i32*
  %8 = load i32, i32* %7, align 8
  %9 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 1, i32 0
  %10 = bitcast %union.anon* %9 to i32*
  %11 = load i32, i32* %10, align 8
  %12 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 5, i32 0
  %13 = bitcast %union.anon* %12 to i32*
  %14 = load i32, i32* %13, align 8
  %15 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 3, i32 0
  %16 = bitcast %union.anon* %15 to i32*
  %17 = load i32, i32* %16, align 8
  %18 = zext i32 %14 to i64
  %19 = shl nuw i64 %18, 32
  %20 = zext i32 %17 to i64
  %21 = or i64 %20, %19
  %22 = bitcast i64* %5 to i8*
  call void @llvm.lifetime.start(i64 8, i8* nonnull %22) 
  %23 = zext i32 %8 to i64
  %24 = shl nuw i64 %23, 32
  %25 = zext i32 %11 to i64
  %26 = or i64 %25, %24
  store i64 %26, i64* %5, align 8
  %27 = call %struct.Memory* @__remill_compare_exchange_memory_64(%struct.Memory* %0, i64 %2, i64* nonnull dereferenceable(8) %5, i64 %21) 
  %28 = load i64, i64* %5, align 8
  %29 = icmp eq i64 %26, %28
  %30 = zext i1 %29 to i8
  %31 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  store i8 %30, i8* %31, align 1
  %32 = lshr i64 %28, 32
  %33 = trunc i64 %32 to i32
  store i32 %33, i32* %7, align 4
  %34 = trunc i64 %28 to i32
  store i32 %34, i32* %10, align 4
  call void @llvm.lifetime.end(i64 8, i8* nonnull %22) 
  ret %struct.Memory* %27
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L18DoCMPXCHG16B_MEMdqEP6MemoryR5State3MnWIoE2MnIoE(%struct.Memory*, %struct.State* nocapture dereferenceable(3376), i64, i64)  {
  %5 = alloca i128, align 16
  %6 = alloca i128, align 16
  %7 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 7, i32 0, i32 0
  %8 = load i64, i64* %7, align 8
  %9 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 1, i32 0, i32 0
  %10 = load i64, i64* %9, align 8
  %11 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 5, i32 0, i32 0
  %12 = load i64, i64* %11, align 8
  %13 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 3, i32 0, i32 0
  %14 = load i64, i64* %13, align 8
  %15 = bitcast i128* %6 to i8*
  call void @llvm.lifetime.start(i64 16, i8* nonnull %15) 
  %16 = zext i64 %8 to i128
  %17 = shl nuw i128 %16, 64
  %18 = zext i64 %10 to i128
  %19 = or i128 %17, %18
  store i128 %19, i128* %6, align 16
  %20 = bitcast i128* %5 to i8*
  call void @llvm.lifetime.start(i64 16, i8* nonnull %20)
  %21 = zext i64 %12 to i128
  %22 = shl nuw i128 %21, 64
  %23 = zext i64 %14 to i128
  %24 = or i128 %22, %23
  store i128 %24, i128* %5, align 16
  %25 = call %struct.Memory* @__remill_compare_exchange_memory_128(%struct.Memory* %0, i64 %2, i128* nonnull dereferenceable(16) %6, i128* nonnull dereferenceable(16) %5) 
  %26 = load i128, i128* %6, align 16
  %27 = icmp eq i128 %19, %26
  call void @llvm.lifetime.end(i64 16, i8* nonnull %20)
  %28 = zext i1 %27 to i8
  %29 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  store i8 %28, i8* %29, align 1
  %30 = lshr i128 %26, 64
  %31 = trunc i128 %30 to i64
  store i64 %31, i64* %7, align 8
  %32 = trunc i128 %26 to i64
  store i64 %32, i64* %9, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %15) 
  ret %struct.Memory* %25
}

declare %struct.Memory* @__remill_compare_exchange_memory_128(%struct.Memory*, i64, i128* dereferenceable(16), i128* dereferenceable(16)) local_unnamed_addr 

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L4XADDI3MnWIhE2MnIhE3RnWIhE2RnIhEEEP6MemorySA_R5StateT_T0_T1_T2_(%struct.Memory*, %struct.State* nocapture dereferenceable(3376), i64, i64, i8* nocapture, i64)  {
  %7 = alloca i8, align 1
  %8 = trunc i64 %5 to i8
  call void @llvm.lifetime.start(i64 1, i8* nonnull %7)
  store i8 %8, i8* %7, align 1
  %9 = call %struct.Memory* @__remill_fetch_and_add_8(%struct.Memory* %0, i64 %2, i8* nonnull dereferenceable(1) %7) 
  %10 = load i8, i8* %7, align 1
  call void @llvm.lifetime.end(i64 1, i8* nonnull %7)
  %11 = add i8 %10, %8
  %12 = icmp ult i8 %11, %8
  %13 = icmp ult i8 %11, %10
  %14 = or i1 %12, %13
  %15 = zext i1 %14 to i8
  %16 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  store i8 %15, i8* %16, align 1
  %17 = zext i8 %11 to i32
  %18 = call i32 @llvm.ctpop.i32(i32 %17) 
  %19 = trunc i32 %18 to i8
  %20 = and i8 %19, 1
  %21 = xor i8 %20, 1
  %22 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 %21, i8* %22, align 1
  %23 = xor i8 %10, %8
  %24 = xor i8 %23, %11
  %25 = lshr i8 %24, 4
  %26 = and i8 %25, 1
  %27 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 %26, i8* %27, align 1
  %28 = icmp eq i8 %11, 0
  %29 = zext i1 %28 to i8
  %30 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  store i8 %29, i8* %30, align 1
  %31 = lshr i8 %11, 7
  %32 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 %31, i8* %32, align 1
  %33 = lshr i8 %8, 7
  %34 = lshr i8 %10, 7
  %35 = xor i8 %31, %33
  %36 = xor i8 %31, %34
  %37 = add nuw nsw i8 %35, %36
  %38 = icmp eq i8 %37, 2
  %39 = zext i1 %38 to i8
  %40 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 %39, i8* %40, align 1
  store i8 %10, i8* %4, align 1
  ret %struct.Memory* %9
}

declare %struct.Memory* @__remill_fetch_and_add_8(%struct.Memory*, i64, i8* dereferenceable(1)) 

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L4XADDI3RnWIhE2RnIhES2_S4_EEP6MemoryS6_R5StateT_T0_T1_T2_(%struct.Memory*, %struct.State* nocapture dereferenceable(3376), i8* nocapture, i64, i8* nocapture, i64)  {
  %7 = trunc i64 %5 to i8
  %8 = load i8, i8* %2, align 1
  %9 = add i8 %8, %7
  store i8 %9, i8* %2, align 1
  %10 = icmp ult i8 %9, %7
  %11 = icmp ult i8 %9, %8
  %12 = or i1 %10, %11
  %13 = zext i1 %12 to i8
  %14 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  store i8 %13, i8* %14, align 1
  %15 = zext i8 %9 to i32
  %16 = tail call i32 @llvm.ctpop.i32(i32 %15) 
  %17 = trunc i32 %16 to i8
  %18 = and i8 %17, 1
  %19 = xor i8 %18, 1
  %20 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 %19, i8* %20, align 1
  %21 = xor i8 %8, %7
  %22 = xor i8 %21, %9
  %23 = lshr i8 %22, 4
  %24 = and i8 %23, 1
  %25 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 %24, i8* %25, align 1
  %26 = icmp eq i8 %9, 0
  %27 = zext i1 %26 to i8
  %28 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  store i8 %27, i8* %28, align 1
  %29 = lshr i8 %9, 7
  %30 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 %29, i8* %30, align 1
  %31 = lshr i8 %7, 7
  %32 = lshr i8 %8, 7
  %33 = xor i8 %29, %31
  %34 = xor i8 %29, %32
  %35 = add nuw nsw i8 %33, %34
  %36 = icmp eq i8 %35, 2
  %37 = zext i1 %36 to i8
  %38 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 %37, i8* %38, align 1
  store i8 %8, i8* %4, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L4XADDI3MnWItE2MnItE3RnWItE2RnItEEEP6MemorySA_R5StateT_T0_T1_T2_(%struct.Memory*, %struct.State* nocapture dereferenceable(3376), i64, i64, i16* nocapture, i64)  {
  %7 = alloca i16, align 2
  %8 = trunc i64 %5 to i16
  %9 = bitcast i16* %7 to i8*
  call void @llvm.lifetime.start(i64 2, i8* nonnull %9)
  store i16 %8, i16* %7, align 2
  %10 = call %struct.Memory* @__remill_fetch_and_add_16(%struct.Memory* %0, i64 %2, i16* nonnull dereferenceable(2) %7) 
  %11 = load i16, i16* %7, align 2
  call void @llvm.lifetime.end(i64 2, i8* nonnull %9)
  %12 = add i16 %11, %8
  %13 = icmp ult i16 %12, %8
  %14 = icmp ult i16 %12, %11
  %15 = or i1 %13, %14
  %16 = zext i1 %15 to i8
  %17 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  store i8 %16, i8* %17, align 1
  %18 = and i16 %12, 255
  %19 = zext i16 %18 to i32
  %20 = call i32 @llvm.ctpop.i32(i32 %19) 
  %21 = trunc i32 %20 to i8
  %22 = and i8 %21, 1
  %23 = xor i8 %22, 1
  %24 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 %23, i8* %24, align 1
  %25 = xor i16 %11, %8
  %26 = xor i16 %25, %12
  %27 = lshr i16 %26, 4
  %28 = trunc i16 %27 to i8
  %29 = and i8 %28, 1
  %30 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 %29, i8* %30, align 1
  %31 = icmp eq i16 %12, 0
  %32 = zext i1 %31 to i8
  %33 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  store i8 %32, i8* %33, align 1
  %34 = lshr i16 %12, 15
  %35 = trunc i16 %34 to i8
  %36 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 %35, i8* %36, align 1
  %37 = lshr i16 %8, 15
  %38 = lshr i16 %11, 15
  %39 = xor i16 %34, %37
  %40 = xor i16 %34, %38
  %41 = add nuw nsw i16 %39, %40
  %42 = icmp eq i16 %41, 2
  %43 = zext i1 %42 to i8
  %44 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 %43, i8* %44, align 1
  store i16 %11, i16* %4, align 2
  ret %struct.Memory* %10
}

declare %struct.Memory* @__remill_fetch_and_add_16(%struct.Memory*, i64, i16* dereferenceable(2)) 

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L4XADDI3MnWIjE2MnIjE3RnWImE2RnIjEEEP6MemorySA_R5StateT_T0_T1_T2_(%struct.Memory*, %struct.State* nocapture dereferenceable(3376), i64, i64, i64* nocapture, i64)  {
  %7 = alloca i32, align 4
  %8 = trunc i64 %5 to i32
  %9 = bitcast i32* %7 to i8*
  call void @llvm.lifetime.start(i64 4, i8* nonnull %9)
  store i32 %8, i32* %7, align 4
  %10 = call %struct.Memory* @__remill_fetch_and_add_32(%struct.Memory* %0, i64 %2, i32* nonnull dereferenceable(4) %7) 
  %11 = load i32, i32* %7, align 4
  call void @llvm.lifetime.end(i64 4, i8* nonnull %9)
  %12 = add i32 %11, %8
  %13 = icmp ult i32 %12, %8
  %14 = icmp ult i32 %12, %11
  %15 = or i1 %13, %14
  %16 = zext i1 %15 to i8
  %17 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  store i8 %16, i8* %17, align 1
  %18 = and i32 %12, 255
  %19 = call i32 @llvm.ctpop.i32(i32 %18) 
  %20 = trunc i32 %19 to i8
  %21 = and i8 %20, 1
  %22 = xor i8 %21, 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 %22, i8* %23, align 1
  %24 = xor i32 %11, %8
  %25 = xor i32 %24, %12
  %26 = lshr i32 %25, 4
  %27 = trunc i32 %26 to i8
  %28 = and i8 %27, 1
  %29 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 %28, i8* %29, align 1
  %30 = icmp eq i32 %12, 0
  %31 = zext i1 %30 to i8
  %32 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  store i8 %31, i8* %32, align 1
  %33 = lshr i32 %12, 31
  %34 = trunc i32 %33 to i8
  %35 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 %34, i8* %35, align 1
  %36 = lshr i32 %8, 31
  %37 = lshr i32 %11, 31
  %38 = xor i32 %33, %36
  %39 = xor i32 %33, %37
  %40 = add nuw nsw i32 %38, %39
  %41 = icmp eq i32 %40, 2
  %42 = zext i1 %41 to i8
  %43 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 %42, i8* %43, align 1
  %44 = zext i32 %11 to i64
  store i64 %44, i64* %4, align 8
  ret %struct.Memory* %10
}

declare %struct.Memory* @__remill_fetch_and_add_32(%struct.Memory*, i64, i32* dereferenceable(4)) 

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L4XADDI3MnWImE2MnImE3RnWImE2RnImEEEP6MemorySA_R5StateT_T0_T1_T2_(%struct.Memory*, %struct.State* nocapture dereferenceable(3376), i64, i64, i64* nocapture, i64)  {
  %7 = alloca i64, align 8
  %8 = bitcast i64* %7 to i8*
  call void @llvm.lifetime.start(i64 8, i8* nonnull %8)
  store i64 %5, i64* %7, align 8
  %9 = call %struct.Memory* @__remill_fetch_and_add_64(%struct.Memory* %0, i64 %2, i64* nonnull dereferenceable(8) %7) 
  %10 = load i64, i64* %7, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %8)
  %11 = add i64 %10, %5
  %12 = icmp ult i64 %11, %5
  %13 = icmp ult i64 %11, %10
  %14 = or i1 %12, %13
  %15 = zext i1 %14 to i8
  %16 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  store i8 %15, i8* %16, align 1
  %17 = trunc i64 %11 to i32
  %18 = and i32 %17, 255
  %19 = call i32 @llvm.ctpop.i32(i32 %18) 
  %20 = trunc i32 %19 to i8
  %21 = and i8 %20, 1
  %22 = xor i8 %21, 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 %22, i8* %23, align 1
  %24 = xor i64 %10, %5
  %25 = xor i64 %24, %11
  %26 = lshr i64 %25, 4
  %27 = trunc i64 %26 to i8
  %28 = and i8 %27, 1
  %29 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 %28, i8* %29, align 1
  %30 = icmp eq i64 %11, 0
  %31 = zext i1 %30 to i8
  %32 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  store i8 %31, i8* %32, align 1
  %33 = lshr i64 %11, 63
  %34 = trunc i64 %33 to i8
  %35 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 %34, i8* %35, align 1
  %36 = lshr i64 %5, 63
  %37 = lshr i64 %10, 63
  %38 = xor i64 %33, %36
  %39 = xor i64 %33, %37
  %40 = add nuw nsw i64 %38, %39
  %41 = icmp eq i64 %40, 2
  %42 = zext i1 %41 to i8
  %43 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 %42, i8* %43, align 1
  store i64 %10, i64* %4, align 8
  ret %struct.Memory* %9
}

declare %struct.Memory* @__remill_fetch_and_add_64(%struct.Memory*, i64, i64* dereferenceable(8)) 

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L4XADDI3RnWItE2RnItES2_S4_EEP6MemoryS6_R5StateT_T0_T1_T2_(%struct.Memory*, %struct.State* nocapture dereferenceable(3376), i16* nocapture, i64, i16* nocapture, i64)  {
  %7 = trunc i64 %5 to i16
  %8 = load i16, i16* %2, align 2
  %9 = add i16 %8, %7
  store i16 %9, i16* %2, align 2
  %10 = icmp ult i16 %9, %7
  %11 = icmp ult i16 %9, %8
  %12 = or i1 %10, %11
  %13 = zext i1 %12 to i8
  %14 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  store i8 %13, i8* %14, align 1
  %15 = and i16 %9, 255
  %16 = zext i16 %15 to i32
  %17 = tail call i32 @llvm.ctpop.i32(i32 %16) 
  %18 = trunc i32 %17 to i8
  %19 = and i8 %18, 1
  %20 = xor i8 %19, 1
  %21 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 %20, i8* %21, align 1
  %22 = xor i16 %8, %7
  %23 = xor i16 %22, %9
  %24 = lshr i16 %23, 4
  %25 = trunc i16 %24 to i8
  %26 = and i8 %25, 1
  %27 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 %26, i8* %27, align 1
  %28 = icmp eq i16 %9, 0
  %29 = zext i1 %28 to i8
  %30 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  store i8 %29, i8* %30, align 1
  %31 = lshr i16 %9, 15
  %32 = trunc i16 %31 to i8
  %33 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 %32, i8* %33, align 1
  %34 = lshr i16 %7, 15
  %35 = lshr i16 %8, 15
  %36 = xor i16 %31, %34
  %37 = xor i16 %31, %35
  %38 = add nuw nsw i16 %36, %37
  %39 = icmp eq i16 %38, 2
  %40 = zext i1 %39 to i8
  %41 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 %40, i8* %41, align 1
  store i16 %8, i16* %4, align 2
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L4XADDI3RnWImE2RnIjES2_S4_EEP6MemoryS6_R5StateT_T0_T1_T2_(%struct.Memory*, %struct.State* nocapture dereferenceable(3376), i64* nocapture, i64, i64* nocapture, i64)  {
  %7 = trunc i64 %5 to i32
  %8 = bitcast i64* %2 to i32*
  %9 = load i32, i32* %8, align 4
  %10 = add i32 %9, %7
  %11 = zext i32 %10 to i64
  store i64 %11, i64* %2, align 8
  %12 = icmp ult i32 %10, %7
  %13 = icmp ult i32 %10, %9
  %14 = or i1 %12, %13
  %15 = zext i1 %14 to i8
  %16 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  store i8 %15, i8* %16, align 1
  %17 = and i32 %10, 255
  %18 = tail call i32 @llvm.ctpop.i32(i32 %17) 
  %19 = trunc i32 %18 to i8
  %20 = and i8 %19, 1
  %21 = xor i8 %20, 1
  %22 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 %21, i8* %22, align 1
  %23 = xor i32 %9, %7
  %24 = xor i32 %23, %10
  %25 = lshr i32 %24, 4
  %26 = trunc i32 %25 to i8
  %27 = and i8 %26, 1
  %28 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 %27, i8* %28, align 1
  %29 = icmp eq i32 %10, 0
  %30 = zext i1 %29 to i8
  %31 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  store i8 %30, i8* %31, align 1
  %32 = lshr i32 %10, 31
  %33 = trunc i32 %32 to i8
  %34 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 %33, i8* %34, align 1
  %35 = lshr i32 %7, 31
  %36 = lshr i32 %9, 31
  %37 = xor i32 %32, %35
  %38 = xor i32 %32, %36
  %39 = add nuw nsw i32 %37, %38
  %40 = icmp eq i32 %39, 2
  %41 = zext i1 %40 to i8
  %42 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 %41, i8* %42, align 1
  %43 = zext i32 %9 to i64
  store i64 %43, i64* %4, align 8
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L4XADDI3RnWImE2RnImES2_S4_EEP6MemoryS6_R5StateT_T0_T1_T2_(%struct.Memory*, %struct.State* nocapture dereferenceable(3376), i64* nocapture, i64, i64* nocapture, i64)  {
  %7 = load i64, i64* %2, align 8
  %8 = add i64 %7, %5
  store i64 %8, i64* %2, align 8
  %9 = icmp ult i64 %8, %5
  %10 = icmp ult i64 %8, %7
  %11 = or i1 %9, %10
  %12 = zext i1 %11 to i8
  %13 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  store i8 %12, i8* %13, align 1
  %14 = trunc i64 %8 to i32
  %15 = and i32 %14, 255
  %16 = tail call i32 @llvm.ctpop.i32(i32 %15) 
  %17 = trunc i32 %16 to i8
  %18 = and i8 %17, 1
  %19 = xor i8 %18, 1
  %20 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 %19, i8* %20, align 1
  %21 = xor i64 %7, %5
  %22 = xor i64 %21, %8
  %23 = lshr i64 %22, 4
  %24 = trunc i64 %23 to i8
  %25 = and i8 %24, 1
  %26 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 %25, i8* %26, align 1
  %27 = icmp eq i64 %8, 0
  %28 = zext i1 %27 to i8
  %29 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  store i8 %28, i8* %29, align 1
  %30 = lshr i64 %8, 63
  %31 = trunc i64 %30 to i8
  %32 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 %31, i8* %32, align 1
  %33 = lshr i64 %5, 63
  %34 = lshr i64 %7, 63
  %35 = xor i64 %30, %33
  %36 = xor i64 %30, %34
  %37 = add nuw nsw i64 %35, %36
  %38 = icmp eq i64 %37, 2
  %39 = zext i1 %38 to i8
  %40 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 %39, i8* %40, align 1
  store i64 %7, i64* %4, align 8
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3SHRI3MnWIhE2MnIhE2InIhEEEP6MemoryS8_R5StateT_T0_T1_(%struct.Memory*, %struct.State* nocapture dereferenceable(3376), i64, i64, i64)  {
  %6 = inttoptr i64 %3 to i8*
  %7 = load i8, i8* %6
  %8 = trunc i64 %4 to i8
  %9 = and i8 %8, 31
  %10 = trunc i64 %4 to i5
  switch i5 %10, label %15 [
    i5 0, label %51
    i5 1, label %11
  ]

; <label>:11:                                     ; preds = %5
  %12 = lshr i8 %7, 7
  %13 = and i8 %7, 1
  %14 = lshr i8 %7, 1
  br label %32

; <label>:15:                                     ; preds = %5
  %16 = icmp ult i8 %9, 8
  br i1 %16, label %17, label %29

; <label>:17:                                     ; preds = %15
  %18 = add nsw i8 %9, -1
  %19 = zext i8 %7 to i64
  %20 = zext i8 %18 to i64
  %21 = lshr i64 %19, %20
  %22 = trunc i64 %21 to i8
  %23 = icmp ne i8 0, 0
  %24 = zext i1 %23 to i8
  %25 = and i8 %22, 1
  %26 = lshr i64 %21, 1
  %27 = trunc i64 %26 to i8
  %28 = and i8 %27, 127
  br label %32

; <label>:29:                                     ; preds = %15
  %30 = icmp ne i8 0, 0
  %31 = zext i1 %30 to i8
  br label %32

; <label>:32:                                     ; preds = %29, %17, %11
  %33 = phi i8 [ 0, %17 ], [ 0, %29 ], [ 0, %11 ]
  %34 = phi i8 [ %28, %17 ], [ 0, %29 ], [ %14, %11 ]
  %35 = phi i8 [ %24, %17 ], [ %31, %29 ], [ %12, %11 ]
  %36 = phi i8 [ %25, %17 ], [ %31, %29 ], [ %13, %11 ]
  %37 = inttoptr i64 %2 to i8*
  store i8 %34, i8* %37
  %38 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  store i8 %36, i8* %38, align 1
  %39 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  %40 = zext i8 %34 to i32
  %41 = tail call i32 @llvm.ctpop.i32(i32 %40) 
  %42 = trunc i32 %41 to i8
  %43 = and i8 %42, 1
  %44 = xor i8 %43, 1
  store i8 %44, i8* %39, align 1
  %45 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 %33, i8* %45, align 1
  %46 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  %47 = icmp eq i8 %34, 0
  %48 = zext i1 %47 to i8
  store i8 %48, i8* %46, align 1
  %49 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 0, i8* %49, align 1
  %50 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 %35, i8* %50, align 1
  br label %51

; <label>:51:                                     ; preds = %32, %5
  %52 = phi %struct.Memory* [ %0, %32 ], [ %0, %5 ]
  ret %struct.Memory* %52
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3SHRI3RnWIhE2RnIhE2InIhEEEP6MemoryS8_R5StateT_T0_T1_(%struct.Memory* readnone, %struct.State* nocapture dereferenceable(3376), i8* nocapture, i64, i64)  {
  %6 = trunc i64 %3 to i8
  %7 = trunc i64 %4 to i8
  %8 = and i8 %7, 31
  %9 = trunc i64 %4 to i5
  switch i5 %9, label %16 [
    i5 0, label %51
    i5 1, label %10
  ]

; <label>:10:                                     ; preds = %5
  %11 = lshr i8 %6, 7
  %12 = and i8 %6, 1
  %13 = lshr i64 %3, 1
  %14 = trunc i64 %13 to i8
  %15 = and i8 %14, 127
  br label %33

; <label>:16:                                     ; preds = %5
  %17 = icmp ult i8 %8, 8
  br i1 %17, label %18, label %30

; <label>:18:                                     ; preds = %16
  %19 = add nsw i8 %8, -1
  %20 = and i64 %3, 255
  %21 = zext i8 %19 to i64
  %22 = lshr i64 %20, %21
  %23 = trunc i64 %22 to i8
  %24 = icmp ne i8 0, 0
  %25 = zext i1 %24 to i8
  %26 = and i8 %23, 1
  %27 = lshr i64 %22, 1
  %28 = trunc i64 %27 to i8
  %29 = and i8 %28, 127
  br label %33

; <label>:30:                                     ; preds = %16
  %31 = icmp ne i8 0, 0
  %32 = zext i1 %31 to i8
  br label %33

; <label>:33:                                     ; preds = %30, %18, %10
  %34 = phi i8 [ 0, %18 ], [ 0, %30 ], [ 0, %10 ]
  %35 = phi i8 [ %29, %18 ], [ 0, %30 ], [ %15, %10 ]
  %36 = phi i8 [ %25, %18 ], [ %32, %30 ], [ %11, %10 ]
  %37 = phi i8 [ %26, %18 ], [ %32, %30 ], [ %12, %10 ]
  store i8 %35, i8* %2, align 1
  %38 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  store i8 %37, i8* %38, align 1
  %39 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  %40 = zext i8 %35 to i32
  %41 = tail call i32 @llvm.ctpop.i32(i32 %40) 
  %42 = trunc i32 %41 to i8
  %43 = and i8 %42, 1
  %44 = xor i8 %43, 1
  store i8 %44, i8* %39, align 1
  %45 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 %34, i8* %45, align 1
  %46 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  %47 = icmp eq i8 %35, 0
  %48 = zext i1 %47 to i8
  store i8 %48, i8* %46, align 1
  %49 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 0, i8* %49, align 1
  %50 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 %36, i8* %50, align 1
  br label %51

; <label>:51:                                     ; preds = %33, %5
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3SHRI3MnWItE2MnItE2InItEEEP6MemoryS8_R5StateT_T0_T1_(%struct.Memory*, %struct.State* nocapture dereferenceable(3376), i64, i64, i64)  {
  %6 = inttoptr i64 %3 to i16*
  %7 = load i16, i16* %6
  %8 = trunc i64 %4 to i16
  %9 = and i16 %8, 31
  %10 = trunc i64 %4 to i5
  switch i5 %10, label %17 [
    i5 0, label %54
    i5 1, label %11
  ]

; <label>:11:                                     ; preds = %5
  %12 = lshr i16 %7, 15
  %13 = trunc i16 %12 to i8
  %14 = trunc i16 %7 to i8
  %15 = and i8 %14, 1
  %16 = lshr i16 %7, 1
  br label %34

; <label>:17:                                     ; preds = %5
  %18 = icmp ult i16 %9, 16
  br i1 %18, label %19, label %31

; <label>:19:                                     ; preds = %17
  %20 = add nsw i16 %9, -1
  %21 = zext i16 %7 to i64
  %22 = zext i16 %20 to i64
  %23 = lshr i64 %21, %22
  %24 = icmp ne i8 0, 0
  %25 = zext i1 %24 to i8
  %26 = trunc i64 %23 to i8
  %27 = and i8 %26, 1
  %28 = lshr i64 %23, 1
  %29 = trunc i64 %28 to i16
  %30 = and i16 %29, 32767
  br label %34

; <label>:31:                                     ; preds = %17
  %32 = icmp ne i8 0, 0
  %33 = zext i1 %32 to i8
  br label %34

; <label>:34:                                     ; preds = %31, %19, %11
  %35 = phi i8 [ 0, %19 ], [ 0, %31 ], [ 0, %11 ]
  %36 = phi i16 [ %30, %19 ], [ 0, %31 ], [ %16, %11 ]
  %37 = phi i8 [ %25, %19 ], [ %33, %31 ], [ %13, %11 ]
  %38 = phi i8 [ %27, %19 ], [ %33, %31 ], [ %15, %11 ]
  %39 = inttoptr i64 %2 to i16*
  store i16 %36, i16* %39
  %40 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  store i8 %38, i8* %40, align 1
  %41 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  %42 = and i16 %36, 255
  %43 = zext i16 %42 to i32
  %44 = tail call i32 @llvm.ctpop.i32(i32 %43) 
  %45 = trunc i32 %44 to i8
  %46 = and i8 %45, 1
  %47 = xor i8 %46, 1
  store i8 %47, i8* %41, align 1
  %48 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 %35, i8* %48, align 1
  %49 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  %50 = icmp eq i16 %36, 0
  %51 = zext i1 %50 to i8
  store i8 %51, i8* %49, align 1
  %52 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 0, i8* %52, align 1
  %53 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 %37, i8* %53, align 1
  br label %54

; <label>:54:                                     ; preds = %34, %5
  %55 = phi %struct.Memory* [ %0, %34 ], [ %0, %5 ]
  ret %struct.Memory* %55
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3SHRI3MnWIjE2MnIjE2InIjEEEP6MemoryS8_R5StateT_T0_T1_(%struct.Memory*, %struct.State* nocapture dereferenceable(3376), i64, i64, i64)  {
  %6 = inttoptr i64 %3 to i32*
  %7 = load i32, i32* %6
  %8 = trunc i64 %4 to i5
  switch i5 %8, label %14 [
    i5 0, label %46
    i5 1, label %9
  ]

; <label>:9:                                      ; preds = %5
  %10 = lshr i32 %7, 31
  %11 = trunc i32 %10 to i8
  %12 = trunc i32 %7 to i8
  %13 = lshr i32 %7, 1
  br label %26

; <label>:14:                                     ; preds = %5
  %15 = and i64 %4, 31
  %16 = add nuw nsw i64 %15, 4294967295
  %17 = zext i32 %7 to i64
  %18 = and i64 %16, 4294967295
  %19 = lshr i64 %17, %18
  %20 = icmp ne i8 0, 0
  %21 = zext i1 %20 to i8
  %22 = trunc i64 %19 to i8
  %23 = lshr i64 %19, 1
  %24 = trunc i64 %23 to i32
  %25 = and i32 %24, 2147483647
  br label %26

; <label>:26:                                     ; preds = %14, %9
  %27 = phi i8 [ 0, %14 ], [ 0, %9 ]
  %28 = phi i32 [ %25, %14 ], [ %13, %9 ]
  %29 = phi i8 [ %21, %14 ], [ %11, %9 ]
  %30 = phi i8 [ %22, %14 ], [ %12, %9 ]
  %31 = and i8 %30, 1
  %32 = inttoptr i64 %2 to i32*
  store i32 %28, i32* %32
  %33 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  store i8 %31, i8* %33, align 1
  %34 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  %35 = and i32 %28, 255
  %36 = tail call i32 @llvm.ctpop.i32(i32 %35) 
  %37 = trunc i32 %36 to i8
  %38 = and i8 %37, 1
  %39 = xor i8 %38, 1
  store i8 %39, i8* %34, align 1
  %40 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 %27, i8* %40, align 1
  %41 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  %42 = icmp eq i32 %28, 0
  %43 = zext i1 %42 to i8
  store i8 %43, i8* %41, align 1
  %44 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 0, i8* %44, align 1
  %45 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 %29, i8* %45, align 1
  br label %46

; <label>:46:                                     ; preds = %26, %5
  %47 = phi %struct.Memory* [ %0, %26 ], [ %0, %5 ]
  ret %struct.Memory* %47
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3SHRI3MnWImE2MnImE2InImEEEP6MemoryS8_R5StateT_T0_T1_(%struct.Memory*, %struct.State* nocapture dereferenceable(3376), i64, i64, i64)  {
  %6 = inttoptr i64 %3 to i64*
  %7 = load i64, i64* %6
  %8 = trunc i64 %4 to i6
  switch i6 %8, label %12 [
    i6 0, label %40
    i6 1, label %9
  ]

; <label>:9:                                      ; preds = %5
  %10 = lshr i64 %7, 63
  %11 = trunc i64 %10 to i8
  br label %18

; <label>:12:                                     ; preds = %5
  %13 = and i64 %4, 63
  %14 = add nsw i64 %13, -1
  %15 = lshr i64 %7, %14
  %16 = icmp ne i8 0, 0
  %17 = zext i1 %16 to i8
  br label %18

; <label>:18:                                     ; preds = %12, %9
  %19 = phi i8 [ 0, %12 ], [ 0, %9 ]
  %20 = phi i64 [ %15, %12 ], [ %7, %9 ]
  %21 = phi i8 [ %17, %12 ], [ %11, %9 ]
  %22 = trunc i64 %20 to i8
  %23 = and i8 %22, 1
  %24 = lshr i64 %20, 1
  %25 = inttoptr i64 %2 to i64*
  store i64 %24, i64* %25
  %26 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  store i8 %23, i8* %26, align 1
  %27 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  %28 = trunc i64 %24 to i32
  %29 = and i32 %28, 255
  %30 = tail call i32 @llvm.ctpop.i32(i32 %29) 
  %31 = trunc i32 %30 to i8
  %32 = and i8 %31, 1
  %33 = xor i8 %32, 1
  store i8 %33, i8* %27, align 1
  %34 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 %19, i8* %34, align 1
  %35 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  %36 = icmp eq i64 %24, 0
  %37 = zext i1 %36 to i8
  store i8 %37, i8* %35, align 1
  %38 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 0, i8* %38, align 1
  %39 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 %21, i8* %39, align 1
  br label %40

; <label>:40:                                     ; preds = %18, %5
  %41 = phi %struct.Memory* [ %0, %18 ], [ %0, %5 ]
  ret %struct.Memory* %41
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3SHRI3RnWItE2RnItE2InItEEEP6MemoryS8_R5StateT_T0_T1_(%struct.Memory* readnone, %struct.State* nocapture dereferenceable(3376), i16* nocapture, i64, i64)  {
  %6 = trunc i64 %4 to i16
  %7 = and i16 %6, 31
  %8 = trunc i64 %4 to i5
  switch i5 %8, label %18 [
    i5 0, label %54
    i5 1, label %9
  ]

; <label>:9:                                      ; preds = %5
  %10 = trunc i64 %3 to i16
  %11 = lshr i16 %10, 15
  %12 = trunc i16 %11 to i8
  %13 = trunc i64 %3 to i8
  %14 = and i8 %13, 1
  %15 = lshr i64 %3, 1
  %16 = trunc i64 %15 to i16
  %17 = and i16 %16, 32767
  br label %35

; <label>:18:                                     ; preds = %5
  %19 = icmp ult i16 %7, 16
  br i1 %19, label %20, label %32

; <label>:20:                                     ; preds = %18
  %21 = add nsw i16 %7, -1
  %22 = and i64 %3, 65535
  %23 = zext i16 %21 to i64
  %24 = lshr i64 %22, %23
  %25 = icmp ne i8 0, 0
  %26 = zext i1 %25 to i8
  %27 = trunc i64 %24 to i8
  %28 = and i8 %27, 1
  %29 = lshr i64 %24, 1
  %30 = trunc i64 %29 to i16
  %31 = and i16 %30, 32767
  br label %35

; <label>:32:                                     ; preds = %18
  %33 = icmp ne i8 0, 0
  %34 = zext i1 %33 to i8
  br label %35

; <label>:35:                                     ; preds = %32, %20, %9
  %36 = phi i8 [ 0, %20 ], [ 0, %32 ], [ 0, %9 ]
  %37 = phi i16 [ %31, %20 ], [ 0, %32 ], [ %17, %9 ]
  %38 = phi i8 [ %26, %20 ], [ %34, %32 ], [ %12, %9 ]
  %39 = phi i8 [ %28, %20 ], [ %34, %32 ], [ %14, %9 ]
  store i16 %37, i16* %2, align 2
  %40 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  store i8 %39, i8* %40, align 1
  %41 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  %42 = and i16 %37, 255
  %43 = zext i16 %42 to i32
  %44 = tail call i32 @llvm.ctpop.i32(i32 %43) 
  %45 = trunc i32 %44 to i8
  %46 = and i8 %45, 1
  %47 = xor i8 %46, 1
  store i8 %47, i8* %41, align 1
  %48 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 %36, i8* %48, align 1
  %49 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  %50 = icmp eq i16 %37, 0
  %51 = zext i1 %50 to i8
  store i8 %51, i8* %49, align 1
  %52 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 0, i8* %52, align 1
  %53 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 %38, i8* %53, align 1
  br label %54

; <label>:54:                                     ; preds = %35, %5
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3SHRI3RnWImE2RnIjE2InIjEEEP6MemoryS8_R5StateT_T0_T1_(%struct.Memory* readnone, %struct.State* nocapture dereferenceable(3376), i64* nocapture, i64, i64)  {
  %6 = trunc i64 %4 to i5
  switch i5 %6, label %11 [
    i5 0, label %42
    i5 1, label %7
  ]

; <label>:7:                                      ; preds = %5
  %8 = trunc i64 %3 to i32
  %9 = lshr i32 %8, 31
  %10 = trunc i32 %9 to i8
  br label %19

; <label>:11:                                     ; preds = %5
  %12 = and i64 %4, 31
  %13 = add nuw nsw i64 %12, 4294967295
  %14 = and i64 %3, 4294967295
  %15 = and i64 %13, 4294967295
  %16 = lshr i64 %14, %15
  %17 = icmp ne i8 0, 0
  %18 = zext i1 %17 to i8
  br label %19

; <label>:19:                                     ; preds = %11, %7
  %20 = phi i8 [ 0, %11 ], [ 0, %7 ]
  %21 = phi i64 [ %16, %11 ], [ %3, %7 ]
  %22 = phi i8 [ %18, %11 ], [ %10, %7 ]
  %23 = trunc i64 %21 to i8
  %24 = and i8 %23, 1
  %25 = lshr i64 %21, 1
  %26 = trunc i64 %25 to i32
  %27 = and i32 %26, 2147483647
  %28 = zext i32 %27 to i64
  store i64 %28, i64* %2, align 8
  %29 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  store i8 %24, i8* %29, align 1
  %30 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  %31 = and i32 %26, 255
  %32 = tail call i32 @llvm.ctpop.i32(i32 %31) 
  %33 = trunc i32 %32 to i8
  %34 = and i8 %33, 1
  %35 = xor i8 %34, 1
  store i8 %35, i8* %30, align 1
  %36 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 %20, i8* %36, align 1
  %37 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  %38 = icmp eq i32 %27, 0
  %39 = zext i1 %38 to i8
  store i8 %39, i8* %37, align 1
  %40 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 0, i8* %40, align 1
  %41 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 %22, i8* %41, align 1
  br label %42

; <label>:42:                                     ; preds = %19, %5
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3SHRI3RnWImE2RnImE2InImEEEP6MemoryS8_R5StateT_T0_T1_(%struct.Memory* readnone, %struct.State* nocapture dereferenceable(3376), i64* nocapture, i64, i64)  {
  %6 = trunc i64 %4 to i6
  switch i6 %6, label %10 [
    i6 0, label %37
    i6 1, label %7
  ]

; <label>:7:                                      ; preds = %5
  %8 = lshr i64 %3, 63
  %9 = trunc i64 %8 to i8
  br label %16

; <label>:10:                                     ; preds = %5
  %11 = and i64 %4, 63
  %12 = add nsw i64 %11, -1
  %13 = lshr i64 %3, %12
  %14 = icmp ne i8 0, 0
  %15 = zext i1 %14 to i8
  br label %16

; <label>:16:                                     ; preds = %10, %7
  %17 = phi i8 [ 0, %10 ], [ 0, %7 ]
  %18 = phi i64 [ %13, %10 ], [ %3, %7 ]
  %19 = phi i8 [ %15, %10 ], [ %9, %7 ]
  %20 = trunc i64 %18 to i8
  %21 = and i8 %20, 1
  %22 = lshr i64 %18, 1
  store i64 %22, i64* %2, align 8
  %23 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  store i8 %21, i8* %23, align 1
  %24 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  %25 = trunc i64 %22 to i32
  %26 = and i32 %25, 255
  %27 = tail call i32 @llvm.ctpop.i32(i32 %26) 
  %28 = trunc i32 %27 to i8
  %29 = and i8 %28, 1
  %30 = xor i8 %29, 1
  store i8 %30, i8* %24, align 1
  %31 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 %17, i8* %31, align 1
  %32 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  %33 = icmp eq i64 %22, 0
  %34 = zext i1 %33 to i8
  store i8 %34, i8* %32, align 1
  %35 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 0, i8* %35, align 1
  %36 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 %19, i8* %36, align 1
  br label %37

; <label>:37:                                     ; preds = %16, %5
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3SHRI3MnWIhE2MnIhE2RnIhEEEP6MemoryS8_R5StateT_T0_T1_(%struct.Memory*, %struct.State* nocapture dereferenceable(3376), i64, i64, i64)  {
  %6 = inttoptr i64 %3 to i8*
  %7 = load i8, i8* %6
  %8 = trunc i64 %4 to i8
  %9 = and i8 %8, 31
  %10 = trunc i64 %4 to i5
  switch i5 %10, label %15 [
    i5 0, label %51
    i5 1, label %11
  ]

; <label>:11:                                     ; preds = %5
  %12 = lshr i8 %7, 7
  %13 = and i8 %7, 1
  %14 = lshr i8 %7, 1
  br label %32

; <label>:15:                                     ; preds = %5
  %16 = icmp ult i8 %9, 8
  br i1 %16, label %17, label %29

; <label>:17:                                     ; preds = %15
  %18 = add nsw i8 %9, -1
  %19 = zext i8 %7 to i64
  %20 = zext i8 %18 to i64
  %21 = lshr i64 %19, %20
  %22 = trunc i64 %21 to i8
  %23 = icmp ne i8 0, 0
  %24 = zext i1 %23 to i8
  %25 = and i8 %22, 1
  %26 = lshr i64 %21, 1
  %27 = trunc i64 %26 to i8
  %28 = and i8 %27, 127
  br label %32

; <label>:29:                                     ; preds = %15
  %30 = icmp ne i8 0, 0
  %31 = zext i1 %30 to i8
  br label %32

; <label>:32:                                     ; preds = %29, %17, %11
  %33 = phi i8 [ 0, %17 ], [ 0, %29 ], [ 0, %11 ]
  %34 = phi i8 [ %28, %17 ], [ 0, %29 ], [ %14, %11 ]
  %35 = phi i8 [ %24, %17 ], [ %31, %29 ], [ %12, %11 ]
  %36 = phi i8 [ %25, %17 ], [ %31, %29 ], [ %13, %11 ]
  %37 = inttoptr i64 %2 to i8*
  store i8 %34, i8* %37
  %38 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  store i8 %36, i8* %38, align 1
  %39 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  %40 = zext i8 %34 to i32
  %41 = tail call i32 @llvm.ctpop.i32(i32 %40) 
  %42 = trunc i32 %41 to i8
  %43 = and i8 %42, 1
  %44 = xor i8 %43, 1
  store i8 %44, i8* %39, align 1
  %45 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 %33, i8* %45, align 1
  %46 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  %47 = icmp eq i8 %34, 0
  %48 = zext i1 %47 to i8
  store i8 %48, i8* %46, align 1
  %49 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 0, i8* %49, align 1
  %50 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 %35, i8* %50, align 1
  br label %51

; <label>:51:                                     ; preds = %32, %5
  %52 = phi %struct.Memory* [ %0, %32 ], [ %0, %5 ]
  ret %struct.Memory* %52
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3SHRI3RnWIhE2RnIhES4_EEP6MemoryS6_R5StateT_T0_T1_(%struct.Memory* readnone, %struct.State* nocapture dereferenceable(3376), i8* nocapture, i64, i64)  {
  %6 = trunc i64 %3 to i8
  %7 = trunc i64 %4 to i8
  %8 = and i8 %7, 31
  %9 = trunc i64 %4 to i5
  switch i5 %9, label %16 [
    i5 0, label %51
    i5 1, label %10
  ]

; <label>:10:                                     ; preds = %5
  %11 = lshr i8 %6, 7
  %12 = and i8 %6, 1
  %13 = lshr i64 %3, 1
  %14 = trunc i64 %13 to i8
  %15 = and i8 %14, 127
  br label %33

; <label>:16:                                     ; preds = %5
  %17 = icmp ult i8 %8, 8
  br i1 %17, label %18, label %30

; <label>:18:                                     ; preds = %16
  %19 = add nsw i8 %8, -1
  %20 = and i64 %3, 255
  %21 = zext i8 %19 to i64
  %22 = lshr i64 %20, %21
  %23 = trunc i64 %22 to i8
  %24 = icmp ne i8 0, 0
  %25 = zext i1 %24 to i8
  %26 = and i8 %23, 1
  %27 = lshr i64 %22, 1
  %28 = trunc i64 %27 to i8
  %29 = and i8 %28, 127
  br label %33

; <label>:30:                                     ; preds = %16
  %31 = icmp ne i8 0, 0
  %32 = zext i1 %31 to i8
  br label %33

; <label>:33:                                     ; preds = %30, %18, %10
  %34 = phi i8 [ 0, %18 ], [ 0, %30 ], [ 0, %10 ]
  %35 = phi i8 [ %29, %18 ], [ 0, %30 ], [ %15, %10 ]
  %36 = phi i8 [ %25, %18 ], [ %32, %30 ], [ %11, %10 ]
  %37 = phi i8 [ %26, %18 ], [ %32, %30 ], [ %12, %10 ]
  store i8 %35, i8* %2, align 1
  %38 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  store i8 %37, i8* %38, align 1
  %39 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  %40 = zext i8 %35 to i32
  %41 = tail call i32 @llvm.ctpop.i32(i32 %40) 
  %42 = trunc i32 %41 to i8
  %43 = and i8 %42, 1
  %44 = xor i8 %43, 1
  store i8 %44, i8* %39, align 1
  %45 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 %34, i8* %45, align 1
  %46 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  %47 = icmp eq i8 %35, 0
  %48 = zext i1 %47 to i8
  store i8 %48, i8* %46, align 1
  %49 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 0, i8* %49, align 1
  %50 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 %36, i8* %50, align 1
  br label %51

; <label>:51:                                     ; preds = %33, %5
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3SHRI3MnWItE2MnItE2RnItEEEP6MemoryS8_R5StateT_T0_T1_(%struct.Memory*, %struct.State* nocapture dereferenceable(3376), i64, i64, i64)  {
  %6 = inttoptr i64 %3 to i16*
  %7 = load i16, i16* %6
  %8 = trunc i64 %4 to i16
  %9 = and i16 %8, 31
  %10 = trunc i64 %4 to i5
  switch i5 %10, label %17 [
    i5 0, label %54
    i5 1, label %11
  ]

; <label>:11:                                     ; preds = %5
  %12 = lshr i16 %7, 15
  %13 = trunc i16 %12 to i8
  %14 = trunc i16 %7 to i8
  %15 = and i8 %14, 1
  %16 = lshr i16 %7, 1
  br label %34

; <label>:17:                                     ; preds = %5
  %18 = icmp ult i16 %9, 16
  br i1 %18, label %19, label %31

; <label>:19:                                     ; preds = %17
  %20 = add nsw i16 %9, -1
  %21 = zext i16 %7 to i64
  %22 = zext i16 %20 to i64
  %23 = lshr i64 %21, %22
  %24 = icmp ne i8 0, 0
  %25 = zext i1 %24 to i8
  %26 = trunc i64 %23 to i8
  %27 = and i8 %26, 1
  %28 = lshr i64 %23, 1
  %29 = trunc i64 %28 to i16
  %30 = and i16 %29, 32767
  br label %34

; <label>:31:                                     ; preds = %17
  %32 = icmp ne i8 0, 0
  %33 = zext i1 %32 to i8
  br label %34

; <label>:34:                                     ; preds = %31, %19, %11
  %35 = phi i8 [ 0, %19 ], [ 0, %31 ], [ 0, %11 ]
  %36 = phi i16 [ %30, %19 ], [ 0, %31 ], [ %16, %11 ]
  %37 = phi i8 [ %25, %19 ], [ %33, %31 ], [ %13, %11 ]
  %38 = phi i8 [ %27, %19 ], [ %33, %31 ], [ %15, %11 ]
  %39 = inttoptr i64 %2 to i16*
  store i16 %36, i16* %39
  %40 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  store i8 %38, i8* %40, align 1
  %41 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  %42 = and i16 %36, 255
  %43 = zext i16 %42 to i32
  %44 = tail call i32 @llvm.ctpop.i32(i32 %43) 
  %45 = trunc i32 %44 to i8
  %46 = and i8 %45, 1
  %47 = xor i8 %46, 1
  store i8 %47, i8* %41, align 1
  %48 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 %35, i8* %48, align 1
  %49 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  %50 = icmp eq i16 %36, 0
  %51 = zext i1 %50 to i8
  store i8 %51, i8* %49, align 1
  %52 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 0, i8* %52, align 1
  %53 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 %37, i8* %53, align 1
  br label %54

; <label>:54:                                     ; preds = %34, %5
  %55 = phi %struct.Memory* [ %0, %34 ], [ %0, %5 ]
  ret %struct.Memory* %55
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3SHRI3MnWIjE2MnIjE2RnIjEEEP6MemoryS8_R5StateT_T0_T1_(%struct.Memory*, %struct.State* nocapture dereferenceable(3376), i64, i64, i64)  {
  %6 = inttoptr i64 %3 to i32*
  %7 = load i32, i32* %6
  %8 = trunc i64 %4 to i5
  switch i5 %8, label %14 [
    i5 0, label %46
    i5 1, label %9
  ]

; <label>:9:                                      ; preds = %5
  %10 = lshr i32 %7, 31
  %11 = trunc i32 %10 to i8
  %12 = trunc i32 %7 to i8
  %13 = lshr i32 %7, 1
  br label %26

; <label>:14:                                     ; preds = %5
  %15 = and i64 %4, 31
  %16 = add nuw nsw i64 %15, 4294967295
  %17 = zext i32 %7 to i64
  %18 = and i64 %16, 4294967295
  %19 = lshr i64 %17, %18
  %20 = icmp ne i8 0, 0
  %21 = zext i1 %20 to i8
  %22 = trunc i64 %19 to i8
  %23 = lshr i64 %19, 1
  %24 = trunc i64 %23 to i32
  %25 = and i32 %24, 2147483647
  br label %26

; <label>:26:                                     ; preds = %14, %9
  %27 = phi i8 [ 0, %14 ], [ 0, %9 ]
  %28 = phi i32 [ %25, %14 ], [ %13, %9 ]
  %29 = phi i8 [ %21, %14 ], [ %11, %9 ]
  %30 = phi i8 [ %22, %14 ], [ %12, %9 ]
  %31 = and i8 %30, 1
  %32 = inttoptr i64 %2 to i32*
  store i32 %28, i32* %32
  %33 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  store i8 %31, i8* %33, align 1
  %34 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  %35 = and i32 %28, 255
  %36 = tail call i32 @llvm.ctpop.i32(i32 %35) 
  %37 = trunc i32 %36 to i8
  %38 = and i8 %37, 1
  %39 = xor i8 %38, 1
  store i8 %39, i8* %34, align 1
  %40 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 %27, i8* %40, align 1
  %41 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  %42 = icmp eq i32 %28, 0
  %43 = zext i1 %42 to i8
  store i8 %43, i8* %41, align 1
  %44 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 0, i8* %44, align 1
  %45 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 %29, i8* %45, align 1
  br label %46

; <label>:46:                                     ; preds = %26, %5
  %47 = phi %struct.Memory* [ %0, %26 ], [ %0, %5 ]
  ret %struct.Memory* %47
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3SHRI3MnWImE2MnImE2RnImEEEP6MemoryS8_R5StateT_T0_T1_(%struct.Memory*, %struct.State* nocapture dereferenceable(3376), i64, i64, i64)  {
  %6 = inttoptr i64 %3 to i64*
  %7 = load i64, i64* %6
  %8 = trunc i64 %4 to i6
  switch i6 %8, label %12 [
    i6 0, label %40
    i6 1, label %9
  ]

; <label>:9:                                      ; preds = %5
  %10 = lshr i64 %7, 63
  %11 = trunc i64 %10 to i8
  br label %18

; <label>:12:                                     ; preds = %5
  %13 = and i64 %4, 63
  %14 = add nsw i64 %13, -1
  %15 = lshr i64 %7, %14
  %16 = icmp ne i8 0, 0
  %17 = zext i1 %16 to i8
  br label %18

; <label>:18:                                     ; preds = %12, %9
  %19 = phi i8 [ 0, %12 ], [ 0, %9 ]
  %20 = phi i64 [ %15, %12 ], [ %7, %9 ]
  %21 = phi i8 [ %17, %12 ], [ %11, %9 ]
  %22 = trunc i64 %20 to i8
  %23 = and i8 %22, 1
  %24 = lshr i64 %20, 1
  %25 = inttoptr i64 %2 to i64*
  store i64 %24, i64* %25
  %26 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  store i8 %23, i8* %26, align 1
  %27 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  %28 = trunc i64 %24 to i32
  %29 = and i32 %28, 255
  %30 = tail call i32 @llvm.ctpop.i32(i32 %29) 
  %31 = trunc i32 %30 to i8
  %32 = and i8 %31, 1
  %33 = xor i8 %32, 1
  store i8 %33, i8* %27, align 1
  %34 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 %19, i8* %34, align 1
  %35 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  %36 = icmp eq i64 %24, 0
  %37 = zext i1 %36 to i8
  store i8 %37, i8* %35, align 1
  %38 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 0, i8* %38, align 1
  %39 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 %21, i8* %39, align 1
  br label %40

; <label>:40:                                     ; preds = %18, %5
  %41 = phi %struct.Memory* [ %0, %18 ], [ %0, %5 ]
  ret %struct.Memory* %41
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3SHRI3RnWItE2RnItES4_EEP6MemoryS6_R5StateT_T0_T1_(%struct.Memory* readnone, %struct.State* nocapture dereferenceable(3376), i16* nocapture, i64, i64)  {
  %6 = trunc i64 %4 to i16
  %7 = and i16 %6, 31
  %8 = trunc i64 %4 to i5
  switch i5 %8, label %18 [
    i5 0, label %54
    i5 1, label %9
  ]

; <label>:9:                                      ; preds = %5
  %10 = trunc i64 %3 to i16
  %11 = lshr i16 %10, 15
  %12 = trunc i16 %11 to i8
  %13 = trunc i64 %3 to i8
  %14 = and i8 %13, 1
  %15 = lshr i64 %3, 1
  %16 = trunc i64 %15 to i16
  %17 = and i16 %16, 32767
  br label %35

; <label>:18:                                     ; preds = %5
  %19 = icmp ult i16 %7, 16
  br i1 %19, label %20, label %32

; <label>:20:                                     ; preds = %18
  %21 = add nsw i16 %7, -1
  %22 = and i64 %3, 65535
  %23 = zext i16 %21 to i64
  %24 = lshr i64 %22, %23
  %25 = icmp ne i8 0, 0
  %26 = zext i1 %25 to i8
  %27 = trunc i64 %24 to i8
  %28 = and i8 %27, 1
  %29 = lshr i64 %24, 1
  %30 = trunc i64 %29 to i16
  %31 = and i16 %30, 32767
  br label %35

; <label>:32:                                     ; preds = %18
  %33 = icmp ne i8 0, 0
  %34 = zext i1 %33 to i8
  br label %35

; <label>:35:                                     ; preds = %32, %20, %9
  %36 = phi i8 [ 0, %20 ], [ 0, %32 ], [ 0, %9 ]
  %37 = phi i16 [ %31, %20 ], [ 0, %32 ], [ %17, %9 ]
  %38 = phi i8 [ %26, %20 ], [ %34, %32 ], [ %12, %9 ]
  %39 = phi i8 [ %28, %20 ], [ %34, %32 ], [ %14, %9 ]
  store i16 %37, i16* %2, align 2
  %40 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  store i8 %39, i8* %40, align 1
  %41 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  %42 = and i16 %37, 255
  %43 = zext i16 %42 to i32
  %44 = tail call i32 @llvm.ctpop.i32(i32 %43) 
  %45 = trunc i32 %44 to i8
  %46 = and i8 %45, 1
  %47 = xor i8 %46, 1
  store i8 %47, i8* %41, align 1
  %48 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 %36, i8* %48, align 1
  %49 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  %50 = icmp eq i16 %37, 0
  %51 = zext i1 %50 to i8
  store i8 %51, i8* %49, align 1
  %52 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 0, i8* %52, align 1
  %53 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 %38, i8* %53, align 1
  br label %54

; <label>:54:                                     ; preds = %35, %5
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3SHRI3RnWImE2RnIjES4_EEP6MemoryS6_R5StateT_T0_T1_(%struct.Memory* readnone, %struct.State* nocapture dereferenceable(3376), i64* nocapture, i64, i64)  {
  %6 = trunc i64 %4 to i5
  switch i5 %6, label %11 [
    i5 0, label %42
    i5 1, label %7
  ]

; <label>:7:                                      ; preds = %5
  %8 = trunc i64 %3 to i32
  %9 = lshr i32 %8, 31
  %10 = trunc i32 %9 to i8
  br label %19

; <label>:11:                                     ; preds = %5
  %12 = and i64 %4, 31
  %13 = add nuw nsw i64 %12, 4294967295
  %14 = and i64 %3, 4294967295
  %15 = and i64 %13, 4294967295
  %16 = lshr i64 %14, %15
  %17 = icmp ne i8 0, 0
  %18 = zext i1 %17 to i8
  br label %19

; <label>:19:                                     ; preds = %11, %7
  %20 = phi i8 [ 0, %11 ], [ 0, %7 ]
  %21 = phi i64 [ %16, %11 ], [ %3, %7 ]
  %22 = phi i8 [ %18, %11 ], [ %10, %7 ]
  %23 = trunc i64 %21 to i8
  %24 = and i8 %23, 1
  %25 = lshr i64 %21, 1
  %26 = trunc i64 %25 to i32
  %27 = and i32 %26, 2147483647
  %28 = zext i32 %27 to i64
  store i64 %28, i64* %2, align 8
  %29 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  store i8 %24, i8* %29, align 1
  %30 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  %31 = and i32 %26, 255
  %32 = tail call i32 @llvm.ctpop.i32(i32 %31) 
  %33 = trunc i32 %32 to i8
  %34 = and i8 %33, 1
  %35 = xor i8 %34, 1
  store i8 %35, i8* %30, align 1
  %36 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 %20, i8* %36, align 1
  %37 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  %38 = icmp eq i32 %27, 0
  %39 = zext i1 %38 to i8
  store i8 %39, i8* %37, align 1
  %40 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 0, i8* %40, align 1
  %41 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 %22, i8* %41, align 1
  br label %42

; <label>:42:                                     ; preds = %19, %5
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3SHRI3RnWImE2RnImES4_EEP6MemoryS6_R5StateT_T0_T1_(%struct.Memory* readnone, %struct.State* nocapture dereferenceable(3376), i64* nocapture, i64, i64)  {
  %6 = trunc i64 %4 to i6
  switch i6 %6, label %10 [
    i6 0, label %37
    i6 1, label %7
  ]

; <label>:7:                                      ; preds = %5
  %8 = lshr i64 %3, 63
  %9 = trunc i64 %8 to i8
  br label %16

; <label>:10:                                     ; preds = %5
  %11 = and i64 %4, 63
  %12 = add nsw i64 %11, -1
  %13 = lshr i64 %3, %12
  %14 = icmp ne i8 0, 0
  %15 = zext i1 %14 to i8
  br label %16

; <label>:16:                                     ; preds = %10, %7
  %17 = phi i8 [ 0, %10 ], [ 0, %7 ]
  %18 = phi i64 [ %13, %10 ], [ %3, %7 ]
  %19 = phi i8 [ %15, %10 ], [ %9, %7 ]
  %20 = trunc i64 %18 to i8
  %21 = and i8 %20, 1
  %22 = lshr i64 %18, 1
  store i64 %22, i64* %2, align 8
  %23 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  store i8 %21, i8* %23, align 1
  %24 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  %25 = trunc i64 %22 to i32
  %26 = and i32 %25, 255
  %27 = tail call i32 @llvm.ctpop.i32(i32 %26) 
  %28 = trunc i32 %27 to i8
  %29 = and i8 %28, 1
  %30 = xor i8 %29, 1
  store i8 %30, i8* %24, align 1
  %31 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 %17, i8* %31, align 1
  %32 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  %33 = icmp eq i64 %22, 0
  %34 = zext i1 %33 to i8
  store i8 %34, i8* %32, align 1
  %35 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 0, i8* %35, align 1
  %36 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 %19, i8* %36, align 1
  br label %37

; <label>:37:                                     ; preds = %16, %5
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3SARI3MnWIhE2MnIhE2InIhEEEP6MemoryS8_R5StateT_T0_T1_(%struct.Memory*, %struct.State* nocapture dereferenceable(3376), i64, i64, i64)  {
  %6 = inttoptr i64 %3 to i8*
  %7 = load i8, i8* %6
  %8 = trunc i64 %4 to i8
  %9 = and i8 %8, 31
  %10 = trunc i64 %4 to i5
  switch i5 %10, label %14 [
    i5 0, label %51
    i5 1, label %11
  ]

; <label>:11:                                     ; preds = %5
  %12 = and i8 %7, 1
  %13 = ashr i8 %7, 1
  br label %31

; <label>:14:                                     ; preds = %5
  %15 = icmp ult i8 %9, 8
  br i1 %15, label %16, label %27

; <label>:16:                                     ; preds = %14
  %17 = add nsw i8 %9, -1
  %18 = sext i8 %7 to i64
  %19 = sext i8 %17 to i64
  %20 = ashr i64 %18, %19
  %21 = trunc i64 %20 to i8
  %22 = icmp ne i8 0, 0
  %23 = zext i1 %22 to i8
  %24 = and i8 %21, 1
  %25 = lshr i64 %20, 1
  %26 = trunc i64 %25 to i8
  br label %31

; <label>:27:                                     ; preds = %14
  %28 = icmp ne i8 0, 0
  %29 = zext i1 %28 to i8
  %30 = ashr i8 %7, 7
  br label %31

; <label>:31:                                     ; preds = %27, %16, %11
  %32 = phi i8 [ 0, %27 ], [ 0, %16 ], [ 0, %11 ]
  %33 = phi i8 [ %30, %27 ], [ %26, %16 ], [ %13, %11 ]
  %34 = phi i8 [ %29, %27 ], [ %23, %16 ], [ 0, %11 ]
  %35 = phi i8 [ %29, %27 ], [ %24, %16 ], [ %12, %11 ]
  %36 = inttoptr i64 %2 to i8*
  store i8 %33, i8* %36
  %37 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  store i8 %35, i8* %37, align 1
  %38 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  %39 = zext i8 %33 to i32
  %40 = tail call i32 @llvm.ctpop.i32(i32 %39) 
  %41 = trunc i32 %40 to i8
  %42 = and i8 %41, 1
  %43 = xor i8 %42, 1
  store i8 %43, i8* %38, align 1
  %44 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 %32, i8* %44, align 1
  %45 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  %46 = icmp eq i8 %33, 0
  %47 = zext i1 %46 to i8
  store i8 %47, i8* %45, align 1
  %48 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  %49 = lshr i8 %33, 7
  store i8 %49, i8* %48, align 1
  %50 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 %34, i8* %50, align 1
  br label %51

; <label>:51:                                     ; preds = %31, %5
  %52 = phi %struct.Memory* [ %0, %31 ], [ %0, %5 ]
  ret %struct.Memory* %52
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3SARI3RnWIhE2RnIhE2InIhEEEP6MemoryS8_R5StateT_T0_T1_(%struct.Memory* readnone, %struct.State* nocapture dereferenceable(3376), i8* nocapture, i64, i64)  {
  %6 = trunc i64 %3 to i8
  %7 = trunc i64 %4 to i8
  %8 = and i8 %7, 31
  %9 = trunc i64 %4 to i5
  switch i5 %9, label %15 [
    i5 0, label %52
    i5 1, label %10
  ]

; <label>:10:                                     ; preds = %5
  %11 = and i8 %6, 1
  %12 = shl i64 %3, 56
  %13 = ashr i64 %12, 57
  %14 = trunc i64 %13 to i8
  br label %33

; <label>:15:                                     ; preds = %5
  %16 = icmp ult i8 %8, 8
  br i1 %16, label %17, label %29

; <label>:17:                                     ; preds = %15
  %18 = add nsw i8 %8, -1
  %19 = shl i64 %3, 56
  %20 = ashr exact i64 %19, 56
  %21 = sext i8 %18 to i64
  %22 = ashr i64 %20, %21
  %23 = trunc i64 %22 to i8
  %24 = icmp ne i8 0, 0
  %25 = zext i1 %24 to i8
  %26 = and i8 %23, 1
  %27 = lshr i64 %22, 1
  %28 = trunc i64 %27 to i8
  br label %33

; <label>:29:                                     ; preds = %15
  %30 = icmp ne i8 0, 0
  %31 = zext i1 %30 to i8
  %32 = ashr i8 %6, 7
  br label %33

; <label>:33:                                     ; preds = %29, %17, %10
  %34 = phi i8 [ 0, %29 ], [ 0, %17 ], [ 0, %10 ]
  %35 = phi i8 [ %32, %29 ], [ %28, %17 ], [ %14, %10 ]
  %36 = phi i8 [ %31, %29 ], [ %25, %17 ], [ 0, %10 ]
  %37 = phi i8 [ %31, %29 ], [ %26, %17 ], [ %11, %10 ]
  store i8 %35, i8* %2, align 1
  %38 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  store i8 %37, i8* %38, align 1
  %39 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  %40 = zext i8 %35 to i32
  %41 = tail call i32 @llvm.ctpop.i32(i32 %40) 
  %42 = trunc i32 %41 to i8
  %43 = and i8 %42, 1
  %44 = xor i8 %43, 1
  store i8 %44, i8* %39, align 1
  %45 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 %34, i8* %45, align 1
  %46 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  %47 = icmp eq i8 %35, 0
  %48 = zext i1 %47 to i8
  store i8 %48, i8* %46, align 1
  %49 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  %50 = lshr i8 %35, 7
  store i8 %50, i8* %49, align 1
  %51 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 %36, i8* %51, align 1
  br label %52

; <label>:52:                                     ; preds = %33, %5
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3SARI3MnWItE2MnItE2InItEEEP6MemoryS8_R5StateT_T0_T1_(%struct.Memory*, %struct.State* nocapture dereferenceable(3376), i64, i64, i64)  {
  %6 = inttoptr i64 %3 to i16*
  %7 = load i16, i16* %6
  %8 = trunc i64 %4 to i16
  %9 = and i16 %8, 31
  %10 = trunc i64 %4 to i5
  switch i5 %10, label %15 [
    i5 0, label %54
    i5 1, label %11
  ]

; <label>:11:                                     ; preds = %5
  %12 = trunc i16 %7 to i8
  %13 = and i8 %12, 1
  %14 = ashr i16 %7, 1
  br label %32

; <label>:15:                                     ; preds = %5
  %16 = icmp ult i16 %9, 16
  br i1 %16, label %17, label %28

; <label>:17:                                     ; preds = %15
  %18 = add nsw i16 %9, -1
  %19 = sext i16 %7 to i64
  %20 = sext i16 %18 to i64
  %21 = ashr i64 %19, %20
  %22 = icmp ne i8 0, 0
  %23 = zext i1 %22 to i8
  %24 = trunc i64 %21 to i8
  %25 = and i8 %24, 1
  %26 = lshr i64 %21, 1
  %27 = trunc i64 %26 to i16
  br label %32

; <label>:28:                                     ; preds = %15
  %29 = icmp ne i8 0, 0
  %30 = zext i1 %29 to i8
  %31 = ashr i16 %7, 15
  br label %32

; <label>:32:                                     ; preds = %28, %17, %11
  %33 = phi i8 [ 0, %28 ], [ 0, %17 ], [ 0, %11 ]
  %34 = phi i16 [ %31, %28 ], [ %27, %17 ], [ %14, %11 ]
  %35 = phi i8 [ %30, %28 ], [ %23, %17 ], [ 0, %11 ]
  %36 = phi i8 [ %30, %28 ], [ %25, %17 ], [ %13, %11 ]
  %37 = inttoptr i64 %2 to i16*
  store i16 %34, i16* %37
  %38 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  store i8 %36, i8* %38, align 1
  %39 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  %40 = and i16 %34, 255
  %41 = zext i16 %40 to i32
  %42 = tail call i32 @llvm.ctpop.i32(i32 %41) 
  %43 = trunc i32 %42 to i8
  %44 = and i8 %43, 1
  %45 = xor i8 %44, 1
  store i8 %45, i8* %39, align 1
  %46 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 %33, i8* %46, align 1
  %47 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  %48 = icmp eq i16 %34, 0
  %49 = zext i1 %48 to i8
  store i8 %49, i8* %47, align 1
  %50 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  %51 = lshr i16 %34, 15
  %52 = trunc i16 %51 to i8
  store i8 %52, i8* %50, align 1
  %53 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 %35, i8* %53, align 1
  br label %54

; <label>:54:                                     ; preds = %32, %5
  %55 = phi %struct.Memory* [ %0, %32 ], [ %0, %5 ]
  ret %struct.Memory* %55
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3SARI3MnWIjE2MnIjE2InIjEEEP6MemoryS8_R5StateT_T0_T1_(%struct.Memory*, %struct.State* nocapture dereferenceable(3376), i64, i64, i64)  {
  %6 = inttoptr i64 %3 to i32*
  %7 = load i32, i32* %6
  %8 = trunc i64 %4 to i5
  switch i5 %8, label %12 [
    i5 0, label %44
    i5 1, label %9
  ]

; <label>:9:                                      ; preds = %5
  %10 = trunc i32 %7 to i8
  %11 = ashr i32 %7, 1
  br label %22

; <label>:12:                                     ; preds = %5
  %13 = and i64 %4, 31
  %14 = add nsw i64 %13, -1
  %15 = sext i32 %7 to i64
  %16 = ashr i64 %15, %14
  %17 = icmp ne i8 0, 0
  %18 = zext i1 %17 to i8
  %19 = trunc i64 %16 to i8
  %20 = lshr i64 %16, 1
  %21 = trunc i64 %20 to i32
  br label %22

; <label>:22:                                     ; preds = %12, %9
  %23 = phi i8 [ 0, %12 ], [ 0, %9 ]
  %24 = phi i32 [ %21, %12 ], [ %11, %9 ]
  %25 = phi i8 [ %18, %12 ], [ 0, %9 ]
  %26 = phi i8 [ %19, %12 ], [ %10, %9 ]
  %27 = and i8 %26, 1
  %28 = inttoptr i64 %2 to i32*
  store i32 %24, i32* %28
  %29 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  store i8 %27, i8* %29, align 1
  %30 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  %31 = and i32 %24, 255
  %32 = tail call i32 @llvm.ctpop.i32(i32 %31) 
  %33 = trunc i32 %32 to i8
  %34 = and i8 %33, 1
  %35 = xor i8 %34, 1
  store i8 %35, i8* %30, align 1
  %36 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 %23, i8* %36, align 1
  %37 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  %38 = icmp eq i32 %24, 0
  %39 = zext i1 %38 to i8
  store i8 %39, i8* %37, align 1
  %40 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  %41 = lshr i32 %24, 31
  %42 = trunc i32 %41 to i8
  store i8 %42, i8* %40, align 1
  %43 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 %25, i8* %43, align 1
  br label %44

; <label>:44:                                     ; preds = %22, %5
  %45 = phi %struct.Memory* [ %0, %22 ], [ %0, %5 ]
  ret %struct.Memory* %45
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3SARI3MnWImE2MnImE2InImEEEP6MemoryS8_R5StateT_T0_T1_(%struct.Memory*, %struct.State* nocapture dereferenceable(3376), i64, i64, i64)  {
  %6 = inttoptr i64 %3 to i64*
  %7 = load i64, i64* %6
  %8 = trunc i64 %4 to i6
  switch i6 %8, label %10 [
    i6 0, label %40
    i6 1, label %9
  ]

; <label>:9:                                      ; preds = %5
  br label %16

; <label>:10:                                     ; preds = %5
  %11 = and i64 %4, 63
  %12 = add nsw i64 %11, -1
  %13 = ashr i64 %7, %12
  %14 = icmp ne i8 0, 0
  %15 = zext i1 %14 to i8
  br label %16

; <label>:16:                                     ; preds = %10, %9
  %17 = phi i8 [ 0, %9 ], [ 0, %10 ]
  %18 = phi i64 [ %7, %9 ], [ %13, %10 ]
  %19 = phi i8 [ 0, %9 ], [ %15, %10 ]
  %20 = trunc i64 %18 to i8
  %21 = and i8 %20, 1
  %22 = ashr i64 %18, 1
  %23 = inttoptr i64 %2 to i64*
  store i64 %22, i64* %23
  %24 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  store i8 %21, i8* %24, align 1
  %25 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  %26 = trunc i64 %22 to i32
  %27 = and i32 %26, 255
  %28 = tail call i32 @llvm.ctpop.i32(i32 %27) 
  %29 = trunc i32 %28 to i8
  %30 = and i8 %29, 1
  %31 = xor i8 %30, 1
  store i8 %31, i8* %25, align 1
  %32 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 %17, i8* %32, align 1
  %33 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  %34 = icmp eq i64 %22, 0
  %35 = zext i1 %34 to i8
  store i8 %35, i8* %33, align 1
  %36 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  %37 = lshr i64 %22, 63
  %38 = trunc i64 %37 to i8
  store i8 %38, i8* %36, align 1
  %39 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 %19, i8* %39, align 1
  br label %40

; <label>:40:                                     ; preds = %16, %5
  %41 = phi %struct.Memory* [ %0, %16 ], [ %0, %5 ]
  ret %struct.Memory* %41
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3SARI3RnWItE2RnItE2InItEEEP6MemoryS8_R5StateT_T0_T1_(%struct.Memory* readnone, %struct.State* nocapture dereferenceable(3376), i16* nocapture, i64, i64)  {
  %6 = trunc i64 %3 to i16
  %7 = trunc i64 %4 to i16
  %8 = and i16 %7, 31
  %9 = trunc i64 %4 to i5
  switch i5 %9, label %16 [
    i5 0, label %55
    i5 1, label %10
  ]

; <label>:10:                                     ; preds = %5
  %11 = trunc i64 %3 to i8
  %12 = and i8 %11, 1
  %13 = shl i64 %3, 48
  %14 = ashr i64 %13, 49
  %15 = trunc i64 %14 to i16
  br label %34

; <label>:16:                                     ; preds = %5
  %17 = icmp ult i16 %8, 16
  br i1 %17, label %18, label %30

; <label>:18:                                     ; preds = %16
  %19 = add nsw i16 %8, -1
  %20 = shl i64 %3, 48
  %21 = ashr exact i64 %20, 48
  %22 = sext i16 %19 to i64
  %23 = ashr i64 %21, %22
  %24 = icmp ne i8 0, 0
  %25 = zext i1 %24 to i8
  %26 = trunc i64 %23 to i8
  %27 = and i8 %26, 1
  %28 = lshr i64 %23, 1
  %29 = trunc i64 %28 to i16
  br label %34

; <label>:30:                                     ; preds = %16
  %31 = icmp ne i8 0, 0
  %32 = zext i1 %31 to i8
  %33 = ashr i16 %6, 15
  br label %34

; <label>:34:                                     ; preds = %30, %18, %10
  %35 = phi i8 [ 0, %30 ], [ 0, %18 ], [ 0, %10 ]
  %36 = phi i16 [ %33, %30 ], [ %29, %18 ], [ %15, %10 ]
  %37 = phi i8 [ %32, %30 ], [ %25, %18 ], [ 0, %10 ]
  %38 = phi i8 [ %32, %30 ], [ %27, %18 ], [ %12, %10 ]
  store i16 %36, i16* %2, align 2
  %39 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  store i8 %38, i8* %39, align 1
  %40 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  %41 = and i16 %36, 255
  %42 = zext i16 %41 to i32
  %43 = tail call i32 @llvm.ctpop.i32(i32 %42) 
  %44 = trunc i32 %43 to i8
  %45 = and i8 %44, 1
  %46 = xor i8 %45, 1
  store i8 %46, i8* %40, align 1
  %47 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 %35, i8* %47, align 1
  %48 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  %49 = icmp eq i16 %36, 0
  %50 = zext i1 %49 to i8
  store i8 %50, i8* %48, align 1
  %51 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  %52 = lshr i16 %36, 15
  %53 = trunc i16 %52 to i8
  store i8 %53, i8* %51, align 1
  %54 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 %37, i8* %54, align 1
  br label %55

; <label>:55:                                     ; preds = %34, %5
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3SARI3RnWImE2RnIjE2InIjEEEP6MemoryS8_R5StateT_T0_T1_(%struct.Memory* readnone, %struct.State* nocapture dereferenceable(3376), i64* nocapture, i64, i64)  {
  %6 = trunc i64 %4 to i5
  switch i5 %6, label %10 [
    i5 0, label %43
    i5 1, label %7
  ]

; <label>:7:                                      ; preds = %5
  %8 = shl i64 %3, 32
  %9 = ashr i64 %8, 33
  br label %19

; <label>:10:                                     ; preds = %5
  %11 = and i64 %4, 31
  %12 = add nsw i64 %11, -1
  %13 = shl i64 %3, 32
  %14 = ashr exact i64 %13, 32
  %15 = ashr i64 %14, %12
  %16 = icmp ne i8 0, 0
  %17 = zext i1 %16 to i8
  %18 = lshr i64 %15, 1
  br label %19

; <label>:19:                                     ; preds = %10, %7
  %20 = phi i8 [ 0, %10 ], [ 0, %7 ]
  %21 = phi i64 [ %18, %10 ], [ %9, %7 ]
  %22 = phi i8 [ %17, %10 ], [ 0, %7 ]
  %23 = phi i64 [ %15, %10 ], [ %3, %7 ]
  %24 = trunc i64 %23 to i8
  %25 = and i8 %24, 1
  %26 = trunc i64 %21 to i32
  %27 = and i64 %21, 4294967295
  store i64 %27, i64* %2, align 8
  %28 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  store i8 %25, i8* %28, align 1
  %29 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  %30 = and i32 %26, 255
  %31 = tail call i32 @llvm.ctpop.i32(i32 %30) 
  %32 = trunc i32 %31 to i8
  %33 = and i8 %32, 1
  %34 = xor i8 %33, 1
  store i8 %34, i8* %29, align 1
  %35 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 %20, i8* %35, align 1
  %36 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  %37 = icmp eq i32 %26, 0
  %38 = zext i1 %37 to i8
  store i8 %38, i8* %36, align 1
  %39 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  %40 = lshr i32 %26, 31
  %41 = trunc i32 %40 to i8
  store i8 %41, i8* %39, align 1
  %42 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 %22, i8* %42, align 1
  br label %43

; <label>:43:                                     ; preds = %19, %5
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3SARI3RnWImE2RnImE2InImEEEP6MemoryS8_R5StateT_T0_T1_(%struct.Memory* readnone, %struct.State* nocapture dereferenceable(3376), i64* nocapture, i64, i64)  {
  %6 = trunc i64 %4 to i6
  switch i6 %6, label %8 [
    i6 0, label %37
    i6 1, label %7
  ]

; <label>:7:                                      ; preds = %5
  br label %14

; <label>:8:                                      ; preds = %5
  %9 = and i64 %4, 63
  %10 = add nsw i64 %9, -1
  %11 = ashr i64 %3, %10
  %12 = icmp ne i8 0, 0
  %13 = zext i1 %12 to i8
  br label %14

; <label>:14:                                     ; preds = %8, %7
  %15 = phi i8 [ 0, %7 ], [ 0, %8 ]
  %16 = phi i64 [ %3, %7 ], [ %11, %8 ]
  %17 = phi i8 [ 0, %7 ], [ %13, %8 ]
  %18 = trunc i64 %16 to i8
  %19 = and i8 %18, 1
  %20 = ashr i64 %16, 1
  store i64 %20, i64* %2, align 8
  %21 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  store i8 %19, i8* %21, align 1
  %22 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  %23 = trunc i64 %20 to i32
  %24 = and i32 %23, 255
  %25 = tail call i32 @llvm.ctpop.i32(i32 %24) 
  %26 = trunc i32 %25 to i8
  %27 = and i8 %26, 1
  %28 = xor i8 %27, 1
  store i8 %28, i8* %22, align 1
  %29 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 %15, i8* %29, align 1
  %30 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  %31 = icmp eq i64 %20, 0
  %32 = zext i1 %31 to i8
  store i8 %32, i8* %30, align 1
  %33 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  %34 = lshr i64 %20, 63
  %35 = trunc i64 %34 to i8
  store i8 %35, i8* %33, align 1
  %36 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 %17, i8* %36, align 1
  br label %37

; <label>:37:                                     ; preds = %14, %5
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3SARI3MnWIhE2MnIhE2RnIhEEEP6MemoryS8_R5StateT_T0_T1_(%struct.Memory*, %struct.State* nocapture dereferenceable(3376), i64, i64, i64)  {
  %6 = inttoptr i64 %3 to i8*
  %7 = load i8, i8* %6
  %8 = trunc i64 %4 to i8
  %9 = and i8 %8, 31
  %10 = trunc i64 %4 to i5
  switch i5 %10, label %14 [
    i5 0, label %51
    i5 1, label %11
  ]

; <label>:11:                                     ; preds = %5
  %12 = and i8 %7, 1
  %13 = ashr i8 %7, 1
  br label %31

; <label>:14:                                     ; preds = %5
  %15 = icmp ult i8 %9, 8
  br i1 %15, label %16, label %27

; <label>:16:                                     ; preds = %14
  %17 = add nsw i8 %9, -1
  %18 = sext i8 %7 to i64
  %19 = sext i8 %17 to i64
  %20 = ashr i64 %18, %19
  %21 = trunc i64 %20 to i8
  %22 = icmp ne i8 0, 0
  %23 = zext i1 %22 to i8
  %24 = and i8 %21, 1
  %25 = lshr i64 %20, 1
  %26 = trunc i64 %25 to i8
  br label %31

; <label>:27:                                     ; preds = %14
  %28 = icmp ne i8 0, 0
  %29 = zext i1 %28 to i8
  %30 = ashr i8 %7, 7
  br label %31

; <label>:31:                                     ; preds = %27, %16, %11
  %32 = phi i8 [ 0, %27 ], [ 0, %16 ], [ 0, %11 ]
  %33 = phi i8 [ %30, %27 ], [ %26, %16 ], [ %13, %11 ]
  %34 = phi i8 [ %29, %27 ], [ %23, %16 ], [ 0, %11 ]
  %35 = phi i8 [ %29, %27 ], [ %24, %16 ], [ %12, %11 ]
  %36 = inttoptr i64 %2 to i8*
  store i8 %33, i8* %36
  %37 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  store i8 %35, i8* %37, align 1
  %38 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  %39 = zext i8 %33 to i32
  %40 = tail call i32 @llvm.ctpop.i32(i32 %39) 
  %41 = trunc i32 %40 to i8
  %42 = and i8 %41, 1
  %43 = xor i8 %42, 1
  store i8 %43, i8* %38, align 1
  %44 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 %32, i8* %44, align 1
  %45 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  %46 = icmp eq i8 %33, 0
  %47 = zext i1 %46 to i8
  store i8 %47, i8* %45, align 1
  %48 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  %49 = lshr i8 %33, 7
  store i8 %49, i8* %48, align 1
  %50 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 %34, i8* %50, align 1
  br label %51

; <label>:51:                                     ; preds = %31, %5
  %52 = phi %struct.Memory* [ %0, %31 ], [ %0, %5 ]
  ret %struct.Memory* %52
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3SARI3RnWIhE2RnIhES4_EEP6MemoryS6_R5StateT_T0_T1_(%struct.Memory* readnone, %struct.State* nocapture dereferenceable(3376), i8* nocapture, i64, i64)  {
  %6 = trunc i64 %3 to i8
  %7 = trunc i64 %4 to i8
  %8 = and i8 %7, 31
  %9 = trunc i64 %4 to i5
  switch i5 %9, label %15 [
    i5 0, label %52
    i5 1, label %10
  ]

; <label>:10:                                     ; preds = %5
  %11 = and i8 %6, 1
  %12 = shl i64 %3, 56
  %13 = ashr i64 %12, 57
  %14 = trunc i64 %13 to i8
  br label %33

; <label>:15:                                     ; preds = %5
  %16 = icmp ult i8 %8, 8
  br i1 %16, label %17, label %29

; <label>:17:                                     ; preds = %15
  %18 = add nsw i8 %8, -1
  %19 = shl i64 %3, 56
  %20 = ashr exact i64 %19, 56
  %21 = sext i8 %18 to i64
  %22 = ashr i64 %20, %21
  %23 = trunc i64 %22 to i8
  %24 = icmp ne i8 0, 0
  %25 = zext i1 %24 to i8
  %26 = and i8 %23, 1
  %27 = lshr i64 %22, 1
  %28 = trunc i64 %27 to i8
  br label %33

; <label>:29:                                     ; preds = %15
  %30 = icmp ne i8 0, 0
  %31 = zext i1 %30 to i8
  %32 = ashr i8 %6, 7
  br label %33

; <label>:33:                                     ; preds = %29, %17, %10
  %34 = phi i8 [ 0, %29 ], [ 0, %17 ], [ 0, %10 ]
  %35 = phi i8 [ %32, %29 ], [ %28, %17 ], [ %14, %10 ]
  %36 = phi i8 [ %31, %29 ], [ %25, %17 ], [ 0, %10 ]
  %37 = phi i8 [ %31, %29 ], [ %26, %17 ], [ %11, %10 ]
  store i8 %35, i8* %2, align 1
  %38 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  store i8 %37, i8* %38, align 1
  %39 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  %40 = zext i8 %35 to i32
  %41 = tail call i32 @llvm.ctpop.i32(i32 %40) 
  %42 = trunc i32 %41 to i8
  %43 = and i8 %42, 1
  %44 = xor i8 %43, 1
  store i8 %44, i8* %39, align 1
  %45 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 %34, i8* %45, align 1
  %46 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  %47 = icmp eq i8 %35, 0
  %48 = zext i1 %47 to i8
  store i8 %48, i8* %46, align 1
  %49 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  %50 = lshr i8 %35, 7
  store i8 %50, i8* %49, align 1
  %51 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 %36, i8* %51, align 1
  br label %52

; <label>:52:                                     ; preds = %33, %5
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3SARI3MnWItE2MnItE2RnItEEEP6MemoryS8_R5StateT_T0_T1_(%struct.Memory*, %struct.State* nocapture dereferenceable(3376), i64, i64, i64)  {
  %6 = inttoptr i64 %3 to i16*
  %7 = load i16, i16* %6
  %8 = trunc i64 %4 to i16
  %9 = and i16 %8, 31
  %10 = trunc i64 %4 to i5
  switch i5 %10, label %15 [
    i5 0, label %54
    i5 1, label %11
  ]

; <label>:11:                                     ; preds = %5
  %12 = trunc i16 %7 to i8
  %13 = and i8 %12, 1
  %14 = ashr i16 %7, 1
  br label %32

; <label>:15:                                     ; preds = %5
  %16 = icmp ult i16 %9, 16
  br i1 %16, label %17, label %28

; <label>:17:                                     ; preds = %15
  %18 = add nsw i16 %9, -1
  %19 = sext i16 %7 to i64
  %20 = sext i16 %18 to i64
  %21 = ashr i64 %19, %20
  %22 = icmp ne i8 0, 0
  %23 = zext i1 %22 to i8
  %24 = trunc i64 %21 to i8
  %25 = and i8 %24, 1
  %26 = lshr i64 %21, 1
  %27 = trunc i64 %26 to i16
  br label %32

; <label>:28:                                     ; preds = %15
  %29 = icmp ne i8 0, 0
  %30 = zext i1 %29 to i8
  %31 = ashr i16 %7, 15
  br label %32

; <label>:32:                                     ; preds = %28, %17, %11
  %33 = phi i8 [ 0, %28 ], [ 0, %17 ], [ 0, %11 ]
  %34 = phi i16 [ %31, %28 ], [ %27, %17 ], [ %14, %11 ]
  %35 = phi i8 [ %30, %28 ], [ %23, %17 ], [ 0, %11 ]
  %36 = phi i8 [ %30, %28 ], [ %25, %17 ], [ %13, %11 ]
  %37 = inttoptr i64 %2 to i16*
  store i16 %34, i16* %37
  %38 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  store i8 %36, i8* %38, align 1
  %39 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  %40 = and i16 %34, 255
  %41 = zext i16 %40 to i32
  %42 = tail call i32 @llvm.ctpop.i32(i32 %41) 
  %43 = trunc i32 %42 to i8
  %44 = and i8 %43, 1
  %45 = xor i8 %44, 1
  store i8 %45, i8* %39, align 1
  %46 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 %33, i8* %46, align 1
  %47 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  %48 = icmp eq i16 %34, 0
  %49 = zext i1 %48 to i8
  store i8 %49, i8* %47, align 1
  %50 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  %51 = lshr i16 %34, 15
  %52 = trunc i16 %51 to i8
  store i8 %52, i8* %50, align 1
  %53 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 %35, i8* %53, align 1
  br label %54

; <label>:54:                                     ; preds = %32, %5
  %55 = phi %struct.Memory* [ %0, %32 ], [ %0, %5 ]
  ret %struct.Memory* %55
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3SARI3MnWIjE2MnIjE2RnIjEEEP6MemoryS8_R5StateT_T0_T1_(%struct.Memory*, %struct.State* nocapture dereferenceable(3376), i64, i64, i64)  {
  %6 = inttoptr i64 %3 to i32*
  %7 = load i32, i32* %6
  %8 = trunc i64 %4 to i5
  switch i5 %8, label %12 [
    i5 0, label %44
    i5 1, label %9
  ]

; <label>:9:                                      ; preds = %5
  %10 = trunc i32 %7 to i8
  %11 = ashr i32 %7, 1
  br label %22

; <label>:12:                                     ; preds = %5
  %13 = and i64 %4, 31
  %14 = add nsw i64 %13, -1
  %15 = sext i32 %7 to i64
  %16 = ashr i64 %15, %14
  %17 = icmp ne i8 0, 0
  %18 = zext i1 %17 to i8
  %19 = trunc i64 %16 to i8
  %20 = lshr i64 %16, 1
  %21 = trunc i64 %20 to i32
  br label %22

; <label>:22:                                     ; preds = %12, %9
  %23 = phi i8 [ 0, %12 ], [ 0, %9 ]
  %24 = phi i32 [ %21, %12 ], [ %11, %9 ]
  %25 = phi i8 [ %18, %12 ], [ 0, %9 ]
  %26 = phi i8 [ %19, %12 ], [ %10, %9 ]
  %27 = and i8 %26, 1
  %28 = inttoptr i64 %2 to i32*
  store i32 %24, i32* %28
  %29 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  store i8 %27, i8* %29, align 1
  %30 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  %31 = and i32 %24, 255
  %32 = tail call i32 @llvm.ctpop.i32(i32 %31) 
  %33 = trunc i32 %32 to i8
  %34 = and i8 %33, 1
  %35 = xor i8 %34, 1
  store i8 %35, i8* %30, align 1
  %36 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 %23, i8* %36, align 1
  %37 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  %38 = icmp eq i32 %24, 0
  %39 = zext i1 %38 to i8
  store i8 %39, i8* %37, align 1
  %40 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  %41 = lshr i32 %24, 31
  %42 = trunc i32 %41 to i8
  store i8 %42, i8* %40, align 1
  %43 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 %25, i8* %43, align 1
  br label %44

; <label>:44:                                     ; preds = %22, %5
  %45 = phi %struct.Memory* [ %0, %22 ], [ %0, %5 ]
  ret %struct.Memory* %45
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3SARI3MnWImE2MnImE2RnImEEEP6MemoryS8_R5StateT_T0_T1_(%struct.Memory*, %struct.State* nocapture dereferenceable(3376), i64, i64, i64)  {
  %6 = inttoptr i64 %3 to i64*
  %7 = load i64, i64* %6
  %8 = trunc i64 %4 to i6
  switch i6 %8, label %10 [
    i6 0, label %40
    i6 1, label %9
  ]

; <label>:9:                                      ; preds = %5
  br label %16

; <label>:10:                                     ; preds = %5
  %11 = and i64 %4, 63
  %12 = add nsw i64 %11, -1
  %13 = ashr i64 %7, %12
  %14 = icmp ne i8 0, 0
  %15 = zext i1 %14 to i8
  br label %16

; <label>:16:                                     ; preds = %10, %9
  %17 = phi i8 [ 0, %9 ], [ 0, %10 ]
  %18 = phi i64 [ %7, %9 ], [ %13, %10 ]
  %19 = phi i8 [ 0, %9 ], [ %15, %10 ]
  %20 = trunc i64 %18 to i8
  %21 = and i8 %20, 1
  %22 = ashr i64 %18, 1
  %23 = inttoptr i64 %2 to i64*
  store i64 %22, i64* %23
  %24 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  store i8 %21, i8* %24, align 1
  %25 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  %26 = trunc i64 %22 to i32
  %27 = and i32 %26, 255
  %28 = tail call i32 @llvm.ctpop.i32(i32 %27) 
  %29 = trunc i32 %28 to i8
  %30 = and i8 %29, 1
  %31 = xor i8 %30, 1
  store i8 %31, i8* %25, align 1
  %32 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 %17, i8* %32, align 1
  %33 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  %34 = icmp eq i64 %22, 0
  %35 = zext i1 %34 to i8
  store i8 %35, i8* %33, align 1
  %36 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  %37 = lshr i64 %22, 63
  %38 = trunc i64 %37 to i8
  store i8 %38, i8* %36, align 1
  %39 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 %19, i8* %39, align 1
  br label %40

; <label>:40:                                     ; preds = %16, %5
  %41 = phi %struct.Memory* [ %0, %16 ], [ %0, %5 ]
  ret %struct.Memory* %41
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3SARI3RnWItE2RnItES4_EEP6MemoryS6_R5StateT_T0_T1_(%struct.Memory* readnone, %struct.State* nocapture dereferenceable(3376), i16* nocapture, i64, i64)  {
  %6 = trunc i64 %3 to i16
  %7 = trunc i64 %4 to i16
  %8 = and i16 %7, 31
  %9 = trunc i64 %4 to i5
  switch i5 %9, label %16 [
    i5 0, label %55
    i5 1, label %10
  ]

; <label>:10:                                     ; preds = %5
  %11 = trunc i64 %3 to i8
  %12 = and i8 %11, 1
  %13 = shl i64 %3, 48
  %14 = ashr i64 %13, 49
  %15 = trunc i64 %14 to i16
  br label %34

; <label>:16:                                     ; preds = %5
  %17 = icmp ult i16 %8, 16
  br i1 %17, label %18, label %30

; <label>:18:                                     ; preds = %16
  %19 = add nsw i16 %8, -1
  %20 = shl i64 %3, 48
  %21 = ashr exact i64 %20, 48
  %22 = sext i16 %19 to i64
  %23 = ashr i64 %21, %22
  %24 = icmp ne i8 0, 0
  %25 = zext i1 %24 to i8
  %26 = trunc i64 %23 to i8
  %27 = and i8 %26, 1
  %28 = lshr i64 %23, 1
  %29 = trunc i64 %28 to i16
  br label %34

; <label>:30:                                     ; preds = %16
  %31 = icmp ne i8 0, 0
  %32 = zext i1 %31 to i8
  %33 = ashr i16 %6, 15
  br label %34

; <label>:34:                                     ; preds = %30, %18, %10
  %35 = phi i8 [ 0, %30 ], [ 0, %18 ], [ 0, %10 ]
  %36 = phi i16 [ %33, %30 ], [ %29, %18 ], [ %15, %10 ]
  %37 = phi i8 [ %32, %30 ], [ %25, %18 ], [ 0, %10 ]
  %38 = phi i8 [ %32, %30 ], [ %27, %18 ], [ %12, %10 ]
  store i16 %36, i16* %2, align 2
  %39 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  store i8 %38, i8* %39, align 1
  %40 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  %41 = and i16 %36, 255
  %42 = zext i16 %41 to i32
  %43 = tail call i32 @llvm.ctpop.i32(i32 %42) 
  %44 = trunc i32 %43 to i8
  %45 = and i8 %44, 1
  %46 = xor i8 %45, 1
  store i8 %46, i8* %40, align 1
  %47 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 %35, i8* %47, align 1
  %48 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  %49 = icmp eq i16 %36, 0
  %50 = zext i1 %49 to i8
  store i8 %50, i8* %48, align 1
  %51 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  %52 = lshr i16 %36, 15
  %53 = trunc i16 %52 to i8
  store i8 %53, i8* %51, align 1
  %54 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 %37, i8* %54, align 1
  br label %55

; <label>:55:                                     ; preds = %34, %5
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3SARI3RnWImE2RnIjES4_EEP6MemoryS6_R5StateT_T0_T1_(%struct.Memory* readnone, %struct.State* nocapture dereferenceable(3376), i64* nocapture, i64, i64)  {
  %6 = trunc i64 %4 to i5
  switch i5 %6, label %10 [
    i5 0, label %43
    i5 1, label %7
  ]

; <label>:7:                                      ; preds = %5
  %8 = shl i64 %3, 32
  %9 = ashr i64 %8, 33
  br label %19

; <label>:10:                                     ; preds = %5
  %11 = and i64 %4, 31
  %12 = add nsw i64 %11, -1
  %13 = shl i64 %3, 32
  %14 = ashr exact i64 %13, 32
  %15 = ashr i64 %14, %12
  %16 = icmp ne i8 0, 0
  %17 = zext i1 %16 to i8
  %18 = lshr i64 %15, 1
  br label %19

; <label>:19:                                     ; preds = %10, %7
  %20 = phi i8 [ 0, %10 ], [ 0, %7 ]
  %21 = phi i64 [ %18, %10 ], [ %9, %7 ]
  %22 = phi i8 [ %17, %10 ], [ 0, %7 ]
  %23 = phi i64 [ %15, %10 ], [ %3, %7 ]
  %24 = trunc i64 %23 to i8
  %25 = and i8 %24, 1
  %26 = trunc i64 %21 to i32
  %27 = and i64 %21, 4294967295
  store i64 %27, i64* %2, align 8
  %28 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  store i8 %25, i8* %28, align 1
  %29 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  %30 = and i32 %26, 255
  %31 = tail call i32 @llvm.ctpop.i32(i32 %30) 
  %32 = trunc i32 %31 to i8
  %33 = and i8 %32, 1
  %34 = xor i8 %33, 1
  store i8 %34, i8* %29, align 1
  %35 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 %20, i8* %35, align 1
  %36 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  %37 = icmp eq i32 %26, 0
  %38 = zext i1 %37 to i8
  store i8 %38, i8* %36, align 1
  %39 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  %40 = lshr i32 %26, 31
  %41 = trunc i32 %40 to i8
  store i8 %41, i8* %39, align 1
  %42 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 %22, i8* %42, align 1
  br label %43

; <label>:43:                                     ; preds = %19, %5
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3SARI3RnWImE2RnImES4_EEP6MemoryS6_R5StateT_T0_T1_(%struct.Memory* readnone, %struct.State* nocapture dereferenceable(3376), i64* nocapture, i64, i64)  {
  %6 = trunc i64 %4 to i6
  switch i6 %6, label %8 [
    i6 0, label %37
    i6 1, label %7
  ]

; <label>:7:                                      ; preds = %5
  br label %14

; <label>:8:                                      ; preds = %5
  %9 = and i64 %4, 63
  %10 = add nsw i64 %9, -1
  %11 = ashr i64 %3, %10
  %12 = icmp ne i8 0, 0
  %13 = zext i1 %12 to i8
  br label %14

; <label>:14:                                     ; preds = %8, %7
  %15 = phi i8 [ 0, %7 ], [ 0, %8 ]
  %16 = phi i64 [ %3, %7 ], [ %11, %8 ]
  %17 = phi i8 [ 0, %7 ], [ %13, %8 ]
  %18 = trunc i64 %16 to i8
  %19 = and i8 %18, 1
  %20 = ashr i64 %16, 1
  store i64 %20, i64* %2, align 8
  %21 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  store i8 %19, i8* %21, align 1
  %22 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  %23 = trunc i64 %20 to i32
  %24 = and i32 %23, 255
  %25 = tail call i32 @llvm.ctpop.i32(i32 %24) 
  %26 = trunc i32 %25 to i8
  %27 = and i8 %26, 1
  %28 = xor i8 %27, 1
  store i8 %28, i8* %22, align 1
  %29 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 %15, i8* %29, align 1
  %30 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  %31 = icmp eq i64 %20, 0
  %32 = zext i1 %31 to i8
  store i8 %32, i8* %30, align 1
  %33 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  %34 = lshr i64 %20, 63
  %35 = trunc i64 %34 to i8
  store i8 %35, i8* %33, align 1
  %36 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 %17, i8* %36, align 1
  br label %37

; <label>:37:                                     ; preds = %14, %5
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3SHLI3MnWIhE2MnIhE2InIhEEEP6MemoryS8_R5StateT_T0_T1_(%struct.Memory*, %struct.State* nocapture dereferenceable(3376), i64, i64, i64)  {
  %6 = inttoptr i64 %3 to i8*
  %7 = load i8, i8* %6
  %8 = trunc i64 %4 to i8
  %9 = and i8 %8, 31
  %10 = trunc i64 %4 to i5
  switch i5 %10, label %16 [
    i5 0, label %48
    i5 1, label %11
  ]

; <label>:11:                                     ; preds = %5
  %12 = shl i8 %7, 1
  %13 = icmp slt i8 %7, 0
  %14 = icmp slt i8 %12, 0
  %15 = xor i1 %13, %14
  br label %27

; <label>:16:                                     ; preds = %5
  %17 = icmp ult i8 %9, 8
  br i1 %17, label %18, label %27

; <label>:18:                                     ; preds = %16
  %19 = add nsw i8 %9, -1
  %20 = zext i8 %7 to i64
  %21 = zext i8 %19 to i64
  %22 = shl i64 %20, %21
  %23 = trunc i64 %22 to i8
  %24 = icmp slt i8 %23, 0
  %25 = icmp ne i8 0, 0
  %26 = shl i8 %23, 1
  br label %27

; <label>:27:                                     ; preds = %18, %16, %11
  %28 = phi i1 [ %13, %11 ], [ %24, %18 ], [ false, %16 ]
  %29 = phi i1 [ %15, %11 ], [ %25, %18 ], [ true, %16 ]
  %30 = phi i8 [ %12, %11 ], [ %26, %18 ], [ 0, %16 ]
  %31 = inttoptr i64 %2 to i8*
  store i8 %30, i8* %31
  %32 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  %33 = zext i1 %28 to i8
  store i8 %33, i8* %32, align 1
  %34 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  %35 = zext i8 %30 to i32
  %36 = tail call i32 @llvm.ctpop.i32(i32 %35) 
  %37 = trunc i32 %36 to i8
  %38 = and i8 %37, 1
  %39 = xor i8 %38, 1
  store i8 %39, i8* %34, align 1
  %40 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 0, i8* %40, align 1
  %41 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  %42 = icmp eq i8 %30, 0
  %43 = zext i1 %42 to i8
  store i8 %43, i8* %41, align 1
  %44 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  %45 = lshr i8 %30, 7
  store i8 %45, i8* %44, align 1
  %46 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  %47 = zext i1 %29 to i8
  store i8 %47, i8* %46, align 1
  br label %48

; <label>:48:                                     ; preds = %27, %5
  %49 = phi %struct.Memory* [ %0, %27 ], [ %0, %5 ]
  ret %struct.Memory* %49
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3SHLI3RnWIhE2RnIhE2InIhEEEP6MemoryS8_R5StateT_T0_T1_(%struct.Memory* readnone, %struct.State* nocapture dereferenceable(3376), i8* nocapture, i64, i64)  {
  %6 = trunc i64 %4 to i8
  %7 = and i8 %6, 31
  %8 = trunc i64 %4 to i5
  switch i5 %8, label %15 [
    i5 0, label %46
    i5 1, label %9
  ]

; <label>:9:                                      ; preds = %5
  %10 = trunc i64 %3 to i8
  %11 = shl i8 %10, 1
  %12 = icmp slt i8 %10, 0
  %13 = icmp slt i8 %11, 0
  %14 = xor i1 %12, %13
  br label %26

; <label>:15:                                     ; preds = %5
  %16 = icmp ult i8 %7, 8
  br i1 %16, label %17, label %26

; <label>:17:                                     ; preds = %15
  %18 = add nsw i8 %7, -1
  %19 = and i64 %3, 255
  %20 = zext i8 %18 to i64
  %21 = shl i64 %19, %20
  %22 = trunc i64 %21 to i8
  %23 = icmp slt i8 %22, 0
  %24 = icmp ne i8 0, 0
  %25 = shl i8 %22, 1
  br label %26

; <label>:26:                                     ; preds = %17, %15, %9
  %27 = phi i1 [ %12, %9 ], [ %23, %17 ], [ false, %15 ]
  %28 = phi i1 [ %14, %9 ], [ %24, %17 ], [ true, %15 ]
  %29 = phi i8 [ %11, %9 ], [ %25, %17 ], [ 0, %15 ]
  store i8 %29, i8* %2, align 1
  %30 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  %31 = zext i1 %27 to i8
  store i8 %31, i8* %30, align 1
  %32 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  %33 = zext i8 %29 to i32
  %34 = tail call i32 @llvm.ctpop.i32(i32 %33) 
  %35 = trunc i32 %34 to i8
  %36 = and i8 %35, 1
  %37 = xor i8 %36, 1
  store i8 %37, i8* %32, align 1
  %38 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 0, i8* %38, align 1
  %39 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  %40 = icmp eq i8 %29, 0
  %41 = zext i1 %40 to i8
  store i8 %41, i8* %39, align 1
  %42 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  %43 = lshr i8 %29, 7
  store i8 %43, i8* %42, align 1
  %44 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  %45 = zext i1 %28 to i8
  store i8 %45, i8* %44, align 1
  br label %46

; <label>:46:                                     ; preds = %26, %5
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3SHLI3MnWItE2MnItE2InItEEEP6MemoryS8_R5StateT_T0_T1_(%struct.Memory*, %struct.State* nocapture dereferenceable(3376), i64, i64, i64)  {
  %6 = inttoptr i64 %3 to i16*
  %7 = load i16, i16* %6
  %8 = trunc i64 %4 to i16
  %9 = and i16 %8, 31
  %10 = trunc i64 %4 to i5
  switch i5 %10, label %16 [
    i5 0, label %50
    i5 1, label %11
  ]

; <label>:11:                                     ; preds = %5
  %12 = shl i16 %7, 1
  %13 = icmp slt i16 %7, 0
  %14 = icmp slt i16 %12, 0
  %15 = xor i1 %13, %14
  br label %27

; <label>:16:                                     ; preds = %5
  %17 = icmp ult i16 %9, 16
  br i1 %17, label %18, label %27

; <label>:18:                                     ; preds = %16
  %19 = add nsw i16 %9, -1
  %20 = zext i16 %7 to i64
  %21 = zext i16 %19 to i64
  %22 = shl i64 %20, %21
  %23 = trunc i64 %22 to i16
  %24 = icmp slt i16 %23, 0
  %25 = icmp ne i8 0, 0
  %26 = shl i16 %23, 1
  br label %27

; <label>:27:                                     ; preds = %18, %16, %11
  %28 = phi i1 [ %13, %11 ], [ %24, %18 ], [ false, %16 ]
  %29 = phi i1 [ %15, %11 ], [ %25, %18 ], [ true, %16 ]
  %30 = phi i16 [ %12, %11 ], [ %26, %18 ], [ 0, %16 ]
  %31 = inttoptr i64 %2 to i16*
  store i16 %30, i16* %31
  %32 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  %33 = zext i1 %28 to i8
  store i8 %33, i8* %32, align 1
  %34 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  %35 = and i16 %30, 254
  %36 = zext i16 %35 to i32
  %37 = tail call i32 @llvm.ctpop.i32(i32 %36) 
  %38 = trunc i32 %37 to i8
  %39 = and i8 %38, 1
  %40 = xor i8 %39, 1
  store i8 %40, i8* %34, align 1
  %41 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 0, i8* %41, align 1
  %42 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  %43 = icmp eq i16 %30, 0
  %44 = zext i1 %43 to i8
  store i8 %44, i8* %42, align 1
  %45 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  %46 = lshr i16 %30, 15
  %47 = trunc i16 %46 to i8
  store i8 %47, i8* %45, align 1
  %48 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  %49 = zext i1 %29 to i8
  store i8 %49, i8* %48, align 1
  br label %50

; <label>:50:                                     ; preds = %27, %5
  %51 = phi %struct.Memory* [ %0, %27 ], [ %0, %5 ]
  ret %struct.Memory* %51
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3SHLI3MnWIjE2MnIjE2InIjEEEP6MemoryS8_R5StateT_T0_T1_(%struct.Memory*, %struct.State* nocapture dereferenceable(3376), i64, i64, i64)  {
  %6 = inttoptr i64 %3 to i32*
  %7 = load i32, i32* %6
  %8 = trunc i64 %4 to i5
  switch i5 %8, label %14 [
    i5 0, label %46
    i5 1, label %9
  ]

; <label>:9:                                      ; preds = %5
  %10 = shl i32 %7, 1
  %11 = icmp slt i32 %7, 0
  %12 = icmp slt i32 %10, 0
  %13 = xor i1 %11, %12
  br label %24

; <label>:14:                                     ; preds = %5
  %15 = and i64 %4, 31
  %16 = add nuw nsw i64 %15, 4294967295
  %17 = zext i32 %7 to i64
  %18 = and i64 %16, 4294967295
  %19 = shl i64 %17, %18
  %20 = trunc i64 %19 to i32
  %21 = icmp slt i32 %20, 0
  %22 = icmp ne i8 0, 0
  %23 = shl i32 %20, 1
  br label %24

; <label>:24:                                     ; preds = %14, %9
  %25 = phi i1 [ %11, %9 ], [ %21, %14 ]
  %26 = phi i1 [ %13, %9 ], [ %22, %14 ]
  %27 = phi i32 [ %10, %9 ], [ %23, %14 ]
  %28 = inttoptr i64 %2 to i32*
  store i32 %27, i32* %28
  %29 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  %30 = zext i1 %25 to i8
  store i8 %30, i8* %29, align 1
  %31 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  %32 = and i32 %27, 254
  %33 = tail call i32 @llvm.ctpop.i32(i32 %32) 
  %34 = trunc i32 %33 to i8
  %35 = and i8 %34, 1
  %36 = xor i8 %35, 1
  store i8 %36, i8* %31, align 1
  %37 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 0, i8* %37, align 1
  %38 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  %39 = icmp eq i32 %27, 0
  %40 = zext i1 %39 to i8
  store i8 %40, i8* %38, align 1
  %41 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  %42 = lshr i32 %27, 31
  %43 = trunc i32 %42 to i8
  store i8 %43, i8* %41, align 1
  %44 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  %45 = zext i1 %26 to i8
  store i8 %45, i8* %44, align 1
  br label %46

; <label>:46:                                     ; preds = %24, %5
  %47 = phi %struct.Memory* [ %0, %24 ], [ %0, %5 ]
  ret %struct.Memory* %47
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3SHLI3MnWImE2MnImE2InImEEEP6MemoryS8_R5StateT_T0_T1_(%struct.Memory*, %struct.State* nocapture dereferenceable(3376), i64, i64, i64)  {
  %6 = inttoptr i64 %3 to i64*
  %7 = load i64, i64* %6
  %8 = trunc i64 %4 to i6
  switch i6 %8, label %14 [
    i6 0, label %44
    i6 1, label %9
  ]

; <label>:9:                                      ; preds = %5
  %10 = shl i64 %7, 1
  %11 = icmp slt i64 %7, 0
  %12 = icmp slt i64 %10, 0
  %13 = xor i1 %11, %12
  br label %21

; <label>:14:                                     ; preds = %5
  %15 = and i64 %4, 63
  %16 = add nsw i64 %15, -1
  %17 = shl i64 %7, %16
  %18 = icmp slt i64 %17, 0
  %19 = icmp ne i8 0, 0
  %20 = shl i64 %17, 1
  br label %21

; <label>:21:                                     ; preds = %14, %9
  %22 = phi i1 [ %11, %9 ], [ %18, %14 ]
  %23 = phi i1 [ %13, %9 ], [ %19, %14 ]
  %24 = phi i64 [ %10, %9 ], [ %20, %14 ]
  %25 = inttoptr i64 %2 to i64*
  store i64 %24, i64* %25
  %26 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  %27 = zext i1 %22 to i8
  store i8 %27, i8* %26, align 1
  %28 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  %29 = trunc i64 %24 to i32
  %30 = and i32 %29, 254
  %31 = tail call i32 @llvm.ctpop.i32(i32 %30) 
  %32 = trunc i32 %31 to i8
  %33 = and i8 %32, 1
  %34 = xor i8 %33, 1
  store i8 %34, i8* %28, align 1
  %35 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 0, i8* %35, align 1
  %36 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  %37 = icmp eq i64 %24, 0
  %38 = zext i1 %37 to i8
  store i8 %38, i8* %36, align 1
  %39 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  %40 = lshr i64 %24, 63
  %41 = trunc i64 %40 to i8
  store i8 %41, i8* %39, align 1
  %42 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  %43 = zext i1 %23 to i8
  store i8 %43, i8* %42, align 1
  br label %44

; <label>:44:                                     ; preds = %21, %5
  %45 = phi %struct.Memory* [ %0, %21 ], [ %0, %5 ]
  ret %struct.Memory* %45
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3SHLI3RnWItE2RnItE2InItEEEP6MemoryS8_R5StateT_T0_T1_(%struct.Memory* readnone, %struct.State* nocapture dereferenceable(3376), i16* nocapture, i64, i64)  {
  %6 = trunc i64 %4 to i16
  %7 = and i16 %6, 31
  %8 = trunc i64 %4 to i5
  switch i5 %8, label %15 [
    i5 0, label %48
    i5 1, label %9
  ]

; <label>:9:                                      ; preds = %5
  %10 = trunc i64 %3 to i16
  %11 = shl i16 %10, 1
  %12 = icmp slt i16 %10, 0
  %13 = icmp slt i16 %11, 0
  %14 = xor i1 %12, %13
  br label %26

; <label>:15:                                     ; preds = %5
  %16 = icmp ult i16 %7, 16
  br i1 %16, label %17, label %26

; <label>:17:                                     ; preds = %15
  %18 = add nsw i16 %7, -1
  %19 = and i64 %3, 65535
  %20 = zext i16 %18 to i64
  %21 = shl i64 %19, %20
  %22 = trunc i64 %21 to i16
  %23 = icmp slt i16 %22, 0
  %24 = icmp ne i8 0, 0
  %25 = shl i16 %22, 1
  br label %26

; <label>:26:                                     ; preds = %17, %15, %9
  %27 = phi i1 [ %12, %9 ], [ %23, %17 ], [ false, %15 ]
  %28 = phi i1 [ %14, %9 ], [ %24, %17 ], [ true, %15 ]
  %29 = phi i16 [ %11, %9 ], [ %25, %17 ], [ 0, %15 ]
  store i16 %29, i16* %2, align 2
  %30 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  %31 = zext i1 %27 to i8
  store i8 %31, i8* %30, align 1
  %32 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  %33 = and i16 %29, 254
  %34 = zext i16 %33 to i32
  %35 = tail call i32 @llvm.ctpop.i32(i32 %34) 
  %36 = trunc i32 %35 to i8
  %37 = and i8 %36, 1
  %38 = xor i8 %37, 1
  store i8 %38, i8* %32, align 1
  %39 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 0, i8* %39, align 1
  %40 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  %41 = icmp eq i16 %29, 0
  %42 = zext i1 %41 to i8
  store i8 %42, i8* %40, align 1
  %43 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  %44 = lshr i16 %29, 15
  %45 = trunc i16 %44 to i8
  store i8 %45, i8* %43, align 1
  %46 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  %47 = zext i1 %28 to i8
  store i8 %47, i8* %46, align 1
  br label %48

; <label>:48:                                     ; preds = %26, %5
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3SHLI3RnWImE2RnIjE2InIjEEEP6MemoryS8_R5StateT_T0_T1_(%struct.Memory* readnone, %struct.State* nocapture dereferenceable(3376), i64* nocapture, i64, i64)  {
  %6 = trunc i64 %4 to i5
  switch i5 %6, label %13 [
    i5 0, label %45
    i5 1, label %7
  ]

; <label>:7:                                      ; preds = %5
  %8 = trunc i64 %3 to i32
  %9 = shl i32 %8, 1
  %10 = icmp slt i32 %8, 0
  %11 = icmp slt i32 %9, 0
  %12 = xor i1 %10, %11
  br label %23

; <label>:13:                                     ; preds = %5
  %14 = and i64 %4, 31
  %15 = add nuw nsw i64 %14, 4294967295
  %16 = and i64 %3, 4294967295
  %17 = and i64 %15, 4294967295
  %18 = shl i64 %16, %17
  %19 = trunc i64 %18 to i32
  %20 = icmp slt i32 %19, 0
  %21 = icmp ne i8 0, 0
  %22 = shl i32 %19, 1
  br label %23

; <label>:23:                                     ; preds = %13, %7
  %24 = phi i1 [ %10, %7 ], [ %20, %13 ]
  %25 = phi i1 [ %12, %7 ], [ %21, %13 ]
  %26 = phi i32 [ %9, %7 ], [ %22, %13 ]
  %27 = zext i32 %26 to i64
  store i64 %27, i64* %2, align 8
  %28 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  %29 = zext i1 %24 to i8
  store i8 %29, i8* %28, align 1
  %30 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  %31 = and i32 %26, 254
  %32 = tail call i32 @llvm.ctpop.i32(i32 %31) 
  %33 = trunc i32 %32 to i8
  %34 = and i8 %33, 1
  %35 = xor i8 %34, 1
  store i8 %35, i8* %30, align 1
  %36 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 0, i8* %36, align 1
  %37 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  %38 = icmp eq i32 %26, 0
  %39 = zext i1 %38 to i8
  store i8 %39, i8* %37, align 1
  %40 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  %41 = lshr i32 %26, 31
  %42 = trunc i32 %41 to i8
  store i8 %42, i8* %40, align 1
  %43 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  %44 = zext i1 %25 to i8
  store i8 %44, i8* %43, align 1
  br label %45

; <label>:45:                                     ; preds = %23, %5
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3SHLI3RnWImE2RnImE2InImEEEP6MemoryS8_R5StateT_T0_T1_(%struct.Memory* readnone, %struct.State* nocapture dereferenceable(3376), i64* nocapture, i64, i64)  {
  %6 = trunc i64 %4 to i6
  switch i6 %6, label %12 [
    i6 0, label %41
    i6 1, label %7
  ]

; <label>:7:                                      ; preds = %5
  %8 = shl i64 %3, 1
  %9 = icmp slt i64 %3, 0
  %10 = icmp slt i64 %8, 0
  %11 = xor i1 %9, %10
  br label %19

; <label>:12:                                     ; preds = %5
  %13 = and i64 %4, 63
  %14 = add nsw i64 %13, -1
  %15 = shl i64 %3, %14
  %16 = icmp slt i64 %15, 0
  %17 = icmp ne i8 0, 0
  %18 = shl i64 %15, 1
  br label %19

; <label>:19:                                     ; preds = %12, %7
  %20 = phi i1 [ %9, %7 ], [ %16, %12 ]
  %21 = phi i1 [ %11, %7 ], [ %17, %12 ]
  %22 = phi i64 [ %8, %7 ], [ %18, %12 ]
  store i64 %22, i64* %2, align 8
  %23 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  %24 = zext i1 %20 to i8
  store i8 %24, i8* %23, align 1
  %25 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  %26 = trunc i64 %22 to i32
  %27 = and i32 %26, 254
  %28 = tail call i32 @llvm.ctpop.i32(i32 %27) 
  %29 = trunc i32 %28 to i8
  %30 = and i8 %29, 1
  %31 = xor i8 %30, 1
  store i8 %31, i8* %25, align 1
  %32 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 0, i8* %32, align 1
  %33 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  %34 = icmp eq i64 %22, 0
  %35 = zext i1 %34 to i8
  store i8 %35, i8* %33, align 1
  %36 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  %37 = lshr i64 %22, 63
  %38 = trunc i64 %37 to i8
  store i8 %38, i8* %36, align 1
  %39 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  %40 = zext i1 %21 to i8
  store i8 %40, i8* %39, align 1
  br label %41

; <label>:41:                                     ; preds = %19, %5
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3SHLI3MnWIhE2MnIhE2RnIhEEEP6MemoryS8_R5StateT_T0_T1_(%struct.Memory*, %struct.State* nocapture dereferenceable(3376), i64, i64, i64)  {
  %6 = inttoptr i64 %3 to i8*
  %7 = load i8, i8* %6
  %8 = trunc i64 %4 to i8
  %9 = and i8 %8, 31
  %10 = trunc i64 %4 to i5
  switch i5 %10, label %16 [
    i5 0, label %48
    i5 1, label %11
  ]

; <label>:11:                                     ; preds = %5
  %12 = shl i8 %7, 1
  %13 = icmp slt i8 %7, 0
  %14 = icmp slt i8 %12, 0
  %15 = xor i1 %13, %14
  br label %27

; <label>:16:                                     ; preds = %5
  %17 = icmp ult i8 %9, 8
  br i1 %17, label %18, label %27

; <label>:18:                                     ; preds = %16
  %19 = add nsw i8 %9, -1
  %20 = zext i8 %7 to i64
  %21 = zext i8 %19 to i64
  %22 = shl i64 %20, %21
  %23 = trunc i64 %22 to i8
  %24 = icmp slt i8 %23, 0
  %25 = icmp ne i8 0, 0
  %26 = shl i8 %23, 1
  br label %27

; <label>:27:                                     ; preds = %18, %16, %11
  %28 = phi i1 [ %13, %11 ], [ %24, %18 ], [ false, %16 ]
  %29 = phi i1 [ %15, %11 ], [ %25, %18 ], [ true, %16 ]
  %30 = phi i8 [ %12, %11 ], [ %26, %18 ], [ 0, %16 ]
  %31 = inttoptr i64 %2 to i8*
  store i8 %30, i8* %31
  %32 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  %33 = zext i1 %28 to i8
  store i8 %33, i8* %32, align 1
  %34 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  %35 = zext i8 %30 to i32
  %36 = tail call i32 @llvm.ctpop.i32(i32 %35) 
  %37 = trunc i32 %36 to i8
  %38 = and i8 %37, 1
  %39 = xor i8 %38, 1
  store i8 %39, i8* %34, align 1
  %40 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 0, i8* %40, align 1
  %41 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  %42 = icmp eq i8 %30, 0
  %43 = zext i1 %42 to i8
  store i8 %43, i8* %41, align 1
  %44 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  %45 = lshr i8 %30, 7
  store i8 %45, i8* %44, align 1
  %46 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  %47 = zext i1 %29 to i8
  store i8 %47, i8* %46, align 1
  br label %48

; <label>:48:                                     ; preds = %27, %5
  %49 = phi %struct.Memory* [ %0, %27 ], [ %0, %5 ]
  ret %struct.Memory* %49
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3SHLI3RnWIhE2RnIhES4_EEP6MemoryS6_R5StateT_T0_T1_(%struct.Memory* readnone, %struct.State* nocapture dereferenceable(3376), i8* nocapture, i64, i64)  {
  %6 = trunc i64 %4 to i8
  %7 = and i8 %6, 31
  %8 = trunc i64 %4 to i5
  switch i5 %8, label %15 [
    i5 0, label %46
    i5 1, label %9
  ]

; <label>:9:                                      ; preds = %5
  %10 = trunc i64 %3 to i8
  %11 = shl i8 %10, 1
  %12 = icmp slt i8 %10, 0
  %13 = icmp slt i8 %11, 0
  %14 = xor i1 %12, %13
  br label %26

; <label>:15:                                     ; preds = %5
  %16 = icmp ult i8 %7, 8
  br i1 %16, label %17, label %26

; <label>:17:                                     ; preds = %15
  %18 = add nsw i8 %7, -1
  %19 = and i64 %3, 255
  %20 = zext i8 %18 to i64
  %21 = shl i64 %19, %20
  %22 = trunc i64 %21 to i8
  %23 = icmp slt i8 %22, 0
  %24 = icmp ne i8 0, 0
  %25 = shl i8 %22, 1
  br label %26

; <label>:26:                                     ; preds = %17, %15, %9
  %27 = phi i1 [ %12, %9 ], [ %23, %17 ], [ false, %15 ]
  %28 = phi i1 [ %14, %9 ], [ %24, %17 ], [ true, %15 ]
  %29 = phi i8 [ %11, %9 ], [ %25, %17 ], [ 0, %15 ]
  store i8 %29, i8* %2, align 1
  %30 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  %31 = zext i1 %27 to i8
  store i8 %31, i8* %30, align 1
  %32 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  %33 = zext i8 %29 to i32
  %34 = tail call i32 @llvm.ctpop.i32(i32 %33) 
  %35 = trunc i32 %34 to i8
  %36 = and i8 %35, 1
  %37 = xor i8 %36, 1
  store i8 %37, i8* %32, align 1
  %38 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 0, i8* %38, align 1
  %39 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  %40 = icmp eq i8 %29, 0
  %41 = zext i1 %40 to i8
  store i8 %41, i8* %39, align 1
  %42 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  %43 = lshr i8 %29, 7
  store i8 %43, i8* %42, align 1
  %44 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  %45 = zext i1 %28 to i8
  store i8 %45, i8* %44, align 1
  br label %46

; <label>:46:                                     ; preds = %26, %5
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3SHLI3MnWItE2MnItE2RnItEEEP6MemoryS8_R5StateT_T0_T1_(%struct.Memory*, %struct.State* nocapture dereferenceable(3376), i64, i64, i64)  {
  %6 = inttoptr i64 %3 to i16*
  %7 = load i16, i16* %6
  %8 = trunc i64 %4 to i16
  %9 = and i16 %8, 31
  %10 = trunc i64 %4 to i5
  switch i5 %10, label %16 [
    i5 0, label %50
    i5 1, label %11
  ]

; <label>:11:                                     ; preds = %5
  %12 = shl i16 %7, 1
  %13 = icmp slt i16 %7, 0
  %14 = icmp slt i16 %12, 0
  %15 = xor i1 %13, %14
  br label %27

; <label>:16:                                     ; preds = %5
  %17 = icmp ult i16 %9, 16
  br i1 %17, label %18, label %27

; <label>:18:                                     ; preds = %16
  %19 = add nsw i16 %9, -1
  %20 = zext i16 %7 to i64
  %21 = zext i16 %19 to i64
  %22 = shl i64 %20, %21
  %23 = trunc i64 %22 to i16
  %24 = icmp slt i16 %23, 0
  %25 = icmp ne i8 0, 0
  %26 = shl i16 %23, 1
  br label %27

; <label>:27:                                     ; preds = %18, %16, %11
  %28 = phi i1 [ %13, %11 ], [ %24, %18 ], [ false, %16 ]
  %29 = phi i1 [ %15, %11 ], [ %25, %18 ], [ true, %16 ]
  %30 = phi i16 [ %12, %11 ], [ %26, %18 ], [ 0, %16 ]
  %31 = inttoptr i64 %2 to i16*
  store i16 %30, i16* %31
  %32 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  %33 = zext i1 %28 to i8
  store i8 %33, i8* %32, align 1
  %34 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  %35 = and i16 %30, 254
  %36 = zext i16 %35 to i32
  %37 = tail call i32 @llvm.ctpop.i32(i32 %36) 
  %38 = trunc i32 %37 to i8
  %39 = and i8 %38, 1
  %40 = xor i8 %39, 1
  store i8 %40, i8* %34, align 1
  %41 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 0, i8* %41, align 1
  %42 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  %43 = icmp eq i16 %30, 0
  %44 = zext i1 %43 to i8
  store i8 %44, i8* %42, align 1
  %45 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  %46 = lshr i16 %30, 15
  %47 = trunc i16 %46 to i8
  store i8 %47, i8* %45, align 1
  %48 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  %49 = zext i1 %29 to i8
  store i8 %49, i8* %48, align 1
  br label %50

; <label>:50:                                     ; preds = %27, %5
  %51 = phi %struct.Memory* [ %0, %27 ], [ %0, %5 ]
  ret %struct.Memory* %51
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3SHLI3MnWIjE2MnIjE2RnIjEEEP6MemoryS8_R5StateT_T0_T1_(%struct.Memory*, %struct.State* nocapture dereferenceable(3376), i64, i64, i64)  {
  %6 = inttoptr i64 %3 to i32*
  %7 = load i32, i32* %6
  %8 = trunc i64 %4 to i5
  switch i5 %8, label %14 [
    i5 0, label %46
    i5 1, label %9
  ]

; <label>:9:                                      ; preds = %5
  %10 = shl i32 %7, 1
  %11 = icmp slt i32 %7, 0
  %12 = icmp slt i32 %10, 0
  %13 = xor i1 %11, %12
  br label %24

; <label>:14:                                     ; preds = %5
  %15 = and i64 %4, 31
  %16 = add nuw nsw i64 %15, 4294967295
  %17 = zext i32 %7 to i64
  %18 = and i64 %16, 4294967295
  %19 = shl i64 %17, %18
  %20 = trunc i64 %19 to i32
  %21 = icmp slt i32 %20, 0
  %22 = icmp ne i8 0, 0
  %23 = shl i32 %20, 1
  br label %24

; <label>:24:                                     ; preds = %14, %9
  %25 = phi i1 [ %11, %9 ], [ %21, %14 ]
  %26 = phi i1 [ %13, %9 ], [ %22, %14 ]
  %27 = phi i32 [ %10, %9 ], [ %23, %14 ]
  %28 = inttoptr i64 %2 to i32*
  store i32 %27, i32* %28
  %29 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  %30 = zext i1 %25 to i8
  store i8 %30, i8* %29, align 1
  %31 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  %32 = and i32 %27, 254
  %33 = tail call i32 @llvm.ctpop.i32(i32 %32) 
  %34 = trunc i32 %33 to i8
  %35 = and i8 %34, 1
  %36 = xor i8 %35, 1
  store i8 %36, i8* %31, align 1
  %37 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 0, i8* %37, align 1
  %38 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  %39 = icmp eq i32 %27, 0
  %40 = zext i1 %39 to i8
  store i8 %40, i8* %38, align 1
  %41 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  %42 = lshr i32 %27, 31
  %43 = trunc i32 %42 to i8
  store i8 %43, i8* %41, align 1
  %44 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  %45 = zext i1 %26 to i8
  store i8 %45, i8* %44, align 1
  br label %46

; <label>:46:                                     ; preds = %24, %5
  %47 = phi %struct.Memory* [ %0, %24 ], [ %0, %5 ]
  ret %struct.Memory* %47
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3SHLI3MnWImE2MnImE2RnImEEEP6MemoryS8_R5StateT_T0_T1_(%struct.Memory*, %struct.State* nocapture dereferenceable(3376), i64, i64, i64)  {
  %6 = inttoptr i64 %3 to i64*
  %7 = load i64, i64* %6
  %8 = trunc i64 %4 to i6
  switch i6 %8, label %14 [
    i6 0, label %44
    i6 1, label %9
  ]

; <label>:9:                                      ; preds = %5
  %10 = shl i64 %7, 1
  %11 = icmp slt i64 %7, 0
  %12 = icmp slt i64 %10, 0
  %13 = xor i1 %11, %12
  br label %21

; <label>:14:                                     ; preds = %5
  %15 = and i64 %4, 63
  %16 = add nsw i64 %15, -1
  %17 = shl i64 %7, %16
  %18 = icmp slt i64 %17, 0
  %19 = icmp ne i8 0, 0
  %20 = shl i64 %17, 1
  br label %21

; <label>:21:                                     ; preds = %14, %9
  %22 = phi i1 [ %11, %9 ], [ %18, %14 ]
  %23 = phi i1 [ %13, %9 ], [ %19, %14 ]
  %24 = phi i64 [ %10, %9 ], [ %20, %14 ]
  %25 = inttoptr i64 %2 to i64*
  store i64 %24, i64* %25
  %26 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  %27 = zext i1 %22 to i8
  store i8 %27, i8* %26, align 1
  %28 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  %29 = trunc i64 %24 to i32
  %30 = and i32 %29, 254
  %31 = tail call i32 @llvm.ctpop.i32(i32 %30) 
  %32 = trunc i32 %31 to i8
  %33 = and i8 %32, 1
  %34 = xor i8 %33, 1
  store i8 %34, i8* %28, align 1
  %35 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 0, i8* %35, align 1
  %36 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  %37 = icmp eq i64 %24, 0
  %38 = zext i1 %37 to i8
  store i8 %38, i8* %36, align 1
  %39 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  %40 = lshr i64 %24, 63
  %41 = trunc i64 %40 to i8
  store i8 %41, i8* %39, align 1
  %42 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  %43 = zext i1 %23 to i8
  store i8 %43, i8* %42, align 1
  br label %44

; <label>:44:                                     ; preds = %21, %5
  %45 = phi %struct.Memory* [ %0, %21 ], [ %0, %5 ]
  ret %struct.Memory* %45
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3SHLI3RnWItE2RnItES4_EEP6MemoryS6_R5StateT_T0_T1_(%struct.Memory* readnone, %struct.State* nocapture dereferenceable(3376), i16* nocapture, i64, i64)  {
  %6 = trunc i64 %4 to i16
  %7 = and i16 %6, 31
  %8 = trunc i64 %4 to i5
  switch i5 %8, label %15 [
    i5 0, label %48
    i5 1, label %9
  ]

; <label>:9:                                      ; preds = %5
  %10 = trunc i64 %3 to i16
  %11 = shl i16 %10, 1
  %12 = icmp slt i16 %10, 0
  %13 = icmp slt i16 %11, 0
  %14 = xor i1 %12, %13
  br label %26

; <label>:15:                                     ; preds = %5
  %16 = icmp ult i16 %7, 16
  br i1 %16, label %17, label %26

; <label>:17:                                     ; preds = %15
  %18 = add nsw i16 %7, -1
  %19 = and i64 %3, 65535
  %20 = zext i16 %18 to i64
  %21 = shl i64 %19, %20
  %22 = trunc i64 %21 to i16
  %23 = icmp slt i16 %22, 0
  %24 = icmp ne i8 0, 0
  %25 = shl i16 %22, 1
  br label %26

; <label>:26:                                     ; preds = %17, %15, %9
  %27 = phi i1 [ %12, %9 ], [ %23, %17 ], [ false, %15 ]
  %28 = phi i1 [ %14, %9 ], [ %24, %17 ], [ true, %15 ]
  %29 = phi i16 [ %11, %9 ], [ %25, %17 ], [ 0, %15 ]
  store i16 %29, i16* %2, align 2
  %30 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  %31 = zext i1 %27 to i8
  store i8 %31, i8* %30, align 1
  %32 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  %33 = and i16 %29, 254
  %34 = zext i16 %33 to i32
  %35 = tail call i32 @llvm.ctpop.i32(i32 %34) 
  %36 = trunc i32 %35 to i8
  %37 = and i8 %36, 1
  %38 = xor i8 %37, 1
  store i8 %38, i8* %32, align 1
  %39 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 0, i8* %39, align 1
  %40 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  %41 = icmp eq i16 %29, 0
  %42 = zext i1 %41 to i8
  store i8 %42, i8* %40, align 1
  %43 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  %44 = lshr i16 %29, 15
  %45 = trunc i16 %44 to i8
  store i8 %45, i8* %43, align 1
  %46 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  %47 = zext i1 %28 to i8
  store i8 %47, i8* %46, align 1
  br label %48

; <label>:48:                                     ; preds = %26, %5
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3SHLI3RnWImE2RnIjES4_EEP6MemoryS6_R5StateT_T0_T1_(%struct.Memory* readnone, %struct.State* nocapture dereferenceable(3376), i64* nocapture, i64, i64)  {
  %6 = trunc i64 %4 to i5
  switch i5 %6, label %13 [
    i5 0, label %45
    i5 1, label %7
  ]

; <label>:7:                                      ; preds = %5
  %8 = trunc i64 %3 to i32
  %9 = shl i32 %8, 1
  %10 = icmp slt i32 %8, 0
  %11 = icmp slt i32 %9, 0
  %12 = xor i1 %10, %11
  br label %23

; <label>:13:                                     ; preds = %5
  %14 = and i64 %4, 31
  %15 = add nuw nsw i64 %14, 4294967295
  %16 = and i64 %3, 4294967295
  %17 = and i64 %15, 4294967295
  %18 = shl i64 %16, %17
  %19 = trunc i64 %18 to i32
  %20 = icmp slt i32 %19, 0
  %21 = icmp ne i8 0, 0
  %22 = shl i32 %19, 1
  br label %23

; <label>:23:                                     ; preds = %13, %7
  %24 = phi i1 [ %10, %7 ], [ %20, %13 ]
  %25 = phi i1 [ %12, %7 ], [ %21, %13 ]
  %26 = phi i32 [ %9, %7 ], [ %22, %13 ]
  %27 = zext i32 %26 to i64
  store i64 %27, i64* %2, align 8
  %28 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  %29 = zext i1 %24 to i8
  store i8 %29, i8* %28, align 1
  %30 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  %31 = and i32 %26, 254
  %32 = tail call i32 @llvm.ctpop.i32(i32 %31) 
  %33 = trunc i32 %32 to i8
  %34 = and i8 %33, 1
  %35 = xor i8 %34, 1
  store i8 %35, i8* %30, align 1
  %36 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 0, i8* %36, align 1
  %37 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  %38 = icmp eq i32 %26, 0
  %39 = zext i1 %38 to i8
  store i8 %39, i8* %37, align 1
  %40 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  %41 = lshr i32 %26, 31
  %42 = trunc i32 %41 to i8
  store i8 %42, i8* %40, align 1
  %43 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  %44 = zext i1 %25 to i8
  store i8 %44, i8* %43, align 1
  br label %45

; <label>:45:                                     ; preds = %23, %5
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3SHLI3RnWImE2RnImES4_EEP6MemoryS6_R5StateT_T0_T1_(%struct.Memory* readnone, %struct.State* nocapture dereferenceable(3376), i64* nocapture, i64, i64)  {
  %6 = trunc i64 %4 to i6
  switch i6 %6, label %12 [
    i6 0, label %41
    i6 1, label %7
  ]

; <label>:7:                                      ; preds = %5
  %8 = shl i64 %3, 1
  %9 = icmp slt i64 %3, 0
  %10 = icmp slt i64 %8, 0
  %11 = xor i1 %9, %10
  br label %19

; <label>:12:                                     ; preds = %5
  %13 = and i64 %4, 63
  %14 = add nsw i64 %13, -1
  %15 = shl i64 %3, %14
  %16 = icmp slt i64 %15, 0
  %17 = icmp ne i8 0, 0
  %18 = shl i64 %15, 1
  br label %19

; <label>:19:                                     ; preds = %12, %7
  %20 = phi i1 [ %9, %7 ], [ %16, %12 ]
  %21 = phi i1 [ %11, %7 ], [ %17, %12 ]
  %22 = phi i64 [ %8, %7 ], [ %18, %12 ]
  store i64 %22, i64* %2, align 8
  %23 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  %24 = zext i1 %20 to i8
  store i8 %24, i8* %23, align 1
  %25 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  %26 = trunc i64 %22 to i32
  %27 = and i32 %26, 254
  %28 = tail call i32 @llvm.ctpop.i32(i32 %27) 
  %29 = trunc i32 %28 to i8
  %30 = and i8 %29, 1
  %31 = xor i8 %30, 1
  store i8 %31, i8* %25, align 1
  %32 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 0, i8* %32, align 1
  %33 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  %34 = icmp eq i64 %22, 0
  %35 = zext i1 %34 to i8
  store i8 %35, i8* %33, align 1
  %36 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  %37 = lshr i64 %22, 63
  %38 = trunc i64 %37 to i8
  store i8 %38, i8* %36, align 1
  %39 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  %40 = zext i1 %21 to i8
  store i8 %40, i8* %39, align 1
  br label %41

; <label>:41:                                     ; preds = %19, %5
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L4SHRDI3MnWIhE2MnIhE2RnIhE2InIhEEEP6MemorySA_R5StateT_T0_T1_T2_(%struct.Memory*, %struct.State* nocapture dereferenceable(3376), i64, i64, i64, i64)  {
  %7 = inttoptr i64 %3 to i8*
  %8 = load i8, i8* %7
  %9 = trunc i64 %5 to i8
  %10 = and i8 %9, 31
  %11 = icmp eq i8 %10, 0
  br i1 %11, label %57, label %12

; <label>:12:                                     ; preds = %6
  %13 = icmp ugt i8 %10, 8
  br i1 %13, label %14, label %21

; <label>:14:                                     ; preds = %12
  %15 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  store i8 0, i8* %15, align 1
  %16 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 0, i8* %16, align 1
  %17 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 0, i8* %17, align 1
  %18 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  store i8 0, i8* %18, align 1
  %19 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 0, i8* %19, align 1
  %20 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 0, i8* %20, align 1
  br label %57

; <label>:21:                                     ; preds = %12
  %22 = sub nsw i8 8, %10
  %23 = and i64 %4, 255
  %24 = zext i8 %22 to i64
  %25 = shl i64 %23, %24
  %26 = zext i8 %8 to i64
  %27 = zext i8 %10 to i64
  %28 = lshr i64 %26, %27
  %29 = or i64 %28, %25
  %30 = trunc i64 %29 to i8
  %31 = inttoptr i64 %2 to i8*
  store i8 %30, i8* %31
  %32 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  %33 = add nsw i8 %10, -1
  %34 = zext i8 %33 to i64
  %35 = shl i64 1, %34
  %36 = and i64 %26, %35
  %37 = icmp ne i64 %36, 0
  %38 = zext i1 %37 to i8
  store i8 %38, i8* %32, align 1
  %39 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  %40 = trunc i64 %29 to i32
  %41 = and i32 %40, 255
  %42 = tail call i32 @llvm.ctpop.i32(i32 %41) 
  %43 = trunc i32 %42 to i8
  %44 = and i8 %43, 1
  %45 = xor i8 %44, 1
  store i8 %45, i8* %39, align 1
  %46 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 0, i8* %46, align 1
  %47 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  %48 = icmp eq i8 %30, 0
  %49 = zext i1 %48 to i8
  store i8 %49, i8* %47, align 1
  %50 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  %51 = icmp slt i8 %30, 0
  %52 = lshr i8 %30, 7
  store i8 %52, i8* %50, align 1
  %53 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  %54 = icmp slt i8 %8, 0
  %55 = xor i1 %54, %51
  %56 = zext i1 %55 to i8
  store i8 %56, i8* %53, align 1
  br label %57

; <label>:57:                                     ; preds = %21, %14, %6
  %58 = phi %struct.Memory* [ %0, %14 ], [ %0, %21 ], [ %0, %6 ]
  ret %struct.Memory* %58
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L4SHRDI3MnWItE2MnItE2RnItE2InItEEEP6MemorySA_R5StateT_T0_T1_T2_(%struct.Memory*, %struct.State* nocapture dereferenceable(3376), i64, i64, i64, i64)  {
  %7 = inttoptr i64 %3 to i16*
  %8 = load i16, i16* %7
  %9 = trunc i64 %5 to i16
  %10 = and i16 %9, 31
  %11 = icmp eq i16 %10, 0
  br i1 %11, label %58, label %12

; <label>:12:                                     ; preds = %6
  %13 = icmp ugt i16 %10, 16
  br i1 %13, label %14, label %21

; <label>:14:                                     ; preds = %12
  %15 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  store i8 0, i8* %15, align 1
  %16 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 0, i8* %16, align 1
  %17 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 0, i8* %17, align 1
  %18 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  store i8 0, i8* %18, align 1
  %19 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 0, i8* %19, align 1
  %20 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 0, i8* %20, align 1
  br label %58

; <label>:21:                                     ; preds = %12
  %22 = sub nsw i16 16, %10
  %23 = and i64 %4, 65535
  %24 = zext i16 %22 to i64
  %25 = shl i64 %23, %24
  %26 = zext i16 %8 to i64
  %27 = zext i16 %10 to i64
  %28 = lshr i64 %26, %27
  %29 = or i64 %28, %25
  %30 = trunc i64 %29 to i16
  %31 = inttoptr i64 %2 to i16*
  store i16 %30, i16* %31
  %32 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  %33 = add nsw i16 %10, -1
  %34 = zext i16 %33 to i64
  %35 = shl i64 1, %34
  %36 = and i64 %26, %35
  %37 = icmp ne i64 %36, 0
  %38 = zext i1 %37 to i8
  store i8 %38, i8* %32, align 1
  %39 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  %40 = and i16 %30, 255
  %41 = zext i16 %40 to i32
  %42 = tail call i32 @llvm.ctpop.i32(i32 %41) 
  %43 = trunc i32 %42 to i8
  %44 = and i8 %43, 1
  %45 = xor i8 %44, 1
  store i8 %45, i8* %39, align 1
  %46 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 0, i8* %46, align 1
  %47 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  %48 = icmp eq i16 %30, 0
  %49 = zext i1 %48 to i8
  store i8 %49, i8* %47, align 1
  %50 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  %51 = icmp slt i16 %30, 0
  %52 = lshr i16 %30, 15
  %53 = trunc i16 %52 to i8
  store i8 %53, i8* %50, align 1
  %54 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  %55 = icmp slt i16 %8, 0
  %56 = xor i1 %55, %51
  %57 = zext i1 %56 to i8
  store i8 %57, i8* %54, align 1
  br label %58

; <label>:58:                                     ; preds = %21, %14, %6
  %59 = phi %struct.Memory* [ %0, %14 ], [ %0, %21 ], [ %0, %6 ]
  ret %struct.Memory* %59
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L4SHRDI3MnWIjE2MnIjE2RnIjE2InIjEEEP6MemorySA_R5StateT_T0_T1_T2_(%struct.Memory*, %struct.State* nocapture dereferenceable(3376), i64, i64, i64, i64)  {
  %7 = inttoptr i64 %3 to i32*
  %8 = load i32, i32* %7
  %9 = trunc i64 %5 to i32
  %10 = and i32 %9, 31
  %11 = icmp eq i32 %10, 0
  br i1 %11, label %48, label %12

; <label>:12:                                     ; preds = %6
  %13 = sub nsw i32 32, %10
  %14 = and i64 %4, 4294967295
  %15 = zext i32 %13 to i64
  %16 = shl i64 %14, %15
  %17 = zext i32 %8 to i64
  %18 = zext i32 %10 to i64
  %19 = lshr i64 %17, %18
  %20 = or i64 %19, %16
  %21 = trunc i64 %20 to i32
  %22 = inttoptr i64 %2 to i32*
  store i32 %21, i32* %22
  %23 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  %24 = add nsw i32 %10, -1
  %25 = zext i32 %24 to i64
  %26 = shl i64 1, %25
  %27 = and i64 %17, %26
  %28 = icmp ne i64 %27, 0
  %29 = zext i1 %28 to i8
  store i8 %29, i8* %23, align 1
  %30 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  %31 = and i32 %21, 255
  %32 = tail call i32 @llvm.ctpop.i32(i32 %31) 
  %33 = trunc i32 %32 to i8
  %34 = and i8 %33, 1
  %35 = xor i8 %34, 1
  store i8 %35, i8* %30, align 1
  %36 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 0, i8* %36, align 1
  %37 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  %38 = icmp eq i32 %21, 0
  %39 = zext i1 %38 to i8
  store i8 %39, i8* %37, align 1
  %40 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  %41 = icmp slt i32 %21, 0
  %42 = lshr i32 %21, 31
  %43 = trunc i32 %42 to i8
  store i8 %43, i8* %40, align 1
  %44 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  %45 = icmp slt i32 %8, 0
  %46 = xor i1 %45, %41
  %47 = zext i1 %46 to i8
  store i8 %47, i8* %44, align 1
  br label %48

; <label>:48:                                     ; preds = %12, %6
  %49 = phi %struct.Memory* [ %0, %12 ], [ %0, %6 ]
  ret %struct.Memory* %49
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L4SHRDI3MnWImE2MnImE2RnImE2InImEEEP6MemorySA_R5StateT_T0_T1_T2_(%struct.Memory*, %struct.State* nocapture dereferenceable(3376), i64, i64, i64, i64)  {
  %7 = inttoptr i64 %3 to i64*
  %8 = load i64, i64* %7
  %9 = and i64 %5, 63
  %10 = icmp eq i64 %9, 0
  br i1 %10, label %42, label %11

; <label>:11:                                     ; preds = %6
  %12 = sub nsw i64 64, %9
  %13 = shl i64 %4, %12
  %14 = lshr i64 %8, %9
  %15 = or i64 %14, %13
  %16 = inttoptr i64 %2 to i64*
  store i64 %15, i64* %16
  %17 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  %18 = add nsw i64 %9, -1
  %19 = shl i64 1, %18
  %20 = and i64 %8, %19
  %21 = icmp ne i64 %20, 0
  %22 = zext i1 %21 to i8
  store i8 %22, i8* %17, align 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  %24 = trunc i64 %15 to i32
  %25 = and i32 %24, 255
  %26 = tail call i32 @llvm.ctpop.i32(i32 %25) 
  %27 = trunc i32 %26 to i8
  %28 = and i8 %27, 1
  %29 = xor i8 %28, 1
  store i8 %29, i8* %23, align 1
  %30 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 0, i8* %30, align 1
  %31 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  %32 = icmp eq i64 %15, 0
  %33 = zext i1 %32 to i8
  store i8 %33, i8* %31, align 1
  %34 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  %35 = icmp slt i64 %15, 0
  %36 = lshr i64 %15, 63
  %37 = trunc i64 %36 to i8
  store i8 %37, i8* %34, align 1
  %38 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  %39 = icmp slt i64 %8, 0
  %40 = xor i1 %39, %35
  %41 = zext i1 %40 to i8
  store i8 %41, i8* %38, align 1
  br label %42

; <label>:42:                                     ; preds = %11, %6
  %43 = phi %struct.Memory* [ %0, %11 ], [ %0, %6 ]
  ret %struct.Memory* %43
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L4SHRDI3RnWIhE2RnIhES4_2InIhEEEP6MemoryS8_R5StateT_T0_T1_T2_(%struct.Memory* readnone, %struct.State* nocapture dereferenceable(3376), i8* nocapture, i64, i64, i64)  {
  %7 = trunc i64 %3 to i8
  %8 = trunc i64 %5 to i8
  %9 = and i8 %8, 31
  %10 = icmp eq i8 %9, 0
  br i1 %10, label %55, label %11

; <label>:11:                                     ; preds = %6
  %12 = icmp ugt i8 %9, 8
  br i1 %12, label %13, label %20

; <label>:13:                                     ; preds = %11
  %14 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  store i8 0, i8* %14, align 1
  %15 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 0, i8* %15, align 1
  %16 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 0, i8* %16, align 1
  %17 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  store i8 0, i8* %17, align 1
  %18 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 0, i8* %18, align 1
  %19 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 0, i8* %19, align 1
  br label %55

; <label>:20:                                     ; preds = %11
  %21 = sub nsw i8 8, %9
  %22 = and i64 %4, 255
  %23 = zext i8 %21 to i64
  %24 = shl i64 %22, %23
  %25 = and i64 %3, 255
  %26 = zext i8 %9 to i64
  %27 = lshr i64 %25, %26
  %28 = or i64 %24, %27
  %29 = trunc i64 %28 to i8
  store i8 %29, i8* %2, align 1
  %30 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  %31 = add nsw i8 %9, -1
  %32 = zext i8 %31 to i64
  %33 = shl i64 1, %32
  %34 = and i64 %33, %25
  %35 = icmp ne i64 %34, 0
  %36 = zext i1 %35 to i8
  store i8 %36, i8* %30, align 1
  %37 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  %38 = trunc i64 %28 to i32
  %39 = and i32 %38, 255
  %40 = tail call i32 @llvm.ctpop.i32(i32 %39) 
  %41 = trunc i32 %40 to i8
  %42 = and i8 %41, 1
  %43 = xor i8 %42, 1
  store i8 %43, i8* %37, align 1
  %44 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 0, i8* %44, align 1
  %45 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  %46 = icmp eq i8 %29, 0
  %47 = zext i1 %46 to i8
  store i8 %47, i8* %45, align 1
  %48 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  %49 = icmp slt i8 %29, 0
  %50 = lshr i8 %29, 7
  store i8 %50, i8* %48, align 1
  %51 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  %52 = icmp slt i8 %7, 0
  %53 = xor i1 %52, %49
  %54 = zext i1 %53 to i8
  store i8 %54, i8* %51, align 1
  br label %55

; <label>:55:                                     ; preds = %20, %13, %6
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L4SHRDI3RnWItE2RnItES4_2InItEEEP6MemoryS8_R5StateT_T0_T1_T2_(%struct.Memory* readnone, %struct.State* nocapture dereferenceable(3376), i16* nocapture, i64, i64, i64)  {
  %7 = trunc i64 %3 to i16
  %8 = trunc i64 %5 to i16
  %9 = and i16 %8, 31
  %10 = icmp eq i16 %9, 0
  br i1 %10, label %56, label %11

; <label>:11:                                     ; preds = %6
  %12 = icmp ugt i16 %9, 16
  br i1 %12, label %13, label %20

; <label>:13:                                     ; preds = %11
  %14 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  store i8 0, i8* %14, align 1
  %15 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 0, i8* %15, align 1
  %16 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 0, i8* %16, align 1
  %17 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  store i8 0, i8* %17, align 1
  %18 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 0, i8* %18, align 1
  %19 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 0, i8* %19, align 1
  br label %56

; <label>:20:                                     ; preds = %11
  %21 = sub nsw i16 16, %9
  %22 = and i64 %4, 65535
  %23 = zext i16 %21 to i64
  %24 = shl i64 %22, %23
  %25 = and i64 %3, 65535
  %26 = zext i16 %9 to i64
  %27 = lshr i64 %25, %26
  %28 = or i64 %24, %27
  %29 = trunc i64 %28 to i16
  store i16 %29, i16* %2, align 2
  %30 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  %31 = add nsw i16 %9, -1
  %32 = zext i16 %31 to i64
  %33 = shl i64 1, %32
  %34 = and i64 %33, %25
  %35 = icmp ne i64 %34, 0
  %36 = zext i1 %35 to i8
  store i8 %36, i8* %30, align 1
  %37 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  %38 = and i16 %29, 255
  %39 = zext i16 %38 to i32
  %40 = tail call i32 @llvm.ctpop.i32(i32 %39) 
  %41 = trunc i32 %40 to i8
  %42 = and i8 %41, 1
  %43 = xor i8 %42, 1
  store i8 %43, i8* %37, align 1
  %44 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 0, i8* %44, align 1
  %45 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  %46 = icmp eq i16 %29, 0
  %47 = zext i1 %46 to i8
  store i8 %47, i8* %45, align 1
  %48 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  %49 = icmp slt i16 %29, 0
  %50 = lshr i16 %29, 15
  %51 = trunc i16 %50 to i8
  store i8 %51, i8* %48, align 1
  %52 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  %53 = icmp slt i16 %7, 0
  %54 = xor i1 %53, %49
  %55 = zext i1 %54 to i8
  store i8 %55, i8* %52, align 1
  br label %56

; <label>:56:                                     ; preds = %20, %13, %6
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L4SHRDI3RnWImE2RnIjES4_2InIjEEEP6MemoryS8_R5StateT_T0_T1_T2_(%struct.Memory* readnone, %struct.State* nocapture dereferenceable(3376), i64* nocapture, i64, i64, i64)  {
  %7 = trunc i64 %5 to i32
  %8 = and i32 %7, 31
  %9 = icmp eq i32 %8, 0
  br i1 %9, label %47, label %10

; <label>:10:                                     ; preds = %6
  %11 = trunc i64 %3 to i32
  %12 = sub nsw i32 32, %8
  %13 = and i64 %4, 4294967295
  %14 = zext i32 %12 to i64
  %15 = shl i64 %13, %14
  %16 = and i64 %3, 4294967295
  %17 = zext i32 %8 to i64
  %18 = lshr i64 %16, %17
  %19 = or i64 %15, %18
  %20 = trunc i64 %19 to i32
  %21 = and i64 %19, 4294967295
  store i64 %21, i64* %2, align 8
  %22 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  %23 = add nsw i32 %8, -1
  %24 = zext i32 %23 to i64
  %25 = shl i64 1, %24
  %26 = and i64 %25, %16
  %27 = icmp ne i64 %26, 0
  %28 = zext i1 %27 to i8
  store i8 %28, i8* %22, align 1
  %29 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  %30 = and i32 %20, 255
  %31 = tail call i32 @llvm.ctpop.i32(i32 %30) 
  %32 = trunc i32 %31 to i8
  %33 = and i8 %32, 1
  %34 = xor i8 %33, 1
  store i8 %34, i8* %29, align 1
  %35 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 0, i8* %35, align 1
  %36 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  %37 = icmp eq i32 %20, 0
  %38 = zext i1 %37 to i8
  store i8 %38, i8* %36, align 1
  %39 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  %40 = icmp slt i32 %20, 0
  %41 = lshr i32 %20, 31
  %42 = trunc i32 %41 to i8
  store i8 %42, i8* %39, align 1
  %43 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  %44 = icmp slt i32 %11, 0
  %45 = xor i1 %44, %40
  %46 = zext i1 %45 to i8
  store i8 %46, i8* %43, align 1
  br label %47

; <label>:47:                                     ; preds = %10, %6
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L4SHRDI3RnWImE2RnImES4_2InImEEEP6MemoryS8_R5StateT_T0_T1_T2_(%struct.Memory* readnone, %struct.State* nocapture dereferenceable(3376), i64* nocapture, i64, i64, i64)  {
  %7 = and i64 %5, 63
  %8 = icmp eq i64 %7, 0
  br i1 %8, label %39, label %9

; <label>:9:                                      ; preds = %6
  %10 = sub nsw i64 64, %7
  %11 = shl i64 %4, %10
  %12 = lshr i64 %3, %7
  %13 = or i64 %11, %12
  store i64 %13, i64* %2, align 8
  %14 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  %15 = add nsw i64 %7, -1
  %16 = shl i64 1, %15
  %17 = and i64 %16, %3
  %18 = icmp ne i64 %17, 0
  %19 = zext i1 %18 to i8
  store i8 %19, i8* %14, align 1
  %20 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  %21 = trunc i64 %13 to i32
  %22 = and i32 %21, 255
  %23 = tail call i32 @llvm.ctpop.i32(i32 %22) 
  %24 = trunc i32 %23 to i8
  %25 = and i8 %24, 1
  %26 = xor i8 %25, 1
  store i8 %26, i8* %20, align 1
  %27 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 0, i8* %27, align 1
  %28 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  %29 = icmp eq i64 %13, 0
  %30 = zext i1 %29 to i8
  store i8 %30, i8* %28, align 1
  %31 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  %32 = icmp slt i64 %13, 0
  %33 = lshr i64 %13, 63
  %34 = trunc i64 %33 to i8
  store i8 %34, i8* %31, align 1
  %35 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  %36 = icmp slt i64 %3, 0
  %37 = xor i1 %36, %32
  %38 = zext i1 %37 to i8
  store i8 %38, i8* %35, align 1
  br label %39

; <label>:39:                                     ; preds = %9, %6
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L4SHRDI3MnWIhE2MnIhE2RnIhES6_EEP6MemoryS8_R5StateT_T0_T1_T2_(%struct.Memory*, %struct.State* nocapture dereferenceable(3376), i64, i64, i64, i64)  {
  %7 = inttoptr i64 %3 to i8*
  %8 = load i8, i8* %7
  %9 = trunc i64 %5 to i8
  %10 = and i8 %9, 31
  %11 = icmp eq i8 %10, 0
  br i1 %11, label %57, label %12

; <label>:12:                                     ; preds = %6
  %13 = icmp ugt i8 %10, 8
  br i1 %13, label %14, label %21

; <label>:14:                                     ; preds = %12
  %15 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  store i8 0, i8* %15, align 1
  %16 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 0, i8* %16, align 1
  %17 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 0, i8* %17, align 1
  %18 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  store i8 0, i8* %18, align 1
  %19 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 0, i8* %19, align 1
  %20 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 0, i8* %20, align 1
  br label %57

; <label>:21:                                     ; preds = %12
  %22 = sub nsw i8 8, %10
  %23 = and i64 %4, 255
  %24 = zext i8 %22 to i64
  %25 = shl i64 %23, %24
  %26 = zext i8 %8 to i64
  %27 = zext i8 %10 to i64
  %28 = lshr i64 %26, %27
  %29 = or i64 %28, %25
  %30 = trunc i64 %29 to i8
  %31 = inttoptr i64 %2 to i8*
  store i8 %30, i8* %31
  %32 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  %33 = add nsw i8 %10, -1
  %34 = zext i8 %33 to i64
  %35 = shl i64 1, %34
  %36 = and i64 %26, %35
  %37 = icmp ne i64 %36, 0
  %38 = zext i1 %37 to i8
  store i8 %38, i8* %32, align 1
  %39 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  %40 = trunc i64 %29 to i32
  %41 = and i32 %40, 255
  %42 = tail call i32 @llvm.ctpop.i32(i32 %41) 
  %43 = trunc i32 %42 to i8
  %44 = and i8 %43, 1
  %45 = xor i8 %44, 1
  store i8 %45, i8* %39, align 1
  %46 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 0, i8* %46, align 1
  %47 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  %48 = icmp eq i8 %30, 0
  %49 = zext i1 %48 to i8
  store i8 %49, i8* %47, align 1
  %50 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  %51 = icmp slt i8 %30, 0
  %52 = lshr i8 %30, 7
  store i8 %52, i8* %50, align 1
  %53 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  %54 = icmp slt i8 %8, 0
  %55 = xor i1 %54, %51
  %56 = zext i1 %55 to i8
  store i8 %56, i8* %53, align 1
  br label %57

; <label>:57:                                     ; preds = %21, %14, %6
  %58 = phi %struct.Memory* [ %0, %14 ], [ %0, %21 ], [ %0, %6 ]
  ret %struct.Memory* %58
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L4SHRDI3MnWItE2MnItE2RnItES6_EEP6MemoryS8_R5StateT_T0_T1_T2_(%struct.Memory*, %struct.State* nocapture dereferenceable(3376), i64, i64, i64, i64)  {
  %7 = inttoptr i64 %3 to i16*
  %8 = load i16, i16* %7
  %9 = trunc i64 %5 to i16
  %10 = and i16 %9, 31
  %11 = icmp eq i16 %10, 0
  br i1 %11, label %58, label %12

; <label>:12:                                     ; preds = %6
  %13 = icmp ugt i16 %10, 16
  br i1 %13, label %14, label %21

; <label>:14:                                     ; preds = %12
  %15 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  store i8 0, i8* %15, align 1
  %16 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 0, i8* %16, align 1
  %17 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 0, i8* %17, align 1
  %18 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  store i8 0, i8* %18, align 1
  %19 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 0, i8* %19, align 1
  %20 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 0, i8* %20, align 1
  br label %58

; <label>:21:                                     ; preds = %12
  %22 = sub nsw i16 16, %10
  %23 = and i64 %4, 65535
  %24 = zext i16 %22 to i64
  %25 = shl i64 %23, %24
  %26 = zext i16 %8 to i64
  %27 = zext i16 %10 to i64
  %28 = lshr i64 %26, %27
  %29 = or i64 %28, %25
  %30 = trunc i64 %29 to i16
  %31 = inttoptr i64 %2 to i16*
  store i16 %30, i16* %31
  %32 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  %33 = add nsw i16 %10, -1
  %34 = zext i16 %33 to i64
  %35 = shl i64 1, %34
  %36 = and i64 %26, %35
  %37 = icmp ne i64 %36, 0
  %38 = zext i1 %37 to i8
  store i8 %38, i8* %32, align 1
  %39 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  %40 = and i16 %30, 255
  %41 = zext i16 %40 to i32
  %42 = tail call i32 @llvm.ctpop.i32(i32 %41) 
  %43 = trunc i32 %42 to i8
  %44 = and i8 %43, 1
  %45 = xor i8 %44, 1
  store i8 %45, i8* %39, align 1
  %46 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 0, i8* %46, align 1
  %47 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  %48 = icmp eq i16 %30, 0
  %49 = zext i1 %48 to i8
  store i8 %49, i8* %47, align 1
  %50 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  %51 = icmp slt i16 %30, 0
  %52 = lshr i16 %30, 15
  %53 = trunc i16 %52 to i8
  store i8 %53, i8* %50, align 1
  %54 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  %55 = icmp slt i16 %8, 0
  %56 = xor i1 %55, %51
  %57 = zext i1 %56 to i8
  store i8 %57, i8* %54, align 1
  br label %58

; <label>:58:                                     ; preds = %21, %14, %6
  %59 = phi %struct.Memory* [ %0, %14 ], [ %0, %21 ], [ %0, %6 ]
  ret %struct.Memory* %59
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L4SHRDI3MnWIjE2MnIjE2RnIjES6_EEP6MemoryS8_R5StateT_T0_T1_T2_(%struct.Memory*, %struct.State* nocapture dereferenceable(3376), i64, i64, i64, i64)  {
  %7 = inttoptr i64 %3 to i32*
  %8 = load i32, i32* %7
  %9 = trunc i64 %5 to i32
  %10 = and i32 %9, 31
  %11 = icmp eq i32 %10, 0
  br i1 %11, label %48, label %12

; <label>:12:                                     ; preds = %6
  %13 = sub nsw i32 32, %10
  %14 = and i64 %4, 4294967295
  %15 = zext i32 %13 to i64
  %16 = shl i64 %14, %15
  %17 = zext i32 %8 to i64
  %18 = zext i32 %10 to i64
  %19 = lshr i64 %17, %18
  %20 = or i64 %19, %16
  %21 = trunc i64 %20 to i32
  %22 = inttoptr i64 %2 to i32*
  store i32 %21, i32* %22
  %23 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  %24 = add nsw i32 %10, -1
  %25 = zext i32 %24 to i64
  %26 = shl i64 1, %25
  %27 = and i64 %17, %26
  %28 = icmp ne i64 %27, 0
  %29 = zext i1 %28 to i8
  store i8 %29, i8* %23, align 1
  %30 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  %31 = and i32 %21, 255
  %32 = tail call i32 @llvm.ctpop.i32(i32 %31) 
  %33 = trunc i32 %32 to i8
  %34 = and i8 %33, 1
  %35 = xor i8 %34, 1
  store i8 %35, i8* %30, align 1
  %36 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 0, i8* %36, align 1
  %37 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  %38 = icmp eq i32 %21, 0
  %39 = zext i1 %38 to i8
  store i8 %39, i8* %37, align 1
  %40 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  %41 = icmp slt i32 %21, 0
  %42 = lshr i32 %21, 31
  %43 = trunc i32 %42 to i8
  store i8 %43, i8* %40, align 1
  %44 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  %45 = icmp slt i32 %8, 0
  %46 = xor i1 %45, %41
  %47 = zext i1 %46 to i8
  store i8 %47, i8* %44, align 1
  br label %48

; <label>:48:                                     ; preds = %12, %6
  %49 = phi %struct.Memory* [ %0, %12 ], [ %0, %6 ]
  ret %struct.Memory* %49
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L4SHRDI3MnWImE2MnImE2RnImES6_EEP6MemoryS8_R5StateT_T0_T1_T2_(%struct.Memory*, %struct.State* nocapture dereferenceable(3376), i64, i64, i64, i64)  {
  %7 = inttoptr i64 %3 to i64*
  %8 = load i64, i64* %7
  %9 = and i64 %5, 63
  %10 = icmp eq i64 %9, 0
  br i1 %10, label %42, label %11

; <label>:11:                                     ; preds = %6
  %12 = sub nsw i64 64, %9
  %13 = shl i64 %4, %12
  %14 = lshr i64 %8, %9
  %15 = or i64 %14, %13
  %16 = inttoptr i64 %2 to i64*
  store i64 %15, i64* %16
  %17 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  %18 = add nsw i64 %9, -1
  %19 = shl i64 1, %18
  %20 = and i64 %8, %19
  %21 = icmp ne i64 %20, 0
  %22 = zext i1 %21 to i8
  store i8 %22, i8* %17, align 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  %24 = trunc i64 %15 to i32
  %25 = and i32 %24, 255
  %26 = tail call i32 @llvm.ctpop.i32(i32 %25) 
  %27 = trunc i32 %26 to i8
  %28 = and i8 %27, 1
  %29 = xor i8 %28, 1
  store i8 %29, i8* %23, align 1
  %30 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 0, i8* %30, align 1
  %31 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  %32 = icmp eq i64 %15, 0
  %33 = zext i1 %32 to i8
  store i8 %33, i8* %31, align 1
  %34 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  %35 = icmp slt i64 %15, 0
  %36 = lshr i64 %15, 63
  %37 = trunc i64 %36 to i8
  store i8 %37, i8* %34, align 1
  %38 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  %39 = icmp slt i64 %8, 0
  %40 = xor i1 %39, %35
  %41 = zext i1 %40 to i8
  store i8 %41, i8* %38, align 1
  br label %42

; <label>:42:                                     ; preds = %11, %6
  %43 = phi %struct.Memory* [ %0, %11 ], [ %0, %6 ]
  ret %struct.Memory* %43
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L4SHRDI3RnWIhE2RnIhES4_S4_EEP6MemoryS6_R5StateT_T0_T1_T2_(%struct.Memory* readnone, %struct.State* nocapture dereferenceable(3376), i8* nocapture, i64, i64, i64)  {
  %7 = trunc i64 %3 to i8
  %8 = trunc i64 %5 to i8
  %9 = and i8 %8, 31
  %10 = icmp eq i8 %9, 0
  br i1 %10, label %55, label %11

; <label>:11:                                     ; preds = %6
  %12 = icmp ugt i8 %9, 8
  br i1 %12, label %13, label %20

; <label>:13:                                     ; preds = %11
  %14 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  store i8 0, i8* %14, align 1
  %15 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 0, i8* %15, align 1
  %16 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 0, i8* %16, align 1
  %17 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  store i8 0, i8* %17, align 1
  %18 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 0, i8* %18, align 1
  %19 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 0, i8* %19, align 1
  br label %55

; <label>:20:                                     ; preds = %11
  %21 = sub nsw i8 8, %9
  %22 = and i64 %4, 255
  %23 = zext i8 %21 to i64
  %24 = shl i64 %22, %23
  %25 = and i64 %3, 255
  %26 = zext i8 %9 to i64
  %27 = lshr i64 %25, %26
  %28 = or i64 %24, %27
  %29 = trunc i64 %28 to i8
  store i8 %29, i8* %2, align 1
  %30 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  %31 = add nsw i8 %9, -1
  %32 = zext i8 %31 to i64
  %33 = shl i64 1, %32
  %34 = and i64 %33, %25
  %35 = icmp ne i64 %34, 0
  %36 = zext i1 %35 to i8
  store i8 %36, i8* %30, align 1
  %37 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  %38 = trunc i64 %28 to i32
  %39 = and i32 %38, 255
  %40 = tail call i32 @llvm.ctpop.i32(i32 %39) 
  %41 = trunc i32 %40 to i8
  %42 = and i8 %41, 1
  %43 = xor i8 %42, 1
  store i8 %43, i8* %37, align 1
  %44 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 0, i8* %44, align 1
  %45 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  %46 = icmp eq i8 %29, 0
  %47 = zext i1 %46 to i8
  store i8 %47, i8* %45, align 1
  %48 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  %49 = icmp slt i8 %29, 0
  %50 = lshr i8 %29, 7
  store i8 %50, i8* %48, align 1
  %51 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  %52 = icmp slt i8 %7, 0
  %53 = xor i1 %52, %49
  %54 = zext i1 %53 to i8
  store i8 %54, i8* %51, align 1
  br label %55

; <label>:55:                                     ; preds = %20, %13, %6
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L4SHRDI3RnWItE2RnItES4_S4_EEP6MemoryS6_R5StateT_T0_T1_T2_(%struct.Memory* readnone, %struct.State* nocapture dereferenceable(3376), i16* nocapture, i64, i64, i64)  {
  %7 = trunc i64 %3 to i16
  %8 = trunc i64 %5 to i16
  %9 = and i16 %8, 31
  %10 = icmp eq i16 %9, 0
  br i1 %10, label %56, label %11

; <label>:11:                                     ; preds = %6
  %12 = icmp ugt i16 %9, 16
  br i1 %12, label %13, label %20

; <label>:13:                                     ; preds = %11
  %14 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  store i8 0, i8* %14, align 1
  %15 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 0, i8* %15, align 1
  %16 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 0, i8* %16, align 1
  %17 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  store i8 0, i8* %17, align 1
  %18 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 0, i8* %18, align 1
  %19 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 0, i8* %19, align 1
  br label %56

; <label>:20:                                     ; preds = %11
  %21 = sub nsw i16 16, %9
  %22 = and i64 %4, 65535
  %23 = zext i16 %21 to i64
  %24 = shl i64 %22, %23
  %25 = and i64 %3, 65535
  %26 = zext i16 %9 to i64
  %27 = lshr i64 %25, %26
  %28 = or i64 %24, %27
  %29 = trunc i64 %28 to i16
  store i16 %29, i16* %2, align 2
  %30 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  %31 = add nsw i16 %9, -1
  %32 = zext i16 %31 to i64
  %33 = shl i64 1, %32
  %34 = and i64 %33, %25
  %35 = icmp ne i64 %34, 0
  %36 = zext i1 %35 to i8
  store i8 %36, i8* %30, align 1
  %37 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  %38 = and i16 %29, 255
  %39 = zext i16 %38 to i32
  %40 = tail call i32 @llvm.ctpop.i32(i32 %39) 
  %41 = trunc i32 %40 to i8
  %42 = and i8 %41, 1
  %43 = xor i8 %42, 1
  store i8 %43, i8* %37, align 1
  %44 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 0, i8* %44, align 1
  %45 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  %46 = icmp eq i16 %29, 0
  %47 = zext i1 %46 to i8
  store i8 %47, i8* %45, align 1
  %48 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  %49 = icmp slt i16 %29, 0
  %50 = lshr i16 %29, 15
  %51 = trunc i16 %50 to i8
  store i8 %51, i8* %48, align 1
  %52 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  %53 = icmp slt i16 %7, 0
  %54 = xor i1 %53, %49
  %55 = zext i1 %54 to i8
  store i8 %55, i8* %52, align 1
  br label %56

; <label>:56:                                     ; preds = %20, %13, %6
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L4SHRDI3RnWImE2RnIjES4_S4_EEP6MemoryS6_R5StateT_T0_T1_T2_(%struct.Memory* readnone, %struct.State* nocapture dereferenceable(3376), i64* nocapture, i64, i64, i64)  {
  %7 = trunc i64 %5 to i32
  %8 = and i32 %7, 31
  %9 = icmp eq i32 %8, 0
  br i1 %9, label %47, label %10

; <label>:10:                                     ; preds = %6
  %11 = trunc i64 %3 to i32
  %12 = sub nsw i32 32, %8
  %13 = and i64 %4, 4294967295
  %14 = zext i32 %12 to i64
  %15 = shl i64 %13, %14
  %16 = and i64 %3, 4294967295
  %17 = zext i32 %8 to i64
  %18 = lshr i64 %16, %17
  %19 = or i64 %15, %18
  %20 = trunc i64 %19 to i32
  %21 = and i64 %19, 4294967295
  store i64 %21, i64* %2, align 8
  %22 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  %23 = add nsw i32 %8, -1
  %24 = zext i32 %23 to i64
  %25 = shl i64 1, %24
  %26 = and i64 %25, %16
  %27 = icmp ne i64 %26, 0
  %28 = zext i1 %27 to i8
  store i8 %28, i8* %22, align 1
  %29 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  %30 = and i32 %20, 255
  %31 = tail call i32 @llvm.ctpop.i32(i32 %30) 
  %32 = trunc i32 %31 to i8
  %33 = and i8 %32, 1
  %34 = xor i8 %33, 1
  store i8 %34, i8* %29, align 1
  %35 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 0, i8* %35, align 1
  %36 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  %37 = icmp eq i32 %20, 0
  %38 = zext i1 %37 to i8
  store i8 %38, i8* %36, align 1
  %39 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  %40 = icmp slt i32 %20, 0
  %41 = lshr i32 %20, 31
  %42 = trunc i32 %41 to i8
  store i8 %42, i8* %39, align 1
  %43 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  %44 = icmp slt i32 %11, 0
  %45 = xor i1 %44, %40
  %46 = zext i1 %45 to i8
  store i8 %46, i8* %43, align 1
  br label %47

; <label>:47:                                     ; preds = %10, %6
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L4SHRDI3RnWImE2RnImES4_S4_EEP6MemoryS6_R5StateT_T0_T1_T2_(%struct.Memory* readnone, %struct.State* nocapture dereferenceable(3376), i64* nocapture, i64, i64, i64)  {
  %7 = and i64 %5, 63
  %8 = icmp eq i64 %7, 0
  br i1 %8, label %39, label %9

; <label>:9:                                      ; preds = %6
  %10 = sub nsw i64 64, %7
  %11 = shl i64 %4, %10
  %12 = lshr i64 %3, %7
  %13 = or i64 %11, %12
  store i64 %13, i64* %2, align 8
  %14 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  %15 = add nsw i64 %7, -1
  %16 = shl i64 1, %15
  %17 = and i64 %16, %3
  %18 = icmp ne i64 %17, 0
  %19 = zext i1 %18 to i8
  store i8 %19, i8* %14, align 1
  %20 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  %21 = trunc i64 %13 to i32
  %22 = and i32 %21, 255
  %23 = tail call i32 @llvm.ctpop.i32(i32 %22) 
  %24 = trunc i32 %23 to i8
  %25 = and i8 %24, 1
  %26 = xor i8 %25, 1
  store i8 %26, i8* %20, align 1
  %27 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 0, i8* %27, align 1
  %28 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  %29 = icmp eq i64 %13, 0
  %30 = zext i1 %29 to i8
  store i8 %30, i8* %28, align 1
  %31 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  %32 = icmp slt i64 %13, 0
  %33 = lshr i64 %13, 63
  %34 = trunc i64 %33 to i8
  store i8 %34, i8* %31, align 1
  %35 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  %36 = icmp slt i64 %3, 0
  %37 = xor i1 %36, %32
  %38 = zext i1 %37 to i8
  store i8 %38, i8* %35, align 1
  br label %39

; <label>:39:                                     ; preds = %9, %6
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L4SHLDI3MnWIhE2MnIhE2RnIhE2InIhEEEP6MemorySA_R5StateT_T0_T1_T2_(%struct.Memory*, %struct.State* nocapture dereferenceable(3376), i64, i64, i64, i64)  {
  %7 = inttoptr i64 %3 to i8*
  %8 = load i8, i8* %7
  %9 = trunc i64 %5 to i8
  %10 = and i8 %9, 31
  %11 = icmp eq i8 %10, 0
  br i1 %11, label %55, label %12

; <label>:12:                                     ; preds = %6
  %13 = icmp ugt i8 %10, 8
  br i1 %13, label %14, label %21

; <label>:14:                                     ; preds = %12
  %15 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  store i8 0, i8* %15, align 1
  %16 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 0, i8* %16, align 1
  %17 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 0, i8* %17, align 1
  %18 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  store i8 0, i8* %18, align 1
  %19 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 0, i8* %19, align 1
  %20 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 0, i8* %20, align 1
  br label %55

; <label>:21:                                     ; preds = %12
  %22 = zext i8 %8 to i64
  %23 = zext i8 %10 to i64
  %24 = shl i64 %22, %23
  %25 = sub nsw i8 8, %10
  %26 = and i64 %4, 255
  %27 = zext i8 %25 to i64
  %28 = lshr i64 %26, %27
  %29 = or i64 %24, %28
  %30 = trunc i64 %29 to i8
  %31 = inttoptr i64 %2 to i8*
  store i8 %30, i8* %31
  %32 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  %33 = shl i64 1, %27
  %34 = and i64 %22, %33
  %35 = icmp ne i64 %34, 0
  %36 = zext i1 %35 to i8
  store i8 %36, i8* %32, align 1
  %37 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  %38 = trunc i64 %29 to i32
  %39 = and i32 %38, 255
  %40 = tail call i32 @llvm.ctpop.i32(i32 %39) 
  %41 = trunc i32 %40 to i8
  %42 = and i8 %41, 1
  %43 = xor i8 %42, 1
  store i8 %43, i8* %37, align 1
  %44 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 0, i8* %44, align 1
  %45 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  %46 = icmp eq i8 %30, 0
  %47 = zext i1 %46 to i8
  store i8 %47, i8* %45, align 1
  %48 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  %49 = icmp slt i8 %30, 0
  %50 = lshr i8 %30, 7
  store i8 %50, i8* %48, align 1
  %51 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  %52 = icmp slt i8 %8, 0
  %53 = xor i1 %52, %49
  %54 = zext i1 %53 to i8
  store i8 %54, i8* %51, align 1
  br label %55

; <label>:55:                                     ; preds = %21, %14, %6
  %56 = phi %struct.Memory* [ %0, %14 ], [ %0, %21 ], [ %0, %6 ]
  ret %struct.Memory* %56
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L4SHLDI3MnWItE2MnItE2RnItE2InItEEEP6MemorySA_R5StateT_T0_T1_T2_(%struct.Memory*, %struct.State* nocapture dereferenceable(3376), i64, i64, i64, i64)  {
  %7 = inttoptr i64 %3 to i16*
  %8 = load i16, i16* %7
  %9 = trunc i64 %5 to i16
  %10 = and i16 %9, 31
  %11 = icmp eq i16 %10, 0
  br i1 %11, label %56, label %12

; <label>:12:                                     ; preds = %6
  %13 = icmp ugt i16 %10, 16
  br i1 %13, label %14, label %21

; <label>:14:                                     ; preds = %12
  %15 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  store i8 0, i8* %15, align 1
  %16 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 0, i8* %16, align 1
  %17 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 0, i8* %17, align 1
  %18 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  store i8 0, i8* %18, align 1
  %19 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 0, i8* %19, align 1
  %20 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 0, i8* %20, align 1
  br label %56

; <label>:21:                                     ; preds = %12
  %22 = zext i16 %8 to i64
  %23 = zext i16 %10 to i64
  %24 = shl i64 %22, %23
  %25 = sub nsw i16 16, %10
  %26 = and i64 %4, 65535
  %27 = zext i16 %25 to i64
  %28 = lshr i64 %26, %27
  %29 = or i64 %24, %28
  %30 = trunc i64 %29 to i16
  %31 = inttoptr i64 %2 to i16*
  store i16 %30, i16* %31
  %32 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  %33 = shl i64 1, %27
  %34 = and i64 %22, %33
  %35 = icmp ne i64 %34, 0
  %36 = zext i1 %35 to i8
  store i8 %36, i8* %32, align 1
  %37 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  %38 = and i16 %30, 255
  %39 = zext i16 %38 to i32
  %40 = tail call i32 @llvm.ctpop.i32(i32 %39) 
  %41 = trunc i32 %40 to i8
  %42 = and i8 %41, 1
  %43 = xor i8 %42, 1
  store i8 %43, i8* %37, align 1
  %44 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 0, i8* %44, align 1
  %45 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  %46 = icmp eq i16 %30, 0
  %47 = zext i1 %46 to i8
  store i8 %47, i8* %45, align 1
  %48 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  %49 = icmp slt i16 %30, 0
  %50 = lshr i16 %30, 15
  %51 = trunc i16 %50 to i8
  store i8 %51, i8* %48, align 1
  %52 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  %53 = icmp slt i16 %8, 0
  %54 = xor i1 %53, %49
  %55 = zext i1 %54 to i8
  store i8 %55, i8* %52, align 1
  br label %56

; <label>:56:                                     ; preds = %21, %14, %6
  %57 = phi %struct.Memory* [ %0, %14 ], [ %0, %21 ], [ %0, %6 ]
  ret %struct.Memory* %57
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L4SHLDI3MnWIjE2MnIjE2RnIjE2InIjEEEP6MemorySA_R5StateT_T0_T1_T2_(%struct.Memory*, %struct.State* nocapture dereferenceable(3376), i64, i64, i64, i64)  {
  %7 = inttoptr i64 %3 to i32*
  %8 = load i32, i32* %7
  %9 = trunc i64 %5 to i32
  %10 = and i32 %9, 31
  %11 = icmp eq i32 %10, 0
  br i1 %11, label %46, label %12

; <label>:12:                                     ; preds = %6
  %13 = zext i32 %8 to i64
  %14 = zext i32 %10 to i64
  %15 = shl i64 %13, %14
  %16 = sub nsw i32 32, %10
  %17 = and i64 %4, 4294967295
  %18 = zext i32 %16 to i64
  %19 = lshr i64 %17, %18
  %20 = or i64 %15, %19
  %21 = trunc i64 %20 to i32
  %22 = inttoptr i64 %2 to i32*
  store i32 %21, i32* %22
  %23 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  %24 = shl i64 1, %18
  %25 = and i64 %13, %24
  %26 = icmp ne i64 %25, 0
  %27 = zext i1 %26 to i8
  store i8 %27, i8* %23, align 1
  %28 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  %29 = and i32 %21, 255
  %30 = tail call i32 @llvm.ctpop.i32(i32 %29) 
  %31 = trunc i32 %30 to i8
  %32 = and i8 %31, 1
  %33 = xor i8 %32, 1
  store i8 %33, i8* %28, align 1
  %34 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 0, i8* %34, align 1
  %35 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  %36 = icmp eq i32 %21, 0
  %37 = zext i1 %36 to i8
  store i8 %37, i8* %35, align 1
  %38 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  %39 = icmp slt i32 %21, 0
  %40 = lshr i32 %21, 31
  %41 = trunc i32 %40 to i8
  store i8 %41, i8* %38, align 1
  %42 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  %43 = icmp slt i32 %8, 0
  %44 = xor i1 %43, %39
  %45 = zext i1 %44 to i8
  store i8 %45, i8* %42, align 1
  br label %46

; <label>:46:                                     ; preds = %12, %6
  %47 = phi %struct.Memory* [ %0, %12 ], [ %0, %6 ]
  ret %struct.Memory* %47
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L4SHLDI3MnWImE2MnImE2RnImE2InImEEEP6MemorySA_R5StateT_T0_T1_T2_(%struct.Memory*, %struct.State* nocapture dereferenceable(3376), i64, i64, i64, i64)  {
  %7 = inttoptr i64 %3 to i64*
  %8 = load i64, i64* %7
  %9 = and i64 %5, 63
  %10 = icmp eq i64 %9, 0
  br i1 %10, label %41, label %11

; <label>:11:                                     ; preds = %6
  %12 = shl i64 %8, %9
  %13 = sub nsw i64 64, %9
  %14 = lshr i64 %4, %13
  %15 = or i64 %12, %14
  %16 = inttoptr i64 %2 to i64*
  store i64 %15, i64* %16
  %17 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  %18 = shl i64 1, %13
  %19 = and i64 %8, %18
  %20 = icmp ne i64 %19, 0
  %21 = zext i1 %20 to i8
  store i8 %21, i8* %17, align 1
  %22 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  %23 = trunc i64 %15 to i32
  %24 = and i32 %23, 255
  %25 = tail call i32 @llvm.ctpop.i32(i32 %24) 
  %26 = trunc i32 %25 to i8
  %27 = and i8 %26, 1
  %28 = xor i8 %27, 1
  store i8 %28, i8* %22, align 1
  %29 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 0, i8* %29, align 1
  %30 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  %31 = icmp eq i64 %15, 0
  %32 = zext i1 %31 to i8
  store i8 %32, i8* %30, align 1
  %33 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  %34 = icmp slt i64 %15, 0
  %35 = lshr i64 %15, 63
  %36 = trunc i64 %35 to i8
  store i8 %36, i8* %33, align 1
  %37 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  %38 = icmp slt i64 %8, 0
  %39 = xor i1 %38, %34
  %40 = zext i1 %39 to i8
  store i8 %40, i8* %37, align 1
  br label %41

; <label>:41:                                     ; preds = %11, %6
  %42 = phi %struct.Memory* [ %0, %11 ], [ %0, %6 ]
  ret %struct.Memory* %42
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L4SHLDI3RnWIhE2RnIhES4_2InIhEEEP6MemoryS8_R5StateT_T0_T1_T2_(%struct.Memory* readnone, %struct.State* nocapture dereferenceable(3376), i8* nocapture, i64, i64, i64)  {
  %7 = trunc i64 %3 to i8
  %8 = trunc i64 %5 to i8
  %9 = and i8 %8, 31
  %10 = icmp eq i8 %9, 0
  br i1 %10, label %53, label %11

; <label>:11:                                     ; preds = %6
  %12 = icmp ugt i8 %9, 8
  br i1 %12, label %13, label %20

; <label>:13:                                     ; preds = %11
  %14 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  store i8 0, i8* %14, align 1
  %15 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 0, i8* %15, align 1
  %16 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 0, i8* %16, align 1
  %17 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  store i8 0, i8* %17, align 1
  %18 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 0, i8* %18, align 1
  %19 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 0, i8* %19, align 1
  br label %53

; <label>:20:                                     ; preds = %11
  %21 = and i64 %3, 255
  %22 = zext i8 %9 to i64
  %23 = shl i64 %21, %22
  %24 = sub nsw i8 8, %9
  %25 = and i64 %4, 255
  %26 = zext i8 %24 to i64
  %27 = lshr i64 %25, %26
  %28 = or i64 %27, %23
  %29 = trunc i64 %28 to i8
  store i8 %29, i8* %2, align 1
  %30 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  %31 = shl i64 1, %26
  %32 = and i64 %31, %21
  %33 = icmp ne i64 %32, 0
  %34 = zext i1 %33 to i8
  store i8 %34, i8* %30, align 1
  %35 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  %36 = trunc i64 %28 to i32
  %37 = and i32 %36, 255
  %38 = tail call i32 @llvm.ctpop.i32(i32 %37) 
  %39 = trunc i32 %38 to i8
  %40 = and i8 %39, 1
  %41 = xor i8 %40, 1
  store i8 %41, i8* %35, align 1
  %42 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 0, i8* %42, align 1
  %43 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  %44 = icmp eq i8 %29, 0
  %45 = zext i1 %44 to i8
  store i8 %45, i8* %43, align 1
  %46 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  %47 = icmp slt i8 %29, 0
  %48 = lshr i8 %29, 7
  store i8 %48, i8* %46, align 1
  %49 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  %50 = icmp slt i8 %7, 0
  %51 = xor i1 %50, %47
  %52 = zext i1 %51 to i8
  store i8 %52, i8* %49, align 1
  br label %53

; <label>:53:                                     ; preds = %20, %13, %6
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L4SHLDI3RnWItE2RnItES4_2InItEEEP6MemoryS8_R5StateT_T0_T1_T2_(%struct.Memory* readnone, %struct.State* nocapture dereferenceable(3376), i16* nocapture, i64, i64, i64)  {
  %7 = trunc i64 %3 to i16
  %8 = trunc i64 %5 to i16
  %9 = and i16 %8, 31
  %10 = icmp eq i16 %9, 0
  br i1 %10, label %54, label %11

; <label>:11:                                     ; preds = %6
  %12 = icmp ugt i16 %9, 16
  br i1 %12, label %13, label %20

; <label>:13:                                     ; preds = %11
  %14 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  store i8 0, i8* %14, align 1
  %15 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 0, i8* %15, align 1
  %16 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 0, i8* %16, align 1
  %17 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  store i8 0, i8* %17, align 1
  %18 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 0, i8* %18, align 1
  %19 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 0, i8* %19, align 1
  br label %54

; <label>:20:                                     ; preds = %11
  %21 = and i64 %3, 65535
  %22 = zext i16 %9 to i64
  %23 = shl i64 %21, %22
  %24 = sub nsw i16 16, %9
  %25 = and i64 %4, 65535
  %26 = zext i16 %24 to i64
  %27 = lshr i64 %25, %26
  %28 = or i64 %27, %23
  %29 = trunc i64 %28 to i16
  store i16 %29, i16* %2, align 2
  %30 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  %31 = shl i64 1, %26
  %32 = and i64 %31, %21
  %33 = icmp ne i64 %32, 0
  %34 = zext i1 %33 to i8
  store i8 %34, i8* %30, align 1
  %35 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  %36 = and i16 %29, 255
  %37 = zext i16 %36 to i32
  %38 = tail call i32 @llvm.ctpop.i32(i32 %37) 
  %39 = trunc i32 %38 to i8
  %40 = and i8 %39, 1
  %41 = xor i8 %40, 1
  store i8 %41, i8* %35, align 1
  %42 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 0, i8* %42, align 1
  %43 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  %44 = icmp eq i16 %29, 0
  %45 = zext i1 %44 to i8
  store i8 %45, i8* %43, align 1
  %46 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  %47 = icmp slt i16 %29, 0
  %48 = lshr i16 %29, 15
  %49 = trunc i16 %48 to i8
  store i8 %49, i8* %46, align 1
  %50 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  %51 = icmp slt i16 %7, 0
  %52 = xor i1 %51, %47
  %53 = zext i1 %52 to i8
  store i8 %53, i8* %50, align 1
  br label %54

; <label>:54:                                     ; preds = %20, %13, %6
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L4SHLDI3RnWImE2RnIjES4_2InIjEEEP6MemoryS8_R5StateT_T0_T1_T2_(%struct.Memory* readnone, %struct.State* nocapture dereferenceable(3376), i64* nocapture, i64, i64, i64)  {
  %7 = trunc i64 %5 to i32
  %8 = and i32 %7, 31
  %9 = icmp eq i32 %8, 0
  br i1 %9, label %45, label %10

; <label>:10:                                     ; preds = %6
  %11 = trunc i64 %3 to i32
  %12 = and i64 %3, 4294967295
  %13 = zext i32 %8 to i64
  %14 = shl i64 %12, %13
  %15 = sub nsw i32 32, %8
  %16 = and i64 %4, 4294967295
  %17 = zext i32 %15 to i64
  %18 = lshr i64 %16, %17
  %19 = or i64 %18, %14
  %20 = trunc i64 %19 to i32
  %21 = and i64 %19, 4294967295
  store i64 %21, i64* %2, align 8
  %22 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  %23 = shl i64 1, %17
  %24 = and i64 %23, %12
  %25 = icmp ne i64 %24, 0
  %26 = zext i1 %25 to i8
  store i8 %26, i8* %22, align 1
  %27 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  %28 = and i32 %20, 255
  %29 = tail call i32 @llvm.ctpop.i32(i32 %28) 
  %30 = trunc i32 %29 to i8
  %31 = and i8 %30, 1
  %32 = xor i8 %31, 1
  store i8 %32, i8* %27, align 1
  %33 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 0, i8* %33, align 1
  %34 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  %35 = icmp eq i32 %20, 0
  %36 = zext i1 %35 to i8
  store i8 %36, i8* %34, align 1
  %37 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  %38 = icmp slt i32 %20, 0
  %39 = lshr i32 %20, 31
  %40 = trunc i32 %39 to i8
  store i8 %40, i8* %37, align 1
  %41 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  %42 = icmp slt i32 %11, 0
  %43 = xor i1 %42, %38
  %44 = zext i1 %43 to i8
  store i8 %44, i8* %41, align 1
  br label %45

; <label>:45:                                     ; preds = %10, %6
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L4SHLDI3RnWImE2RnImES4_2InImEEEP6MemoryS8_R5StateT_T0_T1_T2_(%struct.Memory* readnone, %struct.State* nocapture dereferenceable(3376), i64* nocapture, i64, i64, i64)  {
  %7 = and i64 %5, 63
  %8 = icmp eq i64 %7, 0
  br i1 %8, label %38, label %9

; <label>:9:                                      ; preds = %6
  %10 = shl i64 %3, %7
  %11 = sub nsw i64 64, %7
  %12 = lshr i64 %4, %11
  %13 = or i64 %12, %10
  store i64 %13, i64* %2, align 8
  %14 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  %15 = shl i64 1, %11
  %16 = and i64 %15, %3
  %17 = icmp ne i64 %16, 0
  %18 = zext i1 %17 to i8
  store i8 %18, i8* %14, align 1
  %19 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  %20 = trunc i64 %13 to i32
  %21 = and i32 %20, 255
  %22 = tail call i32 @llvm.ctpop.i32(i32 %21) 
  %23 = trunc i32 %22 to i8
  %24 = and i8 %23, 1
  %25 = xor i8 %24, 1
  store i8 %25, i8* %19, align 1
  %26 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 0, i8* %26, align 1
  %27 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  %28 = icmp eq i64 %13, 0
  %29 = zext i1 %28 to i8
  store i8 %29, i8* %27, align 1
  %30 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  %31 = icmp slt i64 %13, 0
  %32 = lshr i64 %13, 63
  %33 = trunc i64 %32 to i8
  store i8 %33, i8* %30, align 1
  %34 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  %35 = icmp slt i64 %3, 0
  %36 = xor i1 %35, %31
  %37 = zext i1 %36 to i8
  store i8 %37, i8* %34, align 1
  br label %38

; <label>:38:                                     ; preds = %9, %6
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L4SHLDI3MnWIhE2MnIhE2RnIhES6_EEP6MemoryS8_R5StateT_T0_T1_T2_(%struct.Memory*, %struct.State* nocapture dereferenceable(3376), i64, i64, i64, i64)  {
  %7 = inttoptr i64 %3 to i8*
  %8 = load i8, i8* %7
  %9 = trunc i64 %5 to i8
  %10 = and i8 %9, 31
  %11 = icmp eq i8 %10, 0
  br i1 %11, label %55, label %12

; <label>:12:                                     ; preds = %6
  %13 = icmp ugt i8 %10, 8
  br i1 %13, label %14, label %21

; <label>:14:                                     ; preds = %12
  %15 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  store i8 0, i8* %15, align 1
  %16 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 0, i8* %16, align 1
  %17 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 0, i8* %17, align 1
  %18 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  store i8 0, i8* %18, align 1
  %19 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 0, i8* %19, align 1
  %20 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 0, i8* %20, align 1
  br label %55

; <label>:21:                                     ; preds = %12
  %22 = zext i8 %8 to i64
  %23 = zext i8 %10 to i64
  %24 = shl i64 %22, %23
  %25 = sub nsw i8 8, %10
  %26 = and i64 %4, 255
  %27 = zext i8 %25 to i64
  %28 = lshr i64 %26, %27
  %29 = or i64 %24, %28
  %30 = trunc i64 %29 to i8
  %31 = inttoptr i64 %2 to i8*
  store i8 %30, i8* %31
  %32 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  %33 = shl i64 1, %27
  %34 = and i64 %22, %33
  %35 = icmp ne i64 %34, 0
  %36 = zext i1 %35 to i8
  store i8 %36, i8* %32, align 1
  %37 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  %38 = trunc i64 %29 to i32
  %39 = and i32 %38, 255
  %40 = tail call i32 @llvm.ctpop.i32(i32 %39) 
  %41 = trunc i32 %40 to i8
  %42 = and i8 %41, 1
  %43 = xor i8 %42, 1
  store i8 %43, i8* %37, align 1
  %44 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 0, i8* %44, align 1
  %45 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  %46 = icmp eq i8 %30, 0
  %47 = zext i1 %46 to i8
  store i8 %47, i8* %45, align 1
  %48 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  %49 = icmp slt i8 %30, 0
  %50 = lshr i8 %30, 7
  store i8 %50, i8* %48, align 1
  %51 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  %52 = icmp slt i8 %8, 0
  %53 = xor i1 %52, %49
  %54 = zext i1 %53 to i8
  store i8 %54, i8* %51, align 1
  br label %55

; <label>:55:                                     ; preds = %21, %14, %6
  %56 = phi %struct.Memory* [ %0, %14 ], [ %0, %21 ], [ %0, %6 ]
  ret %struct.Memory* %56
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L4SHLDI3MnWItE2MnItE2RnItES6_EEP6MemoryS8_R5StateT_T0_T1_T2_(%struct.Memory*, %struct.State* nocapture dereferenceable(3376), i64, i64, i64, i64)  {
  %7 = inttoptr i64 %3 to i16*
  %8 = load i16, i16* %7
  %9 = trunc i64 %5 to i16
  %10 = and i16 %9, 31
  %11 = icmp eq i16 %10, 0
  br i1 %11, label %56, label %12

; <label>:12:                                     ; preds = %6
  %13 = icmp ugt i16 %10, 16
  br i1 %13, label %14, label %21

; <label>:14:                                     ; preds = %12
  %15 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  store i8 0, i8* %15, align 1
  %16 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 0, i8* %16, align 1
  %17 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 0, i8* %17, align 1
  %18 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  store i8 0, i8* %18, align 1
  %19 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 0, i8* %19, align 1
  %20 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 0, i8* %20, align 1
  br label %56

; <label>:21:                                     ; preds = %12
  %22 = zext i16 %8 to i64
  %23 = zext i16 %10 to i64
  %24 = shl i64 %22, %23
  %25 = sub nsw i16 16, %10
  %26 = and i64 %4, 65535
  %27 = zext i16 %25 to i64
  %28 = lshr i64 %26, %27
  %29 = or i64 %24, %28
  %30 = trunc i64 %29 to i16
  %31 = inttoptr i64 %2 to i16*
  store i16 %30, i16* %31
  %32 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  %33 = shl i64 1, %27
  %34 = and i64 %22, %33
  %35 = icmp ne i64 %34, 0
  %36 = zext i1 %35 to i8
  store i8 %36, i8* %32, align 1
  %37 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  %38 = and i16 %30, 255
  %39 = zext i16 %38 to i32
  %40 = tail call i32 @llvm.ctpop.i32(i32 %39) 
  %41 = trunc i32 %40 to i8
  %42 = and i8 %41, 1
  %43 = xor i8 %42, 1
  store i8 %43, i8* %37, align 1
  %44 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 0, i8* %44, align 1
  %45 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  %46 = icmp eq i16 %30, 0
  %47 = zext i1 %46 to i8
  store i8 %47, i8* %45, align 1
  %48 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  %49 = icmp slt i16 %30, 0
  %50 = lshr i16 %30, 15
  %51 = trunc i16 %50 to i8
  store i8 %51, i8* %48, align 1
  %52 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  %53 = icmp slt i16 %8, 0
  %54 = xor i1 %53, %49
  %55 = zext i1 %54 to i8
  store i8 %55, i8* %52, align 1
  br label %56

; <label>:56:                                     ; preds = %21, %14, %6
  %57 = phi %struct.Memory* [ %0, %14 ], [ %0, %21 ], [ %0, %6 ]
  ret %struct.Memory* %57
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L4SHLDI3MnWIjE2MnIjE2RnIjES6_EEP6MemoryS8_R5StateT_T0_T1_T2_(%struct.Memory*, %struct.State* nocapture dereferenceable(3376), i64, i64, i64, i64)  {
  %7 = inttoptr i64 %3 to i32*
  %8 = load i32, i32* %7
  %9 = trunc i64 %5 to i32
  %10 = and i32 %9, 31
  %11 = icmp eq i32 %10, 0
  br i1 %11, label %46, label %12

; <label>:12:                                     ; preds = %6
  %13 = zext i32 %8 to i64
  %14 = zext i32 %10 to i64
  %15 = shl i64 %13, %14
  %16 = sub nsw i32 32, %10
  %17 = and i64 %4, 4294967295
  %18 = zext i32 %16 to i64
  %19 = lshr i64 %17, %18
  %20 = or i64 %15, %19
  %21 = trunc i64 %20 to i32
  %22 = inttoptr i64 %2 to i32*
  store i32 %21, i32* %22
  %23 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  %24 = shl i64 1, %18
  %25 = and i64 %13, %24
  %26 = icmp ne i64 %25, 0
  %27 = zext i1 %26 to i8
  store i8 %27, i8* %23, align 1
  %28 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  %29 = and i32 %21, 255
  %30 = tail call i32 @llvm.ctpop.i32(i32 %29) 
  %31 = trunc i32 %30 to i8
  %32 = and i8 %31, 1
  %33 = xor i8 %32, 1
  store i8 %33, i8* %28, align 1
  %34 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 0, i8* %34, align 1
  %35 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  %36 = icmp eq i32 %21, 0
  %37 = zext i1 %36 to i8
  store i8 %37, i8* %35, align 1
  %38 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  %39 = icmp slt i32 %21, 0
  %40 = lshr i32 %21, 31
  %41 = trunc i32 %40 to i8
  store i8 %41, i8* %38, align 1
  %42 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  %43 = icmp slt i32 %8, 0
  %44 = xor i1 %43, %39
  %45 = zext i1 %44 to i8
  store i8 %45, i8* %42, align 1
  br label %46

; <label>:46:                                     ; preds = %12, %6
  %47 = phi %struct.Memory* [ %0, %12 ], [ %0, %6 ]
  ret %struct.Memory* %47
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L4SHLDI3MnWImE2MnImE2RnImES6_EEP6MemoryS8_R5StateT_T0_T1_T2_(%struct.Memory*, %struct.State* nocapture dereferenceable(3376), i64, i64, i64, i64)  {
  %7 = inttoptr i64 %3 to i64*
  %8 = load i64, i64* %7
  %9 = and i64 %5, 63
  %10 = icmp eq i64 %9, 0
  br i1 %10, label %41, label %11

; <label>:11:                                     ; preds = %6
  %12 = shl i64 %8, %9
  %13 = sub nsw i64 64, %9
  %14 = lshr i64 %4, %13
  %15 = or i64 %12, %14
  %16 = inttoptr i64 %2 to i64*
  store i64 %15, i64* %16
  %17 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  %18 = shl i64 1, %13
  %19 = and i64 %8, %18
  %20 = icmp ne i64 %19, 0
  %21 = zext i1 %20 to i8
  store i8 %21, i8* %17, align 1
  %22 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  %23 = trunc i64 %15 to i32
  %24 = and i32 %23, 255
  %25 = tail call i32 @llvm.ctpop.i32(i32 %24) 
  %26 = trunc i32 %25 to i8
  %27 = and i8 %26, 1
  %28 = xor i8 %27, 1
  store i8 %28, i8* %22, align 1
  %29 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 0, i8* %29, align 1
  %30 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  %31 = icmp eq i64 %15, 0
  %32 = zext i1 %31 to i8
  store i8 %32, i8* %30, align 1
  %33 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  %34 = icmp slt i64 %15, 0
  %35 = lshr i64 %15, 63
  %36 = trunc i64 %35 to i8
  store i8 %36, i8* %33, align 1
  %37 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  %38 = icmp slt i64 %8, 0
  %39 = xor i1 %38, %34
  %40 = zext i1 %39 to i8
  store i8 %40, i8* %37, align 1
  br label %41

; <label>:41:                                     ; preds = %11, %6
  %42 = phi %struct.Memory* [ %0, %11 ], [ %0, %6 ]
  ret %struct.Memory* %42
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L4SHLDI3RnWIhE2RnIhES4_S4_EEP6MemoryS6_R5StateT_T0_T1_T2_(%struct.Memory* readnone, %struct.State* nocapture dereferenceable(3376), i8* nocapture, i64, i64, i64)  {
  %7 = trunc i64 %3 to i8
  %8 = trunc i64 %5 to i8
  %9 = and i8 %8, 31
  %10 = icmp eq i8 %9, 0
  br i1 %10, label %53, label %11

; <label>:11:                                     ; preds = %6
  %12 = icmp ugt i8 %9, 8
  br i1 %12, label %13, label %20

; <label>:13:                                     ; preds = %11
  %14 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  store i8 0, i8* %14, align 1
  %15 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 0, i8* %15, align 1
  %16 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 0, i8* %16, align 1
  %17 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  store i8 0, i8* %17, align 1
  %18 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 0, i8* %18, align 1
  %19 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 0, i8* %19, align 1
  br label %53

; <label>:20:                                     ; preds = %11
  %21 = and i64 %3, 255
  %22 = zext i8 %9 to i64
  %23 = shl i64 %21, %22
  %24 = sub nsw i8 8, %9
  %25 = and i64 %4, 255
  %26 = zext i8 %24 to i64
  %27 = lshr i64 %25, %26
  %28 = or i64 %27, %23
  %29 = trunc i64 %28 to i8
  store i8 %29, i8* %2, align 1
  %30 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  %31 = shl i64 1, %26
  %32 = and i64 %31, %21
  %33 = icmp ne i64 %32, 0
  %34 = zext i1 %33 to i8
  store i8 %34, i8* %30, align 1
  %35 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  %36 = trunc i64 %28 to i32
  %37 = and i32 %36, 255
  %38 = tail call i32 @llvm.ctpop.i32(i32 %37) 
  %39 = trunc i32 %38 to i8
  %40 = and i8 %39, 1
  %41 = xor i8 %40, 1
  store i8 %41, i8* %35, align 1
  %42 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 0, i8* %42, align 1
  %43 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  %44 = icmp eq i8 %29, 0
  %45 = zext i1 %44 to i8
  store i8 %45, i8* %43, align 1
  %46 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  %47 = icmp slt i8 %29, 0
  %48 = lshr i8 %29, 7
  store i8 %48, i8* %46, align 1
  %49 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  %50 = icmp slt i8 %7, 0
  %51 = xor i1 %50, %47
  %52 = zext i1 %51 to i8
  store i8 %52, i8* %49, align 1
  br label %53

; <label>:53:                                     ; preds = %20, %13, %6
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L4SHLDI3RnWItE2RnItES4_S4_EEP6MemoryS6_R5StateT_T0_T1_T2_(%struct.Memory* readnone, %struct.State* nocapture dereferenceable(3376), i16* nocapture, i64, i64, i64)  {
  %7 = trunc i64 %3 to i16
  %8 = trunc i64 %5 to i16
  %9 = and i16 %8, 31
  %10 = icmp eq i16 %9, 0
  br i1 %10, label %54, label %11

; <label>:11:                                     ; preds = %6
  %12 = icmp ugt i16 %9, 16
  br i1 %12, label %13, label %20

; <label>:13:                                     ; preds = %11
  %14 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  store i8 0, i8* %14, align 1
  %15 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 0, i8* %15, align 1
  %16 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 0, i8* %16, align 1
  %17 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  store i8 0, i8* %17, align 1
  %18 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 0, i8* %18, align 1
  %19 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 0, i8* %19, align 1
  br label %54

; <label>:20:                                     ; preds = %11
  %21 = and i64 %3, 65535
  %22 = zext i16 %9 to i64
  %23 = shl i64 %21, %22
  %24 = sub nsw i16 16, %9
  %25 = and i64 %4, 65535
  %26 = zext i16 %24 to i64
  %27 = lshr i64 %25, %26
  %28 = or i64 %27, %23
  %29 = trunc i64 %28 to i16
  store i16 %29, i16* %2, align 2
  %30 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  %31 = shl i64 1, %26
  %32 = and i64 %31, %21
  %33 = icmp ne i64 %32, 0
  %34 = zext i1 %33 to i8
  store i8 %34, i8* %30, align 1
  %35 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  %36 = and i16 %29, 255
  %37 = zext i16 %36 to i32
  %38 = tail call i32 @llvm.ctpop.i32(i32 %37) 
  %39 = trunc i32 %38 to i8
  %40 = and i8 %39, 1
  %41 = xor i8 %40, 1
  store i8 %41, i8* %35, align 1
  %42 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 0, i8* %42, align 1
  %43 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  %44 = icmp eq i16 %29, 0
  %45 = zext i1 %44 to i8
  store i8 %45, i8* %43, align 1
  %46 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  %47 = icmp slt i16 %29, 0
  %48 = lshr i16 %29, 15
  %49 = trunc i16 %48 to i8
  store i8 %49, i8* %46, align 1
  %50 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  %51 = icmp slt i16 %7, 0
  %52 = xor i1 %51, %47
  %53 = zext i1 %52 to i8
  store i8 %53, i8* %50, align 1
  br label %54

; <label>:54:                                     ; preds = %20, %13, %6
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L4SHLDI3RnWImE2RnIjES4_S4_EEP6MemoryS6_R5StateT_T0_T1_T2_(%struct.Memory* readnone, %struct.State* nocapture dereferenceable(3376), i64* nocapture, i64, i64, i64)  {
  %7 = trunc i64 %5 to i32
  %8 = and i32 %7, 31
  %9 = icmp eq i32 %8, 0
  br i1 %9, label %45, label %10

; <label>:10:                                     ; preds = %6
  %11 = trunc i64 %3 to i32
  %12 = and i64 %3, 4294967295
  %13 = zext i32 %8 to i64
  %14 = shl i64 %12, %13
  %15 = sub nsw i32 32, %8
  %16 = and i64 %4, 4294967295
  %17 = zext i32 %15 to i64
  %18 = lshr i64 %16, %17
  %19 = or i64 %18, %14
  %20 = trunc i64 %19 to i32
  %21 = and i64 %19, 4294967295
  store i64 %21, i64* %2, align 8
  %22 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  %23 = shl i64 1, %17
  %24 = and i64 %23, %12
  %25 = icmp ne i64 %24, 0
  %26 = zext i1 %25 to i8
  store i8 %26, i8* %22, align 1
  %27 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  %28 = and i32 %20, 255
  %29 = tail call i32 @llvm.ctpop.i32(i32 %28) 
  %30 = trunc i32 %29 to i8
  %31 = and i8 %30, 1
  %32 = xor i8 %31, 1
  store i8 %32, i8* %27, align 1
  %33 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 0, i8* %33, align 1
  %34 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  %35 = icmp eq i32 %20, 0
  %36 = zext i1 %35 to i8
  store i8 %36, i8* %34, align 1
  %37 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  %38 = icmp slt i32 %20, 0
  %39 = lshr i32 %20, 31
  %40 = trunc i32 %39 to i8
  store i8 %40, i8* %37, align 1
  %41 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  %42 = icmp slt i32 %11, 0
  %43 = xor i1 %42, %38
  %44 = zext i1 %43 to i8
  store i8 %44, i8* %41, align 1
  br label %45

; <label>:45:                                     ; preds = %10, %6
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L4SHLDI3RnWImE2RnImES4_S4_EEP6MemoryS6_R5StateT_T0_T1_T2_(%struct.Memory* readnone, %struct.State* nocapture dereferenceable(3376), i64* nocapture, i64, i64, i64)  {
  %7 = and i64 %5, 63
  %8 = icmp eq i64 %7, 0
  br i1 %8, label %38, label %9

; <label>:9:                                      ; preds = %6
  %10 = shl i64 %3, %7
  %11 = sub nsw i64 64, %7
  %12 = lshr i64 %4, %11
  %13 = or i64 %12, %10
  store i64 %13, i64* %2, align 8
  %14 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  %15 = shl i64 1, %11
  %16 = and i64 %15, %3
  %17 = icmp ne i64 %16, 0
  %18 = zext i1 %17 to i8
  store i8 %18, i8* %14, align 1
  %19 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  %20 = trunc i64 %13 to i32
  %21 = and i32 %20, 255
  %22 = tail call i32 @llvm.ctpop.i32(i32 %21) 
  %23 = trunc i32 %22 to i8
  %24 = and i8 %23, 1
  %25 = xor i8 %24, 1
  store i8 %25, i8* %19, align 1
  %26 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 0, i8* %26, align 1
  %27 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  %28 = icmp eq i64 %13, 0
  %29 = zext i1 %28 to i8
  store i8 %29, i8* %27, align 1
  %30 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  %31 = icmp slt i64 %13, 0
  %32 = lshr i64 %13, 63
  %33 = trunc i64 %32 to i8
  store i8 %33, i8* %30, align 1
  %34 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  %35 = icmp slt i64 %3, 0
  %36 = xor i1 %35, %31
  %37 = zext i1 %36 to i8
  store i8 %37, i8* %34, align 1
  br label %38

; <label>:38:                                     ; preds = %9, %6
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L6PSLLDQI3VnWI8vec128_tEEEP6MemoryS5_R5StateT_2VnIS2_E2InIhE(%struct.Memory* readnone returned, %struct.State* nocapture readnone dereferenceable(3376), i8* nocapture, i8* nocapture readonly, i64)  {
  %6 = alloca <2 x i64>, align 16
  %7 = bitcast <2 x i64>* %6 to { i64, i64 }*
  %8 = bitcast i8* %3 to i64*
  %9 = load i64, i64* %8, align 1
  %10 = getelementptr inbounds i8, i8* %3, i64 8
  %11 = bitcast i8* %10 to i64*
  %12 = load i64, i64* %11, align 1
  %13 = and i64 %4, 255
  %14 = icmp ult i64 %13, 16
  %15 = select i1 %14, i64 %13, i64 16
  %16 = sub nsw i64 16, %15
  %17 = bitcast <2 x i64>* %6 to i8*
  %18 = getelementptr inbounds <2 x i64>, <2 x i64>* %6, i64 0, i64 0
  %19 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %7, i64 0, i32 1
  %20 = bitcast <2 x i64>* %6 to [16 x i8]*
  %21 = icmp eq i64 %16, 0
  %22 = lshr i64 %9, 8
  %23 = trunc i64 %22 to i8
  %24 = lshr i64 %9, 16
  %25 = trunc i64 %24 to i8
  %26 = lshr i64 %9, 24
  %27 = trunc i64 %26 to i8
  %28 = lshr i64 %9, 32
  %29 = trunc i64 %28 to i8
  %30 = lshr i64 %9, 40
  %31 = trunc i64 %30 to i8
  %32 = lshr i64 %9, 48
  %33 = trunc i64 %32 to i8
  %34 = lshr i64 %9, 56
  %35 = trunc i64 %34 to i8
  %36 = trunc i64 %12 to i8
  %37 = lshr i64 %12, 8
  %38 = trunc i64 %37 to i8
  %39 = lshr i64 %12, 16
  %40 = trunc i64 %39 to i8
  %41 = lshr i64 %12, 24
  %42 = trunc i64 %41 to i8
  %43 = lshr i64 %12, 32
  %44 = trunc i64 %43 to i8
  %45 = lshr i64 %12, 40
  %46 = trunc i64 %45 to i8
  %47 = lshr i64 %12, 48
  %48 = trunc i64 %47 to i8
  %49 = lshr i64 %12, 56
  %50 = trunc i64 %49 to i8
  br i1 %21, label %348, label %51

; <label>:51:                                     ; preds = %5
  %52 = trunc i64 %9 to i8
  call void @llvm.lifetime.start(i64 16, i8* nonnull %17)
  store <2 x i64> zeroinitializer, <2 x i64>* %6, align 16
  %53 = getelementptr inbounds [16 x i8], [16 x i8]* %20, i64 0, i64 %15
  store i8 %52, i8* %53, align 1
  %54 = load i64, i64* %18, align 16
  %55 = load i64, i64* %19, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %17)
  %56 = trunc i64 %54 to i8
  %57 = lshr i64 %54, 8
  %58 = trunc i64 %57 to i8
  %59 = lshr i64 %54, 16
  %60 = trunc i64 %59 to i8
  %61 = lshr i64 %54, 24
  %62 = trunc i64 %61 to i8
  %63 = lshr i64 %54, 32
  %64 = trunc i64 %63 to i8
  %65 = lshr i64 %54, 40
  %66 = trunc i64 %65 to i8
  %67 = lshr i64 %54, 48
  %68 = trunc i64 %67 to i8
  %69 = lshr i64 %54, 56
  %70 = trunc i64 %69 to i8
  %71 = icmp eq i64 %16, 1
  br i1 %71, label %348, label %72

; <label>:72:                                     ; preds = %51
  %73 = shl nuw i64 %69, 56
  %74 = and i64 %54, 72057594037927935
  %75 = or i64 %74, %73
  %76 = add nuw nsw i64 %15, 1
  call void @llvm.lifetime.start(i64 16, i8* nonnull %17)
  store i64 %75, i64* %18, align 16
  store i64 %55, i64* %19, align 8
  %77 = getelementptr inbounds [16 x i8], [16 x i8]* %20, i64 0, i64 %76
  store i8 %23, i8* %77, align 1
  %78 = load i64, i64* %18, align 16
  %79 = load i64, i64* %19, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %17)
  %80 = trunc i64 %78 to i8
  %81 = lshr i64 %78, 8
  %82 = trunc i64 %81 to i8
  %83 = lshr i64 %78, 16
  %84 = trunc i64 %83 to i8
  %85 = lshr i64 %78, 24
  %86 = trunc i64 %85 to i8
  %87 = lshr i64 %78, 32
  %88 = trunc i64 %87 to i8
  %89 = lshr i64 %78, 40
  %90 = trunc i64 %89 to i8
  %91 = lshr i64 %78, 48
  %92 = trunc i64 %91 to i8
  %93 = lshr i64 %78, 56
  %94 = trunc i64 %93 to i8
  %95 = icmp ugt i64 %16, 2
  br i1 %95, label %96, label %348

; <label>:96:                                     ; preds = %72
  %97 = shl nuw i64 %93, 56
  %98 = and i64 %78, 72057594037927935
  %99 = or i64 %98, %97
  %100 = add nuw nsw i64 %15, 2
  call void @llvm.lifetime.start(i64 16, i8* nonnull %17)
  store i64 %99, i64* %18, align 16
  store i64 %79, i64* %19, align 8
  %101 = getelementptr inbounds [16 x i8], [16 x i8]* %20, i64 0, i64 %100
  store i8 %25, i8* %101, align 1
  %102 = load i64, i64* %18, align 16
  %103 = load i64, i64* %19, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %17)
  %104 = trunc i64 %102 to i8
  %105 = lshr i64 %102, 8
  %106 = trunc i64 %105 to i8
  %107 = lshr i64 %102, 16
  %108 = trunc i64 %107 to i8
  %109 = lshr i64 %102, 24
  %110 = trunc i64 %109 to i8
  %111 = lshr i64 %102, 32
  %112 = trunc i64 %111 to i8
  %113 = lshr i64 %102, 40
  %114 = trunc i64 %113 to i8
  %115 = lshr i64 %102, 48
  %116 = trunc i64 %115 to i8
  %117 = lshr i64 %102, 56
  %118 = trunc i64 %117 to i8
  %119 = icmp eq i64 %16, 3
  br i1 %119, label %348, label %120

; <label>:120:                                    ; preds = %96
  %121 = shl nuw i64 %117, 56
  %122 = and i64 %102, 72057594037927935
  %123 = or i64 %122, %121
  %124 = add nuw nsw i64 %15, 3
  call void @llvm.lifetime.start(i64 16, i8* nonnull %17)
  store i64 %123, i64* %18, align 16
  store i64 %103, i64* %19, align 8
  %125 = getelementptr inbounds [16 x i8], [16 x i8]* %20, i64 0, i64 %124
  store i8 %27, i8* %125, align 1
  %126 = load i64, i64* %18, align 16
  %127 = load i64, i64* %19, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %17)
  %128 = trunc i64 %126 to i8
  %129 = lshr i64 %126, 8
  %130 = trunc i64 %129 to i8
  %131 = lshr i64 %126, 16
  %132 = trunc i64 %131 to i8
  %133 = lshr i64 %126, 24
  %134 = trunc i64 %133 to i8
  %135 = lshr i64 %126, 32
  %136 = trunc i64 %135 to i8
  %137 = lshr i64 %126, 40
  %138 = trunc i64 %137 to i8
  %139 = lshr i64 %126, 48
  %140 = trunc i64 %139 to i8
  %141 = lshr i64 %126, 56
  %142 = trunc i64 %141 to i8
  %143 = icmp ugt i64 %16, 4
  br i1 %143, label %144, label %348

; <label>:144:                                    ; preds = %120
  %145 = shl nuw i64 %141, 56
  %146 = and i64 %126, 72057594037927935
  %147 = or i64 %146, %145
  %148 = add nuw nsw i64 %15, 4
  call void @llvm.lifetime.start(i64 16, i8* nonnull %17)
  store i64 %147, i64* %18, align 16
  store i64 %127, i64* %19, align 8
  %149 = getelementptr inbounds [16 x i8], [16 x i8]* %20, i64 0, i64 %148
  store i8 %29, i8* %149, align 1
  %150 = load i64, i64* %18, align 16
  %151 = load i64, i64* %19, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %17)
  %152 = trunc i64 %150 to i8
  %153 = lshr i64 %150, 8
  %154 = trunc i64 %153 to i8
  %155 = lshr i64 %150, 16
  %156 = trunc i64 %155 to i8
  %157 = lshr i64 %150, 24
  %158 = trunc i64 %157 to i8
  %159 = lshr i64 %150, 32
  %160 = trunc i64 %159 to i8
  %161 = lshr i64 %150, 40
  %162 = trunc i64 %161 to i8
  %163 = lshr i64 %150, 48
  %164 = trunc i64 %163 to i8
  %165 = lshr i64 %150, 56
  %166 = trunc i64 %165 to i8
  %167 = icmp eq i64 %16, 5
  br i1 %167, label %348, label %168

; <label>:168:                                    ; preds = %144
  %169 = shl nuw i64 %165, 56
  %170 = and i64 %150, 72057594037927935
  %171 = or i64 %170, %169
  %172 = add nuw nsw i64 %15, 5
  call void @llvm.lifetime.start(i64 16, i8* nonnull %17)
  store i64 %171, i64* %18, align 16
  store i64 %151, i64* %19, align 8
  %173 = getelementptr inbounds [16 x i8], [16 x i8]* %20, i64 0, i64 %172
  store i8 %31, i8* %173, align 1
  %174 = load i64, i64* %18, align 16
  %175 = load i64, i64* %19, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %17)
  %176 = trunc i64 %174 to i8
  %177 = lshr i64 %174, 8
  %178 = trunc i64 %177 to i8
  %179 = lshr i64 %174, 16
  %180 = trunc i64 %179 to i8
  %181 = lshr i64 %174, 24
  %182 = trunc i64 %181 to i8
  %183 = lshr i64 %174, 32
  %184 = trunc i64 %183 to i8
  %185 = lshr i64 %174, 40
  %186 = trunc i64 %185 to i8
  %187 = lshr i64 %174, 48
  %188 = trunc i64 %187 to i8
  %189 = lshr i64 %174, 56
  %190 = trunc i64 %189 to i8
  %191 = icmp ugt i64 %16, 6
  br i1 %191, label %192, label %348

; <label>:192:                                    ; preds = %168
  %193 = shl nuw i64 %189, 56
  %194 = and i64 %174, 72057594037927935
  %195 = or i64 %194, %193
  %196 = add nuw nsw i64 %15, 6
  call void @llvm.lifetime.start(i64 16, i8* nonnull %17)
  store i64 %195, i64* %18, align 16
  store i64 %175, i64* %19, align 8
  %197 = getelementptr inbounds [16 x i8], [16 x i8]* %20, i64 0, i64 %196
  store i8 %33, i8* %197, align 1
  %198 = load i64, i64* %18, align 16
  %199 = load i64, i64* %19, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %17)
  %200 = trunc i64 %198 to i8
  %201 = lshr i64 %198, 8
  %202 = trunc i64 %201 to i8
  %203 = lshr i64 %198, 16
  %204 = trunc i64 %203 to i8
  %205 = lshr i64 %198, 24
  %206 = trunc i64 %205 to i8
  %207 = lshr i64 %198, 32
  %208 = trunc i64 %207 to i8
  %209 = lshr i64 %198, 40
  %210 = trunc i64 %209 to i8
  %211 = lshr i64 %198, 48
  %212 = trunc i64 %211 to i8
  %213 = lshr i64 %198, 56
  %214 = trunc i64 %213 to i8
  %215 = icmp eq i64 %16, 7
  br i1 %215, label %348, label %216

; <label>:216:                                    ; preds = %192
  %217 = shl nuw i64 %213, 56
  %218 = and i64 %198, 72057594037927935
  %219 = or i64 %218, %217
  %220 = add nuw nsw i64 %15, 7
  call void @llvm.lifetime.start(i64 16, i8* nonnull %17)
  store i64 %219, i64* %18, align 16
  store i64 %199, i64* %19, align 8
  %221 = getelementptr inbounds [16 x i8], [16 x i8]* %20, i64 0, i64 %220
  store i8 %35, i8* %221, align 1
  %222 = load i64, i64* %18, align 16
  %223 = load i64, i64* %19, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %17)
  %224 = trunc i64 %222 to i8
  %225 = lshr i64 %222, 8
  %226 = trunc i64 %225 to i8
  %227 = lshr i64 %222, 16
  %228 = trunc i64 %227 to i8
  %229 = lshr i64 %222, 24
  %230 = trunc i64 %229 to i8
  %231 = lshr i64 %222, 32
  %232 = trunc i64 %231 to i8
  %233 = lshr i64 %222, 40
  %234 = trunc i64 %233 to i8
  %235 = lshr i64 %222, 48
  %236 = trunc i64 %235 to i8
  %237 = lshr i64 %222, 56
  %238 = trunc i64 %237 to i8
  %239 = icmp ugt i64 %16, 8
  br i1 %239, label %240, label %348

; <label>:240:                                    ; preds = %216
  %241 = shl nuw i64 %237, 56
  %242 = and i64 %222, 72057594037927935
  %243 = or i64 %242, %241
  %244 = add nuw nsw i64 %15, 8
  call void @llvm.lifetime.start(i64 16, i8* nonnull %17)
  store i64 %243, i64* %18, align 16
  store i64 %223, i64* %19, align 8
  %245 = getelementptr inbounds [16 x i8], [16 x i8]* %20, i64 0, i64 %244
  store i8 %36, i8* %245, align 1
  %246 = load i64, i64* %19, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %17)
  %247 = trunc i64 %222 to i8
  %248 = lshr i64 %222, 8
  %249 = trunc i64 %248 to i8
  %250 = lshr i64 %222, 48
  %251 = trunc i64 %250 to i8
  %252 = trunc i64 %237 to i8
  %253 = icmp eq i64 %16, 9
  br i1 %253, label %348, label %254

; <label>:254:                                    ; preds = %240
  %255 = shl nuw i64 %237, 56
  %256 = and i64 %222, 72057594037927935
  %257 = or i64 %256, %255
  %258 = add nuw nsw i64 %15, 9
  call void @llvm.lifetime.start(i64 16, i8* nonnull %17)
  store i64 %257, i64* %18, align 16
  store i64 %246, i64* %19, align 8
  %259 = getelementptr inbounds [16 x i8], [16 x i8]* %20, i64 0, i64 %258
  store i8 %38, i8* %259, align 1
  %260 = load i64, i64* %19, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %17)
  %261 = trunc i64 %222 to i8
  %262 = lshr i64 %222, 8
  %263 = trunc i64 %262 to i8
  %264 = lshr i64 %222, 48
  %265 = trunc i64 %264 to i8
  %266 = trunc i64 %237 to i8
  %267 = icmp ugt i64 %16, 10
  br i1 %267, label %268, label %348

; <label>:268:                                    ; preds = %254
  %269 = shl nuw i64 %237, 56
  %270 = and i64 %222, 72057594037927935
  %271 = or i64 %270, %269
  %272 = add nuw nsw i64 %15, 10
  call void @llvm.lifetime.start(i64 16, i8* nonnull %17)
  store i64 %271, i64* %18, align 16
  store i64 %260, i64* %19, align 8
  %273 = getelementptr inbounds [16 x i8], [16 x i8]* %20, i64 0, i64 %272
  store i8 %40, i8* %273, align 1
  %274 = load i64, i64* %19, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %17)
  %275 = trunc i64 %222 to i8
  %276 = lshr i64 %222, 8
  %277 = trunc i64 %276 to i8
  %278 = lshr i64 %222, 48
  %279 = trunc i64 %278 to i8
  %280 = trunc i64 %237 to i8
  %281 = icmp eq i64 %16, 11
  br i1 %281, label %348, label %282

; <label>:282:                                    ; preds = %268
  %283 = shl nuw i64 %237, 56
  %284 = and i64 %222, 72057594037927935
  %285 = or i64 %284, %283
  %286 = add nuw nsw i64 %15, 11
  call void @llvm.lifetime.start(i64 16, i8* nonnull %17)
  store i64 %285, i64* %18, align 16
  store i64 %274, i64* %19, align 8
  %287 = getelementptr inbounds [16 x i8], [16 x i8]* %20, i64 0, i64 %286
  store i8 %42, i8* %287, align 1
  %288 = load i64, i64* %19, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %17)
  %289 = trunc i64 %222 to i8
  %290 = lshr i64 %222, 8
  %291 = trunc i64 %290 to i8
  %292 = lshr i64 %222, 48
  %293 = trunc i64 %292 to i8
  %294 = trunc i64 %237 to i8
  %295 = icmp ugt i64 %16, 12
  br i1 %295, label %296, label %348

; <label>:296:                                    ; preds = %282
  %297 = shl nuw i64 %237, 56
  %298 = and i64 %222, 72057594037927935
  %299 = or i64 %298, %297
  %300 = add nuw nsw i64 %15, 12
  call void @llvm.lifetime.start(i64 16, i8* nonnull %17)
  store i64 %299, i64* %18, align 16
  store i64 %288, i64* %19, align 8
  %301 = getelementptr inbounds [16 x i8], [16 x i8]* %20, i64 0, i64 %300
  store i8 %44, i8* %301, align 1
  %302 = load i64, i64* %19, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %17)
  %303 = trunc i64 %222 to i8
  %304 = lshr i64 %222, 8
  %305 = trunc i64 %304 to i8
  %306 = lshr i64 %222, 48
  %307 = trunc i64 %306 to i8
  %308 = trunc i64 %237 to i8
  %309 = icmp eq i64 %16, 13
  br i1 %309, label %348, label %310

; <label>:310:                                    ; preds = %296
  %311 = shl nuw i64 %237, 56
  %312 = and i64 %222, 72057594037927935
  %313 = or i64 %312, %311
  %314 = add nuw nsw i64 %15, 13
  call void @llvm.lifetime.start(i64 16, i8* nonnull %17)
  store i64 %313, i64* %18, align 16
  store i64 %302, i64* %19, align 8
  %315 = getelementptr inbounds [16 x i8], [16 x i8]* %20, i64 0, i64 %314
  store i8 %46, i8* %315, align 1
  %316 = load i64, i64* %19, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %17)
  %317 = trunc i64 %222 to i8
  %318 = lshr i64 %222, 8
  %319 = trunc i64 %318 to i8
  %320 = lshr i64 %222, 48
  %321 = trunc i64 %320 to i8
  %322 = trunc i64 %237 to i8
  %323 = icmp ugt i64 %16, 14
  br i1 %323, label %324, label %348

; <label>:324:                                    ; preds = %310
  %325 = shl nuw i64 %237, 56
  %326 = and i64 %222, 72057594037927935
  %327 = or i64 %326, %325
  %328 = add nuw nsw i64 %15, 14
  call void @llvm.lifetime.start(i64 16, i8* nonnull %17)
  store i64 %327, i64* %18, align 16
  store i64 %316, i64* %19, align 8
  %329 = getelementptr inbounds [16 x i8], [16 x i8]* %20, i64 0, i64 %328
  store i8 %48, i8* %329, align 1
  %330 = load i64, i64* %19, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %17)
  %331 = trunc i64 %222 to i8
  %332 = lshr i64 %222, 8
  %333 = trunc i64 %332 to i8
  %334 = lshr i64 %222, 48
  %335 = trunc i64 %334 to i8
  %336 = trunc i64 %237 to i8
  %337 = icmp eq i64 %16, 15
  br i1 %337, label %348, label %338

; <label>:338:                                    ; preds = %324
  %339 = add nuw nsw i64 %15, 15
  call void @llvm.lifetime.start(i64 16, i8* nonnull %17)
  store i64 %327, i64* %18, align 16
  store i64 %330, i64* %19, align 8
  %340 = getelementptr inbounds [16 x i8], [16 x i8]* %20, i64 0, i64 %339
  store i8 %50, i8* %340, align 1
  %341 = load i64, i64* %19, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %17)
  %342 = trunc i64 %222 to i8
  %343 = lshr i64 %222, 8
  %344 = trunc i64 %343 to i8
  %345 = lshr i64 %222, 48
  %346 = trunc i64 %345 to i8
  %347 = trunc i64 %237 to i8
  br label %348

; <label>:348:                                    ; preds = %338, %324, %310, %296, %282, %268, %254, %240, %216, %192, %168, %144, %120, %96, %72, %51, %5
  %349 = phi i8 [ %234, %338 ], [ %234, %324 ], [ %234, %310 ], [ %234, %296 ], [ %234, %282 ], [ %234, %268 ], [ %234, %254 ], [ %234, %240 ], [ %234, %216 ], [ %210, %192 ], [ %186, %168 ], [ %162, %144 ], [ %138, %120 ], [ %114, %96 ], [ %90, %72 ], [ %66, %51 ], [ 0, %5 ]
  %350 = phi i8 [ %232, %338 ], [ %232, %324 ], [ %232, %310 ], [ %232, %296 ], [ %232, %282 ], [ %232, %268 ], [ %232, %254 ], [ %232, %240 ], [ %232, %216 ], [ %208, %192 ], [ %184, %168 ], [ %160, %144 ], [ %136, %120 ], [ %112, %96 ], [ %88, %72 ], [ %64, %51 ], [ 0, %5 ]
  %351 = phi i8 [ %230, %338 ], [ %230, %324 ], [ %230, %310 ], [ %230, %296 ], [ %230, %282 ], [ %230, %268 ], [ %230, %254 ], [ %230, %240 ], [ %230, %216 ], [ %206, %192 ], [ %182, %168 ], [ %158, %144 ], [ %134, %120 ], [ %110, %96 ], [ %86, %72 ], [ %62, %51 ], [ 0, %5 ]
  %352 = phi i8 [ %228, %338 ], [ %228, %324 ], [ %228, %310 ], [ %228, %296 ], [ %228, %282 ], [ %228, %268 ], [ %228, %254 ], [ %228, %240 ], [ %228, %216 ], [ %204, %192 ], [ %180, %168 ], [ %156, %144 ], [ %132, %120 ], [ %108, %96 ], [ %84, %72 ], [ %60, %51 ], [ 0, %5 ]
  %353 = phi i8 [ %344, %338 ], [ %333, %324 ], [ %319, %310 ], [ %305, %296 ], [ %291, %282 ], [ %277, %268 ], [ %263, %254 ], [ %249, %240 ], [ %226, %216 ], [ %202, %192 ], [ %178, %168 ], [ %154, %144 ], [ %130, %120 ], [ %106, %96 ], [ %82, %72 ], [ %58, %51 ], [ 0, %5 ]
  %354 = phi i8 [ %342, %338 ], [ %331, %324 ], [ %317, %310 ], [ %303, %296 ], [ %289, %282 ], [ %275, %268 ], [ %261, %254 ], [ %247, %240 ], [ %224, %216 ], [ %200, %192 ], [ %176, %168 ], [ %152, %144 ], [ %128, %120 ], [ %104, %96 ], [ %80, %72 ], [ %56, %51 ], [ 0, %5 ]
  %355 = phi i64 [ %341, %338 ], [ %330, %324 ], [ %316, %310 ], [ %302, %296 ], [ %288, %282 ], [ %274, %268 ], [ %260, %254 ], [ %246, %240 ], [ %223, %216 ], [ %199, %192 ], [ %175, %168 ], [ %151, %144 ], [ %127, %120 ], [ %103, %96 ], [ %79, %72 ], [ %55, %51 ], [ 0, %5 ]
  %356 = phi i8 [ %346, %338 ], [ %335, %324 ], [ %321, %310 ], [ %307, %296 ], [ %293, %282 ], [ %279, %268 ], [ %265, %254 ], [ %251, %240 ], [ %236, %216 ], [ %212, %192 ], [ %188, %168 ], [ %164, %144 ], [ %140, %120 ], [ %116, %96 ], [ %92, %72 ], [ %68, %51 ], [ 0, %5 ]
  %357 = phi i8 [ %347, %338 ], [ %336, %324 ], [ %322, %310 ], [ %308, %296 ], [ %294, %282 ], [ %280, %268 ], [ %266, %254 ], [ %252, %240 ], [ %238, %216 ], [ %214, %192 ], [ %190, %168 ], [ %166, %144 ], [ %142, %120 ], [ %118, %96 ], [ %94, %72 ], [ %70, %51 ], [ 0, %5 ]
  store i8 %354, i8* %2, align 1
  %358 = getelementptr inbounds i8, i8* %2, i64 1
  store i8 %353, i8* %358, align 1
  %359 = getelementptr inbounds i8, i8* %2, i64 2
  store i8 %352, i8* %359, align 1
  %360 = getelementptr inbounds i8, i8* %2, i64 3
  store i8 %351, i8* %360, align 1
  %361 = getelementptr inbounds i8, i8* %2, i64 4
  store i8 %350, i8* %361, align 1
  %362 = getelementptr inbounds i8, i8* %2, i64 5
  store i8 %349, i8* %362, align 1
  %363 = getelementptr inbounds i8, i8* %2, i64 6
  store i8 %356, i8* %363, align 1
  %364 = getelementptr inbounds i8, i8* %2, i64 7
  store i8 %357, i8* %364, align 1
  %365 = trunc i64 %355 to i8
  %366 = getelementptr inbounds i8, i8* %2, i64 8
  store i8 %365, i8* %366, align 1
  %367 = lshr i64 %355, 8
  %368 = trunc i64 %367 to i8
  %369 = getelementptr inbounds i8, i8* %2, i64 9
  store i8 %368, i8* %369, align 1
  %370 = lshr i64 %355, 16
  %371 = trunc i64 %370 to i8
  %372 = getelementptr inbounds i8, i8* %2, i64 10
  store i8 %371, i8* %372, align 1
  %373 = lshr i64 %355, 24
  %374 = trunc i64 %373 to i8
  %375 = getelementptr inbounds i8, i8* %2, i64 11
  store i8 %374, i8* %375, align 1
  %376 = lshr i64 %355, 32
  %377 = trunc i64 %376 to i8
  %378 = getelementptr inbounds i8, i8* %2, i64 12
  store i8 %377, i8* %378, align 1
  %379 = lshr i64 %355, 40
  %380 = trunc i64 %379 to i8
  %381 = getelementptr inbounds i8, i8* %2, i64 13
  store i8 %380, i8* %381, align 1
  %382 = lshr i64 %355, 48
  %383 = trunc i64 %382 to i8
  %384 = getelementptr inbounds i8, i8* %2, i64 14
  store i8 %383, i8* %384, align 1
  %385 = lshr i64 %355, 56
  %386 = trunc i64 %385 to i8
  %387 = getelementptr inbounds i8, i8* %2, i64 15
  store i8 %386, i8* %387, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tE3MVnI7vec64_tEEEP6MemoryS8_R5StateT_T0_(%struct.Memory*, %struct.State* dereferenceable(3376), i8* nocapture readonly, i64)  {
  %5 = bitcast i8* %2 to double*
  %6 = load double, double* %5, align 1
  %7 = inttoptr i64 %3 to double*
  %8 = load double, double* %7
  %9 = fcmp uno double %6, %8
  br i1 %9, label %10, label %22

; <label>:10:                                     ; preds = %4
  %11 = fadd double %6, %8
  %12 = bitcast double %11 to i64
  %13 = and i64 %12, 9221120237041090560
  %14 = icmp eq i64 %13, 9218868437227405312
  %15 = and i64 %12, 2251799813685247
  %16 = icmp ne i64 %15, 0
  %17 = and i1 %14, %16
  br i1 %17, label %18, label %28

; <label>:18:                                     ; preds = %10
  %19 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 33, i32 0, i32 0
  %20 = load i64, i64* %19, align 8
  %21 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %1, i64 %20, %struct.Memory* %0) 
  br label %39

; <label>:22:                                     ; preds = %4
  %23 = fcmp ogt double %6, %8
  br i1 %23, label %28, label %24

; <label>:24:                                     ; preds = %22
  %25 = fcmp olt double %6, %8
  br i1 %25, label %28, label %26

; <label>:26:                                     ; preds = %24
  %27 = fcmp oeq double %6, %8
  br i1 %27, label %28, label %35

; <label>:28:                                     ; preds = %26, %24, %22, %10
  %29 = phi i8 [ 0, %22 ], [ 0, %24 ], [ 1, %26 ], [ 1, %10 ]
  %30 = phi i8 [ 0, %22 ], [ 0, %24 ], [ 0, %26 ], [ 1, %10 ]
  %31 = phi i8 [ 0, %22 ], [ 1, %24 ], [ 0, %26 ], [ 1, %10 ]
  %32 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  store i8 %29, i8* %32, align 1
  %33 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 %30, i8* %33, align 1
  %34 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  store i8 %31, i8* %34, align 1
  br label %35

; <label>:35:                                     ; preds = %28, %26
  %36 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 0, i8* %36, align 1
  %37 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 0, i8* %37, align 1
  %38 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 0, i8* %38, align 1
  br label %39

; <label>:39:                                     ; preds = %35, %18
  %40 = phi %struct.Memory* [ %21, %18 ], [ %0, %35 ]
  ret %struct.Memory* %40
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_(%struct.Memory*, %struct.State* dereferenceable(3376), i8* nocapture readonly, i8* nocapture readonly)  {
  %5 = bitcast i8* %2 to double*
  %6 = load double, double* %5, align 1
  %7 = bitcast i8* %3 to double*
  %8 = load double, double* %7, align 1
  %9 = fcmp uno double %6, %8
  br i1 %9, label %10, label %22

; <label>:10:                                     ; preds = %4
  %11 = fadd double %6, %8
  %12 = bitcast double %11 to i64
  %13 = and i64 %12, 9221120237041090560
  %14 = icmp eq i64 %13, 9218868437227405312
  %15 = and i64 %12, 2251799813685247
  %16 = icmp ne i64 %15, 0
  %17 = and i1 %14, %16
  br i1 %17, label %18, label %28

; <label>:18:                                     ; preds = %10
  %19 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 33, i32 0, i32 0
  %20 = load i64, i64* %19, align 8
  %21 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %1, i64 %20, %struct.Memory* %0) 
  br label %39

; <label>:22:                                     ; preds = %4
  %23 = fcmp ogt double %6, %8
  br i1 %23, label %28, label %24

; <label>:24:                                     ; preds = %22
  %25 = fcmp olt double %6, %8
  br i1 %25, label %28, label %26

; <label>:26:                                     ; preds = %24
  %27 = fcmp oeq double %6, %8
  br i1 %27, label %28, label %35

; <label>:28:                                     ; preds = %26, %24, %22, %10
  %29 = phi i8 [ 0, %22 ], [ 0, %24 ], [ 1, %26 ], [ 1, %10 ]
  %30 = phi i8 [ 0, %22 ], [ 0, %24 ], [ 0, %26 ], [ 1, %10 ]
  %31 = phi i8 [ 0, %22 ], [ 1, %24 ], [ 0, %26 ], [ 1, %10 ]
  %32 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  store i8 %29, i8* %32, align 1
  %33 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 %30, i8* %33, align 1
  %34 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  store i8 %31, i8* %34, align 1
  br label %35

; <label>:35:                                     ; preds = %28, %26
  %36 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 0, i8* %36, align 1
  %37 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 0, i8* %37, align 1
  %38 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 0, i8* %38, align 1
  br label %39

; <label>:39:                                     ; preds = %35, %18
  %40 = phi %struct.Memory* [ %21, %18 ], [ %0, %35 ]
  ret %struct.Memory* %40
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L6COMISSI2VnI8vec128_tE3MVnI7vec32_tEEEP6MemoryS8_R5StateT_T0_(%struct.Memory*, %struct.State* dereferenceable(3376), i8* nocapture readonly, i64)  {
  %5 = bitcast i8* %2 to <2 x float>*
  %6 = load <2 x float>, <2 x float>* %5, align 1
  %7 = extractelement <2 x float> %6, i32 0
  %8 = inttoptr i64 %3 to float*
  %9 = load float, float* %8
  %10 = fcmp uno float %7, %9
  br i1 %10, label %11, label %23

; <label>:11:                                     ; preds = %4
  %12 = fadd float %7, %9
  %13 = bitcast float %12 to i32
  %14 = and i32 %13, 2143289344
  %15 = icmp eq i32 %14, 2139095040
  %16 = and i32 %13, 4194303
  %17 = icmp ne i32 %16, 0
  %18 = and i1 %15, %17
  br i1 %18, label %19, label %29

; <label>:19:                                     ; preds = %11
  %20 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 33, i32 0, i32 0
  %21 = load i64, i64* %20, align 8
  %22 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %1, i64 %21, %struct.Memory* %0) 
  br label %40

; <label>:23:                                     ; preds = %4
  %24 = fcmp ogt float %7, %9
  br i1 %24, label %29, label %25

; <label>:25:                                     ; preds = %23
  %26 = fcmp olt float %7, %9
  br i1 %26, label %29, label %27

; <label>:27:                                     ; preds = %25
  %28 = fcmp oeq float %7, %9
  br i1 %28, label %29, label %36

; <label>:29:                                     ; preds = %27, %25, %23, %11
  %30 = phi i8 [ 0, %23 ], [ 0, %25 ], [ 1, %27 ], [ 1, %11 ]
  %31 = phi i8 [ 0, %23 ], [ 0, %25 ], [ 0, %27 ], [ 1, %11 ]
  %32 = phi i8 [ 0, %23 ], [ 1, %25 ], [ 0, %27 ], [ 1, %11 ]
  %33 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  store i8 %30, i8* %33, align 1
  %34 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 %31, i8* %34, align 1
  %35 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  store i8 %32, i8* %35, align 1
  br label %36

; <label>:36:                                     ; preds = %29, %27
  %37 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 0, i8* %37, align 1
  %38 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 0, i8* %38, align 1
  %39 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 0, i8* %39, align 1
  br label %40

; <label>:40:                                     ; preds = %36, %19
  %41 = phi %struct.Memory* [ %22, %19 ], [ %0, %36 ]
  ret %struct.Memory* %41
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L6COMISSI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_(%struct.Memory*, %struct.State* dereferenceable(3376), i8* nocapture readonly, i8* nocapture readonly)  {
  %5 = bitcast i8* %2 to <2 x float>*
  %6 = load <2 x float>, <2 x float>* %5, align 1
  %7 = extractelement <2 x float> %6, i32 0
  %8 = bitcast i8* %3 to <2 x float>*
  %9 = load <2 x float>, <2 x float>* %8, align 1
  %10 = extractelement <2 x float> %9, i32 0
  %11 = fcmp uno float %7, %10
  br i1 %11, label %12, label %24

; <label>:12:                                     ; preds = %4
  %13 = fadd float %7, %10
  %14 = bitcast float %13 to i32
  %15 = and i32 %14, 2143289344
  %16 = icmp eq i32 %15, 2139095040
  %17 = and i32 %14, 4194303
  %18 = icmp ne i32 %17, 0
  %19 = and i1 %16, %18
  br i1 %19, label %20, label %30

; <label>:20:                                     ; preds = %12
  %21 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 33, i32 0, i32 0
  %22 = load i64, i64* %21, align 8
  %23 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %1, i64 %22, %struct.Memory* %0) 
  br label %41

; <label>:24:                                     ; preds = %4
  %25 = fcmp ogt float %7, %10
  br i1 %25, label %30, label %26

; <label>:26:                                     ; preds = %24
  %27 = fcmp olt float %7, %10
  br i1 %27, label %30, label %28

; <label>:28:                                     ; preds = %26
  %29 = fcmp oeq float %7, %10
  br i1 %29, label %30, label %37

; <label>:30:                                     ; preds = %28, %26, %24, %12
  %31 = phi i8 [ 0, %24 ], [ 0, %26 ], [ 1, %28 ], [ 1, %12 ]
  %32 = phi i8 [ 0, %24 ], [ 0, %26 ], [ 0, %28 ], [ 1, %12 ]
  %33 = phi i8 [ 0, %24 ], [ 1, %26 ], [ 0, %28 ], [ 1, %12 ]
  %34 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  store i8 %31, i8* %34, align 1
  %35 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 %32, i8* %35, align 1
  %36 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  store i8 %33, i8* %36, align 1
  br label %37

; <label>:37:                                     ; preds = %30, %28
  %38 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 0, i8* %38, align 1
  %39 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 0, i8* %39, align 1
  %40 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 0, i8* %40, align 1
  br label %41

; <label>:41:                                     ; preds = %37, %20
  %42 = phi %struct.Memory* [ %23, %20 ], [ %0, %37 ]
  ret %struct.Memory* %42
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L6SHUFPSI3VnWI8vec128_tE2VnIS2_ES5_EEP6MemoryS7_R5StateT_T0_T1_2InIhE(%struct.Memory* readnone returned, %struct.State* nocapture readnone dereferenceable(3376), i8* nocapture, i8* nocapture readonly, i8* nocapture readonly, i64)  {
  %7 = alloca { i64, i64 }, align 8
  %8 = bitcast { i64, i64 }* %7 to %struct.int32v4_t*
  %9 = bitcast i8* %3 to i64*
  %10 = load i64, i64* %9, align 1
  %11 = getelementptr inbounds i8, i8* %3, i64 8
  %12 = bitcast i8* %11 to i64*
  %13 = load i64, i64* %12, align 1
  %14 = bitcast i8* %4 to i64*
  %15 = load i64, i64* %14, align 1
  %16 = getelementptr inbounds i8, i8* %4, i64 8
  %17 = bitcast i8* %16 to i64*
  %18 = load i64, i64* %17, align 1
  %19 = bitcast { i64, i64 }* %7 to i8*
  %20 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %7, i64 0, i32 0
  %21 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %7, i64 0, i32 1
  %22 = and i64 %5, 3
  call void @llvm.lifetime.start(i64 16, i8* nonnull %19) 
  store i64 %10, i64* %20, align 8
  store i64 %13, i64* %21, align 8
  %23 = getelementptr inbounds %struct.int32v4_t, %struct.int32v4_t* %8, i64 0, i32 0, i64 %22
  %24 = load i32, i32* %23, align 4
  call void @llvm.lifetime.end(i64 16, i8* nonnull %19) 
  %25 = lshr i64 %5, 2
  %26 = and i64 %25, 3
  call void @llvm.lifetime.start(i64 16, i8* nonnull %19) 
  store i64 %10, i64* %20, align 8
  store i64 %13, i64* %21, align 8
  %27 = getelementptr inbounds %struct.int32v4_t, %struct.int32v4_t* %8, i64 0, i32 0, i64 %26
  %28 = load i32, i32* %27, align 4
  call void @llvm.lifetime.end(i64 16, i8* nonnull %19) 
  %29 = lshr i64 %5, 4
  %30 = and i64 %29, 3
  call void @llvm.lifetime.start(i64 16, i8* nonnull %19) 
  store i64 %15, i64* %20, align 8
  store i64 %18, i64* %21, align 8
  %31 = getelementptr inbounds %struct.int32v4_t, %struct.int32v4_t* %8, i64 0, i32 0, i64 %30
  %32 = load i32, i32* %31, align 4
  call void @llvm.lifetime.end(i64 16, i8* nonnull %19) 
  %33 = lshr i64 %5, 6
  %34 = and i64 %33, 3
  call void @llvm.lifetime.start(i64 16, i8* nonnull %19) 
  store i64 %15, i64* %20, align 8
  store i64 %18, i64* %21, align 8
  %35 = getelementptr inbounds %struct.int32v4_t, %struct.int32v4_t* %8, i64 0, i32 0, i64 %34
  %36 = load i32, i32* %35, align 4
  call void @llvm.lifetime.end(i64 16, i8* nonnull %19) 
  %37 = bitcast i8* %2 to i32*
  store i32 %24, i32* %37, align 1
  %38 = getelementptr inbounds i8, i8* %2, i64 4
  %39 = bitcast i8* %38 to i32*
  store i32 %28, i32* %39, align 1
  %40 = getelementptr inbounds i8, i8* %2, i64 8
  %41 = bitcast i8* %40 to i32*
  store i32 %32, i32* %41, align 1
  %42 = getelementptr inbounds i8, i8* %2, i64 12
  %43 = bitcast i8* %42 to i32*
  store i32 %36, i32* %43, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L6PSHUFDI3VnWI8vec128_tE3MVnIS2_EEEP6MemoryS7_R5StateT_T0_2InIhE(%struct.Memory* returned, %struct.State* nocapture readnone dereferenceable(3376), i8* nocapture, i64, i64)  {
  %6 = alloca %struct.uint128v1_t, align 8
  %7 = bitcast %struct.uint128v1_t* %6 to i8*
  call void @llvm.lifetime.start(i64 16, i8* nonnull %7) 
  %8 = inttoptr i64 %3 to i64*
  %9 = load i64, i64* %8
  %10 = add i64 %3, 8
  %11 = inttoptr i64 %10 to i64*
  %12 = load i64, i64* %11
  %13 = bitcast %struct.uint128v1_t* %6 to { i64, i64 }*
  %14 = bitcast %struct.uint128v1_t* %6 to i64*
  store i64 %9, i64* %14, align 8
  %15 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %13, i64 0, i32 1
  store i64 %12, i64* %15, align 8
  %16 = getelementptr inbounds %struct.uint128v1_t, %struct.uint128v1_t* %6, i64 0, i32 0, i64 0
  %17 = load i128, i128* %16, align 8
  %18 = shl i64 %4, 5
  %19 = and i64 %18, 96
  %20 = lshr i64 %4, 2
  %21 = and i64 %20, 63
  %22 = zext i64 %19 to i128
  %23 = lshr i128 %17, %22
  %24 = trunc i128 %23 to i32
  %25 = shl nuw nsw i64 %21, 5
  %26 = and i64 %25, 96
  %27 = zext i64 %26 to i128
  %28 = lshr i128 %17, %27
  %29 = trunc i128 %28 to i32
  %30 = shl nuw nsw i64 %21, 3
  %31 = and i64 %30, 96
  %32 = zext i64 %31 to i128
  %33 = lshr i128 %17, %32
  %34 = trunc i128 %33 to i32
  %35 = shl nuw nsw i64 %20, 1
  %36 = and i64 %35, 96
  %37 = zext i64 %36 to i128
  %38 = lshr i128 %17, %37
  %39 = trunc i128 %38 to i32
  %40 = bitcast i8* %2 to i32*
  store i32 %24, i32* %40, align 1
  %41 = getelementptr inbounds i8, i8* %2, i64 4
  %42 = bitcast i8* %41 to i32*
  store i32 %29, i32* %42, align 1
  %43 = getelementptr inbounds i8, i8* %2, i64 8
  %44 = bitcast i8* %43 to i32*
  store i32 %34, i32* %44, align 1
  %45 = getelementptr inbounds i8, i8* %2, i64 12
  %46 = bitcast i8* %45 to i32*
  store i32 %39, i32* %46, align 1
  call void @llvm.lifetime.end(i64 16, i8* nonnull %7) 
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L6PSHUFDI3VnWI8vec128_tE2VnIS2_EEEP6MemoryS7_R5StateT_T0_2InIhE(%struct.Memory* readnone returned, %struct.State* nocapture readnone dereferenceable(3376), i8* nocapture, i8* nocapture readonly, i64)  {
  %6 = bitcast i8* %3 to i128*
  %7 = load i128, i128* %6, align 1
  %8 = shl i64 %4, 5
  %9 = and i64 %8, 96
  %10 = lshr i64 %4, 2
  %11 = and i64 %10, 63
  %12 = zext i64 %9 to i128
  %13 = lshr i128 %7, %12
  %14 = trunc i128 %13 to i32
  %15 = shl nuw nsw i64 %11, 5
  %16 = and i64 %15, 96
  %17 = zext i64 %16 to i128
  %18 = lshr i128 %7, %17
  %19 = trunc i128 %18 to i32
  %20 = shl nuw nsw i64 %11, 3
  %21 = and i64 %20, 96
  %22 = zext i64 %21 to i128
  %23 = lshr i128 %7, %22
  %24 = trunc i128 %23 to i32
  %25 = shl nuw nsw i64 %10, 1
  %26 = and i64 %25, 96
  %27 = zext i64 %26 to i128
  %28 = lshr i128 %7, %27
  %29 = trunc i128 %28 to i32
  %30 = bitcast i8* %2 to i32*
  store i32 %14, i32* %30, align 1
  %31 = getelementptr inbounds i8, i8* %2, i64 4
  %32 = bitcast i8* %31 to i32*
  store i32 %19, i32* %32, align 1
  %33 = getelementptr inbounds i8, i8* %2, i64 8
  %34 = bitcast i8* %33 to i32*
  store i32 %24, i32* %34, align 1
  %35 = getelementptr inbounds i8, i8* %2, i64 12
  %36 = bitcast i8* %35 to i32*
  store i32 %29, i32* %36, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L7PSHUFLWI3VnWI8vec128_tE3MVnIS2_EEEP6MemoryS7_R5StateT_T0_2InIhE(%struct.Memory* returned, %struct.State* nocapture readnone dereferenceable(3376), i8* nocapture, i64, i64)  {
  %6 = alloca <2 x i64>, align 16
  %7 = bitcast <2 x i64>* %6 to { i64, i64 }*
  %8 = alloca { i64, i64 }, align 8
  %9 = alloca %struct.uint128v1_t, align 8
  %10 = alloca <2 x i64>, align 16
  %11 = bitcast <2 x i64>* %10 to { i64, i64 }*
  %12 = bitcast <2 x i64>* %10 to %struct.uint16v8_t*
  %13 = bitcast %struct.uint128v1_t* %9 to i8*
  call void @llvm.lifetime.start(i64 16, i8* nonnull %13) 
  %14 = inttoptr i64 %3 to i64*
  %15 = load i64, i64* %14
  %16 = add i64 %3, 8
  %17 = inttoptr i64 %16 to i64*
  %18 = load i64, i64* %17
  %19 = bitcast %struct.uint128v1_t* %9 to { i64, i64 }*
  %20 = bitcast %struct.uint128v1_t* %9 to i64*
  store i64 %15, i64* %20, align 8
  %21 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %19, i64 0, i32 1
  store i64 %18, i64* %21, align 8
  %22 = bitcast <2 x i64>* %10 to i8*
  call void @llvm.lifetime.start(i64 16, i8* nonnull %22) 
  %23 = inttoptr i64 %3 to i16*
  %24 = load i16, i16* %23
  %25 = add i64 %3, 2
  %26 = inttoptr i64 %25 to i16*
  %27 = load i16, i16* %26
  %28 = add i64 %3, 4
  %29 = inttoptr i64 %28 to i16*
  %30 = load i16, i16* %29
  %31 = add i64 %3, 6
  %32 = inttoptr i64 %31 to i16*
  %33 = load i16, i16* %32
  %34 = inttoptr i64 %16 to i16*
  %35 = load i16, i16* %34
  %36 = add i64 %3, 10
  %37 = inttoptr i64 %36 to i16*
  %38 = load i16, i16* %37
  %39 = add i64 %3, 12
  %40 = inttoptr i64 %39 to i16*
  %41 = load i16, i16* %40
  %42 = add i64 %3, 14
  %43 = inttoptr i64 %42 to i16*
  %44 = load i16, i16* %43
  %45 = insertelement <2 x i16> undef, i16 %33, i32 0
  %46 = insertelement <2 x i16> %45, i16 %44, i32 1
  %47 = zext <2 x i16> %46 to <2 x i64>
  %48 = shl nuw <2 x i64> %47, <i64 48, i64 48>
  %49 = insertelement <2 x i16> undef, i16 %30, i32 0
  %50 = insertelement <2 x i16> %49, i16 %41, i32 1
  %51 = zext <2 x i16> %50 to <2 x i64>
  %52 = shl nuw nsw <2 x i64> %51, <i64 32, i64 32>
  %53 = insertelement <2 x i16> undef, i16 %27, i32 0
  %54 = insertelement <2 x i16> %53, i16 %38, i32 1
  %55 = zext <2 x i16> %54 to <2 x i64>
  %56 = shl nuw nsw <2 x i64> %55, <i64 16, i64 16>
  %57 = insertelement <2 x i16> undef, i16 %24, i32 0
  %58 = insertelement <2 x i16> %57, i16 %35, i32 1
  %59 = zext <2 x i16> %58 to <2 x i64>
  %60 = or <2 x i64> %56, %59
  %61 = or <2 x i64> %60, %52
  %62 = or <2 x i64> %61, %48
  store <2 x i64> %62, <2 x i64>* %10, align 16
  %63 = getelementptr inbounds %struct.uint128v1_t, %struct.uint128v1_t* %9, i64 0, i32 0, i64 0
  %64 = load i128, i128* %63, align 8
  %65 = bitcast <2 x i64>* %6 to i8*
  %66 = getelementptr inbounds <2 x i64>, <2 x i64>* %6, i64 0, i64 0
  %67 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %7, i64 0, i32 1
  %68 = bitcast <2 x i64>* %6 to [8 x i16]*
  %69 = bitcast { i64, i64 }* %8 to i8*
  %70 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %8, i64 0, i32 0
  %71 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %8, i64 0, i32 1
  %72 = bitcast { i64, i64 }* %8 to [8 x i16]*
  %73 = shl i64 %4, 4
  %74 = and i64 %73, 48
  %75 = lshr i64 %4, 2
  %76 = and i64 %75, 63
  %77 = zext i64 %74 to i128
  %78 = lshr i128 %64, %77
  %79 = trunc i128 %78 to i16
  call void @llvm.lifetime.start(i64 16, i8* nonnull %65)
  store <2 x i64> zeroinitializer, <2 x i64>* %6, align 16
  %80 = bitcast <2 x i64>* %6 to i16*
  store i16 %79, i16* %80, align 16
  %81 = load i64, i64* %66, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %65)
  %82 = shl nuw nsw i64 %76, 4
  %83 = and i64 %82, 48
  %84 = zext i64 %83 to i128
  %85 = lshr i128 %64, %84
  %86 = trunc i128 %85 to i16
  call void @llvm.lifetime.start(i64 16, i8* nonnull %65)
  store i64 %81, i64* %66, align 16
  store i64 0, i64* %67, align 8
  %87 = getelementptr inbounds [8 x i16], [8 x i16]* %68, i64 0, i64 1
  store i16 %86, i16* %87, align 2
  %88 = load i64, i64* %66, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %65)
  %89 = shl nuw nsw i64 %76, 2
  %90 = and i64 %89, 48
  %91 = zext i64 %90 to i128
  %92 = lshr i128 %64, %91
  %93 = trunc i128 %92 to i16
  call void @llvm.lifetime.start(i64 16, i8* nonnull %65)
  store i64 %88, i64* %66, align 16
  store i64 0, i64* %67, align 8
  %94 = getelementptr inbounds [8 x i16], [8 x i16]* %68, i64 0, i64 2
  store i16 %93, i16* %94, align 4
  %95 = load i64, i64* %66, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %65)
  %96 = and i64 %75, 48
  %97 = zext i64 %96 to i128
  %98 = lshr i128 %64, %97
  %99 = trunc i128 %98 to i16
  call void @llvm.lifetime.start(i64 16, i8* nonnull %65)
  store i64 %95, i64* %66, align 16
  store i64 0, i64* %67, align 8
  %100 = getelementptr inbounds [8 x i16], [8 x i16]* %68, i64 0, i64 3
  store i16 %99, i16* %100, align 2
  %101 = load i64, i64* %66, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %65)
  %102 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %11, i64 0, i32 1
  %103 = bitcast i64* %102 to i16*
  %104 = load i16, i16* %103, align 8
  call void @llvm.lifetime.start(i64 16, i8* nonnull %69)
  store i64 %101, i64* %70, align 8
  store i64 0, i64* %71, align 8
  %105 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %8, i64 0, i32 1
  %106 = bitcast i64* %105 to i16*
  store i16 %104, i16* %106, align 8
  %107 = load i64, i64* %71, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %69)
  %108 = getelementptr inbounds %struct.uint16v8_t, %struct.uint16v8_t* %12, i64 0, i32 0, i64 5
  %109 = load i16, i16* %108, align 2
  call void @llvm.lifetime.start(i64 16, i8* nonnull %69)
  store i64 %101, i64* %70, align 8
  store i64 %107, i64* %71, align 8
  %110 = getelementptr inbounds [8 x i16], [8 x i16]* %72, i64 0, i64 5
  store i16 %109, i16* %110, align 2
  %111 = load i64, i64* %71, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %69)
  %112 = getelementptr inbounds %struct.uint16v8_t, %struct.uint16v8_t* %12, i64 0, i32 0, i64 6
  %113 = load i16, i16* %112, align 4
  call void @llvm.lifetime.start(i64 16, i8* nonnull %69)
  store i64 %101, i64* %70, align 8
  store i64 %111, i64* %71, align 8
  %114 = getelementptr inbounds [8 x i16], [8 x i16]* %72, i64 0, i64 6
  store i16 %113, i16* %114, align 4
  %115 = load i64, i64* %71, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %69)
  %116 = getelementptr inbounds %struct.uint16v8_t, %struct.uint16v8_t* %12, i64 0, i32 0, i64 7
  %117 = load i16, i16* %116, align 2
  call void @llvm.lifetime.start(i64 16, i8* nonnull %69)
  store i64 %101, i64* %70, align 8
  store i64 %115, i64* %71, align 8
  %118 = getelementptr inbounds [8 x i16], [8 x i16]* %72, i64 0, i64 7
  store i16 %117, i16* %118, align 2
  %119 = load i64, i64* %71, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %69)
  %120 = trunc i64 %101 to i16
  %121 = lshr i64 %101, 16
  %122 = trunc i64 %121 to i16
  %123 = lshr i64 %101, 32
  %124 = trunc i64 %123 to i16
  %125 = lshr i64 %101, 48
  %126 = trunc i64 %125 to i16
  %127 = bitcast i8* %2 to i16*
  store i16 %120, i16* %127, align 1
  %128 = getelementptr inbounds i8, i8* %2, i64 2
  %129 = bitcast i8* %128 to i16*
  store i16 %122, i16* %129, align 1
  %130 = getelementptr inbounds i8, i8* %2, i64 4
  %131 = bitcast i8* %130 to i16*
  store i16 %124, i16* %131, align 1
  %132 = getelementptr inbounds i8, i8* %2, i64 6
  %133 = bitcast i8* %132 to i16*
  store i16 %126, i16* %133, align 1
  %134 = trunc i64 %119 to i16
  %135 = getelementptr inbounds i8, i8* %2, i64 8
  %136 = bitcast i8* %135 to i16*
  store i16 %134, i16* %136, align 1
  %137 = lshr i64 %119, 16
  %138 = trunc i64 %137 to i16
  %139 = getelementptr inbounds i8, i8* %2, i64 10
  %140 = bitcast i8* %139 to i16*
  store i16 %138, i16* %140, align 1
  %141 = lshr i64 %119, 32
  %142 = trunc i64 %141 to i16
  %143 = getelementptr inbounds i8, i8* %2, i64 12
  %144 = bitcast i8* %143 to i16*
  store i16 %142, i16* %144, align 1
  %145 = lshr i64 %119, 48
  %146 = trunc i64 %145 to i16
  %147 = getelementptr inbounds i8, i8* %2, i64 14
  %148 = bitcast i8* %147 to i16*
  store i16 %146, i16* %148, align 1
  call void @llvm.lifetime.end(i64 16, i8* nonnull %22) 
  call void @llvm.lifetime.end(i64 16, i8* nonnull %13) 
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L7PSHUFLWI3VnWI8vec128_tE2VnIS2_EEEP6MemoryS7_R5StateT_T0_2InIhE(%struct.Memory* readnone returned, %struct.State* nocapture readnone dereferenceable(3376), i8* nocapture, i8* nocapture readonly, i64)  {
  %6 = alloca <2 x i64>, align 16
  %7 = bitcast <2 x i64>* %6 to { i64, i64 }*
  %8 = alloca { i64, i64 }, align 8
  %9 = alloca %struct.uint128v1_t, align 8
  %10 = alloca { i64, i64 }, align 8
  %11 = bitcast { i64, i64 }* %10 to %struct.uint16v8_t*
  %12 = bitcast %struct.uint128v1_t* %9 to i8*
  call void @llvm.lifetime.start(i64 16, i8* nonnull %12) 
  %13 = bitcast i8* %3 to i64*
  %14 = load i64, i64* %13, align 1
  %15 = getelementptr inbounds i8, i8* %3, i64 8
  %16 = bitcast i8* %15 to i64*
  %17 = load i64, i64* %16, align 1
  %18 = bitcast %struct.uint128v1_t* %9 to { i64, i64 }*
  %19 = bitcast %struct.uint128v1_t* %9 to i64*
  store i64 %14, i64* %19, align 8
  %20 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %18, i64 0, i32 1
  store i64 %17, i64* %20, align 8
  %21 = bitcast { i64, i64 }* %10 to i8*
  call void @llvm.lifetime.start(i64 16, i8* nonnull %21) 
  %22 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %10, i64 0, i32 0
  store i64 %14, i64* %22, align 8
  %23 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %10, i64 0, i32 1
  store i64 %17, i64* %23, align 8
  %24 = getelementptr inbounds %struct.uint128v1_t, %struct.uint128v1_t* %9, i64 0, i32 0, i64 0
  %25 = load i128, i128* %24, align 8
  %26 = bitcast <2 x i64>* %6 to i8*
  %27 = getelementptr inbounds <2 x i64>, <2 x i64>* %6, i64 0, i64 0
  %28 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %7, i64 0, i32 1
  %29 = bitcast <2 x i64>* %6 to [8 x i16]*
  %30 = bitcast { i64, i64 }* %8 to i8*
  %31 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %8, i64 0, i32 0
  %32 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %8, i64 0, i32 1
  %33 = bitcast { i64, i64 }* %8 to [8 x i16]*
  %34 = shl i64 %4, 4
  %35 = and i64 %34, 48
  %36 = lshr i64 %4, 2
  %37 = and i64 %36, 63
  %38 = zext i64 %35 to i128
  %39 = lshr i128 %25, %38
  %40 = trunc i128 %39 to i16
  call void @llvm.lifetime.start(i64 16, i8* nonnull %26)
  store <2 x i64> zeroinitializer, <2 x i64>* %6, align 16
  %41 = bitcast <2 x i64>* %6 to i16*
  store i16 %40, i16* %41, align 16
  %42 = load i64, i64* %27, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %26)
  %43 = shl nuw nsw i64 %37, 4
  %44 = and i64 %43, 48
  %45 = zext i64 %44 to i128
  %46 = lshr i128 %25, %45
  %47 = trunc i128 %46 to i16
  call void @llvm.lifetime.start(i64 16, i8* nonnull %26)
  store i64 %42, i64* %27, align 16
  store i64 0, i64* %28, align 8
  %48 = getelementptr inbounds [8 x i16], [8 x i16]* %29, i64 0, i64 1
  store i16 %47, i16* %48, align 2
  %49 = load i64, i64* %27, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %26)
  %50 = shl nuw nsw i64 %37, 2
  %51 = and i64 %50, 48
  %52 = zext i64 %51 to i128
  %53 = lshr i128 %25, %52
  %54 = trunc i128 %53 to i16
  call void @llvm.lifetime.start(i64 16, i8* nonnull %26)
  store i64 %49, i64* %27, align 16
  store i64 0, i64* %28, align 8
  %55 = getelementptr inbounds [8 x i16], [8 x i16]* %29, i64 0, i64 2
  store i16 %54, i16* %55, align 4
  %56 = load i64, i64* %27, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %26)
  %57 = and i64 %36, 48
  %58 = zext i64 %57 to i128
  %59 = lshr i128 %25, %58
  %60 = trunc i128 %59 to i16
  call void @llvm.lifetime.start(i64 16, i8* nonnull %26)
  store i64 %56, i64* %27, align 16
  store i64 0, i64* %28, align 8
  %61 = getelementptr inbounds [8 x i16], [8 x i16]* %29, i64 0, i64 3
  store i16 %60, i16* %61, align 2
  %62 = load i64, i64* %27, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %26)
  %63 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %10, i64 0, i32 1
  %64 = bitcast i64* %63 to i16*
  %65 = load i16, i16* %64, align 8
  call void @llvm.lifetime.start(i64 16, i8* nonnull %30)
  store i64 %62, i64* %31, align 8
  store i64 0, i64* %32, align 8
  %66 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %8, i64 0, i32 1
  %67 = bitcast i64* %66 to i16*
  store i16 %65, i16* %67, align 8
  %68 = load i64, i64* %32, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %30)
  %69 = getelementptr inbounds %struct.uint16v8_t, %struct.uint16v8_t* %11, i64 0, i32 0, i64 5
  %70 = load i16, i16* %69, align 2
  call void @llvm.lifetime.start(i64 16, i8* nonnull %30)
  store i64 %62, i64* %31, align 8
  store i64 %68, i64* %32, align 8
  %71 = getelementptr inbounds [8 x i16], [8 x i16]* %33, i64 0, i64 5
  store i16 %70, i16* %71, align 2
  %72 = load i64, i64* %32, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %30)
  %73 = getelementptr inbounds %struct.uint16v8_t, %struct.uint16v8_t* %11, i64 0, i32 0, i64 6
  %74 = load i16, i16* %73, align 4
  call void @llvm.lifetime.start(i64 16, i8* nonnull %30)
  store i64 %62, i64* %31, align 8
  store i64 %72, i64* %32, align 8
  %75 = getelementptr inbounds [8 x i16], [8 x i16]* %33, i64 0, i64 6
  store i16 %74, i16* %75, align 4
  %76 = load i64, i64* %32, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %30)
  %77 = getelementptr inbounds %struct.uint16v8_t, %struct.uint16v8_t* %11, i64 0, i32 0, i64 7
  %78 = load i16, i16* %77, align 2
  call void @llvm.lifetime.start(i64 16, i8* nonnull %30)
  store i64 %62, i64* %31, align 8
  store i64 %76, i64* %32, align 8
  %79 = getelementptr inbounds [8 x i16], [8 x i16]* %33, i64 0, i64 7
  store i16 %78, i16* %79, align 2
  %80 = load i64, i64* %32, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %30)
  %81 = trunc i64 %62 to i16
  %82 = lshr i64 %62, 16
  %83 = trunc i64 %82 to i16
  %84 = lshr i64 %62, 32
  %85 = trunc i64 %84 to i16
  %86 = lshr i64 %62, 48
  %87 = trunc i64 %86 to i16
  %88 = bitcast i8* %2 to i16*
  store i16 %81, i16* %88, align 1
  %89 = getelementptr inbounds i8, i8* %2, i64 2
  %90 = bitcast i8* %89 to i16*
  store i16 %83, i16* %90, align 1
  %91 = getelementptr inbounds i8, i8* %2, i64 4
  %92 = bitcast i8* %91 to i16*
  store i16 %85, i16* %92, align 1
  %93 = getelementptr inbounds i8, i8* %2, i64 6
  %94 = bitcast i8* %93 to i16*
  store i16 %87, i16* %94, align 1
  %95 = trunc i64 %80 to i16
  %96 = getelementptr inbounds i8, i8* %2, i64 8
  %97 = bitcast i8* %96 to i16*
  store i16 %95, i16* %97, align 1
  %98 = lshr i64 %80, 16
  %99 = trunc i64 %98 to i16
  %100 = getelementptr inbounds i8, i8* %2, i64 10
  %101 = bitcast i8* %100 to i16*
  store i16 %99, i16* %101, align 1
  %102 = lshr i64 %80, 32
  %103 = trunc i64 %102 to i16
  %104 = getelementptr inbounds i8, i8* %2, i64 12
  %105 = bitcast i8* %104 to i16*
  store i16 %103, i16* %105, align 1
  %106 = lshr i64 %80, 48
  %107 = trunc i64 %106 to i16
  %108 = getelementptr inbounds i8, i8* %2, i64 14
  %109 = bitcast i8* %108 to i16*
  store i16 %107, i16* %109, align 1
  call void @llvm.lifetime.end(i64 16, i8* nonnull %21) 
  call void @llvm.lifetime.end(i64 16, i8* nonnull %12) 
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L7PSHUFHWI3VnWI8vec128_tE2VnIS2_EEEP6MemoryS7_R5StateT_T0_2InIhE(%struct.Memory* readnone returned, %struct.State* nocapture readnone dereferenceable(3376), i8* nocapture, i8* nocapture readonly, i64)  {
  %6 = alloca <2 x i64>, align 16
  %7 = bitcast <2 x i64>* %6 to %struct.uint16v8_t*
  %8 = bitcast i8* %3 to <2 x i64>*
  %9 = load <2 x i64>, <2 x i64>* %8, align 1
  %10 = bitcast <2 x i64>* %6 to i8*
  call void @llvm.lifetime.start(i64 16, i8* nonnull %10) 
  store <2 x i64> %9, <2 x i64>* %6, align 16
  %11 = and i64 %4, 3
  %12 = or i64 %11, 4
  %13 = getelementptr inbounds %struct.uint16v8_t, %struct.uint16v8_t* %7, i64 0, i32 0, i64 %12
  %14 = load i16, i16* %13, align 2
  %15 = lshr i64 %4, 2
  %16 = and i64 %15, 3
  %17 = or i64 %16, 4
  %18 = getelementptr inbounds %struct.uint16v8_t, %struct.uint16v8_t* %7, i64 0, i32 0, i64 %17
  %19 = load i16, i16* %18, align 2
  %20 = lshr i64 %4, 4
  %21 = and i64 %20, 3
  %22 = or i64 %21, 4
  %23 = getelementptr inbounds %struct.uint16v8_t, %struct.uint16v8_t* %7, i64 0, i32 0, i64 %22
  %24 = load i16, i16* %23, align 2
  %25 = lshr i64 %4, 6
  %26 = and i64 %25, 3
  %27 = or i64 %26, 4
  %28 = getelementptr inbounds %struct.uint16v8_t, %struct.uint16v8_t* %7, i64 0, i32 0, i64 %27
  %29 = load i16, i16* %28, align 2
  %30 = extractelement <2 x i64> %9, i32 0
  %31 = trunc i64 %30 to i16
  %32 = bitcast i8* %2 to i16*
  store i16 %31, i16* %32, align 1
  %33 = lshr i64 %30, 16
  %34 = trunc i64 %33 to i16
  %35 = getelementptr inbounds i8, i8* %2, i64 2
  %36 = bitcast i8* %35 to i16*
  store i16 %34, i16* %36, align 1
  %37 = lshr i64 %30, 32
  %38 = trunc i64 %37 to i16
  %39 = getelementptr inbounds i8, i8* %2, i64 4
  %40 = bitcast i8* %39 to i16*
  store i16 %38, i16* %40, align 1
  %41 = lshr i64 %30, 48
  %42 = trunc i64 %41 to i16
  %43 = getelementptr inbounds i8, i8* %2, i64 6
  %44 = bitcast i8* %43 to i16*
  store i16 %42, i16* %44, align 1
  %45 = getelementptr inbounds i8, i8* %2, i64 8
  %46 = bitcast i8* %45 to i16*
  store i16 %14, i16* %46, align 1
  %47 = getelementptr inbounds i8, i8* %2, i64 10
  %48 = bitcast i8* %47 to i16*
  store i16 %19, i16* %48, align 1
  %49 = getelementptr inbounds i8, i8* %2, i64 12
  %50 = bitcast i8* %49 to i16*
  store i16 %24, i16* %50, align 1
  %51 = getelementptr inbounds i8, i8* %2, i64 14
  %52 = bitcast i8* %51 to i16*
  store i16 %29, i16* %52, align 1
  call void @llvm.lifetime.end(i64 16, i8* nonnull %10) 
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L7PCMPGTBI4RVnWI7vec64_tE3RVnIS2_ES5_EEP6MemoryS7_R5StateT_T0_T1_(%struct.Memory* readnone returned, %struct.State* nocapture readnone dereferenceable(3376), i64* nocapture, i64, i64)  {
  %6 = alloca i64, align 8
  %7 = alloca i64, align 8
  %8 = bitcast i64* %7 to %struct.uint8v8_t*
  %9 = alloca i64, align 8
  %10 = bitcast i64* %9 to %struct.uint8v8_t*
  %11 = bitcast i64* %7 to i8*
  call void @llvm.lifetime.start(i64 8, i8* nonnull %11) 
  store i64 %3, i64* %7, align 8
  %12 = bitcast i64* %9 to i8*
  call void @llvm.lifetime.start(i64 8, i8* nonnull %12) 
  store i64 %4, i64* %9, align 8
  %13 = bitcast i64* %6 to i8*
  %14 = bitcast i64* %6 to [8 x i8]*
  %15 = trunc i64 %3 to i8
  %16 = trunc i64 %4 to i8
  %17 = icmp sgt i8 %15, %16
  %18 = sext i1 %17 to i8
  call void @llvm.lifetime.start(i64 8, i8* nonnull %13)
  store i64 0, i64* %6, align 8
  %19 = bitcast i64* %6 to i8*
  store i8 %18, i8* %19, align 8
  %20 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %13)
  %21 = lshr i64 %3, 8
  %22 = trunc i64 %21 to i8
  %23 = lshr i64 %4, 8
  %24 = trunc i64 %23 to i8
  %25 = icmp sgt i8 %22, %24
  %26 = sext i1 %25 to i8
  call void @llvm.lifetime.start(i64 8, i8* nonnull %13)
  store i64 %20, i64* %6, align 8
  %27 = getelementptr inbounds [8 x i8], [8 x i8]* %14, i64 0, i64 1
  store i8 %26, i8* %27, align 1
  %28 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %13)
  %29 = lshr i64 %3, 16
  %30 = trunc i64 %29 to i8
  %31 = lshr i64 %4, 16
  %32 = trunc i64 %31 to i8
  %33 = icmp sgt i8 %30, %32
  %34 = sext i1 %33 to i8
  call void @llvm.lifetime.start(i64 8, i8* nonnull %13)
  store i64 %28, i64* %6, align 8
  %35 = getelementptr inbounds [8 x i8], [8 x i8]* %14, i64 0, i64 2
  store i8 %34, i8* %35, align 2
  %36 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %13)
  %37 = getelementptr inbounds %struct.uint8v8_t, %struct.uint8v8_t* %8, i64 0, i32 0, i64 3
  %38 = load i8, i8* %37, align 1
  %39 = getelementptr inbounds %struct.uint8v8_t, %struct.uint8v8_t* %10, i64 0, i32 0, i64 3
  %40 = load i8, i8* %39, align 1
  %41 = icmp sgt i8 %38, %40
  %42 = sext i1 %41 to i8
  call void @llvm.lifetime.start(i64 8, i8* nonnull %13)
  store i64 %36, i64* %6, align 8
  %43 = getelementptr inbounds [8 x i8], [8 x i8]* %14, i64 0, i64 3
  store i8 %42, i8* %43, align 1
  %44 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %13)
  %45 = getelementptr inbounds %struct.uint8v8_t, %struct.uint8v8_t* %8, i64 0, i32 0, i64 4
  %46 = load i8, i8* %45, align 4
  %47 = getelementptr inbounds %struct.uint8v8_t, %struct.uint8v8_t* %10, i64 0, i32 0, i64 4
  %48 = load i8, i8* %47, align 4
  %49 = icmp sgt i8 %46, %48
  %50 = sext i1 %49 to i8
  call void @llvm.lifetime.start(i64 8, i8* nonnull %13)
  store i64 %44, i64* %6, align 8
  %51 = getelementptr inbounds [8 x i8], [8 x i8]* %14, i64 0, i64 4
  store i8 %50, i8* %51, align 4
  %52 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %13)
  %53 = getelementptr inbounds %struct.uint8v8_t, %struct.uint8v8_t* %8, i64 0, i32 0, i64 5
  %54 = load i8, i8* %53, align 1
  %55 = getelementptr inbounds %struct.uint8v8_t, %struct.uint8v8_t* %10, i64 0, i32 0, i64 5
  %56 = load i8, i8* %55, align 1
  %57 = icmp sgt i8 %54, %56
  %58 = sext i1 %57 to i8
  call void @llvm.lifetime.start(i64 8, i8* nonnull %13)
  store i64 %52, i64* %6, align 8
  %59 = getelementptr inbounds [8 x i8], [8 x i8]* %14, i64 0, i64 5
  store i8 %58, i8* %59, align 1
  %60 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %13)
  %61 = getelementptr inbounds %struct.uint8v8_t, %struct.uint8v8_t* %8, i64 0, i32 0, i64 6
  %62 = load i8, i8* %61, align 2
  %63 = getelementptr inbounds %struct.uint8v8_t, %struct.uint8v8_t* %10, i64 0, i32 0, i64 6
  %64 = load i8, i8* %63, align 2
  %65 = icmp sgt i8 %62, %64
  %66 = sext i1 %65 to i8
  call void @llvm.lifetime.start(i64 8, i8* nonnull %13)
  store i64 %60, i64* %6, align 8
  %67 = getelementptr inbounds [8 x i8], [8 x i8]* %14, i64 0, i64 6
  store i8 %66, i8* %67, align 2
  %68 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %13)
  %69 = getelementptr inbounds %struct.uint8v8_t, %struct.uint8v8_t* %8, i64 0, i32 0, i64 7
  %70 = load i8, i8* %69, align 1
  %71 = getelementptr inbounds %struct.uint8v8_t, %struct.uint8v8_t* %10, i64 0, i32 0, i64 7
  %72 = load i8, i8* %71, align 1
  %73 = icmp sgt i8 %70, %72
  %74 = sext i1 %73 to i8
  call void @llvm.lifetime.start(i64 8, i8* nonnull %13)
  store i64 %68, i64* %6, align 8
  %75 = getelementptr inbounds [8 x i8], [8 x i8]* %14, i64 0, i64 7
  store i8 %74, i8* %75, align 1
  %76 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %13)
  %77 = lshr i64 %76, 8
  %78 = lshr i64 %76, 16
  %79 = lshr i64 %76, 24
  %80 = lshr i64 %76, 32
  %81 = lshr i64 %76, 40
  %82 = lshr i64 %76, 48
  %83 = lshr i64 %76, 56
  %84 = trunc i64 %76 to i8
  %85 = trunc i64 %77 to i8
  %86 = trunc i64 %78 to i8
  %87 = trunc i64 %79 to i8
  %88 = trunc i64 %80 to i8
  %89 = trunc i64 %81 to i8
  %90 = trunc i64 %82 to i8
  %91 = trunc i64 %83 to i8
  %92 = bitcast i64* %2 to [8 x i8]*
  %93 = bitcast i64* %2 to i8*
  store i8 %84, i8* %93, align 1
  %94 = getelementptr inbounds [8 x i8], [8 x i8]* %92, i64 0, i64 1
  store i8 %85, i8* %94, align 1
  %95 = getelementptr inbounds [8 x i8], [8 x i8]* %92, i64 0, i64 2
  store i8 %86, i8* %95, align 1
  %96 = getelementptr inbounds [8 x i8], [8 x i8]* %92, i64 0, i64 3
  store i8 %87, i8* %96, align 1
  %97 = getelementptr inbounds [8 x i8], [8 x i8]* %92, i64 0, i64 4
  store i8 %88, i8* %97, align 1
  %98 = getelementptr inbounds [8 x i8], [8 x i8]* %92, i64 0, i64 5
  store i8 %89, i8* %98, align 1
  %99 = getelementptr inbounds [8 x i8], [8 x i8]* %92, i64 0, i64 6
  store i8 %90, i8* %99, align 1
  %100 = getelementptr inbounds [8 x i8], [8 x i8]* %92, i64 0, i64 7
  store i8 %91, i8* %100, align 1
  call void @llvm.lifetime.end(i64 8, i8* nonnull %12) 
  call void @llvm.lifetime.end(i64 8, i8* nonnull %11) 
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L7PCMPGTBI4RVnWI7vec64_tE3RVnIS2_E3MVnIS2_EEEP6MemoryS9_R5StateT_T0_T1_(%struct.Memory* returned, %struct.State* nocapture readnone dereferenceable(3376), i64* nocapture, i64, i64)  {
  %6 = alloca i64, align 8
  %7 = alloca i64, align 8
  %8 = bitcast i64* %7 to %struct.uint8v8_t*
  %9 = alloca i64, align 8
  %10 = bitcast i64* %9 to %struct.uint8v8_t*
  %11 = bitcast i64* %7 to i8*
  call void @llvm.lifetime.start(i64 8, i8* nonnull %11) 
  store i64 %3, i64* %7, align 8
  %12 = bitcast i64* %9 to i8*
  call void @llvm.lifetime.start(i64 8, i8* nonnull %12) 
  %13 = inttoptr i64 %4 to i8*
  %14 = load i8, i8* %13
  %15 = add i64 %4, 1
  %16 = inttoptr i64 %15 to i8*
  %17 = load i8, i8* %16
  %18 = add i64 %4, 2
  %19 = inttoptr i64 %18 to i8*
  %20 = load i8, i8* %19
  %21 = add i64 %4, 3
  %22 = inttoptr i64 %21 to i8*
  %23 = load i8, i8* %22
  %24 = add i64 %4, 4
  %25 = inttoptr i64 %24 to i8*
  %26 = load i8, i8* %25
  %27 = add i64 %4, 5
  %28 = inttoptr i64 %27 to i8*
  %29 = load i8, i8* %28
  %30 = add i64 %4, 6
  %31 = inttoptr i64 %30 to i8*
  %32 = load i8, i8* %31
  %33 = add i64 %4, 7
  %34 = inttoptr i64 %33 to i8*
  %35 = load i8, i8* %34
  %36 = zext i8 %35 to i64
  %37 = shl nuw i64 %36, 56
  %38 = zext i8 %32 to i64
  %39 = shl nuw nsw i64 %38, 48
  %40 = zext i8 %29 to i64
  %41 = shl nuw nsw i64 %40, 40
  %42 = zext i8 %26 to i64
  %43 = shl nuw nsw i64 %42, 32
  %44 = zext i8 %23 to i64
  %45 = shl nuw nsw i64 %44, 24
  %46 = zext i8 %20 to i64
  %47 = shl nuw nsw i64 %46, 16
  %48 = zext i8 %17 to i64
  %49 = shl nuw nsw i64 %48, 8
  %50 = zext i8 %14 to i64
  %51 = or i64 %49, %50
  %52 = or i64 %51, %47
  %53 = or i64 %52, %45
  %54 = or i64 %53, %43
  %55 = or i64 %54, %41
  %56 = or i64 %55, %39
  %57 = or i64 %56, %37
  store i64 %57, i64* %9, align 8
  %58 = bitcast i64* %6 to i8*
  %59 = bitcast i64* %6 to [8 x i8]*
  %60 = trunc i64 %3 to i8
  %61 = icmp sgt i8 %60, %14
  %62 = sext i1 %61 to i8
  call void @llvm.lifetime.start(i64 8, i8* nonnull %58)
  store i64 0, i64* %6, align 8
  %63 = bitcast i64* %6 to i8*
  store i8 %62, i8* %63, align 8
  %64 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %58)
  %65 = lshr i64 %3, 8
  %66 = trunc i64 %65 to i8
  %67 = icmp sgt i8 %66, %17
  %68 = sext i1 %67 to i8
  call void @llvm.lifetime.start(i64 8, i8* nonnull %58)
  store i64 %64, i64* %6, align 8
  %69 = getelementptr inbounds [8 x i8], [8 x i8]* %59, i64 0, i64 1
  store i8 %68, i8* %69, align 1
  %70 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %58)
  %71 = getelementptr inbounds %struct.uint8v8_t, %struct.uint8v8_t* %8, i64 0, i32 0, i64 2
  %72 = load i8, i8* %71, align 2
  %73 = icmp sgt i8 %72, %20
  %74 = sext i1 %73 to i8
  call void @llvm.lifetime.start(i64 8, i8* nonnull %58)
  store i64 %70, i64* %6, align 8
  %75 = getelementptr inbounds [8 x i8], [8 x i8]* %59, i64 0, i64 2
  store i8 %74, i8* %75, align 2
  %76 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %58)
  %77 = getelementptr inbounds %struct.uint8v8_t, %struct.uint8v8_t* %8, i64 0, i32 0, i64 3
  %78 = load i8, i8* %77, align 1
  %79 = getelementptr inbounds %struct.uint8v8_t, %struct.uint8v8_t* %10, i64 0, i32 0, i64 3
  %80 = load i8, i8* %79, align 1
  %81 = icmp sgt i8 %78, %80
  %82 = sext i1 %81 to i8
  call void @llvm.lifetime.start(i64 8, i8* nonnull %58)
  store i64 %76, i64* %6, align 8
  %83 = getelementptr inbounds [8 x i8], [8 x i8]* %59, i64 0, i64 3
  store i8 %82, i8* %83, align 1
  %84 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %58)
  %85 = getelementptr inbounds %struct.uint8v8_t, %struct.uint8v8_t* %8, i64 0, i32 0, i64 4
  %86 = load i8, i8* %85, align 4
  %87 = getelementptr inbounds %struct.uint8v8_t, %struct.uint8v8_t* %10, i64 0, i32 0, i64 4
  %88 = load i8, i8* %87, align 4
  %89 = icmp sgt i8 %86, %88
  %90 = sext i1 %89 to i8
  call void @llvm.lifetime.start(i64 8, i8* nonnull %58)
  store i64 %84, i64* %6, align 8
  %91 = getelementptr inbounds [8 x i8], [8 x i8]* %59, i64 0, i64 4
  store i8 %90, i8* %91, align 4
  %92 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %58)
  %93 = getelementptr inbounds %struct.uint8v8_t, %struct.uint8v8_t* %8, i64 0, i32 0, i64 5
  %94 = load i8, i8* %93, align 1
  %95 = getelementptr inbounds %struct.uint8v8_t, %struct.uint8v8_t* %10, i64 0, i32 0, i64 5
  %96 = load i8, i8* %95, align 1
  %97 = icmp sgt i8 %94, %96
  %98 = sext i1 %97 to i8
  call void @llvm.lifetime.start(i64 8, i8* nonnull %58)
  store i64 %92, i64* %6, align 8
  %99 = getelementptr inbounds [8 x i8], [8 x i8]* %59, i64 0, i64 5
  store i8 %98, i8* %99, align 1
  %100 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %58)
  %101 = getelementptr inbounds %struct.uint8v8_t, %struct.uint8v8_t* %8, i64 0, i32 0, i64 6
  %102 = load i8, i8* %101, align 2
  %103 = getelementptr inbounds %struct.uint8v8_t, %struct.uint8v8_t* %10, i64 0, i32 0, i64 6
  %104 = load i8, i8* %103, align 2
  %105 = icmp sgt i8 %102, %104
  %106 = sext i1 %105 to i8
  call void @llvm.lifetime.start(i64 8, i8* nonnull %58)
  store i64 %100, i64* %6, align 8
  %107 = getelementptr inbounds [8 x i8], [8 x i8]* %59, i64 0, i64 6
  store i8 %106, i8* %107, align 2
  %108 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %58)
  %109 = getelementptr inbounds %struct.uint8v8_t, %struct.uint8v8_t* %8, i64 0, i32 0, i64 7
  %110 = load i8, i8* %109, align 1
  %111 = getelementptr inbounds %struct.uint8v8_t, %struct.uint8v8_t* %10, i64 0, i32 0, i64 7
  %112 = load i8, i8* %111, align 1
  %113 = icmp sgt i8 %110, %112
  %114 = sext i1 %113 to i8
  call void @llvm.lifetime.start(i64 8, i8* nonnull %58)
  store i64 %108, i64* %6, align 8
  %115 = getelementptr inbounds [8 x i8], [8 x i8]* %59, i64 0, i64 7
  store i8 %114, i8* %115, align 1
  %116 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %58)
  %117 = lshr i64 %116, 8
  %118 = lshr i64 %116, 16
  %119 = lshr i64 %116, 24
  %120 = lshr i64 %116, 32
  %121 = lshr i64 %116, 40
  %122 = lshr i64 %116, 48
  %123 = lshr i64 %116, 56
  %124 = trunc i64 %116 to i8
  %125 = trunc i64 %117 to i8
  %126 = trunc i64 %118 to i8
  %127 = trunc i64 %119 to i8
  %128 = trunc i64 %120 to i8
  %129 = trunc i64 %121 to i8
  %130 = trunc i64 %122 to i8
  %131 = trunc i64 %123 to i8
  %132 = bitcast i64* %2 to [8 x i8]*
  %133 = bitcast i64* %2 to i8*
  store i8 %124, i8* %133, align 1
  %134 = getelementptr inbounds [8 x i8], [8 x i8]* %132, i64 0, i64 1
  store i8 %125, i8* %134, align 1
  %135 = getelementptr inbounds [8 x i8], [8 x i8]* %132, i64 0, i64 2
  store i8 %126, i8* %135, align 1
  %136 = getelementptr inbounds [8 x i8], [8 x i8]* %132, i64 0, i64 3
  store i8 %127, i8* %136, align 1
  %137 = getelementptr inbounds [8 x i8], [8 x i8]* %132, i64 0, i64 4
  store i8 %128, i8* %137, align 1
  %138 = getelementptr inbounds [8 x i8], [8 x i8]* %132, i64 0, i64 5
  store i8 %129, i8* %138, align 1
  %139 = getelementptr inbounds [8 x i8], [8 x i8]* %132, i64 0, i64 6
  store i8 %130, i8* %139, align 1
  %140 = getelementptr inbounds [8 x i8], [8 x i8]* %132, i64 0, i64 7
  store i8 %131, i8* %140, align 1
  call void @llvm.lifetime.end(i64 8, i8* nonnull %12) 
  call void @llvm.lifetime.end(i64 8, i8* nonnull %11) 
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L7PCMPGTWI4RVnWI7vec64_tE3RVnIS2_ES5_EEP6MemoryS7_R5StateT_T0_T1_(%struct.Memory* readnone returned, %struct.State* nocapture readnone dereferenceable(3376), i64* nocapture, i64, i64)  {
  %6 = alloca i64, align 8
  %7 = bitcast i64* %6 to i8*
  %8 = bitcast i64* %6 to [4 x i16]*
  %9 = trunc i64 %3 to i16
  %10 = trunc i64 %4 to i16
  %11 = icmp sgt i16 %9, %10
  %12 = sext i1 %11 to i16
  call void @llvm.lifetime.start(i64 8, i8* nonnull %7)
  store i64 0, i64* %6, align 8
  %13 = bitcast i64* %6 to i16*
  store i16 %12, i16* %13, align 8
  %14 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %7)
  %15 = lshr i64 %3, 16
  %16 = trunc i64 %15 to i16
  %17 = lshr i64 %4, 16
  %18 = trunc i64 %17 to i16
  %19 = icmp sgt i16 %16, %18
  %20 = sext i1 %19 to i16
  call void @llvm.lifetime.start(i64 8, i8* nonnull %7)
  store i64 %14, i64* %6, align 8
  %21 = getelementptr inbounds [4 x i16], [4 x i16]* %8, i64 0, i64 1
  store i16 %20, i16* %21, align 2
  %22 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %7)
  %23 = lshr i64 %3, 32
  %24 = trunc i64 %23 to i16
  %25 = lshr i64 %4, 32
  %26 = trunc i64 %25 to i16
  %27 = icmp sgt i16 %24, %26
  %28 = sext i1 %27 to i16
  call void @llvm.lifetime.start(i64 8, i8* nonnull %7)
  store i64 %22, i64* %6, align 8
  %29 = getelementptr inbounds [4 x i16], [4 x i16]* %8, i64 0, i64 2
  store i16 %28, i16* %29, align 4
  %30 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %7)
  %31 = lshr i64 %3, 48
  %32 = trunc i64 %31 to i16
  %33 = lshr i64 %4, 48
  %34 = trunc i64 %33 to i16
  %35 = icmp sgt i16 %32, %34
  %36 = sext i1 %35 to i16
  call void @llvm.lifetime.start(i64 8, i8* nonnull %7)
  store i64 %30, i64* %6, align 8
  %37 = getelementptr inbounds [4 x i16], [4 x i16]* %8, i64 0, i64 3
  store i16 %36, i16* %37, align 2
  %38 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %7)
  %39 = lshr i64 %38, 16
  %40 = lshr i64 %38, 32
  %41 = lshr i64 %38, 48
  %42 = trunc i64 %38 to i16
  %43 = trunc i64 %39 to i16
  %44 = trunc i64 %40 to i16
  %45 = trunc i64 %41 to i16
  %46 = bitcast i64* %2 to [4 x i16]*
  %47 = bitcast i64* %2 to i16*
  store i16 %42, i16* %47, align 1
  %48 = getelementptr inbounds [4 x i16], [4 x i16]* %46, i64 0, i64 1
  store i16 %43, i16* %48, align 1
  %49 = getelementptr inbounds [4 x i16], [4 x i16]* %46, i64 0, i64 2
  store i16 %44, i16* %49, align 1
  %50 = getelementptr inbounds [4 x i16], [4 x i16]* %46, i64 0, i64 3
  store i16 %45, i16* %50, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L7PCMPGTWI4RVnWI7vec64_tE3RVnIS2_E3MVnIS2_EEEP6MemoryS9_R5StateT_T0_T1_(%struct.Memory* returned, %struct.State* nocapture readnone dereferenceable(3376), i64* nocapture, i64, i64)  {
  %6 = alloca i64, align 8
  %7 = inttoptr i64 %4 to i16*
  %8 = load i16, i16* %7
  %9 = add i64 %4, 2
  %10 = inttoptr i64 %9 to i16*
  %11 = load i16, i16* %10
  %12 = add i64 %4, 4
  %13 = inttoptr i64 %12 to i16*
  %14 = load i16, i16* %13
  %15 = add i64 %4, 6
  %16 = inttoptr i64 %15 to i16*
  %17 = load i16, i16* %16
  %18 = bitcast i64* %6 to i8*
  %19 = bitcast i64* %6 to [4 x i16]*
  %20 = trunc i64 %3 to i16
  %21 = icmp sgt i16 %20, %8
  %22 = sext i1 %21 to i16
  call void @llvm.lifetime.start(i64 8, i8* nonnull %18)
  store i64 0, i64* %6, align 8
  %23 = bitcast i64* %6 to i16*
  store i16 %22, i16* %23, align 8
  %24 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %18)
  %25 = lshr i64 %3, 16
  %26 = trunc i64 %25 to i16
  %27 = icmp sgt i16 %26, %11
  %28 = sext i1 %27 to i16
  call void @llvm.lifetime.start(i64 8, i8* nonnull %18)
  store i64 %24, i64* %6, align 8
  %29 = getelementptr inbounds [4 x i16], [4 x i16]* %19, i64 0, i64 1
  store i16 %28, i16* %29, align 2
  %30 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %18)
  %31 = lshr i64 %3, 32
  %32 = trunc i64 %31 to i16
  %33 = icmp sgt i16 %32, %14
  %34 = sext i1 %33 to i16
  call void @llvm.lifetime.start(i64 8, i8* nonnull %18)
  store i64 %30, i64* %6, align 8
  %35 = getelementptr inbounds [4 x i16], [4 x i16]* %19, i64 0, i64 2
  store i16 %34, i16* %35, align 4
  %36 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %18)
  %37 = lshr i64 %3, 48
  %38 = trunc i64 %37 to i16
  %39 = icmp sgt i16 %38, %17
  %40 = sext i1 %39 to i16
  call void @llvm.lifetime.start(i64 8, i8* nonnull %18)
  store i64 %36, i64* %6, align 8
  %41 = getelementptr inbounds [4 x i16], [4 x i16]* %19, i64 0, i64 3
  store i16 %40, i16* %41, align 2
  %42 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %18)
  %43 = lshr i64 %42, 16
  %44 = lshr i64 %42, 32
  %45 = lshr i64 %42, 48
  %46 = trunc i64 %42 to i16
  %47 = trunc i64 %43 to i16
  %48 = trunc i64 %44 to i16
  %49 = trunc i64 %45 to i16
  %50 = bitcast i64* %2 to [4 x i16]*
  %51 = bitcast i64* %2 to i16*
  store i16 %46, i16* %51, align 1
  %52 = getelementptr inbounds [4 x i16], [4 x i16]* %50, i64 0, i64 1
  store i16 %47, i16* %52, align 1
  %53 = getelementptr inbounds [4 x i16], [4 x i16]* %50, i64 0, i64 2
  store i16 %48, i16* %53, align 1
  %54 = getelementptr inbounds [4 x i16], [4 x i16]* %50, i64 0, i64 3
  store i16 %49, i16* %54, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L7PCMPGTDI4RVnWI7vec64_tE3RVnIS2_ES5_EEP6MemoryS7_R5StateT_T0_T1_(%struct.Memory* readnone returned, %struct.State* nocapture readnone dereferenceable(3376), i64* nocapture, i64, i64)  {
  %6 = alloca i64, align 8
  %7 = bitcast i64* %6 to i8*
  %8 = bitcast i64* %6 to [2 x i32]*
  %9 = trunc i64 %3 to i32
  %10 = trunc i64 %4 to i32
  %11 = icmp sgt i32 %9, %10
  %12 = sext i1 %11 to i32
  call void @llvm.lifetime.start(i64 8, i8* nonnull %7)
  store i64 0, i64* %6, align 8
  %13 = bitcast i64* %6 to i32*
  store i32 %12, i32* %13, align 8
  %14 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %7)
  %15 = lshr i64 %3, 32
  %16 = trunc i64 %15 to i32
  %17 = lshr i64 %4, 32
  %18 = trunc i64 %17 to i32
  %19 = icmp sgt i32 %16, %18
  %20 = sext i1 %19 to i32
  call void @llvm.lifetime.start(i64 8, i8* nonnull %7)
  store i64 %14, i64* %6, align 8
  %21 = getelementptr inbounds [2 x i32], [2 x i32]* %8, i64 0, i64 1
  store i32 %20, i32* %21, align 4
  %22 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %7)
  %23 = lshr i64 %22, 32
  %24 = trunc i64 %22 to i32
  %25 = trunc i64 %23 to i32
  %26 = bitcast i64* %2 to [2 x i32]*
  %27 = bitcast i64* %2 to i32*
  store i32 %24, i32* %27, align 1
  %28 = getelementptr inbounds [2 x i32], [2 x i32]* %26, i64 0, i64 1
  store i32 %25, i32* %28, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L7PCMPGTDI4RVnWI7vec64_tE3RVnIS2_E3MVnIS2_EEEP6MemoryS9_R5StateT_T0_T1_(%struct.Memory* returned, %struct.State* nocapture readnone dereferenceable(3376), i64* nocapture, i64, i64)  {
  %6 = alloca i64, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7
  %9 = add i64 %4, 4
  %10 = inttoptr i64 %9 to i32*
  %11 = load i32, i32* %10
  %12 = bitcast i64* %6 to i8*
  %13 = bitcast i64* %6 to [2 x i32]*
  %14 = trunc i64 %3 to i32
  %15 = icmp sgt i32 %14, %8
  %16 = sext i1 %15 to i32
  call void @llvm.lifetime.start(i64 8, i8* nonnull %12)
  store i64 0, i64* %6, align 8
  %17 = bitcast i64* %6 to i32*
  store i32 %16, i32* %17, align 8
  %18 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %12)
  %19 = lshr i64 %3, 32
  %20 = trunc i64 %19 to i32
  %21 = icmp sgt i32 %20, %11
  %22 = sext i1 %21 to i32
  call void @llvm.lifetime.start(i64 8, i8* nonnull %12)
  store i64 %18, i64* %6, align 8
  %23 = getelementptr inbounds [2 x i32], [2 x i32]* %13, i64 0, i64 1
  store i32 %22, i32* %23, align 4
  %24 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %12)
  %25 = lshr i64 %24, 32
  %26 = trunc i64 %24 to i32
  %27 = trunc i64 %25 to i32
  %28 = bitcast i64* %2 to [2 x i32]*
  %29 = bitcast i64* %2 to i32*
  store i32 %26, i32* %29, align 1
  %30 = getelementptr inbounds [2 x i32], [2 x i32]* %28, i64 0, i64 1
  store i32 %27, i32* %30, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L7PCMPGTQI3VnWI8vec128_tE2VnIS2_E3MVnIS2_EEEP6MemoryS9_R5StateT_T0_T1_(%struct.Memory* returned, %struct.State* nocapture readnone dereferenceable(3376), i8* nocapture, i8* nocapture readonly, i64)  {
  %6 = bitcast i8* %3 to i64*
  %7 = load i64, i64* %6, align 1
  %8 = getelementptr inbounds i8, i8* %3, i64 8
  %9 = bitcast i8* %8 to i64*
  %10 = load i64, i64* %9, align 1
  %11 = inttoptr i64 %4 to i64*
  %12 = load i64, i64* %11
  %13 = add i64 %4, 8
  %14 = inttoptr i64 %13 to i64*
  %15 = load i64, i64* %14
  %16 = icmp sgt i64 %7, %12
  %17 = sext i1 %16 to i64
  %18 = icmp sgt i64 %10, %15
  %19 = sext i1 %18 to i64
  %20 = bitcast i8* %2 to i64*
  store i64 %17, i64* %20, align 1
  %21 = getelementptr inbounds i8, i8* %2, i64 8
  %22 = bitcast i8* %21 to i64*
  store i64 %19, i64* %22, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L7PCMPGTQI3VnWI8vec128_tE2VnIS2_ES5_EEP6MemoryS7_R5StateT_T0_T1_(%struct.Memory* readnone returned, %struct.State* nocapture readnone dereferenceable(3376), i8* nocapture, i8* nocapture readonly, i8* nocapture readonly)  {
  %6 = bitcast i8* %3 to i64*
  %7 = load i64, i64* %6, align 1
  %8 = getelementptr inbounds i8, i8* %3, i64 8
  %9 = bitcast i8* %8 to i64*
  %10 = load i64, i64* %9, align 1
  %11 = bitcast i8* %4 to i64*
  %12 = load i64, i64* %11, align 1
  %13 = getelementptr inbounds i8, i8* %4, i64 8
  %14 = bitcast i8* %13 to i64*
  %15 = load i64, i64* %14, align 1
  %16 = icmp sgt i64 %7, %12
  %17 = sext i1 %16 to i64
  %18 = icmp sgt i64 %10, %15
  %19 = sext i1 %18 to i64
  %20 = bitcast i8* %2 to i64*
  store i64 %17, i64* %20, align 1
  %21 = getelementptr inbounds i8, i8* %2, i64 8
  %22 = bitcast i8* %21 to i64*
  store i64 %19, i64* %22, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L7PCMPGTWI3VnWI8vec128_tE2VnIS2_E3MVnIS2_EEEP6MemoryS9_R5StateT_T0_T1_(%struct.Memory* returned, %struct.State* nocapture readnone dereferenceable(3376), i8* nocapture, i8* nocapture readonly, i64)  {
  %6 = alloca <2 x i64>, align 16
  %7 = bitcast <2 x i64>* %6 to { i64, i64 }*
  %8 = alloca <2 x i64>, align 16
  %9 = bitcast <2 x i64>* %8 to { i64, i64 }*
  %10 = bitcast <2 x i64>* %8 to %struct.uint16v8_t*
  %11 = alloca <2 x i64>, align 16
  %12 = bitcast <2 x i64>* %11 to { i64, i64 }*
  %13 = bitcast <2 x i64>* %11 to %struct.uint16v8_t*
  %14 = bitcast <2 x i64>* %8 to i8*
  call void @llvm.lifetime.start(i64 16, i8* nonnull %14) 
  %15 = bitcast i8* %3 to <2 x i64>*
  %16 = load <2 x i64>, <2 x i64>* %15, align 1
  store <2 x i64> %16, <2 x i64>* %8, align 16
  %17 = bitcast <2 x i64>* %11 to i8*
  call void @llvm.lifetime.start(i64 16, i8* nonnull %17) 
  %18 = inttoptr i64 %4 to i16*
  %19 = load i16, i16* %18
  %20 = add i64 %4, 2
  %21 = inttoptr i64 %20 to i16*
  %22 = load i16, i16* %21
  %23 = add i64 %4, 4
  %24 = inttoptr i64 %23 to i16*
  %25 = load i16, i16* %24
  %26 = add i64 %4, 6
  %27 = inttoptr i64 %26 to i16*
  %28 = load i16, i16* %27
  %29 = add i64 %4, 8
  %30 = inttoptr i64 %29 to i16*
  %31 = load i16, i16* %30
  %32 = add i64 %4, 10
  %33 = inttoptr i64 %32 to i16*
  %34 = load i16, i16* %33
  %35 = add i64 %4, 12
  %36 = inttoptr i64 %35 to i16*
  %37 = load i16, i16* %36
  %38 = add i64 %4, 14
  %39 = inttoptr i64 %38 to i16*
  %40 = load i16, i16* %39
  %41 = insertelement <2 x i16> undef, i16 %28, i32 0
  %42 = insertelement <2 x i16> %41, i16 %40, i32 1
  %43 = zext <2 x i16> %42 to <2 x i64>
  %44 = shl nuw <2 x i64> %43, <i64 48, i64 48>
  %45 = insertelement <2 x i16> undef, i16 %25, i32 0
  %46 = insertelement <2 x i16> %45, i16 %37, i32 1
  %47 = zext <2 x i16> %46 to <2 x i64>
  %48 = shl nuw nsw <2 x i64> %47, <i64 32, i64 32>
  %49 = insertelement <2 x i16> undef, i16 %22, i32 0
  %50 = insertelement <2 x i16> %49, i16 %34, i32 1
  %51 = zext <2 x i16> %50 to <2 x i64>
  %52 = shl nuw nsw <2 x i64> %51, <i64 16, i64 16>
  %53 = insertelement <2 x i16> undef, i16 %19, i32 0
  %54 = insertelement <2 x i16> %53, i16 %31, i32 1
  %55 = zext <2 x i16> %54 to <2 x i64>
  %56 = or <2 x i64> %52, %55
  %57 = or <2 x i64> %56, %48
  %58 = or <2 x i64> %57, %44
  store <2 x i64> %58, <2 x i64>* %11, align 16
  %59 = bitcast <2 x i64>* %6 to i8*
  %60 = getelementptr inbounds <2 x i64>, <2 x i64>* %6, i64 0, i64 0
  %61 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %7, i64 0, i32 1
  %62 = bitcast <2 x i64>* %6 to [8 x i16]*
  %63 = extractelement <2 x i64> %16, i32 0
  %64 = trunc i64 %63 to i16
  %65 = icmp sgt i16 %64, %19
  %66 = sext i1 %65 to i16
  call void @llvm.lifetime.start(i64 16, i8* nonnull %59)
  store <2 x i64> zeroinitializer, <2 x i64>* %6, align 16
  %67 = bitcast <2 x i64>* %6 to i16*
  store i16 %66, i16* %67, align 16
  %68 = load i64, i64* %60, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %59)
  %69 = lshr i64 %63, 16
  %70 = trunc i64 %69 to i16
  %71 = icmp sgt i16 %70, %22
  %72 = sext i1 %71 to i16
  call void @llvm.lifetime.start(i64 16, i8* nonnull %59)
  store i64 %68, i64* %60, align 16
  store i64 0, i64* %61, align 8
  %73 = getelementptr inbounds [8 x i16], [8 x i16]* %62, i64 0, i64 1
  store i16 %72, i16* %73, align 2
  %74 = load i64, i64* %60, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %59)
  %75 = lshr i64 %63, 32
  %76 = trunc i64 %75 to i16
  %77 = icmp sgt i16 %76, %25
  %78 = sext i1 %77 to i16
  call void @llvm.lifetime.start(i64 16, i8* nonnull %59)
  store i64 %74, i64* %60, align 16
  store i64 0, i64* %61, align 8
  %79 = getelementptr inbounds [8 x i16], [8 x i16]* %62, i64 0, i64 2
  store i16 %78, i16* %79, align 4
  %80 = load i64, i64* %60, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %59)
  %81 = getelementptr inbounds %struct.uint16v8_t, %struct.uint16v8_t* %10, i64 0, i32 0, i64 3
  %82 = load i16, i16* %81, align 2
  %83 = icmp sgt i16 %82, %28
  %84 = sext i1 %83 to i16
  call void @llvm.lifetime.start(i64 16, i8* nonnull %59)
  store i64 %80, i64* %60, align 16
  store i64 0, i64* %61, align 8
  %85 = getelementptr inbounds [8 x i16], [8 x i16]* %62, i64 0, i64 3
  store i16 %84, i16* %85, align 2
  %86 = load i64, i64* %60, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %59)
  %87 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %9, i64 0, i32 1
  %88 = bitcast i64* %87 to i16*
  %89 = load i16, i16* %88, align 8
  %90 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %12, i64 0, i32 1
  %91 = bitcast i64* %90 to i16*
  %92 = load i16, i16* %91, align 8
  %93 = icmp sgt i16 %89, %92
  %94 = sext i1 %93 to i16
  call void @llvm.lifetime.start(i64 16, i8* nonnull %59)
  store i64 %86, i64* %60, align 16
  store i64 0, i64* %61, align 8
  %95 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %7, i64 0, i32 1
  %96 = bitcast i64* %95 to i16*
  store i16 %94, i16* %96, align 8
  %97 = load i64, i64* %61, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %59)
  %98 = getelementptr inbounds %struct.uint16v8_t, %struct.uint16v8_t* %10, i64 0, i32 0, i64 5
  %99 = load i16, i16* %98, align 2
  %100 = getelementptr inbounds %struct.uint16v8_t, %struct.uint16v8_t* %13, i64 0, i32 0, i64 5
  %101 = load i16, i16* %100, align 2
  %102 = icmp sgt i16 %99, %101
  %103 = sext i1 %102 to i16
  call void @llvm.lifetime.start(i64 16, i8* nonnull %59)
  store i64 %86, i64* %60, align 16
  store i64 %97, i64* %61, align 8
  %104 = getelementptr inbounds [8 x i16], [8 x i16]* %62, i64 0, i64 5
  store i16 %103, i16* %104, align 2
  %105 = load i64, i64* %61, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %59)
  %106 = getelementptr inbounds %struct.uint16v8_t, %struct.uint16v8_t* %10, i64 0, i32 0, i64 6
  %107 = load i16, i16* %106, align 4
  %108 = getelementptr inbounds %struct.uint16v8_t, %struct.uint16v8_t* %13, i64 0, i32 0, i64 6
  %109 = load i16, i16* %108, align 4
  %110 = icmp sgt i16 %107, %109
  %111 = sext i1 %110 to i16
  call void @llvm.lifetime.start(i64 16, i8* nonnull %59)
  store i64 %86, i64* %60, align 16
  store i64 %105, i64* %61, align 8
  %112 = getelementptr inbounds [8 x i16], [8 x i16]* %62, i64 0, i64 6
  store i16 %111, i16* %112, align 4
  %113 = load i64, i64* %61, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %59)
  %114 = getelementptr inbounds %struct.uint16v8_t, %struct.uint16v8_t* %10, i64 0, i32 0, i64 7
  %115 = load i16, i16* %114, align 2
  %116 = getelementptr inbounds %struct.uint16v8_t, %struct.uint16v8_t* %13, i64 0, i32 0, i64 7
  %117 = load i16, i16* %116, align 2
  %118 = icmp sgt i16 %115, %117
  %119 = sext i1 %118 to i16
  call void @llvm.lifetime.start(i64 16, i8* nonnull %59)
  store i64 %86, i64* %60, align 16
  store i64 %113, i64* %61, align 8
  %120 = getelementptr inbounds [8 x i16], [8 x i16]* %62, i64 0, i64 7
  store i16 %119, i16* %120, align 2
  %121 = load i64, i64* %61, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %59)
  %122 = lshr i64 %86, 16
  %123 = lshr i64 %86, 32
  %124 = lshr i64 %86, 48
  %125 = trunc i64 %86 to i16
  %126 = trunc i64 %122 to i16
  %127 = trunc i64 %123 to i16
  %128 = trunc i64 %124 to i16
  %129 = bitcast i8* %2 to i16*
  store i16 %125, i16* %129, align 1
  %130 = getelementptr inbounds i8, i8* %2, i64 2
  %131 = bitcast i8* %130 to i16*
  store i16 %126, i16* %131, align 1
  %132 = getelementptr inbounds i8, i8* %2, i64 4
  %133 = bitcast i8* %132 to i16*
  store i16 %127, i16* %133, align 1
  %134 = getelementptr inbounds i8, i8* %2, i64 6
  %135 = bitcast i8* %134 to i16*
  store i16 %128, i16* %135, align 1
  %136 = trunc i64 %121 to i16
  %137 = getelementptr inbounds i8, i8* %2, i64 8
  %138 = bitcast i8* %137 to i16*
  store i16 %136, i16* %138, align 1
  %139 = lshr i64 %121, 16
  %140 = trunc i64 %139 to i16
  %141 = getelementptr inbounds i8, i8* %2, i64 10
  %142 = bitcast i8* %141 to i16*
  store i16 %140, i16* %142, align 1
  %143 = lshr i64 %121, 32
  %144 = trunc i64 %143 to i16
  %145 = getelementptr inbounds i8, i8* %2, i64 12
  %146 = bitcast i8* %145 to i16*
  store i16 %144, i16* %146, align 1
  %147 = lshr i64 %121, 48
  %148 = trunc i64 %147 to i16
  %149 = getelementptr inbounds i8, i8* %2, i64 14
  %150 = bitcast i8* %149 to i16*
  store i16 %148, i16* %150, align 1
  call void @llvm.lifetime.end(i64 16, i8* nonnull %17) 
  call void @llvm.lifetime.end(i64 16, i8* nonnull %14) 
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L7PCMPGTWI3VnWI8vec128_tE2VnIS2_ES5_EEP6MemoryS7_R5StateT_T0_T1_(%struct.Memory* readnone returned, %struct.State* nocapture readnone dereferenceable(3376), i8* nocapture, i8* nocapture readonly, i8* nocapture readonly)  {
  %6 = alloca <2 x i64>, align 16
  %7 = bitcast <2 x i64>* %6 to { i64, i64 }*
  %8 = alloca <2 x i64>, align 16
  %9 = bitcast <2 x i64>* %8 to { i64, i64 }*
  %10 = bitcast <2 x i64>* %8 to %struct.uint16v8_t*
  %11 = alloca <2 x i64>, align 16
  %12 = bitcast <2 x i64>* %11 to { i64, i64 }*
  %13 = bitcast <2 x i64>* %11 to %struct.uint16v8_t*
  %14 = bitcast <2 x i64>* %8 to i8*
  call void @llvm.lifetime.start(i64 16, i8* nonnull %14) 
  %15 = bitcast i8* %3 to <2 x i64>*
  %16 = load <2 x i64>, <2 x i64>* %15, align 1
  store <2 x i64> %16, <2 x i64>* %8, align 16
  %17 = bitcast <2 x i64>* %11 to i8*
  call void @llvm.lifetime.start(i64 16, i8* nonnull %17) 
  %18 = bitcast i8* %4 to <2 x i64>*
  %19 = load <2 x i64>, <2 x i64>* %18, align 1
  store <2 x i64> %19, <2 x i64>* %11, align 16
  %20 = bitcast <2 x i64>* %6 to i8*
  %21 = getelementptr inbounds <2 x i64>, <2 x i64>* %6, i64 0, i64 0
  %22 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %7, i64 0, i32 1
  %23 = bitcast <2 x i64>* %6 to [8 x i16]*
  %24 = extractelement <2 x i64> %16, i32 0
  %25 = trunc i64 %24 to i16
  %26 = extractelement <2 x i64> %19, i32 0
  %27 = trunc i64 %26 to i16
  %28 = icmp sgt i16 %25, %27
  %29 = sext i1 %28 to i16
  call void @llvm.lifetime.start(i64 16, i8* nonnull %20)
  store <2 x i64> zeroinitializer, <2 x i64>* %6, align 16
  %30 = bitcast <2 x i64>* %6 to i16*
  store i16 %29, i16* %30, align 16
  %31 = load i64, i64* %21, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %20)
  %32 = lshr i64 %24, 16
  %33 = trunc i64 %32 to i16
  %34 = lshr i64 %26, 16
  %35 = trunc i64 %34 to i16
  %36 = icmp sgt i16 %33, %35
  %37 = sext i1 %36 to i16
  call void @llvm.lifetime.start(i64 16, i8* nonnull %20)
  store i64 %31, i64* %21, align 16
  store i64 0, i64* %22, align 8
  %38 = getelementptr inbounds [8 x i16], [8 x i16]* %23, i64 0, i64 1
  store i16 %37, i16* %38, align 2
  %39 = load i64, i64* %21, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %20)
  %40 = lshr i64 %24, 32
  %41 = trunc i64 %40 to i16
  %42 = lshr i64 %26, 32
  %43 = trunc i64 %42 to i16
  %44 = icmp sgt i16 %41, %43
  %45 = sext i1 %44 to i16
  call void @llvm.lifetime.start(i64 16, i8* nonnull %20)
  store i64 %39, i64* %21, align 16
  store i64 0, i64* %22, align 8
  %46 = getelementptr inbounds [8 x i16], [8 x i16]* %23, i64 0, i64 2
  store i16 %45, i16* %46, align 4
  %47 = load i64, i64* %21, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %20)
  %48 = lshr i64 %24, 48
  %49 = trunc i64 %48 to i16
  %50 = lshr i64 %26, 48
  %51 = trunc i64 %50 to i16
  %52 = icmp sgt i16 %49, %51
  %53 = sext i1 %52 to i16
  call void @llvm.lifetime.start(i64 16, i8* nonnull %20)
  store i64 %47, i64* %21, align 16
  store i64 0, i64* %22, align 8
  %54 = getelementptr inbounds [8 x i16], [8 x i16]* %23, i64 0, i64 3
  store i16 %53, i16* %54, align 2
  %55 = load i64, i64* %21, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %20)
  %56 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %9, i64 0, i32 1
  %57 = bitcast i64* %56 to i16*
  %58 = load i16, i16* %57, align 8
  %59 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %12, i64 0, i32 1
  %60 = bitcast i64* %59 to i16*
  %61 = load i16, i16* %60, align 8
  %62 = icmp sgt i16 %58, %61
  %63 = sext i1 %62 to i16
  call void @llvm.lifetime.start(i64 16, i8* nonnull %20)
  store i64 %55, i64* %21, align 16
  store i64 0, i64* %22, align 8
  %64 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %7, i64 0, i32 1
  %65 = bitcast i64* %64 to i16*
  store i16 %63, i16* %65, align 8
  %66 = load i64, i64* %22, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %20)
  %67 = getelementptr inbounds %struct.uint16v8_t, %struct.uint16v8_t* %10, i64 0, i32 0, i64 5
  %68 = load i16, i16* %67, align 2
  %69 = getelementptr inbounds %struct.uint16v8_t, %struct.uint16v8_t* %13, i64 0, i32 0, i64 5
  %70 = load i16, i16* %69, align 2
  %71 = icmp sgt i16 %68, %70
  %72 = sext i1 %71 to i16
  call void @llvm.lifetime.start(i64 16, i8* nonnull %20)
  store i64 %55, i64* %21, align 16
  store i64 %66, i64* %22, align 8
  %73 = getelementptr inbounds [8 x i16], [8 x i16]* %23, i64 0, i64 5
  store i16 %72, i16* %73, align 2
  %74 = load i64, i64* %22, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %20)
  %75 = getelementptr inbounds %struct.uint16v8_t, %struct.uint16v8_t* %10, i64 0, i32 0, i64 6
  %76 = load i16, i16* %75, align 4
  %77 = getelementptr inbounds %struct.uint16v8_t, %struct.uint16v8_t* %13, i64 0, i32 0, i64 6
  %78 = load i16, i16* %77, align 4
  %79 = icmp sgt i16 %76, %78
  %80 = sext i1 %79 to i16
  call void @llvm.lifetime.start(i64 16, i8* nonnull %20)
  store i64 %55, i64* %21, align 16
  store i64 %74, i64* %22, align 8
  %81 = getelementptr inbounds [8 x i16], [8 x i16]* %23, i64 0, i64 6
  store i16 %80, i16* %81, align 4
  %82 = load i64, i64* %22, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %20)
  %83 = getelementptr inbounds %struct.uint16v8_t, %struct.uint16v8_t* %10, i64 0, i32 0, i64 7
  %84 = load i16, i16* %83, align 2
  %85 = getelementptr inbounds %struct.uint16v8_t, %struct.uint16v8_t* %13, i64 0, i32 0, i64 7
  %86 = load i16, i16* %85, align 2
  %87 = icmp sgt i16 %84, %86
  %88 = sext i1 %87 to i16
  call void @llvm.lifetime.start(i64 16, i8* nonnull %20)
  store i64 %55, i64* %21, align 16
  store i64 %82, i64* %22, align 8
  %89 = getelementptr inbounds [8 x i16], [8 x i16]* %23, i64 0, i64 7
  store i16 %88, i16* %89, align 2
  %90 = load i64, i64* %22, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %20)
  %91 = lshr i64 %55, 16
  %92 = lshr i64 %55, 32
  %93 = lshr i64 %55, 48
  %94 = trunc i64 %55 to i16
  %95 = trunc i64 %91 to i16
  %96 = trunc i64 %92 to i16
  %97 = trunc i64 %93 to i16
  %98 = bitcast i8* %2 to i16*
  store i16 %94, i16* %98, align 1
  %99 = getelementptr inbounds i8, i8* %2, i64 2
  %100 = bitcast i8* %99 to i16*
  store i16 %95, i16* %100, align 1
  %101 = getelementptr inbounds i8, i8* %2, i64 4
  %102 = bitcast i8* %101 to i16*
  store i16 %96, i16* %102, align 1
  %103 = getelementptr inbounds i8, i8* %2, i64 6
  %104 = bitcast i8* %103 to i16*
  store i16 %97, i16* %104, align 1
  %105 = trunc i64 %90 to i16
  %106 = getelementptr inbounds i8, i8* %2, i64 8
  %107 = bitcast i8* %106 to i16*
  store i16 %105, i16* %107, align 1
  %108 = lshr i64 %90, 16
  %109 = trunc i64 %108 to i16
  %110 = getelementptr inbounds i8, i8* %2, i64 10
  %111 = bitcast i8* %110 to i16*
  store i16 %109, i16* %111, align 1
  %112 = lshr i64 %90, 32
  %113 = trunc i64 %112 to i16
  %114 = getelementptr inbounds i8, i8* %2, i64 12
  %115 = bitcast i8* %114 to i16*
  store i16 %113, i16* %115, align 1
  %116 = lshr i64 %90, 48
  %117 = trunc i64 %116 to i16
  %118 = getelementptr inbounds i8, i8* %2, i64 14
  %119 = bitcast i8* %118 to i16*
  store i16 %117, i16* %119, align 1
  call void @llvm.lifetime.end(i64 16, i8* nonnull %17) 
  call void @llvm.lifetime.end(i64 16, i8* nonnull %14) 
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L7PCMPGTBI3VnWI8vec128_tE2VnIS2_E3MVnIS2_EEEP6MemoryS9_R5StateT_T0_T1_(%struct.Memory* returned, %struct.State* nocapture readnone dereferenceable(3376), i8* nocapture, i8* nocapture readonly, i64)  {
  %6 = alloca <2 x i64>, align 16
  %7 = bitcast <2 x i64>* %6 to { i64, i64 }*
  %8 = alloca <2 x i64>, align 16
  %9 = bitcast <2 x i64>* %8 to { i64, i64 }*
  %10 = bitcast <2 x i64>* %8 to %struct.uint8v16_t*
  %11 = alloca <2 x i64>, align 16
  %12 = bitcast <2 x i64>* %11 to { i64, i64 }*
  %13 = bitcast <2 x i64>* %11 to %struct.uint8v16_t*
  %14 = bitcast <2 x i64>* %8 to i8*
  call void @llvm.lifetime.start(i64 16, i8* nonnull %14) 
  %15 = bitcast i8* %3 to <2 x i64>*
  %16 = load <2 x i64>, <2 x i64>* %15, align 1
  store <2 x i64> %16, <2 x i64>* %8, align 16
  %17 = bitcast <2 x i64>* %11 to i8*
  call void @llvm.lifetime.start(i64 16, i8* nonnull %17) 
  %18 = inttoptr i64 %4 to i8*
  %19 = load i8, i8* %18
  %20 = add i64 %4, 1
  %21 = inttoptr i64 %20 to i8*
  %22 = load i8, i8* %21
  %23 = add i64 %4, 2
  %24 = inttoptr i64 %23 to i8*
  %25 = load i8, i8* %24
  %26 = add i64 %4, 3
  %27 = inttoptr i64 %26 to i8*
  %28 = load i8, i8* %27
  %29 = add i64 %4, 4
  %30 = inttoptr i64 %29 to i8*
  %31 = load i8, i8* %30
  %32 = add i64 %4, 5
  %33 = inttoptr i64 %32 to i8*
  %34 = load i8, i8* %33
  %35 = add i64 %4, 6
  %36 = inttoptr i64 %35 to i8*
  %37 = load i8, i8* %36
  %38 = add i64 %4, 7
  %39 = inttoptr i64 %38 to i8*
  %40 = load i8, i8* %39
  %41 = add i64 %4, 8
  %42 = inttoptr i64 %41 to i8*
  %43 = load i8, i8* %42
  %44 = add i64 %4, 9
  %45 = inttoptr i64 %44 to i8*
  %46 = load i8, i8* %45
  %47 = add i64 %4, 10
  %48 = inttoptr i64 %47 to i8*
  %49 = load i8, i8* %48
  %50 = add i64 %4, 11
  %51 = inttoptr i64 %50 to i8*
  %52 = load i8, i8* %51
  %53 = add i64 %4, 12
  %54 = inttoptr i64 %53 to i8*
  %55 = load i8, i8* %54
  %56 = add i64 %4, 13
  %57 = inttoptr i64 %56 to i8*
  %58 = load i8, i8* %57
  %59 = add i64 %4, 14
  %60 = inttoptr i64 %59 to i8*
  %61 = load i8, i8* %60
  %62 = add i64 %4, 15
  %63 = inttoptr i64 %62 to i8*
  %64 = load i8, i8* %63
  %65 = insertelement <2 x i8> undef, i8 %40, i32 0
  %66 = insertelement <2 x i8> %65, i8 %64, i32 1
  %67 = zext <2 x i8> %66 to <2 x i64>
  %68 = shl nuw <2 x i64> %67, <i64 56, i64 56>
  %69 = insertelement <2 x i8> undef, i8 %37, i32 0
  %70 = insertelement <2 x i8> %69, i8 %61, i32 1
  %71 = zext <2 x i8> %70 to <2 x i64>
  %72 = shl nuw nsw <2 x i64> %71, <i64 48, i64 48>
  %73 = insertelement <2 x i8> undef, i8 %34, i32 0
  %74 = insertelement <2 x i8> %73, i8 %58, i32 1
  %75 = zext <2 x i8> %74 to <2 x i64>
  %76 = shl nuw nsw <2 x i64> %75, <i64 40, i64 40>
  %77 = insertelement <2 x i8> undef, i8 %31, i32 0
  %78 = insertelement <2 x i8> %77, i8 %55, i32 1
  %79 = zext <2 x i8> %78 to <2 x i64>
  %80 = shl nuw nsw <2 x i64> %79, <i64 32, i64 32>
  %81 = insertelement <2 x i8> undef, i8 %28, i32 0
  %82 = insertelement <2 x i8> %81, i8 %52, i32 1
  %83 = zext <2 x i8> %82 to <2 x i64>
  %84 = shl nuw nsw <2 x i64> %83, <i64 24, i64 24>
  %85 = insertelement <2 x i8> undef, i8 %25, i32 0
  %86 = insertelement <2 x i8> %85, i8 %49, i32 1
  %87 = zext <2 x i8> %86 to <2 x i64>
  %88 = shl nuw nsw <2 x i64> %87, <i64 16, i64 16>
  %89 = insertelement <2 x i8> undef, i8 %22, i32 0
  %90 = insertelement <2 x i8> %89, i8 %46, i32 1
  %91 = zext <2 x i8> %90 to <2 x i64>
  %92 = shl nuw nsw <2 x i64> %91, <i64 8, i64 8>
  %93 = insertelement <2 x i8> undef, i8 %19, i32 0
  %94 = insertelement <2 x i8> %93, i8 %43, i32 1
  %95 = zext <2 x i8> %94 to <2 x i64>
  %96 = or <2 x i64> %92, %95
  %97 = or <2 x i64> %96, %88
  %98 = or <2 x i64> %97, %84
  %99 = or <2 x i64> %98, %80
  %100 = or <2 x i64> %99, %76
  %101 = or <2 x i64> %100, %72
  %102 = or <2 x i64> %101, %68
  store <2 x i64> %102, <2 x i64>* %11, align 16
  %103 = bitcast <2 x i64>* %6 to i8*
  %104 = getelementptr inbounds <2 x i64>, <2 x i64>* %6, i64 0, i64 0
  %105 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %7, i64 0, i32 1
  %106 = bitcast <2 x i64>* %6 to [16 x i8]*
  %107 = extractelement <2 x i64> %16, i32 0
  %108 = trunc i64 %107 to i8
  %109 = icmp sgt i8 %108, %19
  %110 = sext i1 %109 to i8
  call void @llvm.lifetime.start(i64 16, i8* nonnull %103)
  store <2 x i64> zeroinitializer, <2 x i64>* %6, align 16
  %111 = bitcast <2 x i64>* %6 to i8*
  store i8 %110, i8* %111, align 16
  %112 = load i64, i64* %104, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %103)
  %113 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %10, i64 0, i32 0, i64 1
  %114 = load i8, i8* %113, align 1
  %115 = icmp sgt i8 %114, %22
  %116 = sext i1 %115 to i8
  call void @llvm.lifetime.start(i64 16, i8* nonnull %103)
  store i64 %112, i64* %104, align 16
  store i64 0, i64* %105, align 8
  %117 = getelementptr inbounds [16 x i8], [16 x i8]* %106, i64 0, i64 1
  store i8 %116, i8* %117, align 1
  %118 = load i64, i64* %104, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %103)
  %119 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %10, i64 0, i32 0, i64 2
  %120 = load i8, i8* %119, align 2
  %121 = icmp sgt i8 %120, %25
  %122 = sext i1 %121 to i8
  call void @llvm.lifetime.start(i64 16, i8* nonnull %103)
  store i64 %118, i64* %104, align 16
  store i64 0, i64* %105, align 8
  %123 = getelementptr inbounds [16 x i8], [16 x i8]* %106, i64 0, i64 2
  store i8 %122, i8* %123, align 2
  %124 = load i64, i64* %104, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %103)
  %125 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %10, i64 0, i32 0, i64 3
  %126 = load i8, i8* %125, align 1
  %127 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %13, i64 0, i32 0, i64 3
  %128 = load i8, i8* %127, align 1
  %129 = icmp sgt i8 %126, %128
  %130 = sext i1 %129 to i8
  call void @llvm.lifetime.start(i64 16, i8* nonnull %103)
  store i64 %124, i64* %104, align 16
  store i64 0, i64* %105, align 8
  %131 = getelementptr inbounds [16 x i8], [16 x i8]* %106, i64 0, i64 3
  store i8 %130, i8* %131, align 1
  %132 = load i64, i64* %104, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %103)
  %133 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %10, i64 0, i32 0, i64 4
  %134 = load i8, i8* %133, align 4
  %135 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %13, i64 0, i32 0, i64 4
  %136 = load i8, i8* %135, align 4
  %137 = icmp sgt i8 %134, %136
  %138 = sext i1 %137 to i8
  call void @llvm.lifetime.start(i64 16, i8* nonnull %103)
  store i64 %132, i64* %104, align 16
  store i64 0, i64* %105, align 8
  %139 = getelementptr inbounds [16 x i8], [16 x i8]* %106, i64 0, i64 4
  store i8 %138, i8* %139, align 4
  %140 = load i64, i64* %104, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %103)
  %141 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %10, i64 0, i32 0, i64 5
  %142 = load i8, i8* %141, align 1
  %143 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %13, i64 0, i32 0, i64 5
  %144 = load i8, i8* %143, align 1
  %145 = icmp sgt i8 %142, %144
  %146 = sext i1 %145 to i8
  call void @llvm.lifetime.start(i64 16, i8* nonnull %103)
  store i64 %140, i64* %104, align 16
  store i64 0, i64* %105, align 8
  %147 = getelementptr inbounds [16 x i8], [16 x i8]* %106, i64 0, i64 5
  store i8 %146, i8* %147, align 1
  %148 = load i64, i64* %104, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %103)
  %149 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %10, i64 0, i32 0, i64 6
  %150 = load i8, i8* %149, align 2
  %151 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %13, i64 0, i32 0, i64 6
  %152 = load i8, i8* %151, align 2
  %153 = icmp sgt i8 %150, %152
  %154 = sext i1 %153 to i8
  call void @llvm.lifetime.start(i64 16, i8* nonnull %103)
  store i64 %148, i64* %104, align 16
  store i64 0, i64* %105, align 8
  %155 = getelementptr inbounds [16 x i8], [16 x i8]* %106, i64 0, i64 6
  store i8 %154, i8* %155, align 2
  %156 = load i64, i64* %104, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %103)
  %157 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %10, i64 0, i32 0, i64 7
  %158 = load i8, i8* %157, align 1
  %159 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %13, i64 0, i32 0, i64 7
  %160 = load i8, i8* %159, align 1
  %161 = icmp sgt i8 %158, %160
  %162 = sext i1 %161 to i8
  call void @llvm.lifetime.start(i64 16, i8* nonnull %103)
  store i64 %156, i64* %104, align 16
  store i64 0, i64* %105, align 8
  %163 = getelementptr inbounds [16 x i8], [16 x i8]* %106, i64 0, i64 7
  store i8 %162, i8* %163, align 1
  %164 = load i64, i64* %104, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %103)
  %165 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %9, i64 0, i32 1
  %166 = bitcast i64* %165 to i8*
  %167 = load i8, i8* %166, align 8
  %168 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %12, i64 0, i32 1
  %169 = bitcast i64* %168 to i8*
  %170 = load i8, i8* %169, align 8
  %171 = icmp sgt i8 %167, %170
  %172 = sext i1 %171 to i8
  call void @llvm.lifetime.start(i64 16, i8* nonnull %103)
  store i64 %164, i64* %104, align 16
  store i64 0, i64* %105, align 8
  %173 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %7, i64 0, i32 1
  %174 = bitcast i64* %173 to i8*
  store i8 %172, i8* %174, align 8
  %175 = load i64, i64* %105, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %103)
  %176 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %10, i64 0, i32 0, i64 9
  %177 = load i8, i8* %176, align 1
  %178 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %13, i64 0, i32 0, i64 9
  %179 = load i8, i8* %178, align 1
  %180 = icmp sgt i8 %177, %179
  %181 = sext i1 %180 to i8
  call void @llvm.lifetime.start(i64 16, i8* nonnull %103)
  store i64 %164, i64* %104, align 16
  store i64 %175, i64* %105, align 8
  %182 = getelementptr inbounds [16 x i8], [16 x i8]* %106, i64 0, i64 9
  store i8 %181, i8* %182, align 1
  %183 = load i64, i64* %105, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %103)
  %184 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %10, i64 0, i32 0, i64 10
  %185 = load i8, i8* %184, align 2
  %186 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %13, i64 0, i32 0, i64 10
  %187 = load i8, i8* %186, align 2
  %188 = icmp sgt i8 %185, %187
  %189 = sext i1 %188 to i8
  call void @llvm.lifetime.start(i64 16, i8* nonnull %103)
  store i64 %164, i64* %104, align 16
  store i64 %183, i64* %105, align 8
  %190 = getelementptr inbounds [16 x i8], [16 x i8]* %106, i64 0, i64 10
  store i8 %189, i8* %190, align 2
  %191 = load i64, i64* %105, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %103)
  %192 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %10, i64 0, i32 0, i64 11
  %193 = load i8, i8* %192, align 1
  %194 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %13, i64 0, i32 0, i64 11
  %195 = load i8, i8* %194, align 1
  %196 = icmp sgt i8 %193, %195
  %197 = sext i1 %196 to i8
  call void @llvm.lifetime.start(i64 16, i8* nonnull %103)
  store i64 %164, i64* %104, align 16
  store i64 %191, i64* %105, align 8
  %198 = getelementptr inbounds [16 x i8], [16 x i8]* %106, i64 0, i64 11
  store i8 %197, i8* %198, align 1
  %199 = load i64, i64* %105, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %103)
  %200 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %10, i64 0, i32 0, i64 12
  %201 = load i8, i8* %200, align 4
  %202 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %13, i64 0, i32 0, i64 12
  %203 = load i8, i8* %202, align 4
  %204 = icmp sgt i8 %201, %203
  %205 = sext i1 %204 to i8
  call void @llvm.lifetime.start(i64 16, i8* nonnull %103)
  store i64 %164, i64* %104, align 16
  store i64 %199, i64* %105, align 8
  %206 = getelementptr inbounds [16 x i8], [16 x i8]* %106, i64 0, i64 12
  store i8 %205, i8* %206, align 4
  %207 = load i64, i64* %105, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %103)
  %208 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %10, i64 0, i32 0, i64 13
  %209 = load i8, i8* %208, align 1
  %210 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %13, i64 0, i32 0, i64 13
  %211 = load i8, i8* %210, align 1
  %212 = icmp sgt i8 %209, %211
  %213 = sext i1 %212 to i8
  call void @llvm.lifetime.start(i64 16, i8* nonnull %103)
  store i64 %164, i64* %104, align 16
  store i64 %207, i64* %105, align 8
  %214 = getelementptr inbounds [16 x i8], [16 x i8]* %106, i64 0, i64 13
  store i8 %213, i8* %214, align 1
  %215 = load i64, i64* %105, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %103)
  %216 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %10, i64 0, i32 0, i64 14
  %217 = load i8, i8* %216, align 2
  %218 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %13, i64 0, i32 0, i64 14
  %219 = load i8, i8* %218, align 2
  %220 = icmp sgt i8 %217, %219
  %221 = sext i1 %220 to i8
  call void @llvm.lifetime.start(i64 16, i8* nonnull %103)
  store i64 %164, i64* %104, align 16
  store i64 %215, i64* %105, align 8
  %222 = getelementptr inbounds [16 x i8], [16 x i8]* %106, i64 0, i64 14
  store i8 %221, i8* %222, align 2
  %223 = load i64, i64* %105, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %103)
  %224 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %10, i64 0, i32 0, i64 15
  %225 = load i8, i8* %224, align 1
  %226 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %13, i64 0, i32 0, i64 15
  %227 = load i8, i8* %226, align 1
  %228 = icmp sgt i8 %225, %227
  %229 = sext i1 %228 to i8
  call void @llvm.lifetime.start(i64 16, i8* nonnull %103)
  store i64 %164, i64* %104, align 16
  store i64 %223, i64* %105, align 8
  %230 = getelementptr inbounds [16 x i8], [16 x i8]* %106, i64 0, i64 15
  store i8 %229, i8* %230, align 1
  %231 = load i64, i64* %105, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %103)
  %232 = lshr i64 %164, 8
  %233 = lshr i64 %164, 16
  %234 = lshr i64 %164, 24
  %235 = lshr i64 %164, 32
  %236 = lshr i64 %164, 40
  %237 = lshr i64 %164, 48
  %238 = lshr i64 %164, 56
  %239 = trunc i64 %164 to i8
  %240 = trunc i64 %232 to i8
  %241 = trunc i64 %233 to i8
  %242 = trunc i64 %234 to i8
  %243 = trunc i64 %235 to i8
  %244 = trunc i64 %236 to i8
  %245 = trunc i64 %237 to i8
  %246 = trunc i64 %238 to i8
  store i8 %239, i8* %2, align 1
  %247 = getelementptr inbounds i8, i8* %2, i64 1
  store i8 %240, i8* %247, align 1
  %248 = getelementptr inbounds i8, i8* %2, i64 2
  store i8 %241, i8* %248, align 1
  %249 = getelementptr inbounds i8, i8* %2, i64 3
  store i8 %242, i8* %249, align 1
  %250 = getelementptr inbounds i8, i8* %2, i64 4
  store i8 %243, i8* %250, align 1
  %251 = getelementptr inbounds i8, i8* %2, i64 5
  store i8 %244, i8* %251, align 1
  %252 = getelementptr inbounds i8, i8* %2, i64 6
  store i8 %245, i8* %252, align 1
  %253 = getelementptr inbounds i8, i8* %2, i64 7
  store i8 %246, i8* %253, align 1
  %254 = trunc i64 %231 to i8
  %255 = getelementptr inbounds i8, i8* %2, i64 8
  store i8 %254, i8* %255, align 1
  %256 = lshr i64 %231, 8
  %257 = trunc i64 %256 to i8
  %258 = getelementptr inbounds i8, i8* %2, i64 9
  store i8 %257, i8* %258, align 1
  %259 = lshr i64 %231, 16
  %260 = trunc i64 %259 to i8
  %261 = getelementptr inbounds i8, i8* %2, i64 10
  store i8 %260, i8* %261, align 1
  %262 = lshr i64 %231, 24
  %263 = trunc i64 %262 to i8
  %264 = getelementptr inbounds i8, i8* %2, i64 11
  store i8 %263, i8* %264, align 1
  %265 = lshr i64 %231, 32
  %266 = trunc i64 %265 to i8
  %267 = getelementptr inbounds i8, i8* %2, i64 12
  store i8 %266, i8* %267, align 1
  %268 = lshr i64 %231, 40
  %269 = trunc i64 %268 to i8
  %270 = getelementptr inbounds i8, i8* %2, i64 13
  store i8 %269, i8* %270, align 1
  %271 = lshr i64 %231, 48
  %272 = trunc i64 %271 to i8
  %273 = getelementptr inbounds i8, i8* %2, i64 14
  store i8 %272, i8* %273, align 1
  %274 = lshr i64 %231, 56
  %275 = trunc i64 %274 to i8
  %276 = getelementptr inbounds i8, i8* %2, i64 15
  store i8 %275, i8* %276, align 1
  call void @llvm.lifetime.end(i64 16, i8* nonnull %17) 
  call void @llvm.lifetime.end(i64 16, i8* nonnull %14) 
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L7PCMPGTBI3VnWI8vec128_tE2VnIS2_ES5_EEP6MemoryS7_R5StateT_T0_T1_(%struct.Memory* readnone returned, %struct.State* nocapture readnone dereferenceable(3376), i8* nocapture, i8* nocapture readonly, i8* nocapture readonly)  {
  %6 = alloca <2 x i64>, align 16
  %7 = bitcast <2 x i64>* %6 to { i64, i64 }*
  %8 = alloca <2 x i64>, align 16
  %9 = bitcast <2 x i64>* %8 to { i64, i64 }*
  %10 = bitcast <2 x i64>* %8 to %struct.uint8v16_t*
  %11 = alloca <2 x i64>, align 16
  %12 = bitcast <2 x i64>* %11 to { i64, i64 }*
  %13 = bitcast <2 x i64>* %11 to %struct.uint8v16_t*
  %14 = bitcast <2 x i64>* %8 to i8*
  call void @llvm.lifetime.start(i64 16, i8* nonnull %14) 
  %15 = bitcast i8* %3 to <2 x i64>*
  %16 = load <2 x i64>, <2 x i64>* %15, align 1
  store <2 x i64> %16, <2 x i64>* %8, align 16
  %17 = bitcast <2 x i64>* %11 to i8*
  call void @llvm.lifetime.start(i64 16, i8* nonnull %17) 
  %18 = bitcast i8* %4 to <2 x i64>*
  %19 = load <2 x i64>, <2 x i64>* %18, align 1
  store <2 x i64> %19, <2 x i64>* %11, align 16
  %20 = bitcast <2 x i64>* %6 to i8*
  %21 = getelementptr inbounds <2 x i64>, <2 x i64>* %6, i64 0, i64 0
  %22 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %7, i64 0, i32 1
  %23 = bitcast <2 x i64>* %6 to [16 x i8]*
  %24 = extractelement <2 x i64> %16, i32 0
  %25 = trunc i64 %24 to i8
  %26 = extractelement <2 x i64> %19, i32 0
  %27 = trunc i64 %26 to i8
  %28 = icmp sgt i8 %25, %27
  %29 = sext i1 %28 to i8
  call void @llvm.lifetime.start(i64 16, i8* nonnull %20)
  store <2 x i64> zeroinitializer, <2 x i64>* %6, align 16
  %30 = bitcast <2 x i64>* %6 to i8*
  store i8 %29, i8* %30, align 16
  %31 = load i64, i64* %21, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %20)
  %32 = lshr i64 %24, 8
  %33 = trunc i64 %32 to i8
  %34 = lshr i64 %26, 8
  %35 = trunc i64 %34 to i8
  %36 = icmp sgt i8 %33, %35
  %37 = sext i1 %36 to i8
  call void @llvm.lifetime.start(i64 16, i8* nonnull %20)
  store i64 %31, i64* %21, align 16
  store i64 0, i64* %22, align 8
  %38 = getelementptr inbounds [16 x i8], [16 x i8]* %23, i64 0, i64 1
  store i8 %37, i8* %38, align 1
  %39 = load i64, i64* %21, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %20)
  %40 = lshr i64 %24, 16
  %41 = trunc i64 %40 to i8
  %42 = lshr i64 %26, 16
  %43 = trunc i64 %42 to i8
  %44 = icmp sgt i8 %41, %43
  %45 = sext i1 %44 to i8
  call void @llvm.lifetime.start(i64 16, i8* nonnull %20)
  store i64 %39, i64* %21, align 16
  store i64 0, i64* %22, align 8
  %46 = getelementptr inbounds [16 x i8], [16 x i8]* %23, i64 0, i64 2
  store i8 %45, i8* %46, align 2
  %47 = load i64, i64* %21, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %20)
  %48 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %10, i64 0, i32 0, i64 3
  %49 = load i8, i8* %48, align 1
  %50 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %13, i64 0, i32 0, i64 3
  %51 = load i8, i8* %50, align 1
  %52 = icmp sgt i8 %49, %51
  %53 = sext i1 %52 to i8
  call void @llvm.lifetime.start(i64 16, i8* nonnull %20)
  store i64 %47, i64* %21, align 16
  store i64 0, i64* %22, align 8
  %54 = getelementptr inbounds [16 x i8], [16 x i8]* %23, i64 0, i64 3
  store i8 %53, i8* %54, align 1
  %55 = load i64, i64* %21, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %20)
  %56 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %10, i64 0, i32 0, i64 4
  %57 = load i8, i8* %56, align 4
  %58 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %13, i64 0, i32 0, i64 4
  %59 = load i8, i8* %58, align 4
  %60 = icmp sgt i8 %57, %59
  %61 = sext i1 %60 to i8
  call void @llvm.lifetime.start(i64 16, i8* nonnull %20)
  store i64 %55, i64* %21, align 16
  store i64 0, i64* %22, align 8
  %62 = getelementptr inbounds [16 x i8], [16 x i8]* %23, i64 0, i64 4
  store i8 %61, i8* %62, align 4
  %63 = load i64, i64* %21, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %20)
  %64 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %10, i64 0, i32 0, i64 5
  %65 = load i8, i8* %64, align 1
  %66 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %13, i64 0, i32 0, i64 5
  %67 = load i8, i8* %66, align 1
  %68 = icmp sgt i8 %65, %67
  %69 = sext i1 %68 to i8
  call void @llvm.lifetime.start(i64 16, i8* nonnull %20)
  store i64 %63, i64* %21, align 16
  store i64 0, i64* %22, align 8
  %70 = getelementptr inbounds [16 x i8], [16 x i8]* %23, i64 0, i64 5
  store i8 %69, i8* %70, align 1
  %71 = load i64, i64* %21, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %20)
  %72 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %10, i64 0, i32 0, i64 6
  %73 = load i8, i8* %72, align 2
  %74 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %13, i64 0, i32 0, i64 6
  %75 = load i8, i8* %74, align 2
  %76 = icmp sgt i8 %73, %75
  %77 = sext i1 %76 to i8
  call void @llvm.lifetime.start(i64 16, i8* nonnull %20)
  store i64 %71, i64* %21, align 16
  store i64 0, i64* %22, align 8
  %78 = getelementptr inbounds [16 x i8], [16 x i8]* %23, i64 0, i64 6
  store i8 %77, i8* %78, align 2
  %79 = load i64, i64* %21, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %20)
  %80 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %10, i64 0, i32 0, i64 7
  %81 = load i8, i8* %80, align 1
  %82 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %13, i64 0, i32 0, i64 7
  %83 = load i8, i8* %82, align 1
  %84 = icmp sgt i8 %81, %83
  %85 = sext i1 %84 to i8
  call void @llvm.lifetime.start(i64 16, i8* nonnull %20)
  store i64 %79, i64* %21, align 16
  store i64 0, i64* %22, align 8
  %86 = getelementptr inbounds [16 x i8], [16 x i8]* %23, i64 0, i64 7
  store i8 %85, i8* %86, align 1
  %87 = load i64, i64* %21, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %20)
  %88 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %9, i64 0, i32 1
  %89 = bitcast i64* %88 to i8*
  %90 = load i8, i8* %89, align 8
  %91 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %12, i64 0, i32 1
  %92 = bitcast i64* %91 to i8*
  %93 = load i8, i8* %92, align 8
  %94 = icmp sgt i8 %90, %93
  %95 = sext i1 %94 to i8
  call void @llvm.lifetime.start(i64 16, i8* nonnull %20)
  store i64 %87, i64* %21, align 16
  store i64 0, i64* %22, align 8
  %96 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %7, i64 0, i32 1
  %97 = bitcast i64* %96 to i8*
  store i8 %95, i8* %97, align 8
  %98 = load i64, i64* %22, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %20)
  %99 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %10, i64 0, i32 0, i64 9
  %100 = load i8, i8* %99, align 1
  %101 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %13, i64 0, i32 0, i64 9
  %102 = load i8, i8* %101, align 1
  %103 = icmp sgt i8 %100, %102
  %104 = sext i1 %103 to i8
  call void @llvm.lifetime.start(i64 16, i8* nonnull %20)
  store i64 %87, i64* %21, align 16
  store i64 %98, i64* %22, align 8
  %105 = getelementptr inbounds [16 x i8], [16 x i8]* %23, i64 0, i64 9
  store i8 %104, i8* %105, align 1
  %106 = load i64, i64* %22, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %20)
  %107 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %10, i64 0, i32 0, i64 10
  %108 = load i8, i8* %107, align 2
  %109 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %13, i64 0, i32 0, i64 10
  %110 = load i8, i8* %109, align 2
  %111 = icmp sgt i8 %108, %110
  %112 = sext i1 %111 to i8
  call void @llvm.lifetime.start(i64 16, i8* nonnull %20)
  store i64 %87, i64* %21, align 16
  store i64 %106, i64* %22, align 8
  %113 = getelementptr inbounds [16 x i8], [16 x i8]* %23, i64 0, i64 10
  store i8 %112, i8* %113, align 2
  %114 = load i64, i64* %22, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %20)
  %115 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %10, i64 0, i32 0, i64 11
  %116 = load i8, i8* %115, align 1
  %117 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %13, i64 0, i32 0, i64 11
  %118 = load i8, i8* %117, align 1
  %119 = icmp sgt i8 %116, %118
  %120 = sext i1 %119 to i8
  call void @llvm.lifetime.start(i64 16, i8* nonnull %20)
  store i64 %87, i64* %21, align 16
  store i64 %114, i64* %22, align 8
  %121 = getelementptr inbounds [16 x i8], [16 x i8]* %23, i64 0, i64 11
  store i8 %120, i8* %121, align 1
  %122 = load i64, i64* %22, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %20)
  %123 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %10, i64 0, i32 0, i64 12
  %124 = load i8, i8* %123, align 4
  %125 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %13, i64 0, i32 0, i64 12
  %126 = load i8, i8* %125, align 4
  %127 = icmp sgt i8 %124, %126
  %128 = sext i1 %127 to i8
  call void @llvm.lifetime.start(i64 16, i8* nonnull %20)
  store i64 %87, i64* %21, align 16
  store i64 %122, i64* %22, align 8
  %129 = getelementptr inbounds [16 x i8], [16 x i8]* %23, i64 0, i64 12
  store i8 %128, i8* %129, align 4
  %130 = load i64, i64* %22, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %20)
  %131 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %10, i64 0, i32 0, i64 13
  %132 = load i8, i8* %131, align 1
  %133 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %13, i64 0, i32 0, i64 13
  %134 = load i8, i8* %133, align 1
  %135 = icmp sgt i8 %132, %134
  %136 = sext i1 %135 to i8
  call void @llvm.lifetime.start(i64 16, i8* nonnull %20)
  store i64 %87, i64* %21, align 16
  store i64 %130, i64* %22, align 8
  %137 = getelementptr inbounds [16 x i8], [16 x i8]* %23, i64 0, i64 13
  store i8 %136, i8* %137, align 1
  %138 = load i64, i64* %22, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %20)
  %139 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %10, i64 0, i32 0, i64 14
  %140 = load i8, i8* %139, align 2
  %141 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %13, i64 0, i32 0, i64 14
  %142 = load i8, i8* %141, align 2
  %143 = icmp sgt i8 %140, %142
  %144 = sext i1 %143 to i8
  call void @llvm.lifetime.start(i64 16, i8* nonnull %20)
  store i64 %87, i64* %21, align 16
  store i64 %138, i64* %22, align 8
  %145 = getelementptr inbounds [16 x i8], [16 x i8]* %23, i64 0, i64 14
  store i8 %144, i8* %145, align 2
  %146 = load i64, i64* %22, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %20)
  %147 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %10, i64 0, i32 0, i64 15
  %148 = load i8, i8* %147, align 1
  %149 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %13, i64 0, i32 0, i64 15
  %150 = load i8, i8* %149, align 1
  %151 = icmp sgt i8 %148, %150
  %152 = sext i1 %151 to i8
  call void @llvm.lifetime.start(i64 16, i8* nonnull %20)
  store i64 %87, i64* %21, align 16
  store i64 %146, i64* %22, align 8
  %153 = getelementptr inbounds [16 x i8], [16 x i8]* %23, i64 0, i64 15
  store i8 %152, i8* %153, align 1
  %154 = load i64, i64* %22, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %20)
  %155 = lshr i64 %87, 8
  %156 = lshr i64 %87, 16
  %157 = lshr i64 %87, 24
  %158 = lshr i64 %87, 32
  %159 = lshr i64 %87, 40
  %160 = lshr i64 %87, 48
  %161 = lshr i64 %87, 56
  %162 = trunc i64 %87 to i8
  %163 = trunc i64 %155 to i8
  %164 = trunc i64 %156 to i8
  %165 = trunc i64 %157 to i8
  %166 = trunc i64 %158 to i8
  %167 = trunc i64 %159 to i8
  %168 = trunc i64 %160 to i8
  %169 = trunc i64 %161 to i8
  store i8 %162, i8* %2, align 1
  %170 = getelementptr inbounds i8, i8* %2, i64 1
  store i8 %163, i8* %170, align 1
  %171 = getelementptr inbounds i8, i8* %2, i64 2
  store i8 %164, i8* %171, align 1
  %172 = getelementptr inbounds i8, i8* %2, i64 3
  store i8 %165, i8* %172, align 1
  %173 = getelementptr inbounds i8, i8* %2, i64 4
  store i8 %166, i8* %173, align 1
  %174 = getelementptr inbounds i8, i8* %2, i64 5
  store i8 %167, i8* %174, align 1
  %175 = getelementptr inbounds i8, i8* %2, i64 6
  store i8 %168, i8* %175, align 1
  %176 = getelementptr inbounds i8, i8* %2, i64 7
  store i8 %169, i8* %176, align 1
  %177 = trunc i64 %154 to i8
  %178 = getelementptr inbounds i8, i8* %2, i64 8
  store i8 %177, i8* %178, align 1
  %179 = lshr i64 %154, 8
  %180 = trunc i64 %179 to i8
  %181 = getelementptr inbounds i8, i8* %2, i64 9
  store i8 %180, i8* %181, align 1
  %182 = lshr i64 %154, 16
  %183 = trunc i64 %182 to i8
  %184 = getelementptr inbounds i8, i8* %2, i64 10
  store i8 %183, i8* %184, align 1
  %185 = lshr i64 %154, 24
  %186 = trunc i64 %185 to i8
  %187 = getelementptr inbounds i8, i8* %2, i64 11
  store i8 %186, i8* %187, align 1
  %188 = lshr i64 %154, 32
  %189 = trunc i64 %188 to i8
  %190 = getelementptr inbounds i8, i8* %2, i64 12
  store i8 %189, i8* %190, align 1
  %191 = lshr i64 %154, 40
  %192 = trunc i64 %191 to i8
  %193 = getelementptr inbounds i8, i8* %2, i64 13
  store i8 %192, i8* %193, align 1
  %194 = lshr i64 %154, 48
  %195 = trunc i64 %194 to i8
  %196 = getelementptr inbounds i8, i8* %2, i64 14
  store i8 %195, i8* %196, align 1
  %197 = lshr i64 %154, 56
  %198 = trunc i64 %197 to i8
  %199 = getelementptr inbounds i8, i8* %2, i64 15
  store i8 %198, i8* %199, align 1
  call void @llvm.lifetime.end(i64 16, i8* nonnull %17) 
  call void @llvm.lifetime.end(i64 16, i8* nonnull %14) 
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L7PCMPGTDI3VnWI8vec128_tE2VnIS2_E3MVnIS2_EEEP6MemoryS9_R5StateT_T0_T1_(%struct.Memory* returned, %struct.State* nocapture readnone dereferenceable(3376), i8* nocapture, i8* nocapture readonly, i64)  {
  %6 = alloca <2 x i64>, align 16
  %7 = bitcast <2 x i64>* %6 to { i64, i64 }*
  %8 = bitcast i8* %3 to i64*
  %9 = load i64, i64* %8, align 1
  %10 = getelementptr inbounds i8, i8* %3, i64 8
  %11 = bitcast i8* %10 to i64*
  %12 = load i64, i64* %11, align 1
  %13 = inttoptr i64 %4 to i32*
  %14 = load i32, i32* %13
  %15 = add i64 %4, 4
  %16 = inttoptr i64 %15 to i32*
  %17 = load i32, i32* %16
  %18 = add i64 %4, 8
  %19 = inttoptr i64 %18 to i32*
  %20 = load i32, i32* %19
  %21 = add i64 %4, 12
  %22 = inttoptr i64 %21 to i32*
  %23 = load i32, i32* %22
  %24 = bitcast <2 x i64>* %6 to i8*
  %25 = getelementptr inbounds <2 x i64>, <2 x i64>* %6, i64 0, i64 0
  %26 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %7, i64 0, i32 1
  %27 = bitcast <2 x i64>* %6 to [4 x i32]*
  %28 = trunc i64 %9 to i32
  %29 = icmp sgt i32 %28, %14
  %30 = sext i1 %29 to i32
  call void @llvm.lifetime.start(i64 16, i8* nonnull %24)
  store <2 x i64> zeroinitializer, <2 x i64>* %6, align 16
  %31 = bitcast <2 x i64>* %6 to i32*
  store i32 %30, i32* %31, align 16
  %32 = load i64, i64* %25, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %24)
  %33 = lshr i64 %9, 32
  %34 = trunc i64 %33 to i32
  %35 = icmp sgt i32 %34, %17
  %36 = sext i1 %35 to i32
  call void @llvm.lifetime.start(i64 16, i8* nonnull %24)
  store i64 %32, i64* %25, align 16
  store i64 0, i64* %26, align 8
  %37 = getelementptr inbounds [4 x i32], [4 x i32]* %27, i64 0, i64 1
  store i32 %36, i32* %37, align 4
  %38 = load i64, i64* %25, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %24)
  %39 = trunc i64 %12 to i32
  %40 = icmp sgt i32 %39, %20
  %41 = sext i1 %40 to i32
  call void @llvm.lifetime.start(i64 16, i8* nonnull %24)
  store i64 %38, i64* %25, align 16
  store i64 0, i64* %26, align 8
  %42 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %7, i64 0, i32 1
  %43 = bitcast i64* %42 to i32*
  store i32 %41, i32* %43, align 8
  %44 = load i64, i64* %26, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %24)
  %45 = lshr i64 %12, 32
  %46 = trunc i64 %45 to i32
  %47 = icmp sgt i32 %46, %23
  %48 = sext i1 %47 to i32
  call void @llvm.lifetime.start(i64 16, i8* nonnull %24)
  store i64 %38, i64* %25, align 16
  store i64 %44, i64* %26, align 8
  %49 = getelementptr inbounds [4 x i32], [4 x i32]* %27, i64 0, i64 3
  store i32 %48, i32* %49, align 4
  %50 = load i64, i64* %26, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %24)
  %51 = lshr i64 %38, 32
  %52 = trunc i64 %38 to i32
  %53 = trunc i64 %51 to i32
  %54 = bitcast i8* %2 to i32*
  store i32 %52, i32* %54, align 1
  %55 = getelementptr inbounds i8, i8* %2, i64 4
  %56 = bitcast i8* %55 to i32*
  store i32 %53, i32* %56, align 1
  %57 = trunc i64 %50 to i32
  %58 = getelementptr inbounds i8, i8* %2, i64 8
  %59 = bitcast i8* %58 to i32*
  store i32 %57, i32* %59, align 1
  %60 = lshr i64 %50, 32
  %61 = trunc i64 %60 to i32
  %62 = getelementptr inbounds i8, i8* %2, i64 12
  %63 = bitcast i8* %62 to i32*
  store i32 %61, i32* %63, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L7PCMPGTDI3VnWI8vec128_tE2VnIS2_ES5_EEP6MemoryS7_R5StateT_T0_T1_(%struct.Memory* readnone returned, %struct.State* nocapture readnone dereferenceable(3376), i8* nocapture, i8* nocapture readonly, i8* nocapture readonly)  {
  %6 = alloca <2 x i64>, align 16
  %7 = bitcast <2 x i64>* %6 to { i64, i64 }*
  %8 = bitcast i8* %3 to i64*
  %9 = load i64, i64* %8, align 1
  %10 = getelementptr inbounds i8, i8* %3, i64 8
  %11 = bitcast i8* %10 to i64*
  %12 = load i64, i64* %11, align 1
  %13 = bitcast i8* %4 to i64*
  %14 = load i64, i64* %13, align 1
  %15 = getelementptr inbounds i8, i8* %4, i64 8
  %16 = bitcast i8* %15 to i64*
  %17 = load i64, i64* %16, align 1
  %18 = bitcast <2 x i64>* %6 to i8*
  %19 = getelementptr inbounds <2 x i64>, <2 x i64>* %6, i64 0, i64 0
  %20 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %7, i64 0, i32 1
  %21 = bitcast <2 x i64>* %6 to [4 x i32]*
  %22 = trunc i64 %9 to i32
  %23 = trunc i64 %14 to i32
  %24 = icmp sgt i32 %22, %23
  %25 = sext i1 %24 to i32
  call void @llvm.lifetime.start(i64 16, i8* nonnull %18)
  store <2 x i64> zeroinitializer, <2 x i64>* %6, align 16
  %26 = bitcast <2 x i64>* %6 to i32*
  store i32 %25, i32* %26, align 16
  %27 = load i64, i64* %19, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %18)
  %28 = lshr i64 %9, 32
  %29 = trunc i64 %28 to i32
  %30 = lshr i64 %14, 32
  %31 = trunc i64 %30 to i32
  %32 = icmp sgt i32 %29, %31
  %33 = sext i1 %32 to i32
  call void @llvm.lifetime.start(i64 16, i8* nonnull %18)
  store i64 %27, i64* %19, align 16
  store i64 0, i64* %20, align 8
  %34 = getelementptr inbounds [4 x i32], [4 x i32]* %21, i64 0, i64 1
  store i32 %33, i32* %34, align 4
  %35 = load i64, i64* %19, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %18)
  %36 = trunc i64 %12 to i32
  %37 = trunc i64 %17 to i32
  %38 = icmp sgt i32 %36, %37
  %39 = sext i1 %38 to i32
  call void @llvm.lifetime.start(i64 16, i8* nonnull %18)
  store i64 %35, i64* %19, align 16
  store i64 0, i64* %20, align 8
  %40 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %7, i64 0, i32 1
  %41 = bitcast i64* %40 to i32*
  store i32 %39, i32* %41, align 8
  %42 = load i64, i64* %20, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %18)
  %43 = lshr i64 %12, 32
  %44 = trunc i64 %43 to i32
  %45 = lshr i64 %17, 32
  %46 = trunc i64 %45 to i32
  %47 = icmp sgt i32 %44, %46
  %48 = sext i1 %47 to i32
  call void @llvm.lifetime.start(i64 16, i8* nonnull %18)
  store i64 %35, i64* %19, align 16
  store i64 %42, i64* %20, align 8
  %49 = getelementptr inbounds [4 x i32], [4 x i32]* %21, i64 0, i64 3
  store i32 %48, i32* %49, align 4
  %50 = load i64, i64* %20, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %18)
  %51 = lshr i64 %35, 32
  %52 = trunc i64 %35 to i32
  %53 = trunc i64 %51 to i32
  %54 = bitcast i8* %2 to i32*
  store i32 %52, i32* %54, align 1
  %55 = getelementptr inbounds i8, i8* %2, i64 4
  %56 = bitcast i8* %55 to i32*
  store i32 %53, i32* %56, align 1
  %57 = trunc i64 %50 to i32
  %58 = getelementptr inbounds i8, i8* %2, i64 8
  %59 = bitcast i8* %58 to i32*
  store i32 %57, i32* %59, align 1
  %60 = lshr i64 %50, 32
  %61 = trunc i64 %60 to i32
  %62 = getelementptr inbounds i8, i8* %2, i64 12
  %63 = bitcast i8* %62 to i32*
  store i32 %61, i32* %63, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L7PCMPEQBI4RVnWI7vec64_tE3RVnIS2_ES5_EEP6MemoryS7_R5StateT_T0_T1_(%struct.Memory* readnone returned, %struct.State* nocapture readnone dereferenceable(3376), i64* nocapture, i64, i64)  {
  %6 = alloca i64, align 8
  %7 = alloca i64, align 8
  %8 = bitcast i64* %7 to %struct.uint8v8_t*
  %9 = alloca i64, align 8
  %10 = bitcast i64* %9 to %struct.uint8v8_t*
  %11 = bitcast i64* %7 to i8*
  call void @llvm.lifetime.start(i64 8, i8* nonnull %11) 
  store i64 %3, i64* %7, align 8
  %12 = bitcast i64* %9 to i8*
  call void @llvm.lifetime.start(i64 8, i8* nonnull %12) 
  store i64 %4, i64* %9, align 8
  %13 = bitcast i64* %6 to i8*
  %14 = bitcast i64* %6 to [8 x i8]*
  %15 = trunc i64 %3 to i8
  %16 = trunc i64 %4 to i8
  %17 = icmp eq i8 %15, %16
  %18 = sext i1 %17 to i8
  call void @llvm.lifetime.start(i64 8, i8* nonnull %13)
  store i64 0, i64* %6, align 8
  %19 = bitcast i64* %6 to i8*
  store i8 %18, i8* %19, align 8
  %20 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %13)
  %21 = lshr i64 %3, 8
  %22 = trunc i64 %21 to i8
  %23 = lshr i64 %4, 8
  %24 = trunc i64 %23 to i8
  %25 = icmp eq i8 %22, %24
  %26 = sext i1 %25 to i8
  call void @llvm.lifetime.start(i64 8, i8* nonnull %13)
  store i64 %20, i64* %6, align 8
  %27 = getelementptr inbounds [8 x i8], [8 x i8]* %14, i64 0, i64 1
  store i8 %26, i8* %27, align 1
  %28 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %13)
  %29 = lshr i64 %3, 16
  %30 = trunc i64 %29 to i8
  %31 = lshr i64 %4, 16
  %32 = trunc i64 %31 to i8
  %33 = icmp eq i8 %30, %32
  %34 = sext i1 %33 to i8
  call void @llvm.lifetime.start(i64 8, i8* nonnull %13)
  store i64 %28, i64* %6, align 8
  %35 = getelementptr inbounds [8 x i8], [8 x i8]* %14, i64 0, i64 2
  store i8 %34, i8* %35, align 2
  %36 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %13)
  %37 = getelementptr inbounds %struct.uint8v8_t, %struct.uint8v8_t* %8, i64 0, i32 0, i64 3
  %38 = load i8, i8* %37, align 1
  %39 = getelementptr inbounds %struct.uint8v8_t, %struct.uint8v8_t* %10, i64 0, i32 0, i64 3
  %40 = load i8, i8* %39, align 1
  %41 = icmp eq i8 %38, %40
  %42 = sext i1 %41 to i8
  call void @llvm.lifetime.start(i64 8, i8* nonnull %13)
  store i64 %36, i64* %6, align 8
  %43 = getelementptr inbounds [8 x i8], [8 x i8]* %14, i64 0, i64 3
  store i8 %42, i8* %43, align 1
  %44 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %13)
  %45 = getelementptr inbounds %struct.uint8v8_t, %struct.uint8v8_t* %8, i64 0, i32 0, i64 4
  %46 = load i8, i8* %45, align 4
  %47 = getelementptr inbounds %struct.uint8v8_t, %struct.uint8v8_t* %10, i64 0, i32 0, i64 4
  %48 = load i8, i8* %47, align 4
  %49 = icmp eq i8 %46, %48
  %50 = sext i1 %49 to i8
  call void @llvm.lifetime.start(i64 8, i8* nonnull %13)
  store i64 %44, i64* %6, align 8
  %51 = getelementptr inbounds [8 x i8], [8 x i8]* %14, i64 0, i64 4
  store i8 %50, i8* %51, align 4
  %52 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %13)
  %53 = getelementptr inbounds %struct.uint8v8_t, %struct.uint8v8_t* %8, i64 0, i32 0, i64 5
  %54 = load i8, i8* %53, align 1
  %55 = getelementptr inbounds %struct.uint8v8_t, %struct.uint8v8_t* %10, i64 0, i32 0, i64 5
  %56 = load i8, i8* %55, align 1
  %57 = icmp eq i8 %54, %56
  %58 = sext i1 %57 to i8
  call void @llvm.lifetime.start(i64 8, i8* nonnull %13)
  store i64 %52, i64* %6, align 8
  %59 = getelementptr inbounds [8 x i8], [8 x i8]* %14, i64 0, i64 5
  store i8 %58, i8* %59, align 1
  %60 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %13)
  %61 = getelementptr inbounds %struct.uint8v8_t, %struct.uint8v8_t* %8, i64 0, i32 0, i64 6
  %62 = load i8, i8* %61, align 2
  %63 = getelementptr inbounds %struct.uint8v8_t, %struct.uint8v8_t* %10, i64 0, i32 0, i64 6
  %64 = load i8, i8* %63, align 2
  %65 = icmp eq i8 %62, %64
  %66 = sext i1 %65 to i8
  call void @llvm.lifetime.start(i64 8, i8* nonnull %13)
  store i64 %60, i64* %6, align 8
  %67 = getelementptr inbounds [8 x i8], [8 x i8]* %14, i64 0, i64 6
  store i8 %66, i8* %67, align 2
  %68 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %13)
  %69 = getelementptr inbounds %struct.uint8v8_t, %struct.uint8v8_t* %8, i64 0, i32 0, i64 7
  %70 = load i8, i8* %69, align 1
  %71 = getelementptr inbounds %struct.uint8v8_t, %struct.uint8v8_t* %10, i64 0, i32 0, i64 7
  %72 = load i8, i8* %71, align 1
  %73 = icmp eq i8 %70, %72
  %74 = sext i1 %73 to i8
  call void @llvm.lifetime.start(i64 8, i8* nonnull %13)
  store i64 %68, i64* %6, align 8
  %75 = getelementptr inbounds [8 x i8], [8 x i8]* %14, i64 0, i64 7
  store i8 %74, i8* %75, align 1
  %76 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %13)
  %77 = lshr i64 %76, 8
  %78 = lshr i64 %76, 16
  %79 = lshr i64 %76, 24
  %80 = lshr i64 %76, 32
  %81 = lshr i64 %76, 40
  %82 = lshr i64 %76, 48
  %83 = lshr i64 %76, 56
  %84 = trunc i64 %76 to i8
  %85 = trunc i64 %77 to i8
  %86 = trunc i64 %78 to i8
  %87 = trunc i64 %79 to i8
  %88 = trunc i64 %80 to i8
  %89 = trunc i64 %81 to i8
  %90 = trunc i64 %82 to i8
  %91 = trunc i64 %83 to i8
  %92 = bitcast i64* %2 to [8 x i8]*
  %93 = bitcast i64* %2 to i8*
  store i8 %84, i8* %93, align 1
  %94 = getelementptr inbounds [8 x i8], [8 x i8]* %92, i64 0, i64 1
  store i8 %85, i8* %94, align 1
  %95 = getelementptr inbounds [8 x i8], [8 x i8]* %92, i64 0, i64 2
  store i8 %86, i8* %95, align 1
  %96 = getelementptr inbounds [8 x i8], [8 x i8]* %92, i64 0, i64 3
  store i8 %87, i8* %96, align 1
  %97 = getelementptr inbounds [8 x i8], [8 x i8]* %92, i64 0, i64 4
  store i8 %88, i8* %97, align 1
  %98 = getelementptr inbounds [8 x i8], [8 x i8]* %92, i64 0, i64 5
  store i8 %89, i8* %98, align 1
  %99 = getelementptr inbounds [8 x i8], [8 x i8]* %92, i64 0, i64 6
  store i8 %90, i8* %99, align 1
  %100 = getelementptr inbounds [8 x i8], [8 x i8]* %92, i64 0, i64 7
  store i8 %91, i8* %100, align 1
  call void @llvm.lifetime.end(i64 8, i8* nonnull %12) 
  call void @llvm.lifetime.end(i64 8, i8* nonnull %11) 
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L7PCMPEQBI4RVnWI7vec64_tE3RVnIS2_E3MVnIS2_EEEP6MemoryS9_R5StateT_T0_T1_(%struct.Memory* returned, %struct.State* nocapture readnone dereferenceable(3376), i64* nocapture, i64, i64)  {
  %6 = alloca i64, align 8
  %7 = alloca i64, align 8
  %8 = bitcast i64* %7 to %struct.uint8v8_t*
  %9 = alloca i64, align 8
  %10 = bitcast i64* %9 to %struct.uint8v8_t*
  %11 = bitcast i64* %7 to i8*
  call void @llvm.lifetime.start(i64 8, i8* nonnull %11) 
  store i64 %3, i64* %7, align 8
  %12 = bitcast i64* %9 to i8*
  call void @llvm.lifetime.start(i64 8, i8* nonnull %12) 
  %13 = inttoptr i64 %4 to i8*
  %14 = load i8, i8* %13
  %15 = add i64 %4, 1
  %16 = inttoptr i64 %15 to i8*
  %17 = load i8, i8* %16
  %18 = add i64 %4, 2
  %19 = inttoptr i64 %18 to i8*
  %20 = load i8, i8* %19
  %21 = add i64 %4, 3
  %22 = inttoptr i64 %21 to i8*
  %23 = load i8, i8* %22
  %24 = add i64 %4, 4
  %25 = inttoptr i64 %24 to i8*
  %26 = load i8, i8* %25
  %27 = add i64 %4, 5
  %28 = inttoptr i64 %27 to i8*
  %29 = load i8, i8* %28
  %30 = add i64 %4, 6
  %31 = inttoptr i64 %30 to i8*
  %32 = load i8, i8* %31
  %33 = add i64 %4, 7
  %34 = inttoptr i64 %33 to i8*
  %35 = load i8, i8* %34
  %36 = zext i8 %35 to i64
  %37 = shl nuw i64 %36, 56
  %38 = zext i8 %32 to i64
  %39 = shl nuw nsw i64 %38, 48
  %40 = zext i8 %29 to i64
  %41 = shl nuw nsw i64 %40, 40
  %42 = zext i8 %26 to i64
  %43 = shl nuw nsw i64 %42, 32
  %44 = zext i8 %23 to i64
  %45 = shl nuw nsw i64 %44, 24
  %46 = zext i8 %20 to i64
  %47 = shl nuw nsw i64 %46, 16
  %48 = zext i8 %17 to i64
  %49 = shl nuw nsw i64 %48, 8
  %50 = zext i8 %14 to i64
  %51 = or i64 %49, %50
  %52 = or i64 %51, %47
  %53 = or i64 %52, %45
  %54 = or i64 %53, %43
  %55 = or i64 %54, %41
  %56 = or i64 %55, %39
  %57 = or i64 %56, %37
  store i64 %57, i64* %9, align 8
  %58 = bitcast i64* %6 to i8*
  %59 = bitcast i64* %6 to [8 x i8]*
  %60 = trunc i64 %3 to i8
  %61 = icmp eq i8 %60, %14
  %62 = sext i1 %61 to i8
  call void @llvm.lifetime.start(i64 8, i8* nonnull %58)
  store i64 0, i64* %6, align 8
  %63 = bitcast i64* %6 to i8*
  store i8 %62, i8* %63, align 8
  %64 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %58)
  %65 = lshr i64 %3, 8
  %66 = trunc i64 %65 to i8
  %67 = icmp eq i8 %66, %17
  %68 = sext i1 %67 to i8
  call void @llvm.lifetime.start(i64 8, i8* nonnull %58)
  store i64 %64, i64* %6, align 8
  %69 = getelementptr inbounds [8 x i8], [8 x i8]* %59, i64 0, i64 1
  store i8 %68, i8* %69, align 1
  %70 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %58)
  %71 = getelementptr inbounds %struct.uint8v8_t, %struct.uint8v8_t* %8, i64 0, i32 0, i64 2
  %72 = load i8, i8* %71, align 2
  %73 = icmp eq i8 %72, %20
  %74 = sext i1 %73 to i8
  call void @llvm.lifetime.start(i64 8, i8* nonnull %58)
  store i64 %70, i64* %6, align 8
  %75 = getelementptr inbounds [8 x i8], [8 x i8]* %59, i64 0, i64 2
  store i8 %74, i8* %75, align 2
  %76 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %58)
  %77 = getelementptr inbounds %struct.uint8v8_t, %struct.uint8v8_t* %8, i64 0, i32 0, i64 3
  %78 = load i8, i8* %77, align 1
  %79 = getelementptr inbounds %struct.uint8v8_t, %struct.uint8v8_t* %10, i64 0, i32 0, i64 3
  %80 = load i8, i8* %79, align 1
  %81 = icmp eq i8 %78, %80
  %82 = sext i1 %81 to i8
  call void @llvm.lifetime.start(i64 8, i8* nonnull %58)
  store i64 %76, i64* %6, align 8
  %83 = getelementptr inbounds [8 x i8], [8 x i8]* %59, i64 0, i64 3
  store i8 %82, i8* %83, align 1
  %84 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %58)
  %85 = getelementptr inbounds %struct.uint8v8_t, %struct.uint8v8_t* %8, i64 0, i32 0, i64 4
  %86 = load i8, i8* %85, align 4
  %87 = getelementptr inbounds %struct.uint8v8_t, %struct.uint8v8_t* %10, i64 0, i32 0, i64 4
  %88 = load i8, i8* %87, align 4
  %89 = icmp eq i8 %86, %88
  %90 = sext i1 %89 to i8
  call void @llvm.lifetime.start(i64 8, i8* nonnull %58)
  store i64 %84, i64* %6, align 8
  %91 = getelementptr inbounds [8 x i8], [8 x i8]* %59, i64 0, i64 4
  store i8 %90, i8* %91, align 4
  %92 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %58)
  %93 = getelementptr inbounds %struct.uint8v8_t, %struct.uint8v8_t* %8, i64 0, i32 0, i64 5
  %94 = load i8, i8* %93, align 1
  %95 = getelementptr inbounds %struct.uint8v8_t, %struct.uint8v8_t* %10, i64 0, i32 0, i64 5
  %96 = load i8, i8* %95, align 1
  %97 = icmp eq i8 %94, %96
  %98 = sext i1 %97 to i8
  call void @llvm.lifetime.start(i64 8, i8* nonnull %58)
  store i64 %92, i64* %6, align 8
  %99 = getelementptr inbounds [8 x i8], [8 x i8]* %59, i64 0, i64 5
  store i8 %98, i8* %99, align 1
  %100 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %58)
  %101 = getelementptr inbounds %struct.uint8v8_t, %struct.uint8v8_t* %8, i64 0, i32 0, i64 6
  %102 = load i8, i8* %101, align 2
  %103 = getelementptr inbounds %struct.uint8v8_t, %struct.uint8v8_t* %10, i64 0, i32 0, i64 6
  %104 = load i8, i8* %103, align 2
  %105 = icmp eq i8 %102, %104
  %106 = sext i1 %105 to i8
  call void @llvm.lifetime.start(i64 8, i8* nonnull %58)
  store i64 %100, i64* %6, align 8
  %107 = getelementptr inbounds [8 x i8], [8 x i8]* %59, i64 0, i64 6
  store i8 %106, i8* %107, align 2
  %108 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %58)
  %109 = getelementptr inbounds %struct.uint8v8_t, %struct.uint8v8_t* %8, i64 0, i32 0, i64 7
  %110 = load i8, i8* %109, align 1
  %111 = getelementptr inbounds %struct.uint8v8_t, %struct.uint8v8_t* %10, i64 0, i32 0, i64 7
  %112 = load i8, i8* %111, align 1
  %113 = icmp eq i8 %110, %112
  %114 = sext i1 %113 to i8
  call void @llvm.lifetime.start(i64 8, i8* nonnull %58)
  store i64 %108, i64* %6, align 8
  %115 = getelementptr inbounds [8 x i8], [8 x i8]* %59, i64 0, i64 7
  store i8 %114, i8* %115, align 1
  %116 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %58)
  %117 = lshr i64 %116, 8
  %118 = lshr i64 %116, 16
  %119 = lshr i64 %116, 24
  %120 = lshr i64 %116, 32
  %121 = lshr i64 %116, 40
  %122 = lshr i64 %116, 48
  %123 = lshr i64 %116, 56
  %124 = trunc i64 %116 to i8
  %125 = trunc i64 %117 to i8
  %126 = trunc i64 %118 to i8
  %127 = trunc i64 %119 to i8
  %128 = trunc i64 %120 to i8
  %129 = trunc i64 %121 to i8
  %130 = trunc i64 %122 to i8
  %131 = trunc i64 %123 to i8
  %132 = bitcast i64* %2 to [8 x i8]*
  %133 = bitcast i64* %2 to i8*
  store i8 %124, i8* %133, align 1
  %134 = getelementptr inbounds [8 x i8], [8 x i8]* %132, i64 0, i64 1
  store i8 %125, i8* %134, align 1
  %135 = getelementptr inbounds [8 x i8], [8 x i8]* %132, i64 0, i64 2
  store i8 %126, i8* %135, align 1
  %136 = getelementptr inbounds [8 x i8], [8 x i8]* %132, i64 0, i64 3
  store i8 %127, i8* %136, align 1
  %137 = getelementptr inbounds [8 x i8], [8 x i8]* %132, i64 0, i64 4
  store i8 %128, i8* %137, align 1
  %138 = getelementptr inbounds [8 x i8], [8 x i8]* %132, i64 0, i64 5
  store i8 %129, i8* %138, align 1
  %139 = getelementptr inbounds [8 x i8], [8 x i8]* %132, i64 0, i64 6
  store i8 %130, i8* %139, align 1
  %140 = getelementptr inbounds [8 x i8], [8 x i8]* %132, i64 0, i64 7
  store i8 %131, i8* %140, align 1
  call void @llvm.lifetime.end(i64 8, i8* nonnull %12) 
  call void @llvm.lifetime.end(i64 8, i8* nonnull %11) 
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L7PCMPEQWI4RVnWI7vec64_tE3RVnIS2_ES5_EEP6MemoryS7_R5StateT_T0_T1_(%struct.Memory* readnone returned, %struct.State* nocapture readnone dereferenceable(3376), i64* nocapture, i64, i64)  {
  %6 = alloca i64, align 8
  %7 = bitcast i64* %6 to i8*
  %8 = bitcast i64* %6 to [4 x i16]*
  %9 = trunc i64 %3 to i16
  %10 = trunc i64 %4 to i16
  %11 = icmp eq i16 %9, %10
  %12 = sext i1 %11 to i16
  call void @llvm.lifetime.start(i64 8, i8* nonnull %7)
  store i64 0, i64* %6, align 8
  %13 = bitcast i64* %6 to i16*
  store i16 %12, i16* %13, align 8
  %14 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %7)
  %15 = lshr i64 %3, 16
  %16 = trunc i64 %15 to i16
  %17 = lshr i64 %4, 16
  %18 = trunc i64 %17 to i16
  %19 = icmp eq i16 %16, %18
  %20 = sext i1 %19 to i16
  call void @llvm.lifetime.start(i64 8, i8* nonnull %7)
  store i64 %14, i64* %6, align 8
  %21 = getelementptr inbounds [4 x i16], [4 x i16]* %8, i64 0, i64 1
  store i16 %20, i16* %21, align 2
  %22 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %7)
  %23 = lshr i64 %3, 32
  %24 = trunc i64 %23 to i16
  %25 = lshr i64 %4, 32
  %26 = trunc i64 %25 to i16
  %27 = icmp eq i16 %24, %26
  %28 = sext i1 %27 to i16
  call void @llvm.lifetime.start(i64 8, i8* nonnull %7)
  store i64 %22, i64* %6, align 8
  %29 = getelementptr inbounds [4 x i16], [4 x i16]* %8, i64 0, i64 2
  store i16 %28, i16* %29, align 4
  %30 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %7)
  %31 = lshr i64 %3, 48
  %32 = trunc i64 %31 to i16
  %33 = lshr i64 %4, 48
  %34 = trunc i64 %33 to i16
  %35 = icmp eq i16 %32, %34
  %36 = sext i1 %35 to i16
  call void @llvm.lifetime.start(i64 8, i8* nonnull %7)
  store i64 %30, i64* %6, align 8
  %37 = getelementptr inbounds [4 x i16], [4 x i16]* %8, i64 0, i64 3
  store i16 %36, i16* %37, align 2
  %38 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %7)
  %39 = lshr i64 %38, 16
  %40 = lshr i64 %38, 32
  %41 = lshr i64 %38, 48
  %42 = trunc i64 %38 to i16
  %43 = trunc i64 %39 to i16
  %44 = trunc i64 %40 to i16
  %45 = trunc i64 %41 to i16
  %46 = bitcast i64* %2 to [4 x i16]*
  %47 = bitcast i64* %2 to i16*
  store i16 %42, i16* %47, align 1
  %48 = getelementptr inbounds [4 x i16], [4 x i16]* %46, i64 0, i64 1
  store i16 %43, i16* %48, align 1
  %49 = getelementptr inbounds [4 x i16], [4 x i16]* %46, i64 0, i64 2
  store i16 %44, i16* %49, align 1
  %50 = getelementptr inbounds [4 x i16], [4 x i16]* %46, i64 0, i64 3
  store i16 %45, i16* %50, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L7PCMPEQWI4RVnWI7vec64_tE3RVnIS2_E3MVnIS2_EEEP6MemoryS9_R5StateT_T0_T1_(%struct.Memory* returned, %struct.State* nocapture readnone dereferenceable(3376), i64* nocapture, i64, i64)  {
  %6 = alloca i64, align 8
  %7 = inttoptr i64 %4 to i16*
  %8 = load i16, i16* %7
  %9 = add i64 %4, 2
  %10 = inttoptr i64 %9 to i16*
  %11 = load i16, i16* %10
  %12 = add i64 %4, 4
  %13 = inttoptr i64 %12 to i16*
  %14 = load i16, i16* %13
  %15 = add i64 %4, 6
  %16 = inttoptr i64 %15 to i16*
  %17 = load i16, i16* %16
  %18 = bitcast i64* %6 to i8*
  %19 = bitcast i64* %6 to [4 x i16]*
  %20 = trunc i64 %3 to i16
  %21 = icmp eq i16 %20, %8
  %22 = sext i1 %21 to i16
  call void @llvm.lifetime.start(i64 8, i8* nonnull %18)
  store i64 0, i64* %6, align 8
  %23 = bitcast i64* %6 to i16*
  store i16 %22, i16* %23, align 8
  %24 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %18)
  %25 = lshr i64 %3, 16
  %26 = trunc i64 %25 to i16
  %27 = icmp eq i16 %26, %11
  %28 = sext i1 %27 to i16
  call void @llvm.lifetime.start(i64 8, i8* nonnull %18)
  store i64 %24, i64* %6, align 8
  %29 = getelementptr inbounds [4 x i16], [4 x i16]* %19, i64 0, i64 1
  store i16 %28, i16* %29, align 2
  %30 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %18)
  %31 = lshr i64 %3, 32
  %32 = trunc i64 %31 to i16
  %33 = icmp eq i16 %32, %14
  %34 = sext i1 %33 to i16
  call void @llvm.lifetime.start(i64 8, i8* nonnull %18)
  store i64 %30, i64* %6, align 8
  %35 = getelementptr inbounds [4 x i16], [4 x i16]* %19, i64 0, i64 2
  store i16 %34, i16* %35, align 4
  %36 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %18)
  %37 = lshr i64 %3, 48
  %38 = trunc i64 %37 to i16
  %39 = icmp eq i16 %38, %17
  %40 = sext i1 %39 to i16
  call void @llvm.lifetime.start(i64 8, i8* nonnull %18)
  store i64 %36, i64* %6, align 8
  %41 = getelementptr inbounds [4 x i16], [4 x i16]* %19, i64 0, i64 3
  store i16 %40, i16* %41, align 2
  %42 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %18)
  %43 = lshr i64 %42, 16
  %44 = lshr i64 %42, 32
  %45 = lshr i64 %42, 48
  %46 = trunc i64 %42 to i16
  %47 = trunc i64 %43 to i16
  %48 = trunc i64 %44 to i16
  %49 = trunc i64 %45 to i16
  %50 = bitcast i64* %2 to [4 x i16]*
  %51 = bitcast i64* %2 to i16*
  store i16 %46, i16* %51, align 1
  %52 = getelementptr inbounds [4 x i16], [4 x i16]* %50, i64 0, i64 1
  store i16 %47, i16* %52, align 1
  %53 = getelementptr inbounds [4 x i16], [4 x i16]* %50, i64 0, i64 2
  store i16 %48, i16* %53, align 1
  %54 = getelementptr inbounds [4 x i16], [4 x i16]* %50, i64 0, i64 3
  store i16 %49, i16* %54, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L7PCMPEQDI4RVnWI7vec64_tE3RVnIS2_ES5_EEP6MemoryS7_R5StateT_T0_T1_(%struct.Memory* readnone returned, %struct.State* nocapture readnone dereferenceable(3376), i64* nocapture, i64, i64)  {
  %6 = alloca i64, align 8
  %7 = bitcast i64* %6 to i8*
  %8 = bitcast i64* %6 to [2 x i32]*
  %9 = trunc i64 %3 to i32
  %10 = trunc i64 %4 to i32
  %11 = icmp eq i32 %9, %10
  %12 = sext i1 %11 to i32
  call void @llvm.lifetime.start(i64 8, i8* nonnull %7)
  store i64 0, i64* %6, align 8
  %13 = bitcast i64* %6 to i32*
  store i32 %12, i32* %13, align 8
  %14 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %7)
  %15 = lshr i64 %3, 32
  %16 = trunc i64 %15 to i32
  %17 = lshr i64 %4, 32
  %18 = trunc i64 %17 to i32
  %19 = icmp eq i32 %16, %18
  %20 = sext i1 %19 to i32
  call void @llvm.lifetime.start(i64 8, i8* nonnull %7)
  store i64 %14, i64* %6, align 8
  %21 = getelementptr inbounds [2 x i32], [2 x i32]* %8, i64 0, i64 1
  store i32 %20, i32* %21, align 4
  %22 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %7)
  %23 = lshr i64 %22, 32
  %24 = trunc i64 %22 to i32
  %25 = trunc i64 %23 to i32
  %26 = bitcast i64* %2 to [2 x i32]*
  %27 = bitcast i64* %2 to i32*
  store i32 %24, i32* %27, align 1
  %28 = getelementptr inbounds [2 x i32], [2 x i32]* %26, i64 0, i64 1
  store i32 %25, i32* %28, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L7PCMPEQDI4RVnWI7vec64_tE3RVnIS2_E3MVnIS2_EEEP6MemoryS9_R5StateT_T0_T1_(%struct.Memory* returned, %struct.State* nocapture readnone dereferenceable(3376), i64* nocapture, i64, i64)  {
  %6 = alloca i64, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7
  %9 = add i64 %4, 4
  %10 = inttoptr i64 %9 to i32*
  %11 = load i32, i32* %10
  %12 = bitcast i64* %6 to i8*
  %13 = bitcast i64* %6 to [2 x i32]*
  %14 = trunc i64 %3 to i32
  %15 = icmp eq i32 %14, %8
  %16 = sext i1 %15 to i32
  call void @llvm.lifetime.start(i64 8, i8* nonnull %12)
  store i64 0, i64* %6, align 8
  %17 = bitcast i64* %6 to i32*
  store i32 %16, i32* %17, align 8
  %18 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %12)
  %19 = lshr i64 %3, 32
  %20 = trunc i64 %19 to i32
  %21 = icmp eq i32 %20, %11
  %22 = sext i1 %21 to i32
  call void @llvm.lifetime.start(i64 8, i8* nonnull %12)
  store i64 %18, i64* %6, align 8
  %23 = getelementptr inbounds [2 x i32], [2 x i32]* %13, i64 0, i64 1
  store i32 %22, i32* %23, align 4
  %24 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %12)
  %25 = lshr i64 %24, 32
  %26 = trunc i64 %24 to i32
  %27 = trunc i64 %25 to i32
  %28 = bitcast i64* %2 to [2 x i32]*
  %29 = bitcast i64* %2 to i32*
  store i32 %26, i32* %29, align 1
  %30 = getelementptr inbounds [2 x i32], [2 x i32]* %28, i64 0, i64 1
  store i32 %27, i32* %30, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L7PCMPEQQI3VnWI8vec128_tE2VnIS2_E3MVnIS2_EEEP6MemoryS9_R5StateT_T0_T1_(%struct.Memory* returned, %struct.State* nocapture readnone dereferenceable(3376), i8* nocapture, i8* nocapture readonly, i64)  {
  %6 = bitcast i8* %3 to i64*
  %7 = load i64, i64* %6, align 1
  %8 = getelementptr inbounds i8, i8* %3, i64 8
  %9 = bitcast i8* %8 to i64*
  %10 = load i64, i64* %9, align 1
  %11 = inttoptr i64 %4 to i64*
  %12 = load i64, i64* %11
  %13 = add i64 %4, 8
  %14 = inttoptr i64 %13 to i64*
  %15 = load i64, i64* %14
  %16 = icmp eq i64 %7, %12
  %17 = sext i1 %16 to i64
  %18 = icmp eq i64 %10, %15
  %19 = sext i1 %18 to i64
  %20 = bitcast i8* %2 to i64*
  store i64 %17, i64* %20, align 1
  %21 = getelementptr inbounds i8, i8* %2, i64 8
  %22 = bitcast i8* %21 to i64*
  store i64 %19, i64* %22, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L7PCMPEQQI3VnWI8vec128_tE2VnIS2_ES5_EEP6MemoryS7_R5StateT_T0_T1_(%struct.Memory* readnone returned, %struct.State* nocapture readnone dereferenceable(3376), i8* nocapture, i8* nocapture readonly, i8* nocapture readonly)  {
  %6 = bitcast i8* %3 to i64*
  %7 = load i64, i64* %6, align 1
  %8 = getelementptr inbounds i8, i8* %3, i64 8
  %9 = bitcast i8* %8 to i64*
  %10 = load i64, i64* %9, align 1
  %11 = bitcast i8* %4 to i64*
  %12 = load i64, i64* %11, align 1
  %13 = getelementptr inbounds i8, i8* %4, i64 8
  %14 = bitcast i8* %13 to i64*
  %15 = load i64, i64* %14, align 1
  %16 = icmp eq i64 %7, %12
  %17 = sext i1 %16 to i64
  %18 = icmp eq i64 %10, %15
  %19 = sext i1 %18 to i64
  %20 = bitcast i8* %2 to i64*
  store i64 %17, i64* %20, align 1
  %21 = getelementptr inbounds i8, i8* %2, i64 8
  %22 = bitcast i8* %21 to i64*
  store i64 %19, i64* %22, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L7PCMPEQWI3VnWI8vec128_tE2VnIS2_E3MVnIS2_EEEP6MemoryS9_R5StateT_T0_T1_(%struct.Memory* returned, %struct.State* nocapture readnone dereferenceable(3376), i8* nocapture, i8* nocapture readonly, i64)  {
  %6 = alloca <2 x i64>, align 16
  %7 = bitcast <2 x i64>* %6 to { i64, i64 }*
  %8 = alloca <2 x i64>, align 16
  %9 = bitcast <2 x i64>* %8 to { i64, i64 }*
  %10 = bitcast <2 x i64>* %8 to %struct.uint16v8_t*
  %11 = alloca <2 x i64>, align 16
  %12 = bitcast <2 x i64>* %11 to { i64, i64 }*
  %13 = bitcast <2 x i64>* %11 to %struct.uint16v8_t*
  %14 = bitcast <2 x i64>* %8 to i8*
  call void @llvm.lifetime.start(i64 16, i8* nonnull %14) 
  %15 = bitcast i8* %3 to <2 x i64>*
  %16 = load <2 x i64>, <2 x i64>* %15, align 1
  store <2 x i64> %16, <2 x i64>* %8, align 16
  %17 = bitcast <2 x i64>* %11 to i8*
  call void @llvm.lifetime.start(i64 16, i8* nonnull %17) 
  %18 = inttoptr i64 %4 to i16*
  %19 = load i16, i16* %18
  %20 = add i64 %4, 2
  %21 = inttoptr i64 %20 to i16*
  %22 = load i16, i16* %21
  %23 = add i64 %4, 4
  %24 = inttoptr i64 %23 to i16*
  %25 = load i16, i16* %24
  %26 = add i64 %4, 6
  %27 = inttoptr i64 %26 to i16*
  %28 = load i16, i16* %27
  %29 = add i64 %4, 8
  %30 = inttoptr i64 %29 to i16*
  %31 = load i16, i16* %30
  %32 = add i64 %4, 10
  %33 = inttoptr i64 %32 to i16*
  %34 = load i16, i16* %33
  %35 = add i64 %4, 12
  %36 = inttoptr i64 %35 to i16*
  %37 = load i16, i16* %36
  %38 = add i64 %4, 14
  %39 = inttoptr i64 %38 to i16*
  %40 = load i16, i16* %39
  %41 = insertelement <2 x i16> undef, i16 %28, i32 0
  %42 = insertelement <2 x i16> %41, i16 %40, i32 1
  %43 = zext <2 x i16> %42 to <2 x i64>
  %44 = shl nuw <2 x i64> %43, <i64 48, i64 48>
  %45 = insertelement <2 x i16> undef, i16 %25, i32 0
  %46 = insertelement <2 x i16> %45, i16 %37, i32 1
  %47 = zext <2 x i16> %46 to <2 x i64>
  %48 = shl nuw nsw <2 x i64> %47, <i64 32, i64 32>
  %49 = insertelement <2 x i16> undef, i16 %22, i32 0
  %50 = insertelement <2 x i16> %49, i16 %34, i32 1
  %51 = zext <2 x i16> %50 to <2 x i64>
  %52 = shl nuw nsw <2 x i64> %51, <i64 16, i64 16>
  %53 = insertelement <2 x i16> undef, i16 %19, i32 0
  %54 = insertelement <2 x i16> %53, i16 %31, i32 1
  %55 = zext <2 x i16> %54 to <2 x i64>
  %56 = or <2 x i64> %52, %55
  %57 = or <2 x i64> %56, %48
  %58 = or <2 x i64> %57, %44
  store <2 x i64> %58, <2 x i64>* %11, align 16
  %59 = bitcast <2 x i64>* %6 to i8*
  %60 = getelementptr inbounds <2 x i64>, <2 x i64>* %6, i64 0, i64 0
  %61 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %7, i64 0, i32 1
  %62 = bitcast <2 x i64>* %6 to [8 x i16]*
  %63 = extractelement <2 x i64> %16, i32 0
  %64 = trunc i64 %63 to i16
  %65 = icmp eq i16 %64, %19
  %66 = sext i1 %65 to i16
  call void @llvm.lifetime.start(i64 16, i8* nonnull %59)
  store <2 x i64> zeroinitializer, <2 x i64>* %6, align 16
  %67 = bitcast <2 x i64>* %6 to i16*
  store i16 %66, i16* %67, align 16
  %68 = load i64, i64* %60, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %59)
  %69 = lshr i64 %63, 16
  %70 = trunc i64 %69 to i16
  %71 = icmp eq i16 %70, %22
  %72 = sext i1 %71 to i16
  call void @llvm.lifetime.start(i64 16, i8* nonnull %59)
  store i64 %68, i64* %60, align 16
  store i64 0, i64* %61, align 8
  %73 = getelementptr inbounds [8 x i16], [8 x i16]* %62, i64 0, i64 1
  store i16 %72, i16* %73, align 2
  %74 = load i64, i64* %60, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %59)
  %75 = lshr i64 %63, 32
  %76 = trunc i64 %75 to i16
  %77 = icmp eq i16 %76, %25
  %78 = sext i1 %77 to i16
  call void @llvm.lifetime.start(i64 16, i8* nonnull %59)
  store i64 %74, i64* %60, align 16
  store i64 0, i64* %61, align 8
  %79 = getelementptr inbounds [8 x i16], [8 x i16]* %62, i64 0, i64 2
  store i16 %78, i16* %79, align 4
  %80 = load i64, i64* %60, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %59)
  %81 = getelementptr inbounds %struct.uint16v8_t, %struct.uint16v8_t* %10, i64 0, i32 0, i64 3
  %82 = load i16, i16* %81, align 2
  %83 = icmp eq i16 %82, %28
  %84 = sext i1 %83 to i16
  call void @llvm.lifetime.start(i64 16, i8* nonnull %59)
  store i64 %80, i64* %60, align 16
  store i64 0, i64* %61, align 8
  %85 = getelementptr inbounds [8 x i16], [8 x i16]* %62, i64 0, i64 3
  store i16 %84, i16* %85, align 2
  %86 = load i64, i64* %60, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %59)
  %87 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %9, i64 0, i32 1
  %88 = bitcast i64* %87 to i16*
  %89 = load i16, i16* %88, align 8
  %90 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %12, i64 0, i32 1
  %91 = bitcast i64* %90 to i16*
  %92 = load i16, i16* %91, align 8
  %93 = icmp eq i16 %89, %92
  %94 = sext i1 %93 to i16
  call void @llvm.lifetime.start(i64 16, i8* nonnull %59)
  store i64 %86, i64* %60, align 16
  store i64 0, i64* %61, align 8
  %95 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %7, i64 0, i32 1
  %96 = bitcast i64* %95 to i16*
  store i16 %94, i16* %96, align 8
  %97 = load i64, i64* %61, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %59)
  %98 = getelementptr inbounds %struct.uint16v8_t, %struct.uint16v8_t* %10, i64 0, i32 0, i64 5
  %99 = load i16, i16* %98, align 2
  %100 = getelementptr inbounds %struct.uint16v8_t, %struct.uint16v8_t* %13, i64 0, i32 0, i64 5
  %101 = load i16, i16* %100, align 2
  %102 = icmp eq i16 %99, %101
  %103 = sext i1 %102 to i16
  call void @llvm.lifetime.start(i64 16, i8* nonnull %59)
  store i64 %86, i64* %60, align 16
  store i64 %97, i64* %61, align 8
  %104 = getelementptr inbounds [8 x i16], [8 x i16]* %62, i64 0, i64 5
  store i16 %103, i16* %104, align 2
  %105 = load i64, i64* %61, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %59)
  %106 = getelementptr inbounds %struct.uint16v8_t, %struct.uint16v8_t* %10, i64 0, i32 0, i64 6
  %107 = load i16, i16* %106, align 4
  %108 = getelementptr inbounds %struct.uint16v8_t, %struct.uint16v8_t* %13, i64 0, i32 0, i64 6
  %109 = load i16, i16* %108, align 4
  %110 = icmp eq i16 %107, %109
  %111 = sext i1 %110 to i16
  call void @llvm.lifetime.start(i64 16, i8* nonnull %59)
  store i64 %86, i64* %60, align 16
  store i64 %105, i64* %61, align 8
  %112 = getelementptr inbounds [8 x i16], [8 x i16]* %62, i64 0, i64 6
  store i16 %111, i16* %112, align 4
  %113 = load i64, i64* %61, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %59)
  %114 = getelementptr inbounds %struct.uint16v8_t, %struct.uint16v8_t* %10, i64 0, i32 0, i64 7
  %115 = load i16, i16* %114, align 2
  %116 = getelementptr inbounds %struct.uint16v8_t, %struct.uint16v8_t* %13, i64 0, i32 0, i64 7
  %117 = load i16, i16* %116, align 2
  %118 = icmp eq i16 %115, %117
  %119 = sext i1 %118 to i16
  call void @llvm.lifetime.start(i64 16, i8* nonnull %59)
  store i64 %86, i64* %60, align 16
  store i64 %113, i64* %61, align 8
  %120 = getelementptr inbounds [8 x i16], [8 x i16]* %62, i64 0, i64 7
  store i16 %119, i16* %120, align 2
  %121 = load i64, i64* %61, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %59)
  %122 = lshr i64 %86, 16
  %123 = lshr i64 %86, 32
  %124 = lshr i64 %86, 48
  %125 = trunc i64 %86 to i16
  %126 = trunc i64 %122 to i16
  %127 = trunc i64 %123 to i16
  %128 = trunc i64 %124 to i16
  %129 = bitcast i8* %2 to i16*
  store i16 %125, i16* %129, align 1
  %130 = getelementptr inbounds i8, i8* %2, i64 2
  %131 = bitcast i8* %130 to i16*
  store i16 %126, i16* %131, align 1
  %132 = getelementptr inbounds i8, i8* %2, i64 4
  %133 = bitcast i8* %132 to i16*
  store i16 %127, i16* %133, align 1
  %134 = getelementptr inbounds i8, i8* %2, i64 6
  %135 = bitcast i8* %134 to i16*
  store i16 %128, i16* %135, align 1
  %136 = trunc i64 %121 to i16
  %137 = getelementptr inbounds i8, i8* %2, i64 8
  %138 = bitcast i8* %137 to i16*
  store i16 %136, i16* %138, align 1
  %139 = lshr i64 %121, 16
  %140 = trunc i64 %139 to i16
  %141 = getelementptr inbounds i8, i8* %2, i64 10
  %142 = bitcast i8* %141 to i16*
  store i16 %140, i16* %142, align 1
  %143 = lshr i64 %121, 32
  %144 = trunc i64 %143 to i16
  %145 = getelementptr inbounds i8, i8* %2, i64 12
  %146 = bitcast i8* %145 to i16*
  store i16 %144, i16* %146, align 1
  %147 = lshr i64 %121, 48
  %148 = trunc i64 %147 to i16
  %149 = getelementptr inbounds i8, i8* %2, i64 14
  %150 = bitcast i8* %149 to i16*
  store i16 %148, i16* %150, align 1
  call void @llvm.lifetime.end(i64 16, i8* nonnull %17) 
  call void @llvm.lifetime.end(i64 16, i8* nonnull %14) 
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L7PCMPEQWI3VnWI8vec128_tE2VnIS2_ES5_EEP6MemoryS7_R5StateT_T0_T1_(%struct.Memory* readnone returned, %struct.State* nocapture readnone dereferenceable(3376), i8* nocapture, i8* nocapture readonly, i8* nocapture readonly)  {
  %6 = alloca <2 x i64>, align 16
  %7 = bitcast <2 x i64>* %6 to { i64, i64 }*
  %8 = alloca <2 x i64>, align 16
  %9 = bitcast <2 x i64>* %8 to { i64, i64 }*
  %10 = bitcast <2 x i64>* %8 to %struct.uint16v8_t*
  %11 = alloca <2 x i64>, align 16
  %12 = bitcast <2 x i64>* %11 to { i64, i64 }*
  %13 = bitcast <2 x i64>* %11 to %struct.uint16v8_t*
  %14 = bitcast <2 x i64>* %8 to i8*
  call void @llvm.lifetime.start(i64 16, i8* nonnull %14) 
  %15 = bitcast i8* %3 to <2 x i64>*
  %16 = load <2 x i64>, <2 x i64>* %15, align 1
  store <2 x i64> %16, <2 x i64>* %8, align 16
  %17 = bitcast <2 x i64>* %11 to i8*
  call void @llvm.lifetime.start(i64 16, i8* nonnull %17) 
  %18 = bitcast i8* %4 to <2 x i64>*
  %19 = load <2 x i64>, <2 x i64>* %18, align 1
  store <2 x i64> %19, <2 x i64>* %11, align 16
  %20 = bitcast <2 x i64>* %6 to i8*
  %21 = getelementptr inbounds <2 x i64>, <2 x i64>* %6, i64 0, i64 0
  %22 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %7, i64 0, i32 1
  %23 = bitcast <2 x i64>* %6 to [8 x i16]*
  %24 = extractelement <2 x i64> %16, i32 0
  %25 = trunc i64 %24 to i16
  %26 = extractelement <2 x i64> %19, i32 0
  %27 = trunc i64 %26 to i16
  %28 = icmp eq i16 %25, %27
  %29 = sext i1 %28 to i16
  call void @llvm.lifetime.start(i64 16, i8* nonnull %20)
  store <2 x i64> zeroinitializer, <2 x i64>* %6, align 16
  %30 = bitcast <2 x i64>* %6 to i16*
  store i16 %29, i16* %30, align 16
  %31 = load i64, i64* %21, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %20)
  %32 = lshr i64 %24, 16
  %33 = trunc i64 %32 to i16
  %34 = lshr i64 %26, 16
  %35 = trunc i64 %34 to i16
  %36 = icmp eq i16 %33, %35
  %37 = sext i1 %36 to i16
  call void @llvm.lifetime.start(i64 16, i8* nonnull %20)
  store i64 %31, i64* %21, align 16
  store i64 0, i64* %22, align 8
  %38 = getelementptr inbounds [8 x i16], [8 x i16]* %23, i64 0, i64 1
  store i16 %37, i16* %38, align 2
  %39 = load i64, i64* %21, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %20)
  %40 = lshr i64 %24, 32
  %41 = trunc i64 %40 to i16
  %42 = lshr i64 %26, 32
  %43 = trunc i64 %42 to i16
  %44 = icmp eq i16 %41, %43
  %45 = sext i1 %44 to i16
  call void @llvm.lifetime.start(i64 16, i8* nonnull %20)
  store i64 %39, i64* %21, align 16
  store i64 0, i64* %22, align 8
  %46 = getelementptr inbounds [8 x i16], [8 x i16]* %23, i64 0, i64 2
  store i16 %45, i16* %46, align 4
  %47 = load i64, i64* %21, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %20)
  %48 = lshr i64 %24, 48
  %49 = trunc i64 %48 to i16
  %50 = lshr i64 %26, 48
  %51 = trunc i64 %50 to i16
  %52 = icmp eq i16 %49, %51
  %53 = sext i1 %52 to i16
  call void @llvm.lifetime.start(i64 16, i8* nonnull %20)
  store i64 %47, i64* %21, align 16
  store i64 0, i64* %22, align 8
  %54 = getelementptr inbounds [8 x i16], [8 x i16]* %23, i64 0, i64 3
  store i16 %53, i16* %54, align 2
  %55 = load i64, i64* %21, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %20)
  %56 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %9, i64 0, i32 1
  %57 = bitcast i64* %56 to i16*
  %58 = load i16, i16* %57, align 8
  %59 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %12, i64 0, i32 1
  %60 = bitcast i64* %59 to i16*
  %61 = load i16, i16* %60, align 8
  %62 = icmp eq i16 %58, %61
  %63 = sext i1 %62 to i16
  call void @llvm.lifetime.start(i64 16, i8* nonnull %20)
  store i64 %55, i64* %21, align 16
  store i64 0, i64* %22, align 8
  %64 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %7, i64 0, i32 1
  %65 = bitcast i64* %64 to i16*
  store i16 %63, i16* %65, align 8
  %66 = load i64, i64* %22, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %20)
  %67 = getelementptr inbounds %struct.uint16v8_t, %struct.uint16v8_t* %10, i64 0, i32 0, i64 5
  %68 = load i16, i16* %67, align 2
  %69 = getelementptr inbounds %struct.uint16v8_t, %struct.uint16v8_t* %13, i64 0, i32 0, i64 5
  %70 = load i16, i16* %69, align 2
  %71 = icmp eq i16 %68, %70
  %72 = sext i1 %71 to i16
  call void @llvm.lifetime.start(i64 16, i8* nonnull %20)
  store i64 %55, i64* %21, align 16
  store i64 %66, i64* %22, align 8
  %73 = getelementptr inbounds [8 x i16], [8 x i16]* %23, i64 0, i64 5
  store i16 %72, i16* %73, align 2
  %74 = load i64, i64* %22, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %20)
  %75 = getelementptr inbounds %struct.uint16v8_t, %struct.uint16v8_t* %10, i64 0, i32 0, i64 6
  %76 = load i16, i16* %75, align 4
  %77 = getelementptr inbounds %struct.uint16v8_t, %struct.uint16v8_t* %13, i64 0, i32 0, i64 6
  %78 = load i16, i16* %77, align 4
  %79 = icmp eq i16 %76, %78
  %80 = sext i1 %79 to i16
  call void @llvm.lifetime.start(i64 16, i8* nonnull %20)
  store i64 %55, i64* %21, align 16
  store i64 %74, i64* %22, align 8
  %81 = getelementptr inbounds [8 x i16], [8 x i16]* %23, i64 0, i64 6
  store i16 %80, i16* %81, align 4
  %82 = load i64, i64* %22, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %20)
  %83 = getelementptr inbounds %struct.uint16v8_t, %struct.uint16v8_t* %10, i64 0, i32 0, i64 7
  %84 = load i16, i16* %83, align 2
  %85 = getelementptr inbounds %struct.uint16v8_t, %struct.uint16v8_t* %13, i64 0, i32 0, i64 7
  %86 = load i16, i16* %85, align 2
  %87 = icmp eq i16 %84, %86
  %88 = sext i1 %87 to i16
  call void @llvm.lifetime.start(i64 16, i8* nonnull %20)
  store i64 %55, i64* %21, align 16
  store i64 %82, i64* %22, align 8
  %89 = getelementptr inbounds [8 x i16], [8 x i16]* %23, i64 0, i64 7
  store i16 %88, i16* %89, align 2
  %90 = load i64, i64* %22, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %20)
  %91 = lshr i64 %55, 16
  %92 = lshr i64 %55, 32
  %93 = lshr i64 %55, 48
  %94 = trunc i64 %55 to i16
  %95 = trunc i64 %91 to i16
  %96 = trunc i64 %92 to i16
  %97 = trunc i64 %93 to i16
  %98 = bitcast i8* %2 to i16*
  store i16 %94, i16* %98, align 1
  %99 = getelementptr inbounds i8, i8* %2, i64 2
  %100 = bitcast i8* %99 to i16*
  store i16 %95, i16* %100, align 1
  %101 = getelementptr inbounds i8, i8* %2, i64 4
  %102 = bitcast i8* %101 to i16*
  store i16 %96, i16* %102, align 1
  %103 = getelementptr inbounds i8, i8* %2, i64 6
  %104 = bitcast i8* %103 to i16*
  store i16 %97, i16* %104, align 1
  %105 = trunc i64 %90 to i16
  %106 = getelementptr inbounds i8, i8* %2, i64 8
  %107 = bitcast i8* %106 to i16*
  store i16 %105, i16* %107, align 1
  %108 = lshr i64 %90, 16
  %109 = trunc i64 %108 to i16
  %110 = getelementptr inbounds i8, i8* %2, i64 10
  %111 = bitcast i8* %110 to i16*
  store i16 %109, i16* %111, align 1
  %112 = lshr i64 %90, 32
  %113 = trunc i64 %112 to i16
  %114 = getelementptr inbounds i8, i8* %2, i64 12
  %115 = bitcast i8* %114 to i16*
  store i16 %113, i16* %115, align 1
  %116 = lshr i64 %90, 48
  %117 = trunc i64 %116 to i16
  %118 = getelementptr inbounds i8, i8* %2, i64 14
  %119 = bitcast i8* %118 to i16*
  store i16 %117, i16* %119, align 1
  call void @llvm.lifetime.end(i64 16, i8* nonnull %17) 
  call void @llvm.lifetime.end(i64 16, i8* nonnull %14) 
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L7PCMPEQBI3VnWI8vec128_tE2VnIS2_E3MVnIS2_EEEP6MemoryS9_R5StateT_T0_T1_(%struct.Memory* returned, %struct.State* nocapture readnone dereferenceable(3376), i8* nocapture, i8* nocapture readonly, i64)  {
  %6 = alloca <2 x i64>, align 16
  %7 = bitcast <2 x i64>* %6 to { i64, i64 }*
  %8 = alloca <2 x i64>, align 16
  %9 = bitcast <2 x i64>* %8 to { i64, i64 }*
  %10 = bitcast <2 x i64>* %8 to %struct.uint8v16_t*
  %11 = alloca <2 x i64>, align 16
  %12 = bitcast <2 x i64>* %11 to { i64, i64 }*
  %13 = bitcast <2 x i64>* %11 to %struct.uint8v16_t*
  %14 = bitcast <2 x i64>* %8 to i8*
  call void @llvm.lifetime.start(i64 16, i8* nonnull %14) 
  %15 = bitcast i8* %3 to <2 x i64>*
  %16 = load <2 x i64>, <2 x i64>* %15, align 1
  store <2 x i64> %16, <2 x i64>* %8, align 16
  %17 = bitcast <2 x i64>* %11 to i8*
  call void @llvm.lifetime.start(i64 16, i8* nonnull %17) 
  %18 = inttoptr i64 %4 to i8*
  %19 = load i8, i8* %18
  %20 = add i64 %4, 1
  %21 = inttoptr i64 %20 to i8*
  %22 = load i8, i8* %21
  %23 = add i64 %4, 2
  %24 = inttoptr i64 %23 to i8*
  %25 = load i8, i8* %24
  %26 = add i64 %4, 3
  %27 = inttoptr i64 %26 to i8*
  %28 = load i8, i8* %27
  %29 = add i64 %4, 4
  %30 = inttoptr i64 %29 to i8*
  %31 = load i8, i8* %30
  %32 = add i64 %4, 5
  %33 = inttoptr i64 %32 to i8*
  %34 = load i8, i8* %33
  %35 = add i64 %4, 6
  %36 = inttoptr i64 %35 to i8*
  %37 = load i8, i8* %36
  %38 = add i64 %4, 7
  %39 = inttoptr i64 %38 to i8*
  %40 = load i8, i8* %39
  %41 = add i64 %4, 8
  %42 = inttoptr i64 %41 to i8*
  %43 = load i8, i8* %42
  %44 = add i64 %4, 9
  %45 = inttoptr i64 %44 to i8*
  %46 = load i8, i8* %45
  %47 = add i64 %4, 10
  %48 = inttoptr i64 %47 to i8*
  %49 = load i8, i8* %48
  %50 = add i64 %4, 11
  %51 = inttoptr i64 %50 to i8*
  %52 = load i8, i8* %51
  %53 = add i64 %4, 12
  %54 = inttoptr i64 %53 to i8*
  %55 = load i8, i8* %54
  %56 = add i64 %4, 13
  %57 = inttoptr i64 %56 to i8*
  %58 = load i8, i8* %57
  %59 = add i64 %4, 14
  %60 = inttoptr i64 %59 to i8*
  %61 = load i8, i8* %60
  %62 = add i64 %4, 15
  %63 = inttoptr i64 %62 to i8*
  %64 = load i8, i8* %63
  %65 = insertelement <2 x i8> undef, i8 %40, i32 0
  %66 = insertelement <2 x i8> %65, i8 %64, i32 1
  %67 = zext <2 x i8> %66 to <2 x i64>
  %68 = shl nuw <2 x i64> %67, <i64 56, i64 56>
  %69 = insertelement <2 x i8> undef, i8 %37, i32 0
  %70 = insertelement <2 x i8> %69, i8 %61, i32 1
  %71 = zext <2 x i8> %70 to <2 x i64>
  %72 = shl nuw nsw <2 x i64> %71, <i64 48, i64 48>
  %73 = insertelement <2 x i8> undef, i8 %34, i32 0
  %74 = insertelement <2 x i8> %73, i8 %58, i32 1
  %75 = zext <2 x i8> %74 to <2 x i64>
  %76 = shl nuw nsw <2 x i64> %75, <i64 40, i64 40>
  %77 = insertelement <2 x i8> undef, i8 %31, i32 0
  %78 = insertelement <2 x i8> %77, i8 %55, i32 1
  %79 = zext <2 x i8> %78 to <2 x i64>
  %80 = shl nuw nsw <2 x i64> %79, <i64 32, i64 32>
  %81 = insertelement <2 x i8> undef, i8 %28, i32 0
  %82 = insertelement <2 x i8> %81, i8 %52, i32 1
  %83 = zext <2 x i8> %82 to <2 x i64>
  %84 = shl nuw nsw <2 x i64> %83, <i64 24, i64 24>
  %85 = insertelement <2 x i8> undef, i8 %25, i32 0
  %86 = insertelement <2 x i8> %85, i8 %49, i32 1
  %87 = zext <2 x i8> %86 to <2 x i64>
  %88 = shl nuw nsw <2 x i64> %87, <i64 16, i64 16>
  %89 = insertelement <2 x i8> undef, i8 %22, i32 0
  %90 = insertelement <2 x i8> %89, i8 %46, i32 1
  %91 = zext <2 x i8> %90 to <2 x i64>
  %92 = shl nuw nsw <2 x i64> %91, <i64 8, i64 8>
  %93 = insertelement <2 x i8> undef, i8 %19, i32 0
  %94 = insertelement <2 x i8> %93, i8 %43, i32 1
  %95 = zext <2 x i8> %94 to <2 x i64>
  %96 = or <2 x i64> %92, %95
  %97 = or <2 x i64> %96, %88
  %98 = or <2 x i64> %97, %84
  %99 = or <2 x i64> %98, %80
  %100 = or <2 x i64> %99, %76
  %101 = or <2 x i64> %100, %72
  %102 = or <2 x i64> %101, %68
  store <2 x i64> %102, <2 x i64>* %11, align 16
  %103 = bitcast <2 x i64>* %6 to i8*
  %104 = getelementptr inbounds <2 x i64>, <2 x i64>* %6, i64 0, i64 0
  %105 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %7, i64 0, i32 1
  %106 = bitcast <2 x i64>* %6 to [16 x i8]*
  %107 = extractelement <2 x i64> %16, i32 0
  %108 = trunc i64 %107 to i8
  %109 = icmp eq i8 %108, %19
  %110 = sext i1 %109 to i8
  call void @llvm.lifetime.start(i64 16, i8* nonnull %103)
  store <2 x i64> zeroinitializer, <2 x i64>* %6, align 16
  %111 = bitcast <2 x i64>* %6 to i8*
  store i8 %110, i8* %111, align 16
  %112 = load i64, i64* %104, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %103)
  %113 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %10, i64 0, i32 0, i64 1
  %114 = load i8, i8* %113, align 1
  %115 = icmp eq i8 %114, %22
  %116 = sext i1 %115 to i8
  call void @llvm.lifetime.start(i64 16, i8* nonnull %103)
  store i64 %112, i64* %104, align 16
  store i64 0, i64* %105, align 8
  %117 = getelementptr inbounds [16 x i8], [16 x i8]* %106, i64 0, i64 1
  store i8 %116, i8* %117, align 1
  %118 = load i64, i64* %104, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %103)
  %119 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %10, i64 0, i32 0, i64 2
  %120 = load i8, i8* %119, align 2
  %121 = icmp eq i8 %120, %25
  %122 = sext i1 %121 to i8
  call void @llvm.lifetime.start(i64 16, i8* nonnull %103)
  store i64 %118, i64* %104, align 16
  store i64 0, i64* %105, align 8
  %123 = getelementptr inbounds [16 x i8], [16 x i8]* %106, i64 0, i64 2
  store i8 %122, i8* %123, align 2
  %124 = load i64, i64* %104, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %103)
  %125 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %10, i64 0, i32 0, i64 3
  %126 = load i8, i8* %125, align 1
  %127 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %13, i64 0, i32 0, i64 3
  %128 = load i8, i8* %127, align 1
  %129 = icmp eq i8 %126, %128
  %130 = sext i1 %129 to i8
  call void @llvm.lifetime.start(i64 16, i8* nonnull %103)
  store i64 %124, i64* %104, align 16
  store i64 0, i64* %105, align 8
  %131 = getelementptr inbounds [16 x i8], [16 x i8]* %106, i64 0, i64 3
  store i8 %130, i8* %131, align 1
  %132 = load i64, i64* %104, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %103)
  %133 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %10, i64 0, i32 0, i64 4
  %134 = load i8, i8* %133, align 4
  %135 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %13, i64 0, i32 0, i64 4
  %136 = load i8, i8* %135, align 4
  %137 = icmp eq i8 %134, %136
  %138 = sext i1 %137 to i8
  call void @llvm.lifetime.start(i64 16, i8* nonnull %103)
  store i64 %132, i64* %104, align 16
  store i64 0, i64* %105, align 8
  %139 = getelementptr inbounds [16 x i8], [16 x i8]* %106, i64 0, i64 4
  store i8 %138, i8* %139, align 4
  %140 = load i64, i64* %104, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %103)
  %141 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %10, i64 0, i32 0, i64 5
  %142 = load i8, i8* %141, align 1
  %143 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %13, i64 0, i32 0, i64 5
  %144 = load i8, i8* %143, align 1
  %145 = icmp eq i8 %142, %144
  %146 = sext i1 %145 to i8
  call void @llvm.lifetime.start(i64 16, i8* nonnull %103)
  store i64 %140, i64* %104, align 16
  store i64 0, i64* %105, align 8
  %147 = getelementptr inbounds [16 x i8], [16 x i8]* %106, i64 0, i64 5
  store i8 %146, i8* %147, align 1
  %148 = load i64, i64* %104, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %103)
  %149 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %10, i64 0, i32 0, i64 6
  %150 = load i8, i8* %149, align 2
  %151 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %13, i64 0, i32 0, i64 6
  %152 = load i8, i8* %151, align 2
  %153 = icmp eq i8 %150, %152
  %154 = sext i1 %153 to i8
  call void @llvm.lifetime.start(i64 16, i8* nonnull %103)
  store i64 %148, i64* %104, align 16
  store i64 0, i64* %105, align 8
  %155 = getelementptr inbounds [16 x i8], [16 x i8]* %106, i64 0, i64 6
  store i8 %154, i8* %155, align 2
  %156 = load i64, i64* %104, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %103)
  %157 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %10, i64 0, i32 0, i64 7
  %158 = load i8, i8* %157, align 1
  %159 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %13, i64 0, i32 0, i64 7
  %160 = load i8, i8* %159, align 1
  %161 = icmp eq i8 %158, %160
  %162 = sext i1 %161 to i8
  call void @llvm.lifetime.start(i64 16, i8* nonnull %103)
  store i64 %156, i64* %104, align 16
  store i64 0, i64* %105, align 8
  %163 = getelementptr inbounds [16 x i8], [16 x i8]* %106, i64 0, i64 7
  store i8 %162, i8* %163, align 1
  %164 = load i64, i64* %104, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %103)
  %165 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %9, i64 0, i32 1
  %166 = bitcast i64* %165 to i8*
  %167 = load i8, i8* %166, align 8
  %168 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %12, i64 0, i32 1
  %169 = bitcast i64* %168 to i8*
  %170 = load i8, i8* %169, align 8
  %171 = icmp eq i8 %167, %170
  %172 = sext i1 %171 to i8
  call void @llvm.lifetime.start(i64 16, i8* nonnull %103)
  store i64 %164, i64* %104, align 16
  store i64 0, i64* %105, align 8
  %173 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %7, i64 0, i32 1
  %174 = bitcast i64* %173 to i8*
  store i8 %172, i8* %174, align 8
  %175 = load i64, i64* %105, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %103)
  %176 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %10, i64 0, i32 0, i64 9
  %177 = load i8, i8* %176, align 1
  %178 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %13, i64 0, i32 0, i64 9
  %179 = load i8, i8* %178, align 1
  %180 = icmp eq i8 %177, %179
  %181 = sext i1 %180 to i8
  call void @llvm.lifetime.start(i64 16, i8* nonnull %103)
  store i64 %164, i64* %104, align 16
  store i64 %175, i64* %105, align 8
  %182 = getelementptr inbounds [16 x i8], [16 x i8]* %106, i64 0, i64 9
  store i8 %181, i8* %182, align 1
  %183 = load i64, i64* %105, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %103)
  %184 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %10, i64 0, i32 0, i64 10
  %185 = load i8, i8* %184, align 2
  %186 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %13, i64 0, i32 0, i64 10
  %187 = load i8, i8* %186, align 2
  %188 = icmp eq i8 %185, %187
  %189 = sext i1 %188 to i8
  call void @llvm.lifetime.start(i64 16, i8* nonnull %103)
  store i64 %164, i64* %104, align 16
  store i64 %183, i64* %105, align 8
  %190 = getelementptr inbounds [16 x i8], [16 x i8]* %106, i64 0, i64 10
  store i8 %189, i8* %190, align 2
  %191 = load i64, i64* %105, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %103)
  %192 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %10, i64 0, i32 0, i64 11
  %193 = load i8, i8* %192, align 1
  %194 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %13, i64 0, i32 0, i64 11
  %195 = load i8, i8* %194, align 1
  %196 = icmp eq i8 %193, %195
  %197 = sext i1 %196 to i8
  call void @llvm.lifetime.start(i64 16, i8* nonnull %103)
  store i64 %164, i64* %104, align 16
  store i64 %191, i64* %105, align 8
  %198 = getelementptr inbounds [16 x i8], [16 x i8]* %106, i64 0, i64 11
  store i8 %197, i8* %198, align 1
  %199 = load i64, i64* %105, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %103)
  %200 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %10, i64 0, i32 0, i64 12
  %201 = load i8, i8* %200, align 4
  %202 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %13, i64 0, i32 0, i64 12
  %203 = load i8, i8* %202, align 4
  %204 = icmp eq i8 %201, %203
  %205 = sext i1 %204 to i8
  call void @llvm.lifetime.start(i64 16, i8* nonnull %103)
  store i64 %164, i64* %104, align 16
  store i64 %199, i64* %105, align 8
  %206 = getelementptr inbounds [16 x i8], [16 x i8]* %106, i64 0, i64 12
  store i8 %205, i8* %206, align 4
  %207 = load i64, i64* %105, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %103)
  %208 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %10, i64 0, i32 0, i64 13
  %209 = load i8, i8* %208, align 1
  %210 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %13, i64 0, i32 0, i64 13
  %211 = load i8, i8* %210, align 1
  %212 = icmp eq i8 %209, %211
  %213 = sext i1 %212 to i8
  call void @llvm.lifetime.start(i64 16, i8* nonnull %103)
  store i64 %164, i64* %104, align 16
  store i64 %207, i64* %105, align 8
  %214 = getelementptr inbounds [16 x i8], [16 x i8]* %106, i64 0, i64 13
  store i8 %213, i8* %214, align 1
  %215 = load i64, i64* %105, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %103)
  %216 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %10, i64 0, i32 0, i64 14
  %217 = load i8, i8* %216, align 2
  %218 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %13, i64 0, i32 0, i64 14
  %219 = load i8, i8* %218, align 2
  %220 = icmp eq i8 %217, %219
  %221 = sext i1 %220 to i8
  call void @llvm.lifetime.start(i64 16, i8* nonnull %103)
  store i64 %164, i64* %104, align 16
  store i64 %215, i64* %105, align 8
  %222 = getelementptr inbounds [16 x i8], [16 x i8]* %106, i64 0, i64 14
  store i8 %221, i8* %222, align 2
  %223 = load i64, i64* %105, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %103)
  %224 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %10, i64 0, i32 0, i64 15
  %225 = load i8, i8* %224, align 1
  %226 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %13, i64 0, i32 0, i64 15
  %227 = load i8, i8* %226, align 1
  %228 = icmp eq i8 %225, %227
  %229 = sext i1 %228 to i8
  call void @llvm.lifetime.start(i64 16, i8* nonnull %103)
  store i64 %164, i64* %104, align 16
  store i64 %223, i64* %105, align 8
  %230 = getelementptr inbounds [16 x i8], [16 x i8]* %106, i64 0, i64 15
  store i8 %229, i8* %230, align 1
  %231 = load i64, i64* %105, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %103)
  %232 = lshr i64 %164, 8
  %233 = lshr i64 %164, 16
  %234 = lshr i64 %164, 24
  %235 = lshr i64 %164, 32
  %236 = lshr i64 %164, 40
  %237 = lshr i64 %164, 48
  %238 = lshr i64 %164, 56
  %239 = trunc i64 %164 to i8
  %240 = trunc i64 %232 to i8
  %241 = trunc i64 %233 to i8
  %242 = trunc i64 %234 to i8
  %243 = trunc i64 %235 to i8
  %244 = trunc i64 %236 to i8
  %245 = trunc i64 %237 to i8
  %246 = trunc i64 %238 to i8
  store i8 %239, i8* %2, align 1
  %247 = getelementptr inbounds i8, i8* %2, i64 1
  store i8 %240, i8* %247, align 1
  %248 = getelementptr inbounds i8, i8* %2, i64 2
  store i8 %241, i8* %248, align 1
  %249 = getelementptr inbounds i8, i8* %2, i64 3
  store i8 %242, i8* %249, align 1
  %250 = getelementptr inbounds i8, i8* %2, i64 4
  store i8 %243, i8* %250, align 1
  %251 = getelementptr inbounds i8, i8* %2, i64 5
  store i8 %244, i8* %251, align 1
  %252 = getelementptr inbounds i8, i8* %2, i64 6
  store i8 %245, i8* %252, align 1
  %253 = getelementptr inbounds i8, i8* %2, i64 7
  store i8 %246, i8* %253, align 1
  %254 = trunc i64 %231 to i8
  %255 = getelementptr inbounds i8, i8* %2, i64 8
  store i8 %254, i8* %255, align 1
  %256 = lshr i64 %231, 8
  %257 = trunc i64 %256 to i8
  %258 = getelementptr inbounds i8, i8* %2, i64 9
  store i8 %257, i8* %258, align 1
  %259 = lshr i64 %231, 16
  %260 = trunc i64 %259 to i8
  %261 = getelementptr inbounds i8, i8* %2, i64 10
  store i8 %260, i8* %261, align 1
  %262 = lshr i64 %231, 24
  %263 = trunc i64 %262 to i8
  %264 = getelementptr inbounds i8, i8* %2, i64 11
  store i8 %263, i8* %264, align 1
  %265 = lshr i64 %231, 32
  %266 = trunc i64 %265 to i8
  %267 = getelementptr inbounds i8, i8* %2, i64 12
  store i8 %266, i8* %267, align 1
  %268 = lshr i64 %231, 40
  %269 = trunc i64 %268 to i8
  %270 = getelementptr inbounds i8, i8* %2, i64 13
  store i8 %269, i8* %270, align 1
  %271 = lshr i64 %231, 48
  %272 = trunc i64 %271 to i8
  %273 = getelementptr inbounds i8, i8* %2, i64 14
  store i8 %272, i8* %273, align 1
  %274 = lshr i64 %231, 56
  %275 = trunc i64 %274 to i8
  %276 = getelementptr inbounds i8, i8* %2, i64 15
  store i8 %275, i8* %276, align 1
  call void @llvm.lifetime.end(i64 16, i8* nonnull %17) 
  call void @llvm.lifetime.end(i64 16, i8* nonnull %14) 
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L7PCMPEQBI3VnWI8vec128_tE2VnIS2_ES5_EEP6MemoryS7_R5StateT_T0_T1_(%struct.Memory* readnone returned, %struct.State* nocapture readnone dereferenceable(3376), i8* nocapture, i8* nocapture readonly, i8* nocapture readonly)  {
  %6 = alloca <2 x i64>, align 16
  %7 = bitcast <2 x i64>* %6 to { i64, i64 }*
  %8 = alloca <2 x i64>, align 16
  %9 = bitcast <2 x i64>* %8 to { i64, i64 }*
  %10 = bitcast <2 x i64>* %8 to %struct.uint8v16_t*
  %11 = alloca <2 x i64>, align 16
  %12 = bitcast <2 x i64>* %11 to { i64, i64 }*
  %13 = bitcast <2 x i64>* %11 to %struct.uint8v16_t*
  %14 = bitcast <2 x i64>* %8 to i8*
  call void @llvm.lifetime.start(i64 16, i8* nonnull %14) 
  %15 = bitcast i8* %3 to <2 x i64>*
  %16 = load <2 x i64>, <2 x i64>* %15, align 1
  store <2 x i64> %16, <2 x i64>* %8, align 16
  %17 = bitcast <2 x i64>* %11 to i8*
  call void @llvm.lifetime.start(i64 16, i8* nonnull %17) 
  %18 = bitcast i8* %4 to <2 x i64>*
  %19 = load <2 x i64>, <2 x i64>* %18, align 1
  store <2 x i64> %19, <2 x i64>* %11, align 16
  %20 = bitcast <2 x i64>* %6 to i8*
  %21 = getelementptr inbounds <2 x i64>, <2 x i64>* %6, i64 0, i64 0
  %22 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %7, i64 0, i32 1
  %23 = bitcast <2 x i64>* %6 to [16 x i8]*
  %24 = extractelement <2 x i64> %16, i32 0
  %25 = trunc i64 %24 to i8
  %26 = extractelement <2 x i64> %19, i32 0
  %27 = trunc i64 %26 to i8
  %28 = icmp eq i8 %25, %27
  %29 = sext i1 %28 to i8
  call void @llvm.lifetime.start(i64 16, i8* nonnull %20)
  store <2 x i64> zeroinitializer, <2 x i64>* %6, align 16
  %30 = bitcast <2 x i64>* %6 to i8*
  store i8 %29, i8* %30, align 16
  %31 = load i64, i64* %21, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %20)
  %32 = lshr i64 %24, 8
  %33 = trunc i64 %32 to i8
  %34 = lshr i64 %26, 8
  %35 = trunc i64 %34 to i8
  %36 = icmp eq i8 %33, %35
  %37 = sext i1 %36 to i8
  call void @llvm.lifetime.start(i64 16, i8* nonnull %20)
  store i64 %31, i64* %21, align 16
  store i64 0, i64* %22, align 8
  %38 = getelementptr inbounds [16 x i8], [16 x i8]* %23, i64 0, i64 1
  store i8 %37, i8* %38, align 1
  %39 = load i64, i64* %21, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %20)
  %40 = lshr i64 %24, 16
  %41 = trunc i64 %40 to i8
  %42 = lshr i64 %26, 16
  %43 = trunc i64 %42 to i8
  %44 = icmp eq i8 %41, %43
  %45 = sext i1 %44 to i8
  call void @llvm.lifetime.start(i64 16, i8* nonnull %20)
  store i64 %39, i64* %21, align 16
  store i64 0, i64* %22, align 8
  %46 = getelementptr inbounds [16 x i8], [16 x i8]* %23, i64 0, i64 2
  store i8 %45, i8* %46, align 2
  %47 = load i64, i64* %21, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %20)
  %48 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %10, i64 0, i32 0, i64 3
  %49 = load i8, i8* %48, align 1
  %50 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %13, i64 0, i32 0, i64 3
  %51 = load i8, i8* %50, align 1
  %52 = icmp eq i8 %49, %51
  %53 = sext i1 %52 to i8
  call void @llvm.lifetime.start(i64 16, i8* nonnull %20)
  store i64 %47, i64* %21, align 16
  store i64 0, i64* %22, align 8
  %54 = getelementptr inbounds [16 x i8], [16 x i8]* %23, i64 0, i64 3
  store i8 %53, i8* %54, align 1
  %55 = load i64, i64* %21, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %20)
  %56 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %10, i64 0, i32 0, i64 4
  %57 = load i8, i8* %56, align 4
  %58 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %13, i64 0, i32 0, i64 4
  %59 = load i8, i8* %58, align 4
  %60 = icmp eq i8 %57, %59
  %61 = sext i1 %60 to i8
  call void @llvm.lifetime.start(i64 16, i8* nonnull %20)
  store i64 %55, i64* %21, align 16
  store i64 0, i64* %22, align 8
  %62 = getelementptr inbounds [16 x i8], [16 x i8]* %23, i64 0, i64 4
  store i8 %61, i8* %62, align 4
  %63 = load i64, i64* %21, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %20)
  %64 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %10, i64 0, i32 0, i64 5
  %65 = load i8, i8* %64, align 1
  %66 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %13, i64 0, i32 0, i64 5
  %67 = load i8, i8* %66, align 1
  %68 = icmp eq i8 %65, %67
  %69 = sext i1 %68 to i8
  call void @llvm.lifetime.start(i64 16, i8* nonnull %20)
  store i64 %63, i64* %21, align 16
  store i64 0, i64* %22, align 8
  %70 = getelementptr inbounds [16 x i8], [16 x i8]* %23, i64 0, i64 5
  store i8 %69, i8* %70, align 1
  %71 = load i64, i64* %21, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %20)
  %72 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %10, i64 0, i32 0, i64 6
  %73 = load i8, i8* %72, align 2
  %74 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %13, i64 0, i32 0, i64 6
  %75 = load i8, i8* %74, align 2
  %76 = icmp eq i8 %73, %75
  %77 = sext i1 %76 to i8
  call void @llvm.lifetime.start(i64 16, i8* nonnull %20)
  store i64 %71, i64* %21, align 16
  store i64 0, i64* %22, align 8
  %78 = getelementptr inbounds [16 x i8], [16 x i8]* %23, i64 0, i64 6
  store i8 %77, i8* %78, align 2
  %79 = load i64, i64* %21, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %20)
  %80 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %10, i64 0, i32 0, i64 7
  %81 = load i8, i8* %80, align 1
  %82 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %13, i64 0, i32 0, i64 7
  %83 = load i8, i8* %82, align 1
  %84 = icmp eq i8 %81, %83
  %85 = sext i1 %84 to i8
  call void @llvm.lifetime.start(i64 16, i8* nonnull %20)
  store i64 %79, i64* %21, align 16
  store i64 0, i64* %22, align 8
  %86 = getelementptr inbounds [16 x i8], [16 x i8]* %23, i64 0, i64 7
  store i8 %85, i8* %86, align 1
  %87 = load i64, i64* %21, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %20)
  %88 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %9, i64 0, i32 1
  %89 = bitcast i64* %88 to i8*
  %90 = load i8, i8* %89, align 8
  %91 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %12, i64 0, i32 1
  %92 = bitcast i64* %91 to i8*
  %93 = load i8, i8* %92, align 8
  %94 = icmp eq i8 %90, %93
  %95 = sext i1 %94 to i8
  call void @llvm.lifetime.start(i64 16, i8* nonnull %20)
  store i64 %87, i64* %21, align 16
  store i64 0, i64* %22, align 8
  %96 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %7, i64 0, i32 1
  %97 = bitcast i64* %96 to i8*
  store i8 %95, i8* %97, align 8
  %98 = load i64, i64* %22, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %20)
  %99 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %10, i64 0, i32 0, i64 9
  %100 = load i8, i8* %99, align 1
  %101 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %13, i64 0, i32 0, i64 9
  %102 = load i8, i8* %101, align 1
  %103 = icmp eq i8 %100, %102
  %104 = sext i1 %103 to i8
  call void @llvm.lifetime.start(i64 16, i8* nonnull %20)
  store i64 %87, i64* %21, align 16
  store i64 %98, i64* %22, align 8
  %105 = getelementptr inbounds [16 x i8], [16 x i8]* %23, i64 0, i64 9
  store i8 %104, i8* %105, align 1
  %106 = load i64, i64* %22, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %20)
  %107 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %10, i64 0, i32 0, i64 10
  %108 = load i8, i8* %107, align 2
  %109 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %13, i64 0, i32 0, i64 10
  %110 = load i8, i8* %109, align 2
  %111 = icmp eq i8 %108, %110
  %112 = sext i1 %111 to i8
  call void @llvm.lifetime.start(i64 16, i8* nonnull %20)
  store i64 %87, i64* %21, align 16
  store i64 %106, i64* %22, align 8
  %113 = getelementptr inbounds [16 x i8], [16 x i8]* %23, i64 0, i64 10
  store i8 %112, i8* %113, align 2
  %114 = load i64, i64* %22, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %20)
  %115 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %10, i64 0, i32 0, i64 11
  %116 = load i8, i8* %115, align 1
  %117 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %13, i64 0, i32 0, i64 11
  %118 = load i8, i8* %117, align 1
  %119 = icmp eq i8 %116, %118
  %120 = sext i1 %119 to i8
  call void @llvm.lifetime.start(i64 16, i8* nonnull %20)
  store i64 %87, i64* %21, align 16
  store i64 %114, i64* %22, align 8
  %121 = getelementptr inbounds [16 x i8], [16 x i8]* %23, i64 0, i64 11
  store i8 %120, i8* %121, align 1
  %122 = load i64, i64* %22, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %20)
  %123 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %10, i64 0, i32 0, i64 12
  %124 = load i8, i8* %123, align 4
  %125 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %13, i64 0, i32 0, i64 12
  %126 = load i8, i8* %125, align 4
  %127 = icmp eq i8 %124, %126
  %128 = sext i1 %127 to i8
  call void @llvm.lifetime.start(i64 16, i8* nonnull %20)
  store i64 %87, i64* %21, align 16
  store i64 %122, i64* %22, align 8
  %129 = getelementptr inbounds [16 x i8], [16 x i8]* %23, i64 0, i64 12
  store i8 %128, i8* %129, align 4
  %130 = load i64, i64* %22, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %20)
  %131 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %10, i64 0, i32 0, i64 13
  %132 = load i8, i8* %131, align 1
  %133 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %13, i64 0, i32 0, i64 13
  %134 = load i8, i8* %133, align 1
  %135 = icmp eq i8 %132, %134
  %136 = sext i1 %135 to i8
  call void @llvm.lifetime.start(i64 16, i8* nonnull %20)
  store i64 %87, i64* %21, align 16
  store i64 %130, i64* %22, align 8
  %137 = getelementptr inbounds [16 x i8], [16 x i8]* %23, i64 0, i64 13
  store i8 %136, i8* %137, align 1
  %138 = load i64, i64* %22, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %20)
  %139 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %10, i64 0, i32 0, i64 14
  %140 = load i8, i8* %139, align 2
  %141 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %13, i64 0, i32 0, i64 14
  %142 = load i8, i8* %141, align 2
  %143 = icmp eq i8 %140, %142
  %144 = sext i1 %143 to i8
  call void @llvm.lifetime.start(i64 16, i8* nonnull %20)
  store i64 %87, i64* %21, align 16
  store i64 %138, i64* %22, align 8
  %145 = getelementptr inbounds [16 x i8], [16 x i8]* %23, i64 0, i64 14
  store i8 %144, i8* %145, align 2
  %146 = load i64, i64* %22, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %20)
  %147 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %10, i64 0, i32 0, i64 15
  %148 = load i8, i8* %147, align 1
  %149 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %13, i64 0, i32 0, i64 15
  %150 = load i8, i8* %149, align 1
  %151 = icmp eq i8 %148, %150
  %152 = sext i1 %151 to i8
  call void @llvm.lifetime.start(i64 16, i8* nonnull %20)
  store i64 %87, i64* %21, align 16
  store i64 %146, i64* %22, align 8
  %153 = getelementptr inbounds [16 x i8], [16 x i8]* %23, i64 0, i64 15
  store i8 %152, i8* %153, align 1
  %154 = load i64, i64* %22, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %20)
  %155 = lshr i64 %87, 8
  %156 = lshr i64 %87, 16
  %157 = lshr i64 %87, 24
  %158 = lshr i64 %87, 32
  %159 = lshr i64 %87, 40
  %160 = lshr i64 %87, 48
  %161 = lshr i64 %87, 56
  %162 = trunc i64 %87 to i8
  %163 = trunc i64 %155 to i8
  %164 = trunc i64 %156 to i8
  %165 = trunc i64 %157 to i8
  %166 = trunc i64 %158 to i8
  %167 = trunc i64 %159 to i8
  %168 = trunc i64 %160 to i8
  %169 = trunc i64 %161 to i8
  store i8 %162, i8* %2, align 1
  %170 = getelementptr inbounds i8, i8* %2, i64 1
  store i8 %163, i8* %170, align 1
  %171 = getelementptr inbounds i8, i8* %2, i64 2
  store i8 %164, i8* %171, align 1
  %172 = getelementptr inbounds i8, i8* %2, i64 3
  store i8 %165, i8* %172, align 1
  %173 = getelementptr inbounds i8, i8* %2, i64 4
  store i8 %166, i8* %173, align 1
  %174 = getelementptr inbounds i8, i8* %2, i64 5
  store i8 %167, i8* %174, align 1
  %175 = getelementptr inbounds i8, i8* %2, i64 6
  store i8 %168, i8* %175, align 1
  %176 = getelementptr inbounds i8, i8* %2, i64 7
  store i8 %169, i8* %176, align 1
  %177 = trunc i64 %154 to i8
  %178 = getelementptr inbounds i8, i8* %2, i64 8
  store i8 %177, i8* %178, align 1
  %179 = lshr i64 %154, 8
  %180 = trunc i64 %179 to i8
  %181 = getelementptr inbounds i8, i8* %2, i64 9
  store i8 %180, i8* %181, align 1
  %182 = lshr i64 %154, 16
  %183 = trunc i64 %182 to i8
  %184 = getelementptr inbounds i8, i8* %2, i64 10
  store i8 %183, i8* %184, align 1
  %185 = lshr i64 %154, 24
  %186 = trunc i64 %185 to i8
  %187 = getelementptr inbounds i8, i8* %2, i64 11
  store i8 %186, i8* %187, align 1
  %188 = lshr i64 %154, 32
  %189 = trunc i64 %188 to i8
  %190 = getelementptr inbounds i8, i8* %2, i64 12
  store i8 %189, i8* %190, align 1
  %191 = lshr i64 %154, 40
  %192 = trunc i64 %191 to i8
  %193 = getelementptr inbounds i8, i8* %2, i64 13
  store i8 %192, i8* %193, align 1
  %194 = lshr i64 %154, 48
  %195 = trunc i64 %194 to i8
  %196 = getelementptr inbounds i8, i8* %2, i64 14
  store i8 %195, i8* %196, align 1
  %197 = lshr i64 %154, 56
  %198 = trunc i64 %197 to i8
  %199 = getelementptr inbounds i8, i8* %2, i64 15
  store i8 %198, i8* %199, align 1
  call void @llvm.lifetime.end(i64 16, i8* nonnull %17) 
  call void @llvm.lifetime.end(i64 16, i8* nonnull %14) 
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L7PCMPEQDI3VnWI8vec128_tE2VnIS2_E3MVnIS2_EEEP6MemoryS9_R5StateT_T0_T1_(%struct.Memory* returned, %struct.State* nocapture readnone dereferenceable(3376), i8* nocapture, i8* nocapture readonly, i64)  {
  %6 = alloca <2 x i64>, align 16
  %7 = bitcast <2 x i64>* %6 to { i64, i64 }*
  %8 = bitcast i8* %3 to i64*
  %9 = load i64, i64* %8, align 1
  %10 = getelementptr inbounds i8, i8* %3, i64 8
  %11 = bitcast i8* %10 to i64*
  %12 = load i64, i64* %11, align 1
  %13 = inttoptr i64 %4 to i32*
  %14 = load i32, i32* %13
  %15 = add i64 %4, 4
  %16 = inttoptr i64 %15 to i32*
  %17 = load i32, i32* %16
  %18 = add i64 %4, 8
  %19 = inttoptr i64 %18 to i32*
  %20 = load i32, i32* %19
  %21 = add i64 %4, 12
  %22 = inttoptr i64 %21 to i32*
  %23 = load i32, i32* %22
  %24 = bitcast <2 x i64>* %6 to i8*
  %25 = getelementptr inbounds <2 x i64>, <2 x i64>* %6, i64 0, i64 0
  %26 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %7, i64 0, i32 1
  %27 = bitcast <2 x i64>* %6 to [4 x i32]*
  %28 = trunc i64 %9 to i32
  %29 = icmp eq i32 %28, %14
  %30 = sext i1 %29 to i32
  call void @llvm.lifetime.start(i64 16, i8* nonnull %24)
  store <2 x i64> zeroinitializer, <2 x i64>* %6, align 16
  %31 = bitcast <2 x i64>* %6 to i32*
  store i32 %30, i32* %31, align 16
  %32 = load i64, i64* %25, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %24)
  %33 = lshr i64 %9, 32
  %34 = trunc i64 %33 to i32
  %35 = icmp eq i32 %34, %17
  %36 = sext i1 %35 to i32
  call void @llvm.lifetime.start(i64 16, i8* nonnull %24)
  store i64 %32, i64* %25, align 16
  store i64 0, i64* %26, align 8
  %37 = getelementptr inbounds [4 x i32], [4 x i32]* %27, i64 0, i64 1
  store i32 %36, i32* %37, align 4
  %38 = load i64, i64* %25, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %24)
  %39 = trunc i64 %12 to i32
  %40 = icmp eq i32 %39, %20
  %41 = sext i1 %40 to i32
  call void @llvm.lifetime.start(i64 16, i8* nonnull %24)
  store i64 %38, i64* %25, align 16
  store i64 0, i64* %26, align 8
  %42 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %7, i64 0, i32 1
  %43 = bitcast i64* %42 to i32*
  store i32 %41, i32* %43, align 8
  %44 = load i64, i64* %26, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %24)
  %45 = lshr i64 %12, 32
  %46 = trunc i64 %45 to i32
  %47 = icmp eq i32 %46, %23
  %48 = sext i1 %47 to i32
  call void @llvm.lifetime.start(i64 16, i8* nonnull %24)
  store i64 %38, i64* %25, align 16
  store i64 %44, i64* %26, align 8
  %49 = getelementptr inbounds [4 x i32], [4 x i32]* %27, i64 0, i64 3
  store i32 %48, i32* %49, align 4
  %50 = load i64, i64* %26, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %24)
  %51 = lshr i64 %38, 32
  %52 = trunc i64 %38 to i32
  %53 = trunc i64 %51 to i32
  %54 = bitcast i8* %2 to i32*
  store i32 %52, i32* %54, align 1
  %55 = getelementptr inbounds i8, i8* %2, i64 4
  %56 = bitcast i8* %55 to i32*
  store i32 %53, i32* %56, align 1
  %57 = trunc i64 %50 to i32
  %58 = getelementptr inbounds i8, i8* %2, i64 8
  %59 = bitcast i8* %58 to i32*
  store i32 %57, i32* %59, align 1
  %60 = lshr i64 %50, 32
  %61 = trunc i64 %60 to i32
  %62 = getelementptr inbounds i8, i8* %2, i64 12
  %63 = bitcast i8* %62 to i32*
  store i32 %61, i32* %63, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L7PCMPEQDI3VnWI8vec128_tE2VnIS2_ES5_EEP6MemoryS7_R5StateT_T0_T1_(%struct.Memory* readnone returned, %struct.State* nocapture readnone dereferenceable(3376), i8* nocapture, i8* nocapture readonly, i8* nocapture readonly)  {
  %6 = alloca <2 x i64>, align 16
  %7 = bitcast <2 x i64>* %6 to { i64, i64 }*
  %8 = bitcast i8* %3 to i64*
  %9 = load i64, i64* %8, align 1
  %10 = getelementptr inbounds i8, i8* %3, i64 8
  %11 = bitcast i8* %10 to i64*
  %12 = load i64, i64* %11, align 1
  %13 = bitcast i8* %4 to i64*
  %14 = load i64, i64* %13, align 1
  %15 = getelementptr inbounds i8, i8* %4, i64 8
  %16 = bitcast i8* %15 to i64*
  %17 = load i64, i64* %16, align 1
  %18 = bitcast <2 x i64>* %6 to i8*
  %19 = getelementptr inbounds <2 x i64>, <2 x i64>* %6, i64 0, i64 0
  %20 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %7, i64 0, i32 1
  %21 = bitcast <2 x i64>* %6 to [4 x i32]*
  %22 = trunc i64 %9 to i32
  %23 = trunc i64 %14 to i32
  %24 = icmp eq i32 %22, %23
  %25 = sext i1 %24 to i32
  call void @llvm.lifetime.start(i64 16, i8* nonnull %18)
  store <2 x i64> zeroinitializer, <2 x i64>* %6, align 16
  %26 = bitcast <2 x i64>* %6 to i32*
  store i32 %25, i32* %26, align 16
  %27 = load i64, i64* %19, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %18)
  %28 = lshr i64 %9, 32
  %29 = trunc i64 %28 to i32
  %30 = lshr i64 %14, 32
  %31 = trunc i64 %30 to i32
  %32 = icmp eq i32 %29, %31
  %33 = sext i1 %32 to i32
  call void @llvm.lifetime.start(i64 16, i8* nonnull %18)
  store i64 %27, i64* %19, align 16
  store i64 0, i64* %20, align 8
  %34 = getelementptr inbounds [4 x i32], [4 x i32]* %21, i64 0, i64 1
  store i32 %33, i32* %34, align 4
  %35 = load i64, i64* %19, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %18)
  %36 = trunc i64 %12 to i32
  %37 = trunc i64 %17 to i32
  %38 = icmp eq i32 %36, %37
  %39 = sext i1 %38 to i32
  call void @llvm.lifetime.start(i64 16, i8* nonnull %18)
  store i64 %35, i64* %19, align 16
  store i64 0, i64* %20, align 8
  %40 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %7, i64 0, i32 1
  %41 = bitcast i64* %40 to i32*
  store i32 %39, i32* %41, align 8
  %42 = load i64, i64* %20, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %18)
  %43 = lshr i64 %12, 32
  %44 = trunc i64 %43 to i32
  %45 = lshr i64 %17, 32
  %46 = trunc i64 %45 to i32
  %47 = icmp eq i32 %44, %46
  %48 = sext i1 %47 to i32
  call void @llvm.lifetime.start(i64 16, i8* nonnull %18)
  store i64 %35, i64* %19, align 16
  store i64 %42, i64* %20, align 8
  %49 = getelementptr inbounds [4 x i32], [4 x i32]* %21, i64 0, i64 3
  store i32 %48, i32* %49, align 4
  %50 = load i64, i64* %20, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %18)
  %51 = lshr i64 %35, 32
  %52 = trunc i64 %35 to i32
  %53 = trunc i64 %51 to i32
  %54 = bitcast i8* %2 to i32*
  store i32 %52, i32* %54, align 1
  %55 = getelementptr inbounds i8, i8* %2, i64 4
  %56 = bitcast i8* %55 to i32*
  store i32 %53, i32* %56, align 1
  %57 = trunc i64 %50 to i32
  %58 = getelementptr inbounds i8, i8* %2, i64 8
  %59 = bitcast i8* %58 to i32*
  store i32 %57, i32* %59, align 1
  %60 = lshr i64 %50, 32
  %61 = trunc i64 %60 to i32
  %62 = getelementptr inbounds i8, i8* %2, i64 12
  %63 = bitcast i8* %62 to i32*
  store i32 %61, i32* %63, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L5CMPSSI3VnWI8vec128_tE2VnIS2_E3MVnI7vec32_tEEEP6MemorySA_R5StateT_T0_T1_2InIhE(%struct.Memory*, %struct.State* dereferenceable(3376), i8* nocapture, i8* nocapture readonly, i64, i64)  {
  %7 = inttoptr i64 %4 to float*
  %8 = load float, float* %7
  %9 = trunc i64 %5 to i8
  %10 = icmp ugt i8 %9, 31
  br i1 %10, label %11, label %15

; <label>:11:                                     ; preds = %6
  %12 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 33, i32 0, i32 0
  %13 = load i64, i64* %12, align 8
  %14 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %1, i64 %13, %struct.Memory* %0) 
  br label %90

; <label>:15:                                     ; preds = %6
  %16 = bitcast i8* %3 to <2 x float>*
  %17 = load <2 x float>, <2 x float>* %16, align 1
  %18 = extractelement <2 x float> %17, i32 0
  %19 = fcmp uno float %18, %8
  %20 = xor i1 %19, true
  switch i8 %9, label %78 [
    i8 0, label %21
    i8 1, label %24
    i8 2, label %27
    i8 3, label %79
    i8 4, label %30
    i8 5, label %32
    i8 6, label %34
    i8 7, label %36
    i8 8, label %37
    i8 9, label %39
    i8 10, label %41
    i8 11, label %81
    i8 12, label %43
    i8 13, label %45
    i8 14, label %48
    i8 15, label %80
    i8 16, label %51
    i8 17, label %54
    i8 18, label %56
    i8 19, label %79
    i8 20, label %58
    i8 21, label %60
    i8 22, label %62
    i8 23, label %64
    i8 24, label %65
    i8 25, label %67
    i8 26, label %69
    i8 27, label %81
    i8 28, label %71
    i8 29, label %74
    i8 30, label %76
    i8 31, label %80
  ]

; <label>:21:                                     ; preds = %15
  %22 = fcmp ueq float %18, %8
  %23 = and i1 %22, %20
  br i1 %23, label %80, label %81

; <label>:24:                                     ; preds = %15
  %25 = fcmp olt float %18, %8
  %26 = and i1 %25, %20
  br i1 %26, label %80, label %81

; <label>:27:                                     ; preds = %15
  %28 = fcmp ole float %18, %8
  %29 = and i1 %28, %20
  br i1 %29, label %80, label %81

; <label>:30:                                     ; preds = %15
  %31 = fcmp une float %18, %8
  br i1 %31, label %80, label %81

; <label>:32:                                     ; preds = %15
  %33 = fcmp uge float %18, %8
  br i1 %33, label %80, label %81

; <label>:34:                                     ; preds = %15
  %35 = fcmp ugt float %18, %8
  br i1 %35, label %80, label %81

; <label>:36:                                     ; preds = %15
  br i1 %19, label %81, label %80

; <label>:37:                                     ; preds = %15
  %38 = fcmp ueq float %18, %8
  br i1 %38, label %80, label %81

; <label>:39:                                     ; preds = %15
  %40 = fcmp ult float %18, %8
  br i1 %40, label %80, label %81

; <label>:41:                                     ; preds = %15
  %42 = fcmp ule float %18, %8
  br i1 %42, label %80, label %81

; <label>:43:                                     ; preds = %15
  %44 = fcmp ueq float %18, %8
  br i1 %44, label %81, label %80

; <label>:45:                                     ; preds = %15
  %46 = fcmp oge float %18, %8
  %47 = and i1 %46, %20
  br i1 %47, label %80, label %81

; <label>:48:                                     ; preds = %15
  %49 = fcmp ogt float %18, %8
  %50 = and i1 %49, %20
  br i1 %50, label %80, label %81

; <label>:51:                                     ; preds = %15
  %52 = fcmp oeq float %18, %8
  %53 = and i1 %52, %20
  br i1 %53, label %80, label %81

; <label>:54:                                     ; preds = %15
  %55 = fcmp olt float %18, %8
  br i1 %55, label %80, label %81

; <label>:56:                                     ; preds = %15
  %57 = fcmp ugt float %18, %8
  br i1 %57, label %81, label %80

; <label>:58:                                     ; preds = %15
  %59 = fcmp une float %18, %8
  br i1 %59, label %80, label %81

; <label>:60:                                     ; preds = %15
  %61 = fcmp uge float %18, %8
  br i1 %61, label %80, label %81

; <label>:62:                                     ; preds = %15
  %63 = fcmp ugt float %18, %8
  br i1 %63, label %80, label %81

; <label>:64:                                     ; preds = %15
  br i1 %19, label %81, label %80

; <label>:65:                                     ; preds = %15
  %66 = fcmp ueq float %18, %8
  br i1 %66, label %80, label %81

; <label>:67:                                     ; preds = %15
  %68 = fcmp ult float %18, %8
  br i1 %68, label %80, label %81

; <label>:69:                                     ; preds = %15
  %70 = fcmp ule float %18, %8
  br i1 %70, label %80, label %81

; <label>:71:                                     ; preds = %15
  %72 = fcmp une float %18, %8
  %73 = and i1 %72, %20
  br i1 %73, label %80, label %81

; <label>:74:                                     ; preds = %15
  %75 = fcmp ult float %18, %8
  br i1 %75, label %81, label %80

; <label>:76:                                     ; preds = %15
  %77 = fcmp ogt float %18, %8
  br i1 %77, label %80, label %81

; <label>:78:                                     ; preds = %15
  unreachable

; <label>:79:                                     ; preds = %15, %15
  br i1 %19, label %80, label %81

; <label>:80:                                     ; preds = %79, %76, %74, %71, %69, %67, %65, %64, %62, %60, %58, %56, %54, %51, %48, %45, %43, %41, %39, %37, %36, %34, %32, %30, %27, %24, %21, %15, %15
  br label %81

; <label>:81:                                     ; preds = %80, %79, %76, %74, %71, %69, %67, %65, %64, %62, %60, %58, %56, %54, %51, %48, %45, %43, %41, %39, %37, %36, %34, %32, %30, %27, %24, %21, %15, %15
  %82 = phi i32 [ -1, %80 ], [ 0, %79 ], [ 0, %76 ], [ 0, %74 ], [ 0, %71 ], [ 0, %69 ], [ 0, %67 ], [ 0, %65 ], [ 0, %64 ], [ 0, %62 ], [ 0, %60 ], [ 0, %58 ], [ 0, %56 ], [ 0, %54 ], [ 0, %51 ], [ 0, %48 ], [ 0, %45 ], [ 0, %43 ], [ 0, %41 ], [ 0, %39 ], [ 0, %37 ], [ 0, %36 ], [ 0, %34 ], [ 0, %32 ], [ 0, %30 ], [ 0, %27 ], [ 0, %24 ], [ 0, %21 ], [ 0, %15 ], [ 0, %15 ]
  %83 = bitcast i8* %2 to i32*
  store i32 %82, i32* %83, align 1
  %84 = getelementptr inbounds i8, i8* %2, i64 4
  %85 = bitcast i8* %84 to i32*
  store i32 0, i32* %85, align 1
  %86 = getelementptr inbounds i8, i8* %2, i64 8
  %87 = bitcast i8* %86 to i32*
  store i32 0, i32* %87, align 1
  %88 = getelementptr inbounds i8, i8* %2, i64 12
  %89 = bitcast i8* %88 to i32*
  store i32 0, i32* %89, align 1
  br label %90

; <label>:90:                                     ; preds = %81, %11
  %91 = phi %struct.Memory* [ %14, %11 ], [ %0, %81 ]
  ret %struct.Memory* %91
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L5CMPSSI3VnWI8vec128_tE2VnIS2_ES5_EEP6MemoryS7_R5StateT_T0_T1_2InIhE(%struct.Memory*, %struct.State* dereferenceable(3376), i8* nocapture, i8* nocapture readonly, i8* nocapture readonly, i64)  {
  %7 = trunc i64 %5 to i8
  %8 = icmp ugt i8 %7, 31
  br i1 %8, label %9, label %13

; <label>:9:                                      ; preds = %6
  %10 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 33, i32 0, i32 0
  %11 = load i64, i64* %10, align 8
  %12 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %1, i64 %11, %struct.Memory* %0) 
  br label %91

; <label>:13:                                     ; preds = %6
  %14 = bitcast i8* %4 to <2 x float>*
  %15 = load <2 x float>, <2 x float>* %14, align 1
  %16 = bitcast i8* %3 to <2 x float>*
  %17 = load <2 x float>, <2 x float>* %16, align 1
  %18 = extractelement <2 x float> %17, i32 0
  %19 = extractelement <2 x float> %15, i32 0
  %20 = fcmp uno float %18, %19
  %21 = xor i1 %20, true
  switch i8 %7, label %79 [
    i8 0, label %22
    i8 1, label %25
    i8 2, label %28
    i8 3, label %80
    i8 4, label %31
    i8 5, label %33
    i8 6, label %35
    i8 7, label %37
    i8 8, label %38
    i8 9, label %40
    i8 10, label %42
    i8 11, label %82
    i8 12, label %44
    i8 13, label %46
    i8 14, label %49
    i8 15, label %81
    i8 16, label %52
    i8 17, label %55
    i8 18, label %57
    i8 19, label %80
    i8 20, label %59
    i8 21, label %61
    i8 22, label %63
    i8 23, label %65
    i8 24, label %66
    i8 25, label %68
    i8 26, label %70
    i8 27, label %82
    i8 28, label %72
    i8 29, label %75
    i8 30, label %77
    i8 31, label %81
  ]

; <label>:22:                                     ; preds = %13
  %23 = fcmp ueq float %18, %19
  %24 = and i1 %23, %21
  br i1 %24, label %81, label %82

; <label>:25:                                     ; preds = %13
  %26 = fcmp olt float %18, %19
  %27 = and i1 %26, %21
  br i1 %27, label %81, label %82

; <label>:28:                                     ; preds = %13
  %29 = fcmp ole float %18, %19
  %30 = and i1 %29, %21
  br i1 %30, label %81, label %82

; <label>:31:                                     ; preds = %13
  %32 = fcmp une float %18, %19
  br i1 %32, label %81, label %82

; <label>:33:                                     ; preds = %13
  %34 = fcmp uge float %18, %19
  br i1 %34, label %81, label %82

; <label>:35:                                     ; preds = %13
  %36 = fcmp ugt float %18, %19
  br i1 %36, label %81, label %82

; <label>:37:                                     ; preds = %13
  br i1 %20, label %82, label %81

; <label>:38:                                     ; preds = %13
  %39 = fcmp ueq float %18, %19
  br i1 %39, label %81, label %82

; <label>:40:                                     ; preds = %13
  %41 = fcmp ult float %18, %19
  br i1 %41, label %81, label %82

; <label>:42:                                     ; preds = %13
  %43 = fcmp ule float %18, %19
  br i1 %43, label %81, label %82

; <label>:44:                                     ; preds = %13
  %45 = fcmp ueq float %18, %19
  br i1 %45, label %82, label %81

; <label>:46:                                     ; preds = %13
  %47 = fcmp oge float %18, %19
  %48 = and i1 %47, %21
  br i1 %48, label %81, label %82

; <label>:49:                                     ; preds = %13
  %50 = fcmp ogt float %18, %19
  %51 = and i1 %50, %21
  br i1 %51, label %81, label %82

; <label>:52:                                     ; preds = %13
  %53 = fcmp oeq float %18, %19
  %54 = and i1 %53, %21
  br i1 %54, label %81, label %82

; <label>:55:                                     ; preds = %13
  %56 = fcmp olt float %18, %19
  br i1 %56, label %81, label %82

; <label>:57:                                     ; preds = %13
  %58 = fcmp ugt float %18, %19
  br i1 %58, label %82, label %81

; <label>:59:                                     ; preds = %13
  %60 = fcmp une float %18, %19
  br i1 %60, label %81, label %82

; <label>:61:                                     ; preds = %13
  %62 = fcmp uge float %18, %19
  br i1 %62, label %81, label %82

; <label>:63:                                     ; preds = %13
  %64 = fcmp ugt float %18, %19
  br i1 %64, label %81, label %82

; <label>:65:                                     ; preds = %13
  br i1 %20, label %82, label %81

; <label>:66:                                     ; preds = %13
  %67 = fcmp ueq float %18, %19
  br i1 %67, label %81, label %82

; <label>:68:                                     ; preds = %13
  %69 = fcmp ult float %18, %19
  br i1 %69, label %81, label %82

; <label>:70:                                     ; preds = %13
  %71 = fcmp ule float %18, %19
  br i1 %71, label %81, label %82

; <label>:72:                                     ; preds = %13
  %73 = fcmp une float %18, %19
  %74 = and i1 %73, %21
  br i1 %74, label %81, label %82

; <label>:75:                                     ; preds = %13
  %76 = fcmp ult float %18, %19
  br i1 %76, label %82, label %81

; <label>:77:                                     ; preds = %13
  %78 = fcmp ogt float %18, %19
  br i1 %78, label %81, label %82

; <label>:79:                                     ; preds = %13
  unreachable

; <label>:80:                                     ; preds = %13, %13
  br i1 %20, label %81, label %82

; <label>:81:                                     ; preds = %80, %77, %75, %72, %70, %68, %66, %65, %63, %61, %59, %57, %55, %52, %49, %46, %44, %42, %40, %38, %37, %35, %33, %31, %28, %25, %22, %13, %13
  br label %82

; <label>:82:                                     ; preds = %81, %80, %77, %75, %72, %70, %68, %66, %65, %63, %61, %59, %57, %55, %52, %49, %46, %44, %42, %40, %38, %37, %35, %33, %31, %28, %25, %22, %13, %13
  %83 = phi i32 [ -1, %81 ], [ 0, %80 ], [ 0, %77 ], [ 0, %75 ], [ 0, %72 ], [ 0, %70 ], [ 0, %68 ], [ 0, %66 ], [ 0, %65 ], [ 0, %63 ], [ 0, %61 ], [ 0, %59 ], [ 0, %57 ], [ 0, %55 ], [ 0, %52 ], [ 0, %49 ], [ 0, %46 ], [ 0, %44 ], [ 0, %42 ], [ 0, %40 ], [ 0, %38 ], [ 0, %37 ], [ 0, %35 ], [ 0, %33 ], [ 0, %31 ], [ 0, %28 ], [ 0, %25 ], [ 0, %22 ], [ 0, %13 ], [ 0, %13 ]
  %84 = bitcast i8* %2 to i32*
  store i32 %83, i32* %84, align 1
  %85 = getelementptr inbounds i8, i8* %2, i64 4
  %86 = bitcast i8* %85 to i32*
  store i32 0, i32* %86, align 1
  %87 = getelementptr inbounds i8, i8* %2, i64 8
  %88 = bitcast i8* %87 to i32*
  store i32 0, i32* %88, align 1
  %89 = getelementptr inbounds i8, i8* %2, i64 12
  %90 = bitcast i8* %89 to i32*
  store i32 0, i32* %90, align 1
  br label %91

; <label>:91:                                     ; preds = %82, %9
  %92 = phi %struct.Memory* [ %12, %9 ], [ %0, %82 ]
  ret %struct.Memory* %92
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L5CMPSDI3VnWI8vec128_tE2VnIS2_E3MVnI7vec64_tEEEP6MemorySA_R5StateT_T0_T1_2InIhE(%struct.Memory*, %struct.State* dereferenceable(3376), i8* nocapture, i8* nocapture readonly, i64, i64)  {
  %7 = bitcast i8* %3 to double*
  %8 = load double, double* %7, align 1
  %9 = inttoptr i64 %4 to double*
  %10 = load double, double* %9
  %11 = trunc i64 %5 to i8
  %12 = icmp ugt i8 %11, 31
  br i1 %12, label %13, label %17

; <label>:13:                                     ; preds = %6
  %14 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 33, i32 0, i32 0
  %15 = load i64, i64* %14, align 8
  %16 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %1, i64 %15, %struct.Memory* %0) 
  br label %85

; <label>:17:                                     ; preds = %6
  %18 = fcmp uno double %8, %10
  %19 = xor i1 %18, true
  switch i8 %11, label %77 [
    i8 0, label %20
    i8 1, label %23
    i8 2, label %26
    i8 3, label %78
    i8 4, label %29
    i8 5, label %31
    i8 6, label %33
    i8 7, label %35
    i8 8, label %36
    i8 9, label %38
    i8 10, label %40
    i8 11, label %80
    i8 12, label %42
    i8 13, label %44
    i8 14, label %47
    i8 15, label %79
    i8 16, label %50
    i8 17, label %53
    i8 18, label %55
    i8 19, label %78
    i8 20, label %57
    i8 21, label %59
    i8 22, label %61
    i8 23, label %63
    i8 24, label %64
    i8 25, label %66
    i8 26, label %68
    i8 27, label %80
    i8 28, label %70
    i8 29, label %73
    i8 30, label %75
    i8 31, label %79
  ]

; <label>:20:                                     ; preds = %17
  %21 = fcmp ueq double %8, %10
  %22 = and i1 %21, %19
  br i1 %22, label %79, label %80

; <label>:23:                                     ; preds = %17
  %24 = fcmp olt double %8, %10
  %25 = and i1 %24, %19
  br i1 %25, label %79, label %80

; <label>:26:                                     ; preds = %17
  %27 = fcmp ole double %8, %10
  %28 = and i1 %27, %19
  br i1 %28, label %79, label %80

; <label>:29:                                     ; preds = %17
  %30 = fcmp une double %8, %10
  br i1 %30, label %79, label %80

; <label>:31:                                     ; preds = %17
  %32 = fcmp uge double %8, %10
  br i1 %32, label %79, label %80

; <label>:33:                                     ; preds = %17
  %34 = fcmp ugt double %8, %10
  br i1 %34, label %79, label %80

; <label>:35:                                     ; preds = %17
  br i1 %18, label %80, label %79

; <label>:36:                                     ; preds = %17
  %37 = fcmp ueq double %8, %10
  br i1 %37, label %79, label %80

; <label>:38:                                     ; preds = %17
  %39 = fcmp ult double %8, %10
  br i1 %39, label %79, label %80

; <label>:40:                                     ; preds = %17
  %41 = fcmp ule double %8, %10
  br i1 %41, label %79, label %80

; <label>:42:                                     ; preds = %17
  %43 = fcmp ueq double %8, %10
  br i1 %43, label %80, label %79

; <label>:44:                                     ; preds = %17
  %45 = fcmp oge double %8, %10
  %46 = and i1 %45, %19
  br i1 %46, label %79, label %80

; <label>:47:                                     ; preds = %17
  %48 = fcmp ogt double %8, %10
  %49 = and i1 %48, %19
  br i1 %49, label %79, label %80

; <label>:50:                                     ; preds = %17
  %51 = fcmp oeq double %8, %10
  %52 = and i1 %51, %19
  br i1 %52, label %79, label %80

; <label>:53:                                     ; preds = %17
  %54 = fcmp olt double %8, %10
  br i1 %54, label %79, label %80

; <label>:55:                                     ; preds = %17
  %56 = fcmp ugt double %8, %10
  br i1 %56, label %80, label %79

; <label>:57:                                     ; preds = %17
  %58 = fcmp une double %8, %10
  br i1 %58, label %79, label %80

; <label>:59:                                     ; preds = %17
  %60 = fcmp uge double %8, %10
  br i1 %60, label %79, label %80

; <label>:61:                                     ; preds = %17
  %62 = fcmp ugt double %8, %10
  br i1 %62, label %79, label %80

; <label>:63:                                     ; preds = %17
  br i1 %18, label %80, label %79

; <label>:64:                                     ; preds = %17
  %65 = fcmp ueq double %8, %10
  br i1 %65, label %79, label %80

; <label>:66:                                     ; preds = %17
  %67 = fcmp ult double %8, %10
  br i1 %67, label %79, label %80

; <label>:68:                                     ; preds = %17
  %69 = fcmp ule double %8, %10
  br i1 %69, label %79, label %80

; <label>:70:                                     ; preds = %17
  %71 = fcmp une double %8, %10
  %72 = and i1 %71, %19
  br i1 %72, label %79, label %80

; <label>:73:                                     ; preds = %17
  %74 = fcmp ult double %8, %10
  br i1 %74, label %80, label %79

; <label>:75:                                     ; preds = %17
  %76 = fcmp ogt double %8, %10
  br i1 %76, label %79, label %80

; <label>:77:                                     ; preds = %17
  unreachable

; <label>:78:                                     ; preds = %17, %17
  br i1 %18, label %79, label %80

; <label>:79:                                     ; preds = %78, %75, %73, %70, %68, %66, %64, %63, %61, %59, %57, %55, %53, %50, %47, %44, %42, %40, %38, %36, %35, %33, %31, %29, %26, %23, %20, %17, %17
  br label %80

; <label>:80:                                     ; preds = %79, %78, %75, %73, %70, %68, %66, %64, %63, %61, %59, %57, %55, %53, %50, %47, %44, %42, %40, %38, %36, %35, %33, %31, %29, %26, %23, %20, %17, %17
  %81 = phi i64 [ -1, %79 ], [ 0, %78 ], [ 0, %75 ], [ 0, %73 ], [ 0, %70 ], [ 0, %68 ], [ 0, %66 ], [ 0, %64 ], [ 0, %63 ], [ 0, %61 ], [ 0, %59 ], [ 0, %57 ], [ 0, %55 ], [ 0, %53 ], [ 0, %50 ], [ 0, %47 ], [ 0, %44 ], [ 0, %42 ], [ 0, %40 ], [ 0, %38 ], [ 0, %36 ], [ 0, %35 ], [ 0, %33 ], [ 0, %31 ], [ 0, %29 ], [ 0, %26 ], [ 0, %23 ], [ 0, %20 ], [ 0, %17 ], [ 0, %17 ]
  %82 = bitcast i8* %2 to i64*
  store i64 %81, i64* %82, align 1
  %83 = getelementptr inbounds i8, i8* %2, i64 8
  %84 = bitcast i8* %83 to i64*
  store i64 0, i64* %84, align 1
  br label %85

; <label>:85:                                     ; preds = %80, %13
  %86 = phi %struct.Memory* [ %16, %13 ], [ %0, %80 ]
  ret %struct.Memory* %86
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L5CMPSDI3VnWI8vec128_tE2VnIS2_ES5_EEP6MemoryS7_R5StateT_T0_T1_2InIhE(%struct.Memory*, %struct.State* dereferenceable(3376), i8* nocapture, i8* nocapture readonly, i8* nocapture readonly, i64)  {
  %7 = bitcast i8* %3 to double*
  %8 = load double, double* %7, align 1
  %9 = bitcast i8* %4 to double*
  %10 = load double, double* %9, align 1
  %11 = trunc i64 %5 to i8
  %12 = icmp ugt i8 %11, 31
  br i1 %12, label %13, label %17

; <label>:13:                                     ; preds = %6
  %14 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 33, i32 0, i32 0
  %15 = load i64, i64* %14, align 8
  %16 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %1, i64 %15, %struct.Memory* %0) 
  br label %85

; <label>:17:                                     ; preds = %6
  %18 = fcmp uno double %8, %10
  %19 = xor i1 %18, true
  switch i8 %11, label %77 [
    i8 0, label %20
    i8 1, label %23
    i8 2, label %26
    i8 3, label %78
    i8 4, label %29
    i8 5, label %31
    i8 6, label %33
    i8 7, label %35
    i8 8, label %36
    i8 9, label %38
    i8 10, label %40
    i8 11, label %80
    i8 12, label %42
    i8 13, label %44
    i8 14, label %47
    i8 15, label %79
    i8 16, label %50
    i8 17, label %53
    i8 18, label %55
    i8 19, label %78
    i8 20, label %57
    i8 21, label %59
    i8 22, label %61
    i8 23, label %63
    i8 24, label %64
    i8 25, label %66
    i8 26, label %68
    i8 27, label %80
    i8 28, label %70
    i8 29, label %73
    i8 30, label %75
    i8 31, label %79
  ]

; <label>:20:                                     ; preds = %17
  %21 = fcmp ueq double %8, %10
  %22 = and i1 %21, %19
  br i1 %22, label %79, label %80

; <label>:23:                                     ; preds = %17
  %24 = fcmp olt double %8, %10
  %25 = and i1 %24, %19
  br i1 %25, label %79, label %80

; <label>:26:                                     ; preds = %17
  %27 = fcmp ole double %8, %10
  %28 = and i1 %27, %19
  br i1 %28, label %79, label %80

; <label>:29:                                     ; preds = %17
  %30 = fcmp une double %8, %10
  br i1 %30, label %79, label %80

; <label>:31:                                     ; preds = %17
  %32 = fcmp uge double %8, %10
  br i1 %32, label %79, label %80

; <label>:33:                                     ; preds = %17
  %34 = fcmp ugt double %8, %10
  br i1 %34, label %79, label %80

; <label>:35:                                     ; preds = %17
  br i1 %18, label %80, label %79

; <label>:36:                                     ; preds = %17
  %37 = fcmp ueq double %8, %10
  br i1 %37, label %79, label %80

; <label>:38:                                     ; preds = %17
  %39 = fcmp ult double %8, %10
  br i1 %39, label %79, label %80

; <label>:40:                                     ; preds = %17
  %41 = fcmp ule double %8, %10
  br i1 %41, label %79, label %80

; <label>:42:                                     ; preds = %17
  %43 = fcmp ueq double %8, %10
  br i1 %43, label %80, label %79

; <label>:44:                                     ; preds = %17
  %45 = fcmp oge double %8, %10
  %46 = and i1 %45, %19
  br i1 %46, label %79, label %80

; <label>:47:                                     ; preds = %17
  %48 = fcmp ogt double %8, %10
  %49 = and i1 %48, %19
  br i1 %49, label %79, label %80

; <label>:50:                                     ; preds = %17
  %51 = fcmp oeq double %8, %10
  %52 = and i1 %51, %19
  br i1 %52, label %79, label %80

; <label>:53:                                     ; preds = %17
  %54 = fcmp olt double %8, %10
  br i1 %54, label %79, label %80

; <label>:55:                                     ; preds = %17
  %56 = fcmp ugt double %8, %10
  br i1 %56, label %80, label %79

; <label>:57:                                     ; preds = %17
  %58 = fcmp une double %8, %10
  br i1 %58, label %79, label %80

; <label>:59:                                     ; preds = %17
  %60 = fcmp uge double %8, %10
  br i1 %60, label %79, label %80

; <label>:61:                                     ; preds = %17
  %62 = fcmp ugt double %8, %10
  br i1 %62, label %79, label %80

; <label>:63:                                     ; preds = %17
  br i1 %18, label %80, label %79

; <label>:64:                                     ; preds = %17
  %65 = fcmp ueq double %8, %10
  br i1 %65, label %79, label %80

; <label>:66:                                     ; preds = %17
  %67 = fcmp ult double %8, %10
  br i1 %67, label %79, label %80

; <label>:68:                                     ; preds = %17
  %69 = fcmp ule double %8, %10
  br i1 %69, label %79, label %80

; <label>:70:                                     ; preds = %17
  %71 = fcmp une double %8, %10
  %72 = and i1 %71, %19
  br i1 %72, label %79, label %80

; <label>:73:                                     ; preds = %17
  %74 = fcmp ult double %8, %10
  br i1 %74, label %80, label %79

; <label>:75:                                     ; preds = %17
  %76 = fcmp ogt double %8, %10
  br i1 %76, label %79, label %80

; <label>:77:                                     ; preds = %17
  unreachable

; <label>:78:                                     ; preds = %17, %17
  br i1 %18, label %79, label %80

; <label>:79:                                     ; preds = %78, %75, %73, %70, %68, %66, %64, %63, %61, %59, %57, %55, %53, %50, %47, %44, %42, %40, %38, %36, %35, %33, %31, %29, %26, %23, %20, %17, %17
  br label %80

; <label>:80:                                     ; preds = %79, %78, %75, %73, %70, %68, %66, %64, %63, %61, %59, %57, %55, %53, %50, %47, %44, %42, %40, %38, %36, %35, %33, %31, %29, %26, %23, %20, %17, %17
  %81 = phi i64 [ -1, %79 ], [ 0, %78 ], [ 0, %75 ], [ 0, %73 ], [ 0, %70 ], [ 0, %68 ], [ 0, %66 ], [ 0, %64 ], [ 0, %63 ], [ 0, %61 ], [ 0, %59 ], [ 0, %57 ], [ 0, %55 ], [ 0, %53 ], [ 0, %50 ], [ 0, %47 ], [ 0, %44 ], [ 0, %42 ], [ 0, %40 ], [ 0, %38 ], [ 0, %36 ], [ 0, %35 ], [ 0, %33 ], [ 0, %31 ], [ 0, %29 ], [ 0, %26 ], [ 0, %23 ], [ 0, %20 ], [ 0, %17 ], [ 0, %17 ]
  %82 = bitcast i8* %2 to i64*
  store i64 %81, i64* %82, align 1
  %83 = getelementptr inbounds i8, i8* %2, i64 8
  %84 = bitcast i8* %83 to i64*
  store i64 0, i64* %84, align 1
  br label %85

; <label>:85:                                     ; preds = %80, %13
  %86 = phi %struct.Memory* [ %16, %13 ], [ %0, %80 ]
  ret %struct.Memory* %86
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L5CMPPSI3VnWI8vec128_tE2VnIS2_E3MVnIS2_EEEP6MemoryS9_R5StateT_T0_T1_2InIhE(%struct.Memory*, %struct.State* dereferenceable(3376), i8* nocapture, i8* nocapture readonly, i64, i64)  {
  %7 = alloca <2 x i64>, align 16
  %8 = bitcast <2 x i64>* %7 to { i64, i64 }*
  %9 = bitcast i8* %3 to i64*
  %10 = load i64, i64* %9, align 1
  %11 = getelementptr inbounds i8, i8* %3, i64 8
  %12 = bitcast i8* %11 to i64*
  %13 = load i64, i64* %12, align 1
  %14 = inttoptr i64 %4 to float*
  %15 = load float, float* %14
  %16 = add i64 %4, 4
  %17 = inttoptr i64 %16 to float*
  %18 = load float, float* %17
  %19 = add i64 %4, 8
  %20 = inttoptr i64 %19 to float*
  %21 = load float, float* %20
  %22 = add i64 %4, 12
  %23 = inttoptr i64 %22 to float*
  %24 = load float, float* %23
  %25 = trunc i64 %5 to i8
  %26 = icmp ugt i8 %25, 31
  %27 = trunc i64 %10 to i32
  %28 = bitcast i32 %27 to float
  %29 = lshr i64 %10, 32
  %30 = trunc i64 %29 to i32
  %31 = bitcast i32 %30 to float
  %32 = trunc i64 %13 to i32
  %33 = bitcast i32 %32 to float
  %34 = lshr i64 %13, 32
  %35 = trunc i64 %34 to i32
  %36 = bitcast i32 %35 to float
  br i1 %26, label %64, label %37

; <label>:37:                                     ; preds = %6
  %38 = bitcast <2 x i64>* %7 to i8*
  %39 = getelementptr inbounds <2 x i64>, <2 x i64>* %7, i64 0, i64 0
  %40 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %8, i64 0, i32 1
  %41 = bitcast <2 x i64>* %7 to [4 x i32]*
  %42 = icmp eq i8 %25, 0
  br i1 %42, label %46, label %43

; <label>:43:                                     ; preds = %37
  %44 = fcmp uno float %28, %15
  %45 = xor i1 %44, true
  switch i8 %25, label %221 [
    i8 31, label %223
    i8 1, label %84
    i8 2, label %91
    i8 3, label %222
    i8 4, label %98
    i8 5, label %103
    i8 6, label %108
    i8 7, label %113
    i8 8, label %118
    i8 9, label %123
    i8 10, label %128
    i8 11, label %224
    i8 12, label %133
    i8 13, label %138
    i8 14, label %145
    i8 15, label %223
    i8 16, label %152
    i8 17, label %159
    i8 18, label %164
    i8 19, label %222
    i8 20, label %169
    i8 21, label %174
    i8 22, label %179
    i8 23, label %184
    i8 24, label %189
    i8 25, label %194
    i8 26, label %199
    i8 27, label %224
    i8 28, label %204
    i8 29, label %211
    i8 30, label %216
  ]

; <label>:46:                                     ; preds = %37
  %47 = fcmp oeq float %28, %15
  %48 = sext i1 %47 to i32
  call void @llvm.lifetime.start(i64 16, i8* nonnull %38)
  store <2 x i64> zeroinitializer, <2 x i64>* %7, align 16
  %49 = bitcast <2 x i64>* %7 to i32*
  store i32 %48, i32* %49, align 16
  %50 = load i64, i64* %39, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %38)
  %51 = fcmp oeq float %31, %18
  %52 = sext i1 %51 to i32
  call void @llvm.lifetime.start(i64 16, i8* nonnull %38)
  store i64 %50, i64* %39, align 16
  store i64 0, i64* %40, align 8
  %53 = getelementptr inbounds [4 x i32], [4 x i32]* %41, i64 0, i64 1
  store i32 %52, i32* %53, align 4
  %54 = load i64, i64* %39, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %38)
  %55 = fcmp oeq float %33, %21
  %56 = sext i1 %55 to i32
  call void @llvm.lifetime.start(i64 16, i8* nonnull %38)
  store i64 %54, i64* %39, align 16
  store i64 0, i64* %40, align 8
  %57 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %8, i64 0, i32 1
  %58 = bitcast i64* %57 to i32*
  store i32 %56, i32* %58, align 8
  %59 = load i64, i64* %40, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %38)
  %60 = fcmp oeq float %36, %24
  %61 = sext i1 %60 to i32
  call void @llvm.lifetime.start(i64 16, i8* nonnull %38)
  store i64 %54, i64* %39, align 16
  store i64 %59, i64* %40, align 8
  %62 = getelementptr inbounds [4 x i32], [4 x i32]* %41, i64 0, i64 3
  store i32 %61, i32* %62, align 4
  %63 = load i64, i64* %40, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %38)
  br label %68

; <label>:64:                                     ; preds = %6
  %65 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 33, i32 0, i32 0
  %66 = load i64, i64* %65, align 8
  %67 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %1, i64 %66, %struct.Memory* %0) 
  br label %230

; <label>:68:                                     ; preds = %724, %46
  %69 = phi i64 [ %54, %46 ], [ %726, %724 ]
  %70 = phi i64 [ %63, %46 ], [ %729, %724 ]
  %71 = lshr i64 %69, 32
  %72 = trunc i64 %69 to i32
  %73 = trunc i64 %71 to i32
  %74 = bitcast i8* %2 to i32*
  store i32 %72, i32* %74, align 1
  %75 = getelementptr inbounds i8, i8* %2, i64 4
  %76 = bitcast i8* %75 to i32*
  store i32 %73, i32* %76, align 1
  %77 = trunc i64 %70 to i32
  %78 = getelementptr inbounds i8, i8* %2, i64 8
  %79 = bitcast i8* %78 to i32*
  store i32 %77, i32* %79, align 1
  %80 = lshr i64 %70, 32
  %81 = trunc i64 %80 to i32
  %82 = getelementptr inbounds i8, i8* %2, i64 12
  %83 = bitcast i8* %82 to i32*
  store i32 %81, i32* %83, align 1
  br label %230

; <label>:84:                                     ; preds = %43
  %85 = fcmp olt float %28, %15
  %86 = and i1 %85, %45
  br i1 %86, label %223, label %87

; <label>:87:                                     ; preds = %84
  call void @llvm.lifetime.start(i64 16, i8* nonnull %38)
  store <2 x i64> zeroinitializer, <2 x i64>* %7, align 16
  %88 = bitcast <2 x i64>* %7 to i32*
  store i32 0, i32* %88, align 16
  %89 = load i64, i64* %39, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %38)
  %90 = fcmp ord float %31, %18
  br label %382

; <label>:91:                                     ; preds = %43
  %92 = fcmp ole float %28, %15
  %93 = and i1 %92, %45
  br i1 %93, label %223, label %94

; <label>:94:                                     ; preds = %91
  call void @llvm.lifetime.start(i64 16, i8* nonnull %38)
  store <2 x i64> zeroinitializer, <2 x i64>* %7, align 16
  %95 = bitcast <2 x i64>* %7 to i32*
  store i32 0, i32* %95, align 16
  %96 = load i64, i64* %39, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %38)
  %97 = fcmp ord float %31, %18
  br label %373

; <label>:98:                                     ; preds = %43
  %99 = fcmp une float %28, %15
  br i1 %99, label %223, label %100

; <label>:100:                                    ; preds = %98
  call void @llvm.lifetime.start(i64 16, i8* nonnull %38)
  store <2 x i64> zeroinitializer, <2 x i64>* %7, align 16
  %101 = bitcast <2 x i64>* %7 to i32*
  store i32 0, i32* %101, align 16
  %102 = load i64, i64* %39, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %38)
  br label %366

; <label>:103:                                    ; preds = %43
  %104 = fcmp uge float %28, %15
  br i1 %104, label %223, label %105

; <label>:105:                                    ; preds = %103
  call void @llvm.lifetime.start(i64 16, i8* nonnull %38)
  store <2 x i64> zeroinitializer, <2 x i64>* %7, align 16
  %106 = bitcast <2 x i64>* %7 to i32*
  store i32 0, i32* %106, align 16
  %107 = load i64, i64* %39, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %38)
  br label %360

; <label>:108:                                    ; preds = %43
  %109 = fcmp ugt float %28, %15
  br i1 %109, label %223, label %110

; <label>:110:                                    ; preds = %108
  call void @llvm.lifetime.start(i64 16, i8* nonnull %38)
  store <2 x i64> zeroinitializer, <2 x i64>* %7, align 16
  %111 = bitcast <2 x i64>* %7 to i32*
  store i32 0, i32* %111, align 16
  %112 = load i64, i64* %39, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %38)
  br label %354

; <label>:113:                                    ; preds = %43
  br i1 %44, label %114, label %223

; <label>:114:                                    ; preds = %113
  call void @llvm.lifetime.start(i64 16, i8* nonnull %38)
  store <2 x i64> zeroinitializer, <2 x i64>* %7, align 16
  %115 = bitcast <2 x i64>* %7 to i32*
  store i32 0, i32* %115, align 16
  %116 = load i64, i64* %39, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %38)
  %117 = fcmp uno float %31, %18
  br i1 %117, label %393, label %391

; <label>:118:                                    ; preds = %43
  %119 = fcmp ueq float %28, %15
  br i1 %119, label %223, label %120

; <label>:120:                                    ; preds = %118
  call void @llvm.lifetime.start(i64 16, i8* nonnull %38)
  store <2 x i64> zeroinitializer, <2 x i64>* %7, align 16
  %121 = bitcast <2 x i64>* %7 to i32*
  store i32 0, i32* %121, align 16
  %122 = load i64, i64* %39, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %38)
  br label %347

; <label>:123:                                    ; preds = %43
  %124 = fcmp ult float %28, %15
  br i1 %124, label %223, label %125

; <label>:125:                                    ; preds = %123
  call void @llvm.lifetime.start(i64 16, i8* nonnull %38)
  store <2 x i64> zeroinitializer, <2 x i64>* %7, align 16
  %126 = bitcast <2 x i64>* %7 to i32*
  store i32 0, i32* %126, align 16
  %127 = load i64, i64* %39, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %38)
  br label %341

; <label>:128:                                    ; preds = %43
  %129 = fcmp ule float %28, %15
  br i1 %129, label %223, label %130

; <label>:130:                                    ; preds = %128
  call void @llvm.lifetime.start(i64 16, i8* nonnull %38)
  store <2 x i64> zeroinitializer, <2 x i64>* %7, align 16
  %131 = bitcast <2 x i64>* %7 to i32*
  store i32 0, i32* %131, align 16
  %132 = load i64, i64* %39, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %38)
  br label %335

; <label>:133:                                    ; preds = %43
  %134 = fcmp ueq float %28, %15
  br i1 %134, label %135, label %223

; <label>:135:                                    ; preds = %133
  call void @llvm.lifetime.start(i64 16, i8* nonnull %38)
  store <2 x i64> zeroinitializer, <2 x i64>* %7, align 16
  %136 = bitcast <2 x i64>* %7 to i32*
  store i32 0, i32* %136, align 16
  %137 = load i64, i64* %39, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %38)
  br label %329

; <label>:138:                                    ; preds = %43
  %139 = fcmp oge float %28, %15
  %140 = and i1 %139, %45
  br i1 %140, label %223, label %141

; <label>:141:                                    ; preds = %138
  call void @llvm.lifetime.start(i64 16, i8* nonnull %38)
  store <2 x i64> zeroinitializer, <2 x i64>* %7, align 16
  %142 = bitcast <2 x i64>* %7 to i32*
  store i32 0, i32* %142, align 16
  %143 = load i64, i64* %39, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %38)
  %144 = fcmp ord float %31, %18
  br label %320

; <label>:145:                                    ; preds = %43
  %146 = fcmp ogt float %28, %15
  %147 = and i1 %146, %45
  br i1 %147, label %223, label %148

; <label>:148:                                    ; preds = %145
  call void @llvm.lifetime.start(i64 16, i8* nonnull %38)
  store <2 x i64> zeroinitializer, <2 x i64>* %7, align 16
  %149 = bitcast <2 x i64>* %7 to i32*
  store i32 0, i32* %149, align 16
  %150 = load i64, i64* %39, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %38)
  %151 = fcmp ord float %31, %18
  br label %311

; <label>:152:                                    ; preds = %43
  %153 = fcmp oeq float %28, %15
  %154 = and i1 %153, %45
  br i1 %154, label %223, label %155

; <label>:155:                                    ; preds = %152
  call void @llvm.lifetime.start(i64 16, i8* nonnull %38)
  store <2 x i64> zeroinitializer, <2 x i64>* %7, align 16
  %156 = bitcast <2 x i64>* %7 to i32*
  store i32 0, i32* %156, align 16
  %157 = load i64, i64* %39, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %38)
  %158 = fcmp ord float %31, %18
  br label %302

; <label>:159:                                    ; preds = %43
  %160 = fcmp olt float %28, %15
  br i1 %160, label %223, label %161

; <label>:161:                                    ; preds = %159
  call void @llvm.lifetime.start(i64 16, i8* nonnull %38)
  store <2 x i64> zeroinitializer, <2 x i64>* %7, align 16
  %162 = bitcast <2 x i64>* %7 to i32*
  store i32 0, i32* %162, align 16
  %163 = load i64, i64* %39, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %38)
  br label %296

; <label>:164:                                    ; preds = %43
  %165 = fcmp ugt float %28, %15
  br i1 %165, label %166, label %223

; <label>:166:                                    ; preds = %164
  call void @llvm.lifetime.start(i64 16, i8* nonnull %38)
  store <2 x i64> zeroinitializer, <2 x i64>* %7, align 16
  %167 = bitcast <2 x i64>* %7 to i32*
  store i32 0, i32* %167, align 16
  %168 = load i64, i64* %39, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %38)
  br label %290

; <label>:169:                                    ; preds = %43
  %170 = fcmp une float %28, %15
  br i1 %170, label %223, label %171

; <label>:171:                                    ; preds = %169
  call void @llvm.lifetime.start(i64 16, i8* nonnull %38)
  store <2 x i64> zeroinitializer, <2 x i64>* %7, align 16
  %172 = bitcast <2 x i64>* %7 to i32*
  store i32 0, i32* %172, align 16
  %173 = load i64, i64* %39, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %38)
  br label %284

; <label>:174:                                    ; preds = %43
  %175 = fcmp uge float %28, %15
  br i1 %175, label %223, label %176

; <label>:176:                                    ; preds = %174
  call void @llvm.lifetime.start(i64 16, i8* nonnull %38)
  store <2 x i64> zeroinitializer, <2 x i64>* %7, align 16
  %177 = bitcast <2 x i64>* %7 to i32*
  store i32 0, i32* %177, align 16
  %178 = load i64, i64* %39, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %38)
  br label %278

; <label>:179:                                    ; preds = %43
  %180 = fcmp ugt float %28, %15
  br i1 %180, label %223, label %181

; <label>:181:                                    ; preds = %179
  call void @llvm.lifetime.start(i64 16, i8* nonnull %38)
  store <2 x i64> zeroinitializer, <2 x i64>* %7, align 16
  %182 = bitcast <2 x i64>* %7 to i32*
  store i32 0, i32* %182, align 16
  %183 = load i64, i64* %39, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %38)
  br label %272

; <label>:184:                                    ; preds = %43
  br i1 %44, label %185, label %223

; <label>:185:                                    ; preds = %184
  call void @llvm.lifetime.start(i64 16, i8* nonnull %38)
  store <2 x i64> zeroinitializer, <2 x i64>* %7, align 16
  %186 = bitcast <2 x i64>* %7 to i32*
  store i32 0, i32* %186, align 16
  %187 = load i64, i64* %39, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %38)
  %188 = fcmp uno float %31, %18
  br i1 %188, label %398, label %391

; <label>:189:                                    ; preds = %43
  %190 = fcmp ueq float %28, %15
  br i1 %190, label %223, label %191

; <label>:191:                                    ; preds = %189
  call void @llvm.lifetime.start(i64 16, i8* nonnull %38)
  store <2 x i64> zeroinitializer, <2 x i64>* %7, align 16
  %192 = bitcast <2 x i64>* %7 to i32*
  store i32 0, i32* %192, align 16
  %193 = load i64, i64* %39, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %38)
  br label %265

; <label>:194:                                    ; preds = %43
  %195 = fcmp ult float %28, %15
  br i1 %195, label %223, label %196

; <label>:196:                                    ; preds = %194
  call void @llvm.lifetime.start(i64 16, i8* nonnull %38)
  store <2 x i64> zeroinitializer, <2 x i64>* %7, align 16
  %197 = bitcast <2 x i64>* %7 to i32*
  store i32 0, i32* %197, align 16
  %198 = load i64, i64* %39, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %38)
  br label %259

; <label>:199:                                    ; preds = %43
  %200 = fcmp ule float %28, %15
  br i1 %200, label %223, label %201

; <label>:201:                                    ; preds = %199
  call void @llvm.lifetime.start(i64 16, i8* nonnull %38)
  store <2 x i64> zeroinitializer, <2 x i64>* %7, align 16
  %202 = bitcast <2 x i64>* %7 to i32*
  store i32 0, i32* %202, align 16
  %203 = load i64, i64* %39, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %38)
  br label %253

; <label>:204:                                    ; preds = %43
  %205 = fcmp une float %28, %15
  %206 = and i1 %205, %45
  br i1 %206, label %223, label %207

; <label>:207:                                    ; preds = %204
  call void @llvm.lifetime.start(i64 16, i8* nonnull %38)
  store <2 x i64> zeroinitializer, <2 x i64>* %7, align 16
  %208 = bitcast <2 x i64>* %7 to i32*
  store i32 0, i32* %208, align 16
  %209 = load i64, i64* %39, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %38)
  %210 = fcmp ord float %31, %18
  br label %244

; <label>:211:                                    ; preds = %43
  %212 = fcmp ult float %28, %15
  br i1 %212, label %213, label %223

; <label>:213:                                    ; preds = %211
  call void @llvm.lifetime.start(i64 16, i8* nonnull %38)
  store <2 x i64> zeroinitializer, <2 x i64>* %7, align 16
  %214 = bitcast <2 x i64>* %7 to i32*
  store i32 0, i32* %214, align 16
  %215 = load i64, i64* %39, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %38)
  br label %238

; <label>:216:                                    ; preds = %43
  %217 = fcmp ogt float %28, %15
  br i1 %217, label %223, label %218

; <label>:218:                                    ; preds = %216
  call void @llvm.lifetime.start(i64 16, i8* nonnull %38)
  store <2 x i64> zeroinitializer, <2 x i64>* %7, align 16
  %219 = bitcast <2 x i64>* %7 to i32*
  store i32 0, i32* %219, align 16
  %220 = load i64, i64* %39, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %38)
  br label %232

; <label>:221:                                    ; preds = %606, %403, %224, %43
  unreachable

; <label>:222:                                    ; preds = %43, %43
  br i1 %44, label %223, label %224

; <label>:223:                                    ; preds = %222, %216, %211, %204, %199, %194, %189, %184, %179, %174, %169, %164, %159, %152, %145, %138, %133, %128, %123, %118, %113, %108, %103, %98, %91, %84, %43, %43
  br label %224

; <label>:224:                                    ; preds = %223, %222, %43, %43
  %225 = phi i32 [ -1, %223 ], [ 0, %222 ], [ 0, %43 ], [ 0, %43 ]
  call void @llvm.lifetime.start(i64 16, i8* nonnull %38)
  store <2 x i64> zeroinitializer, <2 x i64>* %7, align 16
  %226 = bitcast <2 x i64>* %7 to i32*
  store i32 %225, i32* %226, align 16
  %227 = load i64, i64* %39, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %38)
  %228 = fcmp uno float %31, %18
  %229 = xor i1 %228, true
  switch i8 %25, label %221 [
    i8 31, label %391
    i8 1, label %382
    i8 2, label %373
    i8 3, label %372
    i8 4, label %366
    i8 5, label %360
    i8 6, label %354
    i8 7, label %353
    i8 8, label %347
    i8 9, label %341
    i8 10, label %335
    i8 11, label %403
    i8 12, label %329
    i8 13, label %320
    i8 14, label %311
    i8 15, label %391
    i8 16, label %302
    i8 17, label %296
    i8 18, label %290
    i8 19, label %372
    i8 20, label %284
    i8 21, label %278
    i8 22, label %272
    i8 23, label %271
    i8 24, label %265
    i8 25, label %259
    i8 26, label %253
    i8 27, label %403
    i8 28, label %244
    i8 29, label %238
    i8 30, label %232
  ]

; <label>:230:                                    ; preds = %68, %64
  %231 = phi %struct.Memory* [ %67, %64 ], [ %0, %68 ]
  ret %struct.Memory* %231

; <label>:232:                                    ; preds = %224, %218
  %233 = phi i64 [ %220, %218 ], [ %227, %224 ]
  %234 = fcmp ogt float %31, %18
  br i1 %234, label %391, label %235

; <label>:235:                                    ; preds = %232
  call void @llvm.lifetime.start(i64 16, i8* nonnull %38)
  store i64 %233, i64* %39, align 16
  store i64 0, i64* %40, align 8
  %236 = getelementptr inbounds [4 x i32], [4 x i32]* %41, i64 0, i64 1
  store i32 0, i32* %236, align 4
  %237 = load i64, i64* %39, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %38)
  br label %410

; <label>:238:                                    ; preds = %224, %213
  %239 = phi i64 [ %215, %213 ], [ %227, %224 ]
  %240 = fcmp ult float %31, %18
  br i1 %240, label %241, label %391

; <label>:241:                                    ; preds = %238
  call void @llvm.lifetime.start(i64 16, i8* nonnull %38)
  store i64 %239, i64* %39, align 16
  store i64 0, i64* %40, align 8
  %242 = getelementptr inbounds [4 x i32], [4 x i32]* %41, i64 0, i64 1
  store i32 0, i32* %242, align 4
  %243 = load i64, i64* %39, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %38)
  br label %417

; <label>:244:                                    ; preds = %224, %207
  %245 = phi i1 [ %210, %207 ], [ %229, %224 ]
  %246 = phi i64 [ %209, %207 ], [ %227, %224 ]
  %247 = fcmp une float %31, %18
  %248 = and i1 %247, %245
  br i1 %248, label %391, label %249

; <label>:249:                                    ; preds = %244
  call void @llvm.lifetime.start(i64 16, i8* nonnull %38)
  store i64 %246, i64* %39, align 16
  store i64 0, i64* %40, align 8
  %250 = getelementptr inbounds [4 x i32], [4 x i32]* %41, i64 0, i64 1
  store i32 0, i32* %250, align 4
  %251 = load i64, i64* %39, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %38)
  %252 = fcmp ord float %33, %21
  br label %424

; <label>:253:                                    ; preds = %224, %201
  %254 = phi i64 [ %203, %201 ], [ %227, %224 ]
  %255 = fcmp ule float %31, %18
  br i1 %255, label %391, label %256

; <label>:256:                                    ; preds = %253
  call void @llvm.lifetime.start(i64 16, i8* nonnull %38)
  store i64 %254, i64* %39, align 16
  store i64 0, i64* %40, align 8
  %257 = getelementptr inbounds [4 x i32], [4 x i32]* %41, i64 0, i64 1
  store i32 0, i32* %257, align 4
  %258 = load i64, i64* %39, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %38)
  br label %434

; <label>:259:                                    ; preds = %224, %196
  %260 = phi i64 [ %198, %196 ], [ %227, %224 ]
  %261 = fcmp ult float %31, %18
  br i1 %261, label %391, label %262

; <label>:262:                                    ; preds = %259
  call void @llvm.lifetime.start(i64 16, i8* nonnull %38)
  store i64 %260, i64* %39, align 16
  store i64 0, i64* %40, align 8
  %263 = getelementptr inbounds [4 x i32], [4 x i32]* %41, i64 0, i64 1
  store i32 0, i32* %263, align 4
  %264 = load i64, i64* %39, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %38)
  br label %441

; <label>:265:                                    ; preds = %224, %191
  %266 = phi i64 [ %193, %191 ], [ %227, %224 ]
  %267 = fcmp ueq float %31, %18
  br i1 %267, label %391, label %268

; <label>:268:                                    ; preds = %265
  call void @llvm.lifetime.start(i64 16, i8* nonnull %38)
  store i64 %266, i64* %39, align 16
  store i64 0, i64* %40, align 8
  %269 = getelementptr inbounds [4 x i32], [4 x i32]* %41, i64 0, i64 1
  store i32 0, i32* %269, align 4
  %270 = load i64, i64* %39, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %38)
  br label %448

; <label>:271:                                    ; preds = %224
  br i1 %228, label %398, label %391

; <label>:272:                                    ; preds = %224, %181
  %273 = phi i64 [ %183, %181 ], [ %227, %224 ]
  %274 = fcmp ugt float %31, %18
  br i1 %274, label %391, label %275

; <label>:275:                                    ; preds = %272
  call void @llvm.lifetime.start(i64 16, i8* nonnull %38)
  store i64 %273, i64* %39, align 16
  store i64 0, i64* %40, align 8
  %276 = getelementptr inbounds [4 x i32], [4 x i32]* %41, i64 0, i64 1
  store i32 0, i32* %276, align 4
  %277 = load i64, i64* %39, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %38)
  br label %456

; <label>:278:                                    ; preds = %224, %176
  %279 = phi i64 [ %178, %176 ], [ %227, %224 ]
  %280 = fcmp uge float %31, %18
  br i1 %280, label %391, label %281

; <label>:281:                                    ; preds = %278
  call void @llvm.lifetime.start(i64 16, i8* nonnull %38)
  store i64 %279, i64* %39, align 16
  store i64 0, i64* %40, align 8
  %282 = getelementptr inbounds [4 x i32], [4 x i32]* %41, i64 0, i64 1
  store i32 0, i32* %282, align 4
  %283 = load i64, i64* %39, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %38)
  br label %463

; <label>:284:                                    ; preds = %224, %171
  %285 = phi i64 [ %173, %171 ], [ %227, %224 ]
  %286 = fcmp une float %31, %18
  br i1 %286, label %391, label %287

; <label>:287:                                    ; preds = %284
  call void @llvm.lifetime.start(i64 16, i8* nonnull %38)
  store i64 %285, i64* %39, align 16
  store i64 0, i64* %40, align 8
  %288 = getelementptr inbounds [4 x i32], [4 x i32]* %41, i64 0, i64 1
  store i32 0, i32* %288, align 4
  %289 = load i64, i64* %39, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %38)
  br label %470

; <label>:290:                                    ; preds = %224, %166
  %291 = phi i64 [ %168, %166 ], [ %227, %224 ]
  %292 = fcmp ugt float %31, %18
  br i1 %292, label %293, label %391

; <label>:293:                                    ; preds = %290
  call void @llvm.lifetime.start(i64 16, i8* nonnull %38)
  store i64 %291, i64* %39, align 16
  store i64 0, i64* %40, align 8
  %294 = getelementptr inbounds [4 x i32], [4 x i32]* %41, i64 0, i64 1
  store i32 0, i32* %294, align 4
  %295 = load i64, i64* %39, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %38)
  br label %477

; <label>:296:                                    ; preds = %224, %161
  %297 = phi i64 [ %163, %161 ], [ %227, %224 ]
  %298 = fcmp olt float %31, %18
  br i1 %298, label %391, label %299

; <label>:299:                                    ; preds = %296
  call void @llvm.lifetime.start(i64 16, i8* nonnull %38)
  store i64 %297, i64* %39, align 16
  store i64 0, i64* %40, align 8
  %300 = getelementptr inbounds [4 x i32], [4 x i32]* %41, i64 0, i64 1
  store i32 0, i32* %300, align 4
  %301 = load i64, i64* %39, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %38)
  br label %484

; <label>:302:                                    ; preds = %224, %155
  %303 = phi i1 [ %158, %155 ], [ %229, %224 ]
  %304 = phi i64 [ %157, %155 ], [ %227, %224 ]
  %305 = fcmp oeq float %31, %18
  %306 = and i1 %305, %303
  br i1 %306, label %391, label %307

; <label>:307:                                    ; preds = %302
  call void @llvm.lifetime.start(i64 16, i8* nonnull %38)
  store i64 %304, i64* %39, align 16
  store i64 0, i64* %40, align 8
  %308 = getelementptr inbounds [4 x i32], [4 x i32]* %41, i64 0, i64 1
  store i32 0, i32* %308, align 4
  %309 = load i64, i64* %39, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %38)
  %310 = fcmp ord float %33, %21
  br label %491

; <label>:311:                                    ; preds = %224, %148
  %312 = phi i1 [ %151, %148 ], [ %229, %224 ]
  %313 = phi i64 [ %150, %148 ], [ %227, %224 ]
  %314 = fcmp ogt float %31, %18
  %315 = and i1 %314, %312
  br i1 %315, label %391, label %316

; <label>:316:                                    ; preds = %311
  call void @llvm.lifetime.start(i64 16, i8* nonnull %38)
  store i64 %313, i64* %39, align 16
  store i64 0, i64* %40, align 8
  %317 = getelementptr inbounds [4 x i32], [4 x i32]* %41, i64 0, i64 1
  store i32 0, i32* %317, align 4
  %318 = load i64, i64* %39, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %38)
  %319 = fcmp ord float %33, %21
  br label %501

; <label>:320:                                    ; preds = %224, %141
  %321 = phi i1 [ %144, %141 ], [ %229, %224 ]
  %322 = phi i64 [ %143, %141 ], [ %227, %224 ]
  %323 = fcmp oge float %31, %18
  %324 = and i1 %323, %321
  br i1 %324, label %391, label %325

; <label>:325:                                    ; preds = %320
  call void @llvm.lifetime.start(i64 16, i8* nonnull %38)
  store i64 %322, i64* %39, align 16
  store i64 0, i64* %40, align 8
  %326 = getelementptr inbounds [4 x i32], [4 x i32]* %41, i64 0, i64 1
  store i32 0, i32* %326, align 4
  %327 = load i64, i64* %39, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %38)
  %328 = fcmp ord float %33, %21
  br label %511

; <label>:329:                                    ; preds = %224, %135
  %330 = phi i64 [ %137, %135 ], [ %227, %224 ]
  %331 = fcmp ueq float %31, %18
  br i1 %331, label %332, label %391

; <label>:332:                                    ; preds = %329
  call void @llvm.lifetime.start(i64 16, i8* nonnull %38)
  store i64 %330, i64* %39, align 16
  store i64 0, i64* %40, align 8
  %333 = getelementptr inbounds [4 x i32], [4 x i32]* %41, i64 0, i64 1
  store i32 0, i32* %333, align 4
  %334 = load i64, i64* %39, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %38)
  br label %521

; <label>:335:                                    ; preds = %224, %130
  %336 = phi i64 [ %132, %130 ], [ %227, %224 ]
  %337 = fcmp ule float %31, %18
  br i1 %337, label %391, label %338

; <label>:338:                                    ; preds = %335
  call void @llvm.lifetime.start(i64 16, i8* nonnull %38)
  store i64 %336, i64* %39, align 16
  store i64 0, i64* %40, align 8
  %339 = getelementptr inbounds [4 x i32], [4 x i32]* %41, i64 0, i64 1
  store i32 0, i32* %339, align 4
  %340 = load i64, i64* %39, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %38)
  br label %528

; <label>:341:                                    ; preds = %224, %125
  %342 = phi i64 [ %127, %125 ], [ %227, %224 ]
  %343 = fcmp ult float %31, %18
  br i1 %343, label %391, label %344

; <label>:344:                                    ; preds = %341
  call void @llvm.lifetime.start(i64 16, i8* nonnull %38)
  store i64 %342, i64* %39, align 16
  store i64 0, i64* %40, align 8
  %345 = getelementptr inbounds [4 x i32], [4 x i32]* %41, i64 0, i64 1
  store i32 0, i32* %345, align 4
  %346 = load i64, i64* %39, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %38)
  br label %535

; <label>:347:                                    ; preds = %224, %120
  %348 = phi i64 [ %122, %120 ], [ %227, %224 ]
  %349 = fcmp ueq float %31, %18
  br i1 %349, label %391, label %350

; <label>:350:                                    ; preds = %347
  call void @llvm.lifetime.start(i64 16, i8* nonnull %38)
  store i64 %348, i64* %39, align 16
  store i64 0, i64* %40, align 8
  %351 = getelementptr inbounds [4 x i32], [4 x i32]* %41, i64 0, i64 1
  store i32 0, i32* %351, align 4
  %352 = load i64, i64* %39, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %38)
  br label %542

; <label>:353:                                    ; preds = %224
  br i1 %228, label %393, label %391

; <label>:354:                                    ; preds = %224, %110
  %355 = phi i64 [ %112, %110 ], [ %227, %224 ]
  %356 = fcmp ugt float %31, %18
  br i1 %356, label %391, label %357

; <label>:357:                                    ; preds = %354
  call void @llvm.lifetime.start(i64 16, i8* nonnull %38)
  store i64 %355, i64* %39, align 16
  store i64 0, i64* %40, align 8
  %358 = getelementptr inbounds [4 x i32], [4 x i32]* %41, i64 0, i64 1
  store i32 0, i32* %358, align 4
  %359 = load i64, i64* %39, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %38)
  br label %550

; <label>:360:                                    ; preds = %224, %105
  %361 = phi i64 [ %107, %105 ], [ %227, %224 ]
  %362 = fcmp uge float %31, %18
  br i1 %362, label %391, label %363

; <label>:363:                                    ; preds = %360
  call void @llvm.lifetime.start(i64 16, i8* nonnull %38)
  store i64 %361, i64* %39, align 16
  store i64 0, i64* %40, align 8
  %364 = getelementptr inbounds [4 x i32], [4 x i32]* %41, i64 0, i64 1
  store i32 0, i32* %364, align 4
  %365 = load i64, i64* %39, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %38)
  br label %557

; <label>:366:                                    ; preds = %224, %100
  %367 = phi i64 [ %102, %100 ], [ %227, %224 ]
  %368 = fcmp une float %31, %18
  br i1 %368, label %391, label %369

; <label>:369:                                    ; preds = %366
  call void @llvm.lifetime.start(i64 16, i8* nonnull %38)
  store i64 %367, i64* %39, align 16
  store i64 0, i64* %40, align 8
  %370 = getelementptr inbounds [4 x i32], [4 x i32]* %41, i64 0, i64 1
  store i32 0, i32* %370, align 4
  %371 = load i64, i64* %39, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %38)
  br label %564

; <label>:372:                                    ; preds = %224, %224
  br i1 %228, label %391, label %403

; <label>:373:                                    ; preds = %224, %94
  %374 = phi i1 [ %97, %94 ], [ %229, %224 ]
  %375 = phi i64 [ %96, %94 ], [ %227, %224 ]
  %376 = fcmp ole float %31, %18
  %377 = and i1 %376, %374
  br i1 %377, label %391, label %378

; <label>:378:                                    ; preds = %373
  call void @llvm.lifetime.start(i64 16, i8* nonnull %38)
  store i64 %375, i64* %39, align 16
  store i64 0, i64* %40, align 8
  %379 = getelementptr inbounds [4 x i32], [4 x i32]* %41, i64 0, i64 1
  store i32 0, i32* %379, align 4
  %380 = load i64, i64* %39, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %38)
  %381 = fcmp ord float %33, %21
  br label %572

; <label>:382:                                    ; preds = %224, %87
  %383 = phi i1 [ %90, %87 ], [ %229, %224 ]
  %384 = phi i64 [ %89, %87 ], [ %227, %224 ]
  %385 = fcmp olt float %31, %18
  %386 = and i1 %385, %383
  br i1 %386, label %391, label %387

; <label>:387:                                    ; preds = %382
  call void @llvm.lifetime.start(i64 16, i8* nonnull %38)
  store i64 %384, i64* %39, align 16
  store i64 0, i64* %40, align 8
  %388 = getelementptr inbounds [4 x i32], [4 x i32]* %41, i64 0, i64 1
  store i32 0, i32* %388, align 4
  %389 = load i64, i64* %39, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %38)
  %390 = fcmp ord float %33, %21
  br label %582

; <label>:391:                                    ; preds = %382, %373, %372, %366, %360, %354, %353, %347, %341, %335, %329, %320, %311, %302, %296, %290, %284, %278, %272, %271, %265, %259, %253, %244, %238, %232, %224, %224, %185, %114
  %392 = phi i64 [ %384, %382 ], [ %375, %373 ], [ %227, %372 ], [ %367, %366 ], [ %361, %360 ], [ %355, %354 ], [ %227, %353 ], [ %348, %347 ], [ %342, %341 ], [ %336, %335 ], [ %330, %329 ], [ %322, %320 ], [ %313, %311 ], [ %304, %302 ], [ %297, %296 ], [ %291, %290 ], [ %285, %284 ], [ %279, %278 ], [ %273, %272 ], [ %227, %271 ], [ %266, %265 ], [ %260, %259 ], [ %254, %253 ], [ %246, %244 ], [ %239, %238 ], [ %233, %232 ], [ %227, %224 ], [ %227, %224 ], [ %187, %185 ], [ %116, %114 ]
  br label %403

; <label>:393:                                    ; preds = %353, %114
  %394 = phi i64 [ %116, %114 ], [ %227, %353 ]
  call void @llvm.lifetime.start(i64 16, i8* nonnull %38)
  store i64 %394, i64* %39, align 16
  store i64 0, i64* %40, align 8
  %395 = getelementptr inbounds [4 x i32], [4 x i32]* %41, i64 0, i64 1
  store i32 0, i32* %395, align 4
  %396 = load i64, i64* %39, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %38)
  %397 = fcmp uno float %33, %21
  br i1 %397, label %594, label %592

; <label>:398:                                    ; preds = %271, %185
  %399 = phi i64 [ %187, %185 ], [ %227, %271 ]
  call void @llvm.lifetime.start(i64 16, i8* nonnull %38)
  store i64 %399, i64* %39, align 16
  store i64 0, i64* %40, align 8
  %400 = getelementptr inbounds [4 x i32], [4 x i32]* %41, i64 0, i64 1
  store i32 0, i32* %400, align 4
  %401 = load i64, i64* %39, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %38)
  %402 = fcmp uno float %33, %21
  br i1 %402, label %600, label %592

; <label>:403:                                    ; preds = %391, %372, %224, %224
  %404 = phi i64 [ %392, %391 ], [ %227, %372 ], [ %227, %224 ], [ %227, %224 ]
  %405 = phi i32 [ -1, %391 ], [ 0, %372 ], [ 0, %224 ], [ 0, %224 ]
  call void @llvm.lifetime.start(i64 16, i8* nonnull %38)
  store i64 %404, i64* %39, align 16
  store i64 0, i64* %40, align 8
  %406 = getelementptr inbounds [4 x i32], [4 x i32]* %41, i64 0, i64 1
  store i32 %405, i32* %406, align 4
  %407 = load i64, i64* %39, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %38)
  %408 = fcmp uno float %33, %21
  %409 = xor i1 %408, true
  switch i8 %25, label %221 [
    i8 31, label %592
    i8 1, label %582
    i8 2, label %572
    i8 3, label %571
    i8 4, label %564
    i8 5, label %557
    i8 6, label %550
    i8 7, label %549
    i8 8, label %542
    i8 9, label %535
    i8 10, label %528
    i8 11, label %606
    i8 12, label %521
    i8 13, label %511
    i8 14, label %501
    i8 15, label %592
    i8 16, label %491
    i8 17, label %484
    i8 18, label %477
    i8 19, label %571
    i8 20, label %470
    i8 21, label %463
    i8 22, label %456
    i8 23, label %455
    i8 24, label %448
    i8 25, label %441
    i8 26, label %434
    i8 27, label %606
    i8 28, label %424
    i8 29, label %417
    i8 30, label %410
  ]

; <label>:410:                                    ; preds = %403, %235
  %411 = phi i64 [ %237, %235 ], [ %407, %403 ]
  %412 = fcmp ogt float %33, %21
  br i1 %412, label %592, label %413

; <label>:413:                                    ; preds = %410
  call void @llvm.lifetime.start(i64 16, i8* nonnull %38)
  store i64 %411, i64* %39, align 16
  store i64 0, i64* %40, align 8
  %414 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %8, i64 0, i32 1
  %415 = bitcast i64* %414 to i32*
  store i32 0, i32* %415, align 8
  %416 = load i64, i64* %40, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %38)
  br label %614

; <label>:417:                                    ; preds = %403, %241
  %418 = phi i64 [ %243, %241 ], [ %407, %403 ]
  %419 = fcmp ult float %33, %21
  br i1 %419, label %420, label %592

; <label>:420:                                    ; preds = %417
  call void @llvm.lifetime.start(i64 16, i8* nonnull %38)
  store i64 %418, i64* %39, align 16
  store i64 0, i64* %40, align 8
  %421 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %8, i64 0, i32 1
  %422 = bitcast i64* %421 to i32*
  store i32 0, i32* %422, align 8
  %423 = load i64, i64* %40, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %38)
  br label %618

; <label>:424:                                    ; preds = %403, %249
  %425 = phi i1 [ %252, %249 ], [ %409, %403 ]
  %426 = phi i64 [ %251, %249 ], [ %407, %403 ]
  %427 = fcmp une float %33, %21
  %428 = and i1 %427, %425
  br i1 %428, label %592, label %429

; <label>:429:                                    ; preds = %424
  call void @llvm.lifetime.start(i64 16, i8* nonnull %38)
  store i64 %426, i64* %39, align 16
  store i64 0, i64* %40, align 8
  %430 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %8, i64 0, i32 1
  %431 = bitcast i64* %430 to i32*
  store i32 0, i32* %431, align 8
  %432 = load i64, i64* %40, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %38)
  %433 = fcmp ord float %36, %24
  br label %622

; <label>:434:                                    ; preds = %403, %256
  %435 = phi i64 [ %258, %256 ], [ %407, %403 ]
  %436 = fcmp ule float %33, %21
  br i1 %436, label %592, label %437

; <label>:437:                                    ; preds = %434
  call void @llvm.lifetime.start(i64 16, i8* nonnull %38)
  store i64 %435, i64* %39, align 16
  store i64 0, i64* %40, align 8
  %438 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %8, i64 0, i32 1
  %439 = bitcast i64* %438 to i32*
  store i32 0, i32* %439, align 8
  %440 = load i64, i64* %40, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %38)
  br label %628

; <label>:441:                                    ; preds = %403, %262
  %442 = phi i64 [ %264, %262 ], [ %407, %403 ]
  %443 = fcmp ult float %33, %21
  br i1 %443, label %592, label %444

; <label>:444:                                    ; preds = %441
  call void @llvm.lifetime.start(i64 16, i8* nonnull %38)
  store i64 %442, i64* %39, align 16
  store i64 0, i64* %40, align 8
  %445 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %8, i64 0, i32 1
  %446 = bitcast i64* %445 to i32*
  store i32 0, i32* %446, align 8
  %447 = load i64, i64* %40, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %38)
  br label %632

; <label>:448:                                    ; preds = %403, %268
  %449 = phi i64 [ %270, %268 ], [ %407, %403 ]
  %450 = fcmp ueq float %33, %21
  br i1 %450, label %592, label %451

; <label>:451:                                    ; preds = %448
  call void @llvm.lifetime.start(i64 16, i8* nonnull %38)
  store i64 %449, i64* %39, align 16
  store i64 0, i64* %40, align 8
  %452 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %8, i64 0, i32 1
  %453 = bitcast i64* %452 to i32*
  store i32 0, i32* %453, align 8
  %454 = load i64, i64* %40, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %38)
  br label %636

; <label>:455:                                    ; preds = %403
  br i1 %408, label %600, label %592

; <label>:456:                                    ; preds = %403, %275
  %457 = phi i64 [ %277, %275 ], [ %407, %403 ]
  %458 = fcmp ugt float %33, %21
  br i1 %458, label %592, label %459

; <label>:459:                                    ; preds = %456
  call void @llvm.lifetime.start(i64 16, i8* nonnull %38)
  store i64 %457, i64* %39, align 16
  store i64 0, i64* %40, align 8
  %460 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %8, i64 0, i32 1
  %461 = bitcast i64* %460 to i32*
  store i32 0, i32* %461, align 8
  %462 = load i64, i64* %40, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %38)
  br label %641

; <label>:463:                                    ; preds = %403, %281
  %464 = phi i64 [ %283, %281 ], [ %407, %403 ]
  %465 = fcmp uge float %33, %21
  br i1 %465, label %592, label %466

; <label>:466:                                    ; preds = %463
  call void @llvm.lifetime.start(i64 16, i8* nonnull %38)
  store i64 %464, i64* %39, align 16
  store i64 0, i64* %40, align 8
  %467 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %8, i64 0, i32 1
  %468 = bitcast i64* %467 to i32*
  store i32 0, i32* %468, align 8
  %469 = load i64, i64* %40, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %38)
  br label %645

; <label>:470:                                    ; preds = %403, %287
  %471 = phi i64 [ %289, %287 ], [ %407, %403 ]
  %472 = fcmp une float %33, %21
  br i1 %472, label %592, label %473

; <label>:473:                                    ; preds = %470
  call void @llvm.lifetime.start(i64 16, i8* nonnull %38)
  store i64 %471, i64* %39, align 16
  store i64 0, i64* %40, align 8
  %474 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %8, i64 0, i32 1
  %475 = bitcast i64* %474 to i32*
  store i32 0, i32* %475, align 8
  %476 = load i64, i64* %40, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %38)
  br label %649

; <label>:477:                                    ; preds = %403, %293
  %478 = phi i64 [ %295, %293 ], [ %407, %403 ]
  %479 = fcmp ugt float %33, %21
  br i1 %479, label %480, label %592

; <label>:480:                                    ; preds = %477
  call void @llvm.lifetime.start(i64 16, i8* nonnull %38)
  store i64 %478, i64* %39, align 16
  store i64 0, i64* %40, align 8
  %481 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %8, i64 0, i32 1
  %482 = bitcast i64* %481 to i32*
  store i32 0, i32* %482, align 8
  %483 = load i64, i64* %40, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %38)
  br label %653

; <label>:484:                                    ; preds = %403, %299
  %485 = phi i64 [ %301, %299 ], [ %407, %403 ]
  %486 = fcmp olt float %33, %21
  br i1 %486, label %592, label %487

; <label>:487:                                    ; preds = %484
  call void @llvm.lifetime.start(i64 16, i8* nonnull %38)
  store i64 %485, i64* %39, align 16
  store i64 0, i64* %40, align 8
  %488 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %8, i64 0, i32 1
  %489 = bitcast i64* %488 to i32*
  store i32 0, i32* %489, align 8
  %490 = load i64, i64* %40, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %38)
  br label %657

; <label>:491:                                    ; preds = %403, %307
  %492 = phi i1 [ %310, %307 ], [ %409, %403 ]
  %493 = phi i64 [ %309, %307 ], [ %407, %403 ]
  %494 = fcmp oeq float %33, %21
  %495 = and i1 %494, %492
  br i1 %495, label %592, label %496

; <label>:496:                                    ; preds = %491
  call void @llvm.lifetime.start(i64 16, i8* nonnull %38)
  store i64 %493, i64* %39, align 16
  store i64 0, i64* %40, align 8
  %497 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %8, i64 0, i32 1
  %498 = bitcast i64* %497 to i32*
  store i32 0, i32* %498, align 8
  %499 = load i64, i64* %40, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %38)
  %500 = fcmp ord float %36, %24
  br label %661

; <label>:501:                                    ; preds = %403, %316
  %502 = phi i1 [ %319, %316 ], [ %409, %403 ]
  %503 = phi i64 [ %318, %316 ], [ %407, %403 ]
  %504 = fcmp ogt float %33, %21
  %505 = and i1 %504, %502
  br i1 %505, label %592, label %506

; <label>:506:                                    ; preds = %501
  call void @llvm.lifetime.start(i64 16, i8* nonnull %38)
  store i64 %503, i64* %39, align 16
  store i64 0, i64* %40, align 8
  %507 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %8, i64 0, i32 1
  %508 = bitcast i64* %507 to i32*
  store i32 0, i32* %508, align 8
  %509 = load i64, i64* %40, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %38)
  %510 = fcmp ord float %36, %24
  br label %667

; <label>:511:                                    ; preds = %403, %325
  %512 = phi i1 [ %328, %325 ], [ %409, %403 ]
  %513 = phi i64 [ %327, %325 ], [ %407, %403 ]
  %514 = fcmp oge float %33, %21
  %515 = and i1 %514, %512
  br i1 %515, label %592, label %516

; <label>:516:                                    ; preds = %511
  call void @llvm.lifetime.start(i64 16, i8* nonnull %38)
  store i64 %513, i64* %39, align 16
  store i64 0, i64* %40, align 8
  %517 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %8, i64 0, i32 1
  %518 = bitcast i64* %517 to i32*
  store i32 0, i32* %518, align 8
  %519 = load i64, i64* %40, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %38)
  %520 = fcmp ord float %36, %24
  br label %673

; <label>:521:                                    ; preds = %403, %332
  %522 = phi i64 [ %334, %332 ], [ %407, %403 ]
  %523 = fcmp ueq float %33, %21
  br i1 %523, label %524, label %592

; <label>:524:                                    ; preds = %521
  call void @llvm.lifetime.start(i64 16, i8* nonnull %38)
  store i64 %522, i64* %39, align 16
  store i64 0, i64* %40, align 8
  %525 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %8, i64 0, i32 1
  %526 = bitcast i64* %525 to i32*
  store i32 0, i32* %526, align 8
  %527 = load i64, i64* %40, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %38)
  br label %679

; <label>:528:                                    ; preds = %403, %338
  %529 = phi i64 [ %340, %338 ], [ %407, %403 ]
  %530 = fcmp ule float %33, %21
  br i1 %530, label %592, label %531

; <label>:531:                                    ; preds = %528
  call void @llvm.lifetime.start(i64 16, i8* nonnull %38)
  store i64 %529, i64* %39, align 16
  store i64 0, i64* %40, align 8
  %532 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %8, i64 0, i32 1
  %533 = bitcast i64* %532 to i32*
  store i32 0, i32* %533, align 8
  %534 = load i64, i64* %40, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %38)
  br label %683

; <label>:535:                                    ; preds = %403, %344
  %536 = phi i64 [ %346, %344 ], [ %407, %403 ]
  %537 = fcmp ult float %33, %21
  br i1 %537, label %592, label %538

; <label>:538:                                    ; preds = %535
  call void @llvm.lifetime.start(i64 16, i8* nonnull %38)
  store i64 %536, i64* %39, align 16
  store i64 0, i64* %40, align 8
  %539 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %8, i64 0, i32 1
  %540 = bitcast i64* %539 to i32*
  store i32 0, i32* %540, align 8
  %541 = load i64, i64* %40, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %38)
  br label %687

; <label>:542:                                    ; preds = %403, %350
  %543 = phi i64 [ %352, %350 ], [ %407, %403 ]
  %544 = fcmp ueq float %33, %21
  br i1 %544, label %592, label %545

; <label>:545:                                    ; preds = %542
  call void @llvm.lifetime.start(i64 16, i8* nonnull %38)
  store i64 %543, i64* %39, align 16
  store i64 0, i64* %40, align 8
  %546 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %8, i64 0, i32 1
  %547 = bitcast i64* %546 to i32*
  store i32 0, i32* %547, align 8
  %548 = load i64, i64* %40, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %38)
  br label %691

; <label>:549:                                    ; preds = %403
  br i1 %408, label %594, label %592

; <label>:550:                                    ; preds = %403, %357
  %551 = phi i64 [ %359, %357 ], [ %407, %403 ]
  %552 = fcmp ugt float %33, %21
  br i1 %552, label %592, label %553

; <label>:553:                                    ; preds = %550
  call void @llvm.lifetime.start(i64 16, i8* nonnull %38)
  store i64 %551, i64* %39, align 16
  store i64 0, i64* %40, align 8
  %554 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %8, i64 0, i32 1
  %555 = bitcast i64* %554 to i32*
  store i32 0, i32* %555, align 8
  %556 = load i64, i64* %40, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %38)
  br label %696

; <label>:557:                                    ; preds = %403, %363
  %558 = phi i64 [ %365, %363 ], [ %407, %403 ]
  %559 = fcmp uge float %33, %21
  br i1 %559, label %592, label %560

; <label>:560:                                    ; preds = %557
  call void @llvm.lifetime.start(i64 16, i8* nonnull %38)
  store i64 %558, i64* %39, align 16
  store i64 0, i64* %40, align 8
  %561 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %8, i64 0, i32 1
  %562 = bitcast i64* %561 to i32*
  store i32 0, i32* %562, align 8
  %563 = load i64, i64* %40, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %38)
  br label %700

; <label>:564:                                    ; preds = %403, %369
  %565 = phi i64 [ %371, %369 ], [ %407, %403 ]
  %566 = fcmp une float %33, %21
  br i1 %566, label %592, label %567

; <label>:567:                                    ; preds = %564
  call void @llvm.lifetime.start(i64 16, i8* nonnull %38)
  store i64 %565, i64* %39, align 16
  store i64 0, i64* %40, align 8
  %568 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %8, i64 0, i32 1
  %569 = bitcast i64* %568 to i32*
  store i32 0, i32* %569, align 8
  %570 = load i64, i64* %40, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %38)
  br label %704

; <label>:571:                                    ; preds = %403, %403
  br i1 %408, label %592, label %606

; <label>:572:                                    ; preds = %403, %378
  %573 = phi i1 [ %381, %378 ], [ %409, %403 ]
  %574 = phi i64 [ %380, %378 ], [ %407, %403 ]
  %575 = fcmp ole float %33, %21
  %576 = and i1 %575, %573
  br i1 %576, label %592, label %577

; <label>:577:                                    ; preds = %572
  call void @llvm.lifetime.start(i64 16, i8* nonnull %38)
  store i64 %574, i64* %39, align 16
  store i64 0, i64* %40, align 8
  %578 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %8, i64 0, i32 1
  %579 = bitcast i64* %578 to i32*
  store i32 0, i32* %579, align 8
  %580 = load i64, i64* %40, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %38)
  %581 = fcmp ord float %36, %24
  br label %709

; <label>:582:                                    ; preds = %403, %387
  %583 = phi i1 [ %390, %387 ], [ %409, %403 ]
  %584 = phi i64 [ %389, %387 ], [ %407, %403 ]
  %585 = fcmp olt float %33, %21
  %586 = and i1 %585, %583
  br i1 %586, label %592, label %587

; <label>:587:                                    ; preds = %582
  call void @llvm.lifetime.start(i64 16, i8* nonnull %38)
  store i64 %584, i64* %39, align 16
  store i64 0, i64* %40, align 8
  %588 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %8, i64 0, i32 1
  %589 = bitcast i64* %588 to i32*
  store i32 0, i32* %589, align 8
  %590 = load i64, i64* %40, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %38)
  %591 = fcmp ord float %36, %24
  br label %715

; <label>:592:                                    ; preds = %582, %572, %571, %564, %557, %550, %549, %542, %535, %528, %521, %511, %501, %491, %484, %477, %470, %463, %456, %455, %448, %441, %434, %424, %417, %410, %403, %403, %398, %393
  %593 = phi i64 [ %584, %582 ], [ %574, %572 ], [ %407, %571 ], [ %565, %564 ], [ %558, %557 ], [ %551, %550 ], [ %407, %549 ], [ %543, %542 ], [ %536, %535 ], [ %529, %528 ], [ %522, %521 ], [ %513, %511 ], [ %503, %501 ], [ %493, %491 ], [ %485, %484 ], [ %478, %477 ], [ %471, %470 ], [ %464, %463 ], [ %457, %456 ], [ %407, %455 ], [ %449, %448 ], [ %442, %441 ], [ %435, %434 ], [ %426, %424 ], [ %418, %417 ], [ %411, %410 ], [ %407, %403 ], [ %407, %403 ], [ %401, %398 ], [ %396, %393 ]
  br label %606

; <label>:594:                                    ; preds = %549, %393
  %595 = phi i64 [ %396, %393 ], [ %407, %549 ]
  call void @llvm.lifetime.start(i64 16, i8* nonnull %38)
  store i64 %595, i64* %39, align 16
  store i64 0, i64* %40, align 8
  %596 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %8, i64 0, i32 1
  %597 = bitcast i64* %596 to i32*
  store i32 0, i32* %597, align 8
  %598 = load i64, i64* %40, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %38)
  %599 = fcmp uno float %36, %24
  br i1 %599, label %724, label %721

; <label>:600:                                    ; preds = %455, %398
  %601 = phi i64 [ %401, %398 ], [ %407, %455 ]
  call void @llvm.lifetime.start(i64 16, i8* nonnull %38)
  store i64 %601, i64* %39, align 16
  store i64 0, i64* %40, align 8
  %602 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %8, i64 0, i32 1
  %603 = bitcast i64* %602 to i32*
  store i32 0, i32* %603, align 8
  %604 = load i64, i64* %40, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %38)
  %605 = fcmp uno float %36, %24
  br i1 %605, label %724, label %721

; <label>:606:                                    ; preds = %592, %571, %403, %403
  %607 = phi i64 [ %593, %592 ], [ %407, %571 ], [ %407, %403 ], [ %407, %403 ]
  %608 = phi i32 [ -1, %592 ], [ 0, %571 ], [ 0, %403 ], [ 0, %403 ]
  call void @llvm.lifetime.start(i64 16, i8* nonnull %38)
  store i64 %607, i64* %39, align 16
  store i64 0, i64* %40, align 8
  %609 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %8, i64 0, i32 1
  %610 = bitcast i64* %609 to i32*
  store i32 %608, i32* %610, align 8
  %611 = load i64, i64* %40, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %38)
  %612 = fcmp uno float %36, %24
  %613 = xor i1 %612, true
  switch i8 %25, label %221 [
    i8 31, label %721
    i8 1, label %715
    i8 2, label %709
    i8 3, label %708
    i8 4, label %704
    i8 5, label %700
    i8 6, label %696
    i8 7, label %695
    i8 8, label %691
    i8 9, label %687
    i8 10, label %683
    i8 11, label %724
    i8 12, label %679
    i8 13, label %673
    i8 14, label %667
    i8 15, label %721
    i8 16, label %661
    i8 17, label %657
    i8 18, label %653
    i8 19, label %708
    i8 20, label %649
    i8 21, label %645
    i8 22, label %641
    i8 23, label %640
    i8 24, label %636
    i8 25, label %632
    i8 26, label %628
    i8 27, label %724
    i8 28, label %622
    i8 29, label %618
    i8 30, label %614
  ]

; <label>:614:                                    ; preds = %606, %413
  %615 = phi i64 [ %416, %413 ], [ %611, %606 ]
  %616 = phi i64 [ %411, %413 ], [ %607, %606 ]
  %617 = fcmp ogt float %36, %24
  br i1 %617, label %721, label %724

; <label>:618:                                    ; preds = %606, %420
  %619 = phi i64 [ %423, %420 ], [ %611, %606 ]
  %620 = phi i64 [ %418, %420 ], [ %607, %606 ]
  %621 = fcmp ult float %36, %24
  br i1 %621, label %724, label %721

; <label>:622:                                    ; preds = %606, %429
  %623 = phi i1 [ %433, %429 ], [ %613, %606 ]
  %624 = phi i64 [ %432, %429 ], [ %611, %606 ]
  %625 = phi i64 [ %426, %429 ], [ %607, %606 ]
  %626 = fcmp une float %36, %24
  %627 = and i1 %626, %623
  br i1 %627, label %721, label %724

; <label>:628:                                    ; preds = %606, %437
  %629 = phi i64 [ %440, %437 ], [ %611, %606 ]
  %630 = phi i64 [ %435, %437 ], [ %607, %606 ]
  %631 = fcmp ule float %36, %24
  br i1 %631, label %721, label %724

; <label>:632:                                    ; preds = %606, %444
  %633 = phi i64 [ %447, %444 ], [ %611, %606 ]
  %634 = phi i64 [ %442, %444 ], [ %607, %606 ]
  %635 = fcmp ult float %36, %24
  br i1 %635, label %721, label %724

; <label>:636:                                    ; preds = %606, %451
  %637 = phi i64 [ %454, %451 ], [ %611, %606 ]
  %638 = phi i64 [ %449, %451 ], [ %607, %606 ]
  %639 = fcmp ueq float %36, %24
  br i1 %639, label %721, label %724

; <label>:640:                                    ; preds = %606
  br i1 %612, label %724, label %721

; <label>:641:                                    ; preds = %606, %459
  %642 = phi i64 [ %462, %459 ], [ %611, %606 ]
  %643 = phi i64 [ %457, %459 ], [ %607, %606 ]
  %644 = fcmp ugt float %36, %24
  br i1 %644, label %721, label %724

; <label>:645:                                    ; preds = %606, %466
  %646 = phi i64 [ %469, %466 ], [ %611, %606 ]
  %647 = phi i64 [ %464, %466 ], [ %607, %606 ]
  %648 = fcmp uge float %36, %24
  br i1 %648, label %721, label %724

; <label>:649:                                    ; preds = %606, %473
  %650 = phi i64 [ %476, %473 ], [ %611, %606 ]
  %651 = phi i64 [ %471, %473 ], [ %607, %606 ]
  %652 = fcmp une float %36, %24
  br i1 %652, label %721, label %724

; <label>:653:                                    ; preds = %606, %480
  %654 = phi i64 [ %483, %480 ], [ %611, %606 ]
  %655 = phi i64 [ %478, %480 ], [ %607, %606 ]
  %656 = fcmp ugt float %36, %24
  br i1 %656, label %724, label %721

; <label>:657:                                    ; preds = %606, %487
  %658 = phi i64 [ %490, %487 ], [ %611, %606 ]
  %659 = phi i64 [ %485, %487 ], [ %607, %606 ]
  %660 = fcmp olt float %36, %24
  br i1 %660, label %721, label %724

; <label>:661:                                    ; preds = %606, %496
  %662 = phi i1 [ %500, %496 ], [ %613, %606 ]
  %663 = phi i64 [ %499, %496 ], [ %611, %606 ]
  %664 = phi i64 [ %493, %496 ], [ %607, %606 ]
  %665 = fcmp oeq float %36, %24
  %666 = and i1 %665, %662
  br i1 %666, label %721, label %724

; <label>:667:                                    ; preds = %606, %506
  %668 = phi i1 [ %510, %506 ], [ %613, %606 ]
  %669 = phi i64 [ %509, %506 ], [ %611, %606 ]
  %670 = phi i64 [ %503, %506 ], [ %607, %606 ]
  %671 = fcmp ogt float %36, %24
  %672 = and i1 %671, %668
  br i1 %672, label %721, label %724

; <label>:673:                                    ; preds = %606, %516
  %674 = phi i1 [ %520, %516 ], [ %613, %606 ]
  %675 = phi i64 [ %519, %516 ], [ %611, %606 ]
  %676 = phi i64 [ %513, %516 ], [ %607, %606 ]
  %677 = fcmp oge float %36, %24
  %678 = and i1 %677, %674
  br i1 %678, label %721, label %724

; <label>:679:                                    ; preds = %606, %524
  %680 = phi i64 [ %527, %524 ], [ %611, %606 ]
  %681 = phi i64 [ %522, %524 ], [ %607, %606 ]
  %682 = fcmp ueq float %36, %24
  br i1 %682, label %724, label %721

; <label>:683:                                    ; preds = %606, %531
  %684 = phi i64 [ %534, %531 ], [ %611, %606 ]
  %685 = phi i64 [ %529, %531 ], [ %607, %606 ]
  %686 = fcmp ule float %36, %24
  br i1 %686, label %721, label %724

; <label>:687:                                    ; preds = %606, %538
  %688 = phi i64 [ %541, %538 ], [ %611, %606 ]
  %689 = phi i64 [ %536, %538 ], [ %607, %606 ]
  %690 = fcmp ult float %36, %24
  br i1 %690, label %721, label %724

; <label>:691:                                    ; preds = %606, %545
  %692 = phi i64 [ %548, %545 ], [ %611, %606 ]
  %693 = phi i64 [ %543, %545 ], [ %607, %606 ]
  %694 = fcmp ueq float %36, %24
  br i1 %694, label %721, label %724

; <label>:695:                                    ; preds = %606
  br i1 %612, label %724, label %721

; <label>:696:                                    ; preds = %606, %553
  %697 = phi i64 [ %556, %553 ], [ %611, %606 ]
  %698 = phi i64 [ %551, %553 ], [ %607, %606 ]
  %699 = fcmp ugt float %36, %24
  br i1 %699, label %721, label %724

; <label>:700:                                    ; preds = %606, %560
  %701 = phi i64 [ %563, %560 ], [ %611, %606 ]
  %702 = phi i64 [ %558, %560 ], [ %607, %606 ]
  %703 = fcmp uge float %36, %24
  br i1 %703, label %721, label %724

; <label>:704:                                    ; preds = %606, %567
  %705 = phi i64 [ %570, %567 ], [ %611, %606 ]
  %706 = phi i64 [ %565, %567 ], [ %607, %606 ]
  %707 = fcmp une float %36, %24
  br i1 %707, label %721, label %724

; <label>:708:                                    ; preds = %606, %606
  br i1 %612, label %721, label %724

; <label>:709:                                    ; preds = %606, %577
  %710 = phi i1 [ %581, %577 ], [ %613, %606 ]
  %711 = phi i64 [ %580, %577 ], [ %611, %606 ]
  %712 = phi i64 [ %574, %577 ], [ %607, %606 ]
  %713 = fcmp ole float %36, %24
  %714 = and i1 %713, %710
  br i1 %714, label %721, label %724

; <label>:715:                                    ; preds = %606, %587
  %716 = phi i1 [ %591, %587 ], [ %613, %606 ]
  %717 = phi i64 [ %590, %587 ], [ %611, %606 ]
  %718 = phi i64 [ %584, %587 ], [ %607, %606 ]
  %719 = fcmp olt float %36, %24
  %720 = and i1 %719, %716
  br i1 %720, label %721, label %724

; <label>:721:                                    ; preds = %715, %709, %708, %704, %700, %696, %695, %691, %687, %683, %679, %673, %667, %661, %657, %653, %649, %645, %641, %640, %636, %632, %628, %622, %618, %614, %606, %606, %600, %594
  %722 = phi i64 [ %717, %715 ], [ %711, %709 ], [ %611, %708 ], [ %705, %704 ], [ %701, %700 ], [ %697, %696 ], [ %611, %695 ], [ %692, %691 ], [ %688, %687 ], [ %684, %683 ], [ %680, %679 ], [ %675, %673 ], [ %669, %667 ], [ %663, %661 ], [ %658, %657 ], [ %654, %653 ], [ %650, %649 ], [ %646, %645 ], [ %642, %641 ], [ %611, %640 ], [ %637, %636 ], [ %633, %632 ], [ %629, %628 ], [ %624, %622 ], [ %619, %618 ], [ %615, %614 ], [ %611, %606 ], [ %611, %606 ], [ %604, %600 ], [ %598, %594 ]
  %723 = phi i64 [ %718, %715 ], [ %712, %709 ], [ %607, %708 ], [ %706, %704 ], [ %702, %700 ], [ %698, %696 ], [ %607, %695 ], [ %693, %691 ], [ %689, %687 ], [ %685, %683 ], [ %681, %679 ], [ %676, %673 ], [ %670, %667 ], [ %664, %661 ], [ %659, %657 ], [ %655, %653 ], [ %651, %649 ], [ %647, %645 ], [ %643, %641 ], [ %607, %640 ], [ %638, %636 ], [ %634, %632 ], [ %630, %628 ], [ %625, %622 ], [ %620, %618 ], [ %616, %614 ], [ %607, %606 ], [ %607, %606 ], [ %601, %600 ], [ %595, %594 ]
  br label %724

; <label>:724:                                    ; preds = %721, %715, %709, %708, %704, %700, %696, %695, %691, %687, %683, %679, %673, %667, %661, %657, %653, %649, %645, %641, %640, %636, %632, %628, %622, %618, %614, %606, %606, %600, %594
  %725 = phi i64 [ %722, %721 ], [ %611, %708 ], [ %615, %614 ], [ %619, %618 ], [ %624, %622 ], [ %629, %628 ], [ %633, %632 ], [ %637, %636 ], [ %611, %640 ], [ %642, %641 ], [ %646, %645 ], [ %650, %649 ], [ %654, %653 ], [ %658, %657 ], [ %663, %661 ], [ %669, %667 ], [ %675, %673 ], [ %680, %679 ], [ %684, %683 ], [ %688, %687 ], [ %692, %691 ], [ %611, %695 ], [ %697, %696 ], [ %701, %700 ], [ %705, %704 ], [ %711, %709 ], [ %717, %715 ], [ %611, %606 ], [ %611, %606 ], [ %604, %600 ], [ %598, %594 ]
  %726 = phi i64 [ %723, %721 ], [ %607, %708 ], [ %616, %614 ], [ %620, %618 ], [ %625, %622 ], [ %630, %628 ], [ %634, %632 ], [ %638, %636 ], [ %607, %640 ], [ %643, %641 ], [ %647, %645 ], [ %651, %649 ], [ %655, %653 ], [ %659, %657 ], [ %664, %661 ], [ %670, %667 ], [ %676, %673 ], [ %681, %679 ], [ %685, %683 ], [ %689, %687 ], [ %693, %691 ], [ %607, %695 ], [ %698, %696 ], [ %702, %700 ], [ %706, %704 ], [ %712, %709 ], [ %718, %715 ], [ %607, %606 ], [ %607, %606 ], [ %601, %600 ], [ %595, %594 ]
  %727 = phi i32 [ -1, %721 ], [ 0, %708 ], [ 0, %614 ], [ 0, %618 ], [ 0, %622 ], [ 0, %628 ], [ 0, %632 ], [ 0, %636 ], [ 0, %640 ], [ 0, %641 ], [ 0, %645 ], [ 0, %649 ], [ 0, %653 ], [ 0, %657 ], [ 0, %661 ], [ 0, %667 ], [ 0, %673 ], [ 0, %679 ], [ 0, %683 ], [ 0, %687 ], [ 0, %691 ], [ 0, %695 ], [ 0, %696 ], [ 0, %700 ], [ 0, %704 ], [ 0, %709 ], [ 0, %715 ], [ 0, %606 ], [ 0, %606 ], [ 0, %600 ], [ 0, %594 ]
  call void @llvm.lifetime.start(i64 16, i8* nonnull %38)
  store i64 %726, i64* %39, align 16
  store i64 %725, i64* %40, align 8
  %728 = getelementptr inbounds [4 x i32], [4 x i32]* %41, i64 0, i64 3
  store i32 %727, i32* %728, align 4
  %729 = load i64, i64* %40, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %38)
  br label %68
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L5CMPPSI3VnWI8vec128_tE2VnIS2_ES5_EEP6MemoryS7_R5StateT_T0_T1_2InIhE(%struct.Memory*, %struct.State* dereferenceable(3376), i8* nocapture, i8* nocapture readonly, i8* nocapture readonly, i64)  {
  %7 = alloca <2 x i64>, align 16
  %8 = bitcast <2 x i64>* %7 to { i64, i64 }*
  %9 = bitcast i8* %3 to i64*
  %10 = load i64, i64* %9, align 1
  %11 = getelementptr inbounds i8, i8* %3, i64 8
  %12 = bitcast i8* %11 to i64*
  %13 = load i64, i64* %12, align 1
  %14 = bitcast i8* %4 to i64*
  %15 = load i64, i64* %14, align 1
  %16 = getelementptr inbounds i8, i8* %4, i64 8
  %17 = bitcast i8* %16 to i64*
  %18 = load i64, i64* %17, align 1
  %19 = trunc i64 %5 to i8
  %20 = icmp ugt i8 %19, 31
  %21 = trunc i64 %10 to i32
  %22 = bitcast i32 %21 to float
  %23 = trunc i64 %15 to i32
  %24 = bitcast i32 %23 to float
  %25 = lshr i64 %10, 32
  %26 = trunc i64 %25 to i32
  %27 = bitcast i32 %26 to float
  %28 = lshr i64 %15, 32
  %29 = trunc i64 %28 to i32
  %30 = bitcast i32 %29 to float
  %31 = trunc i64 %13 to i32
  %32 = bitcast i32 %31 to float
  %33 = trunc i64 %18 to i32
  %34 = bitcast i32 %33 to float
  %35 = lshr i64 %13, 32
  %36 = trunc i64 %35 to i32
  %37 = bitcast i32 %36 to float
  %38 = lshr i64 %18, 32
  %39 = trunc i64 %38 to i32
  %40 = bitcast i32 %39 to float
  br i1 %20, label %68, label %41

; <label>:41:                                     ; preds = %6
  %42 = bitcast <2 x i64>* %7 to i8*
  %43 = getelementptr inbounds <2 x i64>, <2 x i64>* %7, i64 0, i64 0
  %44 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %8, i64 0, i32 1
  %45 = bitcast <2 x i64>* %7 to [4 x i32]*
  %46 = icmp eq i8 %19, 0
  br i1 %46, label %50, label %47

; <label>:47:                                     ; preds = %41
  %48 = fcmp uno float %22, %24
  %49 = xor i1 %48, true
  switch i8 %19, label %225 [
    i8 31, label %227
    i8 1, label %88
    i8 2, label %95
    i8 3, label %226
    i8 4, label %102
    i8 5, label %107
    i8 6, label %112
    i8 7, label %117
    i8 8, label %122
    i8 9, label %127
    i8 10, label %132
    i8 11, label %228
    i8 12, label %137
    i8 13, label %142
    i8 14, label %149
    i8 15, label %227
    i8 16, label %156
    i8 17, label %163
    i8 18, label %168
    i8 19, label %226
    i8 20, label %173
    i8 21, label %178
    i8 22, label %183
    i8 23, label %188
    i8 24, label %193
    i8 25, label %198
    i8 26, label %203
    i8 27, label %228
    i8 28, label %208
    i8 29, label %215
    i8 30, label %220
  ]

; <label>:50:                                     ; preds = %41
  %51 = fcmp oeq float %22, %24
  %52 = sext i1 %51 to i32
  call void @llvm.lifetime.start(i64 16, i8* nonnull %42)
  store <2 x i64> zeroinitializer, <2 x i64>* %7, align 16
  %53 = bitcast <2 x i64>* %7 to i32*
  store i32 %52, i32* %53, align 16
  %54 = load i64, i64* %43, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %42)
  %55 = fcmp oeq float %27, %30
  %56 = sext i1 %55 to i32
  call void @llvm.lifetime.start(i64 16, i8* nonnull %42)
  store i64 %54, i64* %43, align 16
  store i64 0, i64* %44, align 8
  %57 = getelementptr inbounds [4 x i32], [4 x i32]* %45, i64 0, i64 1
  store i32 %56, i32* %57, align 4
  %58 = load i64, i64* %43, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %42)
  %59 = fcmp oeq float %32, %34
  %60 = sext i1 %59 to i32
  call void @llvm.lifetime.start(i64 16, i8* nonnull %42)
  store i64 %58, i64* %43, align 16
  store i64 0, i64* %44, align 8
  %61 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %8, i64 0, i32 1
  %62 = bitcast i64* %61 to i32*
  store i32 %60, i32* %62, align 8
  %63 = load i64, i64* %44, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %42)
  %64 = fcmp oeq float %37, %40
  %65 = sext i1 %64 to i32
  call void @llvm.lifetime.start(i64 16, i8* nonnull %42)
  store i64 %58, i64* %43, align 16
  store i64 %63, i64* %44, align 8
  %66 = getelementptr inbounds [4 x i32], [4 x i32]* %45, i64 0, i64 3
  store i32 %65, i32* %66, align 4
  %67 = load i64, i64* %44, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %42)
  br label %72

; <label>:68:                                     ; preds = %6
  %69 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 33, i32 0, i32 0
  %70 = load i64, i64* %69, align 8
  %71 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %1, i64 %70, %struct.Memory* %0) 
  br label %234

; <label>:72:                                     ; preds = %728, %50
  %73 = phi i64 [ %58, %50 ], [ %730, %728 ]
  %74 = phi i64 [ %67, %50 ], [ %733, %728 ]
  %75 = lshr i64 %73, 32
  %76 = trunc i64 %73 to i32
  %77 = trunc i64 %75 to i32
  %78 = bitcast i8* %2 to i32*
  store i32 %76, i32* %78, align 1
  %79 = getelementptr inbounds i8, i8* %2, i64 4
  %80 = bitcast i8* %79 to i32*
  store i32 %77, i32* %80, align 1
  %81 = trunc i64 %74 to i32
  %82 = getelementptr inbounds i8, i8* %2, i64 8
  %83 = bitcast i8* %82 to i32*
  store i32 %81, i32* %83, align 1
  %84 = lshr i64 %74, 32
  %85 = trunc i64 %84 to i32
  %86 = getelementptr inbounds i8, i8* %2, i64 12
  %87 = bitcast i8* %86 to i32*
  store i32 %85, i32* %87, align 1
  br label %234

; <label>:88:                                     ; preds = %47
  %89 = fcmp olt float %22, %24
  %90 = and i1 %89, %49
  br i1 %90, label %227, label %91

; <label>:91:                                     ; preds = %88
  call void @llvm.lifetime.start(i64 16, i8* nonnull %42)
  store <2 x i64> zeroinitializer, <2 x i64>* %7, align 16
  %92 = bitcast <2 x i64>* %7 to i32*
  store i32 0, i32* %92, align 16
  %93 = load i64, i64* %43, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %42)
  %94 = fcmp ord float %27, %30
  br label %386

; <label>:95:                                     ; preds = %47
  %96 = fcmp ole float %22, %24
  %97 = and i1 %96, %49
  br i1 %97, label %227, label %98

; <label>:98:                                     ; preds = %95
  call void @llvm.lifetime.start(i64 16, i8* nonnull %42)
  store <2 x i64> zeroinitializer, <2 x i64>* %7, align 16
  %99 = bitcast <2 x i64>* %7 to i32*
  store i32 0, i32* %99, align 16
  %100 = load i64, i64* %43, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %42)
  %101 = fcmp ord float %27, %30
  br label %377

; <label>:102:                                    ; preds = %47
  %103 = fcmp une float %22, %24
  br i1 %103, label %227, label %104

; <label>:104:                                    ; preds = %102
  call void @llvm.lifetime.start(i64 16, i8* nonnull %42)
  store <2 x i64> zeroinitializer, <2 x i64>* %7, align 16
  %105 = bitcast <2 x i64>* %7 to i32*
  store i32 0, i32* %105, align 16
  %106 = load i64, i64* %43, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %42)
  br label %370

; <label>:107:                                    ; preds = %47
  %108 = fcmp uge float %22, %24
  br i1 %108, label %227, label %109

; <label>:109:                                    ; preds = %107
  call void @llvm.lifetime.start(i64 16, i8* nonnull %42)
  store <2 x i64> zeroinitializer, <2 x i64>* %7, align 16
  %110 = bitcast <2 x i64>* %7 to i32*
  store i32 0, i32* %110, align 16
  %111 = load i64, i64* %43, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %42)
  br label %364

; <label>:112:                                    ; preds = %47
  %113 = fcmp ugt float %22, %24
  br i1 %113, label %227, label %114

; <label>:114:                                    ; preds = %112
  call void @llvm.lifetime.start(i64 16, i8* nonnull %42)
  store <2 x i64> zeroinitializer, <2 x i64>* %7, align 16
  %115 = bitcast <2 x i64>* %7 to i32*
  store i32 0, i32* %115, align 16
  %116 = load i64, i64* %43, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %42)
  br label %358

; <label>:117:                                    ; preds = %47
  br i1 %48, label %118, label %227

; <label>:118:                                    ; preds = %117
  call void @llvm.lifetime.start(i64 16, i8* nonnull %42)
  store <2 x i64> zeroinitializer, <2 x i64>* %7, align 16
  %119 = bitcast <2 x i64>* %7 to i32*
  store i32 0, i32* %119, align 16
  %120 = load i64, i64* %43, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %42)
  %121 = fcmp uno float %27, %30
  br i1 %121, label %397, label %395

; <label>:122:                                    ; preds = %47
  %123 = fcmp ueq float %22, %24
  br i1 %123, label %227, label %124

; <label>:124:                                    ; preds = %122
  call void @llvm.lifetime.start(i64 16, i8* nonnull %42)
  store <2 x i64> zeroinitializer, <2 x i64>* %7, align 16
  %125 = bitcast <2 x i64>* %7 to i32*
  store i32 0, i32* %125, align 16
  %126 = load i64, i64* %43, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %42)
  br label %351

; <label>:127:                                    ; preds = %47
  %128 = fcmp ult float %22, %24
  br i1 %128, label %227, label %129

; <label>:129:                                    ; preds = %127
  call void @llvm.lifetime.start(i64 16, i8* nonnull %42)
  store <2 x i64> zeroinitializer, <2 x i64>* %7, align 16
  %130 = bitcast <2 x i64>* %7 to i32*
  store i32 0, i32* %130, align 16
  %131 = load i64, i64* %43, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %42)
  br label %345

; <label>:132:                                    ; preds = %47
  %133 = fcmp ule float %22, %24
  br i1 %133, label %227, label %134

; <label>:134:                                    ; preds = %132
  call void @llvm.lifetime.start(i64 16, i8* nonnull %42)
  store <2 x i64> zeroinitializer, <2 x i64>* %7, align 16
  %135 = bitcast <2 x i64>* %7 to i32*
  store i32 0, i32* %135, align 16
  %136 = load i64, i64* %43, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %42)
  br label %339

; <label>:137:                                    ; preds = %47
  %138 = fcmp ueq float %22, %24
  br i1 %138, label %139, label %227

; <label>:139:                                    ; preds = %137
  call void @llvm.lifetime.start(i64 16, i8* nonnull %42)
  store <2 x i64> zeroinitializer, <2 x i64>* %7, align 16
  %140 = bitcast <2 x i64>* %7 to i32*
  store i32 0, i32* %140, align 16
  %141 = load i64, i64* %43, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %42)
  br label %333

; <label>:142:                                    ; preds = %47
  %143 = fcmp oge float %22, %24
  %144 = and i1 %143, %49
  br i1 %144, label %227, label %145

; <label>:145:                                    ; preds = %142
  call void @llvm.lifetime.start(i64 16, i8* nonnull %42)
  store <2 x i64> zeroinitializer, <2 x i64>* %7, align 16
  %146 = bitcast <2 x i64>* %7 to i32*
  store i32 0, i32* %146, align 16
  %147 = load i64, i64* %43, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %42)
  %148 = fcmp ord float %27, %30
  br label %324

; <label>:149:                                    ; preds = %47
  %150 = fcmp ogt float %22, %24
  %151 = and i1 %150, %49
  br i1 %151, label %227, label %152

; <label>:152:                                    ; preds = %149
  call void @llvm.lifetime.start(i64 16, i8* nonnull %42)
  store <2 x i64> zeroinitializer, <2 x i64>* %7, align 16
  %153 = bitcast <2 x i64>* %7 to i32*
  store i32 0, i32* %153, align 16
  %154 = load i64, i64* %43, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %42)
  %155 = fcmp ord float %27, %30
  br label %315

; <label>:156:                                    ; preds = %47
  %157 = fcmp oeq float %22, %24
  %158 = and i1 %157, %49
  br i1 %158, label %227, label %159

; <label>:159:                                    ; preds = %156
  call void @llvm.lifetime.start(i64 16, i8* nonnull %42)
  store <2 x i64> zeroinitializer, <2 x i64>* %7, align 16
  %160 = bitcast <2 x i64>* %7 to i32*
  store i32 0, i32* %160, align 16
  %161 = load i64, i64* %43, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %42)
  %162 = fcmp ord float %27, %30
  br label %306

; <label>:163:                                    ; preds = %47
  %164 = fcmp olt float %22, %24
  br i1 %164, label %227, label %165

; <label>:165:                                    ; preds = %163
  call void @llvm.lifetime.start(i64 16, i8* nonnull %42)
  store <2 x i64> zeroinitializer, <2 x i64>* %7, align 16
  %166 = bitcast <2 x i64>* %7 to i32*
  store i32 0, i32* %166, align 16
  %167 = load i64, i64* %43, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %42)
  br label %300

; <label>:168:                                    ; preds = %47
  %169 = fcmp ugt float %22, %24
  br i1 %169, label %170, label %227

; <label>:170:                                    ; preds = %168
  call void @llvm.lifetime.start(i64 16, i8* nonnull %42)
  store <2 x i64> zeroinitializer, <2 x i64>* %7, align 16
  %171 = bitcast <2 x i64>* %7 to i32*
  store i32 0, i32* %171, align 16
  %172 = load i64, i64* %43, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %42)
  br label %294

; <label>:173:                                    ; preds = %47
  %174 = fcmp une float %22, %24
  br i1 %174, label %227, label %175

; <label>:175:                                    ; preds = %173
  call void @llvm.lifetime.start(i64 16, i8* nonnull %42)
  store <2 x i64> zeroinitializer, <2 x i64>* %7, align 16
  %176 = bitcast <2 x i64>* %7 to i32*
  store i32 0, i32* %176, align 16
  %177 = load i64, i64* %43, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %42)
  br label %288

; <label>:178:                                    ; preds = %47
  %179 = fcmp uge float %22, %24
  br i1 %179, label %227, label %180

; <label>:180:                                    ; preds = %178
  call void @llvm.lifetime.start(i64 16, i8* nonnull %42)
  store <2 x i64> zeroinitializer, <2 x i64>* %7, align 16
  %181 = bitcast <2 x i64>* %7 to i32*
  store i32 0, i32* %181, align 16
  %182 = load i64, i64* %43, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %42)
  br label %282

; <label>:183:                                    ; preds = %47
  %184 = fcmp ugt float %22, %24
  br i1 %184, label %227, label %185

; <label>:185:                                    ; preds = %183
  call void @llvm.lifetime.start(i64 16, i8* nonnull %42)
  store <2 x i64> zeroinitializer, <2 x i64>* %7, align 16
  %186 = bitcast <2 x i64>* %7 to i32*
  store i32 0, i32* %186, align 16
  %187 = load i64, i64* %43, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %42)
  br label %276

; <label>:188:                                    ; preds = %47
  br i1 %48, label %189, label %227

; <label>:189:                                    ; preds = %188
  call void @llvm.lifetime.start(i64 16, i8* nonnull %42)
  store <2 x i64> zeroinitializer, <2 x i64>* %7, align 16
  %190 = bitcast <2 x i64>* %7 to i32*
  store i32 0, i32* %190, align 16
  %191 = load i64, i64* %43, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %42)
  %192 = fcmp uno float %27, %30
  br i1 %192, label %402, label %395

; <label>:193:                                    ; preds = %47
  %194 = fcmp ueq float %22, %24
  br i1 %194, label %227, label %195

; <label>:195:                                    ; preds = %193
  call void @llvm.lifetime.start(i64 16, i8* nonnull %42)
  store <2 x i64> zeroinitializer, <2 x i64>* %7, align 16
  %196 = bitcast <2 x i64>* %7 to i32*
  store i32 0, i32* %196, align 16
  %197 = load i64, i64* %43, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %42)
  br label %269

; <label>:198:                                    ; preds = %47
  %199 = fcmp ult float %22, %24
  br i1 %199, label %227, label %200

; <label>:200:                                    ; preds = %198
  call void @llvm.lifetime.start(i64 16, i8* nonnull %42)
  store <2 x i64> zeroinitializer, <2 x i64>* %7, align 16
  %201 = bitcast <2 x i64>* %7 to i32*
  store i32 0, i32* %201, align 16
  %202 = load i64, i64* %43, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %42)
  br label %263

; <label>:203:                                    ; preds = %47
  %204 = fcmp ule float %22, %24
  br i1 %204, label %227, label %205

; <label>:205:                                    ; preds = %203
  call void @llvm.lifetime.start(i64 16, i8* nonnull %42)
  store <2 x i64> zeroinitializer, <2 x i64>* %7, align 16
  %206 = bitcast <2 x i64>* %7 to i32*
  store i32 0, i32* %206, align 16
  %207 = load i64, i64* %43, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %42)
  br label %257

; <label>:208:                                    ; preds = %47
  %209 = fcmp une float %22, %24
  %210 = and i1 %209, %49
  br i1 %210, label %227, label %211

; <label>:211:                                    ; preds = %208
  call void @llvm.lifetime.start(i64 16, i8* nonnull %42)
  store <2 x i64> zeroinitializer, <2 x i64>* %7, align 16
  %212 = bitcast <2 x i64>* %7 to i32*
  store i32 0, i32* %212, align 16
  %213 = load i64, i64* %43, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %42)
  %214 = fcmp ord float %27, %30
  br label %248

; <label>:215:                                    ; preds = %47
  %216 = fcmp ult float %22, %24
  br i1 %216, label %217, label %227

; <label>:217:                                    ; preds = %215
  call void @llvm.lifetime.start(i64 16, i8* nonnull %42)
  store <2 x i64> zeroinitializer, <2 x i64>* %7, align 16
  %218 = bitcast <2 x i64>* %7 to i32*
  store i32 0, i32* %218, align 16
  %219 = load i64, i64* %43, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %42)
  br label %242

; <label>:220:                                    ; preds = %47
  %221 = fcmp ogt float %22, %24
  br i1 %221, label %227, label %222

; <label>:222:                                    ; preds = %220
  call void @llvm.lifetime.start(i64 16, i8* nonnull %42)
  store <2 x i64> zeroinitializer, <2 x i64>* %7, align 16
  %223 = bitcast <2 x i64>* %7 to i32*
  store i32 0, i32* %223, align 16
  %224 = load i64, i64* %43, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %42)
  br label %236

; <label>:225:                                    ; preds = %610, %407, %228, %47
  unreachable

; <label>:226:                                    ; preds = %47, %47
  br i1 %48, label %227, label %228

; <label>:227:                                    ; preds = %226, %220, %215, %208, %203, %198, %193, %188, %183, %178, %173, %168, %163, %156, %149, %142, %137, %132, %127, %122, %117, %112, %107, %102, %95, %88, %47, %47
  br label %228

; <label>:228:                                    ; preds = %227, %226, %47, %47
  %229 = phi i32 [ -1, %227 ], [ 0, %226 ], [ 0, %47 ], [ 0, %47 ]
  call void @llvm.lifetime.start(i64 16, i8* nonnull %42)
  store <2 x i64> zeroinitializer, <2 x i64>* %7, align 16
  %230 = bitcast <2 x i64>* %7 to i32*
  store i32 %229, i32* %230, align 16
  %231 = load i64, i64* %43, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %42)
  %232 = fcmp uno float %27, %30
  %233 = xor i1 %232, true
  switch i8 %19, label %225 [
    i8 31, label %395
    i8 1, label %386
    i8 2, label %377
    i8 3, label %376
    i8 4, label %370
    i8 5, label %364
    i8 6, label %358
    i8 7, label %357
    i8 8, label %351
    i8 9, label %345
    i8 10, label %339
    i8 11, label %407
    i8 12, label %333
    i8 13, label %324
    i8 14, label %315
    i8 15, label %395
    i8 16, label %306
    i8 17, label %300
    i8 18, label %294
    i8 19, label %376
    i8 20, label %288
    i8 21, label %282
    i8 22, label %276
    i8 23, label %275
    i8 24, label %269
    i8 25, label %263
    i8 26, label %257
    i8 27, label %407
    i8 28, label %248
    i8 29, label %242
    i8 30, label %236
  ]

; <label>:234:                                    ; preds = %72, %68
  %235 = phi %struct.Memory* [ %71, %68 ], [ %0, %72 ]
  ret %struct.Memory* %235

; <label>:236:                                    ; preds = %228, %222
  %237 = phi i64 [ %224, %222 ], [ %231, %228 ]
  %238 = fcmp ogt float %27, %30
  br i1 %238, label %395, label %239

; <label>:239:                                    ; preds = %236
  call void @llvm.lifetime.start(i64 16, i8* nonnull %42)
  store i64 %237, i64* %43, align 16
  store i64 0, i64* %44, align 8
  %240 = getelementptr inbounds [4 x i32], [4 x i32]* %45, i64 0, i64 1
  store i32 0, i32* %240, align 4
  %241 = load i64, i64* %43, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %42)
  br label %414

; <label>:242:                                    ; preds = %228, %217
  %243 = phi i64 [ %219, %217 ], [ %231, %228 ]
  %244 = fcmp ult float %27, %30
  br i1 %244, label %245, label %395

; <label>:245:                                    ; preds = %242
  call void @llvm.lifetime.start(i64 16, i8* nonnull %42)
  store i64 %243, i64* %43, align 16
  store i64 0, i64* %44, align 8
  %246 = getelementptr inbounds [4 x i32], [4 x i32]* %45, i64 0, i64 1
  store i32 0, i32* %246, align 4
  %247 = load i64, i64* %43, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %42)
  br label %421

; <label>:248:                                    ; preds = %228, %211
  %249 = phi i1 [ %214, %211 ], [ %233, %228 ]
  %250 = phi i64 [ %213, %211 ], [ %231, %228 ]
  %251 = fcmp une float %27, %30
  %252 = and i1 %251, %249
  br i1 %252, label %395, label %253

; <label>:253:                                    ; preds = %248
  call void @llvm.lifetime.start(i64 16, i8* nonnull %42)
  store i64 %250, i64* %43, align 16
  store i64 0, i64* %44, align 8
  %254 = getelementptr inbounds [4 x i32], [4 x i32]* %45, i64 0, i64 1
  store i32 0, i32* %254, align 4
  %255 = load i64, i64* %43, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %42)
  %256 = fcmp ord float %32, %34
  br label %428

; <label>:257:                                    ; preds = %228, %205
  %258 = phi i64 [ %207, %205 ], [ %231, %228 ]
  %259 = fcmp ule float %27, %30
  br i1 %259, label %395, label %260

; <label>:260:                                    ; preds = %257
  call void @llvm.lifetime.start(i64 16, i8* nonnull %42)
  store i64 %258, i64* %43, align 16
  store i64 0, i64* %44, align 8
  %261 = getelementptr inbounds [4 x i32], [4 x i32]* %45, i64 0, i64 1
  store i32 0, i32* %261, align 4
  %262 = load i64, i64* %43, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %42)
  br label %438

; <label>:263:                                    ; preds = %228, %200
  %264 = phi i64 [ %202, %200 ], [ %231, %228 ]
  %265 = fcmp ult float %27, %30
  br i1 %265, label %395, label %266

; <label>:266:                                    ; preds = %263
  call void @llvm.lifetime.start(i64 16, i8* nonnull %42)
  store i64 %264, i64* %43, align 16
  store i64 0, i64* %44, align 8
  %267 = getelementptr inbounds [4 x i32], [4 x i32]* %45, i64 0, i64 1
  store i32 0, i32* %267, align 4
  %268 = load i64, i64* %43, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %42)
  br label %445

; <label>:269:                                    ; preds = %228, %195
  %270 = phi i64 [ %197, %195 ], [ %231, %228 ]
  %271 = fcmp ueq float %27, %30
  br i1 %271, label %395, label %272

; <label>:272:                                    ; preds = %269
  call void @llvm.lifetime.start(i64 16, i8* nonnull %42)
  store i64 %270, i64* %43, align 16
  store i64 0, i64* %44, align 8
  %273 = getelementptr inbounds [4 x i32], [4 x i32]* %45, i64 0, i64 1
  store i32 0, i32* %273, align 4
  %274 = load i64, i64* %43, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %42)
  br label %452

; <label>:275:                                    ; preds = %228
  br i1 %232, label %402, label %395

; <label>:276:                                    ; preds = %228, %185
  %277 = phi i64 [ %187, %185 ], [ %231, %228 ]
  %278 = fcmp ugt float %27, %30
  br i1 %278, label %395, label %279

; <label>:279:                                    ; preds = %276
  call void @llvm.lifetime.start(i64 16, i8* nonnull %42)
  store i64 %277, i64* %43, align 16
  store i64 0, i64* %44, align 8
  %280 = getelementptr inbounds [4 x i32], [4 x i32]* %45, i64 0, i64 1
  store i32 0, i32* %280, align 4
  %281 = load i64, i64* %43, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %42)
  br label %460

; <label>:282:                                    ; preds = %228, %180
  %283 = phi i64 [ %182, %180 ], [ %231, %228 ]
  %284 = fcmp uge float %27, %30
  br i1 %284, label %395, label %285

; <label>:285:                                    ; preds = %282
  call void @llvm.lifetime.start(i64 16, i8* nonnull %42)
  store i64 %283, i64* %43, align 16
  store i64 0, i64* %44, align 8
  %286 = getelementptr inbounds [4 x i32], [4 x i32]* %45, i64 0, i64 1
  store i32 0, i32* %286, align 4
  %287 = load i64, i64* %43, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %42)
  br label %467

; <label>:288:                                    ; preds = %228, %175
  %289 = phi i64 [ %177, %175 ], [ %231, %228 ]
  %290 = fcmp une float %27, %30
  br i1 %290, label %395, label %291

; <label>:291:                                    ; preds = %288
  call void @llvm.lifetime.start(i64 16, i8* nonnull %42)
  store i64 %289, i64* %43, align 16
  store i64 0, i64* %44, align 8
  %292 = getelementptr inbounds [4 x i32], [4 x i32]* %45, i64 0, i64 1
  store i32 0, i32* %292, align 4
  %293 = load i64, i64* %43, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %42)
  br label %474

; <label>:294:                                    ; preds = %228, %170
  %295 = phi i64 [ %172, %170 ], [ %231, %228 ]
  %296 = fcmp ugt float %27, %30
  br i1 %296, label %297, label %395

; <label>:297:                                    ; preds = %294
  call void @llvm.lifetime.start(i64 16, i8* nonnull %42)
  store i64 %295, i64* %43, align 16
  store i64 0, i64* %44, align 8
  %298 = getelementptr inbounds [4 x i32], [4 x i32]* %45, i64 0, i64 1
  store i32 0, i32* %298, align 4
  %299 = load i64, i64* %43, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %42)
  br label %481

; <label>:300:                                    ; preds = %228, %165
  %301 = phi i64 [ %167, %165 ], [ %231, %228 ]
  %302 = fcmp olt float %27, %30
  br i1 %302, label %395, label %303

; <label>:303:                                    ; preds = %300
  call void @llvm.lifetime.start(i64 16, i8* nonnull %42)
  store i64 %301, i64* %43, align 16
  store i64 0, i64* %44, align 8
  %304 = getelementptr inbounds [4 x i32], [4 x i32]* %45, i64 0, i64 1
  store i32 0, i32* %304, align 4
  %305 = load i64, i64* %43, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %42)
  br label %488

; <label>:306:                                    ; preds = %228, %159
  %307 = phi i1 [ %162, %159 ], [ %233, %228 ]
  %308 = phi i64 [ %161, %159 ], [ %231, %228 ]
  %309 = fcmp oeq float %27, %30
  %310 = and i1 %309, %307
  br i1 %310, label %395, label %311

; <label>:311:                                    ; preds = %306
  call void @llvm.lifetime.start(i64 16, i8* nonnull %42)
  store i64 %308, i64* %43, align 16
  store i64 0, i64* %44, align 8
  %312 = getelementptr inbounds [4 x i32], [4 x i32]* %45, i64 0, i64 1
  store i32 0, i32* %312, align 4
  %313 = load i64, i64* %43, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %42)
  %314 = fcmp ord float %32, %34
  br label %495

; <label>:315:                                    ; preds = %228, %152
  %316 = phi i1 [ %155, %152 ], [ %233, %228 ]
  %317 = phi i64 [ %154, %152 ], [ %231, %228 ]
  %318 = fcmp ogt float %27, %30
  %319 = and i1 %318, %316
  br i1 %319, label %395, label %320

; <label>:320:                                    ; preds = %315
  call void @llvm.lifetime.start(i64 16, i8* nonnull %42)
  store i64 %317, i64* %43, align 16
  store i64 0, i64* %44, align 8
  %321 = getelementptr inbounds [4 x i32], [4 x i32]* %45, i64 0, i64 1
  store i32 0, i32* %321, align 4
  %322 = load i64, i64* %43, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %42)
  %323 = fcmp ord float %32, %34
  br label %505

; <label>:324:                                    ; preds = %228, %145
  %325 = phi i1 [ %148, %145 ], [ %233, %228 ]
  %326 = phi i64 [ %147, %145 ], [ %231, %228 ]
  %327 = fcmp oge float %27, %30
  %328 = and i1 %327, %325
  br i1 %328, label %395, label %329

; <label>:329:                                    ; preds = %324
  call void @llvm.lifetime.start(i64 16, i8* nonnull %42)
  store i64 %326, i64* %43, align 16
  store i64 0, i64* %44, align 8
  %330 = getelementptr inbounds [4 x i32], [4 x i32]* %45, i64 0, i64 1
  store i32 0, i32* %330, align 4
  %331 = load i64, i64* %43, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %42)
  %332 = fcmp ord float %32, %34
  br label %515

; <label>:333:                                    ; preds = %228, %139
  %334 = phi i64 [ %141, %139 ], [ %231, %228 ]
  %335 = fcmp ueq float %27, %30
  br i1 %335, label %336, label %395

; <label>:336:                                    ; preds = %333
  call void @llvm.lifetime.start(i64 16, i8* nonnull %42)
  store i64 %334, i64* %43, align 16
  store i64 0, i64* %44, align 8
  %337 = getelementptr inbounds [4 x i32], [4 x i32]* %45, i64 0, i64 1
  store i32 0, i32* %337, align 4
  %338 = load i64, i64* %43, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %42)
  br label %525

; <label>:339:                                    ; preds = %228, %134
  %340 = phi i64 [ %136, %134 ], [ %231, %228 ]
  %341 = fcmp ule float %27, %30
  br i1 %341, label %395, label %342

; <label>:342:                                    ; preds = %339
  call void @llvm.lifetime.start(i64 16, i8* nonnull %42)
  store i64 %340, i64* %43, align 16
  store i64 0, i64* %44, align 8
  %343 = getelementptr inbounds [4 x i32], [4 x i32]* %45, i64 0, i64 1
  store i32 0, i32* %343, align 4
  %344 = load i64, i64* %43, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %42)
  br label %532

; <label>:345:                                    ; preds = %228, %129
  %346 = phi i64 [ %131, %129 ], [ %231, %228 ]
  %347 = fcmp ult float %27, %30
  br i1 %347, label %395, label %348

; <label>:348:                                    ; preds = %345
  call void @llvm.lifetime.start(i64 16, i8* nonnull %42)
  store i64 %346, i64* %43, align 16
  store i64 0, i64* %44, align 8
  %349 = getelementptr inbounds [4 x i32], [4 x i32]* %45, i64 0, i64 1
  store i32 0, i32* %349, align 4
  %350 = load i64, i64* %43, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %42)
  br label %539

; <label>:351:                                    ; preds = %228, %124
  %352 = phi i64 [ %126, %124 ], [ %231, %228 ]
  %353 = fcmp ueq float %27, %30
  br i1 %353, label %395, label %354

; <label>:354:                                    ; preds = %351
  call void @llvm.lifetime.start(i64 16, i8* nonnull %42)
  store i64 %352, i64* %43, align 16
  store i64 0, i64* %44, align 8
  %355 = getelementptr inbounds [4 x i32], [4 x i32]* %45, i64 0, i64 1
  store i32 0, i32* %355, align 4
  %356 = load i64, i64* %43, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %42)
  br label %546

; <label>:357:                                    ; preds = %228
  br i1 %232, label %397, label %395

; <label>:358:                                    ; preds = %228, %114
  %359 = phi i64 [ %116, %114 ], [ %231, %228 ]
  %360 = fcmp ugt float %27, %30
  br i1 %360, label %395, label %361

; <label>:361:                                    ; preds = %358
  call void @llvm.lifetime.start(i64 16, i8* nonnull %42)
  store i64 %359, i64* %43, align 16
  store i64 0, i64* %44, align 8
  %362 = getelementptr inbounds [4 x i32], [4 x i32]* %45, i64 0, i64 1
  store i32 0, i32* %362, align 4
  %363 = load i64, i64* %43, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %42)
  br label %554

; <label>:364:                                    ; preds = %228, %109
  %365 = phi i64 [ %111, %109 ], [ %231, %228 ]
  %366 = fcmp uge float %27, %30
  br i1 %366, label %395, label %367

; <label>:367:                                    ; preds = %364
  call void @llvm.lifetime.start(i64 16, i8* nonnull %42)
  store i64 %365, i64* %43, align 16
  store i64 0, i64* %44, align 8
  %368 = getelementptr inbounds [4 x i32], [4 x i32]* %45, i64 0, i64 1
  store i32 0, i32* %368, align 4
  %369 = load i64, i64* %43, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %42)
  br label %561

; <label>:370:                                    ; preds = %228, %104
  %371 = phi i64 [ %106, %104 ], [ %231, %228 ]
  %372 = fcmp une float %27, %30
  br i1 %372, label %395, label %373

; <label>:373:                                    ; preds = %370
  call void @llvm.lifetime.start(i64 16, i8* nonnull %42)
  store i64 %371, i64* %43, align 16
  store i64 0, i64* %44, align 8
  %374 = getelementptr inbounds [4 x i32], [4 x i32]* %45, i64 0, i64 1
  store i32 0, i32* %374, align 4
  %375 = load i64, i64* %43, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %42)
  br label %568

; <label>:376:                                    ; preds = %228, %228
  br i1 %232, label %395, label %407

; <label>:377:                                    ; preds = %228, %98
  %378 = phi i1 [ %101, %98 ], [ %233, %228 ]
  %379 = phi i64 [ %100, %98 ], [ %231, %228 ]
  %380 = fcmp ole float %27, %30
  %381 = and i1 %380, %378
  br i1 %381, label %395, label %382

; <label>:382:                                    ; preds = %377
  call void @llvm.lifetime.start(i64 16, i8* nonnull %42)
  store i64 %379, i64* %43, align 16
  store i64 0, i64* %44, align 8
  %383 = getelementptr inbounds [4 x i32], [4 x i32]* %45, i64 0, i64 1
  store i32 0, i32* %383, align 4
  %384 = load i64, i64* %43, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %42)
  %385 = fcmp ord float %32, %34
  br label %576

; <label>:386:                                    ; preds = %228, %91
  %387 = phi i1 [ %94, %91 ], [ %233, %228 ]
  %388 = phi i64 [ %93, %91 ], [ %231, %228 ]
  %389 = fcmp olt float %27, %30
  %390 = and i1 %389, %387
  br i1 %390, label %395, label %391

; <label>:391:                                    ; preds = %386
  call void @llvm.lifetime.start(i64 16, i8* nonnull %42)
  store i64 %388, i64* %43, align 16
  store i64 0, i64* %44, align 8
  %392 = getelementptr inbounds [4 x i32], [4 x i32]* %45, i64 0, i64 1
  store i32 0, i32* %392, align 4
  %393 = load i64, i64* %43, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %42)
  %394 = fcmp ord float %32, %34
  br label %586

; <label>:395:                                    ; preds = %386, %377, %376, %370, %364, %358, %357, %351, %345, %339, %333, %324, %315, %306, %300, %294, %288, %282, %276, %275, %269, %263, %257, %248, %242, %236, %228, %228, %189, %118
  %396 = phi i64 [ %388, %386 ], [ %379, %377 ], [ %231, %376 ], [ %371, %370 ], [ %365, %364 ], [ %359, %358 ], [ %231, %357 ], [ %352, %351 ], [ %346, %345 ], [ %340, %339 ], [ %334, %333 ], [ %326, %324 ], [ %317, %315 ], [ %308, %306 ], [ %301, %300 ], [ %295, %294 ], [ %289, %288 ], [ %283, %282 ], [ %277, %276 ], [ %231, %275 ], [ %270, %269 ], [ %264, %263 ], [ %258, %257 ], [ %250, %248 ], [ %243, %242 ], [ %237, %236 ], [ %231, %228 ], [ %231, %228 ], [ %191, %189 ], [ %120, %118 ]
  br label %407

; <label>:397:                                    ; preds = %357, %118
  %398 = phi i64 [ %120, %118 ], [ %231, %357 ]
  call void @llvm.lifetime.start(i64 16, i8* nonnull %42)
  store i64 %398, i64* %43, align 16
  store i64 0, i64* %44, align 8
  %399 = getelementptr inbounds [4 x i32], [4 x i32]* %45, i64 0, i64 1
  store i32 0, i32* %399, align 4
  %400 = load i64, i64* %43, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %42)
  %401 = fcmp uno float %32, %34
  br i1 %401, label %598, label %596

; <label>:402:                                    ; preds = %275, %189
  %403 = phi i64 [ %191, %189 ], [ %231, %275 ]
  call void @llvm.lifetime.start(i64 16, i8* nonnull %42)
  store i64 %403, i64* %43, align 16
  store i64 0, i64* %44, align 8
  %404 = getelementptr inbounds [4 x i32], [4 x i32]* %45, i64 0, i64 1
  store i32 0, i32* %404, align 4
  %405 = load i64, i64* %43, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %42)
  %406 = fcmp uno float %32, %34
  br i1 %406, label %604, label %596

; <label>:407:                                    ; preds = %395, %376, %228, %228
  %408 = phi i64 [ %396, %395 ], [ %231, %376 ], [ %231, %228 ], [ %231, %228 ]
  %409 = phi i32 [ -1, %395 ], [ 0, %376 ], [ 0, %228 ], [ 0, %228 ]
  call void @llvm.lifetime.start(i64 16, i8* nonnull %42)
  store i64 %408, i64* %43, align 16
  store i64 0, i64* %44, align 8
  %410 = getelementptr inbounds [4 x i32], [4 x i32]* %45, i64 0, i64 1
  store i32 %409, i32* %410, align 4
  %411 = load i64, i64* %43, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %42)
  %412 = fcmp uno float %32, %34
  %413 = xor i1 %412, true
  switch i8 %19, label %225 [
    i8 31, label %596
    i8 1, label %586
    i8 2, label %576
    i8 3, label %575
    i8 4, label %568
    i8 5, label %561
    i8 6, label %554
    i8 7, label %553
    i8 8, label %546
    i8 9, label %539
    i8 10, label %532
    i8 11, label %610
    i8 12, label %525
    i8 13, label %515
    i8 14, label %505
    i8 15, label %596
    i8 16, label %495
    i8 17, label %488
    i8 18, label %481
    i8 19, label %575
    i8 20, label %474
    i8 21, label %467
    i8 22, label %460
    i8 23, label %459
    i8 24, label %452
    i8 25, label %445
    i8 26, label %438
    i8 27, label %610
    i8 28, label %428
    i8 29, label %421
    i8 30, label %414
  ]

; <label>:414:                                    ; preds = %407, %239
  %415 = phi i64 [ %241, %239 ], [ %411, %407 ]
  %416 = fcmp ogt float %32, %34
  br i1 %416, label %596, label %417

; <label>:417:                                    ; preds = %414
  call void @llvm.lifetime.start(i64 16, i8* nonnull %42)
  store i64 %415, i64* %43, align 16
  store i64 0, i64* %44, align 8
  %418 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %8, i64 0, i32 1
  %419 = bitcast i64* %418 to i32*
  store i32 0, i32* %419, align 8
  %420 = load i64, i64* %44, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %42)
  br label %618

; <label>:421:                                    ; preds = %407, %245
  %422 = phi i64 [ %247, %245 ], [ %411, %407 ]
  %423 = fcmp ult float %32, %34
  br i1 %423, label %424, label %596

; <label>:424:                                    ; preds = %421
  call void @llvm.lifetime.start(i64 16, i8* nonnull %42)
  store i64 %422, i64* %43, align 16
  store i64 0, i64* %44, align 8
  %425 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %8, i64 0, i32 1
  %426 = bitcast i64* %425 to i32*
  store i32 0, i32* %426, align 8
  %427 = load i64, i64* %44, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %42)
  br label %622

; <label>:428:                                    ; preds = %407, %253
  %429 = phi i1 [ %256, %253 ], [ %413, %407 ]
  %430 = phi i64 [ %255, %253 ], [ %411, %407 ]
  %431 = fcmp une float %32, %34
  %432 = and i1 %431, %429
  br i1 %432, label %596, label %433

; <label>:433:                                    ; preds = %428
  call void @llvm.lifetime.start(i64 16, i8* nonnull %42)
  store i64 %430, i64* %43, align 16
  store i64 0, i64* %44, align 8
  %434 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %8, i64 0, i32 1
  %435 = bitcast i64* %434 to i32*
  store i32 0, i32* %435, align 8
  %436 = load i64, i64* %44, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %42)
  %437 = fcmp ord float %37, %40
  br label %626

; <label>:438:                                    ; preds = %407, %260
  %439 = phi i64 [ %262, %260 ], [ %411, %407 ]
  %440 = fcmp ule float %32, %34
  br i1 %440, label %596, label %441

; <label>:441:                                    ; preds = %438
  call void @llvm.lifetime.start(i64 16, i8* nonnull %42)
  store i64 %439, i64* %43, align 16
  store i64 0, i64* %44, align 8
  %442 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %8, i64 0, i32 1
  %443 = bitcast i64* %442 to i32*
  store i32 0, i32* %443, align 8
  %444 = load i64, i64* %44, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %42)
  br label %632

; <label>:445:                                    ; preds = %407, %266
  %446 = phi i64 [ %268, %266 ], [ %411, %407 ]
  %447 = fcmp ult float %32, %34
  br i1 %447, label %596, label %448

; <label>:448:                                    ; preds = %445
  call void @llvm.lifetime.start(i64 16, i8* nonnull %42)
  store i64 %446, i64* %43, align 16
  store i64 0, i64* %44, align 8
  %449 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %8, i64 0, i32 1
  %450 = bitcast i64* %449 to i32*
  store i32 0, i32* %450, align 8
  %451 = load i64, i64* %44, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %42)
  br label %636

; <label>:452:                                    ; preds = %407, %272
  %453 = phi i64 [ %274, %272 ], [ %411, %407 ]
  %454 = fcmp ueq float %32, %34
  br i1 %454, label %596, label %455

; <label>:455:                                    ; preds = %452
  call void @llvm.lifetime.start(i64 16, i8* nonnull %42)
  store i64 %453, i64* %43, align 16
  store i64 0, i64* %44, align 8
  %456 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %8, i64 0, i32 1
  %457 = bitcast i64* %456 to i32*
  store i32 0, i32* %457, align 8
  %458 = load i64, i64* %44, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %42)
  br label %640

; <label>:459:                                    ; preds = %407
  br i1 %412, label %604, label %596

; <label>:460:                                    ; preds = %407, %279
  %461 = phi i64 [ %281, %279 ], [ %411, %407 ]
  %462 = fcmp ugt float %32, %34
  br i1 %462, label %596, label %463

; <label>:463:                                    ; preds = %460
  call void @llvm.lifetime.start(i64 16, i8* nonnull %42)
  store i64 %461, i64* %43, align 16
  store i64 0, i64* %44, align 8
  %464 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %8, i64 0, i32 1
  %465 = bitcast i64* %464 to i32*
  store i32 0, i32* %465, align 8
  %466 = load i64, i64* %44, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %42)
  br label %645

; <label>:467:                                    ; preds = %407, %285
  %468 = phi i64 [ %287, %285 ], [ %411, %407 ]
  %469 = fcmp uge float %32, %34
  br i1 %469, label %596, label %470

; <label>:470:                                    ; preds = %467
  call void @llvm.lifetime.start(i64 16, i8* nonnull %42)
  store i64 %468, i64* %43, align 16
  store i64 0, i64* %44, align 8
  %471 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %8, i64 0, i32 1
  %472 = bitcast i64* %471 to i32*
  store i32 0, i32* %472, align 8
  %473 = load i64, i64* %44, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %42)
  br label %649

; <label>:474:                                    ; preds = %407, %291
  %475 = phi i64 [ %293, %291 ], [ %411, %407 ]
  %476 = fcmp une float %32, %34
  br i1 %476, label %596, label %477

; <label>:477:                                    ; preds = %474
  call void @llvm.lifetime.start(i64 16, i8* nonnull %42)
  store i64 %475, i64* %43, align 16
  store i64 0, i64* %44, align 8
  %478 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %8, i64 0, i32 1
  %479 = bitcast i64* %478 to i32*
  store i32 0, i32* %479, align 8
  %480 = load i64, i64* %44, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %42)
  br label %653

; <label>:481:                                    ; preds = %407, %297
  %482 = phi i64 [ %299, %297 ], [ %411, %407 ]
  %483 = fcmp ugt float %32, %34
  br i1 %483, label %484, label %596

; <label>:484:                                    ; preds = %481
  call void @llvm.lifetime.start(i64 16, i8* nonnull %42)
  store i64 %482, i64* %43, align 16
  store i64 0, i64* %44, align 8
  %485 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %8, i64 0, i32 1
  %486 = bitcast i64* %485 to i32*
  store i32 0, i32* %486, align 8
  %487 = load i64, i64* %44, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %42)
  br label %657

; <label>:488:                                    ; preds = %407, %303
  %489 = phi i64 [ %305, %303 ], [ %411, %407 ]
  %490 = fcmp olt float %32, %34
  br i1 %490, label %596, label %491

; <label>:491:                                    ; preds = %488
  call void @llvm.lifetime.start(i64 16, i8* nonnull %42)
  store i64 %489, i64* %43, align 16
  store i64 0, i64* %44, align 8
  %492 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %8, i64 0, i32 1
  %493 = bitcast i64* %492 to i32*
  store i32 0, i32* %493, align 8
  %494 = load i64, i64* %44, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %42)
  br label %661

; <label>:495:                                    ; preds = %407, %311
  %496 = phi i1 [ %314, %311 ], [ %413, %407 ]
  %497 = phi i64 [ %313, %311 ], [ %411, %407 ]
  %498 = fcmp oeq float %32, %34
  %499 = and i1 %498, %496
  br i1 %499, label %596, label %500

; <label>:500:                                    ; preds = %495
  call void @llvm.lifetime.start(i64 16, i8* nonnull %42)
  store i64 %497, i64* %43, align 16
  store i64 0, i64* %44, align 8
  %501 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %8, i64 0, i32 1
  %502 = bitcast i64* %501 to i32*
  store i32 0, i32* %502, align 8
  %503 = load i64, i64* %44, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %42)
  %504 = fcmp ord float %37, %40
  br label %665

; <label>:505:                                    ; preds = %407, %320
  %506 = phi i1 [ %323, %320 ], [ %413, %407 ]
  %507 = phi i64 [ %322, %320 ], [ %411, %407 ]
  %508 = fcmp ogt float %32, %34
  %509 = and i1 %508, %506
  br i1 %509, label %596, label %510

; <label>:510:                                    ; preds = %505
  call void @llvm.lifetime.start(i64 16, i8* nonnull %42)
  store i64 %507, i64* %43, align 16
  store i64 0, i64* %44, align 8
  %511 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %8, i64 0, i32 1
  %512 = bitcast i64* %511 to i32*
  store i32 0, i32* %512, align 8
  %513 = load i64, i64* %44, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %42)
  %514 = fcmp ord float %37, %40
  br label %671

; <label>:515:                                    ; preds = %407, %329
  %516 = phi i1 [ %332, %329 ], [ %413, %407 ]
  %517 = phi i64 [ %331, %329 ], [ %411, %407 ]
  %518 = fcmp oge float %32, %34
  %519 = and i1 %518, %516
  br i1 %519, label %596, label %520

; <label>:520:                                    ; preds = %515
  call void @llvm.lifetime.start(i64 16, i8* nonnull %42)
  store i64 %517, i64* %43, align 16
  store i64 0, i64* %44, align 8
  %521 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %8, i64 0, i32 1
  %522 = bitcast i64* %521 to i32*
  store i32 0, i32* %522, align 8
  %523 = load i64, i64* %44, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %42)
  %524 = fcmp ord float %37, %40
  br label %677

; <label>:525:                                    ; preds = %407, %336
  %526 = phi i64 [ %338, %336 ], [ %411, %407 ]
  %527 = fcmp ueq float %32, %34
  br i1 %527, label %528, label %596

; <label>:528:                                    ; preds = %525
  call void @llvm.lifetime.start(i64 16, i8* nonnull %42)
  store i64 %526, i64* %43, align 16
  store i64 0, i64* %44, align 8
  %529 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %8, i64 0, i32 1
  %530 = bitcast i64* %529 to i32*
  store i32 0, i32* %530, align 8
  %531 = load i64, i64* %44, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %42)
  br label %683

; <label>:532:                                    ; preds = %407, %342
  %533 = phi i64 [ %344, %342 ], [ %411, %407 ]
  %534 = fcmp ule float %32, %34
  br i1 %534, label %596, label %535

; <label>:535:                                    ; preds = %532
  call void @llvm.lifetime.start(i64 16, i8* nonnull %42)
  store i64 %533, i64* %43, align 16
  store i64 0, i64* %44, align 8
  %536 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %8, i64 0, i32 1
  %537 = bitcast i64* %536 to i32*
  store i32 0, i32* %537, align 8
  %538 = load i64, i64* %44, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %42)
  br label %687

; <label>:539:                                    ; preds = %407, %348
  %540 = phi i64 [ %350, %348 ], [ %411, %407 ]
  %541 = fcmp ult float %32, %34
  br i1 %541, label %596, label %542

; <label>:542:                                    ; preds = %539
  call void @llvm.lifetime.start(i64 16, i8* nonnull %42)
  store i64 %540, i64* %43, align 16
  store i64 0, i64* %44, align 8
  %543 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %8, i64 0, i32 1
  %544 = bitcast i64* %543 to i32*
  store i32 0, i32* %544, align 8
  %545 = load i64, i64* %44, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %42)
  br label %691

; <label>:546:                                    ; preds = %407, %354
  %547 = phi i64 [ %356, %354 ], [ %411, %407 ]
  %548 = fcmp ueq float %32, %34
  br i1 %548, label %596, label %549

; <label>:549:                                    ; preds = %546
  call void @llvm.lifetime.start(i64 16, i8* nonnull %42)
  store i64 %547, i64* %43, align 16
  store i64 0, i64* %44, align 8
  %550 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %8, i64 0, i32 1
  %551 = bitcast i64* %550 to i32*
  store i32 0, i32* %551, align 8
  %552 = load i64, i64* %44, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %42)
  br label %695

; <label>:553:                                    ; preds = %407
  br i1 %412, label %598, label %596

; <label>:554:                                    ; preds = %407, %361
  %555 = phi i64 [ %363, %361 ], [ %411, %407 ]
  %556 = fcmp ugt float %32, %34
  br i1 %556, label %596, label %557

; <label>:557:                                    ; preds = %554
  call void @llvm.lifetime.start(i64 16, i8* nonnull %42)
  store i64 %555, i64* %43, align 16
  store i64 0, i64* %44, align 8
  %558 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %8, i64 0, i32 1
  %559 = bitcast i64* %558 to i32*
  store i32 0, i32* %559, align 8
  %560 = load i64, i64* %44, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %42)
  br label %700

; <label>:561:                                    ; preds = %407, %367
  %562 = phi i64 [ %369, %367 ], [ %411, %407 ]
  %563 = fcmp uge float %32, %34
  br i1 %563, label %596, label %564

; <label>:564:                                    ; preds = %561
  call void @llvm.lifetime.start(i64 16, i8* nonnull %42)
  store i64 %562, i64* %43, align 16
  store i64 0, i64* %44, align 8
  %565 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %8, i64 0, i32 1
  %566 = bitcast i64* %565 to i32*
  store i32 0, i32* %566, align 8
  %567 = load i64, i64* %44, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %42)
  br label %704

; <label>:568:                                    ; preds = %407, %373
  %569 = phi i64 [ %375, %373 ], [ %411, %407 ]
  %570 = fcmp une float %32, %34
  br i1 %570, label %596, label %571

; <label>:571:                                    ; preds = %568
  call void @llvm.lifetime.start(i64 16, i8* nonnull %42)
  store i64 %569, i64* %43, align 16
  store i64 0, i64* %44, align 8
  %572 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %8, i64 0, i32 1
  %573 = bitcast i64* %572 to i32*
  store i32 0, i32* %573, align 8
  %574 = load i64, i64* %44, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %42)
  br label %708

; <label>:575:                                    ; preds = %407, %407
  br i1 %412, label %596, label %610

; <label>:576:                                    ; preds = %407, %382
  %577 = phi i1 [ %385, %382 ], [ %413, %407 ]
  %578 = phi i64 [ %384, %382 ], [ %411, %407 ]
  %579 = fcmp ole float %32, %34
  %580 = and i1 %579, %577
  br i1 %580, label %596, label %581

; <label>:581:                                    ; preds = %576
  call void @llvm.lifetime.start(i64 16, i8* nonnull %42)
  store i64 %578, i64* %43, align 16
  store i64 0, i64* %44, align 8
  %582 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %8, i64 0, i32 1
  %583 = bitcast i64* %582 to i32*
  store i32 0, i32* %583, align 8
  %584 = load i64, i64* %44, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %42)
  %585 = fcmp ord float %37, %40
  br label %713

; <label>:586:                                    ; preds = %407, %391
  %587 = phi i1 [ %394, %391 ], [ %413, %407 ]
  %588 = phi i64 [ %393, %391 ], [ %411, %407 ]
  %589 = fcmp olt float %32, %34
  %590 = and i1 %589, %587
  br i1 %590, label %596, label %591

; <label>:591:                                    ; preds = %586
  call void @llvm.lifetime.start(i64 16, i8* nonnull %42)
  store i64 %588, i64* %43, align 16
  store i64 0, i64* %44, align 8
  %592 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %8, i64 0, i32 1
  %593 = bitcast i64* %592 to i32*
  store i32 0, i32* %593, align 8
  %594 = load i64, i64* %44, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %42)
  %595 = fcmp ord float %37, %40
  br label %719

; <label>:596:                                    ; preds = %586, %576, %575, %568, %561, %554, %553, %546, %539, %532, %525, %515, %505, %495, %488, %481, %474, %467, %460, %459, %452, %445, %438, %428, %421, %414, %407, %407, %402, %397
  %597 = phi i64 [ %588, %586 ], [ %578, %576 ], [ %411, %575 ], [ %569, %568 ], [ %562, %561 ], [ %555, %554 ], [ %411, %553 ], [ %547, %546 ], [ %540, %539 ], [ %533, %532 ], [ %526, %525 ], [ %517, %515 ], [ %507, %505 ], [ %497, %495 ], [ %489, %488 ], [ %482, %481 ], [ %475, %474 ], [ %468, %467 ], [ %461, %460 ], [ %411, %459 ], [ %453, %452 ], [ %446, %445 ], [ %439, %438 ], [ %430, %428 ], [ %422, %421 ], [ %415, %414 ], [ %411, %407 ], [ %411, %407 ], [ %405, %402 ], [ %400, %397 ]
  br label %610

; <label>:598:                                    ; preds = %553, %397
  %599 = phi i64 [ %400, %397 ], [ %411, %553 ]
  call void @llvm.lifetime.start(i64 16, i8* nonnull %42)
  store i64 %599, i64* %43, align 16
  store i64 0, i64* %44, align 8
  %600 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %8, i64 0, i32 1
  %601 = bitcast i64* %600 to i32*
  store i32 0, i32* %601, align 8
  %602 = load i64, i64* %44, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %42)
  %603 = fcmp uno float %37, %40
  br i1 %603, label %728, label %725

; <label>:604:                                    ; preds = %459, %402
  %605 = phi i64 [ %405, %402 ], [ %411, %459 ]
  call void @llvm.lifetime.start(i64 16, i8* nonnull %42)
  store i64 %605, i64* %43, align 16
  store i64 0, i64* %44, align 8
  %606 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %8, i64 0, i32 1
  %607 = bitcast i64* %606 to i32*
  store i32 0, i32* %607, align 8
  %608 = load i64, i64* %44, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %42)
  %609 = fcmp uno float %37, %40
  br i1 %609, label %728, label %725

; <label>:610:                                    ; preds = %596, %575, %407, %407
  %611 = phi i64 [ %597, %596 ], [ %411, %575 ], [ %411, %407 ], [ %411, %407 ]
  %612 = phi i32 [ -1, %596 ], [ 0, %575 ], [ 0, %407 ], [ 0, %407 ]
  call void @llvm.lifetime.start(i64 16, i8* nonnull %42)
  store i64 %611, i64* %43, align 16
  store i64 0, i64* %44, align 8
  %613 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %8, i64 0, i32 1
  %614 = bitcast i64* %613 to i32*
  store i32 %612, i32* %614, align 8
  %615 = load i64, i64* %44, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %42)
  %616 = fcmp uno float %37, %40
  %617 = xor i1 %616, true
  switch i8 %19, label %225 [
    i8 31, label %725
    i8 1, label %719
    i8 2, label %713
    i8 3, label %712
    i8 4, label %708
    i8 5, label %704
    i8 6, label %700
    i8 7, label %699
    i8 8, label %695
    i8 9, label %691
    i8 10, label %687
    i8 11, label %728
    i8 12, label %683
    i8 13, label %677
    i8 14, label %671
    i8 15, label %725
    i8 16, label %665
    i8 17, label %661
    i8 18, label %657
    i8 19, label %712
    i8 20, label %653
    i8 21, label %649
    i8 22, label %645
    i8 23, label %644
    i8 24, label %640
    i8 25, label %636
    i8 26, label %632
    i8 27, label %728
    i8 28, label %626
    i8 29, label %622
    i8 30, label %618
  ]

; <label>:618:                                    ; preds = %610, %417
  %619 = phi i64 [ %420, %417 ], [ %615, %610 ]
  %620 = phi i64 [ %415, %417 ], [ %611, %610 ]
  %621 = fcmp ogt float %37, %40
  br i1 %621, label %725, label %728

; <label>:622:                                    ; preds = %610, %424
  %623 = phi i64 [ %427, %424 ], [ %615, %610 ]
  %624 = phi i64 [ %422, %424 ], [ %611, %610 ]
  %625 = fcmp ult float %37, %40
  br i1 %625, label %728, label %725

; <label>:626:                                    ; preds = %610, %433
  %627 = phi i1 [ %437, %433 ], [ %617, %610 ]
  %628 = phi i64 [ %436, %433 ], [ %615, %610 ]
  %629 = phi i64 [ %430, %433 ], [ %611, %610 ]
  %630 = fcmp une float %37, %40
  %631 = and i1 %630, %627
  br i1 %631, label %725, label %728

; <label>:632:                                    ; preds = %610, %441
  %633 = phi i64 [ %444, %441 ], [ %615, %610 ]
  %634 = phi i64 [ %439, %441 ], [ %611, %610 ]
  %635 = fcmp ule float %37, %40
  br i1 %635, label %725, label %728

; <label>:636:                                    ; preds = %610, %448
  %637 = phi i64 [ %451, %448 ], [ %615, %610 ]
  %638 = phi i64 [ %446, %448 ], [ %611, %610 ]
  %639 = fcmp ult float %37, %40
  br i1 %639, label %725, label %728

; <label>:640:                                    ; preds = %610, %455
  %641 = phi i64 [ %458, %455 ], [ %615, %610 ]
  %642 = phi i64 [ %453, %455 ], [ %611, %610 ]
  %643 = fcmp ueq float %37, %40
  br i1 %643, label %725, label %728

; <label>:644:                                    ; preds = %610
  br i1 %616, label %728, label %725

; <label>:645:                                    ; preds = %610, %463
  %646 = phi i64 [ %466, %463 ], [ %615, %610 ]
  %647 = phi i64 [ %461, %463 ], [ %611, %610 ]
  %648 = fcmp ugt float %37, %40
  br i1 %648, label %725, label %728

; <label>:649:                                    ; preds = %610, %470
  %650 = phi i64 [ %473, %470 ], [ %615, %610 ]
  %651 = phi i64 [ %468, %470 ], [ %611, %610 ]
  %652 = fcmp uge float %37, %40
  br i1 %652, label %725, label %728

; <label>:653:                                    ; preds = %610, %477
  %654 = phi i64 [ %480, %477 ], [ %615, %610 ]
  %655 = phi i64 [ %475, %477 ], [ %611, %610 ]
  %656 = fcmp une float %37, %40
  br i1 %656, label %725, label %728

; <label>:657:                                    ; preds = %610, %484
  %658 = phi i64 [ %487, %484 ], [ %615, %610 ]
  %659 = phi i64 [ %482, %484 ], [ %611, %610 ]
  %660 = fcmp ugt float %37, %40
  br i1 %660, label %728, label %725

; <label>:661:                                    ; preds = %610, %491
  %662 = phi i64 [ %494, %491 ], [ %615, %610 ]
  %663 = phi i64 [ %489, %491 ], [ %611, %610 ]
  %664 = fcmp olt float %37, %40
  br i1 %664, label %725, label %728

; <label>:665:                                    ; preds = %610, %500
  %666 = phi i1 [ %504, %500 ], [ %617, %610 ]
  %667 = phi i64 [ %503, %500 ], [ %615, %610 ]
  %668 = phi i64 [ %497, %500 ], [ %611, %610 ]
  %669 = fcmp oeq float %37, %40
  %670 = and i1 %669, %666
  br i1 %670, label %725, label %728

; <label>:671:                                    ; preds = %610, %510
  %672 = phi i1 [ %514, %510 ], [ %617, %610 ]
  %673 = phi i64 [ %513, %510 ], [ %615, %610 ]
  %674 = phi i64 [ %507, %510 ], [ %611, %610 ]
  %675 = fcmp ogt float %37, %40
  %676 = and i1 %675, %672
  br i1 %676, label %725, label %728

; <label>:677:                                    ; preds = %610, %520
  %678 = phi i1 [ %524, %520 ], [ %617, %610 ]
  %679 = phi i64 [ %523, %520 ], [ %615, %610 ]
  %680 = phi i64 [ %517, %520 ], [ %611, %610 ]
  %681 = fcmp oge float %37, %40
  %682 = and i1 %681, %678
  br i1 %682, label %725, label %728

; <label>:683:                                    ; preds = %610, %528
  %684 = phi i64 [ %531, %528 ], [ %615, %610 ]
  %685 = phi i64 [ %526, %528 ], [ %611, %610 ]
  %686 = fcmp ueq float %37, %40
  br i1 %686, label %728, label %725

; <label>:687:                                    ; preds = %610, %535
  %688 = phi i64 [ %538, %535 ], [ %615, %610 ]
  %689 = phi i64 [ %533, %535 ], [ %611, %610 ]
  %690 = fcmp ule float %37, %40
  br i1 %690, label %725, label %728

; <label>:691:                                    ; preds = %610, %542
  %692 = phi i64 [ %545, %542 ], [ %615, %610 ]
  %693 = phi i64 [ %540, %542 ], [ %611, %610 ]
  %694 = fcmp ult float %37, %40
  br i1 %694, label %725, label %728

; <label>:695:                                    ; preds = %610, %549
  %696 = phi i64 [ %552, %549 ], [ %615, %610 ]
  %697 = phi i64 [ %547, %549 ], [ %611, %610 ]
  %698 = fcmp ueq float %37, %40
  br i1 %698, label %725, label %728

; <label>:699:                                    ; preds = %610
  br i1 %616, label %728, label %725

; <label>:700:                                    ; preds = %610, %557
  %701 = phi i64 [ %560, %557 ], [ %615, %610 ]
  %702 = phi i64 [ %555, %557 ], [ %611, %610 ]
  %703 = fcmp ugt float %37, %40
  br i1 %703, label %725, label %728

; <label>:704:                                    ; preds = %610, %564
  %705 = phi i64 [ %567, %564 ], [ %615, %610 ]
  %706 = phi i64 [ %562, %564 ], [ %611, %610 ]
  %707 = fcmp uge float %37, %40
  br i1 %707, label %725, label %728

; <label>:708:                                    ; preds = %610, %571
  %709 = phi i64 [ %574, %571 ], [ %615, %610 ]
  %710 = phi i64 [ %569, %571 ], [ %611, %610 ]
  %711 = fcmp une float %37, %40
  br i1 %711, label %725, label %728

; <label>:712:                                    ; preds = %610, %610
  br i1 %616, label %725, label %728

; <label>:713:                                    ; preds = %610, %581
  %714 = phi i1 [ %585, %581 ], [ %617, %610 ]
  %715 = phi i64 [ %584, %581 ], [ %615, %610 ]
  %716 = phi i64 [ %578, %581 ], [ %611, %610 ]
  %717 = fcmp ole float %37, %40
  %718 = and i1 %717, %714
  br i1 %718, label %725, label %728

; <label>:719:                                    ; preds = %610, %591
  %720 = phi i1 [ %595, %591 ], [ %617, %610 ]
  %721 = phi i64 [ %594, %591 ], [ %615, %610 ]
  %722 = phi i64 [ %588, %591 ], [ %611, %610 ]
  %723 = fcmp olt float %37, %40
  %724 = and i1 %723, %720
  br i1 %724, label %725, label %728

; <label>:725:                                    ; preds = %719, %713, %712, %708, %704, %700, %699, %695, %691, %687, %683, %677, %671, %665, %661, %657, %653, %649, %645, %644, %640, %636, %632, %626, %622, %618, %610, %610, %604, %598
  %726 = phi i64 [ %721, %719 ], [ %715, %713 ], [ %615, %712 ], [ %709, %708 ], [ %705, %704 ], [ %701, %700 ], [ %615, %699 ], [ %696, %695 ], [ %692, %691 ], [ %688, %687 ], [ %684, %683 ], [ %679, %677 ], [ %673, %671 ], [ %667, %665 ], [ %662, %661 ], [ %658, %657 ], [ %654, %653 ], [ %650, %649 ], [ %646, %645 ], [ %615, %644 ], [ %641, %640 ], [ %637, %636 ], [ %633, %632 ], [ %628, %626 ], [ %623, %622 ], [ %619, %618 ], [ %615, %610 ], [ %615, %610 ], [ %608, %604 ], [ %602, %598 ]
  %727 = phi i64 [ %722, %719 ], [ %716, %713 ], [ %611, %712 ], [ %710, %708 ], [ %706, %704 ], [ %702, %700 ], [ %611, %699 ], [ %697, %695 ], [ %693, %691 ], [ %689, %687 ], [ %685, %683 ], [ %680, %677 ], [ %674, %671 ], [ %668, %665 ], [ %663, %661 ], [ %659, %657 ], [ %655, %653 ], [ %651, %649 ], [ %647, %645 ], [ %611, %644 ], [ %642, %640 ], [ %638, %636 ], [ %634, %632 ], [ %629, %626 ], [ %624, %622 ], [ %620, %618 ], [ %611, %610 ], [ %611, %610 ], [ %605, %604 ], [ %599, %598 ]
  br label %728

; <label>:728:                                    ; preds = %725, %719, %713, %712, %708, %704, %700, %699, %695, %691, %687, %683, %677, %671, %665, %661, %657, %653, %649, %645, %644, %640, %636, %632, %626, %622, %618, %610, %610, %604, %598
  %729 = phi i64 [ %726, %725 ], [ %615, %712 ], [ %619, %618 ], [ %623, %622 ], [ %628, %626 ], [ %633, %632 ], [ %637, %636 ], [ %641, %640 ], [ %615, %644 ], [ %646, %645 ], [ %650, %649 ], [ %654, %653 ], [ %658, %657 ], [ %662, %661 ], [ %667, %665 ], [ %673, %671 ], [ %679, %677 ], [ %684, %683 ], [ %688, %687 ], [ %692, %691 ], [ %696, %695 ], [ %615, %699 ], [ %701, %700 ], [ %705, %704 ], [ %709, %708 ], [ %715, %713 ], [ %721, %719 ], [ %615, %610 ], [ %615, %610 ], [ %608, %604 ], [ %602, %598 ]
  %730 = phi i64 [ %727, %725 ], [ %611, %712 ], [ %620, %618 ], [ %624, %622 ], [ %629, %626 ], [ %634, %632 ], [ %638, %636 ], [ %642, %640 ], [ %611, %644 ], [ %647, %645 ], [ %651, %649 ], [ %655, %653 ], [ %659, %657 ], [ %663, %661 ], [ %668, %665 ], [ %674, %671 ], [ %680, %677 ], [ %685, %683 ], [ %689, %687 ], [ %693, %691 ], [ %697, %695 ], [ %611, %699 ], [ %702, %700 ], [ %706, %704 ], [ %710, %708 ], [ %716, %713 ], [ %722, %719 ], [ %611, %610 ], [ %611, %610 ], [ %605, %604 ], [ %599, %598 ]
  %731 = phi i32 [ -1, %725 ], [ 0, %712 ], [ 0, %618 ], [ 0, %622 ], [ 0, %626 ], [ 0, %632 ], [ 0, %636 ], [ 0, %640 ], [ 0, %644 ], [ 0, %645 ], [ 0, %649 ], [ 0, %653 ], [ 0, %657 ], [ 0, %661 ], [ 0, %665 ], [ 0, %671 ], [ 0, %677 ], [ 0, %683 ], [ 0, %687 ], [ 0, %691 ], [ 0, %695 ], [ 0, %699 ], [ 0, %700 ], [ 0, %704 ], [ 0, %708 ], [ 0, %713 ], [ 0, %719 ], [ 0, %610 ], [ 0, %610 ], [ 0, %604 ], [ 0, %598 ]
  call void @llvm.lifetime.start(i64 16, i8* nonnull %42)
  store i64 %730, i64* %43, align 16
  store i64 %729, i64* %44, align 8
  %732 = getelementptr inbounds [4 x i32], [4 x i32]* %45, i64 0, i64 3
  store i32 %731, i32* %732, align 4
  %733 = load i64, i64* %44, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %42)
  br label %72
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L5CMPPDI3VnWI8vec128_tE2VnIS2_E3MVnIS2_EEEP6MemoryS9_R5StateT_T0_T1_2InIhE(%struct.Memory*, %struct.State* dereferenceable(3376), i8* nocapture, i8* nocapture readonly, i64, i64)  {
  %7 = bitcast i8* %3 to double*
  %8 = load double, double* %7, align 1
  %9 = getelementptr inbounds i8, i8* %3, i64 8
  %10 = bitcast i8* %9 to double*
  %11 = load double, double* %10, align 1
  %12 = inttoptr i64 %4 to double*
  %13 = load double, double* %12
  %14 = add i64 %4, 8
  %15 = inttoptr i64 %14 to double*
  %16 = load double, double* %15
  %17 = trunc i64 %5 to i8
  %18 = icmp ugt i8 %17, 31
  br i1 %18, label %29, label %19

; <label>:19:                                     ; preds = %6
  %20 = icmp eq i8 %17, 0
  br i1 %20, label %24, label %21

; <label>:21:                                     ; preds = %19
  %22 = fcmp uno double %8, %13
  %23 = xor i1 %22, true
  switch i8 %17, label %109 [
    i8 31, label %111
    i8 1, label %39
    i8 2, label %44
    i8 3, label %110
    i8 4, label %49
    i8 5, label %51
    i8 6, label %53
    i8 7, label %55
    i8 8, label %58
    i8 9, label %60
    i8 10, label %62
    i8 11, label %112
    i8 12, label %64
    i8 13, label %66
    i8 14, label %71
    i8 15, label %111
    i8 16, label %76
    i8 17, label %81
    i8 18, label %83
    i8 19, label %110
    i8 20, label %85
    i8 21, label %87
    i8 22, label %89
    i8 23, label %91
    i8 24, label %94
    i8 25, label %96
    i8 26, label %98
    i8 27, label %112
    i8 28, label %100
    i8 29, label %105
    i8 30, label %107
  ]

; <label>:24:                                     ; preds = %19
  %25 = fcmp oeq double %8, %13
  %26 = sext i1 %25 to i64
  %27 = fcmp oeq double %11, %16
  %28 = sext i1 %27 to i64
  br label %33

; <label>:29:                                     ; preds = %6
  %30 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 33, i32 0, i32 0
  %31 = load i64, i64* %30, align 8
  %32 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %1, i64 %31, %struct.Memory* %0) 
  br label %116

; <label>:33:                                     ; preds = %202, %197, %192, %191, %188, %185, %182, %181, %178, %175, %172, %169, %164, %159, %154, %151, %148, %145, %142, %139, %138, %135, %132, %129, %124, %121, %118, %112, %112, %92, %56, %24
  %34 = phi i64 [ %28, %24 ], [ -1, %202 ], [ 0, %191 ], [ 0, %118 ], [ 0, %121 ], [ 0, %124 ], [ 0, %129 ], [ 0, %132 ], [ 0, %135 ], [ 0, %138 ], [ 0, %139 ], [ 0, %142 ], [ 0, %145 ], [ 0, %148 ], [ 0, %151 ], [ 0, %154 ], [ 0, %159 ], [ 0, %164 ], [ 0, %169 ], [ 0, %172 ], [ 0, %175 ], [ 0, %178 ], [ 0, %181 ], [ 0, %182 ], [ 0, %185 ], [ 0, %188 ], [ 0, %192 ], [ 0, %197 ], [ 0, %112 ], [ 0, %112 ], [ 0, %92 ], [ 0, %56 ]
  %35 = phi i64 [ %26, %24 ], [ %203, %202 ], [ %113, %191 ], [ %119, %118 ], [ %122, %121 ], [ %126, %124 ], [ %130, %129 ], [ %133, %132 ], [ %136, %135 ], [ %113, %138 ], [ %140, %139 ], [ %143, %142 ], [ %146, %145 ], [ %149, %148 ], [ %152, %151 ], [ %156, %154 ], [ %161, %159 ], [ %166, %164 ], [ %170, %169 ], [ %173, %172 ], [ %176, %175 ], [ %179, %178 ], [ %113, %181 ], [ %183, %182 ], [ %186, %185 ], [ %189, %188 ], [ %194, %192 ], [ %199, %197 ], [ %113, %112 ], [ %113, %112 ], [ 0, %92 ], [ 0, %56 ]
  %36 = bitcast i8* %2 to i64*
  store i64 %35, i64* %36, align 1
  %37 = getelementptr inbounds i8, i8* %2, i64 8
  %38 = bitcast i8* %37 to i64*
  store i64 %34, i64* %38, align 1
  br label %116

; <label>:39:                                     ; preds = %21
  %40 = fcmp olt double %8, %13
  %41 = and i1 %40, %23
  br i1 %41, label %111, label %42

; <label>:42:                                     ; preds = %39
  %43 = fcmp ord double %11, %16
  br label %197

; <label>:44:                                     ; preds = %21
  %45 = fcmp ole double %8, %13
  %46 = and i1 %45, %23
  br i1 %46, label %111, label %47

; <label>:47:                                     ; preds = %44
  %48 = fcmp ord double %11, %16
  br label %192

; <label>:49:                                     ; preds = %21
  %50 = fcmp une double %8, %13
  br i1 %50, label %111, label %188

; <label>:51:                                     ; preds = %21
  %52 = fcmp uge double %8, %13
  br i1 %52, label %111, label %185

; <label>:53:                                     ; preds = %21
  %54 = fcmp ugt double %8, %13
  br i1 %54, label %111, label %182

; <label>:55:                                     ; preds = %21
  br i1 %22, label %56, label %111

; <label>:56:                                     ; preds = %55
  %57 = fcmp uno double %11, %16
  br i1 %57, label %33, label %202

; <label>:58:                                     ; preds = %21
  %59 = fcmp ueq double %8, %13
  br i1 %59, label %111, label %178

; <label>:60:                                     ; preds = %21
  %61 = fcmp ult double %8, %13
  br i1 %61, label %111, label %175

; <label>:62:                                     ; preds = %21
  %63 = fcmp ule double %8, %13
  br i1 %63, label %111, label %172

; <label>:64:                                     ; preds = %21
  %65 = fcmp ueq double %8, %13
  br i1 %65, label %169, label %111

; <label>:66:                                     ; preds = %21
  %67 = fcmp oge double %8, %13
  %68 = and i1 %67, %23
  br i1 %68, label %111, label %69

; <label>:69:                                     ; preds = %66
  %70 = fcmp ord double %11, %16
  br label %164

; <label>:71:                                     ; preds = %21
  %72 = fcmp ogt double %8, %13
  %73 = and i1 %72, %23
  br i1 %73, label %111, label %74

; <label>:74:                                     ; preds = %71
  %75 = fcmp ord double %11, %16
  br label %159

; <label>:76:                                     ; preds = %21
  %77 = fcmp oeq double %8, %13
  %78 = and i1 %77, %23
  br i1 %78, label %111, label %79

; <label>:79:                                     ; preds = %76
  %80 = fcmp ord double %11, %16
  br label %154

; <label>:81:                                     ; preds = %21
  %82 = fcmp olt double %8, %13
  br i1 %82, label %111, label %151

; <label>:83:                                     ; preds = %21
  %84 = fcmp ugt double %8, %13
  br i1 %84, label %148, label %111

; <label>:85:                                     ; preds = %21
  %86 = fcmp une double %8, %13
  br i1 %86, label %111, label %145

; <label>:87:                                     ; preds = %21
  %88 = fcmp uge double %8, %13
  br i1 %88, label %111, label %142

; <label>:89:                                     ; preds = %21
  %90 = fcmp ugt double %8, %13
  br i1 %90, label %111, label %139

; <label>:91:                                     ; preds = %21
  br i1 %22, label %92, label %111

; <label>:92:                                     ; preds = %91
  %93 = fcmp uno double %11, %16
  br i1 %93, label %33, label %202

; <label>:94:                                     ; preds = %21
  %95 = fcmp ueq double %8, %13
  br i1 %95, label %111, label %135

; <label>:96:                                     ; preds = %21
  %97 = fcmp ult double %8, %13
  br i1 %97, label %111, label %132

; <label>:98:                                     ; preds = %21
  %99 = fcmp ule double %8, %13
  br i1 %99, label %111, label %129

; <label>:100:                                    ; preds = %21
  %101 = fcmp une double %8, %13
  %102 = and i1 %101, %23
  br i1 %102, label %111, label %103

; <label>:103:                                    ; preds = %100
  %104 = fcmp ord double %11, %16
  br label %124

; <label>:105:                                    ; preds = %21
  %106 = fcmp ult double %8, %13
  br i1 %106, label %121, label %111

; <label>:107:                                    ; preds = %21
  %108 = fcmp ogt double %8, %13
  br i1 %108, label %111, label %118

; <label>:109:                                    ; preds = %112, %21
  unreachable

; <label>:110:                                    ; preds = %21, %21
  br i1 %22, label %111, label %112

; <label>:111:                                    ; preds = %110, %107, %105, %100, %98, %96, %94, %91, %89, %87, %85, %83, %81, %76, %71, %66, %64, %62, %60, %58, %55, %53, %51, %49, %44, %39, %21, %21
  br label %112

; <label>:112:                                    ; preds = %111, %110, %21, %21
  %113 = phi i64 [ -1, %111 ], [ 0, %110 ], [ 0, %21 ], [ 0, %21 ]
  %114 = fcmp uno double %11, %16
  %115 = xor i1 %114, true
  switch i8 %17, label %109 [
    i8 31, label %202
    i8 1, label %197
    i8 2, label %192
    i8 3, label %191
    i8 4, label %188
    i8 5, label %185
    i8 6, label %182
    i8 7, label %181
    i8 8, label %178
    i8 9, label %175
    i8 10, label %172
    i8 11, label %33
    i8 12, label %169
    i8 13, label %164
    i8 14, label %159
    i8 15, label %202
    i8 16, label %154
    i8 17, label %151
    i8 18, label %148
    i8 19, label %191
    i8 20, label %145
    i8 21, label %142
    i8 22, label %139
    i8 23, label %138
    i8 24, label %135
    i8 25, label %132
    i8 26, label %129
    i8 27, label %33
    i8 28, label %124
    i8 29, label %121
    i8 30, label %118
  ]

; <label>:116:                                    ; preds = %33, %29
  %117 = phi %struct.Memory* [ %32, %29 ], [ %0, %33 ]
  ret %struct.Memory* %117

; <label>:118:                                    ; preds = %112, %107
  %119 = phi i64 [ %113, %112 ], [ 0, %107 ]
  %120 = fcmp ogt double %11, %16
  br i1 %120, label %202, label %33

; <label>:121:                                    ; preds = %112, %105
  %122 = phi i64 [ %113, %112 ], [ 0, %105 ]
  %123 = fcmp ult double %11, %16
  br i1 %123, label %33, label %202

; <label>:124:                                    ; preds = %112, %103
  %125 = phi i1 [ %104, %103 ], [ %115, %112 ]
  %126 = phi i64 [ 0, %103 ], [ %113, %112 ]
  %127 = fcmp une double %11, %16
  %128 = and i1 %127, %125
  br i1 %128, label %202, label %33

; <label>:129:                                    ; preds = %112, %98
  %130 = phi i64 [ %113, %112 ], [ 0, %98 ]
  %131 = fcmp ule double %11, %16
  br i1 %131, label %202, label %33

; <label>:132:                                    ; preds = %112, %96
  %133 = phi i64 [ %113, %112 ], [ 0, %96 ]
  %134 = fcmp ult double %11, %16
  br i1 %134, label %202, label %33

; <label>:135:                                    ; preds = %112, %94
  %136 = phi i64 [ %113, %112 ], [ 0, %94 ]
  %137 = fcmp ueq double %11, %16
  br i1 %137, label %202, label %33

; <label>:138:                                    ; preds = %112
  br i1 %114, label %33, label %202

; <label>:139:                                    ; preds = %112, %89
  %140 = phi i64 [ %113, %112 ], [ 0, %89 ]
  %141 = fcmp ugt double %11, %16
  br i1 %141, label %202, label %33

; <label>:142:                                    ; preds = %112, %87
  %143 = phi i64 [ %113, %112 ], [ 0, %87 ]
  %144 = fcmp uge double %11, %16
  br i1 %144, label %202, label %33

; <label>:145:                                    ; preds = %112, %85
  %146 = phi i64 [ %113, %112 ], [ 0, %85 ]
  %147 = fcmp une double %11, %16
  br i1 %147, label %202, label %33

; <label>:148:                                    ; preds = %112, %83
  %149 = phi i64 [ %113, %112 ], [ 0, %83 ]
  %150 = fcmp ugt double %11, %16
  br i1 %150, label %33, label %202

; <label>:151:                                    ; preds = %112, %81
  %152 = phi i64 [ %113, %112 ], [ 0, %81 ]
  %153 = fcmp olt double %11, %16
  br i1 %153, label %202, label %33

; <label>:154:                                    ; preds = %112, %79
  %155 = phi i1 [ %80, %79 ], [ %115, %112 ]
  %156 = phi i64 [ 0, %79 ], [ %113, %112 ]
  %157 = fcmp oeq double %11, %16
  %158 = and i1 %157, %155
  br i1 %158, label %202, label %33

; <label>:159:                                    ; preds = %112, %74
  %160 = phi i1 [ %75, %74 ], [ %115, %112 ]
  %161 = phi i64 [ 0, %74 ], [ %113, %112 ]
  %162 = fcmp ogt double %11, %16
  %163 = and i1 %162, %160
  br i1 %163, label %202, label %33

; <label>:164:                                    ; preds = %112, %69
  %165 = phi i1 [ %70, %69 ], [ %115, %112 ]
  %166 = phi i64 [ 0, %69 ], [ %113, %112 ]
  %167 = fcmp oge double %11, %16
  %168 = and i1 %167, %165
  br i1 %168, label %202, label %33

; <label>:169:                                    ; preds = %112, %64
  %170 = phi i64 [ %113, %112 ], [ 0, %64 ]
  %171 = fcmp ueq double %11, %16
  br i1 %171, label %33, label %202

; <label>:172:                                    ; preds = %112, %62
  %173 = phi i64 [ %113, %112 ], [ 0, %62 ]
  %174 = fcmp ule double %11, %16
  br i1 %174, label %202, label %33

; <label>:175:                                    ; preds = %112, %60
  %176 = phi i64 [ %113, %112 ], [ 0, %60 ]
  %177 = fcmp ult double %11, %16
  br i1 %177, label %202, label %33

; <label>:178:                                    ; preds = %112, %58
  %179 = phi i64 [ %113, %112 ], [ 0, %58 ]
  %180 = fcmp ueq double %11, %16
  br i1 %180, label %202, label %33

; <label>:181:                                    ; preds = %112
  br i1 %114, label %33, label %202

; <label>:182:                                    ; preds = %112, %53
  %183 = phi i64 [ %113, %112 ], [ 0, %53 ]
  %184 = fcmp ugt double %11, %16
  br i1 %184, label %202, label %33

; <label>:185:                                    ; preds = %112, %51
  %186 = phi i64 [ %113, %112 ], [ 0, %51 ]
  %187 = fcmp uge double %11, %16
  br i1 %187, label %202, label %33

; <label>:188:                                    ; preds = %112, %49
  %189 = phi i64 [ %113, %112 ], [ 0, %49 ]
  %190 = fcmp une double %11, %16
  br i1 %190, label %202, label %33

; <label>:191:                                    ; preds = %112, %112
  br i1 %114, label %202, label %33

; <label>:192:                                    ; preds = %112, %47
  %193 = phi i1 [ %48, %47 ], [ %115, %112 ]
  %194 = phi i64 [ 0, %47 ], [ %113, %112 ]
  %195 = fcmp ole double %11, %16
  %196 = and i1 %195, %193
  br i1 %196, label %202, label %33

; <label>:197:                                    ; preds = %112, %42
  %198 = phi i1 [ %43, %42 ], [ %115, %112 ]
  %199 = phi i64 [ 0, %42 ], [ %113, %112 ]
  %200 = fcmp olt double %11, %16
  %201 = and i1 %200, %198
  br i1 %201, label %202, label %33

; <label>:202:                                    ; preds = %197, %192, %191, %188, %185, %182, %181, %178, %175, %172, %169, %164, %159, %154, %151, %148, %145, %142, %139, %138, %135, %132, %129, %124, %121, %118, %112, %112, %92, %56
  %203 = phi i64 [ %199, %197 ], [ %194, %192 ], [ %113, %191 ], [ %189, %188 ], [ %186, %185 ], [ %183, %182 ], [ %113, %181 ], [ %179, %178 ], [ %176, %175 ], [ %173, %172 ], [ %170, %169 ], [ %166, %164 ], [ %161, %159 ], [ %156, %154 ], [ %152, %151 ], [ %149, %148 ], [ %146, %145 ], [ %143, %142 ], [ %140, %139 ], [ %113, %138 ], [ %136, %135 ], [ %133, %132 ], [ %130, %129 ], [ %126, %124 ], [ %122, %121 ], [ %119, %118 ], [ %113, %112 ], [ %113, %112 ], [ 0, %92 ], [ 0, %56 ]
  br label %33
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L5CMPPDI3VnWI8vec128_tE2VnIS2_ES5_EEP6MemoryS7_R5StateT_T0_T1_2InIhE(%struct.Memory*, %struct.State* dereferenceable(3376), i8* nocapture, i8* nocapture readonly, i8* nocapture readonly, i64)  {
  %7 = bitcast i8* %3 to double*
  %8 = load double, double* %7, align 1
  %9 = getelementptr inbounds i8, i8* %3, i64 8
  %10 = bitcast i8* %9 to double*
  %11 = load double, double* %10, align 1
  %12 = bitcast i8* %4 to double*
  %13 = load double, double* %12, align 1
  %14 = getelementptr inbounds i8, i8* %4, i64 8
  %15 = bitcast i8* %14 to double*
  %16 = load double, double* %15, align 1
  %17 = trunc i64 %5 to i8
  %18 = icmp ugt i8 %17, 31
  br i1 %18, label %29, label %19

; <label>:19:                                     ; preds = %6
  %20 = icmp eq i8 %17, 0
  br i1 %20, label %24, label %21

; <label>:21:                                     ; preds = %19
  %22 = fcmp uno double %8, %13
  %23 = xor i1 %22, true
  switch i8 %17, label %109 [
    i8 31, label %111
    i8 1, label %39
    i8 2, label %44
    i8 3, label %110
    i8 4, label %49
    i8 5, label %51
    i8 6, label %53
    i8 7, label %55
    i8 8, label %58
    i8 9, label %60
    i8 10, label %62
    i8 11, label %112
    i8 12, label %64
    i8 13, label %66
    i8 14, label %71
    i8 15, label %111
    i8 16, label %76
    i8 17, label %81
    i8 18, label %83
    i8 19, label %110
    i8 20, label %85
    i8 21, label %87
    i8 22, label %89
    i8 23, label %91
    i8 24, label %94
    i8 25, label %96
    i8 26, label %98
    i8 27, label %112
    i8 28, label %100
    i8 29, label %105
    i8 30, label %107
  ]

; <label>:24:                                     ; preds = %19
  %25 = fcmp oeq double %8, %13
  %26 = sext i1 %25 to i64
  %27 = fcmp oeq double %11, %16
  %28 = sext i1 %27 to i64
  br label %33

; <label>:29:                                     ; preds = %6
  %30 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 33, i32 0, i32 0
  %31 = load i64, i64* %30, align 8
  %32 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %1, i64 %31, %struct.Memory* %0) 
  br label %116

; <label>:33:                                     ; preds = %202, %197, %192, %191, %188, %185, %182, %181, %178, %175, %172, %169, %164, %159, %154, %151, %148, %145, %142, %139, %138, %135, %132, %129, %124, %121, %118, %112, %112, %92, %56, %24
  %34 = phi i64 [ %28, %24 ], [ -1, %202 ], [ 0, %191 ], [ 0, %118 ], [ 0, %121 ], [ 0, %124 ], [ 0, %129 ], [ 0, %132 ], [ 0, %135 ], [ 0, %138 ], [ 0, %139 ], [ 0, %142 ], [ 0, %145 ], [ 0, %148 ], [ 0, %151 ], [ 0, %154 ], [ 0, %159 ], [ 0, %164 ], [ 0, %169 ], [ 0, %172 ], [ 0, %175 ], [ 0, %178 ], [ 0, %181 ], [ 0, %182 ], [ 0, %185 ], [ 0, %188 ], [ 0, %192 ], [ 0, %197 ], [ 0, %112 ], [ 0, %112 ], [ 0, %92 ], [ 0, %56 ]
  %35 = phi i64 [ %26, %24 ], [ %203, %202 ], [ %113, %191 ], [ %119, %118 ], [ %122, %121 ], [ %126, %124 ], [ %130, %129 ], [ %133, %132 ], [ %136, %135 ], [ %113, %138 ], [ %140, %139 ], [ %143, %142 ], [ %146, %145 ], [ %149, %148 ], [ %152, %151 ], [ %156, %154 ], [ %161, %159 ], [ %166, %164 ], [ %170, %169 ], [ %173, %172 ], [ %176, %175 ], [ %179, %178 ], [ %113, %181 ], [ %183, %182 ], [ %186, %185 ], [ %189, %188 ], [ %194, %192 ], [ %199, %197 ], [ %113, %112 ], [ %113, %112 ], [ 0, %92 ], [ 0, %56 ]
  %36 = bitcast i8* %2 to i64*
  store i64 %35, i64* %36, align 1
  %37 = getelementptr inbounds i8, i8* %2, i64 8
  %38 = bitcast i8* %37 to i64*
  store i64 %34, i64* %38, align 1
  br label %116

; <label>:39:                                     ; preds = %21
  %40 = fcmp olt double %8, %13
  %41 = and i1 %40, %23
  br i1 %41, label %111, label %42

; <label>:42:                                     ; preds = %39
  %43 = fcmp ord double %11, %16
  br label %197

; <label>:44:                                     ; preds = %21
  %45 = fcmp ole double %8, %13
  %46 = and i1 %45, %23
  br i1 %46, label %111, label %47

; <label>:47:                                     ; preds = %44
  %48 = fcmp ord double %11, %16
  br label %192

; <label>:49:                                     ; preds = %21
  %50 = fcmp une double %8, %13
  br i1 %50, label %111, label %188

; <label>:51:                                     ; preds = %21
  %52 = fcmp uge double %8, %13
  br i1 %52, label %111, label %185

; <label>:53:                                     ; preds = %21
  %54 = fcmp ugt double %8, %13
  br i1 %54, label %111, label %182

; <label>:55:                                     ; preds = %21
  br i1 %22, label %56, label %111

; <label>:56:                                     ; preds = %55
  %57 = fcmp uno double %11, %16
  br i1 %57, label %33, label %202

; <label>:58:                                     ; preds = %21
  %59 = fcmp ueq double %8, %13
  br i1 %59, label %111, label %178

; <label>:60:                                     ; preds = %21
  %61 = fcmp ult double %8, %13
  br i1 %61, label %111, label %175

; <label>:62:                                     ; preds = %21
  %63 = fcmp ule double %8, %13
  br i1 %63, label %111, label %172

; <label>:64:                                     ; preds = %21
  %65 = fcmp ueq double %8, %13
  br i1 %65, label %169, label %111

; <label>:66:                                     ; preds = %21
  %67 = fcmp oge double %8, %13
  %68 = and i1 %67, %23
  br i1 %68, label %111, label %69

; <label>:69:                                     ; preds = %66
  %70 = fcmp ord double %11, %16
  br label %164

; <label>:71:                                     ; preds = %21
  %72 = fcmp ogt double %8, %13
  %73 = and i1 %72, %23
  br i1 %73, label %111, label %74

; <label>:74:                                     ; preds = %71
  %75 = fcmp ord double %11, %16
  br label %159

; <label>:76:                                     ; preds = %21
  %77 = fcmp oeq double %8, %13
  %78 = and i1 %77, %23
  br i1 %78, label %111, label %79

; <label>:79:                                     ; preds = %76
  %80 = fcmp ord double %11, %16
  br label %154

; <label>:81:                                     ; preds = %21
  %82 = fcmp olt double %8, %13
  br i1 %82, label %111, label %151

; <label>:83:                                     ; preds = %21
  %84 = fcmp ugt double %8, %13
  br i1 %84, label %148, label %111

; <label>:85:                                     ; preds = %21
  %86 = fcmp une double %8, %13
  br i1 %86, label %111, label %145

; <label>:87:                                     ; preds = %21
  %88 = fcmp uge double %8, %13
  br i1 %88, label %111, label %142

; <label>:89:                                     ; preds = %21
  %90 = fcmp ugt double %8, %13
  br i1 %90, label %111, label %139

; <label>:91:                                     ; preds = %21
  br i1 %22, label %92, label %111

; <label>:92:                                     ; preds = %91
  %93 = fcmp uno double %11, %16
  br i1 %93, label %33, label %202

; <label>:94:                                     ; preds = %21
  %95 = fcmp ueq double %8, %13
  br i1 %95, label %111, label %135

; <label>:96:                                     ; preds = %21
  %97 = fcmp ult double %8, %13
  br i1 %97, label %111, label %132

; <label>:98:                                     ; preds = %21
  %99 = fcmp ule double %8, %13
  br i1 %99, label %111, label %129

; <label>:100:                                    ; preds = %21
  %101 = fcmp une double %8, %13
  %102 = and i1 %101, %23
  br i1 %102, label %111, label %103

; <label>:103:                                    ; preds = %100
  %104 = fcmp ord double %11, %16
  br label %124

; <label>:105:                                    ; preds = %21
  %106 = fcmp ult double %8, %13
  br i1 %106, label %121, label %111

; <label>:107:                                    ; preds = %21
  %108 = fcmp ogt double %8, %13
  br i1 %108, label %111, label %118

; <label>:109:                                    ; preds = %112, %21
  unreachable

; <label>:110:                                    ; preds = %21, %21
  br i1 %22, label %111, label %112

; <label>:111:                                    ; preds = %110, %107, %105, %100, %98, %96, %94, %91, %89, %87, %85, %83, %81, %76, %71, %66, %64, %62, %60, %58, %55, %53, %51, %49, %44, %39, %21, %21
  br label %112

; <label>:112:                                    ; preds = %111, %110, %21, %21
  %113 = phi i64 [ -1, %111 ], [ 0, %110 ], [ 0, %21 ], [ 0, %21 ]
  %114 = fcmp uno double %11, %16
  %115 = xor i1 %114, true
  switch i8 %17, label %109 [
    i8 31, label %202
    i8 1, label %197
    i8 2, label %192
    i8 3, label %191
    i8 4, label %188
    i8 5, label %185
    i8 6, label %182
    i8 7, label %181
    i8 8, label %178
    i8 9, label %175
    i8 10, label %172
    i8 11, label %33
    i8 12, label %169
    i8 13, label %164
    i8 14, label %159
    i8 15, label %202
    i8 16, label %154
    i8 17, label %151
    i8 18, label %148
    i8 19, label %191
    i8 20, label %145
    i8 21, label %142
    i8 22, label %139
    i8 23, label %138
    i8 24, label %135
    i8 25, label %132
    i8 26, label %129
    i8 27, label %33
    i8 28, label %124
    i8 29, label %121
    i8 30, label %118
  ]

; <label>:116:                                    ; preds = %33, %29
  %117 = phi %struct.Memory* [ %32, %29 ], [ %0, %33 ]
  ret %struct.Memory* %117

; <label>:118:                                    ; preds = %112, %107
  %119 = phi i64 [ %113, %112 ], [ 0, %107 ]
  %120 = fcmp ogt double %11, %16
  br i1 %120, label %202, label %33

; <label>:121:                                    ; preds = %112, %105
  %122 = phi i64 [ %113, %112 ], [ 0, %105 ]
  %123 = fcmp ult double %11, %16
  br i1 %123, label %33, label %202

; <label>:124:                                    ; preds = %112, %103
  %125 = phi i1 [ %104, %103 ], [ %115, %112 ]
  %126 = phi i64 [ 0, %103 ], [ %113, %112 ]
  %127 = fcmp une double %11, %16
  %128 = and i1 %127, %125
  br i1 %128, label %202, label %33

; <label>:129:                                    ; preds = %112, %98
  %130 = phi i64 [ %113, %112 ], [ 0, %98 ]
  %131 = fcmp ule double %11, %16
  br i1 %131, label %202, label %33

; <label>:132:                                    ; preds = %112, %96
  %133 = phi i64 [ %113, %112 ], [ 0, %96 ]
  %134 = fcmp ult double %11, %16
  br i1 %134, label %202, label %33

; <label>:135:                                    ; preds = %112, %94
  %136 = phi i64 [ %113, %112 ], [ 0, %94 ]
  %137 = fcmp ueq double %11, %16
  br i1 %137, label %202, label %33

; <label>:138:                                    ; preds = %112
  br i1 %114, label %33, label %202

; <label>:139:                                    ; preds = %112, %89
  %140 = phi i64 [ %113, %112 ], [ 0, %89 ]
  %141 = fcmp ugt double %11, %16
  br i1 %141, label %202, label %33

; <label>:142:                                    ; preds = %112, %87
  %143 = phi i64 [ %113, %112 ], [ 0, %87 ]
  %144 = fcmp uge double %11, %16
  br i1 %144, label %202, label %33

; <label>:145:                                    ; preds = %112, %85
  %146 = phi i64 [ %113, %112 ], [ 0, %85 ]
  %147 = fcmp une double %11, %16
  br i1 %147, label %202, label %33

; <label>:148:                                    ; preds = %112, %83
  %149 = phi i64 [ %113, %112 ], [ 0, %83 ]
  %150 = fcmp ugt double %11, %16
  br i1 %150, label %33, label %202

; <label>:151:                                    ; preds = %112, %81
  %152 = phi i64 [ %113, %112 ], [ 0, %81 ]
  %153 = fcmp olt double %11, %16
  br i1 %153, label %202, label %33

; <label>:154:                                    ; preds = %112, %79
  %155 = phi i1 [ %80, %79 ], [ %115, %112 ]
  %156 = phi i64 [ 0, %79 ], [ %113, %112 ]
  %157 = fcmp oeq double %11, %16
  %158 = and i1 %157, %155
  br i1 %158, label %202, label %33

; <label>:159:                                    ; preds = %112, %74
  %160 = phi i1 [ %75, %74 ], [ %115, %112 ]
  %161 = phi i64 [ 0, %74 ], [ %113, %112 ]
  %162 = fcmp ogt double %11, %16
  %163 = and i1 %162, %160
  br i1 %163, label %202, label %33

; <label>:164:                                    ; preds = %112, %69
  %165 = phi i1 [ %70, %69 ], [ %115, %112 ]
  %166 = phi i64 [ 0, %69 ], [ %113, %112 ]
  %167 = fcmp oge double %11, %16
  %168 = and i1 %167, %165
  br i1 %168, label %202, label %33

; <label>:169:                                    ; preds = %112, %64
  %170 = phi i64 [ %113, %112 ], [ 0, %64 ]
  %171 = fcmp ueq double %11, %16
  br i1 %171, label %33, label %202

; <label>:172:                                    ; preds = %112, %62
  %173 = phi i64 [ %113, %112 ], [ 0, %62 ]
  %174 = fcmp ule double %11, %16
  br i1 %174, label %202, label %33

; <label>:175:                                    ; preds = %112, %60
  %176 = phi i64 [ %113, %112 ], [ 0, %60 ]
  %177 = fcmp ult double %11, %16
  br i1 %177, label %202, label %33

; <label>:178:                                    ; preds = %112, %58
  %179 = phi i64 [ %113, %112 ], [ 0, %58 ]
  %180 = fcmp ueq double %11, %16
  br i1 %180, label %202, label %33

; <label>:181:                                    ; preds = %112
  br i1 %114, label %33, label %202

; <label>:182:                                    ; preds = %112, %53
  %183 = phi i64 [ %113, %112 ], [ 0, %53 ]
  %184 = fcmp ugt double %11, %16
  br i1 %184, label %202, label %33

; <label>:185:                                    ; preds = %112, %51
  %186 = phi i64 [ %113, %112 ], [ 0, %51 ]
  %187 = fcmp uge double %11, %16
  br i1 %187, label %202, label %33

; <label>:188:                                    ; preds = %112, %49
  %189 = phi i64 [ %113, %112 ], [ 0, %49 ]
  %190 = fcmp une double %11, %16
  br i1 %190, label %202, label %33

; <label>:191:                                    ; preds = %112, %112
  br i1 %114, label %202, label %33

; <label>:192:                                    ; preds = %112, %47
  %193 = phi i1 [ %48, %47 ], [ %115, %112 ]
  %194 = phi i64 [ 0, %47 ], [ %113, %112 ]
  %195 = fcmp ole double %11, %16
  %196 = and i1 %195, %193
  br i1 %196, label %202, label %33

; <label>:197:                                    ; preds = %112, %42
  %198 = phi i1 [ %43, %42 ], [ %115, %112 ]
  %199 = phi i64 [ 0, %42 ], [ %113, %112 ]
  %200 = fcmp olt double %11, %16
  %201 = and i1 %200, %198
  br i1 %201, label %202, label %33

; <label>:202:                                    ; preds = %197, %192, %191, %188, %185, %182, %181, %178, %175, %172, %169, %164, %159, %154, %151, %148, %145, %142, %139, %138, %135, %132, %129, %124, %121, %118, %112, %112, %92, %56
  %203 = phi i64 [ %199, %197 ], [ %194, %192 ], [ %113, %191 ], [ %189, %188 ], [ %186, %185 ], [ %183, %182 ], [ %113, %181 ], [ %179, %178 ], [ %176, %175 ], [ %173, %172 ], [ %170, %169 ], [ %166, %164 ], [ %161, %159 ], [ %156, %154 ], [ %152, %151 ], [ %149, %148 ], [ %146, %145 ], [ %143, %142 ], [ %140, %139 ], [ %113, %138 ], [ %136, %135 ], [ %133, %132 ], [ %130, %129 ], [ %126, %124 ], [ %122, %121 ], [ %119, %118 ], [ %113, %112 ], [ %113, %112 ], [ 0, %92 ], [ 0, %56 ]
  br label %33
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L9PCMPISTRII2VnI8vec128_tEEEP6MemoryS5_R5StateS3_T_2InIhE(%struct.Memory* readnone, %struct.State* dereferenceable(3376), i8* nocapture readonly, i8* nocapture readonly, i64)  {
  %6 = alloca %"class.(anonymous namespace)::BitMatrix", align 8
  %7 = alloca %"class.(anonymous namespace)::BitMatrix", align 8
  %8 = alloca <2 x i64>, align 16
  %9 = alloca { i64, i64 }, align 8
  %10 = alloca <2 x i64>, align 16
  %11 = alloca { i64, i64 }, align 8
  %12 = trunc i64 %4 to i8
  %13 = trunc i64 %4 to i2
  switch i2 %13, label %3312 [
    i2 0, label %14
    i2 1, label %1088
    i2 -2, label %1663
    i2 -1, label %2737
  ]

; <label>:14:                                     ; preds = %5
  %15 = bitcast <2 x i64>* %8 to { i64, i64 }*
  %16 = bitcast <2 x i64>* %8 to %struct.uint8v16_t*
  %17 = bitcast <2 x i64>* %8 to i8*
  call void @llvm.lifetime.start(i64 16, i8* nonnull %17) 
  %18 = bitcast i8* %2 to <2 x i64>*
  %19 = load <2 x i64>, <2 x i64>* %18, align 1
  %20 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %15, i64 0, i32 1
  store <2 x i64> %19, <2 x i64>* %8, align 16
  %21 = bitcast i8* %3 to i64*
  %22 = load i64, i64* %21, align 1
  %23 = getelementptr inbounds i8, i8* %3, i64 8
  %24 = bitcast i8* %23 to i64*
  %25 = load i64, i64* %24, align 1
  %26 = trunc i64 %22 to i8
  %27 = lshr i64 %22, 8
  %28 = trunc i64 %27 to i8
  %29 = lshr i64 %22, 16
  %30 = trunc i64 %29 to i8
  %31 = lshr i64 %22, 24
  %32 = trunc i64 %31 to i8
  %33 = lshr i64 %22, 32
  %34 = trunc i64 %33 to i8
  %35 = lshr i64 %22, 40
  %36 = trunc i64 %35 to i8
  %37 = lshr i64 %22, 48
  %38 = trunc i64 %37 to i8
  %39 = lshr i64 %22, 56
  %40 = trunc i64 %39 to i8
  %41 = bitcast %"class.(anonymous namespace)::BitMatrix"* %6 to i8*
  call void @llvm.lifetime.start(i64 288, i8* nonnull %41) 
  call void @llvm.memset.p0i8.i64(i8* nonnull %41, i8 0, i64 32, i32 8, i1 false) 
  %42 = lshr i8 %12, 2
  %43 = extractelement <2 x i64> %19, i32 0
  %44 = trunc i64 %43 to i8
  %45 = icmp eq i8 %44, 0
  %46 = select i1 %45, i64 0, i64 16
  %47 = icmp eq i8 %26, 0
  %48 = select i1 %47, i64 0, i64 16
  %49 = and i64 %43, 65280
  %50 = icmp eq i64 %49, 0
  %51 = xor i1 %45, true
  %52 = and i1 %50, %51
  %53 = select i1 %52, i64 1, i64 %46
  %54 = icmp eq i8 %28, 0
  %55 = xor i1 %47, true
  %56 = and i1 %54, %55
  %57 = select i1 %56, i64 1, i64 %48
  %58 = and i64 %43, 16711680
  %59 = icmp eq i64 %58, 0
  %60 = icmp ugt i64 %53, 2
  %61 = and i1 %59, %60
  %62 = select i1 %61, i64 2, i64 %53
  %63 = icmp eq i8 %30, 0
  %64 = icmp ugt i64 %57, 2
  %65 = and i1 %63, %64
  %66 = select i1 %65, i64 2, i64 %57
  %67 = and i64 %43, 4278190080
  %68 = icmp eq i64 %67, 0
  %69 = icmp ugt i64 %62, 3
  %70 = and i1 %68, %69
  %71 = select i1 %70, i64 3, i64 %62
  %72 = icmp eq i8 %32, 0
  %73 = icmp ugt i64 %66, 3
  %74 = and i1 %72, %73
  %75 = select i1 %74, i64 3, i64 %66
  %76 = and i64 %43, 1095216660480
  %77 = icmp eq i64 %76, 0
  %78 = icmp ugt i64 %71, 4
  %79 = and i1 %77, %78
  %80 = select i1 %79, i64 4, i64 %71
  %81 = icmp eq i8 %34, 0
  %82 = icmp ugt i64 %75, 4
  %83 = and i1 %81, %82
  %84 = select i1 %83, i64 4, i64 %75
  %85 = and i64 %43, 280375465082880
  %86 = icmp eq i64 %85, 0
  %87 = icmp ugt i64 %80, 5
  %88 = and i1 %86, %87
  %89 = select i1 %88, i64 5, i64 %80
  %90 = icmp eq i8 %36, 0
  %91 = icmp ugt i64 %84, 5
  %92 = and i1 %90, %91
  %93 = select i1 %92, i64 5, i64 %84
  %94 = and i64 %43, 71776119061217280
  %95 = icmp eq i64 %94, 0
  %96 = icmp ugt i64 %89, 6
  %97 = and i1 %95, %96
  %98 = select i1 %97, i64 6, i64 %89
  %99 = icmp eq i8 %38, 0
  %100 = icmp ugt i64 %93, 6
  %101 = and i1 %99, %100
  %102 = select i1 %101, i64 6, i64 %93
  %103 = icmp ult i64 %43, 72057594037927936
  %104 = icmp ugt i64 %98, 7
  %105 = and i1 %103, %104
  %106 = select i1 %105, i64 7, i64 %98
  %107 = icmp eq i8 %40, 0
  %108 = icmp ugt i64 %102, 7
  %109 = and i1 %107, %108
  %110 = select i1 %109, i64 7, i64 %102
  %111 = bitcast i64* %20 to i8*
  %112 = load i8, i8* %111, align 8
  %113 = icmp eq i8 %112, 0
  %114 = icmp ugt i64 %106, 8
  %115 = and i1 %113, %114
  %116 = select i1 %115, i64 8, i64 %106
  %117 = trunc i64 %25 to i8
  %118 = icmp eq i8 %117, 0
  %119 = icmp ugt i64 %110, 8
  %120 = and i1 %118, %119
  %121 = select i1 %120, i64 8, i64 %110
  %122 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %16, i64 0, i32 0, i64 9
  %123 = load i8, i8* %122, align 1
  %124 = icmp eq i8 %123, 0
  %125 = icmp ugt i64 %116, 9
  %126 = and i1 %124, %125
  %127 = select i1 %126, i64 9, i64 %116
  %128 = lshr i64 %25, 8
  %129 = trunc i64 %128 to i8
  %130 = icmp eq i8 %129, 0
  %131 = icmp ugt i64 %121, 9
  %132 = and i1 %130, %131
  %133 = select i1 %132, i64 9, i64 %121
  %134 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %16, i64 0, i32 0, i64 10
  %135 = load i8, i8* %134, align 2
  %136 = icmp eq i8 %135, 0
  %137 = icmp ugt i64 %127, 10
  %138 = and i1 %136, %137
  %139 = select i1 %138, i64 10, i64 %127
  %140 = lshr i64 %25, 16
  %141 = trunc i64 %140 to i8
  %142 = icmp eq i8 %141, 0
  %143 = icmp ugt i64 %133, 10
  %144 = and i1 %142, %143
  %145 = select i1 %144, i64 10, i64 %133
  %146 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %16, i64 0, i32 0, i64 11
  %147 = load i8, i8* %146, align 1
  %148 = icmp eq i8 %147, 0
  %149 = icmp ugt i64 %139, 11
  %150 = and i1 %148, %149
  %151 = select i1 %150, i64 11, i64 %139
  %152 = lshr i64 %25, 24
  %153 = trunc i64 %152 to i8
  %154 = icmp eq i8 %153, 0
  %155 = icmp ugt i64 %145, 11
  %156 = and i1 %154, %155
  %157 = select i1 %156, i64 11, i64 %145
  %158 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %16, i64 0, i32 0, i64 12
  %159 = load i8, i8* %158, align 4
  %160 = icmp eq i8 %159, 0
  %161 = icmp ugt i64 %151, 12
  %162 = and i1 %160, %161
  %163 = select i1 %162, i64 12, i64 %151
  %164 = lshr i64 %25, 32
  %165 = trunc i64 %164 to i8
  %166 = icmp eq i8 %165, 0
  %167 = icmp ugt i64 %157, 12
  %168 = and i1 %166, %167
  %169 = select i1 %168, i64 12, i64 %157
  %170 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %16, i64 0, i32 0, i64 13
  %171 = load i8, i8* %170, align 1
  %172 = icmp eq i8 %171, 0
  %173 = icmp ugt i64 %163, 13
  %174 = and i1 %172, %173
  %175 = select i1 %174, i64 13, i64 %163
  %176 = lshr i64 %25, 40
  %177 = trunc i64 %176 to i8
  %178 = icmp eq i8 %177, 0
  %179 = icmp ugt i64 %169, 13
  %180 = and i1 %178, %179
  %181 = select i1 %180, i64 13, i64 %169
  %182 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %16, i64 0, i32 0, i64 14
  %183 = load i8, i8* %182, align 2
  %184 = icmp eq i8 %183, 0
  %185 = icmp ugt i64 %175, 14
  %186 = and i1 %184, %185
  %187 = select i1 %186, i64 14, i64 %175
  %188 = lshr i64 %25, 48
  %189 = trunc i64 %188 to i8
  %190 = icmp eq i8 %189, 0
  %191 = icmp ugt i64 %181, 14
  %192 = and i1 %190, %191
  %193 = select i1 %192, i64 14, i64 %181
  %194 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %16, i64 0, i32 0, i64 15
  %195 = load i8, i8* %194, align 1
  %196 = icmp eq i8 %195, 0
  %197 = icmp ugt i64 %187, 15
  %198 = and i1 %196, %197
  %199 = lshr i64 %25, 56
  %200 = trunc i64 %199 to i8
  %201 = icmp eq i8 %200, 0
  %202 = icmp ugt i64 %193, 15
  %203 = and i1 %201, %202
  %204 = select i1 %203, i64 15, i64 %193
  %205 = trunc i8 %42 to i2
  %206 = icmp eq i2 %205, 1
  br label %210

; <label>:207:                                    ; preds = %253
  %208 = select i1 %198, i64 15, i64 %187
  %209 = lshr i8 %12, 4
  switch i2 %205, label %781 [
    i2 0, label %374
    i2 1, label %405
    i2 -2, label %446
    i2 -1, label %741
  ]

; <label>:210:                                    ; preds = %253, %14
  %211 = phi i64 [ 0, %14 ], [ %259, %253 ]
  %212 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %16, i64 0, i32 0, i64 %211
  %213 = load i8, i8* %212, align 1
  %214 = shl i64 %211, 4
  br i1 %206, label %222, label %215

; <label>:215:                                    ; preds = %210
  %216 = icmp eq i8 %213, %26
  %217 = lshr i64 %211, 2
  %218 = and i64 %217, 288230376151711743
  %219 = getelementptr inbounds %"class.(anonymous namespace)::BitMatrix", %"class.(anonymous namespace)::BitMatrix"* %6, i64 0, i32 0, i32 0, i32 0, i64 %218
  %220 = and i64 %214, 48
  %221 = shl i64 1, %220
  br i1 %216, label %261, label %264

; <label>:222:                                    ; preds = %210
  %223 = and i64 %211, 1
  %224 = icmp eq i64 %223, 0
  br i1 %224, label %239, label %225

; <label>:225:                                    ; preds = %222
  %226 = icmp ugt i8 %26, %213
  %227 = lshr i64 %211, 2
  %228 = and i64 %227, 288230376151711743
  %229 = getelementptr inbounds %"class.(anonymous namespace)::BitMatrix", %"class.(anonymous namespace)::BitMatrix"* %6, i64 0, i32 0, i32 0, i32 0, i64 %228
  %230 = and i64 %214, 48
  %231 = shl i64 1, %230
  br i1 %226, label %235, label %232

; <label>:232:                                    ; preds = %225
  %233 = load i64, i64* %229, align 8
  %234 = or i64 %233, %231
  br label %858

; <label>:235:                                    ; preds = %225
  %236 = xor i64 %231, -1
  %237 = load i64, i64* %229, align 8
  %238 = and i64 %237, %236
  br label %858

; <label>:239:                                    ; preds = %222
  %240 = icmp ult i8 %26, %213
  %241 = lshr i64 %211, 2
  %242 = and i64 %241, 288230376151711743
  %243 = getelementptr inbounds %"class.(anonymous namespace)::BitMatrix", %"class.(anonymous namespace)::BitMatrix"* %6, i64 0, i32 0, i32 0, i32 0, i64 %242
  %244 = and i64 %214, 48
  %245 = shl i64 1, %244
  br i1 %240, label %249, label %246

; <label>:246:                                    ; preds = %239
  %247 = load i64, i64* %243, align 8
  %248 = or i64 %247, %245
  br label %964

; <label>:249:                                    ; preds = %239
  %250 = xor i64 %245, -1
  %251 = load i64, i64* %243, align 8
  %252 = and i64 %251, %250
  br label %964

; <label>:253:                                    ; preds = %964, %858, %268
  %254 = phi i64 [ %1069, %964 ], [ %963, %858 ], [ %372, %268 ]
  %255 = phi i64 [ %1068, %964 ], [ %962, %858 ], [ %373, %268 ]
  %256 = phi i1 [ %1064, %964 ], [ %958, %858 ], [ %368, %268 ]
  %257 = phi i64* [ %243, %964 ], [ %229, %858 ], [ %219, %268 ]
  %258 = select i1 %256, i64 %255, i64 %254
  store i64 %258, i64* %257, align 8
  %259 = add nuw nsw i64 %211, 1
  %260 = icmp eq i64 %259, 16
  br i1 %260, label %207, label %210

; <label>:261:                                    ; preds = %215
  %262 = load i64, i64* %219, align 8
  %263 = or i64 %262, %221
  br label %268

; <label>:264:                                    ; preds = %215
  %265 = xor i64 %221, -1
  %266 = load i64, i64* %219, align 8
  %267 = and i64 %266, %265
  br label %268

; <label>:268:                                    ; preds = %264, %261
  %269 = phi i64 [ %267, %264 ], [ %263, %261 ]
  %270 = icmp eq i8 %213, %28
  %271 = or i64 %220, 1
  %272 = shl i64 1, %271
  %273 = xor i64 %272, -1
  %274 = and i64 %269, %273
  %275 = or i64 %269, %272
  %276 = select i1 %270, i64 %275, i64 %274
  %277 = icmp eq i8 %213, %30
  %278 = or i64 %220, 2
  %279 = shl i64 1, %278
  %280 = xor i64 %279, -1
  %281 = and i64 %276, %280
  %282 = or i64 %276, %279
  %283 = select i1 %277, i64 %282, i64 %281
  %284 = icmp eq i8 %213, %32
  %285 = or i64 %220, 3
  %286 = shl i64 1, %285
  %287 = xor i64 %286, -1
  %288 = and i64 %283, %287
  %289 = or i64 %283, %286
  %290 = select i1 %284, i64 %289, i64 %288
  %291 = icmp eq i8 %213, %34
  %292 = or i64 %220, 4
  %293 = shl i64 1, %292
  %294 = xor i64 %293, -1
  %295 = and i64 %290, %294
  %296 = or i64 %290, %293
  %297 = select i1 %291, i64 %296, i64 %295
  %298 = icmp eq i8 %213, %36
  %299 = or i64 %220, 5
  %300 = shl i64 1, %299
  %301 = xor i64 %300, -1
  %302 = and i64 %297, %301
  %303 = or i64 %297, %300
  %304 = select i1 %298, i64 %303, i64 %302
  %305 = icmp eq i8 %213, %38
  %306 = or i64 %220, 6
  %307 = shl i64 1, %306
  %308 = xor i64 %307, -1
  %309 = and i64 %304, %308
  %310 = or i64 %304, %307
  %311 = select i1 %305, i64 %310, i64 %309
  %312 = icmp eq i8 %213, %40
  %313 = or i64 %220, 7
  %314 = shl i64 1, %313
  %315 = xor i64 %314, -1
  %316 = and i64 %311, %315
  %317 = or i64 %311, %314
  %318 = select i1 %312, i64 %317, i64 %316
  %319 = icmp eq i8 %213, %117
  %320 = or i64 %220, 8
  %321 = shl i64 1, %320
  %322 = xor i64 %321, -1
  %323 = and i64 %318, %322
  %324 = or i64 %318, %321
  %325 = select i1 %319, i64 %324, i64 %323
  %326 = icmp eq i8 %213, %129
  %327 = or i64 %220, 9
  %328 = shl i64 1, %327
  %329 = xor i64 %328, -1
  %330 = and i64 %325, %329
  %331 = or i64 %325, %328
  %332 = select i1 %326, i64 %331, i64 %330
  %333 = icmp eq i8 %213, %141
  %334 = or i64 %220, 10
  %335 = shl i64 1, %334
  %336 = xor i64 %335, -1
  %337 = and i64 %332, %336
  %338 = or i64 %332, %335
  %339 = select i1 %333, i64 %338, i64 %337
  %340 = icmp eq i8 %213, %153
  %341 = or i64 %220, 11
  %342 = shl i64 1, %341
  %343 = xor i64 %342, -1
  %344 = and i64 %339, %343
  %345 = or i64 %339, %342
  %346 = select i1 %340, i64 %345, i64 %344
  %347 = icmp eq i8 %213, %165
  %348 = or i64 %220, 12
  %349 = shl i64 1, %348
  %350 = xor i64 %349, -1
  %351 = and i64 %346, %350
  %352 = or i64 %346, %349
  %353 = select i1 %347, i64 %352, i64 %351
  %354 = icmp eq i8 %213, %177
  %355 = or i64 %220, 13
  %356 = shl i64 1, %355
  %357 = xor i64 %356, -1
  %358 = and i64 %353, %357
  %359 = or i64 %353, %356
  %360 = select i1 %354, i64 %359, i64 %358
  %361 = icmp eq i8 %213, %189
  %362 = or i64 %220, 14
  %363 = shl i64 1, %362
  %364 = xor i64 %363, -1
  %365 = and i64 %360, %364
  %366 = or i64 %360, %363
  %367 = select i1 %361, i64 %366, i64 %365
  store i64 %367, i64* %219, align 8
  %368 = icmp eq i8 %213, %200
  %369 = or i64 %220, 15
  %370 = shl i64 1, %369
  %371 = xor i64 %370, -1
  %372 = and i64 %367, %371
  %373 = or i64 %367, %370
  br label %253

; <label>:374:                                    ; preds = %207
  %375 = icmp eq i64 %204, 0
  %376 = icmp eq i64 %208, 0
  %377 = or i1 %375, %376
  br i1 %377, label %785, label %378

; <label>:378:                                    ; preds = %374
  br label %379

; <label>:379:                                    ; preds = %400, %378
  %380 = phi i64 [ %402, %400 ], [ 0, %378 ]
  %381 = phi i16 [ %403, %400 ], [ 1, %378 ]
  %382 = phi i16 [ %401, %400 ], [ 0, %378 ]
  br label %385

; <label>:383:                                    ; preds = %385
  %384 = icmp ult i64 %396, %208
  br i1 %384, label %385, label %399

; <label>:385:                                    ; preds = %383, %379
  %386 = phi i64 [ 0, %379 ], [ %396, %383 ]
  %387 = shl i64 %386, 4
  %388 = add i64 %387, %380
  %389 = lshr i64 %388, 6
  %390 = getelementptr inbounds %"class.(anonymous namespace)::BitMatrix", %"class.(anonymous namespace)::BitMatrix"* %6, i64 0, i32 0, i32 0, i32 0, i64 %389
  %391 = load i64, i64* %390, align 8
  %392 = and i64 %388, 63
  %393 = shl i64 1, %392
  %394 = and i64 %393, %391
  %395 = icmp eq i64 %394, 0
  %396 = add nuw i64 %386, 1
  br i1 %395, label %383, label %397

; <label>:397:                                    ; preds = %385
  %398 = or i16 %382, %381
  br label %400

; <label>:399:                                    ; preds = %383
  br label %400

; <label>:400:                                    ; preds = %399, %397
  %401 = phi i16 [ %398, %397 ], [ %382, %399 ]
  %402 = add nuw i64 %380, 1
  %403 = shl i16 %381, 1
  %404 = icmp eq i64 %402, %204
  br i1 %404, label %782, label %379

; <label>:405:                                    ; preds = %207
  %406 = icmp eq i64 %204, 0
  br i1 %406, label %785, label %407

; <label>:407:                                    ; preds = %405
  %408 = add i64 %208, -1
  %409 = icmp eq i64 %408, 0
  br i1 %409, label %785, label %410

; <label>:410:                                    ; preds = %407
  br label %411

; <label>:411:                                    ; preds = %442, %410
  %412 = phi i16 [ %438, %442 ], [ 0, %410 ]
  %413 = phi i16 [ %444, %442 ], [ 1, %410 ]
  %414 = phi i64 [ %443, %442 ], [ 0, %410 ]
  br label %415

; <label>:415:                                    ; preds = %415, %411
  %416 = phi i16 [ %412, %411 ], [ %438, %415 ]
  %417 = phi i64 [ 0, %411 ], [ %439, %415 ]
  %418 = shl i64 %417, 4
  %419 = add i64 %418, %414
  %420 = lshr i64 %419, 6
  %421 = getelementptr inbounds %"class.(anonymous namespace)::BitMatrix", %"class.(anonymous namespace)::BitMatrix"* %6, i64 0, i32 0, i32 0, i32 0, i64 %420
  %422 = load i64, i64* %421, align 8
  %423 = and i64 %419, 63
  %424 = shl i64 1, %423
  %425 = and i64 %424, %422
  %426 = or i64 %418, 16
  %427 = add i64 %426, %414
  %428 = lshr i64 %427, 6
  %429 = getelementptr inbounds %"class.(anonymous namespace)::BitMatrix", %"class.(anonymous namespace)::BitMatrix"* %6, i64 0, i32 0, i32 0, i32 0, i64 %428
  %430 = load i64, i64* %429, align 8
  %431 = and i64 %427, 63
  %432 = shl i64 1, %431
  %433 = and i64 %432, %430
  %434 = icmp eq i64 %425, 0
  %435 = icmp eq i64 %433, 0
  %436 = or i1 %434, %435
  %437 = select i1 %436, i16 0, i16 %413
  %438 = or i16 %437, %416
  %439 = add i64 %417, 2
  %440 = icmp ult i64 %439, %408
  %441 = and i1 %440, %436
  br i1 %441, label %415, label %442

; <label>:442:                                    ; preds = %415
  %443 = add nuw i64 %414, 1
  %444 = shl i16 %413, 1
  %445 = icmp eq i64 %443, %204
  br i1 %445, label %783, label %411

; <label>:446:                                    ; preds = %207
  %447 = icmp ne i64 %208, 0
  %448 = icmp ne i64 %204, 0
  %449 = and i1 %448, %447
  br i1 %449, label %450, label %455

; <label>:450:                                    ; preds = %446
  %451 = getelementptr inbounds %"class.(anonymous namespace)::BitMatrix", %"class.(anonymous namespace)::BitMatrix"* %6, i64 0, i32 0, i32 0, i32 0, i64 0
  %452 = load i64, i64* %451, align 8
  %453 = and i64 %452, 1
  %454 = icmp ne i64 %453, 0
  br label %460

; <label>:455:                                    ; preds = %446
  br i1 %447, label %460, label %456

; <label>:456:                                    ; preds = %455
  %457 = xor i1 %448, true
  %458 = zext i1 %457 to i16
  %459 = icmp ugt i64 %204, 1
  br label %467

; <label>:460:                                    ; preds = %455, %450
  %461 = phi i1 [ false, %455 ], [ %454, %450 ]
  %462 = zext i1 %461 to i16
  %463 = icmp ugt i64 %208, 1
  %464 = icmp ugt i64 %204, 1
  %465 = and i1 %464, %463
  br i1 %465, label %473, label %466

; <label>:466:                                    ; preds = %460
  br i1 %463, label %480, label %467

; <label>:467:                                    ; preds = %466, %456
  %468 = phi i16 [ %458, %456 ], [ %462, %466 ]
  %469 = phi i1 [ %459, %456 ], [ %464, %466 ]
  %470 = select i1 %469, i16 0, i16 2
  %471 = or i16 %470, %468
  %472 = icmp ugt i64 %204, 2
  br label %486

; <label>:473:                                    ; preds = %460
  %474 = getelementptr inbounds %"class.(anonymous namespace)::BitMatrix", %"class.(anonymous namespace)::BitMatrix"* %6, i64 0, i32 0, i32 0, i32 0, i64 0
  %475 = load i64, i64* %474, align 8
  %476 = and i64 %475, 131072
  %477 = icmp ne i64 %476, 0
  %478 = select i1 %477, i16 2, i16 0
  %479 = or i16 %478, %462
  br label %480

; <label>:480:                                    ; preds = %473, %466
  %481 = phi i16 [ %462, %466 ], [ %479, %473 ]
  %482 = icmp ugt i64 %208, 2
  %483 = icmp ugt i64 %204, 2
  %484 = and i1 %483, %482
  br i1 %484, label %492, label %485

; <label>:485:                                    ; preds = %480
  br i1 %482, label %499, label %486

; <label>:486:                                    ; preds = %485, %467
  %487 = phi i16 [ %471, %467 ], [ %481, %485 ]
  %488 = phi i1 [ %472, %467 ], [ %483, %485 ]
  %489 = select i1 %488, i16 0, i16 4
  %490 = or i16 %489, %487
  %491 = icmp ugt i64 %204, 3
  br label %505

; <label>:492:                                    ; preds = %480
  %493 = getelementptr inbounds %"class.(anonymous namespace)::BitMatrix", %"class.(anonymous namespace)::BitMatrix"* %6, i64 0, i32 0, i32 0, i32 0, i64 0
  %494 = load i64, i64* %493, align 8
  %495 = and i64 %494, 17179869184
  %496 = icmp ne i64 %495, 0
  %497 = select i1 %496, i16 4, i16 0
  %498 = or i16 %497, %481
  br label %499

; <label>:499:                                    ; preds = %492, %485
  %500 = phi i16 [ %481, %485 ], [ %498, %492 ]
  %501 = icmp ugt i64 %208, 3
  %502 = icmp ugt i64 %204, 3
  %503 = and i1 %502, %501
  br i1 %503, label %511, label %504

; <label>:504:                                    ; preds = %499
  br i1 %501, label %518, label %505

; <label>:505:                                    ; preds = %504, %486
  %506 = phi i16 [ %490, %486 ], [ %500, %504 ]
  %507 = phi i1 [ %491, %486 ], [ %502, %504 ]
  %508 = select i1 %507, i16 0, i16 8
  %509 = or i16 %508, %506
  %510 = icmp ugt i64 %204, 4
  br label %524

; <label>:511:                                    ; preds = %499
  %512 = getelementptr inbounds %"class.(anonymous namespace)::BitMatrix", %"class.(anonymous namespace)::BitMatrix"* %6, i64 0, i32 0, i32 0, i32 0, i64 0
  %513 = load i64, i64* %512, align 8
  %514 = and i64 %513, 2251799813685248
  %515 = icmp ne i64 %514, 0
  %516 = select i1 %515, i16 8, i16 0
  %517 = or i16 %516, %500
  br label %518

; <label>:518:                                    ; preds = %511, %504
  %519 = phi i16 [ %500, %504 ], [ %517, %511 ]
  %520 = icmp ugt i64 %208, 4
  %521 = icmp ugt i64 %204, 4
  %522 = and i1 %521, %520
  br i1 %522, label %530, label %523

; <label>:523:                                    ; preds = %518
  br i1 %520, label %536, label %524

; <label>:524:                                    ; preds = %523, %505
  %525 = phi i16 [ %509, %505 ], [ %519, %523 ]
  %526 = phi i1 [ %510, %505 ], [ %521, %523 ]
  %527 = select i1 %526, i16 0, i16 16
  %528 = or i16 %527, %525
  %529 = icmp ugt i64 %204, 5
  br label %542

; <label>:530:                                    ; preds = %518
  %531 = getelementptr inbounds %"class.(anonymous namespace)::BitMatrix", %"class.(anonymous namespace)::BitMatrix"* %6, i64 0, i32 0, i32 0, i32 0, i64 1
  %532 = load i64, i64* %531, align 8
  %533 = trunc i64 %532 to i16
  %534 = and i16 %533, 16
  %535 = or i16 %534, %519
  br label %536

; <label>:536:                                    ; preds = %530, %523
  %537 = phi i16 [ %519, %523 ], [ %535, %530 ]
  %538 = icmp ugt i64 %208, 5
  %539 = icmp ugt i64 %204, 5
  %540 = and i1 %539, %538
  br i1 %540, label %548, label %541

; <label>:541:                                    ; preds = %536
  br i1 %538, label %555, label %542

; <label>:542:                                    ; preds = %541, %524
  %543 = phi i16 [ %528, %524 ], [ %537, %541 ]
  %544 = phi i1 [ %529, %524 ], [ %539, %541 ]
  %545 = select i1 %544, i16 0, i16 32
  %546 = or i16 %545, %543
  %547 = icmp ugt i64 %204, 6
  br label %561

; <label>:548:                                    ; preds = %536
  %549 = getelementptr inbounds %"class.(anonymous namespace)::BitMatrix", %"class.(anonymous namespace)::BitMatrix"* %6, i64 0, i32 0, i32 0, i32 0, i64 1
  %550 = load i64, i64* %549, align 8
  %551 = and i64 %550, 2097152
  %552 = icmp ne i64 %551, 0
  %553 = select i1 %552, i16 32, i16 0
  %554 = or i16 %553, %537
  br label %555

; <label>:555:                                    ; preds = %548, %541
  %556 = phi i16 [ %537, %541 ], [ %554, %548 ]
  %557 = icmp ugt i64 %208, 6
  %558 = icmp ugt i64 %204, 6
  %559 = and i1 %558, %557
  br i1 %559, label %567, label %560

; <label>:560:                                    ; preds = %555
  br i1 %557, label %574, label %561

; <label>:561:                                    ; preds = %560, %542
  %562 = phi i16 [ %546, %542 ], [ %556, %560 ]
  %563 = phi i1 [ %547, %542 ], [ %558, %560 ]
  %564 = select i1 %563, i16 0, i16 64
  %565 = or i16 %564, %562
  %566 = icmp ugt i64 %204, 7
  br label %580

; <label>:567:                                    ; preds = %555
  %568 = getelementptr inbounds %"class.(anonymous namespace)::BitMatrix", %"class.(anonymous namespace)::BitMatrix"* %6, i64 0, i32 0, i32 0, i32 0, i64 1
  %569 = load i64, i64* %568, align 8
  %570 = and i64 %569, 274877906944
  %571 = icmp ne i64 %570, 0
  %572 = select i1 %571, i16 64, i16 0
  %573 = or i16 %572, %556
  br label %574

; <label>:574:                                    ; preds = %567, %560
  %575 = phi i16 [ %556, %560 ], [ %573, %567 ]
  %576 = icmp ugt i64 %208, 7
  %577 = icmp ugt i64 %204, 7
  %578 = and i1 %577, %576
  br i1 %578, label %586, label %579

; <label>:579:                                    ; preds = %574
  br i1 %576, label %593, label %580

; <label>:580:                                    ; preds = %579, %561
  %581 = phi i16 [ %565, %561 ], [ %575, %579 ]
  %582 = phi i1 [ %566, %561 ], [ %577, %579 ]
  %583 = select i1 %582, i16 0, i16 128
  %584 = or i16 %583, %581
  %585 = icmp ugt i64 %204, 8
  br label %599

; <label>:586:                                    ; preds = %574
  %587 = getelementptr inbounds %"class.(anonymous namespace)::BitMatrix", %"class.(anonymous namespace)::BitMatrix"* %6, i64 0, i32 0, i32 0, i32 0, i64 1
  %588 = load i64, i64* %587, align 8
  %589 = and i64 %588, 36028797018963968
  %590 = icmp ne i64 %589, 0
  %591 = select i1 %590, i16 128, i16 0
  %592 = or i16 %591, %575
  br label %593

; <label>:593:                                    ; preds = %586, %579
  %594 = phi i16 [ %575, %579 ], [ %592, %586 ]
  %595 = icmp ugt i64 %208, 8
  %596 = icmp ugt i64 %204, 8
  %597 = and i1 %596, %595
  br i1 %597, label %605, label %598

; <label>:598:                                    ; preds = %593
  br i1 %595, label %611, label %599

; <label>:599:                                    ; preds = %598, %580
  %600 = phi i16 [ %584, %580 ], [ %594, %598 ]
  %601 = phi i1 [ %585, %580 ], [ %596, %598 ]
  %602 = select i1 %601, i16 0, i16 256
  %603 = or i16 %602, %600
  %604 = icmp ugt i64 %204, 9
  br label %617

; <label>:605:                                    ; preds = %593
  %606 = getelementptr inbounds %"class.(anonymous namespace)::BitMatrix", %"class.(anonymous namespace)::BitMatrix"* %6, i64 0, i32 0, i32 0, i32 0, i64 2
  %607 = load i64, i64* %606, align 8
  %608 = trunc i64 %607 to i16
  %609 = and i16 %608, 256
  %610 = or i16 %609, %594
  br label %611

; <label>:611:                                    ; preds = %605, %598
  %612 = phi i16 [ %594, %598 ], [ %610, %605 ]
  %613 = icmp ugt i64 %208, 9
  %614 = icmp ugt i64 %204, 9
  %615 = and i1 %614, %613
  br i1 %615, label %623, label %616

; <label>:616:                                    ; preds = %611
  br i1 %613, label %630, label %617

; <label>:617:                                    ; preds = %616, %599
  %618 = phi i16 [ %603, %599 ], [ %612, %616 ]
  %619 = phi i1 [ %604, %599 ], [ %614, %616 ]
  %620 = select i1 %619, i16 0, i16 512
  %621 = or i16 %618, %620
  %622 = icmp ugt i64 %204, 10
  br label %636

; <label>:623:                                    ; preds = %611
  %624 = getelementptr inbounds %"class.(anonymous namespace)::BitMatrix", %"class.(anonymous namespace)::BitMatrix"* %6, i64 0, i32 0, i32 0, i32 0, i64 2
  %625 = load i64, i64* %624, align 8
  %626 = and i64 %625, 33554432
  %627 = icmp ne i64 %626, 0
  %628 = select i1 %627, i16 512, i16 0
  %629 = or i16 %628, %612
  br label %630

; <label>:630:                                    ; preds = %623, %616
  %631 = phi i16 [ %612, %616 ], [ %629, %623 ]
  %632 = icmp ugt i64 %208, 10
  %633 = icmp ugt i64 %204, 10
  %634 = and i1 %633, %632
  br i1 %634, label %642, label %635

; <label>:635:                                    ; preds = %630
  br i1 %632, label %649, label %636

; <label>:636:                                    ; preds = %635, %617
  %637 = phi i16 [ %621, %617 ], [ %631, %635 ]
  %638 = phi i1 [ %622, %617 ], [ %633, %635 ]
  %639 = select i1 %638, i16 0, i16 1024
  %640 = or i16 %639, %637
  %641 = icmp ugt i64 %204, 11
  br label %655

; <label>:642:                                    ; preds = %630
  %643 = getelementptr inbounds %"class.(anonymous namespace)::BitMatrix", %"class.(anonymous namespace)::BitMatrix"* %6, i64 0, i32 0, i32 0, i32 0, i64 2
  %644 = load i64, i64* %643, align 8
  %645 = and i64 %644, 4398046511104
  %646 = icmp ne i64 %645, 0
  %647 = select i1 %646, i16 1024, i16 0
  %648 = or i16 %647, %631
  br label %649

; <label>:649:                                    ; preds = %642, %635
  %650 = phi i16 [ %631, %635 ], [ %648, %642 ]
  %651 = icmp ugt i64 %208, 11
  %652 = icmp ugt i64 %204, 11
  %653 = and i1 %652, %651
  br i1 %653, label %661, label %654

; <label>:654:                                    ; preds = %649
  br i1 %651, label %668, label %655

; <label>:655:                                    ; preds = %654, %636
  %656 = phi i16 [ %640, %636 ], [ %650, %654 ]
  %657 = phi i1 [ %641, %636 ], [ %652, %654 ]
  %658 = select i1 %657, i16 0, i16 2048
  %659 = or i16 %658, %656
  %660 = icmp ugt i64 %204, 12
  br label %674

; <label>:661:                                    ; preds = %649
  %662 = getelementptr inbounds %"class.(anonymous namespace)::BitMatrix", %"class.(anonymous namespace)::BitMatrix"* %6, i64 0, i32 0, i32 0, i32 0, i64 2
  %663 = load i64, i64* %662, align 8
  %664 = and i64 %663, 576460752303423488
  %665 = icmp ne i64 %664, 0
  %666 = select i1 %665, i16 2048, i16 0
  %667 = or i16 %666, %650
  br label %668

; <label>:668:                                    ; preds = %661, %654
  %669 = phi i16 [ %650, %654 ], [ %667, %661 ]
  %670 = icmp ugt i64 %208, 12
  %671 = icmp ugt i64 %204, 12
  %672 = and i1 %671, %670
  br i1 %672, label %680, label %673

; <label>:673:                                    ; preds = %668
  br i1 %670, label %686, label %674

; <label>:674:                                    ; preds = %673, %655
  %675 = phi i16 [ %659, %655 ], [ %669, %673 ]
  %676 = phi i1 [ %660, %655 ], [ %671, %673 ]
  %677 = select i1 %676, i16 0, i16 4096
  %678 = or i16 %677, %675
  %679 = icmp ugt i64 %204, 13
  br label %692

; <label>:680:                                    ; preds = %668
  %681 = getelementptr inbounds %"class.(anonymous namespace)::BitMatrix", %"class.(anonymous namespace)::BitMatrix"* %6, i64 0, i32 0, i32 0, i32 0, i64 3
  %682 = load i64, i64* %681, align 8
  %683 = trunc i64 %682 to i16
  %684 = and i16 %683, 4096
  %685 = or i16 %684, %669
  br label %686

; <label>:686:                                    ; preds = %680, %673
  %687 = phi i16 [ %669, %673 ], [ %685, %680 ]
  %688 = icmp ugt i64 %208, 13
  %689 = icmp ugt i64 %204, 13
  %690 = and i1 %689, %688
  br i1 %690, label %698, label %691

; <label>:691:                                    ; preds = %686
  br i1 %688, label %705, label %692

; <label>:692:                                    ; preds = %691, %674
  %693 = phi i16 [ %678, %674 ], [ %687, %691 ]
  %694 = phi i1 [ %679, %674 ], [ %689, %691 ]
  %695 = select i1 %694, i16 0, i16 8192
  %696 = or i16 %695, %693
  %697 = icmp ugt i64 %204, 14
  br label %711

; <label>:698:                                    ; preds = %686
  %699 = getelementptr inbounds %"class.(anonymous namespace)::BitMatrix", %"class.(anonymous namespace)::BitMatrix"* %6, i64 0, i32 0, i32 0, i32 0, i64 3
  %700 = load i64, i64* %699, align 8
  %701 = and i64 %700, 536870912
  %702 = icmp ne i64 %701, 0
  %703 = select i1 %702, i16 8192, i16 0
  %704 = or i16 %703, %687
  br label %705

; <label>:705:                                    ; preds = %698, %691
  %706 = phi i16 [ %687, %691 ], [ %704, %698 ]
  %707 = icmp ugt i64 %208, 14
  %708 = icmp ugt i64 %204, 14
  %709 = and i1 %708, %707
  br i1 %709, label %717, label %710

; <label>:710:                                    ; preds = %705
  br i1 %707, label %724, label %711

; <label>:711:                                    ; preds = %710, %692
  %712 = phi i16 [ %696, %692 ], [ %706, %710 ]
  %713 = phi i1 [ %697, %692 ], [ %708, %710 ]
  %714 = select i1 %713, i16 0, i16 16384
  %715 = or i16 %714, %712
  %716 = icmp ugt i64 %204, 15
  br label %730

; <label>:717:                                    ; preds = %705
  %718 = getelementptr inbounds %"class.(anonymous namespace)::BitMatrix", %"class.(anonymous namespace)::BitMatrix"* %6, i64 0, i32 0, i32 0, i32 0, i64 3
  %719 = load i64, i64* %718, align 8
  %720 = and i64 %719, 70368744177664
  %721 = icmp ne i64 %720, 0
  %722 = select i1 %721, i16 16384, i16 0
  %723 = or i16 %722, %706
  br label %724

; <label>:724:                                    ; preds = %717, %710
  %725 = phi i16 [ %706, %710 ], [ %723, %717 ]
  %726 = icmp ugt i64 %208, 15
  %727 = icmp ugt i64 %204, 15
  %728 = and i1 %727, %726
  br i1 %728, label %735, label %729

; <label>:729:                                    ; preds = %724
  br i1 %726, label %785, label %730

; <label>:730:                                    ; preds = %729, %711
  %731 = phi i16 [ %715, %711 ], [ %725, %729 ]
  %732 = phi i1 [ %716, %711 ], [ %727, %729 ]
  %733 = select i1 %732, i16 0, i16 -32768
  %734 = or i16 %733, %731
  br label %785

; <label>:735:                                    ; preds = %724
  %736 = getelementptr inbounds %"class.(anonymous namespace)::BitMatrix", %"class.(anonymous namespace)::BitMatrix"* %6, i64 0, i32 0, i32 0, i32 0, i64 3
  %737 = load i64, i64* %736, align 8
  %738 = icmp slt i64 %737, 0
  %739 = select i1 %738, i16 -32768, i16 0
  %740 = or i16 %739, %725
  br label %785

; <label>:741:                                    ; preds = %207
  %742 = icmp ugt i64 %208, %204
  br i1 %742, label %785, label %743

; <label>:743:                                    ; preds = %741
  %744 = icmp eq i64 %208, 0
  br i1 %744, label %785, label %745

; <label>:745:                                    ; preds = %743
  br label %746

; <label>:746:                                    ; preds = %776, %745
  %747 = phi i16 [ %777, %776 ], [ -1, %745 ]
  %748 = phi i64 [ %778, %776 ], [ 0, %745 ]
  %749 = phi i16 [ %779, %776 ], [ 1, %745 ]
  %750 = sub nuw nsw i64 16, %748
  br label %751

; <label>:751:                                    ; preds = %765, %746
  %752 = phi i64 [ %767, %765 ], [ %748, %746 ]
  %753 = phi i64 [ %766, %765 ], [ 0, %746 ]
  %754 = icmp ult i64 %752, %204
  br i1 %754, label %755, label %773

; <label>:755:                                    ; preds = %751
  %756 = shl i64 %753, 4
  %757 = add nuw nsw i64 %756, %752
  %758 = lshr i64 %757, 6
  %759 = getelementptr inbounds %"class.(anonymous namespace)::BitMatrix", %"class.(anonymous namespace)::BitMatrix"* %6, i64 0, i32 0, i32 0, i32 0, i64 %758
  %760 = load i64, i64* %759, align 8
  %761 = and i64 %757, 63
  %762 = shl i64 1, %761
  %763 = and i64 %760, %762
  %764 = icmp eq i64 %763, 0
  br i1 %764, label %773, label %765

; <label>:765:                                    ; preds = %755
  %766 = add nuw nsw i64 %753, 1
  %767 = add nuw nsw i64 %752, 1
  %768 = icmp ult i64 %766, %750
  %769 = icmp ult i64 %767, 16
  %770 = and i1 %769, %768
  %771 = icmp ult i64 %766, %208
  %772 = and i1 %771, %770
  br i1 %772, label %751, label %775

; <label>:773:                                    ; preds = %755, %751
  %774 = xor i16 %749, %747
  br label %776

; <label>:775:                                    ; preds = %765
  br label %776

; <label>:776:                                    ; preds = %775, %773
  %777 = phi i16 [ %774, %773 ], [ %747, %775 ]
  %778 = add nuw nsw i64 %748, 1
  %779 = shl i16 %749, 1
  %780 = icmp eq i64 %778, 16
  br i1 %780, label %784, label %746

; <label>:781:                                    ; preds = %207
  unreachable

; <label>:782:                                    ; preds = %400
  br label %785

; <label>:783:                                    ; preds = %442
  br label %785

; <label>:784:                                    ; preds = %776
  br label %785

; <label>:785:                                    ; preds = %784, %783, %782, %743, %741, %735, %730, %729, %407, %405, %374
  %786 = phi i64 [ %208, %374 ], [ %208, %405 ], [ 1, %407 ], [ %208, %729 ], [ %208, %735 ], [ %208, %730 ], [ %208, %741 ], [ 0, %743 ], [ %208, %782 ], [ %208, %783 ], [ %208, %784 ]
  %787 = phi i16 [ 0, %374 ], [ 0, %405 ], [ 0, %407 ], [ %725, %729 ], [ %740, %735 ], [ %734, %730 ], [ 0, %741 ], [ -1, %743 ], [ %401, %782 ], [ %438, %783 ], [ %777, %784 ]
  %788 = trunc i8 %209 to i2
  switch i2 %788, label %796 [
    i2 0, label %797
    i2 1, label %791
    i2 -2, label %797
    i2 -1, label %789
  ]

; <label>:789:                                    ; preds = %785
  %790 = icmp eq i64 %204, 0
  br i1 %790, label %797, label %793

; <label>:791:                                    ; preds = %785
  %792 = xor i16 %787, -1
  br label %797

; <label>:793:                                    ; preds = %789
  %794 = xor i16 %787, 1
  %795 = icmp eq i64 %204, 1
  br i1 %795, label %797, label %815

; <label>:796:                                    ; preds = %785
  unreachable

; <label>:797:                                    ; preds = %854, %851, %848, %845, %842, %839, %836, %833, %830, %827, %824, %821, %818, %815, %793, %791, %789, %785, %785
  %798 = phi i16 [ %792, %791 ], [ %787, %785 ], [ %787, %785 ], [ %852, %851 ], [ %849, %848 ], [ %846, %845 ], [ %843, %842 ], [ %840, %839 ], [ %837, %836 ], [ %834, %833 ], [ %831, %830 ], [ %828, %827 ], [ %825, %824 ], [ %822, %821 ], [ %819, %818 ], [ %816, %815 ], [ %794, %793 ], [ %787, %789 ], [ %857, %854 ]
  %799 = and i8 %12, 64
  %800 = icmp eq i8 %799, 0
  %801 = icmp eq i16 %798, 0
  br i1 %800, label %802, label %807

; <label>:802:                                    ; preds = %797
  br i1 %801, label %1070, label %803

; <label>:803:                                    ; preds = %802
  %804 = zext i16 %798 to i32
  %805 = tail call i32 @llvm.cttz.i32(i32 %804, i1 true) 
  %806 = zext i32 %805 to i64
  br label %1070

; <label>:807:                                    ; preds = %797
  br i1 %801, label %1070, label %808

; <label>:808:                                    ; preds = %807
  %809 = zext i16 %798 to i32
  %810 = tail call i32 @llvm.ctlz.i32(i32 %809, i1 true) 
  %811 = add nuw nsw i32 %810, 65520
  %812 = and i32 %811, 65535
  %813 = zext i32 %812 to i64
  %814 = sub nsw i64 15, %813
  br label %1070

; <label>:815:                                    ; preds = %793
  %816 = xor i16 %787, 3
  %817 = icmp ugt i64 %204, 2
  br i1 %817, label %818, label %797

; <label>:818:                                    ; preds = %815
  %819 = xor i16 %787, 7
  %820 = icmp eq i64 %204, 3
  br i1 %820, label %797, label %821

; <label>:821:                                    ; preds = %818
  %822 = xor i16 %787, 15
  %823 = icmp ugt i64 %204, 4
  br i1 %823, label %824, label %797

; <label>:824:                                    ; preds = %821
  %825 = xor i16 %787, 31
  %826 = icmp eq i64 %204, 5
  br i1 %826, label %797, label %827

; <label>:827:                                    ; preds = %824
  %828 = xor i16 %787, 63
  %829 = icmp ugt i64 %204, 6
  br i1 %829, label %830, label %797

; <label>:830:                                    ; preds = %827
  %831 = xor i16 %787, 127
  %832 = icmp eq i64 %204, 7
  br i1 %832, label %797, label %833

; <label>:833:                                    ; preds = %830
  %834 = xor i16 %787, 255
  %835 = icmp ugt i64 %204, 8
  br i1 %835, label %836, label %797

; <label>:836:                                    ; preds = %833
  %837 = xor i16 %787, 511
  %838 = icmp eq i64 %204, 9
  br i1 %838, label %797, label %839

; <label>:839:                                    ; preds = %836
  %840 = xor i16 %787, 1023
  %841 = icmp ugt i64 %204, 10
  br i1 %841, label %842, label %797

; <label>:842:                                    ; preds = %839
  %843 = xor i16 %787, 2047
  %844 = icmp eq i64 %204, 11
  br i1 %844, label %797, label %845

; <label>:845:                                    ; preds = %842
  %846 = xor i16 %787, 4095
  %847 = icmp ugt i64 %204, 12
  br i1 %847, label %848, label %797

; <label>:848:                                    ; preds = %845
  %849 = xor i16 %787, 8191
  %850 = icmp eq i64 %204, 13
  br i1 %850, label %797, label %851

; <label>:851:                                    ; preds = %848
  %852 = xor i16 %787, 16383
  %853 = icmp ugt i64 %204, 14
  br i1 %853, label %854, label %797

; <label>:854:                                    ; preds = %851
  %855 = icmp ne i64 %204, 15
  %856 = select i1 %855, i16 -1, i16 32767
  %857 = xor i16 %787, %856
  br label %797

; <label>:858:                                    ; preds = %235, %232
  %859 = phi i64 [ %238, %235 ], [ %234, %232 ]
  %860 = icmp ugt i8 %28, %213
  %861 = or i64 %230, 1
  %862 = shl i64 1, %861
  %863 = xor i64 %862, -1
  %864 = and i64 %859, %863
  %865 = or i64 %859, %862
  %866 = select i1 %860, i64 %864, i64 %865
  %867 = icmp ugt i8 %30, %213
  %868 = or i64 %230, 2
  %869 = shl i64 1, %868
  %870 = xor i64 %869, -1
  %871 = and i64 %866, %870
  %872 = or i64 %866, %869
  %873 = select i1 %867, i64 %871, i64 %872
  %874 = icmp ugt i8 %32, %213
  %875 = or i64 %230, 3
  %876 = shl i64 1, %875
  %877 = xor i64 %876, -1
  %878 = and i64 %873, %877
  %879 = or i64 %873, %876
  %880 = select i1 %874, i64 %878, i64 %879
  %881 = icmp ugt i8 %34, %213
  %882 = or i64 %230, 4
  %883 = shl i64 1, %882
  %884 = xor i64 %883, -1
  %885 = and i64 %880, %884
  %886 = or i64 %880, %883
  %887 = select i1 %881, i64 %885, i64 %886
  %888 = icmp ugt i8 %36, %213
  %889 = or i64 %230, 5
  %890 = shl i64 1, %889
  %891 = xor i64 %890, -1
  %892 = and i64 %887, %891
  %893 = or i64 %887, %890
  %894 = select i1 %888, i64 %892, i64 %893
  %895 = icmp ugt i8 %38, %213
  %896 = or i64 %230, 6
  %897 = shl i64 1, %896
  %898 = xor i64 %897, -1
  %899 = and i64 %894, %898
  %900 = or i64 %894, %897
  %901 = select i1 %895, i64 %899, i64 %900
  %902 = icmp ugt i8 %40, %213
  %903 = or i64 %230, 7
  %904 = shl i64 1, %903
  %905 = xor i64 %904, -1
  %906 = and i64 %901, %905
  %907 = or i64 %901, %904
  %908 = select i1 %902, i64 %906, i64 %907
  %909 = icmp ugt i8 %117, %213
  %910 = or i64 %230, 8
  %911 = shl i64 1, %910
  %912 = xor i64 %911, -1
  %913 = and i64 %908, %912
  %914 = or i64 %908, %911
  %915 = select i1 %909, i64 %913, i64 %914
  %916 = icmp ugt i8 %129, %213
  %917 = or i64 %230, 9
  %918 = shl i64 1, %917
  %919 = xor i64 %918, -1
  %920 = and i64 %915, %919
  %921 = or i64 %915, %918
  %922 = select i1 %916, i64 %920, i64 %921
  %923 = icmp ugt i8 %141, %213
  %924 = or i64 %230, 10
  %925 = shl i64 1, %924
  %926 = xor i64 %925, -1
  %927 = and i64 %922, %926
  %928 = or i64 %922, %925
  %929 = select i1 %923, i64 %927, i64 %928
  %930 = icmp ugt i8 %153, %213
  %931 = or i64 %230, 11
  %932 = shl i64 1, %931
  %933 = xor i64 %932, -1
  %934 = and i64 %929, %933
  %935 = or i64 %929, %932
  %936 = select i1 %930, i64 %934, i64 %935
  %937 = icmp ugt i8 %165, %213
  %938 = or i64 %230, 12
  %939 = shl i64 1, %938
  %940 = xor i64 %939, -1
  %941 = and i64 %936, %940
  %942 = or i64 %936, %939
  %943 = select i1 %937, i64 %941, i64 %942
  %944 = icmp ugt i8 %177, %213
  %945 = or i64 %230, 13
  %946 = shl i64 1, %945
  %947 = xor i64 %946, -1
  %948 = and i64 %943, %947
  %949 = or i64 %943, %946
  %950 = select i1 %944, i64 %948, i64 %949
  %951 = icmp ugt i8 %189, %213
  %952 = or i64 %230, 14
  %953 = shl i64 1, %952
  %954 = xor i64 %953, -1
  %955 = and i64 %950, %954
  %956 = or i64 %950, %953
  %957 = select i1 %951, i64 %955, i64 %956
  store i64 %957, i64* %229, align 8
  %958 = icmp ugt i8 %200, %213
  %959 = or i64 %230, 15
  %960 = shl i64 1, %959
  %961 = xor i64 %960, -1
  %962 = and i64 %957, %961
  %963 = or i64 %957, %960
  br label %253

; <label>:964:                                    ; preds = %249, %246
  %965 = phi i64 [ %252, %249 ], [ %248, %246 ]
  %966 = icmp ult i8 %28, %213
  %967 = or i64 %244, 1
  %968 = shl i64 1, %967
  %969 = xor i64 %968, -1
  %970 = and i64 %965, %969
  %971 = or i64 %965, %968
  %972 = select i1 %966, i64 %970, i64 %971
  %973 = icmp ult i8 %30, %213
  %974 = or i64 %244, 2
  %975 = shl i64 1, %974
  %976 = xor i64 %975, -1
  %977 = and i64 %972, %976
  %978 = or i64 %972, %975
  %979 = select i1 %973, i64 %977, i64 %978
  %980 = icmp ult i8 %32, %213
  %981 = or i64 %244, 3
  %982 = shl i64 1, %981
  %983 = xor i64 %982, -1
  %984 = and i64 %979, %983
  %985 = or i64 %979, %982
  %986 = select i1 %980, i64 %984, i64 %985
  %987 = icmp ult i8 %34, %213
  %988 = or i64 %244, 4
  %989 = shl i64 1, %988
  %990 = xor i64 %989, -1
  %991 = and i64 %986, %990
  %992 = or i64 %986, %989
  %993 = select i1 %987, i64 %991, i64 %992
  %994 = icmp ult i8 %36, %213
  %995 = or i64 %244, 5
  %996 = shl i64 1, %995
  %997 = xor i64 %996, -1
  %998 = and i64 %993, %997
  %999 = or i64 %993, %996
  %1000 = select i1 %994, i64 %998, i64 %999
  %1001 = icmp ult i8 %38, %213
  %1002 = or i64 %244, 6
  %1003 = shl i64 1, %1002
  %1004 = xor i64 %1003, -1
  %1005 = and i64 %1000, %1004
  %1006 = or i64 %1000, %1003
  %1007 = select i1 %1001, i64 %1005, i64 %1006
  %1008 = icmp ult i8 %40, %213
  %1009 = or i64 %244, 7
  %1010 = shl i64 1, %1009
  %1011 = xor i64 %1010, -1
  %1012 = and i64 %1007, %1011
  %1013 = or i64 %1007, %1010
  %1014 = select i1 %1008, i64 %1012, i64 %1013
  %1015 = icmp ult i8 %117, %213
  %1016 = or i64 %244, 8
  %1017 = shl i64 1, %1016
  %1018 = xor i64 %1017, -1
  %1019 = and i64 %1014, %1018
  %1020 = or i64 %1014, %1017
  %1021 = select i1 %1015, i64 %1019, i64 %1020
  %1022 = icmp ult i8 %129, %213
  %1023 = or i64 %244, 9
  %1024 = shl i64 1, %1023
  %1025 = xor i64 %1024, -1
  %1026 = and i64 %1021, %1025
  %1027 = or i64 %1021, %1024
  %1028 = select i1 %1022, i64 %1026, i64 %1027
  %1029 = icmp ult i8 %141, %213
  %1030 = or i64 %244, 10
  %1031 = shl i64 1, %1030
  %1032 = xor i64 %1031, -1
  %1033 = and i64 %1028, %1032
  %1034 = or i64 %1028, %1031
  %1035 = select i1 %1029, i64 %1033, i64 %1034
  %1036 = icmp ult i8 %153, %213
  %1037 = or i64 %244, 11
  %1038 = shl i64 1, %1037
  %1039 = xor i64 %1038, -1
  %1040 = and i64 %1035, %1039
  %1041 = or i64 %1035, %1038
  %1042 = select i1 %1036, i64 %1040, i64 %1041
  %1043 = icmp ult i8 %165, %213
  %1044 = or i64 %244, 12
  %1045 = shl i64 1, %1044
  %1046 = xor i64 %1045, -1
  %1047 = and i64 %1042, %1046
  %1048 = or i64 %1042, %1045
  %1049 = select i1 %1043, i64 %1047, i64 %1048
  %1050 = icmp ult i8 %177, %213
  %1051 = or i64 %244, 13
  %1052 = shl i64 1, %1051
  %1053 = xor i64 %1052, -1
  %1054 = and i64 %1049, %1053
  %1055 = or i64 %1049, %1052
  %1056 = select i1 %1050, i64 %1054, i64 %1055
  %1057 = icmp ult i8 %189, %213
  %1058 = or i64 %244, 14
  %1059 = shl i64 1, %1058
  %1060 = xor i64 %1059, -1
  %1061 = and i64 %1056, %1060
  %1062 = or i64 %1056, %1059
  %1063 = select i1 %1057, i64 %1061, i64 %1062
  store i64 %1063, i64* %243, align 8
  %1064 = icmp ult i8 %200, %213
  %1065 = or i64 %244, 15
  %1066 = shl i64 1, %1065
  %1067 = xor i64 %1066, -1
  %1068 = and i64 %1063, %1067
  %1069 = or i64 %1063, %1066
  br label %253

; <label>:1070:                                   ; preds = %808, %807, %803, %802
  %1071 = phi i64 [ %814, %808 ], [ 16, %807 ], [ %806, %803 ], [ 16, %802 ]
  %1072 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 5, i32 0, i32 0
  %1073 = and i64 %1071, 65535
  store i64 %1073, i64* %1072, align 8
  %1074 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  %1075 = icmp ne i16 %798, 0
  %1076 = zext i1 %1075 to i8
  store i8 %1076, i8* %1074, align 1
  %1077 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  %1078 = icmp ult i64 %204, 16
  %1079 = zext i1 %1078 to i8
  store i8 %1079, i8* %1077, align 1
  %1080 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  %1081 = icmp ult i64 %786, 16
  %1082 = zext i1 %1081 to i8
  store i8 %1082, i8* %1080, align 1
  %1083 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  %1084 = trunc i16 %798 to i8
  %1085 = and i8 %1084, 1
  store i8 %1085, i8* %1083, align 1
  %1086 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 0, i8* %1086, align 1
  %1087 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 0, i8* %1087, align 1
  call void @llvm.lifetime.end(i64 288, i8* nonnull %41) 
  call void @llvm.lifetime.end(i64 16, i8* nonnull %17) 
  br label %3313

; <label>:1088:                                   ; preds = %5
  %1089 = bitcast { i64, i64 }* %9 to %struct.uint16v8_t*
  %1090 = bitcast { i64, i64 }* %9 to i8*
  call void @llvm.lifetime.start(i64 16, i8* nonnull %1090) 
  %1091 = bitcast i8* %2 to i64*
  %1092 = load i64, i64* %1091, align 1
  %1093 = getelementptr inbounds i8, i8* %2, i64 8
  %1094 = bitcast i8* %1093 to i64*
  %1095 = load i64, i64* %1094, align 1
  %1096 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %9, i64 0, i32 0
  store i64 %1092, i64* %1096, align 8
  %1097 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %9, i64 0, i32 1
  store i64 %1095, i64* %1097, align 8
  %1098 = bitcast i8* %3 to i64*
  %1099 = load i64, i64* %1098, align 1
  %1100 = getelementptr inbounds i8, i8* %3, i64 8
  %1101 = bitcast i8* %1100 to i64*
  %1102 = load i64, i64* %1101, align 1
  %1103 = trunc i64 %1099 to i16
  %1104 = lshr i64 %1099, 16
  %1105 = trunc i64 %1104 to i16
  %1106 = lshr i64 %1099, 32
  %1107 = trunc i64 %1106 to i16
  %1108 = lshr i64 %1099, 48
  %1109 = trunc i64 %1108 to i16
  %1110 = lshr i8 %12, 2
  %1111 = trunc i64 %1092 to i16
  %1112 = icmp eq i16 %1111, 0
  %1113 = select i1 %1112, i64 0, i64 8
  %1114 = icmp eq i16 %1103, 0
  %1115 = select i1 %1114, i64 0, i64 8
  %1116 = and i64 %1092, 4294901760
  %1117 = icmp eq i64 %1116, 0
  %1118 = xor i1 %1112, true
  %1119 = and i1 %1117, %1118
  %1120 = select i1 %1119, i64 1, i64 %1113
  %1121 = icmp eq i16 %1105, 0
  %1122 = xor i1 %1114, true
  %1123 = and i1 %1121, %1122
  %1124 = select i1 %1123, i64 1, i64 %1115
  %1125 = and i64 %1092, 281470681743360
  %1126 = icmp eq i64 %1125, 0
  %1127 = icmp ugt i64 %1120, 2
  %1128 = and i1 %1126, %1127
  %1129 = select i1 %1128, i64 2, i64 %1120
  %1130 = icmp eq i16 %1107, 0
  %1131 = icmp ugt i64 %1124, 2
  %1132 = and i1 %1130, %1131
  %1133 = select i1 %1132, i64 2, i64 %1124
  %1134 = icmp ult i64 %1092, 281474976710656
  %1135 = icmp ugt i64 %1129, 3
  %1136 = and i1 %1134, %1135
  %1137 = select i1 %1136, i64 3, i64 %1129
  %1138 = icmp eq i16 %1109, 0
  %1139 = icmp ugt i64 %1133, 3
  %1140 = and i1 %1138, %1139
  %1141 = select i1 %1140, i64 3, i64 %1133
  %1142 = trunc i64 %1095 to i16
  %1143 = icmp eq i16 %1142, 0
  %1144 = icmp ugt i64 %1137, 4
  %1145 = and i1 %1143, %1144
  %1146 = select i1 %1145, i64 4, i64 %1137
  %1147 = trunc i64 %1102 to i16
  %1148 = icmp eq i16 %1147, 0
  %1149 = icmp ugt i64 %1141, 4
  %1150 = and i1 %1148, %1149
  %1151 = select i1 %1150, i64 4, i64 %1141
  %1152 = and i64 %1095, 4294901760
  %1153 = icmp eq i64 %1152, 0
  %1154 = icmp ugt i64 %1146, 5
  %1155 = and i1 %1153, %1154
  %1156 = select i1 %1155, i64 5, i64 %1146
  %1157 = lshr i64 %1102, 16
  %1158 = trunc i64 %1157 to i16
  %1159 = icmp eq i16 %1158, 0
  %1160 = icmp ugt i64 %1151, 5
  %1161 = and i1 %1159, %1160
  %1162 = select i1 %1161, i64 5, i64 %1151
  %1163 = and i64 %1095, 281470681743360
  %1164 = icmp eq i64 %1163, 0
  %1165 = icmp ugt i64 %1156, 6
  %1166 = and i1 %1164, %1165
  %1167 = select i1 %1166, i64 6, i64 %1156
  %1168 = lshr i64 %1102, 32
  %1169 = trunc i64 %1168 to i16
  %1170 = icmp eq i16 %1169, 0
  %1171 = icmp ugt i64 %1162, 6
  %1172 = and i1 %1170, %1171
  %1173 = select i1 %1172, i64 6, i64 %1162
  %1174 = icmp ult i64 %1095, 281474976710656
  %1175 = icmp ugt i64 %1167, 7
  %1176 = and i1 %1174, %1175
  %1177 = select i1 %1176, i64 7, i64 %1167
  %1178 = lshr i64 %1102, 48
  %1179 = trunc i64 %1178 to i16
  %1180 = icmp eq i16 %1179, 0
  %1181 = icmp ugt i64 %1173, 7
  %1182 = and i1 %1180, %1181
  %1183 = select i1 %1182, i64 7, i64 %1173
  %1184 = lshr i8 %12, 4
  %1185 = trunc i8 %1110 to i2
  %1186 = icmp eq i2 %1185, 1
  br i1 %1186, label %1188, label %1187

; <label>:1187:                                   ; preds = %1088
  br label %1320

; <label>:1188:                                   ; preds = %1088
  br label %1189

; <label>:1189:                                   ; preds = %1313, %1188
  %1190 = phi i16 [ %1315, %1313 ], [ %1111, %1188 ]
  %1191 = phi i64 [ %1311, %1313 ], [ 0, %1188 ]
  %1192 = phi i64 [ %1310, %1313 ], [ 0, %1188 ]
  %1193 = and i64 %1191, 1
  %1194 = icmp eq i64 %1193, 0
  %1195 = shl i64 %1191, 3
  br i1 %1194, label %1251, label %1196

; <label>:1196:                                   ; preds = %1189
  %1197 = icmp ugt i16 %1103, %1190
  %1198 = shl i64 1, %1195
  %1199 = xor i64 %1198, -1
  %1200 = and i64 %1192, %1199
  %1201 = or i64 %1198, %1192
  %1202 = select i1 %1197, i64 %1200, i64 %1201
  %1203 = icmp ugt i16 %1105, %1190
  %1204 = or i64 %1195, 1
  %1205 = shl i64 1, %1204
  %1206 = xor i64 %1205, -1
  %1207 = and i64 %1202, %1206
  %1208 = or i64 %1202, %1205
  %1209 = select i1 %1203, i64 %1207, i64 %1208
  %1210 = icmp ugt i16 %1107, %1190
  %1211 = or i64 %1195, 2
  %1212 = shl i64 1, %1211
  %1213 = xor i64 %1212, -1
  %1214 = and i64 %1209, %1213
  %1215 = or i64 %1209, %1212
  %1216 = select i1 %1210, i64 %1214, i64 %1215
  %1217 = icmp ugt i16 %1109, %1190
  %1218 = or i64 %1195, 3
  %1219 = shl i64 1, %1218
  %1220 = xor i64 %1219, -1
  %1221 = and i64 %1216, %1220
  %1222 = or i64 %1216, %1219
  %1223 = select i1 %1217, i64 %1221, i64 %1222
  %1224 = icmp ugt i16 %1147, %1190
  %1225 = or i64 %1195, 4
  %1226 = shl i64 1, %1225
  %1227 = xor i64 %1226, -1
  %1228 = and i64 %1223, %1227
  %1229 = or i64 %1223, %1226
  %1230 = select i1 %1224, i64 %1228, i64 %1229
  %1231 = icmp ugt i16 %1158, %1190
  %1232 = or i64 %1195, 5
  %1233 = shl i64 1, %1232
  %1234 = xor i64 %1233, -1
  %1235 = and i64 %1230, %1234
  %1236 = or i64 %1230, %1233
  %1237 = select i1 %1231, i64 %1235, i64 %1236
  %1238 = icmp ugt i16 %1169, %1190
  %1239 = or i64 %1195, 6
  %1240 = shl i64 1, %1239
  %1241 = xor i64 %1240, -1
  %1242 = and i64 %1237, %1241
  %1243 = or i64 %1237, %1240
  %1244 = select i1 %1238, i64 %1242, i64 %1243
  %1245 = icmp ugt i16 %1179, %1190
  %1246 = or i64 %1195, 7
  %1247 = shl i64 1, %1246
  %1248 = xor i64 %1247, -1
  %1249 = and i64 %1244, %1248
  %1250 = or i64 %1244, %1247
  br label %1306

; <label>:1251:                                   ; preds = %1189
  %1252 = icmp ult i16 %1103, %1190
  %1253 = shl i64 1, %1195
  %1254 = xor i64 %1253, -1
  %1255 = and i64 %1192, %1254
  %1256 = or i64 %1253, %1192
  %1257 = select i1 %1252, i64 %1255, i64 %1256
  %1258 = icmp ult i16 %1105, %1190
  %1259 = or i64 %1195, 1
  %1260 = shl i64 1, %1259
  %1261 = xor i64 %1260, -1
  %1262 = and i64 %1257, %1261
  %1263 = or i64 %1257, %1260
  %1264 = select i1 %1258, i64 %1262, i64 %1263
  %1265 = icmp ult i16 %1107, %1190
  %1266 = or i64 %1195, 2
  %1267 = shl i64 1, %1266
  %1268 = xor i64 %1267, -1
  %1269 = and i64 %1264, %1268
  %1270 = or i64 %1264, %1267
  %1271 = select i1 %1265, i64 %1269, i64 %1270
  %1272 = icmp ult i16 %1109, %1190
  %1273 = or i64 %1195, 3
  %1274 = shl i64 1, %1273
  %1275 = xor i64 %1274, -1
  %1276 = and i64 %1271, %1275
  %1277 = or i64 %1271, %1274
  %1278 = select i1 %1272, i64 %1276, i64 %1277
  %1279 = icmp ult i16 %1147, %1190
  %1280 = or i64 %1195, 4
  %1281 = shl i64 1, %1280
  %1282 = xor i64 %1281, -1
  %1283 = and i64 %1278, %1282
  %1284 = or i64 %1278, %1281
  %1285 = select i1 %1279, i64 %1283, i64 %1284
  %1286 = icmp ult i16 %1158, %1190
  %1287 = or i64 %1195, 5
  %1288 = shl i64 1, %1287
  %1289 = xor i64 %1288, -1
  %1290 = and i64 %1285, %1289
  %1291 = or i64 %1285, %1288
  %1292 = select i1 %1286, i64 %1290, i64 %1291
  %1293 = icmp ult i16 %1169, %1190
  %1294 = or i64 %1195, 6
  %1295 = shl i64 1, %1294
  %1296 = xor i64 %1295, -1
  %1297 = and i64 %1292, %1296
  %1298 = or i64 %1292, %1295
  %1299 = select i1 %1293, i64 %1297, i64 %1298
  %1300 = icmp ult i16 %1179, %1190
  %1301 = or i64 %1195, 7
  %1302 = shl i64 1, %1301
  %1303 = xor i64 %1302, -1
  %1304 = and i64 %1299, %1303
  %1305 = or i64 %1299, %1302
  br label %1306

; <label>:1306:                                   ; preds = %1251, %1196
  %1307 = phi i64 [ %1250, %1196 ], [ %1305, %1251 ]
  %1308 = phi i64 [ %1249, %1196 ], [ %1304, %1251 ]
  %1309 = phi i1 [ %1245, %1196 ], [ %1300, %1251 ]
  %1310 = select i1 %1309, i64 %1308, i64 %1307
  %1311 = add nuw nsw i64 %1191, 1
  %1312 = icmp eq i64 %1311, 8
  br i1 %1312, label %1316, label %1313

; <label>:1313:                                   ; preds = %1306
  %1314 = getelementptr inbounds %struct.uint16v8_t, %struct.uint16v8_t* %1089, i64 0, i32 0, i64 %1311
  %1315 = load i16, i16* %1314, align 2
  br label %1189

; <label>:1316:                                   ; preds = %1306
  br label %1318

; <label>:1317:                                   ; preds = %1320
  br label %1318

; <label>:1318:                                   ; preds = %1317, %1316
  %1319 = phi i64 [ %1310, %1316 ], [ %1379, %1317 ]
  switch i2 %1185, label %1593 [
    i2 0, label %1385
    i2 1, label %1413
    i2 -2, label %1446
    i2 -1, label %1576
  ]

; <label>:1320:                                   ; preds = %1382, %1187
  %1321 = phi i16 [ %1384, %1382 ], [ %1111, %1187 ]
  %1322 = phi i64 [ %1380, %1382 ], [ 0, %1187 ]
  %1323 = phi i64 [ %1379, %1382 ], [ 0, %1187 ]
  %1324 = shl i64 %1322, 3
  %1325 = icmp eq i16 %1321, %1103
  %1326 = shl i64 1, %1324
  %1327 = xor i64 %1326, -1
  %1328 = and i64 %1323, %1327
  %1329 = or i64 %1326, %1323
  %1330 = select i1 %1325, i64 %1329, i64 %1328
  %1331 = icmp eq i16 %1321, %1105
  %1332 = or i64 %1324, 1
  %1333 = shl i64 1, %1332
  %1334 = xor i64 %1333, -1
  %1335 = and i64 %1330, %1334
  %1336 = or i64 %1330, %1333
  %1337 = select i1 %1331, i64 %1336, i64 %1335
  %1338 = icmp eq i16 %1321, %1107
  %1339 = or i64 %1324, 2
  %1340 = shl i64 1, %1339
  %1341 = xor i64 %1340, -1
  %1342 = and i64 %1337, %1341
  %1343 = or i64 %1337, %1340
  %1344 = select i1 %1338, i64 %1343, i64 %1342
  %1345 = icmp eq i16 %1321, %1109
  %1346 = or i64 %1324, 3
  %1347 = shl i64 1, %1346
  %1348 = xor i64 %1347, -1
  %1349 = and i64 %1344, %1348
  %1350 = or i64 %1344, %1347
  %1351 = select i1 %1345, i64 %1350, i64 %1349
  %1352 = icmp eq i16 %1321, %1147
  %1353 = or i64 %1324, 4
  %1354 = shl i64 1, %1353
  %1355 = xor i64 %1354, -1
  %1356 = and i64 %1351, %1355
  %1357 = or i64 %1351, %1354
  %1358 = select i1 %1352, i64 %1357, i64 %1356
  %1359 = icmp eq i16 %1321, %1158
  %1360 = or i64 %1324, 5
  %1361 = shl i64 1, %1360
  %1362 = xor i64 %1361, -1
  %1363 = and i64 %1358, %1362
  %1364 = or i64 %1358, %1361
  %1365 = select i1 %1359, i64 %1364, i64 %1363
  %1366 = icmp eq i16 %1321, %1169
  %1367 = or i64 %1324, 6
  %1368 = shl i64 1, %1367
  %1369 = xor i64 %1368, -1
  %1370 = and i64 %1365, %1369
  %1371 = or i64 %1365, %1368
  %1372 = select i1 %1366, i64 %1371, i64 %1370
  %1373 = icmp eq i16 %1321, %1179
  %1374 = or i64 %1324, 7
  %1375 = shl i64 1, %1374
  %1376 = xor i64 %1375, -1
  %1377 = and i64 %1372, %1376
  %1378 = or i64 %1372, %1375
  %1379 = select i1 %1373, i64 %1378, i64 %1377
  %1380 = add nuw nsw i64 %1322, 1
  %1381 = icmp eq i64 %1380, 8
  br i1 %1381, label %1317, label %1382

; <label>:1382:                                   ; preds = %1320
  %1383 = getelementptr inbounds %struct.uint16v8_t, %struct.uint16v8_t* %1089, i64 0, i32 0, i64 %1380
  %1384 = load i16, i16* %1383, align 2
  br label %1320

; <label>:1385:                                   ; preds = %1318
  %1386 = icmp eq i64 %1183, 0
  %1387 = icmp eq i64 %1177, 0
  %1388 = or i1 %1386, %1387
  br i1 %1388, label %1596, label %1389

; <label>:1389:                                   ; preds = %1385
  br label %1390

; <label>:1390:                                   ; preds = %1408, %1389
  %1391 = phi i64 [ %1410, %1408 ], [ 0, %1389 ]
  %1392 = phi i16 [ %1411, %1408 ], [ 1, %1389 ]
  %1393 = phi i16 [ %1409, %1408 ], [ 0, %1389 ]
  br label %1396

; <label>:1394:                                   ; preds = %1396
  %1395 = icmp ult i64 %1404, %1177
  br i1 %1395, label %1396, label %1407

; <label>:1396:                                   ; preds = %1394, %1390
  %1397 = phi i64 [ 0, %1390 ], [ %1404, %1394 ]
  %1398 = shl i64 %1397, 3
  %1399 = add i64 %1398, %1391
  %1400 = and i64 %1399, 63
  %1401 = shl i64 1, %1400
  %1402 = and i64 %1401, %1319
  %1403 = icmp eq i64 %1402, 0
  %1404 = add nuw i64 %1397, 1
  br i1 %1403, label %1394, label %1405

; <label>:1405:                                   ; preds = %1396
  %1406 = or i16 %1393, %1392
  br label %1408

; <label>:1407:                                   ; preds = %1394
  br label %1408

; <label>:1408:                                   ; preds = %1407, %1405
  %1409 = phi i16 [ %1406, %1405 ], [ %1393, %1407 ]
  %1410 = add nuw i64 %1391, 1
  %1411 = shl i16 %1392, 1
  %1412 = icmp eq i64 %1410, %1183
  br i1 %1412, label %1594, label %1390

; <label>:1413:                                   ; preds = %1318
  %1414 = icmp eq i64 %1183, 0
  br i1 %1414, label %1596, label %1415

; <label>:1415:                                   ; preds = %1413
  %1416 = add i64 %1177, -1
  %1417 = icmp eq i64 %1416, 0
  br i1 %1417, label %1596, label %1418

; <label>:1418:                                   ; preds = %1415
  br label %1419

; <label>:1419:                                   ; preds = %1442, %1418
  %1420 = phi i16 [ %1438, %1442 ], [ 0, %1418 ]
  %1421 = phi i16 [ %1444, %1442 ], [ 1, %1418 ]
  %1422 = phi i64 [ %1443, %1442 ], [ 0, %1418 ]
  br label %1423

; <label>:1423:                                   ; preds = %1423, %1419
  %1424 = phi i16 [ %1420, %1419 ], [ %1438, %1423 ]
  %1425 = phi i64 [ 0, %1419 ], [ %1439, %1423 ]
  %1426 = shl i64 %1425, 3
  %1427 = add i64 %1426, %1422
  %1428 = and i64 %1427, 63
  %1429 = shl i64 1, %1428
  %1430 = or i64 %1426, 8
  %1431 = add i64 %1430, %1422
  %1432 = and i64 %1431, 63
  %1433 = shl i64 1, %1432
  %1434 = or i64 %1433, %1429
  %1435 = and i64 %1434, %1319
  %1436 = icmp ne i64 %1435, %1434
  %1437 = select i1 %1436, i16 0, i16 %1421
  %1438 = or i16 %1437, %1424
  %1439 = add i64 %1425, 2
  %1440 = icmp ult i64 %1439, %1416
  %1441 = and i1 %1440, %1436
  br i1 %1441, label %1423, label %1442

; <label>:1442:                                   ; preds = %1423
  %1443 = add nuw i64 %1422, 1
  %1444 = shl i16 %1421, 1
  %1445 = icmp eq i64 %1443, %1183
  br i1 %1445, label %1595, label %1419

; <label>:1446:                                   ; preds = %1318
  %1447 = icmp ne i64 %1177, 0
  %1448 = icmp ne i64 %1183, 0
  %1449 = and i1 %1448, %1447
  br i1 %1449, label %1450, label %1453

; <label>:1450:                                   ; preds = %1446
  %1451 = and i64 %1319, 1
  %1452 = icmp ne i64 %1451, 0
  br label %1458

; <label>:1453:                                   ; preds = %1446
  br i1 %1447, label %1458, label %1454

; <label>:1454:                                   ; preds = %1453
  %1455 = xor i1 %1448, true
  %1456 = zext i1 %1455 to i16
  %1457 = icmp ugt i64 %1183, 1
  br label %1465

; <label>:1458:                                   ; preds = %1453, %1450
  %1459 = phi i1 [ false, %1453 ], [ %1452, %1450 ]
  %1460 = zext i1 %1459 to i16
  %1461 = icmp ugt i64 %1177, 1
  %1462 = icmp ugt i64 %1183, 1
  %1463 = and i1 %1462, %1461
  br i1 %1463, label %1471, label %1464

; <label>:1464:                                   ; preds = %1458
  br i1 %1461, label %1476, label %1465

; <label>:1465:                                   ; preds = %1464, %1454
  %1466 = phi i16 [ %1456, %1454 ], [ %1460, %1464 ]
  %1467 = phi i1 [ %1457, %1454 ], [ %1462, %1464 ]
  %1468 = select i1 %1467, i16 0, i16 2
  %1469 = or i16 %1468, %1466
  %1470 = icmp ugt i64 %1183, 2
  br label %1482

; <label>:1471:                                   ; preds = %1458
  %1472 = trunc i64 %1319 to i16
  %1473 = lshr i16 %1472, 8
  %1474 = and i16 %1473, 2
  %1475 = or i16 %1460, %1474
  br label %1476

; <label>:1476:                                   ; preds = %1471, %1464
  %1477 = phi i16 [ %1460, %1464 ], [ %1475, %1471 ]
  %1478 = icmp ugt i64 %1177, 2
  %1479 = icmp ugt i64 %1183, 2
  %1480 = and i1 %1479, %1478
  br i1 %1480, label %1488, label %1481

; <label>:1481:                                   ; preds = %1476
  br i1 %1478, label %1493, label %1482

; <label>:1482:                                   ; preds = %1481, %1465
  %1483 = phi i16 [ %1469, %1465 ], [ %1477, %1481 ]
  %1484 = phi i1 [ %1470, %1465 ], [ %1479, %1481 ]
  %1485 = select i1 %1484, i16 0, i16 4
  %1486 = or i16 %1485, %1483
  %1487 = icmp ugt i64 %1183, 3
  br label %1499

; <label>:1488:                                   ; preds = %1476
  %1489 = and i64 %1319, 262144
  %1490 = icmp ne i64 %1489, 0
  %1491 = select i1 %1490, i16 4, i16 0
  %1492 = or i16 %1477, %1491
  br label %1493

; <label>:1493:                                   ; preds = %1488, %1481
  %1494 = phi i16 [ %1477, %1481 ], [ %1492, %1488 ]
  %1495 = icmp ugt i64 %1177, 3
  %1496 = icmp ugt i64 %1183, 3
  %1497 = and i1 %1496, %1495
  br i1 %1497, label %1505, label %1498

; <label>:1498:                                   ; preds = %1493
  br i1 %1495, label %1510, label %1499

; <label>:1499:                                   ; preds = %1498, %1482
  %1500 = phi i16 [ %1486, %1482 ], [ %1494, %1498 ]
  %1501 = phi i1 [ %1487, %1482 ], [ %1496, %1498 ]
  %1502 = select i1 %1501, i16 0, i16 8
  %1503 = or i16 %1502, %1500
  %1504 = icmp ugt i64 %1183, 4
  br label %1516

; <label>:1505:                                   ; preds = %1493
  %1506 = and i64 %1319, 134217728
  %1507 = icmp ne i64 %1506, 0
  %1508 = select i1 %1507, i16 8, i16 0
  %1509 = or i16 %1494, %1508
  br label %1510

; <label>:1510:                                   ; preds = %1505, %1498
  %1511 = phi i16 [ %1494, %1498 ], [ %1509, %1505 ]
  %1512 = icmp ugt i64 %1177, 4
  %1513 = icmp ugt i64 %1183, 4
  %1514 = and i1 %1513, %1512
  br i1 %1514, label %1522, label %1515

; <label>:1515:                                   ; preds = %1510
  br i1 %1512, label %1527, label %1516

; <label>:1516:                                   ; preds = %1515, %1499
  %1517 = phi i16 [ %1503, %1499 ], [ %1511, %1515 ]
  %1518 = phi i1 [ %1504, %1499 ], [ %1513, %1515 ]
  %1519 = select i1 %1518, i16 0, i16 16
  %1520 = or i16 %1519, %1517
  %1521 = icmp ugt i64 %1183, 5
  br label %1533

; <label>:1522:                                   ; preds = %1510
  %1523 = and i64 %1319, 68719476736
  %1524 = icmp ne i64 %1523, 0
  %1525 = select i1 %1524, i16 16, i16 0
  %1526 = or i16 %1511, %1525
  br label %1527

; <label>:1527:                                   ; preds = %1522, %1515
  %1528 = phi i16 [ %1511, %1515 ], [ %1526, %1522 ]
  %1529 = icmp ugt i64 %1177, 5
  %1530 = icmp ugt i64 %1183, 5
  %1531 = and i1 %1530, %1529
  br i1 %1531, label %1539, label %1532

; <label>:1532:                                   ; preds = %1527
  br i1 %1529, label %1544, label %1533

; <label>:1533:                                   ; preds = %1532, %1516
  %1534 = phi i16 [ %1520, %1516 ], [ %1528, %1532 ]
  %1535 = phi i1 [ %1521, %1516 ], [ %1530, %1532 ]
  %1536 = select i1 %1535, i16 0, i16 32
  %1537 = or i16 %1536, %1534
  %1538 = icmp ugt i64 %1183, 6
  br label %1550

; <label>:1539:                                   ; preds = %1527
  %1540 = and i64 %1319, 35184372088832
  %1541 = icmp ne i64 %1540, 0
  %1542 = select i1 %1541, i16 32, i16 0
  %1543 = or i16 %1528, %1542
  br label %1544

; <label>:1544:                                   ; preds = %1539, %1532
  %1545 = phi i16 [ %1528, %1532 ], [ %1543, %1539 ]
  %1546 = icmp ugt i64 %1177, 6
  %1547 = icmp ugt i64 %1183, 6
  %1548 = and i1 %1547, %1546
  br i1 %1548, label %1556, label %1549

; <label>:1549:                                   ; preds = %1544
  br i1 %1546, label %1561, label %1550

; <label>:1550:                                   ; preds = %1549, %1533
  %1551 = phi i16 [ %1537, %1533 ], [ %1545, %1549 ]
  %1552 = phi i1 [ %1538, %1533 ], [ %1547, %1549 ]
  %1553 = select i1 %1552, i16 0, i16 64
  %1554 = or i16 %1553, %1551
  %1555 = icmp ugt i64 %1183, 7
  br label %1567

; <label>:1556:                                   ; preds = %1544
  %1557 = and i64 %1319, 18014398509481984
  %1558 = icmp ne i64 %1557, 0
  %1559 = select i1 %1558, i16 64, i16 0
  %1560 = or i16 %1545, %1559
  br label %1561

; <label>:1561:                                   ; preds = %1556, %1549
  %1562 = phi i16 [ %1545, %1549 ], [ %1560, %1556 ]
  %1563 = icmp ugt i64 %1177, 7
  %1564 = icmp ugt i64 %1183, 7
  %1565 = and i1 %1564, %1563
  br i1 %1565, label %1572, label %1566

; <label>:1566:                                   ; preds = %1561
  br i1 %1563, label %1596, label %1567

; <label>:1567:                                   ; preds = %1566, %1550
  %1568 = phi i16 [ %1554, %1550 ], [ %1562, %1566 ]
  %1569 = phi i1 [ %1555, %1550 ], [ %1564, %1566 ]
  %1570 = select i1 %1569, i16 0, i16 128
  %1571 = or i16 %1570, %1568
  br label %1596

; <label>:1572:                                   ; preds = %1561
  %1573 = icmp slt i64 %1319, 0
  %1574 = select i1 %1573, i16 128, i16 0
  %1575 = or i16 %1562, %1574
  br label %1596

; <label>:1576:                                   ; preds = %1318
  %1577 = icmp ugt i64 %1177, %1183
  br i1 %1577, label %1596, label %1578

; <label>:1578:                                   ; preds = %1576
  %1579 = icmp eq i64 %1177, 0
  br i1 %1579, label %1596, label %1580

; <label>:1580:                                   ; preds = %1578
  br label %1581

; <label>:1581:                                   ; preds = %1580
  br label %1582

; <label>:1582:                                   ; preds = %1581
  %1583 = icmp eq i64 %1183, 0
  br i1 %1583, label %1589, label %1584

; <label>:1584:                                   ; preds = %1582
  %1585 = and i64 %1319, 1
  %1586 = icmp eq i64 %1585, 0
  br i1 %1586, label %1589, label %1587

; <label>:1587:                                   ; preds = %1584
  %1588 = icmp ugt i64 %1177, 1
  br i1 %1588, label %3314, label %1590

; <label>:1589:                                   ; preds = %3358, %3356, %3351, %3349, %3344, %3342, %3337, %3335, %3330, %3328, %3323, %3321, %3316, %3314, %1584, %1582
  br label %1591

; <label>:1590:                                   ; preds = %3360, %3354, %3347, %3340, %3333, %3326, %3319, %1587
  br label %1591

; <label>:1591:                                   ; preds = %1590, %1589
  %1592 = phi i16 [ 254, %1589 ], [ 255, %1590 ]
  br label %3361

; <label>:1593:                                   ; preds = %1318
  unreachable

; <label>:1594:                                   ; preds = %1408
  br label %1596

; <label>:1595:                                   ; preds = %1442
  br label %1596

; <label>:1596:                                   ; preds = %3667, %1595, %1594, %1578, %1576, %1572, %1567, %1566, %1415, %1413, %1385
  %1597 = phi i64 [ %1177, %1385 ], [ %1177, %1413 ], [ 1, %1415 ], [ %1177, %1566 ], [ %1177, %1572 ], [ %1177, %1567 ], [ %1177, %1576 ], [ 0, %1578 ], [ %1177, %1594 ], [ %1177, %1595 ], [ %1177, %3667 ]
  %1598 = phi i16 [ 0, %1385 ], [ 0, %1413 ], [ 0, %1415 ], [ %1562, %1566 ], [ %1575, %1572 ], [ %1571, %1567 ], [ 0, %1576 ], [ 255, %1578 ], [ %1409, %1594 ], [ %1438, %1595 ], [ %3668, %3667 ]
  %1599 = trunc i8 %1184 to i2
  switch i2 %1599, label %1607 [
    i2 0, label %1608
    i2 1, label %1602
    i2 -2, label %1608
    i2 -1, label %1600
  ]

; <label>:1600:                                   ; preds = %1596
  %1601 = icmp eq i64 %1183, 0
  br i1 %1601, label %1608, label %1604

; <label>:1602:                                   ; preds = %1596
  %1603 = xor i16 %1598, 255
  br label %1608

; <label>:1604:                                   ; preds = %1600
  %1605 = xor i16 %1598, 1
  %1606 = icmp eq i64 %1183, 1
  br i1 %1606, label %1608, label %1626

; <label>:1607:                                   ; preds = %1596
  unreachable

; <label>:1608:                                   ; preds = %1641, %1638, %1635, %1632, %1629, %1626, %1604, %1602, %1600, %1596, %1596
  %1609 = phi i16 [ %1603, %1602 ], [ %1598, %1596 ], [ %1598, %1596 ], [ %1639, %1638 ], [ %1636, %1635 ], [ %1633, %1632 ], [ %1630, %1629 ], [ %1627, %1626 ], [ %1605, %1604 ], [ %1598, %1600 ], [ %1644, %1641 ]
  %1610 = and i8 %12, 64
  %1611 = icmp eq i8 %1610, 0
  %1612 = icmp eq i16 %1609, 0
  br i1 %1611, label %1613, label %1618

; <label>:1613:                                   ; preds = %1608
  br i1 %1612, label %1645, label %1614

; <label>:1614:                                   ; preds = %1613
  %1615 = zext i16 %1609 to i32
  %1616 = tail call i32 @llvm.cttz.i32(i32 %1615, i1 true) 
  %1617 = zext i32 %1616 to i64
  br label %1645

; <label>:1618:                                   ; preds = %1608
  br i1 %1612, label %1645, label %1619

; <label>:1619:                                   ; preds = %1618
  %1620 = zext i16 %1609 to i32
  %1621 = tail call i32 @llvm.ctlz.i32(i32 %1620, i1 true) 
  %1622 = add nuw nsw i32 %1621, 65512
  %1623 = and i32 %1622, 65535
  %1624 = zext i32 %1623 to i64
  %1625 = sub nsw i64 7, %1624
  br label %1645

; <label>:1626:                                   ; preds = %1604
  %1627 = xor i16 %1598, 3
  %1628 = icmp ugt i64 %1183, 2
  br i1 %1628, label %1629, label %1608

; <label>:1629:                                   ; preds = %1626
  %1630 = xor i16 %1598, 7
  %1631 = icmp eq i64 %1183, 3
  br i1 %1631, label %1608, label %1632

; <label>:1632:                                   ; preds = %1629
  %1633 = xor i16 %1598, 15
  %1634 = icmp ugt i64 %1183, 4
  br i1 %1634, label %1635, label %1608

; <label>:1635:                                   ; preds = %1632
  %1636 = xor i16 %1598, 31
  %1637 = icmp eq i64 %1183, 5
  br i1 %1637, label %1608, label %1638

; <label>:1638:                                   ; preds = %1635
  %1639 = xor i16 %1598, 63
  %1640 = icmp ugt i64 %1183, 6
  br i1 %1640, label %1641, label %1608

; <label>:1641:                                   ; preds = %1638
  %1642 = icmp ne i64 %1183, 7
  %1643 = select i1 %1642, i16 255, i16 127
  %1644 = xor i16 %1598, %1643
  br label %1608

; <label>:1645:                                   ; preds = %1619, %1618, %1614, %1613
  %1646 = phi i64 [ %1625, %1619 ], [ 8, %1618 ], [ %1617, %1614 ], [ 8, %1613 ]
  %1647 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 5, i32 0, i32 0
  %1648 = and i64 %1646, 65535
  store i64 %1648, i64* %1647, align 8
  %1649 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  %1650 = icmp ne i16 %1609, 0
  %1651 = zext i1 %1650 to i8
  store i8 %1651, i8* %1649, align 1
  %1652 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  %1653 = icmp ult i64 %1183, 8
  %1654 = zext i1 %1653 to i8
  store i8 %1654, i8* %1652, align 1
  %1655 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  %1656 = icmp ult i64 %1597, 8
  %1657 = zext i1 %1656 to i8
  store i8 %1657, i8* %1655, align 1
  %1658 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  %1659 = trunc i16 %1609 to i8
  %1660 = and i8 %1659, 1
  store i8 %1660, i8* %1658, align 1
  %1661 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 0, i8* %1661, align 1
  %1662 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 0, i8* %1662, align 1
  call void @llvm.lifetime.end(i64 16, i8* nonnull %1090) 
  br label %3313

; <label>:1663:                                   ; preds = %5
  %1664 = bitcast <2 x i64>* %10 to { i64, i64 }*
  %1665 = bitcast <2 x i64>* %10 to %struct.uint8v16_t*
  %1666 = bitcast <2 x i64>* %10 to i8*
  call void @llvm.lifetime.start(i64 16, i8* nonnull %1666) 
  %1667 = bitcast i8* %2 to <2 x i64>*
  %1668 = load <2 x i64>, <2 x i64>* %1667, align 1
  %1669 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %1664, i64 0, i32 1
  store <2 x i64> %1668, <2 x i64>* %10, align 16
  %1670 = bitcast i8* %3 to i64*
  %1671 = load i64, i64* %1670, align 1
  %1672 = getelementptr inbounds i8, i8* %3, i64 8
  %1673 = bitcast i8* %1672 to i64*
  %1674 = load i64, i64* %1673, align 1
  %1675 = trunc i64 %1671 to i8
  %1676 = lshr i64 %1671, 8
  %1677 = trunc i64 %1676 to i8
  %1678 = lshr i64 %1671, 16
  %1679 = trunc i64 %1678 to i8
  %1680 = lshr i64 %1671, 24
  %1681 = trunc i64 %1680 to i8
  %1682 = lshr i64 %1671, 32
  %1683 = trunc i64 %1682 to i8
  %1684 = lshr i64 %1671, 40
  %1685 = trunc i64 %1684 to i8
  %1686 = lshr i64 %1671, 48
  %1687 = trunc i64 %1686 to i8
  %1688 = lshr i64 %1671, 56
  %1689 = trunc i64 %1688 to i8
  %1690 = bitcast %"class.(anonymous namespace)::BitMatrix"* %7 to i8*
  call void @llvm.lifetime.start(i64 288, i8* nonnull %1690) 
  call void @llvm.memset.p0i8.i64(i8* nonnull %1690, i8 0, i64 32, i32 8, i1 false) 
  %1691 = lshr i8 %12, 2
  %1692 = extractelement <2 x i64> %1668, i32 0
  %1693 = trunc i64 %1692 to i8
  %1694 = icmp eq i8 %1693, 0
  %1695 = select i1 %1694, i64 0, i64 16
  %1696 = icmp eq i8 %1675, 0
  %1697 = select i1 %1696, i64 0, i64 16
  %1698 = and i64 %1692, 65280
  %1699 = icmp eq i64 %1698, 0
  %1700 = xor i1 %1694, true
  %1701 = and i1 %1699, %1700
  %1702 = select i1 %1701, i64 1, i64 %1695
  %1703 = icmp eq i8 %1677, 0
  %1704 = xor i1 %1696, true
  %1705 = and i1 %1703, %1704
  %1706 = select i1 %1705, i64 1, i64 %1697
  %1707 = and i64 %1692, 16711680
  %1708 = icmp eq i64 %1707, 0
  %1709 = icmp ugt i64 %1702, 2
  %1710 = and i1 %1708, %1709
  %1711 = select i1 %1710, i64 2, i64 %1702
  %1712 = icmp eq i8 %1679, 0
  %1713 = icmp ugt i64 %1706, 2
  %1714 = and i1 %1712, %1713
  %1715 = select i1 %1714, i64 2, i64 %1706
  %1716 = and i64 %1692, 4278190080
  %1717 = icmp eq i64 %1716, 0
  %1718 = icmp ugt i64 %1711, 3
  %1719 = and i1 %1717, %1718
  %1720 = select i1 %1719, i64 3, i64 %1711
  %1721 = icmp eq i8 %1681, 0
  %1722 = icmp ugt i64 %1715, 3
  %1723 = and i1 %1721, %1722
  %1724 = select i1 %1723, i64 3, i64 %1715
  %1725 = and i64 %1692, 1095216660480
  %1726 = icmp eq i64 %1725, 0
  %1727 = icmp ugt i64 %1720, 4
  %1728 = and i1 %1726, %1727
  %1729 = select i1 %1728, i64 4, i64 %1720
  %1730 = icmp eq i8 %1683, 0
  %1731 = icmp ugt i64 %1724, 4
  %1732 = and i1 %1730, %1731
  %1733 = select i1 %1732, i64 4, i64 %1724
  %1734 = and i64 %1692, 280375465082880
  %1735 = icmp eq i64 %1734, 0
  %1736 = icmp ugt i64 %1729, 5
  %1737 = and i1 %1735, %1736
  %1738 = select i1 %1737, i64 5, i64 %1729
  %1739 = icmp eq i8 %1685, 0
  %1740 = icmp ugt i64 %1733, 5
  %1741 = and i1 %1739, %1740
  %1742 = select i1 %1741, i64 5, i64 %1733
  %1743 = and i64 %1692, 71776119061217280
  %1744 = icmp eq i64 %1743, 0
  %1745 = icmp ugt i64 %1738, 6
  %1746 = and i1 %1744, %1745
  %1747 = select i1 %1746, i64 6, i64 %1738
  %1748 = icmp eq i8 %1687, 0
  %1749 = icmp ugt i64 %1742, 6
  %1750 = and i1 %1748, %1749
  %1751 = select i1 %1750, i64 6, i64 %1742
  %1752 = icmp ult i64 %1692, 72057594037927936
  %1753 = icmp ugt i64 %1747, 7
  %1754 = and i1 %1752, %1753
  %1755 = select i1 %1754, i64 7, i64 %1747
  %1756 = icmp eq i8 %1689, 0
  %1757 = icmp ugt i64 %1751, 7
  %1758 = and i1 %1756, %1757
  %1759 = select i1 %1758, i64 7, i64 %1751
  %1760 = bitcast i64* %1669 to i8*
  %1761 = load i8, i8* %1760, align 8
  %1762 = icmp eq i8 %1761, 0
  %1763 = icmp ugt i64 %1755, 8
  %1764 = and i1 %1762, %1763
  %1765 = select i1 %1764, i64 8, i64 %1755
  %1766 = trunc i64 %1674 to i8
  %1767 = icmp eq i8 %1766, 0
  %1768 = icmp ugt i64 %1759, 8
  %1769 = and i1 %1767, %1768
  %1770 = select i1 %1769, i64 8, i64 %1759
  %1771 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %1665, i64 0, i32 0, i64 9
  %1772 = load i8, i8* %1771, align 1
  %1773 = icmp eq i8 %1772, 0
  %1774 = icmp ugt i64 %1765, 9
  %1775 = and i1 %1773, %1774
  %1776 = select i1 %1775, i64 9, i64 %1765
  %1777 = lshr i64 %1674, 8
  %1778 = trunc i64 %1777 to i8
  %1779 = icmp eq i8 %1778, 0
  %1780 = icmp ugt i64 %1770, 9
  %1781 = and i1 %1779, %1780
  %1782 = select i1 %1781, i64 9, i64 %1770
  %1783 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %1665, i64 0, i32 0, i64 10
  %1784 = load i8, i8* %1783, align 2
  %1785 = icmp eq i8 %1784, 0
  %1786 = icmp ugt i64 %1776, 10
  %1787 = and i1 %1785, %1786
  %1788 = select i1 %1787, i64 10, i64 %1776
  %1789 = lshr i64 %1674, 16
  %1790 = trunc i64 %1789 to i8
  %1791 = icmp eq i8 %1790, 0
  %1792 = icmp ugt i64 %1782, 10
  %1793 = and i1 %1791, %1792
  %1794 = select i1 %1793, i64 10, i64 %1782
  %1795 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %1665, i64 0, i32 0, i64 11
  %1796 = load i8, i8* %1795, align 1
  %1797 = icmp eq i8 %1796, 0
  %1798 = icmp ugt i64 %1788, 11
  %1799 = and i1 %1797, %1798
  %1800 = select i1 %1799, i64 11, i64 %1788
  %1801 = lshr i64 %1674, 24
  %1802 = trunc i64 %1801 to i8
  %1803 = icmp eq i8 %1802, 0
  %1804 = icmp ugt i64 %1794, 11
  %1805 = and i1 %1803, %1804
  %1806 = select i1 %1805, i64 11, i64 %1794
  %1807 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %1665, i64 0, i32 0, i64 12
  %1808 = load i8, i8* %1807, align 4
  %1809 = icmp eq i8 %1808, 0
  %1810 = icmp ugt i64 %1800, 12
  %1811 = and i1 %1809, %1810
  %1812 = select i1 %1811, i64 12, i64 %1800
  %1813 = lshr i64 %1674, 32
  %1814 = trunc i64 %1813 to i8
  %1815 = icmp eq i8 %1814, 0
  %1816 = icmp ugt i64 %1806, 12
  %1817 = and i1 %1815, %1816
  %1818 = select i1 %1817, i64 12, i64 %1806
  %1819 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %1665, i64 0, i32 0, i64 13
  %1820 = load i8, i8* %1819, align 1
  %1821 = icmp eq i8 %1820, 0
  %1822 = icmp ugt i64 %1812, 13
  %1823 = and i1 %1821, %1822
  %1824 = select i1 %1823, i64 13, i64 %1812
  %1825 = lshr i64 %1674, 40
  %1826 = trunc i64 %1825 to i8
  %1827 = icmp eq i8 %1826, 0
  %1828 = icmp ugt i64 %1818, 13
  %1829 = and i1 %1827, %1828
  %1830 = select i1 %1829, i64 13, i64 %1818
  %1831 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %1665, i64 0, i32 0, i64 14
  %1832 = load i8, i8* %1831, align 2
  %1833 = icmp eq i8 %1832, 0
  %1834 = icmp ugt i64 %1824, 14
  %1835 = and i1 %1833, %1834
  %1836 = select i1 %1835, i64 14, i64 %1824
  %1837 = lshr i64 %1674, 48
  %1838 = trunc i64 %1837 to i8
  %1839 = icmp eq i8 %1838, 0
  %1840 = icmp ugt i64 %1830, 14
  %1841 = and i1 %1839, %1840
  %1842 = select i1 %1841, i64 14, i64 %1830
  %1843 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %1665, i64 0, i32 0, i64 15
  %1844 = load i8, i8* %1843, align 1
  %1845 = icmp eq i8 %1844, 0
  %1846 = icmp ugt i64 %1836, 15
  %1847 = and i1 %1845, %1846
  %1848 = lshr i64 %1674, 56
  %1849 = trunc i64 %1848 to i8
  %1850 = icmp eq i8 %1849, 0
  %1851 = icmp ugt i64 %1842, 15
  %1852 = and i1 %1850, %1851
  %1853 = select i1 %1852, i64 15, i64 %1842
  %1854 = trunc i8 %1691 to i2
  %1855 = icmp eq i2 %1854, 1
  br label %1859

; <label>:1856:                                   ; preds = %1902
  %1857 = select i1 %1847, i64 15, i64 %1836
  %1858 = lshr i8 %12, 4
  switch i2 %1854, label %2430 [
    i2 0, label %2023
    i2 1, label %2054
    i2 -2, label %2095
    i2 -1, label %2390
  ]

; <label>:1859:                                   ; preds = %1902, %1663
  %1860 = phi i64 [ 0, %1663 ], [ %1908, %1902 ]
  %1861 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %1665, i64 0, i32 0, i64 %1860
  %1862 = load i8, i8* %1861, align 1
  %1863 = shl i64 %1860, 4
  br i1 %1855, label %1871, label %1864

; <label>:1864:                                   ; preds = %1859
  %1865 = icmp eq i8 %1862, %1675
  %1866 = lshr i64 %1860, 2
  %1867 = and i64 %1866, 288230376151711743
  %1868 = getelementptr inbounds %"class.(anonymous namespace)::BitMatrix", %"class.(anonymous namespace)::BitMatrix"* %7, i64 0, i32 0, i32 0, i32 0, i64 %1867
  %1869 = and i64 %1863, 48
  %1870 = shl i64 1, %1869
  br i1 %1865, label %1910, label %1913

; <label>:1871:                                   ; preds = %1859
  %1872 = and i64 %1860, 1
  %1873 = icmp eq i64 %1872, 0
  br i1 %1873, label %1888, label %1874

; <label>:1874:                                   ; preds = %1871
  %1875 = icmp sgt i8 %1675, %1862
  %1876 = lshr i64 %1860, 2
  %1877 = and i64 %1876, 288230376151711743
  %1878 = getelementptr inbounds %"class.(anonymous namespace)::BitMatrix", %"class.(anonymous namespace)::BitMatrix"* %7, i64 0, i32 0, i32 0, i32 0, i64 %1877
  %1879 = and i64 %1863, 48
  %1880 = shl i64 1, %1879
  br i1 %1875, label %1884, label %1881

; <label>:1881:                                   ; preds = %1874
  %1882 = load i64, i64* %1878, align 8
  %1883 = or i64 %1882, %1880
  br label %2507

; <label>:1884:                                   ; preds = %1874
  %1885 = xor i64 %1880, -1
  %1886 = load i64, i64* %1878, align 8
  %1887 = and i64 %1886, %1885
  br label %2507

; <label>:1888:                                   ; preds = %1871
  %1889 = icmp slt i8 %1675, %1862
  %1890 = lshr i64 %1860, 2
  %1891 = and i64 %1890, 288230376151711743
  %1892 = getelementptr inbounds %"class.(anonymous namespace)::BitMatrix", %"class.(anonymous namespace)::BitMatrix"* %7, i64 0, i32 0, i32 0, i32 0, i64 %1891
  %1893 = and i64 %1863, 48
  %1894 = shl i64 1, %1893
  br i1 %1889, label %1898, label %1895

; <label>:1895:                                   ; preds = %1888
  %1896 = load i64, i64* %1892, align 8
  %1897 = or i64 %1896, %1894
  br label %2613

; <label>:1898:                                   ; preds = %1888
  %1899 = xor i64 %1894, -1
  %1900 = load i64, i64* %1892, align 8
  %1901 = and i64 %1900, %1899
  br label %2613

; <label>:1902:                                   ; preds = %2613, %2507, %1917
  %1903 = phi i64 [ %2718, %2613 ], [ %2612, %2507 ], [ %2021, %1917 ]
  %1904 = phi i64 [ %2717, %2613 ], [ %2611, %2507 ], [ %2022, %1917 ]
  %1905 = phi i1 [ %2713, %2613 ], [ %2607, %2507 ], [ %2017, %1917 ]
  %1906 = phi i64* [ %1892, %2613 ], [ %1878, %2507 ], [ %1868, %1917 ]
  %1907 = select i1 %1905, i64 %1904, i64 %1903
  store i64 %1907, i64* %1906, align 8
  %1908 = add nuw nsw i64 %1860, 1
  %1909 = icmp eq i64 %1908, 16
  br i1 %1909, label %1856, label %1859

; <label>:1910:                                   ; preds = %1864
  %1911 = load i64, i64* %1868, align 8
  %1912 = or i64 %1911, %1870
  br label %1917

; <label>:1913:                                   ; preds = %1864
  %1914 = xor i64 %1870, -1
  %1915 = load i64, i64* %1868, align 8
  %1916 = and i64 %1915, %1914
  br label %1917

; <label>:1917:                                   ; preds = %1913, %1910
  %1918 = phi i64 [ %1916, %1913 ], [ %1912, %1910 ]
  %1919 = icmp eq i8 %1862, %1677
  %1920 = or i64 %1869, 1
  %1921 = shl i64 1, %1920
  %1922 = xor i64 %1921, -1
  %1923 = and i64 %1918, %1922
  %1924 = or i64 %1918, %1921
  %1925 = select i1 %1919, i64 %1924, i64 %1923
  %1926 = icmp eq i8 %1862, %1679
  %1927 = or i64 %1869, 2
  %1928 = shl i64 1, %1927
  %1929 = xor i64 %1928, -1
  %1930 = and i64 %1925, %1929
  %1931 = or i64 %1925, %1928
  %1932 = select i1 %1926, i64 %1931, i64 %1930
  %1933 = icmp eq i8 %1862, %1681
  %1934 = or i64 %1869, 3
  %1935 = shl i64 1, %1934
  %1936 = xor i64 %1935, -1
  %1937 = and i64 %1932, %1936
  %1938 = or i64 %1932, %1935
  %1939 = select i1 %1933, i64 %1938, i64 %1937
  %1940 = icmp eq i8 %1862, %1683
  %1941 = or i64 %1869, 4
  %1942 = shl i64 1, %1941
  %1943 = xor i64 %1942, -1
  %1944 = and i64 %1939, %1943
  %1945 = or i64 %1939, %1942
  %1946 = select i1 %1940, i64 %1945, i64 %1944
  %1947 = icmp eq i8 %1862, %1685
  %1948 = or i64 %1869, 5
  %1949 = shl i64 1, %1948
  %1950 = xor i64 %1949, -1
  %1951 = and i64 %1946, %1950
  %1952 = or i64 %1946, %1949
  %1953 = select i1 %1947, i64 %1952, i64 %1951
  %1954 = icmp eq i8 %1862, %1687
  %1955 = or i64 %1869, 6
  %1956 = shl i64 1, %1955
  %1957 = xor i64 %1956, -1
  %1958 = and i64 %1953, %1957
  %1959 = or i64 %1953, %1956
  %1960 = select i1 %1954, i64 %1959, i64 %1958
  %1961 = icmp eq i8 %1862, %1689
  %1962 = or i64 %1869, 7
  %1963 = shl i64 1, %1962
  %1964 = xor i64 %1963, -1
  %1965 = and i64 %1960, %1964
  %1966 = or i64 %1960, %1963
  %1967 = select i1 %1961, i64 %1966, i64 %1965
  %1968 = icmp eq i8 %1862, %1766
  %1969 = or i64 %1869, 8
  %1970 = shl i64 1, %1969
  %1971 = xor i64 %1970, -1
  %1972 = and i64 %1967, %1971
  %1973 = or i64 %1967, %1970
  %1974 = select i1 %1968, i64 %1973, i64 %1972
  %1975 = icmp eq i8 %1862, %1778
  %1976 = or i64 %1869, 9
  %1977 = shl i64 1, %1976
  %1978 = xor i64 %1977, -1
  %1979 = and i64 %1974, %1978
  %1980 = or i64 %1974, %1977
  %1981 = select i1 %1975, i64 %1980, i64 %1979
  %1982 = icmp eq i8 %1862, %1790
  %1983 = or i64 %1869, 10
  %1984 = shl i64 1, %1983
  %1985 = xor i64 %1984, -1
  %1986 = and i64 %1981, %1985
  %1987 = or i64 %1981, %1984
  %1988 = select i1 %1982, i64 %1987, i64 %1986
  %1989 = icmp eq i8 %1862, %1802
  %1990 = or i64 %1869, 11
  %1991 = shl i64 1, %1990
  %1992 = xor i64 %1991, -1
  %1993 = and i64 %1988, %1992
  %1994 = or i64 %1988, %1991
  %1995 = select i1 %1989, i64 %1994, i64 %1993
  %1996 = icmp eq i8 %1862, %1814
  %1997 = or i64 %1869, 12
  %1998 = shl i64 1, %1997
  %1999 = xor i64 %1998, -1
  %2000 = and i64 %1995, %1999
  %2001 = or i64 %1995, %1998
  %2002 = select i1 %1996, i64 %2001, i64 %2000
  %2003 = icmp eq i8 %1862, %1826
  %2004 = or i64 %1869, 13
  %2005 = shl i64 1, %2004
  %2006 = xor i64 %2005, -1
  %2007 = and i64 %2002, %2006
  %2008 = or i64 %2002, %2005
  %2009 = select i1 %2003, i64 %2008, i64 %2007
  %2010 = icmp eq i8 %1862, %1838
  %2011 = or i64 %1869, 14
  %2012 = shl i64 1, %2011
  %2013 = xor i64 %2012, -1
  %2014 = and i64 %2009, %2013
  %2015 = or i64 %2009, %2012
  %2016 = select i1 %2010, i64 %2015, i64 %2014
  store i64 %2016, i64* %1868, align 8
  %2017 = icmp eq i8 %1862, %1849
  %2018 = or i64 %1869, 15
  %2019 = shl i64 1, %2018
  %2020 = xor i64 %2019, -1
  %2021 = and i64 %2016, %2020
  %2022 = or i64 %2016, %2019
  br label %1902

; <label>:2023:                                   ; preds = %1856
  %2024 = icmp eq i64 %1853, 0
  %2025 = icmp eq i64 %1857, 0
  %2026 = or i1 %2024, %2025
  br i1 %2026, label %2434, label %2027

; <label>:2027:                                   ; preds = %2023
  br label %2028

; <label>:2028:                                   ; preds = %2049, %2027
  %2029 = phi i64 [ %2051, %2049 ], [ 0, %2027 ]
  %2030 = phi i16 [ %2052, %2049 ], [ 1, %2027 ]
  %2031 = phi i16 [ %2050, %2049 ], [ 0, %2027 ]
  br label %2034

; <label>:2032:                                   ; preds = %2034
  %2033 = icmp ult i64 %2045, %1857
  br i1 %2033, label %2034, label %2048

; <label>:2034:                                   ; preds = %2032, %2028
  %2035 = phi i64 [ 0, %2028 ], [ %2045, %2032 ]
  %2036 = shl i64 %2035, 4
  %2037 = add i64 %2036, %2029
  %2038 = lshr i64 %2037, 6
  %2039 = getelementptr inbounds %"class.(anonymous namespace)::BitMatrix", %"class.(anonymous namespace)::BitMatrix"* %7, i64 0, i32 0, i32 0, i32 0, i64 %2038
  %2040 = load i64, i64* %2039, align 8
  %2041 = and i64 %2037, 63
  %2042 = shl i64 1, %2041
  %2043 = and i64 %2042, %2040
  %2044 = icmp eq i64 %2043, 0
  %2045 = add nuw i64 %2035, 1
  br i1 %2044, label %2032, label %2046

; <label>:2046:                                   ; preds = %2034
  %2047 = or i16 %2031, %2030
  br label %2049

; <label>:2048:                                   ; preds = %2032
  br label %2049

; <label>:2049:                                   ; preds = %2048, %2046
  %2050 = phi i16 [ %2047, %2046 ], [ %2031, %2048 ]
  %2051 = add nuw i64 %2029, 1
  %2052 = shl i16 %2030, 1
  %2053 = icmp eq i64 %2051, %1853
  br i1 %2053, label %2431, label %2028

; <label>:2054:                                   ; preds = %1856
  %2055 = icmp eq i64 %1853, 0
  br i1 %2055, label %2434, label %2056

; <label>:2056:                                   ; preds = %2054
  %2057 = add i64 %1857, -1
  %2058 = icmp eq i64 %2057, 0
  br i1 %2058, label %2434, label %2059

; <label>:2059:                                   ; preds = %2056
  br label %2060

; <label>:2060:                                   ; preds = %2091, %2059
  %2061 = phi i16 [ %2087, %2091 ], [ 0, %2059 ]
  %2062 = phi i16 [ %2093, %2091 ], [ 1, %2059 ]
  %2063 = phi i64 [ %2092, %2091 ], [ 0, %2059 ]
  br label %2064

; <label>:2064:                                   ; preds = %2064, %2060
  %2065 = phi i16 [ %2061, %2060 ], [ %2087, %2064 ]
  %2066 = phi i64 [ 0, %2060 ], [ %2088, %2064 ]
  %2067 = shl i64 %2066, 4
  %2068 = add i64 %2067, %2063
  %2069 = lshr i64 %2068, 6
  %2070 = getelementptr inbounds %"class.(anonymous namespace)::BitMatrix", %"class.(anonymous namespace)::BitMatrix"* %7, i64 0, i32 0, i32 0, i32 0, i64 %2069
  %2071 = load i64, i64* %2070, align 8
  %2072 = and i64 %2068, 63
  %2073 = shl i64 1, %2072
  %2074 = and i64 %2073, %2071
  %2075 = or i64 %2067, 16
  %2076 = add i64 %2075, %2063
  %2077 = lshr i64 %2076, 6
  %2078 = getelementptr inbounds %"class.(anonymous namespace)::BitMatrix", %"class.(anonymous namespace)::BitMatrix"* %7, i64 0, i32 0, i32 0, i32 0, i64 %2077
  %2079 = load i64, i64* %2078, align 8
  %2080 = and i64 %2076, 63
  %2081 = shl i64 1, %2080
  %2082 = and i64 %2081, %2079
  %2083 = icmp eq i64 %2074, 0
  %2084 = icmp eq i64 %2082, 0
  %2085 = or i1 %2083, %2084
  %2086 = select i1 %2085, i16 0, i16 %2062
  %2087 = or i16 %2086, %2065
  %2088 = add i64 %2066, 2
  %2089 = icmp ult i64 %2088, %2057
  %2090 = and i1 %2089, %2085
  br i1 %2090, label %2064, label %2091

; <label>:2091:                                   ; preds = %2064
  %2092 = add nuw i64 %2063, 1
  %2093 = shl i16 %2062, 1
  %2094 = icmp eq i64 %2092, %1853
  br i1 %2094, label %2432, label %2060

; <label>:2095:                                   ; preds = %1856
  %2096 = icmp ne i64 %1857, 0
  %2097 = icmp ne i64 %1853, 0
  %2098 = and i1 %2097, %2096
  br i1 %2098, label %2099, label %2104

; <label>:2099:                                   ; preds = %2095
  %2100 = getelementptr inbounds %"class.(anonymous namespace)::BitMatrix", %"class.(anonymous namespace)::BitMatrix"* %7, i64 0, i32 0, i32 0, i32 0, i64 0
  %2101 = load i64, i64* %2100, align 8
  %2102 = and i64 %2101, 1
  %2103 = icmp ne i64 %2102, 0
  br label %2109

; <label>:2104:                                   ; preds = %2095
  br i1 %2096, label %2109, label %2105

; <label>:2105:                                   ; preds = %2104
  %2106 = xor i1 %2097, true
  %2107 = zext i1 %2106 to i16
  %2108 = icmp ugt i64 %1853, 1
  br label %2116

; <label>:2109:                                   ; preds = %2104, %2099
  %2110 = phi i1 [ false, %2104 ], [ %2103, %2099 ]
  %2111 = zext i1 %2110 to i16
  %2112 = icmp ugt i64 %1857, 1
  %2113 = icmp ugt i64 %1853, 1
  %2114 = and i1 %2113, %2112
  br i1 %2114, label %2122, label %2115

; <label>:2115:                                   ; preds = %2109
  br i1 %2112, label %2129, label %2116

; <label>:2116:                                   ; preds = %2115, %2105
  %2117 = phi i16 [ %2107, %2105 ], [ %2111, %2115 ]
  %2118 = phi i1 [ %2108, %2105 ], [ %2113, %2115 ]
  %2119 = select i1 %2118, i16 0, i16 2
  %2120 = or i16 %2119, %2117
  %2121 = icmp ugt i64 %1853, 2
  br label %2135

; <label>:2122:                                   ; preds = %2109
  %2123 = getelementptr inbounds %"class.(anonymous namespace)::BitMatrix", %"class.(anonymous namespace)::BitMatrix"* %7, i64 0, i32 0, i32 0, i32 0, i64 0
  %2124 = load i64, i64* %2123, align 8
  %2125 = and i64 %2124, 131072
  %2126 = icmp ne i64 %2125, 0
  %2127 = select i1 %2126, i16 2, i16 0
  %2128 = or i16 %2127, %2111
  br label %2129

; <label>:2129:                                   ; preds = %2122, %2115
  %2130 = phi i16 [ %2111, %2115 ], [ %2128, %2122 ]
  %2131 = icmp ugt i64 %1857, 2
  %2132 = icmp ugt i64 %1853, 2
  %2133 = and i1 %2132, %2131
  br i1 %2133, label %2141, label %2134

; <label>:2134:                                   ; preds = %2129
  br i1 %2131, label %2148, label %2135

; <label>:2135:                                   ; preds = %2134, %2116
  %2136 = phi i16 [ %2120, %2116 ], [ %2130, %2134 ]
  %2137 = phi i1 [ %2121, %2116 ], [ %2132, %2134 ]
  %2138 = select i1 %2137, i16 0, i16 4
  %2139 = or i16 %2138, %2136
  %2140 = icmp ugt i64 %1853, 3
  br label %2154

; <label>:2141:                                   ; preds = %2129
  %2142 = getelementptr inbounds %"class.(anonymous namespace)::BitMatrix", %"class.(anonymous namespace)::BitMatrix"* %7, i64 0, i32 0, i32 0, i32 0, i64 0
  %2143 = load i64, i64* %2142, align 8
  %2144 = and i64 %2143, 17179869184
  %2145 = icmp ne i64 %2144, 0
  %2146 = select i1 %2145, i16 4, i16 0
  %2147 = or i16 %2146, %2130
  br label %2148

; <label>:2148:                                   ; preds = %2141, %2134
  %2149 = phi i16 [ %2130, %2134 ], [ %2147, %2141 ]
  %2150 = icmp ugt i64 %1857, 3
  %2151 = icmp ugt i64 %1853, 3
  %2152 = and i1 %2151, %2150
  br i1 %2152, label %2160, label %2153

; <label>:2153:                                   ; preds = %2148
  br i1 %2150, label %2167, label %2154

; <label>:2154:                                   ; preds = %2153, %2135
  %2155 = phi i16 [ %2139, %2135 ], [ %2149, %2153 ]
  %2156 = phi i1 [ %2140, %2135 ], [ %2151, %2153 ]
  %2157 = select i1 %2156, i16 0, i16 8
  %2158 = or i16 %2157, %2155
  %2159 = icmp ugt i64 %1853, 4
  br label %2173

; <label>:2160:                                   ; preds = %2148
  %2161 = getelementptr inbounds %"class.(anonymous namespace)::BitMatrix", %"class.(anonymous namespace)::BitMatrix"* %7, i64 0, i32 0, i32 0, i32 0, i64 0
  %2162 = load i64, i64* %2161, align 8
  %2163 = and i64 %2162, 2251799813685248
  %2164 = icmp ne i64 %2163, 0
  %2165 = select i1 %2164, i16 8, i16 0
  %2166 = or i16 %2165, %2149
  br label %2167

; <label>:2167:                                   ; preds = %2160, %2153
  %2168 = phi i16 [ %2149, %2153 ], [ %2166, %2160 ]
  %2169 = icmp ugt i64 %1857, 4
  %2170 = icmp ugt i64 %1853, 4
  %2171 = and i1 %2170, %2169
  br i1 %2171, label %2179, label %2172

; <label>:2172:                                   ; preds = %2167
  br i1 %2169, label %2185, label %2173

; <label>:2173:                                   ; preds = %2172, %2154
  %2174 = phi i16 [ %2158, %2154 ], [ %2168, %2172 ]
  %2175 = phi i1 [ %2159, %2154 ], [ %2170, %2172 ]
  %2176 = select i1 %2175, i16 0, i16 16
  %2177 = or i16 %2176, %2174
  %2178 = icmp ugt i64 %1853, 5
  br label %2191

; <label>:2179:                                   ; preds = %2167
  %2180 = getelementptr inbounds %"class.(anonymous namespace)::BitMatrix", %"class.(anonymous namespace)::BitMatrix"* %7, i64 0, i32 0, i32 0, i32 0, i64 1
  %2181 = load i64, i64* %2180, align 8
  %2182 = trunc i64 %2181 to i16
  %2183 = and i16 %2182, 16
  %2184 = or i16 %2183, %2168
  br label %2185

; <label>:2185:                                   ; preds = %2179, %2172
  %2186 = phi i16 [ %2168, %2172 ], [ %2184, %2179 ]
  %2187 = icmp ugt i64 %1857, 5
  %2188 = icmp ugt i64 %1853, 5
  %2189 = and i1 %2188, %2187
  br i1 %2189, label %2197, label %2190

; <label>:2190:                                   ; preds = %2185
  br i1 %2187, label %2204, label %2191

; <label>:2191:                                   ; preds = %2190, %2173
  %2192 = phi i16 [ %2177, %2173 ], [ %2186, %2190 ]
  %2193 = phi i1 [ %2178, %2173 ], [ %2188, %2190 ]
  %2194 = select i1 %2193, i16 0, i16 32
  %2195 = or i16 %2194, %2192
  %2196 = icmp ugt i64 %1853, 6
  br label %2210

; <label>:2197:                                   ; preds = %2185
  %2198 = getelementptr inbounds %"class.(anonymous namespace)::BitMatrix", %"class.(anonymous namespace)::BitMatrix"* %7, i64 0, i32 0, i32 0, i32 0, i64 1
  %2199 = load i64, i64* %2198, align 8
  %2200 = and i64 %2199, 2097152
  %2201 = icmp ne i64 %2200, 0
  %2202 = select i1 %2201, i16 32, i16 0
  %2203 = or i16 %2202, %2186
  br label %2204

; <label>:2204:                                   ; preds = %2197, %2190
  %2205 = phi i16 [ %2186, %2190 ], [ %2203, %2197 ]
  %2206 = icmp ugt i64 %1857, 6
  %2207 = icmp ugt i64 %1853, 6
  %2208 = and i1 %2207, %2206
  br i1 %2208, label %2216, label %2209

; <label>:2209:                                   ; preds = %2204
  br i1 %2206, label %2223, label %2210

; <label>:2210:                                   ; preds = %2209, %2191
  %2211 = phi i16 [ %2195, %2191 ], [ %2205, %2209 ]
  %2212 = phi i1 [ %2196, %2191 ], [ %2207, %2209 ]
  %2213 = select i1 %2212, i16 0, i16 64
  %2214 = or i16 %2213, %2211
  %2215 = icmp ugt i64 %1853, 7
  br label %2229

; <label>:2216:                                   ; preds = %2204
  %2217 = getelementptr inbounds %"class.(anonymous namespace)::BitMatrix", %"class.(anonymous namespace)::BitMatrix"* %7, i64 0, i32 0, i32 0, i32 0, i64 1
  %2218 = load i64, i64* %2217, align 8
  %2219 = and i64 %2218, 274877906944
  %2220 = icmp ne i64 %2219, 0
  %2221 = select i1 %2220, i16 64, i16 0
  %2222 = or i16 %2221, %2205
  br label %2223

; <label>:2223:                                   ; preds = %2216, %2209
  %2224 = phi i16 [ %2205, %2209 ], [ %2222, %2216 ]
  %2225 = icmp ugt i64 %1857, 7
  %2226 = icmp ugt i64 %1853, 7
  %2227 = and i1 %2226, %2225
  br i1 %2227, label %2235, label %2228

; <label>:2228:                                   ; preds = %2223
  br i1 %2225, label %2242, label %2229

; <label>:2229:                                   ; preds = %2228, %2210
  %2230 = phi i16 [ %2214, %2210 ], [ %2224, %2228 ]
  %2231 = phi i1 [ %2215, %2210 ], [ %2226, %2228 ]
  %2232 = select i1 %2231, i16 0, i16 128
  %2233 = or i16 %2232, %2230
  %2234 = icmp ugt i64 %1853, 8
  br label %2248

; <label>:2235:                                   ; preds = %2223
  %2236 = getelementptr inbounds %"class.(anonymous namespace)::BitMatrix", %"class.(anonymous namespace)::BitMatrix"* %7, i64 0, i32 0, i32 0, i32 0, i64 1
  %2237 = load i64, i64* %2236, align 8
  %2238 = and i64 %2237, 36028797018963968
  %2239 = icmp ne i64 %2238, 0
  %2240 = select i1 %2239, i16 128, i16 0
  %2241 = or i16 %2240, %2224
  br label %2242

; <label>:2242:                                   ; preds = %2235, %2228
  %2243 = phi i16 [ %2224, %2228 ], [ %2241, %2235 ]
  %2244 = icmp ugt i64 %1857, 8
  %2245 = icmp ugt i64 %1853, 8
  %2246 = and i1 %2245, %2244
  br i1 %2246, label %2254, label %2247

; <label>:2247:                                   ; preds = %2242
  br i1 %2244, label %2260, label %2248

; <label>:2248:                                   ; preds = %2247, %2229
  %2249 = phi i16 [ %2233, %2229 ], [ %2243, %2247 ]
  %2250 = phi i1 [ %2234, %2229 ], [ %2245, %2247 ]
  %2251 = select i1 %2250, i16 0, i16 256
  %2252 = or i16 %2251, %2249
  %2253 = icmp ugt i64 %1853, 9
  br label %2266

; <label>:2254:                                   ; preds = %2242
  %2255 = getelementptr inbounds %"class.(anonymous namespace)::BitMatrix", %"class.(anonymous namespace)::BitMatrix"* %7, i64 0, i32 0, i32 0, i32 0, i64 2
  %2256 = load i64, i64* %2255, align 8
  %2257 = trunc i64 %2256 to i16
  %2258 = and i16 %2257, 256
  %2259 = or i16 %2258, %2243
  br label %2260

; <label>:2260:                                   ; preds = %2254, %2247
  %2261 = phi i16 [ %2243, %2247 ], [ %2259, %2254 ]
  %2262 = icmp ugt i64 %1857, 9
  %2263 = icmp ugt i64 %1853, 9
  %2264 = and i1 %2263, %2262
  br i1 %2264, label %2272, label %2265

; <label>:2265:                                   ; preds = %2260
  br i1 %2262, label %2279, label %2266

; <label>:2266:                                   ; preds = %2265, %2248
  %2267 = phi i16 [ %2252, %2248 ], [ %2261, %2265 ]
  %2268 = phi i1 [ %2253, %2248 ], [ %2263, %2265 ]
  %2269 = select i1 %2268, i16 0, i16 512
  %2270 = or i16 %2267, %2269
  %2271 = icmp ugt i64 %1853, 10
  br label %2285

; <label>:2272:                                   ; preds = %2260
  %2273 = getelementptr inbounds %"class.(anonymous namespace)::BitMatrix", %"class.(anonymous namespace)::BitMatrix"* %7, i64 0, i32 0, i32 0, i32 0, i64 2
  %2274 = load i64, i64* %2273, align 8
  %2275 = and i64 %2274, 33554432
  %2276 = icmp ne i64 %2275, 0
  %2277 = select i1 %2276, i16 512, i16 0
  %2278 = or i16 %2277, %2261
  br label %2279

; <label>:2279:                                   ; preds = %2272, %2265
  %2280 = phi i16 [ %2261, %2265 ], [ %2278, %2272 ]
  %2281 = icmp ugt i64 %1857, 10
  %2282 = icmp ugt i64 %1853, 10
  %2283 = and i1 %2282, %2281
  br i1 %2283, label %2291, label %2284

; <label>:2284:                                   ; preds = %2279
  br i1 %2281, label %2298, label %2285

; <label>:2285:                                   ; preds = %2284, %2266
  %2286 = phi i16 [ %2270, %2266 ], [ %2280, %2284 ]
  %2287 = phi i1 [ %2271, %2266 ], [ %2282, %2284 ]
  %2288 = select i1 %2287, i16 0, i16 1024
  %2289 = or i16 %2288, %2286
  %2290 = icmp ugt i64 %1853, 11
  br label %2304

; <label>:2291:                                   ; preds = %2279
  %2292 = getelementptr inbounds %"class.(anonymous namespace)::BitMatrix", %"class.(anonymous namespace)::BitMatrix"* %7, i64 0, i32 0, i32 0, i32 0, i64 2
  %2293 = load i64, i64* %2292, align 8
  %2294 = and i64 %2293, 4398046511104
  %2295 = icmp ne i64 %2294, 0
  %2296 = select i1 %2295, i16 1024, i16 0
  %2297 = or i16 %2296, %2280
  br label %2298

; <label>:2298:                                   ; preds = %2291, %2284
  %2299 = phi i16 [ %2280, %2284 ], [ %2297, %2291 ]
  %2300 = icmp ugt i64 %1857, 11
  %2301 = icmp ugt i64 %1853, 11
  %2302 = and i1 %2301, %2300
  br i1 %2302, label %2310, label %2303

; <label>:2303:                                   ; preds = %2298
  br i1 %2300, label %2317, label %2304

; <label>:2304:                                   ; preds = %2303, %2285
  %2305 = phi i16 [ %2289, %2285 ], [ %2299, %2303 ]
  %2306 = phi i1 [ %2290, %2285 ], [ %2301, %2303 ]
  %2307 = select i1 %2306, i16 0, i16 2048
  %2308 = or i16 %2307, %2305
  %2309 = icmp ugt i64 %1853, 12
  br label %2323

; <label>:2310:                                   ; preds = %2298
  %2311 = getelementptr inbounds %"class.(anonymous namespace)::BitMatrix", %"class.(anonymous namespace)::BitMatrix"* %7, i64 0, i32 0, i32 0, i32 0, i64 2
  %2312 = load i64, i64* %2311, align 8
  %2313 = and i64 %2312, 576460752303423488
  %2314 = icmp ne i64 %2313, 0
  %2315 = select i1 %2314, i16 2048, i16 0
  %2316 = or i16 %2315, %2299
  br label %2317

; <label>:2317:                                   ; preds = %2310, %2303
  %2318 = phi i16 [ %2299, %2303 ], [ %2316, %2310 ]
  %2319 = icmp ugt i64 %1857, 12
  %2320 = icmp ugt i64 %1853, 12
  %2321 = and i1 %2320, %2319
  br i1 %2321, label %2329, label %2322

; <label>:2322:                                   ; preds = %2317
  br i1 %2319, label %2335, label %2323

; <label>:2323:                                   ; preds = %2322, %2304
  %2324 = phi i16 [ %2308, %2304 ], [ %2318, %2322 ]
  %2325 = phi i1 [ %2309, %2304 ], [ %2320, %2322 ]
  %2326 = select i1 %2325, i16 0, i16 4096
  %2327 = or i16 %2326, %2324
  %2328 = icmp ugt i64 %1853, 13
  br label %2341

; <label>:2329:                                   ; preds = %2317
  %2330 = getelementptr inbounds %"class.(anonymous namespace)::BitMatrix", %"class.(anonymous namespace)::BitMatrix"* %7, i64 0, i32 0, i32 0, i32 0, i64 3
  %2331 = load i64, i64* %2330, align 8
  %2332 = trunc i64 %2331 to i16
  %2333 = and i16 %2332, 4096
  %2334 = or i16 %2333, %2318
  br label %2335

; <label>:2335:                                   ; preds = %2329, %2322
  %2336 = phi i16 [ %2318, %2322 ], [ %2334, %2329 ]
  %2337 = icmp ugt i64 %1857, 13
  %2338 = icmp ugt i64 %1853, 13
  %2339 = and i1 %2338, %2337
  br i1 %2339, label %2347, label %2340

; <label>:2340:                                   ; preds = %2335
  br i1 %2337, label %2354, label %2341

; <label>:2341:                                   ; preds = %2340, %2323
  %2342 = phi i16 [ %2327, %2323 ], [ %2336, %2340 ]
  %2343 = phi i1 [ %2328, %2323 ], [ %2338, %2340 ]
  %2344 = select i1 %2343, i16 0, i16 8192
  %2345 = or i16 %2344, %2342
  %2346 = icmp ugt i64 %1853, 14
  br label %2360

; <label>:2347:                                   ; preds = %2335
  %2348 = getelementptr inbounds %"class.(anonymous namespace)::BitMatrix", %"class.(anonymous namespace)::BitMatrix"* %7, i64 0, i32 0, i32 0, i32 0, i64 3
  %2349 = load i64, i64* %2348, align 8
  %2350 = and i64 %2349, 536870912
  %2351 = icmp ne i64 %2350, 0
  %2352 = select i1 %2351, i16 8192, i16 0
  %2353 = or i16 %2352, %2336
  br label %2354

; <label>:2354:                                   ; preds = %2347, %2340
  %2355 = phi i16 [ %2336, %2340 ], [ %2353, %2347 ]
  %2356 = icmp ugt i64 %1857, 14
  %2357 = icmp ugt i64 %1853, 14
  %2358 = and i1 %2357, %2356
  br i1 %2358, label %2366, label %2359

; <label>:2359:                                   ; preds = %2354
  br i1 %2356, label %2373, label %2360

; <label>:2360:                                   ; preds = %2359, %2341
  %2361 = phi i16 [ %2345, %2341 ], [ %2355, %2359 ]
  %2362 = phi i1 [ %2346, %2341 ], [ %2357, %2359 ]
  %2363 = select i1 %2362, i16 0, i16 16384
  %2364 = or i16 %2363, %2361
  %2365 = icmp ugt i64 %1853, 15
  br label %2379

; <label>:2366:                                   ; preds = %2354
  %2367 = getelementptr inbounds %"class.(anonymous namespace)::BitMatrix", %"class.(anonymous namespace)::BitMatrix"* %7, i64 0, i32 0, i32 0, i32 0, i64 3
  %2368 = load i64, i64* %2367, align 8
  %2369 = and i64 %2368, 70368744177664
  %2370 = icmp ne i64 %2369, 0
  %2371 = select i1 %2370, i16 16384, i16 0
  %2372 = or i16 %2371, %2355
  br label %2373

; <label>:2373:                                   ; preds = %2366, %2359
  %2374 = phi i16 [ %2355, %2359 ], [ %2372, %2366 ]
  %2375 = icmp ugt i64 %1857, 15
  %2376 = icmp ugt i64 %1853, 15
  %2377 = and i1 %2376, %2375
  br i1 %2377, label %2384, label %2378

; <label>:2378:                                   ; preds = %2373
  br i1 %2375, label %2434, label %2379

; <label>:2379:                                   ; preds = %2378, %2360
  %2380 = phi i16 [ %2364, %2360 ], [ %2374, %2378 ]
  %2381 = phi i1 [ %2365, %2360 ], [ %2376, %2378 ]
  %2382 = select i1 %2381, i16 0, i16 -32768
  %2383 = or i16 %2382, %2380
  br label %2434

; <label>:2384:                                   ; preds = %2373
  %2385 = getelementptr inbounds %"class.(anonymous namespace)::BitMatrix", %"class.(anonymous namespace)::BitMatrix"* %7, i64 0, i32 0, i32 0, i32 0, i64 3
  %2386 = load i64, i64* %2385, align 8
  %2387 = icmp slt i64 %2386, 0
  %2388 = select i1 %2387, i16 -32768, i16 0
  %2389 = or i16 %2388, %2374
  br label %2434

; <label>:2390:                                   ; preds = %1856
  %2391 = icmp ugt i64 %1857, %1853
  br i1 %2391, label %2434, label %2392

; <label>:2392:                                   ; preds = %2390
  %2393 = icmp eq i64 %1857, 0
  br i1 %2393, label %2434, label %2394

; <label>:2394:                                   ; preds = %2392
  br label %2395

; <label>:2395:                                   ; preds = %2425, %2394
  %2396 = phi i16 [ %2426, %2425 ], [ -1, %2394 ]
  %2397 = phi i64 [ %2427, %2425 ], [ 0, %2394 ]
  %2398 = phi i16 [ %2428, %2425 ], [ 1, %2394 ]
  %2399 = sub nuw nsw i64 16, %2397
  br label %2400

; <label>:2400:                                   ; preds = %2414, %2395
  %2401 = phi i64 [ %2416, %2414 ], [ %2397, %2395 ]
  %2402 = phi i64 [ %2415, %2414 ], [ 0, %2395 ]
  %2403 = icmp ult i64 %2401, %1853
  br i1 %2403, label %2404, label %2422

; <label>:2404:                                   ; preds = %2400
  %2405 = shl i64 %2402, 4
  %2406 = add nuw nsw i64 %2405, %2401
  %2407 = lshr i64 %2406, 6
  %2408 = getelementptr inbounds %"class.(anonymous namespace)::BitMatrix", %"class.(anonymous namespace)::BitMatrix"* %7, i64 0, i32 0, i32 0, i32 0, i64 %2407
  %2409 = load i64, i64* %2408, align 8
  %2410 = and i64 %2406, 63
  %2411 = shl i64 1, %2410
  %2412 = and i64 %2409, %2411
  %2413 = icmp eq i64 %2412, 0
  br i1 %2413, label %2422, label %2414

; <label>:2414:                                   ; preds = %2404
  %2415 = add nuw nsw i64 %2402, 1
  %2416 = add nuw nsw i64 %2401, 1
  %2417 = icmp ult i64 %2415, %2399
  %2418 = icmp ult i64 %2416, 16
  %2419 = and i1 %2418, %2417
  %2420 = icmp ult i64 %2415, %1857
  %2421 = and i1 %2420, %2419
  br i1 %2421, label %2400, label %2424

; <label>:2422:                                   ; preds = %2404, %2400
  %2423 = xor i16 %2398, %2396
  br label %2425

; <label>:2424:                                   ; preds = %2414
  br label %2425

; <label>:2425:                                   ; preds = %2424, %2422
  %2426 = phi i16 [ %2423, %2422 ], [ %2396, %2424 ]
  %2427 = add nuw nsw i64 %2397, 1
  %2428 = shl i16 %2398, 1
  %2429 = icmp eq i64 %2427, 16
  br i1 %2429, label %2433, label %2395

; <label>:2430:                                   ; preds = %1856
  unreachable

; <label>:2431:                                   ; preds = %2049
  br label %2434

; <label>:2432:                                   ; preds = %2091
  br label %2434

; <label>:2433:                                   ; preds = %2425
  br label %2434

; <label>:2434:                                   ; preds = %2433, %2432, %2431, %2392, %2390, %2384, %2379, %2378, %2056, %2054, %2023
  %2435 = phi i64 [ %1857, %2023 ], [ %1857, %2054 ], [ 1, %2056 ], [ %1857, %2378 ], [ %1857, %2384 ], [ %1857, %2379 ], [ %1857, %2390 ], [ 0, %2392 ], [ %1857, %2431 ], [ %1857, %2432 ], [ %1857, %2433 ]
  %2436 = phi i16 [ 0, %2023 ], [ 0, %2054 ], [ 0, %2056 ], [ %2374, %2378 ], [ %2389, %2384 ], [ %2383, %2379 ], [ 0, %2390 ], [ -1, %2392 ], [ %2050, %2431 ], [ %2087, %2432 ], [ %2426, %2433 ]
  %2437 = trunc i8 %1858 to i2
  switch i2 %2437, label %2445 [
    i2 0, label %2446
    i2 1, label %2440
    i2 -2, label %2446
    i2 -1, label %2438
  ]

; <label>:2438:                                   ; preds = %2434
  %2439 = icmp eq i64 %1853, 0
  br i1 %2439, label %2446, label %2442

; <label>:2440:                                   ; preds = %2434
  %2441 = xor i16 %2436, -1
  br label %2446

; <label>:2442:                                   ; preds = %2438
  %2443 = xor i16 %2436, 1
  %2444 = icmp eq i64 %1853, 1
  br i1 %2444, label %2446, label %2464

; <label>:2445:                                   ; preds = %2434
  unreachable

; <label>:2446:                                   ; preds = %2503, %2500, %2497, %2494, %2491, %2488, %2485, %2482, %2479, %2476, %2473, %2470, %2467, %2464, %2442, %2440, %2438, %2434, %2434
  %2447 = phi i16 [ %2441, %2440 ], [ %2436, %2434 ], [ %2436, %2434 ], [ %2501, %2500 ], [ %2498, %2497 ], [ %2495, %2494 ], [ %2492, %2491 ], [ %2489, %2488 ], [ %2486, %2485 ], [ %2483, %2482 ], [ %2480, %2479 ], [ %2477, %2476 ], [ %2474, %2473 ], [ %2471, %2470 ], [ %2468, %2467 ], [ %2465, %2464 ], [ %2443, %2442 ], [ %2436, %2438 ], [ %2506, %2503 ]
  %2448 = and i8 %12, 64
  %2449 = icmp eq i8 %2448, 0
  %2450 = icmp eq i16 %2447, 0
  br i1 %2449, label %2451, label %2456

; <label>:2451:                                   ; preds = %2446
  br i1 %2450, label %2719, label %2452

; <label>:2452:                                   ; preds = %2451
  %2453 = zext i16 %2447 to i32
  %2454 = tail call i32 @llvm.cttz.i32(i32 %2453, i1 true) 
  %2455 = zext i32 %2454 to i64
  br label %2719

; <label>:2456:                                   ; preds = %2446
  br i1 %2450, label %2719, label %2457

; <label>:2457:                                   ; preds = %2456
  %2458 = zext i16 %2447 to i32
  %2459 = tail call i32 @llvm.ctlz.i32(i32 %2458, i1 true) 
  %2460 = add nuw nsw i32 %2459, 65520
  %2461 = and i32 %2460, 65535
  %2462 = zext i32 %2461 to i64
  %2463 = sub nsw i64 15, %2462
  br label %2719

; <label>:2464:                                   ; preds = %2442
  %2465 = xor i16 %2436, 3
  %2466 = icmp ugt i64 %1853, 2
  br i1 %2466, label %2467, label %2446

; <label>:2467:                                   ; preds = %2464
  %2468 = xor i16 %2436, 7
  %2469 = icmp eq i64 %1853, 3
  br i1 %2469, label %2446, label %2470

; <label>:2470:                                   ; preds = %2467
  %2471 = xor i16 %2436, 15
  %2472 = icmp ugt i64 %1853, 4
  br i1 %2472, label %2473, label %2446

; <label>:2473:                                   ; preds = %2470
  %2474 = xor i16 %2436, 31
  %2475 = icmp eq i64 %1853, 5
  br i1 %2475, label %2446, label %2476

; <label>:2476:                                   ; preds = %2473
  %2477 = xor i16 %2436, 63
  %2478 = icmp ugt i64 %1853, 6
  br i1 %2478, label %2479, label %2446

; <label>:2479:                                   ; preds = %2476
  %2480 = xor i16 %2436, 127
  %2481 = icmp eq i64 %1853, 7
  br i1 %2481, label %2446, label %2482

; <label>:2482:                                   ; preds = %2479
  %2483 = xor i16 %2436, 255
  %2484 = icmp ugt i64 %1853, 8
  br i1 %2484, label %2485, label %2446

; <label>:2485:                                   ; preds = %2482
  %2486 = xor i16 %2436, 511
  %2487 = icmp eq i64 %1853, 9
  br i1 %2487, label %2446, label %2488

; <label>:2488:                                   ; preds = %2485
  %2489 = xor i16 %2436, 1023
  %2490 = icmp ugt i64 %1853, 10
  br i1 %2490, label %2491, label %2446

; <label>:2491:                                   ; preds = %2488
  %2492 = xor i16 %2436, 2047
  %2493 = icmp eq i64 %1853, 11
  br i1 %2493, label %2446, label %2494

; <label>:2494:                                   ; preds = %2491
  %2495 = xor i16 %2436, 4095
  %2496 = icmp ugt i64 %1853, 12
  br i1 %2496, label %2497, label %2446

; <label>:2497:                                   ; preds = %2494
  %2498 = xor i16 %2436, 8191
  %2499 = icmp eq i64 %1853, 13
  br i1 %2499, label %2446, label %2500

; <label>:2500:                                   ; preds = %2497
  %2501 = xor i16 %2436, 16383
  %2502 = icmp ugt i64 %1853, 14
  br i1 %2502, label %2503, label %2446

; <label>:2503:                                   ; preds = %2500
  %2504 = icmp ne i64 %1853, 15
  %2505 = select i1 %2504, i16 -1, i16 32767
  %2506 = xor i16 %2436, %2505
  br label %2446

; <label>:2507:                                   ; preds = %1884, %1881
  %2508 = phi i64 [ %1887, %1884 ], [ %1883, %1881 ]
  %2509 = icmp sgt i8 %1677, %1862
  %2510 = or i64 %1879, 1
  %2511 = shl i64 1, %2510
  %2512 = xor i64 %2511, -1
  %2513 = and i64 %2508, %2512
  %2514 = or i64 %2508, %2511
  %2515 = select i1 %2509, i64 %2513, i64 %2514
  %2516 = icmp sgt i8 %1679, %1862
  %2517 = or i64 %1879, 2
  %2518 = shl i64 1, %2517
  %2519 = xor i64 %2518, -1
  %2520 = and i64 %2515, %2519
  %2521 = or i64 %2515, %2518
  %2522 = select i1 %2516, i64 %2520, i64 %2521
  %2523 = icmp sgt i8 %1681, %1862
  %2524 = or i64 %1879, 3
  %2525 = shl i64 1, %2524
  %2526 = xor i64 %2525, -1
  %2527 = and i64 %2522, %2526
  %2528 = or i64 %2522, %2525
  %2529 = select i1 %2523, i64 %2527, i64 %2528
  %2530 = icmp sgt i8 %1683, %1862
  %2531 = or i64 %1879, 4
  %2532 = shl i64 1, %2531
  %2533 = xor i64 %2532, -1
  %2534 = and i64 %2529, %2533
  %2535 = or i64 %2529, %2532
  %2536 = select i1 %2530, i64 %2534, i64 %2535
  %2537 = icmp sgt i8 %1685, %1862
  %2538 = or i64 %1879, 5
  %2539 = shl i64 1, %2538
  %2540 = xor i64 %2539, -1
  %2541 = and i64 %2536, %2540
  %2542 = or i64 %2536, %2539
  %2543 = select i1 %2537, i64 %2541, i64 %2542
  %2544 = icmp sgt i8 %1687, %1862
  %2545 = or i64 %1879, 6
  %2546 = shl i64 1, %2545
  %2547 = xor i64 %2546, -1
  %2548 = and i64 %2543, %2547
  %2549 = or i64 %2543, %2546
  %2550 = select i1 %2544, i64 %2548, i64 %2549
  %2551 = icmp sgt i8 %1689, %1862
  %2552 = or i64 %1879, 7
  %2553 = shl i64 1, %2552
  %2554 = xor i64 %2553, -1
  %2555 = and i64 %2550, %2554
  %2556 = or i64 %2550, %2553
  %2557 = select i1 %2551, i64 %2555, i64 %2556
  %2558 = icmp sgt i8 %1766, %1862
  %2559 = or i64 %1879, 8
  %2560 = shl i64 1, %2559
  %2561 = xor i64 %2560, -1
  %2562 = and i64 %2557, %2561
  %2563 = or i64 %2557, %2560
  %2564 = select i1 %2558, i64 %2562, i64 %2563
  %2565 = icmp sgt i8 %1778, %1862
  %2566 = or i64 %1879, 9
  %2567 = shl i64 1, %2566
  %2568 = xor i64 %2567, -1
  %2569 = and i64 %2564, %2568
  %2570 = or i64 %2564, %2567
  %2571 = select i1 %2565, i64 %2569, i64 %2570
  %2572 = icmp sgt i8 %1790, %1862
  %2573 = or i64 %1879, 10
  %2574 = shl i64 1, %2573
  %2575 = xor i64 %2574, -1
  %2576 = and i64 %2571, %2575
  %2577 = or i64 %2571, %2574
  %2578 = select i1 %2572, i64 %2576, i64 %2577
  %2579 = icmp sgt i8 %1802, %1862
  %2580 = or i64 %1879, 11
  %2581 = shl i64 1, %2580
  %2582 = xor i64 %2581, -1
  %2583 = and i64 %2578, %2582
  %2584 = or i64 %2578, %2581
  %2585 = select i1 %2579, i64 %2583, i64 %2584
  %2586 = icmp sgt i8 %1814, %1862
  %2587 = or i64 %1879, 12
  %2588 = shl i64 1, %2587
  %2589 = xor i64 %2588, -1
  %2590 = and i64 %2585, %2589
  %2591 = or i64 %2585, %2588
  %2592 = select i1 %2586, i64 %2590, i64 %2591
  %2593 = icmp sgt i8 %1826, %1862
  %2594 = or i64 %1879, 13
  %2595 = shl i64 1, %2594
  %2596 = xor i64 %2595, -1
  %2597 = and i64 %2592, %2596
  %2598 = or i64 %2592, %2595
  %2599 = select i1 %2593, i64 %2597, i64 %2598
  %2600 = icmp sgt i8 %1838, %1862
  %2601 = or i64 %1879, 14
  %2602 = shl i64 1, %2601
  %2603 = xor i64 %2602, -1
  %2604 = and i64 %2599, %2603
  %2605 = or i64 %2599, %2602
  %2606 = select i1 %2600, i64 %2604, i64 %2605
  store i64 %2606, i64* %1878, align 8
  %2607 = icmp sgt i8 %1849, %1862
  %2608 = or i64 %1879, 15
  %2609 = shl i64 1, %2608
  %2610 = xor i64 %2609, -1
  %2611 = and i64 %2606, %2610
  %2612 = or i64 %2606, %2609
  br label %1902

; <label>:2613:                                   ; preds = %1898, %1895
  %2614 = phi i64 [ %1901, %1898 ], [ %1897, %1895 ]
  %2615 = icmp slt i8 %1677, %1862
  %2616 = or i64 %1893, 1
  %2617 = shl i64 1, %2616
  %2618 = xor i64 %2617, -1
  %2619 = and i64 %2614, %2618
  %2620 = or i64 %2614, %2617
  %2621 = select i1 %2615, i64 %2619, i64 %2620
  %2622 = icmp slt i8 %1679, %1862
  %2623 = or i64 %1893, 2
  %2624 = shl i64 1, %2623
  %2625 = xor i64 %2624, -1
  %2626 = and i64 %2621, %2625
  %2627 = or i64 %2621, %2624
  %2628 = select i1 %2622, i64 %2626, i64 %2627
  %2629 = icmp slt i8 %1681, %1862
  %2630 = or i64 %1893, 3
  %2631 = shl i64 1, %2630
  %2632 = xor i64 %2631, -1
  %2633 = and i64 %2628, %2632
  %2634 = or i64 %2628, %2631
  %2635 = select i1 %2629, i64 %2633, i64 %2634
  %2636 = icmp slt i8 %1683, %1862
  %2637 = or i64 %1893, 4
  %2638 = shl i64 1, %2637
  %2639 = xor i64 %2638, -1
  %2640 = and i64 %2635, %2639
  %2641 = or i64 %2635, %2638
  %2642 = select i1 %2636, i64 %2640, i64 %2641
  %2643 = icmp slt i8 %1685, %1862
  %2644 = or i64 %1893, 5
  %2645 = shl i64 1, %2644
  %2646 = xor i64 %2645, -1
  %2647 = and i64 %2642, %2646
  %2648 = or i64 %2642, %2645
  %2649 = select i1 %2643, i64 %2647, i64 %2648
  %2650 = icmp slt i8 %1687, %1862
  %2651 = or i64 %1893, 6
  %2652 = shl i64 1, %2651
  %2653 = xor i64 %2652, -1
  %2654 = and i64 %2649, %2653
  %2655 = or i64 %2649, %2652
  %2656 = select i1 %2650, i64 %2654, i64 %2655
  %2657 = icmp slt i8 %1689, %1862
  %2658 = or i64 %1893, 7
  %2659 = shl i64 1, %2658
  %2660 = xor i64 %2659, -1
  %2661 = and i64 %2656, %2660
  %2662 = or i64 %2656, %2659
  %2663 = select i1 %2657, i64 %2661, i64 %2662
  %2664 = icmp slt i8 %1766, %1862
  %2665 = or i64 %1893, 8
  %2666 = shl i64 1, %2665
  %2667 = xor i64 %2666, -1
  %2668 = and i64 %2663, %2667
  %2669 = or i64 %2663, %2666
  %2670 = select i1 %2664, i64 %2668, i64 %2669
  %2671 = icmp slt i8 %1778, %1862
  %2672 = or i64 %1893, 9
  %2673 = shl i64 1, %2672
  %2674 = xor i64 %2673, -1
  %2675 = and i64 %2670, %2674
  %2676 = or i64 %2670, %2673
  %2677 = select i1 %2671, i64 %2675, i64 %2676
  %2678 = icmp slt i8 %1790, %1862
  %2679 = or i64 %1893, 10
  %2680 = shl i64 1, %2679
  %2681 = xor i64 %2680, -1
  %2682 = and i64 %2677, %2681
  %2683 = or i64 %2677, %2680
  %2684 = select i1 %2678, i64 %2682, i64 %2683
  %2685 = icmp slt i8 %1802, %1862
  %2686 = or i64 %1893, 11
  %2687 = shl i64 1, %2686
  %2688 = xor i64 %2687, -1
  %2689 = and i64 %2684, %2688
  %2690 = or i64 %2684, %2687
  %2691 = select i1 %2685, i64 %2689, i64 %2690
  %2692 = icmp slt i8 %1814, %1862
  %2693 = or i64 %1893, 12
  %2694 = shl i64 1, %2693
  %2695 = xor i64 %2694, -1
  %2696 = and i64 %2691, %2695
  %2697 = or i64 %2691, %2694
  %2698 = select i1 %2692, i64 %2696, i64 %2697
  %2699 = icmp slt i8 %1826, %1862
  %2700 = or i64 %1893, 13
  %2701 = shl i64 1, %2700
  %2702 = xor i64 %2701, -1
  %2703 = and i64 %2698, %2702
  %2704 = or i64 %2698, %2701
  %2705 = select i1 %2699, i64 %2703, i64 %2704
  %2706 = icmp slt i8 %1838, %1862
  %2707 = or i64 %1893, 14
  %2708 = shl i64 1, %2707
  %2709 = xor i64 %2708, -1
  %2710 = and i64 %2705, %2709
  %2711 = or i64 %2705, %2708
  %2712 = select i1 %2706, i64 %2710, i64 %2711
  store i64 %2712, i64* %1892, align 8
  %2713 = icmp slt i8 %1849, %1862
  %2714 = or i64 %1893, 15
  %2715 = shl i64 1, %2714
  %2716 = xor i64 %2715, -1
  %2717 = and i64 %2712, %2716
  %2718 = or i64 %2712, %2715
  br label %1902

; <label>:2719:                                   ; preds = %2457, %2456, %2452, %2451
  %2720 = phi i64 [ %2463, %2457 ], [ 16, %2456 ], [ %2455, %2452 ], [ 16, %2451 ]
  %2721 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 5, i32 0, i32 0
  %2722 = and i64 %2720, 65535
  store i64 %2722, i64* %2721, align 8
  %2723 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  %2724 = icmp ne i16 %2447, 0
  %2725 = zext i1 %2724 to i8
  store i8 %2725, i8* %2723, align 1
  %2726 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  %2727 = icmp ult i64 %1853, 16
  %2728 = zext i1 %2727 to i8
  store i8 %2728, i8* %2726, align 1
  %2729 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  %2730 = icmp ult i64 %2435, 16
  %2731 = zext i1 %2730 to i8
  store i8 %2731, i8* %2729, align 1
  %2732 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  %2733 = trunc i16 %2447 to i8
  %2734 = and i8 %2733, 1
  store i8 %2734, i8* %2732, align 1
  %2735 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 0, i8* %2735, align 1
  %2736 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 0, i8* %2736, align 1
  call void @llvm.lifetime.end(i64 288, i8* nonnull %1690) 
  call void @llvm.lifetime.end(i64 16, i8* nonnull %1666) 
  br label %3313

; <label>:2737:                                   ; preds = %5
  %2738 = bitcast { i64, i64 }* %11 to %struct.uint16v8_t*
  %2739 = bitcast { i64, i64 }* %11 to i8*
  call void @llvm.lifetime.start(i64 16, i8* nonnull %2739) 
  %2740 = bitcast i8* %2 to i64*
  %2741 = load i64, i64* %2740, align 1
  %2742 = getelementptr inbounds i8, i8* %2, i64 8
  %2743 = bitcast i8* %2742 to i64*
  %2744 = load i64, i64* %2743, align 1
  %2745 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %11, i64 0, i32 0
  store i64 %2741, i64* %2745, align 8
  %2746 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %11, i64 0, i32 1
  store i64 %2744, i64* %2746, align 8
  %2747 = bitcast i8* %3 to i64*
  %2748 = load i64, i64* %2747, align 1
  %2749 = getelementptr inbounds i8, i8* %3, i64 8
  %2750 = bitcast i8* %2749 to i64*
  %2751 = load i64, i64* %2750, align 1
  %2752 = trunc i64 %2748 to i16
  %2753 = lshr i64 %2748, 16
  %2754 = trunc i64 %2753 to i16
  %2755 = lshr i64 %2748, 32
  %2756 = trunc i64 %2755 to i16
  %2757 = lshr i64 %2748, 48
  %2758 = trunc i64 %2757 to i16
  %2759 = lshr i8 %12, 2
  %2760 = trunc i64 %2741 to i16
  %2761 = icmp eq i16 %2760, 0
  %2762 = select i1 %2761, i64 0, i64 8
  %2763 = icmp eq i16 %2752, 0
  %2764 = select i1 %2763, i64 0, i64 8
  %2765 = and i64 %2741, 4294901760
  %2766 = icmp eq i64 %2765, 0
  %2767 = xor i1 %2761, true
  %2768 = and i1 %2766, %2767
  %2769 = select i1 %2768, i64 1, i64 %2762
  %2770 = icmp eq i16 %2754, 0
  %2771 = xor i1 %2763, true
  %2772 = and i1 %2770, %2771
  %2773 = select i1 %2772, i64 1, i64 %2764
  %2774 = and i64 %2741, 281470681743360
  %2775 = icmp eq i64 %2774, 0
  %2776 = icmp ugt i64 %2769, 2
  %2777 = and i1 %2775, %2776
  %2778 = select i1 %2777, i64 2, i64 %2769
  %2779 = icmp eq i16 %2756, 0
  %2780 = icmp ugt i64 %2773, 2
  %2781 = and i1 %2779, %2780
  %2782 = select i1 %2781, i64 2, i64 %2773
  %2783 = icmp ult i64 %2741, 281474976710656
  %2784 = icmp ugt i64 %2778, 3
  %2785 = and i1 %2783, %2784
  %2786 = select i1 %2785, i64 3, i64 %2778
  %2787 = icmp eq i16 %2758, 0
  %2788 = icmp ugt i64 %2782, 3
  %2789 = and i1 %2787, %2788
  %2790 = select i1 %2789, i64 3, i64 %2782
  %2791 = trunc i64 %2744 to i16
  %2792 = icmp eq i16 %2791, 0
  %2793 = icmp ugt i64 %2786, 4
  %2794 = and i1 %2792, %2793
  %2795 = select i1 %2794, i64 4, i64 %2786
  %2796 = trunc i64 %2751 to i16
  %2797 = icmp eq i16 %2796, 0
  %2798 = icmp ugt i64 %2790, 4
  %2799 = and i1 %2797, %2798
  %2800 = select i1 %2799, i64 4, i64 %2790
  %2801 = and i64 %2744, 4294901760
  %2802 = icmp eq i64 %2801, 0
  %2803 = icmp ugt i64 %2795, 5
  %2804 = and i1 %2802, %2803
  %2805 = select i1 %2804, i64 5, i64 %2795
  %2806 = lshr i64 %2751, 16
  %2807 = trunc i64 %2806 to i16
  %2808 = icmp eq i16 %2807, 0
  %2809 = icmp ugt i64 %2800, 5
  %2810 = and i1 %2808, %2809
  %2811 = select i1 %2810, i64 5, i64 %2800
  %2812 = and i64 %2744, 281470681743360
  %2813 = icmp eq i64 %2812, 0
  %2814 = icmp ugt i64 %2805, 6
  %2815 = and i1 %2813, %2814
  %2816 = select i1 %2815, i64 6, i64 %2805
  %2817 = lshr i64 %2751, 32
  %2818 = trunc i64 %2817 to i16
  %2819 = icmp eq i16 %2818, 0
  %2820 = icmp ugt i64 %2811, 6
  %2821 = and i1 %2819, %2820
  %2822 = select i1 %2821, i64 6, i64 %2811
  %2823 = icmp ult i64 %2744, 281474976710656
  %2824 = icmp ugt i64 %2816, 7
  %2825 = and i1 %2823, %2824
  %2826 = select i1 %2825, i64 7, i64 %2816
  %2827 = lshr i64 %2751, 48
  %2828 = trunc i64 %2827 to i16
  %2829 = icmp eq i16 %2828, 0
  %2830 = icmp ugt i64 %2822, 7
  %2831 = and i1 %2829, %2830
  %2832 = select i1 %2831, i64 7, i64 %2822
  %2833 = lshr i8 %12, 4
  %2834 = trunc i8 %2759 to i2
  %2835 = icmp eq i2 %2834, 1
  br i1 %2835, label %2837, label %2836

; <label>:2836:                                   ; preds = %2737
  br label %2969

; <label>:2837:                                   ; preds = %2737
  br label %2838

; <label>:2838:                                   ; preds = %2962, %2837
  %2839 = phi i16 [ %2964, %2962 ], [ %2760, %2837 ]
  %2840 = phi i64 [ %2960, %2962 ], [ 0, %2837 ]
  %2841 = phi i64 [ %2959, %2962 ], [ 0, %2837 ]
  %2842 = and i64 %2840, 1
  %2843 = icmp eq i64 %2842, 0
  %2844 = shl i64 %2840, 3
  br i1 %2843, label %2900, label %2845

; <label>:2845:                                   ; preds = %2838
  %2846 = icmp sgt i16 %2752, %2839
  %2847 = shl i64 1, %2844
  %2848 = xor i64 %2847, -1
  %2849 = and i64 %2841, %2848
  %2850 = or i64 %2847, %2841
  %2851 = select i1 %2846, i64 %2849, i64 %2850
  %2852 = icmp sgt i16 %2754, %2839
  %2853 = or i64 %2844, 1
  %2854 = shl i64 1, %2853
  %2855 = xor i64 %2854, -1
  %2856 = and i64 %2851, %2855
  %2857 = or i64 %2851, %2854
  %2858 = select i1 %2852, i64 %2856, i64 %2857
  %2859 = icmp sgt i16 %2756, %2839
  %2860 = or i64 %2844, 2
  %2861 = shl i64 1, %2860
  %2862 = xor i64 %2861, -1
  %2863 = and i64 %2858, %2862
  %2864 = or i64 %2858, %2861
  %2865 = select i1 %2859, i64 %2863, i64 %2864
  %2866 = icmp sgt i16 %2758, %2839
  %2867 = or i64 %2844, 3
  %2868 = shl i64 1, %2867
  %2869 = xor i64 %2868, -1
  %2870 = and i64 %2865, %2869
  %2871 = or i64 %2865, %2868
  %2872 = select i1 %2866, i64 %2870, i64 %2871
  %2873 = icmp sgt i16 %2796, %2839
  %2874 = or i64 %2844, 4
  %2875 = shl i64 1, %2874
  %2876 = xor i64 %2875, -1
  %2877 = and i64 %2872, %2876
  %2878 = or i64 %2872, %2875
  %2879 = select i1 %2873, i64 %2877, i64 %2878
  %2880 = icmp sgt i16 %2807, %2839
  %2881 = or i64 %2844, 5
  %2882 = shl i64 1, %2881
  %2883 = xor i64 %2882, -1
  %2884 = and i64 %2879, %2883
  %2885 = or i64 %2879, %2882
  %2886 = select i1 %2880, i64 %2884, i64 %2885
  %2887 = icmp sgt i16 %2818, %2839
  %2888 = or i64 %2844, 6
  %2889 = shl i64 1, %2888
  %2890 = xor i64 %2889, -1
  %2891 = and i64 %2886, %2890
  %2892 = or i64 %2886, %2889
  %2893 = select i1 %2887, i64 %2891, i64 %2892
  %2894 = icmp sgt i16 %2828, %2839
  %2895 = or i64 %2844, 7
  %2896 = shl i64 1, %2895
  %2897 = xor i64 %2896, -1
  %2898 = and i64 %2893, %2897
  %2899 = or i64 %2893, %2896
  br label %2955

; <label>:2900:                                   ; preds = %2838
  %2901 = icmp slt i16 %2752, %2839
  %2902 = shl i64 1, %2844
  %2903 = xor i64 %2902, -1
  %2904 = and i64 %2841, %2903
  %2905 = or i64 %2902, %2841
  %2906 = select i1 %2901, i64 %2904, i64 %2905
  %2907 = icmp slt i16 %2754, %2839
  %2908 = or i64 %2844, 1
  %2909 = shl i64 1, %2908
  %2910 = xor i64 %2909, -1
  %2911 = and i64 %2906, %2910
  %2912 = or i64 %2906, %2909
  %2913 = select i1 %2907, i64 %2911, i64 %2912
  %2914 = icmp slt i16 %2756, %2839
  %2915 = or i64 %2844, 2
  %2916 = shl i64 1, %2915
  %2917 = xor i64 %2916, -1
  %2918 = and i64 %2913, %2917
  %2919 = or i64 %2913, %2916
  %2920 = select i1 %2914, i64 %2918, i64 %2919
  %2921 = icmp slt i16 %2758, %2839
  %2922 = or i64 %2844, 3
  %2923 = shl i64 1, %2922
  %2924 = xor i64 %2923, -1
  %2925 = and i64 %2920, %2924
  %2926 = or i64 %2920, %2923
  %2927 = select i1 %2921, i64 %2925, i64 %2926
  %2928 = icmp slt i16 %2796, %2839
  %2929 = or i64 %2844, 4
  %2930 = shl i64 1, %2929
  %2931 = xor i64 %2930, -1
  %2932 = and i64 %2927, %2931
  %2933 = or i64 %2927, %2930
  %2934 = select i1 %2928, i64 %2932, i64 %2933
  %2935 = icmp slt i16 %2807, %2839
  %2936 = or i64 %2844, 5
  %2937 = shl i64 1, %2936
  %2938 = xor i64 %2937, -1
  %2939 = and i64 %2934, %2938
  %2940 = or i64 %2934, %2937
  %2941 = select i1 %2935, i64 %2939, i64 %2940
  %2942 = icmp slt i16 %2818, %2839
  %2943 = or i64 %2844, 6
  %2944 = shl i64 1, %2943
  %2945 = xor i64 %2944, -1
  %2946 = and i64 %2941, %2945
  %2947 = or i64 %2941, %2944
  %2948 = select i1 %2942, i64 %2946, i64 %2947
  %2949 = icmp slt i16 %2828, %2839
  %2950 = or i64 %2844, 7
  %2951 = shl i64 1, %2950
  %2952 = xor i64 %2951, -1
  %2953 = and i64 %2948, %2952
  %2954 = or i64 %2948, %2951
  br label %2955

; <label>:2955:                                   ; preds = %2900, %2845
  %2956 = phi i64 [ %2899, %2845 ], [ %2954, %2900 ]
  %2957 = phi i64 [ %2898, %2845 ], [ %2953, %2900 ]
  %2958 = phi i1 [ %2894, %2845 ], [ %2949, %2900 ]
  %2959 = select i1 %2958, i64 %2957, i64 %2956
  %2960 = add nuw nsw i64 %2840, 1
  %2961 = icmp eq i64 %2960, 8
  br i1 %2961, label %2965, label %2962

; <label>:2962:                                   ; preds = %2955
  %2963 = getelementptr inbounds %struct.uint16v8_t, %struct.uint16v8_t* %2738, i64 0, i32 0, i64 %2960
  %2964 = load i16, i16* %2963, align 2
  br label %2838

; <label>:2965:                                   ; preds = %2955
  br label %2967

; <label>:2966:                                   ; preds = %2969
  br label %2967

; <label>:2967:                                   ; preds = %2966, %2965
  %2968 = phi i64 [ %2959, %2965 ], [ %3028, %2966 ]
  switch i2 %2834, label %3242 [
    i2 0, label %3034
    i2 1, label %3062
    i2 -2, label %3095
    i2 -1, label %3225
  ]

; <label>:2969:                                   ; preds = %3031, %2836
  %2970 = phi i16 [ %3033, %3031 ], [ %2760, %2836 ]
  %2971 = phi i64 [ %3029, %3031 ], [ 0, %2836 ]
  %2972 = phi i64 [ %3028, %3031 ], [ 0, %2836 ]
  %2973 = shl i64 %2971, 3
  %2974 = icmp eq i16 %2970, %2752
  %2975 = shl i64 1, %2973
  %2976 = xor i64 %2975, -1
  %2977 = and i64 %2972, %2976
  %2978 = or i64 %2975, %2972
  %2979 = select i1 %2974, i64 %2978, i64 %2977
  %2980 = icmp eq i16 %2970, %2754
  %2981 = or i64 %2973, 1
  %2982 = shl i64 1, %2981
  %2983 = xor i64 %2982, -1
  %2984 = and i64 %2979, %2983
  %2985 = or i64 %2979, %2982
  %2986 = select i1 %2980, i64 %2985, i64 %2984
  %2987 = icmp eq i16 %2970, %2756
  %2988 = or i64 %2973, 2
  %2989 = shl i64 1, %2988
  %2990 = xor i64 %2989, -1
  %2991 = and i64 %2986, %2990
  %2992 = or i64 %2986, %2989
  %2993 = select i1 %2987, i64 %2992, i64 %2991
  %2994 = icmp eq i16 %2970, %2758
  %2995 = or i64 %2973, 3
  %2996 = shl i64 1, %2995
  %2997 = xor i64 %2996, -1
  %2998 = and i64 %2993, %2997
  %2999 = or i64 %2993, %2996
  %3000 = select i1 %2994, i64 %2999, i64 %2998
  %3001 = icmp eq i16 %2970, %2796
  %3002 = or i64 %2973, 4
  %3003 = shl i64 1, %3002
  %3004 = xor i64 %3003, -1
  %3005 = and i64 %3000, %3004
  %3006 = or i64 %3000, %3003
  %3007 = select i1 %3001, i64 %3006, i64 %3005
  %3008 = icmp eq i16 %2970, %2807
  %3009 = or i64 %2973, 5
  %3010 = shl i64 1, %3009
  %3011 = xor i64 %3010, -1
  %3012 = and i64 %3007, %3011
  %3013 = or i64 %3007, %3010
  %3014 = select i1 %3008, i64 %3013, i64 %3012
  %3015 = icmp eq i16 %2970, %2818
  %3016 = or i64 %2973, 6
  %3017 = shl i64 1, %3016
  %3018 = xor i64 %3017, -1
  %3019 = and i64 %3014, %3018
  %3020 = or i64 %3014, %3017
  %3021 = select i1 %3015, i64 %3020, i64 %3019
  %3022 = icmp eq i16 %2970, %2828
  %3023 = or i64 %2973, 7
  %3024 = shl i64 1, %3023
  %3025 = xor i64 %3024, -1
  %3026 = and i64 %3021, %3025
  %3027 = or i64 %3021, %3024
  %3028 = select i1 %3022, i64 %3027, i64 %3026
  %3029 = add nuw nsw i64 %2971, 1
  %3030 = icmp eq i64 %3029, 8
  br i1 %3030, label %2966, label %3031

; <label>:3031:                                   ; preds = %2969
  %3032 = getelementptr inbounds %struct.uint16v8_t, %struct.uint16v8_t* %2738, i64 0, i32 0, i64 %3029
  %3033 = load i16, i16* %3032, align 2
  br label %2969

; <label>:3034:                                   ; preds = %2967
  %3035 = icmp eq i64 %2832, 0
  %3036 = icmp eq i64 %2826, 0
  %3037 = or i1 %3035, %3036
  br i1 %3037, label %3245, label %3038

; <label>:3038:                                   ; preds = %3034
  br label %3039

; <label>:3039:                                   ; preds = %3057, %3038
  %3040 = phi i64 [ %3059, %3057 ], [ 0, %3038 ]
  %3041 = phi i16 [ %3060, %3057 ], [ 1, %3038 ]
  %3042 = phi i16 [ %3058, %3057 ], [ 0, %3038 ]
  br label %3045

; <label>:3043:                                   ; preds = %3045
  %3044 = icmp ult i64 %3053, %2826
  br i1 %3044, label %3045, label %3056

; <label>:3045:                                   ; preds = %3043, %3039
  %3046 = phi i64 [ 0, %3039 ], [ %3053, %3043 ]
  %3047 = shl i64 %3046, 3
  %3048 = add i64 %3047, %3040
  %3049 = and i64 %3048, 63
  %3050 = shl i64 1, %3049
  %3051 = and i64 %3050, %2968
  %3052 = icmp eq i64 %3051, 0
  %3053 = add nuw i64 %3046, 1
  br i1 %3052, label %3043, label %3054

; <label>:3054:                                   ; preds = %3045
  %3055 = or i16 %3042, %3041
  br label %3057

; <label>:3056:                                   ; preds = %3043
  br label %3057

; <label>:3057:                                   ; preds = %3056, %3054
  %3058 = phi i16 [ %3055, %3054 ], [ %3042, %3056 ]
  %3059 = add nuw i64 %3040, 1
  %3060 = shl i16 %3041, 1
  %3061 = icmp eq i64 %3059, %2832
  br i1 %3061, label %3243, label %3039

; <label>:3062:                                   ; preds = %2967
  %3063 = icmp eq i64 %2832, 0
  br i1 %3063, label %3245, label %3064

; <label>:3064:                                   ; preds = %3062
  %3065 = add i64 %2826, -1
  %3066 = icmp eq i64 %3065, 0
  br i1 %3066, label %3245, label %3067

; <label>:3067:                                   ; preds = %3064
  br label %3068

; <label>:3068:                                   ; preds = %3091, %3067
  %3069 = phi i16 [ %3087, %3091 ], [ 0, %3067 ]
  %3070 = phi i16 [ %3093, %3091 ], [ 1, %3067 ]
  %3071 = phi i64 [ %3092, %3091 ], [ 0, %3067 ]
  br label %3072

; <label>:3072:                                   ; preds = %3072, %3068
  %3073 = phi i16 [ %3069, %3068 ], [ %3087, %3072 ]
  %3074 = phi i64 [ 0, %3068 ], [ %3088, %3072 ]
  %3075 = shl i64 %3074, 3
  %3076 = add i64 %3075, %3071
  %3077 = and i64 %3076, 63
  %3078 = shl i64 1, %3077
  %3079 = or i64 %3075, 8
  %3080 = add i64 %3079, %3071
  %3081 = and i64 %3080, 63
  %3082 = shl i64 1, %3081
  %3083 = or i64 %3082, %3078
  %3084 = and i64 %3083, %2968
  %3085 = icmp ne i64 %3084, %3083
  %3086 = select i1 %3085, i16 0, i16 %3070
  %3087 = or i16 %3086, %3073
  %3088 = add i64 %3074, 2
  %3089 = icmp ult i64 %3088, %3065
  %3090 = and i1 %3089, %3085
  br i1 %3090, label %3072, label %3091

; <label>:3091:                                   ; preds = %3072
  %3092 = add nuw i64 %3071, 1
  %3093 = shl i16 %3070, 1
  %3094 = icmp eq i64 %3092, %2832
  br i1 %3094, label %3244, label %3068

; <label>:3095:                                   ; preds = %2967
  %3096 = icmp ne i64 %2826, 0
  %3097 = icmp ne i64 %2832, 0
  %3098 = and i1 %3097, %3096
  br i1 %3098, label %3099, label %3102

; <label>:3099:                                   ; preds = %3095
  %3100 = and i64 %2968, 1
  %3101 = icmp ne i64 %3100, 0
  br label %3107

; <label>:3102:                                   ; preds = %3095
  br i1 %3096, label %3107, label %3103

; <label>:3103:                                   ; preds = %3102
  %3104 = xor i1 %3097, true
  %3105 = zext i1 %3104 to i16
  %3106 = icmp ugt i64 %2832, 1
  br label %3114

; <label>:3107:                                   ; preds = %3102, %3099
  %3108 = phi i1 [ false, %3102 ], [ %3101, %3099 ]
  %3109 = zext i1 %3108 to i16
  %3110 = icmp ugt i64 %2826, 1
  %3111 = icmp ugt i64 %2832, 1
  %3112 = and i1 %3111, %3110
  br i1 %3112, label %3120, label %3113

; <label>:3113:                                   ; preds = %3107
  br i1 %3110, label %3125, label %3114

; <label>:3114:                                   ; preds = %3113, %3103
  %3115 = phi i16 [ %3105, %3103 ], [ %3109, %3113 ]
  %3116 = phi i1 [ %3106, %3103 ], [ %3111, %3113 ]
  %3117 = select i1 %3116, i16 0, i16 2
  %3118 = or i16 %3117, %3115
  %3119 = icmp ugt i64 %2832, 2
  br label %3131

; <label>:3120:                                   ; preds = %3107
  %3121 = trunc i64 %2968 to i16
  %3122 = lshr i16 %3121, 8
  %3123 = and i16 %3122, 2
  %3124 = or i16 %3109, %3123
  br label %3125

; <label>:3125:                                   ; preds = %3120, %3113
  %3126 = phi i16 [ %3109, %3113 ], [ %3124, %3120 ]
  %3127 = icmp ugt i64 %2826, 2
  %3128 = icmp ugt i64 %2832, 2
  %3129 = and i1 %3128, %3127
  br i1 %3129, label %3137, label %3130

; <label>:3130:                                   ; preds = %3125
  br i1 %3127, label %3142, label %3131

; <label>:3131:                                   ; preds = %3130, %3114
  %3132 = phi i16 [ %3118, %3114 ], [ %3126, %3130 ]
  %3133 = phi i1 [ %3119, %3114 ], [ %3128, %3130 ]
  %3134 = select i1 %3133, i16 0, i16 4
  %3135 = or i16 %3134, %3132
  %3136 = icmp ugt i64 %2832, 3
  br label %3148

; <label>:3137:                                   ; preds = %3125
  %3138 = and i64 %2968, 262144
  %3139 = icmp ne i64 %3138, 0
  %3140 = select i1 %3139, i16 4, i16 0
  %3141 = or i16 %3126, %3140
  br label %3142

; <label>:3142:                                   ; preds = %3137, %3130
  %3143 = phi i16 [ %3126, %3130 ], [ %3141, %3137 ]
  %3144 = icmp ugt i64 %2826, 3
  %3145 = icmp ugt i64 %2832, 3
  %3146 = and i1 %3145, %3144
  br i1 %3146, label %3154, label %3147

; <label>:3147:                                   ; preds = %3142
  br i1 %3144, label %3159, label %3148

; <label>:3148:                                   ; preds = %3147, %3131
  %3149 = phi i16 [ %3135, %3131 ], [ %3143, %3147 ]
  %3150 = phi i1 [ %3136, %3131 ], [ %3145, %3147 ]
  %3151 = select i1 %3150, i16 0, i16 8
  %3152 = or i16 %3151, %3149
  %3153 = icmp ugt i64 %2832, 4
  br label %3165

; <label>:3154:                                   ; preds = %3142
  %3155 = and i64 %2968, 134217728
  %3156 = icmp ne i64 %3155, 0
  %3157 = select i1 %3156, i16 8, i16 0
  %3158 = or i16 %3143, %3157
  br label %3159

; <label>:3159:                                   ; preds = %3154, %3147
  %3160 = phi i16 [ %3143, %3147 ], [ %3158, %3154 ]
  %3161 = icmp ugt i64 %2826, 4
  %3162 = icmp ugt i64 %2832, 4
  %3163 = and i1 %3162, %3161
  br i1 %3163, label %3171, label %3164

; <label>:3164:                                   ; preds = %3159
  br i1 %3161, label %3176, label %3165

; <label>:3165:                                   ; preds = %3164, %3148
  %3166 = phi i16 [ %3152, %3148 ], [ %3160, %3164 ]
  %3167 = phi i1 [ %3153, %3148 ], [ %3162, %3164 ]
  %3168 = select i1 %3167, i16 0, i16 16
  %3169 = or i16 %3168, %3166
  %3170 = icmp ugt i64 %2832, 5
  br label %3182

; <label>:3171:                                   ; preds = %3159
  %3172 = and i64 %2968, 68719476736
  %3173 = icmp ne i64 %3172, 0
  %3174 = select i1 %3173, i16 16, i16 0
  %3175 = or i16 %3160, %3174
  br label %3176

; <label>:3176:                                   ; preds = %3171, %3164
  %3177 = phi i16 [ %3160, %3164 ], [ %3175, %3171 ]
  %3178 = icmp ugt i64 %2826, 5
  %3179 = icmp ugt i64 %2832, 5
  %3180 = and i1 %3179, %3178
  br i1 %3180, label %3188, label %3181

; <label>:3181:                                   ; preds = %3176
  br i1 %3178, label %3193, label %3182

; <label>:3182:                                   ; preds = %3181, %3165
  %3183 = phi i16 [ %3169, %3165 ], [ %3177, %3181 ]
  %3184 = phi i1 [ %3170, %3165 ], [ %3179, %3181 ]
  %3185 = select i1 %3184, i16 0, i16 32
  %3186 = or i16 %3185, %3183
  %3187 = icmp ugt i64 %2832, 6
  br label %3199

; <label>:3188:                                   ; preds = %3176
  %3189 = and i64 %2968, 35184372088832
  %3190 = icmp ne i64 %3189, 0
  %3191 = select i1 %3190, i16 32, i16 0
  %3192 = or i16 %3177, %3191
  br label %3193

; <label>:3193:                                   ; preds = %3188, %3181
  %3194 = phi i16 [ %3177, %3181 ], [ %3192, %3188 ]
  %3195 = icmp ugt i64 %2826, 6
  %3196 = icmp ugt i64 %2832, 6
  %3197 = and i1 %3196, %3195
  br i1 %3197, label %3205, label %3198

; <label>:3198:                                   ; preds = %3193
  br i1 %3195, label %3210, label %3199

; <label>:3199:                                   ; preds = %3198, %3182
  %3200 = phi i16 [ %3186, %3182 ], [ %3194, %3198 ]
  %3201 = phi i1 [ %3187, %3182 ], [ %3196, %3198 ]
  %3202 = select i1 %3201, i16 0, i16 64
  %3203 = or i16 %3202, %3200
  %3204 = icmp ugt i64 %2832, 7
  br label %3216

; <label>:3205:                                   ; preds = %3193
  %3206 = and i64 %2968, 18014398509481984
  %3207 = icmp ne i64 %3206, 0
  %3208 = select i1 %3207, i16 64, i16 0
  %3209 = or i16 %3194, %3208
  br label %3210

; <label>:3210:                                   ; preds = %3205, %3198
  %3211 = phi i16 [ %3194, %3198 ], [ %3209, %3205 ]
  %3212 = icmp ugt i64 %2826, 7
  %3213 = icmp ugt i64 %2832, 7
  %3214 = and i1 %3213, %3212
  br i1 %3214, label %3221, label %3215

; <label>:3215:                                   ; preds = %3210
  br i1 %3212, label %3245, label %3216

; <label>:3216:                                   ; preds = %3215, %3199
  %3217 = phi i16 [ %3203, %3199 ], [ %3211, %3215 ]
  %3218 = phi i1 [ %3204, %3199 ], [ %3213, %3215 ]
  %3219 = select i1 %3218, i16 0, i16 128
  %3220 = or i16 %3219, %3217
  br label %3245

; <label>:3221:                                   ; preds = %3210
  %3222 = icmp slt i64 %2968, 0
  %3223 = select i1 %3222, i16 128, i16 0
  %3224 = or i16 %3211, %3223
  br label %3245

; <label>:3225:                                   ; preds = %2967
  %3226 = icmp ugt i64 %2826, %2832
  br i1 %3226, label %3245, label %3227

; <label>:3227:                                   ; preds = %3225
  %3228 = icmp eq i64 %2826, 0
  br i1 %3228, label %3245, label %3229

; <label>:3229:                                   ; preds = %3227
  br label %3230

; <label>:3230:                                   ; preds = %3229
  br label %3231

; <label>:3231:                                   ; preds = %3230
  %3232 = icmp eq i64 %2832, 0
  br i1 %3232, label %3238, label %3233

; <label>:3233:                                   ; preds = %3231
  %3234 = and i64 %2968, 1
  %3235 = icmp eq i64 %3234, 0
  br i1 %3235, label %3238, label %3236

; <label>:3236:                                   ; preds = %3233
  %3237 = icmp ugt i64 %2826, 1
  br i1 %3237, label %3669, label %3239

; <label>:3238:                                   ; preds = %3713, %3711, %3706, %3704, %3699, %3697, %3692, %3690, %3685, %3683, %3678, %3676, %3671, %3669, %3233, %3231
  br label %3240

; <label>:3239:                                   ; preds = %3715, %3709, %3702, %3695, %3688, %3681, %3674, %3236
  br label %3240

; <label>:3240:                                   ; preds = %3239, %3238
  %3241 = phi i16 [ 254, %3238 ], [ 255, %3239 ]
  br label %3716

; <label>:3242:                                   ; preds = %2967
  unreachable

; <label>:3243:                                   ; preds = %3057
  br label %3245

; <label>:3244:                                   ; preds = %3091
  br label %3245

; <label>:3245:                                   ; preds = %4022, %3244, %3243, %3227, %3225, %3221, %3216, %3215, %3064, %3062, %3034
  %3246 = phi i64 [ %2826, %3034 ], [ %2826, %3062 ], [ 1, %3064 ], [ %2826, %3215 ], [ %2826, %3221 ], [ %2826, %3216 ], [ %2826, %3225 ], [ 0, %3227 ], [ %2826, %3243 ], [ %2826, %3244 ], [ %2826, %4022 ]
  %3247 = phi i16 [ 0, %3034 ], [ 0, %3062 ], [ 0, %3064 ], [ %3211, %3215 ], [ %3224, %3221 ], [ %3220, %3216 ], [ 0, %3225 ], [ 255, %3227 ], [ %3058, %3243 ], [ %3087, %3244 ], [ %4023, %4022 ]
  %3248 = trunc i8 %2833 to i2
  switch i2 %3248, label %3256 [
    i2 0, label %3257
    i2 1, label %3251
    i2 -2, label %3257
    i2 -1, label %3249
  ]

; <label>:3249:                                   ; preds = %3245
  %3250 = icmp eq i64 %2832, 0
  br i1 %3250, label %3257, label %3253

; <label>:3251:                                   ; preds = %3245
  %3252 = xor i16 %3247, 255
  br label %3257

; <label>:3253:                                   ; preds = %3249
  %3254 = xor i16 %3247, 1
  %3255 = icmp eq i64 %2832, 1
  br i1 %3255, label %3257, label %3275

; <label>:3256:                                   ; preds = %3245
  unreachable

; <label>:3257:                                   ; preds = %3290, %3287, %3284, %3281, %3278, %3275, %3253, %3251, %3249, %3245, %3245
  %3258 = phi i16 [ %3252, %3251 ], [ %3247, %3245 ], [ %3247, %3245 ], [ %3288, %3287 ], [ %3285, %3284 ], [ %3282, %3281 ], [ %3279, %3278 ], [ %3276, %3275 ], [ %3254, %3253 ], [ %3247, %3249 ], [ %3293, %3290 ]
  %3259 = and i8 %12, 64
  %3260 = icmp eq i8 %3259, 0
  %3261 = icmp eq i16 %3258, 0
  br i1 %3260, label %3262, label %3267

; <label>:3262:                                   ; preds = %3257
  br i1 %3261, label %3294, label %3263

; <label>:3263:                                   ; preds = %3262
  %3264 = zext i16 %3258 to i32
  %3265 = tail call i32 @llvm.cttz.i32(i32 %3264, i1 true) 
  %3266 = zext i32 %3265 to i64
  br label %3294

; <label>:3267:                                   ; preds = %3257
  br i1 %3261, label %3294, label %3268

; <label>:3268:                                   ; preds = %3267
  %3269 = zext i16 %3258 to i32
  %3270 = tail call i32 @llvm.ctlz.i32(i32 %3269, i1 true) 
  %3271 = add nuw nsw i32 %3270, 65512
  %3272 = and i32 %3271, 65535
  %3273 = zext i32 %3272 to i64
  %3274 = sub nsw i64 7, %3273
  br label %3294

; <label>:3275:                                   ; preds = %3253
  %3276 = xor i16 %3247, 3
  %3277 = icmp ugt i64 %2832, 2
  br i1 %3277, label %3278, label %3257

; <label>:3278:                                   ; preds = %3275
  %3279 = xor i16 %3247, 7
  %3280 = icmp eq i64 %2832, 3
  br i1 %3280, label %3257, label %3281

; <label>:3281:                                   ; preds = %3278
  %3282 = xor i16 %3247, 15
  %3283 = icmp ugt i64 %2832, 4
  br i1 %3283, label %3284, label %3257

; <label>:3284:                                   ; preds = %3281
  %3285 = xor i16 %3247, 31
  %3286 = icmp eq i64 %2832, 5
  br i1 %3286, label %3257, label %3287

; <label>:3287:                                   ; preds = %3284
  %3288 = xor i16 %3247, 63
  %3289 = icmp ugt i64 %2832, 6
  br i1 %3289, label %3290, label %3257

; <label>:3290:                                   ; preds = %3287
  %3291 = icmp ne i64 %2832, 7
  %3292 = select i1 %3291, i16 255, i16 127
  %3293 = xor i16 %3247, %3292
  br label %3257

; <label>:3294:                                   ; preds = %3268, %3267, %3263, %3262
  %3295 = phi i64 [ %3274, %3268 ], [ 8, %3267 ], [ %3266, %3263 ], [ 8, %3262 ]
  %3296 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 5, i32 0, i32 0
  %3297 = and i64 %3295, 65535
  store i64 %3297, i64* %3296, align 8
  %3298 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  %3299 = icmp ne i16 %3258, 0
  %3300 = zext i1 %3299 to i8
  store i8 %3300, i8* %3298, align 1
  %3301 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  %3302 = icmp ult i64 %2832, 8
  %3303 = zext i1 %3302 to i8
  store i8 %3303, i8* %3301, align 1
  %3304 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  %3305 = icmp ult i64 %3246, 8
  %3306 = zext i1 %3305 to i8
  store i8 %3306, i8* %3304, align 1
  %3307 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  %3308 = trunc i16 %3258 to i8
  %3309 = and i8 %3308, 1
  store i8 %3309, i8* %3307, align 1
  %3310 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 0, i8* %3310, align 1
  %3311 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 0, i8* %3311, align 1
  call void @llvm.lifetime.end(i64 16, i8* nonnull %2739) 
  br label %3313

; <label>:3312:                                   ; preds = %5
  unreachable

; <label>:3313:                                   ; preds = %3294, %2719, %1645, %1070
  ret %struct.Memory* %0

; <label>:3314:                                   ; preds = %1587
  %3315 = icmp ugt i64 %1183, 1
  br i1 %3315, label %3316, label %1589

; <label>:3316:                                   ; preds = %3314
  %3317 = and i64 %1319, 512
  %3318 = icmp eq i64 %3317, 0
  br i1 %3318, label %1589, label %3319

; <label>:3319:                                   ; preds = %3316
  %3320 = icmp ugt i64 %1177, 2
  br i1 %3320, label %3321, label %1590

; <label>:3321:                                   ; preds = %3319
  %3322 = icmp ugt i64 %1183, 2
  br i1 %3322, label %3323, label %1589

; <label>:3323:                                   ; preds = %3321
  %3324 = and i64 %1319, 262144
  %3325 = icmp eq i64 %3324, 0
  br i1 %3325, label %1589, label %3326

; <label>:3326:                                   ; preds = %3323
  %3327 = icmp ugt i64 %1177, 3
  br i1 %3327, label %3328, label %1590

; <label>:3328:                                   ; preds = %3326
  %3329 = icmp ugt i64 %1183, 3
  br i1 %3329, label %3330, label %1589

; <label>:3330:                                   ; preds = %3328
  %3331 = and i64 %1319, 134217728
  %3332 = icmp eq i64 %3331, 0
  br i1 %3332, label %1589, label %3333

; <label>:3333:                                   ; preds = %3330
  %3334 = icmp ugt i64 %1177, 4
  br i1 %3334, label %3335, label %1590

; <label>:3335:                                   ; preds = %3333
  %3336 = icmp ugt i64 %1183, 4
  br i1 %3336, label %3337, label %1589

; <label>:3337:                                   ; preds = %3335
  %3338 = and i64 %1319, 68719476736
  %3339 = icmp eq i64 %3338, 0
  br i1 %3339, label %1589, label %3340

; <label>:3340:                                   ; preds = %3337
  %3341 = icmp ugt i64 %1177, 5
  br i1 %3341, label %3342, label %1590

; <label>:3342:                                   ; preds = %3340
  %3343 = icmp ugt i64 %1183, 5
  br i1 %3343, label %3344, label %1589

; <label>:3344:                                   ; preds = %3342
  %3345 = and i64 %1319, 35184372088832
  %3346 = icmp eq i64 %3345, 0
  br i1 %3346, label %1589, label %3347

; <label>:3347:                                   ; preds = %3344
  %3348 = icmp ugt i64 %1177, 6
  br i1 %3348, label %3349, label %1590

; <label>:3349:                                   ; preds = %3347
  %3350 = icmp ugt i64 %1183, 6
  br i1 %3350, label %3351, label %1589

; <label>:3351:                                   ; preds = %3349
  %3352 = and i64 %1319, 18014398509481984
  %3353 = icmp eq i64 %3352, 0
  br i1 %3353, label %1589, label %3354

; <label>:3354:                                   ; preds = %3351
  %3355 = icmp ugt i64 %1177, 7
  br i1 %3355, label %3356, label %1590

; <label>:3356:                                   ; preds = %3354
  %3357 = icmp ugt i64 %1183, 7
  br i1 %3357, label %3358, label %1589

; <label>:3358:                                   ; preds = %3356
  %3359 = icmp sgt i64 %1319, -1
  br i1 %3359, label %1589, label %3360

; <label>:3360:                                   ; preds = %3358
  br label %1590

; <label>:3361:                                   ; preds = %1591
  %3362 = icmp ugt i64 %1183, 1
  br i1 %3362, label %3363, label %3413

; <label>:3363:                                   ; preds = %3361
  %3364 = and i64 %1319, 2
  %3365 = icmp eq i64 %3364, 0
  br i1 %3365, label %3413, label %3366

; <label>:3366:                                   ; preds = %3363
  %3367 = icmp ugt i64 %1177, 1
  br i1 %3367, label %3368, label %3412

; <label>:3368:                                   ; preds = %3366
  %3369 = icmp ugt i64 %1183, 2
  br i1 %3369, label %3370, label %3413

; <label>:3370:                                   ; preds = %3368
  %3371 = and i64 %1319, 1024
  %3372 = icmp eq i64 %3371, 0
  br i1 %3372, label %3413, label %3373

; <label>:3373:                                   ; preds = %3370
  %3374 = icmp ugt i64 %1177, 2
  br i1 %3374, label %3375, label %3412

; <label>:3375:                                   ; preds = %3373
  %3376 = icmp ugt i64 %1183, 3
  br i1 %3376, label %3377, label %3413

; <label>:3377:                                   ; preds = %3375
  %3378 = and i64 %1319, 524288
  %3379 = icmp eq i64 %3378, 0
  br i1 %3379, label %3413, label %3380

; <label>:3380:                                   ; preds = %3377
  %3381 = icmp ugt i64 %1177, 3
  br i1 %3381, label %3382, label %3412

; <label>:3382:                                   ; preds = %3380
  %3383 = icmp ugt i64 %1183, 4
  br i1 %3383, label %3384, label %3413

; <label>:3384:                                   ; preds = %3382
  %3385 = and i64 %1319, 268435456
  %3386 = icmp eq i64 %3385, 0
  br i1 %3386, label %3413, label %3387

; <label>:3387:                                   ; preds = %3384
  %3388 = icmp ugt i64 %1177, 4
  br i1 %3388, label %3389, label %3412

; <label>:3389:                                   ; preds = %3387
  %3390 = icmp ugt i64 %1183, 5
  br i1 %3390, label %3391, label %3413

; <label>:3391:                                   ; preds = %3389
  %3392 = and i64 %1319, 137438953472
  %3393 = icmp eq i64 %3392, 0
  br i1 %3393, label %3413, label %3394

; <label>:3394:                                   ; preds = %3391
  %3395 = icmp ugt i64 %1177, 5
  br i1 %3395, label %3396, label %3412

; <label>:3396:                                   ; preds = %3394
  %3397 = icmp ugt i64 %1183, 6
  br i1 %3397, label %3398, label %3413

; <label>:3398:                                   ; preds = %3396
  %3399 = and i64 %1319, 70368744177664
  %3400 = icmp eq i64 %3399, 0
  br i1 %3400, label %3413, label %3401

; <label>:3401:                                   ; preds = %3398
  %3402 = icmp ugt i64 %1177, 6
  br i1 %3402, label %3403, label %3412

; <label>:3403:                                   ; preds = %3401
  %3404 = icmp ugt i64 %1183, 7
  br i1 %3404, label %3405, label %3413

; <label>:3405:                                   ; preds = %3403
  %3406 = and i64 %1319, 36028797018963968
  %3407 = icmp eq i64 %3406, 0
  br i1 %3407, label %3413, label %3408

; <label>:3408:                                   ; preds = %3405
  br i1 false, label %3409, label %3412

; <label>:3409:                                   ; preds = %3408
  br i1 undef, label %3410, label %3413

; <label>:3410:                                   ; preds = %3409
  br i1 undef, label %3413, label %3411

; <label>:3411:                                   ; preds = %3410
  br label %3412

; <label>:3412:                                   ; preds = %3411, %3408, %3401, %3394, %3387, %3380, %3373, %3366
  br label %3415

; <label>:3413:                                   ; preds = %3410, %3409, %3405, %3403, %3398, %3396, %3391, %3389, %3384, %3382, %3377, %3375, %3370, %3368, %3363, %3361
  %3414 = and i16 %1592, 253
  br label %3415

; <label>:3415:                                   ; preds = %3413, %3412
  %3416 = phi i16 [ %3414, %3413 ], [ %1592, %3412 ]
  br label %3417

; <label>:3417:                                   ; preds = %3415
  %3418 = icmp ugt i64 %1183, 2
  br i1 %3418, label %3419, label %3465

; <label>:3419:                                   ; preds = %3417
  %3420 = and i64 %1319, 4
  %3421 = icmp eq i64 %3420, 0
  br i1 %3421, label %3465, label %3422

; <label>:3422:                                   ; preds = %3419
  %3423 = icmp ugt i64 %1177, 1
  br i1 %3423, label %3424, label %3464

; <label>:3424:                                   ; preds = %3422
  %3425 = icmp ugt i64 %1183, 3
  br i1 %3425, label %3426, label %3465

; <label>:3426:                                   ; preds = %3424
  %3427 = and i64 %1319, 2048
  %3428 = icmp eq i64 %3427, 0
  br i1 %3428, label %3465, label %3429

; <label>:3429:                                   ; preds = %3426
  %3430 = icmp ugt i64 %1177, 2
  br i1 %3430, label %3431, label %3464

; <label>:3431:                                   ; preds = %3429
  %3432 = icmp ugt i64 %1183, 4
  br i1 %3432, label %3433, label %3465

; <label>:3433:                                   ; preds = %3431
  %3434 = and i64 %1319, 1048576
  %3435 = icmp eq i64 %3434, 0
  br i1 %3435, label %3465, label %3436

; <label>:3436:                                   ; preds = %3433
  %3437 = icmp ugt i64 %1177, 3
  br i1 %3437, label %3438, label %3464

; <label>:3438:                                   ; preds = %3436
  %3439 = icmp ugt i64 %1183, 5
  br i1 %3439, label %3440, label %3465

; <label>:3440:                                   ; preds = %3438
  %3441 = and i64 %1319, 536870912
  %3442 = icmp eq i64 %3441, 0
  br i1 %3442, label %3465, label %3443

; <label>:3443:                                   ; preds = %3440
  %3444 = icmp ugt i64 %1177, 4
  br i1 %3444, label %3445, label %3464

; <label>:3445:                                   ; preds = %3443
  %3446 = icmp ugt i64 %1183, 6
  br i1 %3446, label %3447, label %3465

; <label>:3447:                                   ; preds = %3445
  %3448 = and i64 %1319, 274877906944
  %3449 = icmp eq i64 %3448, 0
  br i1 %3449, label %3465, label %3450

; <label>:3450:                                   ; preds = %3447
  %3451 = icmp ugt i64 %1177, 5
  br i1 %3451, label %3452, label %3464

; <label>:3452:                                   ; preds = %3450
  %3453 = icmp ugt i64 %1183, 7
  br i1 %3453, label %3454, label %3465

; <label>:3454:                                   ; preds = %3452
  %3455 = and i64 %1319, 140737488355328
  %3456 = icmp eq i64 %3455, 0
  br i1 %3456, label %3465, label %3457

; <label>:3457:                                   ; preds = %3454
  br i1 false, label %3458, label %3464

; <label>:3458:                                   ; preds = %3457
  br i1 undef, label %3459, label %3465

; <label>:3459:                                   ; preds = %3458
  br i1 undef, label %3465, label %3460

; <label>:3460:                                   ; preds = %3459
  br i1 false, label %3461, label %3464

; <label>:3461:                                   ; preds = %3460
  br i1 undef, label %3462, label %3465

; <label>:3462:                                   ; preds = %3461
  br i1 undef, label %3465, label %3463

; <label>:3463:                                   ; preds = %3462
  br label %3464

; <label>:3464:                                   ; preds = %3463, %3460, %3457, %3450, %3443, %3436, %3429, %3422
  br label %3467

; <label>:3465:                                   ; preds = %3462, %3461, %3459, %3458, %3454, %3452, %3447, %3445, %3440, %3438, %3433, %3431, %3426, %3424, %3419, %3417
  %3466 = xor i16 %3416, 4
  br label %3467

; <label>:3467:                                   ; preds = %3465, %3464
  %3468 = phi i16 [ %3466, %3465 ], [ %3416, %3464 ]
  br label %3469

; <label>:3469:                                   ; preds = %3467
  %3470 = icmp ugt i64 %1183, 3
  br i1 %3470, label %3471, label %3513

; <label>:3471:                                   ; preds = %3469
  %3472 = and i64 %1319, 8
  %3473 = icmp eq i64 %3472, 0
  br i1 %3473, label %3513, label %3474

; <label>:3474:                                   ; preds = %3471
  %3475 = icmp ugt i64 %1177, 1
  br i1 %3475, label %3476, label %3512

; <label>:3476:                                   ; preds = %3474
  %3477 = icmp ugt i64 %1183, 4
  br i1 %3477, label %3478, label %3513

; <label>:3478:                                   ; preds = %3476
  %3479 = and i64 %1319, 4096
  %3480 = icmp eq i64 %3479, 0
  br i1 %3480, label %3513, label %3481

; <label>:3481:                                   ; preds = %3478
  %3482 = icmp ugt i64 %1177, 2
  br i1 %3482, label %3483, label %3512

; <label>:3483:                                   ; preds = %3481
  %3484 = icmp ugt i64 %1183, 5
  br i1 %3484, label %3485, label %3513

; <label>:3485:                                   ; preds = %3483
  %3486 = and i64 %1319, 2097152
  %3487 = icmp eq i64 %3486, 0
  br i1 %3487, label %3513, label %3488

; <label>:3488:                                   ; preds = %3485
  %3489 = icmp ugt i64 %1177, 3
  br i1 %3489, label %3490, label %3512

; <label>:3490:                                   ; preds = %3488
  %3491 = icmp ugt i64 %1183, 6
  br i1 %3491, label %3492, label %3513

; <label>:3492:                                   ; preds = %3490
  %3493 = and i64 %1319, 1073741824
  %3494 = icmp eq i64 %3493, 0
  br i1 %3494, label %3513, label %3495

; <label>:3495:                                   ; preds = %3492
  %3496 = icmp ugt i64 %1177, 4
  br i1 %3496, label %3497, label %3512

; <label>:3497:                                   ; preds = %3495
  %3498 = icmp ugt i64 %1183, 7
  br i1 %3498, label %3499, label %3513

; <label>:3499:                                   ; preds = %3497
  %3500 = and i64 %1319, 549755813888
  %3501 = icmp eq i64 %3500, 0
  br i1 %3501, label %3513, label %3502

; <label>:3502:                                   ; preds = %3499
  br i1 false, label %3503, label %3512

; <label>:3503:                                   ; preds = %3502
  br i1 undef, label %3504, label %3513

; <label>:3504:                                   ; preds = %3503
  br i1 undef, label %3513, label %3505

; <label>:3505:                                   ; preds = %3504
  br i1 false, label %3506, label %3512

; <label>:3506:                                   ; preds = %3505
  br i1 undef, label %3507, label %3513

; <label>:3507:                                   ; preds = %3506
  br i1 undef, label %3513, label %3508

; <label>:3508:                                   ; preds = %3507
  br i1 false, label %3509, label %3512

; <label>:3509:                                   ; preds = %3508
  br i1 undef, label %3510, label %3513

; <label>:3510:                                   ; preds = %3509
  br i1 undef, label %3513, label %3511

; <label>:3511:                                   ; preds = %3510
  br label %3512

; <label>:3512:                                   ; preds = %3511, %3508, %3505, %3502, %3495, %3488, %3481, %3474
  br label %3515

; <label>:3513:                                   ; preds = %3510, %3509, %3507, %3506, %3504, %3503, %3499, %3497, %3492, %3490, %3485, %3483, %3478, %3476, %3471, %3469
  %3514 = xor i16 %3468, 8
  br label %3515

; <label>:3515:                                   ; preds = %3513, %3512
  %3516 = phi i16 [ %3514, %3513 ], [ %3468, %3512 ]
  br label %3517

; <label>:3517:                                   ; preds = %3515
  %3518 = icmp ugt i64 %1183, 4
  br i1 %3518, label %3519, label %3557

; <label>:3519:                                   ; preds = %3517
  %3520 = and i64 %1319, 16
  %3521 = icmp eq i64 %3520, 0
  br i1 %3521, label %3557, label %3522

; <label>:3522:                                   ; preds = %3519
  %3523 = icmp ugt i64 %1177, 1
  br i1 %3523, label %3524, label %3556

; <label>:3524:                                   ; preds = %3522
  %3525 = icmp ugt i64 %1183, 5
  br i1 %3525, label %3526, label %3557

; <label>:3526:                                   ; preds = %3524
  %3527 = and i64 %1319, 8192
  %3528 = icmp eq i64 %3527, 0
  br i1 %3528, label %3557, label %3529

; <label>:3529:                                   ; preds = %3526
  %3530 = icmp ugt i64 %1177, 2
  br i1 %3530, label %3531, label %3556

; <label>:3531:                                   ; preds = %3529
  %3532 = icmp ugt i64 %1183, 6
  br i1 %3532, label %3533, label %3557

; <label>:3533:                                   ; preds = %3531
  %3534 = and i64 %1319, 4194304
  %3535 = icmp eq i64 %3534, 0
  br i1 %3535, label %3557, label %3536

; <label>:3536:                                   ; preds = %3533
  %3537 = icmp ugt i64 %1177, 3
  br i1 %3537, label %3538, label %3556

; <label>:3538:                                   ; preds = %3536
  %3539 = icmp ugt i64 %1183, 7
  br i1 %3539, label %3540, label %3557

; <label>:3540:                                   ; preds = %3538
  %3541 = trunc i64 %1319 to i32
  %3542 = icmp sgt i32 %3541, -1
  br i1 %3542, label %3557, label %3543

; <label>:3543:                                   ; preds = %3540
  br i1 false, label %3544, label %3556

; <label>:3544:                                   ; preds = %3543
  br i1 undef, label %3545, label %3557

; <label>:3545:                                   ; preds = %3544
  br i1 undef, label %3557, label %3546

; <label>:3546:                                   ; preds = %3545
  br i1 false, label %3547, label %3556

; <label>:3547:                                   ; preds = %3546
  br i1 undef, label %3548, label %3557

; <label>:3548:                                   ; preds = %3547
  br i1 undef, label %3557, label %3549

; <label>:3549:                                   ; preds = %3548
  br i1 false, label %3550, label %3556

; <label>:3550:                                   ; preds = %3549
  br i1 undef, label %3551, label %3557

; <label>:3551:                                   ; preds = %3550
  br i1 undef, label %3557, label %3552

; <label>:3552:                                   ; preds = %3551
  br i1 false, label %3553, label %3556

; <label>:3553:                                   ; preds = %3552
  br i1 undef, label %3554, label %3557

; <label>:3554:                                   ; preds = %3553
  br i1 undef, label %3557, label %3555

; <label>:3555:                                   ; preds = %3554
  br label %3556

; <label>:3556:                                   ; preds = %3555, %3552, %3549, %3546, %3543, %3536, %3529, %3522
  br label %3559

; <label>:3557:                                   ; preds = %3554, %3553, %3551, %3550, %3548, %3547, %3545, %3544, %3540, %3538, %3533, %3531, %3526, %3524, %3519, %3517
  %3558 = xor i16 %3516, 16
  br label %3559

; <label>:3559:                                   ; preds = %3557, %3556
  %3560 = phi i16 [ %3558, %3557 ], [ %3516, %3556 ]
  br label %3561

; <label>:3561:                                   ; preds = %3559
  %3562 = icmp ugt i64 %1183, 5
  br i1 %3562, label %3563, label %3597

; <label>:3563:                                   ; preds = %3561
  %3564 = and i64 %1319, 32
  %3565 = icmp eq i64 %3564, 0
  br i1 %3565, label %3597, label %3566

; <label>:3566:                                   ; preds = %3563
  %3567 = icmp ugt i64 %1177, 1
  br i1 %3567, label %3568, label %3596

; <label>:3568:                                   ; preds = %3566
  %3569 = icmp ugt i64 %1183, 6
  br i1 %3569, label %3570, label %3597

; <label>:3570:                                   ; preds = %3568
  %3571 = and i64 %1319, 16384
  %3572 = icmp eq i64 %3571, 0
  br i1 %3572, label %3597, label %3573

; <label>:3573:                                   ; preds = %3570
  %3574 = icmp ugt i64 %1177, 2
  br i1 %3574, label %3575, label %3596

; <label>:3575:                                   ; preds = %3573
  %3576 = icmp ugt i64 %1183, 7
  br i1 %3576, label %3577, label %3597

; <label>:3577:                                   ; preds = %3575
  %3578 = and i64 %1319, 8388608
  %3579 = icmp eq i64 %3578, 0
  br i1 %3579, label %3597, label %3580

; <label>:3580:                                   ; preds = %3577
  br i1 false, label %3581, label %3596

; <label>:3581:                                   ; preds = %3580
  br i1 undef, label %3582, label %3597

; <label>:3582:                                   ; preds = %3581
  br i1 undef, label %3597, label %3583

; <label>:3583:                                   ; preds = %3582
  br i1 false, label %3584, label %3596

; <label>:3584:                                   ; preds = %3583
  br i1 undef, label %3585, label %3597

; <label>:3585:                                   ; preds = %3584
  br i1 undef, label %3597, label %3586

; <label>:3586:                                   ; preds = %3585
  br i1 false, label %3587, label %3596

; <label>:3587:                                   ; preds = %3586
  br i1 undef, label %3588, label %3597

; <label>:3588:                                   ; preds = %3587
  br i1 undef, label %3597, label %3589

; <label>:3589:                                   ; preds = %3588
  br i1 false, label %3590, label %3596

; <label>:3590:                                   ; preds = %3589
  br i1 undef, label %3591, label %3597

; <label>:3591:                                   ; preds = %3590
  br i1 undef, label %3597, label %3592

; <label>:3592:                                   ; preds = %3591
  br i1 false, label %3593, label %3596

; <label>:3593:                                   ; preds = %3592
  br i1 undef, label %3594, label %3597

; <label>:3594:                                   ; preds = %3593
  br i1 undef, label %3597, label %3595

; <label>:3595:                                   ; preds = %3594
  br label %3596

; <label>:3596:                                   ; preds = %3595, %3592, %3589, %3586, %3583, %3580, %3573, %3566
  br label %3599

; <label>:3597:                                   ; preds = %3594, %3593, %3591, %3590, %3588, %3587, %3585, %3584, %3582, %3581, %3577, %3575, %3570, %3568, %3563, %3561
  %3598 = xor i16 %3560, 32
  br label %3599

; <label>:3599:                                   ; preds = %3597, %3596
  %3600 = phi i16 [ %3598, %3597 ], [ %3560, %3596 ]
  br label %3601

; <label>:3601:                                   ; preds = %3599
  %3602 = icmp ugt i64 %1183, 6
  br i1 %3602, label %3603, label %3633

; <label>:3603:                                   ; preds = %3601
  %3604 = and i64 %1319, 64
  %3605 = icmp eq i64 %3604, 0
  br i1 %3605, label %3633, label %3606

; <label>:3606:                                   ; preds = %3603
  %3607 = icmp ugt i64 %1177, 1
  br i1 %3607, label %3608, label %3632

; <label>:3608:                                   ; preds = %3606
  %3609 = icmp ugt i64 %1183, 7
  br i1 %3609, label %3610, label %3633

; <label>:3610:                                   ; preds = %3608
  %3611 = trunc i64 %1319 to i16
  %3612 = icmp sgt i16 %3611, -1
  br i1 %3612, label %3633, label %3613

; <label>:3613:                                   ; preds = %3610
  br i1 false, label %3614, label %3632

; <label>:3614:                                   ; preds = %3613
  br i1 undef, label %3615, label %3633

; <label>:3615:                                   ; preds = %3614
  br i1 undef, label %3633, label %3616

; <label>:3616:                                   ; preds = %3615
  br i1 false, label %3617, label %3632

; <label>:3617:                                   ; preds = %3616
  br i1 undef, label %3618, label %3633

; <label>:3618:                                   ; preds = %3617
  br i1 undef, label %3633, label %3619

; <label>:3619:                                   ; preds = %3618
  br i1 false, label %3620, label %3632

; <label>:3620:                                   ; preds = %3619
  br i1 undef, label %3621, label %3633

; <label>:3621:                                   ; preds = %3620
  br i1 undef, label %3633, label %3622

; <label>:3622:                                   ; preds = %3621
  br i1 false, label %3623, label %3632

; <label>:3623:                                   ; preds = %3622
  br i1 undef, label %3624, label %3633

; <label>:3624:                                   ; preds = %3623
  br i1 undef, label %3633, label %3625

; <label>:3625:                                   ; preds = %3624
  br i1 false, label %3626, label %3632

; <label>:3626:                                   ; preds = %3625
  br i1 undef, label %3627, label %3633

; <label>:3627:                                   ; preds = %3626
  br i1 undef, label %3633, label %3628

; <label>:3628:                                   ; preds = %3627
  br i1 false, label %3629, label %3632

; <label>:3629:                                   ; preds = %3628
  br i1 undef, label %3630, label %3633

; <label>:3630:                                   ; preds = %3629
  br i1 undef, label %3633, label %3631

; <label>:3631:                                   ; preds = %3630
  br label %3632

; <label>:3632:                                   ; preds = %3631, %3628, %3625, %3622, %3619, %3616, %3613, %3606
  br label %3635

; <label>:3633:                                   ; preds = %3630, %3629, %3627, %3626, %3624, %3623, %3621, %3620, %3618, %3617, %3615, %3614, %3610, %3608, %3603, %3601
  %3634 = xor i16 %3600, 64
  br label %3635

; <label>:3635:                                   ; preds = %3633, %3632
  %3636 = phi i16 [ %3634, %3633 ], [ %3600, %3632 ]
  br label %3637

; <label>:3637:                                   ; preds = %3635
  %3638 = icmp ugt i64 %1183, 7
  br i1 %3638, label %3639, label %3665

; <label>:3639:                                   ; preds = %3637
  %3640 = trunc i64 %1319 to i8
  %3641 = icmp sgt i8 %3640, -1
  br i1 %3641, label %3665, label %3642

; <label>:3642:                                   ; preds = %3639
  br i1 false, label %3643, label %3664

; <label>:3643:                                   ; preds = %3642
  br i1 undef, label %3644, label %3665

; <label>:3644:                                   ; preds = %3643
  br i1 undef, label %3665, label %3645

; <label>:3645:                                   ; preds = %3644
  br i1 false, label %3646, label %3664

; <label>:3646:                                   ; preds = %3645
  br i1 undef, label %3647, label %3665

; <label>:3647:                                   ; preds = %3646
  br i1 undef, label %3665, label %3648

; <label>:3648:                                   ; preds = %3647
  br i1 false, label %3649, label %3664

; <label>:3649:                                   ; preds = %3648
  br i1 undef, label %3650, label %3665

; <label>:3650:                                   ; preds = %3649
  br i1 undef, label %3665, label %3651

; <label>:3651:                                   ; preds = %3650
  br i1 false, label %3652, label %3664

; <label>:3652:                                   ; preds = %3651
  br i1 undef, label %3653, label %3665

; <label>:3653:                                   ; preds = %3652
  br i1 undef, label %3665, label %3654

; <label>:3654:                                   ; preds = %3653
  br i1 false, label %3655, label %3664

; <label>:3655:                                   ; preds = %3654
  br i1 undef, label %3656, label %3665

; <label>:3656:                                   ; preds = %3655
  br i1 undef, label %3665, label %3657

; <label>:3657:                                   ; preds = %3656
  br i1 false, label %3658, label %3664

; <label>:3658:                                   ; preds = %3657
  br i1 undef, label %3659, label %3665

; <label>:3659:                                   ; preds = %3658
  br i1 undef, label %3665, label %3660

; <label>:3660:                                   ; preds = %3659
  br i1 false, label %3661, label %3664

; <label>:3661:                                   ; preds = %3660
  br i1 undef, label %3662, label %3665

; <label>:3662:                                   ; preds = %3661
  br i1 undef, label %3665, label %3663

; <label>:3663:                                   ; preds = %3662
  br label %3664

; <label>:3664:                                   ; preds = %3663, %3660, %3657, %3654, %3651, %3648, %3645, %3642
  br label %3667

; <label>:3665:                                   ; preds = %3662, %3661, %3659, %3658, %3656, %3655, %3653, %3652, %3650, %3649, %3647, %3646, %3644, %3643, %3639, %3637
  %3666 = xor i16 %3636, 128
  br label %3667

; <label>:3667:                                   ; preds = %3665, %3664
  %3668 = phi i16 [ %3666, %3665 ], [ %3636, %3664 ]
  br label %1596

; <label>:3669:                                   ; preds = %3236
  %3670 = icmp ugt i64 %2832, 1
  br i1 %3670, label %3671, label %3238

; <label>:3671:                                   ; preds = %3669
  %3672 = and i64 %2968, 512
  %3673 = icmp eq i64 %3672, 0
  br i1 %3673, label %3238, label %3674

; <label>:3674:                                   ; preds = %3671
  %3675 = icmp ugt i64 %2826, 2
  br i1 %3675, label %3676, label %3239

; <label>:3676:                                   ; preds = %3674
  %3677 = icmp ugt i64 %2832, 2
  br i1 %3677, label %3678, label %3238

; <label>:3678:                                   ; preds = %3676
  %3679 = and i64 %2968, 262144
  %3680 = icmp eq i64 %3679, 0
  br i1 %3680, label %3238, label %3681

; <label>:3681:                                   ; preds = %3678
  %3682 = icmp ugt i64 %2826, 3
  br i1 %3682, label %3683, label %3239

; <label>:3683:                                   ; preds = %3681
  %3684 = icmp ugt i64 %2832, 3
  br i1 %3684, label %3685, label %3238

; <label>:3685:                                   ; preds = %3683
  %3686 = and i64 %2968, 134217728
  %3687 = icmp eq i64 %3686, 0
  br i1 %3687, label %3238, label %3688

; <label>:3688:                                   ; preds = %3685
  %3689 = icmp ugt i64 %2826, 4
  br i1 %3689, label %3690, label %3239

; <label>:3690:                                   ; preds = %3688
  %3691 = icmp ugt i64 %2832, 4
  br i1 %3691, label %3692, label %3238

; <label>:3692:                                   ; preds = %3690
  %3693 = and i64 %2968, 68719476736
  %3694 = icmp eq i64 %3693, 0
  br i1 %3694, label %3238, label %3695

; <label>:3695:                                   ; preds = %3692
  %3696 = icmp ugt i64 %2826, 5
  br i1 %3696, label %3697, label %3239

; <label>:3697:                                   ; preds = %3695
  %3698 = icmp ugt i64 %2832, 5
  br i1 %3698, label %3699, label %3238

; <label>:3699:                                   ; preds = %3697
  %3700 = and i64 %2968, 35184372088832
  %3701 = icmp eq i64 %3700, 0
  br i1 %3701, label %3238, label %3702

; <label>:3702:                                   ; preds = %3699
  %3703 = icmp ugt i64 %2826, 6
  br i1 %3703, label %3704, label %3239

; <label>:3704:                                   ; preds = %3702
  %3705 = icmp ugt i64 %2832, 6
  br i1 %3705, label %3706, label %3238

; <label>:3706:                                   ; preds = %3704
  %3707 = and i64 %2968, 18014398509481984
  %3708 = icmp eq i64 %3707, 0
  br i1 %3708, label %3238, label %3709

; <label>:3709:                                   ; preds = %3706
  %3710 = icmp ugt i64 %2826, 7
  br i1 %3710, label %3711, label %3239

; <label>:3711:                                   ; preds = %3709
  %3712 = icmp ugt i64 %2832, 7
  br i1 %3712, label %3713, label %3238

; <label>:3713:                                   ; preds = %3711
  %3714 = icmp sgt i64 %2968, -1
  br i1 %3714, label %3238, label %3715

; <label>:3715:                                   ; preds = %3713
  br label %3239

; <label>:3716:                                   ; preds = %3240
  %3717 = icmp ugt i64 %2832, 1
  br i1 %3717, label %3718, label %3768

; <label>:3718:                                   ; preds = %3716
  %3719 = and i64 %2968, 2
  %3720 = icmp eq i64 %3719, 0
  br i1 %3720, label %3768, label %3721

; <label>:3721:                                   ; preds = %3718
  %3722 = icmp ugt i64 %2826, 1
  br i1 %3722, label %3723, label %3767

; <label>:3723:                                   ; preds = %3721
  %3724 = icmp ugt i64 %2832, 2
  br i1 %3724, label %3725, label %3768

; <label>:3725:                                   ; preds = %3723
  %3726 = and i64 %2968, 1024
  %3727 = icmp eq i64 %3726, 0
  br i1 %3727, label %3768, label %3728

; <label>:3728:                                   ; preds = %3725
  %3729 = icmp ugt i64 %2826, 2
  br i1 %3729, label %3730, label %3767

; <label>:3730:                                   ; preds = %3728
  %3731 = icmp ugt i64 %2832, 3
  br i1 %3731, label %3732, label %3768

; <label>:3732:                                   ; preds = %3730
  %3733 = and i64 %2968, 524288
  %3734 = icmp eq i64 %3733, 0
  br i1 %3734, label %3768, label %3735

; <label>:3735:                                   ; preds = %3732
  %3736 = icmp ugt i64 %2826, 3
  br i1 %3736, label %3737, label %3767

; <label>:3737:                                   ; preds = %3735
  %3738 = icmp ugt i64 %2832, 4
  br i1 %3738, label %3739, label %3768

; <label>:3739:                                   ; preds = %3737
  %3740 = and i64 %2968, 268435456
  %3741 = icmp eq i64 %3740, 0
  br i1 %3741, label %3768, label %3742

; <label>:3742:                                   ; preds = %3739
  %3743 = icmp ugt i64 %2826, 4
  br i1 %3743, label %3744, label %3767

; <label>:3744:                                   ; preds = %3742
  %3745 = icmp ugt i64 %2832, 5
  br i1 %3745, label %3746, label %3768

; <label>:3746:                                   ; preds = %3744
  %3747 = and i64 %2968, 137438953472
  %3748 = icmp eq i64 %3747, 0
  br i1 %3748, label %3768, label %3749

; <label>:3749:                                   ; preds = %3746
  %3750 = icmp ugt i64 %2826, 5
  br i1 %3750, label %3751, label %3767

; <label>:3751:                                   ; preds = %3749
  %3752 = icmp ugt i64 %2832, 6
  br i1 %3752, label %3753, label %3768

; <label>:3753:                                   ; preds = %3751
  %3754 = and i64 %2968, 70368744177664
  %3755 = icmp eq i64 %3754, 0
  br i1 %3755, label %3768, label %3756

; <label>:3756:                                   ; preds = %3753
  %3757 = icmp ugt i64 %2826, 6
  br i1 %3757, label %3758, label %3767

; <label>:3758:                                   ; preds = %3756
  %3759 = icmp ugt i64 %2832, 7
  br i1 %3759, label %3760, label %3768

; <label>:3760:                                   ; preds = %3758
  %3761 = and i64 %2968, 36028797018963968
  %3762 = icmp eq i64 %3761, 0
  br i1 %3762, label %3768, label %3763

; <label>:3763:                                   ; preds = %3760
  br i1 false, label %3764, label %3767

; <label>:3764:                                   ; preds = %3763
  br i1 undef, label %3765, label %3768

; <label>:3765:                                   ; preds = %3764
  br i1 undef, label %3768, label %3766

; <label>:3766:                                   ; preds = %3765
  br label %3767

; <label>:3767:                                   ; preds = %3766, %3763, %3756, %3749, %3742, %3735, %3728, %3721
  br label %3770

; <label>:3768:                                   ; preds = %3765, %3764, %3760, %3758, %3753, %3751, %3746, %3744, %3739, %3737, %3732, %3730, %3725, %3723, %3718, %3716
  %3769 = and i16 %3241, 253
  br label %3770

; <label>:3770:                                   ; preds = %3768, %3767
  %3771 = phi i16 [ %3769, %3768 ], [ %3241, %3767 ]
  br label %3772

; <label>:3772:                                   ; preds = %3770
  %3773 = icmp ugt i64 %2832, 2
  br i1 %3773, label %3774, label %3820

; <label>:3774:                                   ; preds = %3772
  %3775 = and i64 %2968, 4
  %3776 = icmp eq i64 %3775, 0
  br i1 %3776, label %3820, label %3777

; <label>:3777:                                   ; preds = %3774
  %3778 = icmp ugt i64 %2826, 1
  br i1 %3778, label %3779, label %3819

; <label>:3779:                                   ; preds = %3777
  %3780 = icmp ugt i64 %2832, 3
  br i1 %3780, label %3781, label %3820

; <label>:3781:                                   ; preds = %3779
  %3782 = and i64 %2968, 2048
  %3783 = icmp eq i64 %3782, 0
  br i1 %3783, label %3820, label %3784

; <label>:3784:                                   ; preds = %3781
  %3785 = icmp ugt i64 %2826, 2
  br i1 %3785, label %3786, label %3819

; <label>:3786:                                   ; preds = %3784
  %3787 = icmp ugt i64 %2832, 4
  br i1 %3787, label %3788, label %3820

; <label>:3788:                                   ; preds = %3786
  %3789 = and i64 %2968, 1048576
  %3790 = icmp eq i64 %3789, 0
  br i1 %3790, label %3820, label %3791

; <label>:3791:                                   ; preds = %3788
  %3792 = icmp ugt i64 %2826, 3
  br i1 %3792, label %3793, label %3819

; <label>:3793:                                   ; preds = %3791
  %3794 = icmp ugt i64 %2832, 5
  br i1 %3794, label %3795, label %3820

; <label>:3795:                                   ; preds = %3793
  %3796 = and i64 %2968, 536870912
  %3797 = icmp eq i64 %3796, 0
  br i1 %3797, label %3820, label %3798

; <label>:3798:                                   ; preds = %3795
  %3799 = icmp ugt i64 %2826, 4
  br i1 %3799, label %3800, label %3819

; <label>:3800:                                   ; preds = %3798
  %3801 = icmp ugt i64 %2832, 6
  br i1 %3801, label %3802, label %3820

; <label>:3802:                                   ; preds = %3800
  %3803 = and i64 %2968, 274877906944
  %3804 = icmp eq i64 %3803, 0
  br i1 %3804, label %3820, label %3805

; <label>:3805:                                   ; preds = %3802
  %3806 = icmp ugt i64 %2826, 5
  br i1 %3806, label %3807, label %3819

; <label>:3807:                                   ; preds = %3805
  %3808 = icmp ugt i64 %2832, 7
  br i1 %3808, label %3809, label %3820

; <label>:3809:                                   ; preds = %3807
  %3810 = and i64 %2968, 140737488355328
  %3811 = icmp eq i64 %3810, 0
  br i1 %3811, label %3820, label %3812

; <label>:3812:                                   ; preds = %3809
  br i1 false, label %3813, label %3819

; <label>:3813:                                   ; preds = %3812
  br i1 undef, label %3814, label %3820

; <label>:3814:                                   ; preds = %3813
  br i1 undef, label %3820, label %3815

; <label>:3815:                                   ; preds = %3814
  br i1 false, label %3816, label %3819

; <label>:3816:                                   ; preds = %3815
  br i1 undef, label %3817, label %3820

; <label>:3817:                                   ; preds = %3816
  br i1 undef, label %3820, label %3818

; <label>:3818:                                   ; preds = %3817
  br label %3819

; <label>:3819:                                   ; preds = %3818, %3815, %3812, %3805, %3798, %3791, %3784, %3777
  br label %3822

; <label>:3820:                                   ; preds = %3817, %3816, %3814, %3813, %3809, %3807, %3802, %3800, %3795, %3793, %3788, %3786, %3781, %3779, %3774, %3772
  %3821 = xor i16 %3771, 4
  br label %3822

; <label>:3822:                                   ; preds = %3820, %3819
  %3823 = phi i16 [ %3821, %3820 ], [ %3771, %3819 ]
  br label %3824

; <label>:3824:                                   ; preds = %3822
  %3825 = icmp ugt i64 %2832, 3
  br i1 %3825, label %3826, label %3868

; <label>:3826:                                   ; preds = %3824
  %3827 = and i64 %2968, 8
  %3828 = icmp eq i64 %3827, 0
  br i1 %3828, label %3868, label %3829

; <label>:3829:                                   ; preds = %3826
  %3830 = icmp ugt i64 %2826, 1
  br i1 %3830, label %3831, label %3867

; <label>:3831:                                   ; preds = %3829
  %3832 = icmp ugt i64 %2832, 4
  br i1 %3832, label %3833, label %3868

; <label>:3833:                                   ; preds = %3831
  %3834 = and i64 %2968, 4096
  %3835 = icmp eq i64 %3834, 0
  br i1 %3835, label %3868, label %3836

; <label>:3836:                                   ; preds = %3833
  %3837 = icmp ugt i64 %2826, 2
  br i1 %3837, label %3838, label %3867

; <label>:3838:                                   ; preds = %3836
  %3839 = icmp ugt i64 %2832, 5
  br i1 %3839, label %3840, label %3868

; <label>:3840:                                   ; preds = %3838
  %3841 = and i64 %2968, 2097152
  %3842 = icmp eq i64 %3841, 0
  br i1 %3842, label %3868, label %3843

; <label>:3843:                                   ; preds = %3840
  %3844 = icmp ugt i64 %2826, 3
  br i1 %3844, label %3845, label %3867

; <label>:3845:                                   ; preds = %3843
  %3846 = icmp ugt i64 %2832, 6
  br i1 %3846, label %3847, label %3868

; <label>:3847:                                   ; preds = %3845
  %3848 = and i64 %2968, 1073741824
  %3849 = icmp eq i64 %3848, 0
  br i1 %3849, label %3868, label %3850

; <label>:3850:                                   ; preds = %3847
  %3851 = icmp ugt i64 %2826, 4
  br i1 %3851, label %3852, label %3867

; <label>:3852:                                   ; preds = %3850
  %3853 = icmp ugt i64 %2832, 7
  br i1 %3853, label %3854, label %3868

; <label>:3854:                                   ; preds = %3852
  %3855 = and i64 %2968, 549755813888
  %3856 = icmp eq i64 %3855, 0
  br i1 %3856, label %3868, label %3857

; <label>:3857:                                   ; preds = %3854
  br i1 false, label %3858, label %3867

; <label>:3858:                                   ; preds = %3857
  br i1 undef, label %3859, label %3868

; <label>:3859:                                   ; preds = %3858
  br i1 undef, label %3868, label %3860

; <label>:3860:                                   ; preds = %3859
  br i1 false, label %3861, label %3867

; <label>:3861:                                   ; preds = %3860
  br i1 undef, label %3862, label %3868

; <label>:3862:                                   ; preds = %3861
  br i1 undef, label %3868, label %3863

; <label>:3863:                                   ; preds = %3862
  br i1 false, label %3864, label %3867

; <label>:3864:                                   ; preds = %3863
  br i1 undef, label %3865, label %3868

; <label>:3865:                                   ; preds = %3864
  br i1 undef, label %3868, label %3866

; <label>:3866:                                   ; preds = %3865
  br label %3867

; <label>:3867:                                   ; preds = %3866, %3863, %3860, %3857, %3850, %3843, %3836, %3829
  br label %3870

; <label>:3868:                                   ; preds = %3865, %3864, %3862, %3861, %3859, %3858, %3854, %3852, %3847, %3845, %3840, %3838, %3833, %3831, %3826, %3824
  %3869 = xor i16 %3823, 8
  br label %3870

; <label>:3870:                                   ; preds = %3868, %3867
  %3871 = phi i16 [ %3869, %3868 ], [ %3823, %3867 ]
  br label %3872

; <label>:3872:                                   ; preds = %3870
  %3873 = icmp ugt i64 %2832, 4
  br i1 %3873, label %3874, label %3912

; <label>:3874:                                   ; preds = %3872
  %3875 = and i64 %2968, 16
  %3876 = icmp eq i64 %3875, 0
  br i1 %3876, label %3912, label %3877

; <label>:3877:                                   ; preds = %3874
  %3878 = icmp ugt i64 %2826, 1
  br i1 %3878, label %3879, label %3911

; <label>:3879:                                   ; preds = %3877
  %3880 = icmp ugt i64 %2832, 5
  br i1 %3880, label %3881, label %3912

; <label>:3881:                                   ; preds = %3879
  %3882 = and i64 %2968, 8192
  %3883 = icmp eq i64 %3882, 0
  br i1 %3883, label %3912, label %3884

; <label>:3884:                                   ; preds = %3881
  %3885 = icmp ugt i64 %2826, 2
  br i1 %3885, label %3886, label %3911

; <label>:3886:                                   ; preds = %3884
  %3887 = icmp ugt i64 %2832, 6
  br i1 %3887, label %3888, label %3912

; <label>:3888:                                   ; preds = %3886
  %3889 = and i64 %2968, 4194304
  %3890 = icmp eq i64 %3889, 0
  br i1 %3890, label %3912, label %3891

; <label>:3891:                                   ; preds = %3888
  %3892 = icmp ugt i64 %2826, 3
  br i1 %3892, label %3893, label %3911

; <label>:3893:                                   ; preds = %3891
  %3894 = icmp ugt i64 %2832, 7
  br i1 %3894, label %3895, label %3912

; <label>:3895:                                   ; preds = %3893
  %3896 = trunc i64 %2968 to i32
  %3897 = icmp sgt i32 %3896, -1
  br i1 %3897, label %3912, label %3898

; <label>:3898:                                   ; preds = %3895
  br i1 false, label %3899, label %3911

; <label>:3899:                                   ; preds = %3898
  br i1 undef, label %3900, label %3912

; <label>:3900:                                   ; preds = %3899
  br i1 undef, label %3912, label %3901

; <label>:3901:                                   ; preds = %3900
  br i1 false, label %3902, label %3911

; <label>:3902:                                   ; preds = %3901
  br i1 undef, label %3903, label %3912

; <label>:3903:                                   ; preds = %3902
  br i1 undef, label %3912, label %3904

; <label>:3904:                                   ; preds = %3903
  br i1 false, label %3905, label %3911

; <label>:3905:                                   ; preds = %3904
  br i1 undef, label %3906, label %3912

; <label>:3906:                                   ; preds = %3905
  br i1 undef, label %3912, label %3907

; <label>:3907:                                   ; preds = %3906
  br i1 false, label %3908, label %3911

; <label>:3908:                                   ; preds = %3907
  br i1 undef, label %3909, label %3912

; <label>:3909:                                   ; preds = %3908
  br i1 undef, label %3912, label %3910

; <label>:3910:                                   ; preds = %3909
  br label %3911

; <label>:3911:                                   ; preds = %3910, %3907, %3904, %3901, %3898, %3891, %3884, %3877
  br label %3914

; <label>:3912:                                   ; preds = %3909, %3908, %3906, %3905, %3903, %3902, %3900, %3899, %3895, %3893, %3888, %3886, %3881, %3879, %3874, %3872
  %3913 = xor i16 %3871, 16
  br label %3914

; <label>:3914:                                   ; preds = %3912, %3911
  %3915 = phi i16 [ %3913, %3912 ], [ %3871, %3911 ]
  br label %3916

; <label>:3916:                                   ; preds = %3914
  %3917 = icmp ugt i64 %2832, 5
  br i1 %3917, label %3918, label %3952

; <label>:3918:                                   ; preds = %3916
  %3919 = and i64 %2968, 32
  %3920 = icmp eq i64 %3919, 0
  br i1 %3920, label %3952, label %3921

; <label>:3921:                                   ; preds = %3918
  %3922 = icmp ugt i64 %2826, 1
  br i1 %3922, label %3923, label %3951

; <label>:3923:                                   ; preds = %3921
  %3924 = icmp ugt i64 %2832, 6
  br i1 %3924, label %3925, label %3952

; <label>:3925:                                   ; preds = %3923
  %3926 = and i64 %2968, 16384
  %3927 = icmp eq i64 %3926, 0
  br i1 %3927, label %3952, label %3928

; <label>:3928:                                   ; preds = %3925
  %3929 = icmp ugt i64 %2826, 2
  br i1 %3929, label %3930, label %3951

; <label>:3930:                                   ; preds = %3928
  %3931 = icmp ugt i64 %2832, 7
  br i1 %3931, label %3932, label %3952

; <label>:3932:                                   ; preds = %3930
  %3933 = and i64 %2968, 8388608
  %3934 = icmp eq i64 %3933, 0
  br i1 %3934, label %3952, label %3935

; <label>:3935:                                   ; preds = %3932
  br i1 false, label %3936, label %3951

; <label>:3936:                                   ; preds = %3935
  br i1 undef, label %3937, label %3952

; <label>:3937:                                   ; preds = %3936
  br i1 undef, label %3952, label %3938

; <label>:3938:                                   ; preds = %3937
  br i1 false, label %3939, label %3951

; <label>:3939:                                   ; preds = %3938
  br i1 undef, label %3940, label %3952

; <label>:3940:                                   ; preds = %3939
  br i1 undef, label %3952, label %3941

; <label>:3941:                                   ; preds = %3940
  br i1 false, label %3942, label %3951

; <label>:3942:                                   ; preds = %3941
  br i1 undef, label %3943, label %3952

; <label>:3943:                                   ; preds = %3942
  br i1 undef, label %3952, label %3944

; <label>:3944:                                   ; preds = %3943
  br i1 false, label %3945, label %3951

; <label>:3945:                                   ; preds = %3944
  br i1 undef, label %3946, label %3952

; <label>:3946:                                   ; preds = %3945
  br i1 undef, label %3952, label %3947

; <label>:3947:                                   ; preds = %3946
  br i1 false, label %3948, label %3951

; <label>:3948:                                   ; preds = %3947
  br i1 undef, label %3949, label %3952

; <label>:3949:                                   ; preds = %3948
  br i1 undef, label %3952, label %3950

; <label>:3950:                                   ; preds = %3949
  br label %3951

; <label>:3951:                                   ; preds = %3950, %3947, %3944, %3941, %3938, %3935, %3928, %3921
  br label %3954

; <label>:3952:                                   ; preds = %3949, %3948, %3946, %3945, %3943, %3942, %3940, %3939, %3937, %3936, %3932, %3930, %3925, %3923, %3918, %3916
  %3953 = xor i16 %3915, 32
  br label %3954

; <label>:3954:                                   ; preds = %3952, %3951
  %3955 = phi i16 [ %3953, %3952 ], [ %3915, %3951 ]
  br label %3956

; <label>:3956:                                   ; preds = %3954
  %3957 = icmp ugt i64 %2832, 6
  br i1 %3957, label %3958, label %3988

; <label>:3958:                                   ; preds = %3956
  %3959 = and i64 %2968, 64
  %3960 = icmp eq i64 %3959, 0
  br i1 %3960, label %3988, label %3961

; <label>:3961:                                   ; preds = %3958
  %3962 = icmp ugt i64 %2826, 1
  br i1 %3962, label %3963, label %3987

; <label>:3963:                                   ; preds = %3961
  %3964 = icmp ugt i64 %2832, 7
  br i1 %3964, label %3965, label %3988

; <label>:3965:                                   ; preds = %3963
  %3966 = trunc i64 %2968 to i16
  %3967 = icmp sgt i16 %3966, -1
  br i1 %3967, label %3988, label %3968

; <label>:3968:                                   ; preds = %3965
  br i1 false, label %3969, label %3987

; <label>:3969:                                   ; preds = %3968
  br i1 undef, label %3970, label %3988

; <label>:3970:                                   ; preds = %3969
  br i1 undef, label %3988, label %3971

; <label>:3971:                                   ; preds = %3970
  br i1 false, label %3972, label %3987

; <label>:3972:                                   ; preds = %3971
  br i1 undef, label %3973, label %3988

; <label>:3973:                                   ; preds = %3972
  br i1 undef, label %3988, label %3974

; <label>:3974:                                   ; preds = %3973
  br i1 false, label %3975, label %3987

; <label>:3975:                                   ; preds = %3974
  br i1 undef, label %3976, label %3988

; <label>:3976:                                   ; preds = %3975
  br i1 undef, label %3988, label %3977

; <label>:3977:                                   ; preds = %3976
  br i1 false, label %3978, label %3987

; <label>:3978:                                   ; preds = %3977
  br i1 undef, label %3979, label %3988

; <label>:3979:                                   ; preds = %3978
  br i1 undef, label %3988, label %3980

; <label>:3980:                                   ; preds = %3979
  br i1 false, label %3981, label %3987

; <label>:3981:                                   ; preds = %3980
  br i1 undef, label %3982, label %3988

; <label>:3982:                                   ; preds = %3981
  br i1 undef, label %3988, label %3983

; <label>:3983:                                   ; preds = %3982
  br i1 false, label %3984, label %3987

; <label>:3984:                                   ; preds = %3983
  br i1 undef, label %3985, label %3988

; <label>:3985:                                   ; preds = %3984
  br i1 undef, label %3988, label %3986

; <label>:3986:                                   ; preds = %3985
  br label %3987

; <label>:3987:                                   ; preds = %3986, %3983, %3980, %3977, %3974, %3971, %3968, %3961
  br label %3990

; <label>:3988:                                   ; preds = %3985, %3984, %3982, %3981, %3979, %3978, %3976, %3975, %3973, %3972, %3970, %3969, %3965, %3963, %3958, %3956
  %3989 = xor i16 %3955, 64
  br label %3990

; <label>:3990:                                   ; preds = %3988, %3987
  %3991 = phi i16 [ %3989, %3988 ], [ %3955, %3987 ]
  br label %3992

; <label>:3992:                                   ; preds = %3990
  %3993 = icmp ugt i64 %2832, 7
  br i1 %3993, label %3994, label %4020

; <label>:3994:                                   ; preds = %3992
  %3995 = trunc i64 %2968 to i8
  %3996 = icmp sgt i8 %3995, -1
  br i1 %3996, label %4020, label %3997

; <label>:3997:                                   ; preds = %3994
  br i1 false, label %3998, label %4019

; <label>:3998:                                   ; preds = %3997
  br i1 undef, label %3999, label %4020

; <label>:3999:                                   ; preds = %3998
  br i1 undef, label %4020, label %4000

; <label>:4000:                                   ; preds = %3999
  br i1 false, label %4001, label %4019

; <label>:4001:                                   ; preds = %4000
  br i1 undef, label %4002, label %4020

; <label>:4002:                                   ; preds = %4001
  br i1 undef, label %4020, label %4003

; <label>:4003:                                   ; preds = %4002
  br i1 false, label %4004, label %4019

; <label>:4004:                                   ; preds = %4003
  br i1 undef, label %4005, label %4020

; <label>:4005:                                   ; preds = %4004
  br i1 undef, label %4020, label %4006

; <label>:4006:                                   ; preds = %4005
  br i1 false, label %4007, label %4019

; <label>:4007:                                   ; preds = %4006
  br i1 undef, label %4008, label %4020

; <label>:4008:                                   ; preds = %4007
  br i1 undef, label %4020, label %4009

; <label>:4009:                                   ; preds = %4008
  br i1 false, label %4010, label %4019

; <label>:4010:                                   ; preds = %4009
  br i1 undef, label %4011, label %4020

; <label>:4011:                                   ; preds = %4010
  br i1 undef, label %4020, label %4012

; <label>:4012:                                   ; preds = %4011
  br i1 false, label %4013, label %4019

; <label>:4013:                                   ; preds = %4012
  br i1 undef, label %4014, label %4020

; <label>:4014:                                   ; preds = %4013
  br i1 undef, label %4020, label %4015

; <label>:4015:                                   ; preds = %4014
  br i1 false, label %4016, label %4019

; <label>:4016:                                   ; preds = %4015
  br i1 undef, label %4017, label %4020

; <label>:4017:                                   ; preds = %4016
  br i1 undef, label %4020, label %4018

; <label>:4018:                                   ; preds = %4017
  br label %4019

; <label>:4019:                                   ; preds = %4018, %4015, %4012, %4009, %4006, %4003, %4000, %3997
  br label %4022

; <label>:4020:                                   ; preds = %4017, %4016, %4014, %4013, %4011, %4010, %4008, %4007, %4005, %4004, %4002, %4001, %3999, %3998, %3994, %3992
  %4021 = xor i16 %3991, 128
  br label %4022

; <label>:4022:                                   ; preds = %4020, %4019
  %4023 = phi i16 [ %4021, %4020 ], [ %3991, %4019 ]
  br label %3245
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L9PCMPISTRII3MVnI8vec128_tEEEP6MemoryS5_R5State2VnIS2_ET_2InIhE(%struct.Memory*, %struct.State* dereferenceable(3376), i8* nocapture readonly, i64, i64)  {
  %6 = alloca %"class.(anonymous namespace)::BitMatrix", align 8
  %7 = alloca %"class.(anonymous namespace)::BitMatrix", align 8
  %8 = alloca <2 x i64>, align 16
  %9 = alloca { i64, i64 }, align 8
  %10 = alloca <2 x i64>, align 16
  %11 = alloca { i64, i64 }, align 8
  %12 = trunc i64 %4 to i8
  %13 = trunc i64 %4 to i2
  switch i2 %13, label %3348 [
    i2 0, label %14
    i2 1, label %1102
    i2 -2, label %1681
    i2 -1, label %2769
  ]

; <label>:14:                                     ; preds = %5
  %15 = bitcast <2 x i64>* %8 to { i64, i64 }*
  %16 = bitcast <2 x i64>* %8 to %struct.uint8v16_t*
  %17 = bitcast <2 x i64>* %8 to i8*
  call void @llvm.lifetime.start(i64 16, i8* nonnull %17) 
  %18 = bitcast i8* %2 to <2 x i64>*
  %19 = load <2 x i64>, <2 x i64>* %18, align 1
  %20 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %15, i64 0, i32 1
  store <2 x i64> %19, <2 x i64>* %8, align 16
  %21 = inttoptr i64 %3 to i8*
  %22 = load i8, i8* %21
  %23 = add i64 %3, 1
  %24 = inttoptr i64 %23 to i8*
  %25 = load i8, i8* %24
  %26 = add i64 %3, 2
  %27 = inttoptr i64 %26 to i8*
  %28 = load i8, i8* %27
  %29 = add i64 %3, 3
  %30 = inttoptr i64 %29 to i8*
  %31 = load i8, i8* %30
  %32 = add i64 %3, 4
  %33 = inttoptr i64 %32 to i8*
  %34 = load i8, i8* %33
  %35 = add i64 %3, 5
  %36 = inttoptr i64 %35 to i8*
  %37 = load i8, i8* %36
  %38 = add i64 %3, 6
  %39 = inttoptr i64 %38 to i8*
  %40 = load i8, i8* %39
  %41 = add i64 %3, 7
  %42 = inttoptr i64 %41 to i8*
  %43 = load i8, i8* %42
  %44 = add i64 %3, 8
  %45 = inttoptr i64 %44 to i8*
  %46 = load i8, i8* %45
  %47 = add i64 %3, 9
  %48 = inttoptr i64 %47 to i8*
  %49 = load i8, i8* %48
  %50 = add i64 %3, 10
  %51 = inttoptr i64 %50 to i8*
  %52 = load i8, i8* %51
  %53 = add i64 %3, 11
  %54 = inttoptr i64 %53 to i8*
  %55 = load i8, i8* %54
  %56 = add i64 %3, 12
  %57 = inttoptr i64 %56 to i8*
  %58 = load i8, i8* %57
  %59 = add i64 %3, 13
  %60 = inttoptr i64 %59 to i8*
  %61 = load i8, i8* %60
  %62 = add i64 %3, 14
  %63 = inttoptr i64 %62 to i8*
  %64 = load i8, i8* %63
  %65 = add i64 %3, 15
  %66 = inttoptr i64 %65 to i8*
  %67 = load i8, i8* %66
  %68 = bitcast %"class.(anonymous namespace)::BitMatrix"* %7 to i8*
  call void @llvm.lifetime.start(i64 288, i8* nonnull %68) 
  call void @llvm.memset.p0i8.i64(i8* nonnull %68, i8 0, i64 32, i32 8, i1 false) 
  %69 = lshr i8 %12, 2
  %70 = extractelement <2 x i64> %19, i32 0
  %71 = trunc i64 %70 to i8
  %72 = icmp eq i8 %71, 0
  %73 = select i1 %72, i64 0, i64 16
  %74 = icmp eq i8 %22, 0
  %75 = select i1 %74, i64 0, i64 16
  %76 = and i64 %70, 65280
  %77 = icmp eq i64 %76, 0
  %78 = xor i1 %72, true
  %79 = and i1 %77, %78
  %80 = select i1 %79, i64 1, i64 %73
  %81 = icmp eq i8 %25, 0
  %82 = xor i1 %74, true
  %83 = and i1 %81, %82
  %84 = select i1 %83, i64 1, i64 %75
  %85 = and i64 %70, 16711680
  %86 = icmp eq i64 %85, 0
  %87 = icmp ugt i64 %80, 2
  %88 = and i1 %86, %87
  %89 = select i1 %88, i64 2, i64 %80
  %90 = icmp eq i8 %28, 0
  %91 = icmp ugt i64 %84, 2
  %92 = and i1 %90, %91
  %93 = select i1 %92, i64 2, i64 %84
  %94 = and i64 %70, 4278190080
  %95 = icmp eq i64 %94, 0
  %96 = icmp ugt i64 %89, 3
  %97 = and i1 %95, %96
  %98 = select i1 %97, i64 3, i64 %89
  %99 = icmp eq i8 %31, 0
  %100 = icmp ugt i64 %93, 3
  %101 = and i1 %99, %100
  %102 = select i1 %101, i64 3, i64 %93
  %103 = and i64 %70, 1095216660480
  %104 = icmp eq i64 %103, 0
  %105 = icmp ugt i64 %98, 4
  %106 = and i1 %104, %105
  %107 = select i1 %106, i64 4, i64 %98
  %108 = icmp eq i8 %34, 0
  %109 = icmp ugt i64 %102, 4
  %110 = and i1 %108, %109
  %111 = select i1 %110, i64 4, i64 %102
  %112 = and i64 %70, 280375465082880
  %113 = icmp eq i64 %112, 0
  %114 = icmp ugt i64 %107, 5
  %115 = and i1 %113, %114
  %116 = select i1 %115, i64 5, i64 %107
  %117 = icmp eq i8 %37, 0
  %118 = icmp ugt i64 %111, 5
  %119 = and i1 %117, %118
  %120 = select i1 %119, i64 5, i64 %111
  %121 = and i64 %70, 71776119061217280
  %122 = icmp eq i64 %121, 0
  %123 = icmp ugt i64 %116, 6
  %124 = and i1 %122, %123
  %125 = select i1 %124, i64 6, i64 %116
  %126 = icmp eq i8 %40, 0
  %127 = icmp ugt i64 %120, 6
  %128 = and i1 %126, %127
  %129 = select i1 %128, i64 6, i64 %120
  %130 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %16, i64 0, i32 0, i64 7
  %131 = load i8, i8* %130, align 1
  %132 = icmp eq i8 %131, 0
  %133 = icmp ugt i64 %125, 7
  %134 = and i1 %132, %133
  %135 = select i1 %134, i64 7, i64 %125
  %136 = icmp eq i8 %43, 0
  %137 = icmp ugt i64 %129, 7
  %138 = and i1 %136, %137
  %139 = select i1 %138, i64 7, i64 %129
  %140 = bitcast i64* %20 to i8*
  %141 = load i8, i8* %140, align 8
  %142 = icmp eq i8 %141, 0
  %143 = icmp ugt i64 %135, 8
  %144 = and i1 %142, %143
  %145 = select i1 %144, i64 8, i64 %135
  %146 = icmp eq i8 %46, 0
  %147 = icmp ugt i64 %139, 8
  %148 = and i1 %146, %147
  %149 = select i1 %148, i64 8, i64 %139
  %150 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %16, i64 0, i32 0, i64 9
  %151 = load i8, i8* %150, align 1
  %152 = icmp eq i8 %151, 0
  %153 = icmp ugt i64 %145, 9
  %154 = and i1 %152, %153
  %155 = select i1 %154, i64 9, i64 %145
  %156 = icmp eq i8 %49, 0
  %157 = icmp ugt i64 %149, 9
  %158 = and i1 %156, %157
  %159 = select i1 %158, i64 9, i64 %149
  %160 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %16, i64 0, i32 0, i64 10
  %161 = load i8, i8* %160, align 2
  %162 = icmp eq i8 %161, 0
  %163 = icmp ugt i64 %155, 10
  %164 = and i1 %162, %163
  %165 = select i1 %164, i64 10, i64 %155
  %166 = icmp eq i8 %52, 0
  %167 = icmp ugt i64 %159, 10
  %168 = and i1 %166, %167
  %169 = select i1 %168, i64 10, i64 %159
  %170 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %16, i64 0, i32 0, i64 11
  %171 = load i8, i8* %170, align 1
  %172 = icmp eq i8 %171, 0
  %173 = icmp ugt i64 %165, 11
  %174 = and i1 %172, %173
  %175 = select i1 %174, i64 11, i64 %165
  %176 = icmp eq i8 %55, 0
  %177 = icmp ugt i64 %169, 11
  %178 = and i1 %176, %177
  %179 = select i1 %178, i64 11, i64 %169
  %180 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %16, i64 0, i32 0, i64 12
  %181 = load i8, i8* %180, align 4
  %182 = icmp eq i8 %181, 0
  %183 = icmp ugt i64 %175, 12
  %184 = and i1 %182, %183
  %185 = select i1 %184, i64 12, i64 %175
  %186 = icmp eq i8 %58, 0
  %187 = icmp ugt i64 %179, 12
  %188 = and i1 %186, %187
  %189 = select i1 %188, i64 12, i64 %179
  %190 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %16, i64 0, i32 0, i64 13
  %191 = load i8, i8* %190, align 1
  %192 = icmp eq i8 %191, 0
  %193 = icmp ugt i64 %185, 13
  %194 = and i1 %192, %193
  %195 = select i1 %194, i64 13, i64 %185
  %196 = icmp eq i8 %61, 0
  %197 = icmp ugt i64 %189, 13
  %198 = and i1 %196, %197
  %199 = select i1 %198, i64 13, i64 %189
  %200 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %16, i64 0, i32 0, i64 14
  %201 = load i8, i8* %200, align 2
  %202 = icmp eq i8 %201, 0
  %203 = icmp ugt i64 %195, 14
  %204 = and i1 %202, %203
  %205 = select i1 %204, i64 14, i64 %195
  %206 = icmp eq i8 %64, 0
  %207 = icmp ugt i64 %199, 14
  %208 = and i1 %206, %207
  %209 = select i1 %208, i64 14, i64 %199
  %210 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %16, i64 0, i32 0, i64 15
  %211 = load i8, i8* %210, align 1
  %212 = icmp eq i8 %211, 0
  %213 = icmp ugt i64 %205, 15
  %214 = and i1 %212, %213
  %215 = icmp eq i8 %67, 0
  %216 = icmp ugt i64 %209, 15
  %217 = and i1 %215, %216
  %218 = select i1 %217, i64 15, i64 %209
  %219 = trunc i8 %69 to i2
  %220 = icmp eq i2 %219, 1
  br label %224

; <label>:221:                                    ; preds = %267
  %222 = select i1 %214, i64 15, i64 %205
  %223 = lshr i8 %12, 4
  switch i2 %219, label %795 [
    i2 0, label %388
    i2 1, label %419
    i2 -2, label %460
    i2 -1, label %755
  ]

; <label>:224:                                    ; preds = %267, %14
  %225 = phi i64 [ 0, %14 ], [ %273, %267 ]
  %226 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %16, i64 0, i32 0, i64 %225
  %227 = load i8, i8* %226, align 1
  %228 = shl i64 %225, 4
  br i1 %220, label %236, label %229

; <label>:229:                                    ; preds = %224
  %230 = icmp eq i8 %227, %22
  %231 = lshr i64 %225, 2
  %232 = and i64 %231, 288230376151711743
  %233 = getelementptr inbounds %"class.(anonymous namespace)::BitMatrix", %"class.(anonymous namespace)::BitMatrix"* %7, i64 0, i32 0, i32 0, i32 0, i64 %232
  %234 = and i64 %228, 48
  %235 = shl i64 1, %234
  br i1 %230, label %275, label %278

; <label>:236:                                    ; preds = %224
  %237 = and i64 %225, 1
  %238 = icmp eq i64 %237, 0
  br i1 %238, label %253, label %239

; <label>:239:                                    ; preds = %236
  %240 = icmp ugt i8 %22, %227
  %241 = lshr i64 %225, 2
  %242 = and i64 %241, 288230376151711743
  %243 = getelementptr inbounds %"class.(anonymous namespace)::BitMatrix", %"class.(anonymous namespace)::BitMatrix"* %7, i64 0, i32 0, i32 0, i32 0, i64 %242
  %244 = and i64 %228, 48
  %245 = shl i64 1, %244
  br i1 %240, label %249, label %246

; <label>:246:                                    ; preds = %239
  %247 = load i64, i64* %243, align 8
  %248 = or i64 %247, %245
  br label %872

; <label>:249:                                    ; preds = %239
  %250 = xor i64 %245, -1
  %251 = load i64, i64* %243, align 8
  %252 = and i64 %251, %250
  br label %872

; <label>:253:                                    ; preds = %236
  %254 = icmp ult i8 %22, %227
  %255 = lshr i64 %225, 2
  %256 = and i64 %255, 288230376151711743
  %257 = getelementptr inbounds %"class.(anonymous namespace)::BitMatrix", %"class.(anonymous namespace)::BitMatrix"* %7, i64 0, i32 0, i32 0, i32 0, i64 %256
  %258 = and i64 %228, 48
  %259 = shl i64 1, %258
  br i1 %254, label %263, label %260

; <label>:260:                                    ; preds = %253
  %261 = load i64, i64* %257, align 8
  %262 = or i64 %261, %259
  br label %978

; <label>:263:                                    ; preds = %253
  %264 = xor i64 %259, -1
  %265 = load i64, i64* %257, align 8
  %266 = and i64 %265, %264
  br label %978

; <label>:267:                                    ; preds = %978, %872, %282
  %268 = phi i64 [ %1083, %978 ], [ %977, %872 ], [ %386, %282 ]
  %269 = phi i64 [ %1082, %978 ], [ %976, %872 ], [ %387, %282 ]
  %270 = phi i1 [ %1078, %978 ], [ %972, %872 ], [ %382, %282 ]
  %271 = phi i64* [ %257, %978 ], [ %243, %872 ], [ %233, %282 ]
  %272 = select i1 %270, i64 %269, i64 %268
  store i64 %272, i64* %271, align 8
  %273 = add nuw nsw i64 %225, 1
  %274 = icmp eq i64 %273, 16
  br i1 %274, label %221, label %224

; <label>:275:                                    ; preds = %229
  %276 = load i64, i64* %233, align 8
  %277 = or i64 %276, %235
  br label %282

; <label>:278:                                    ; preds = %229
  %279 = xor i64 %235, -1
  %280 = load i64, i64* %233, align 8
  %281 = and i64 %280, %279
  br label %282

; <label>:282:                                    ; preds = %278, %275
  %283 = phi i64 [ %281, %278 ], [ %277, %275 ]
  %284 = icmp eq i8 %227, %25
  %285 = or i64 %234, 1
  %286 = shl i64 1, %285
  %287 = xor i64 %286, -1
  %288 = and i64 %283, %287
  %289 = or i64 %283, %286
  %290 = select i1 %284, i64 %289, i64 %288
  %291 = icmp eq i8 %227, %28
  %292 = or i64 %234, 2
  %293 = shl i64 1, %292
  %294 = xor i64 %293, -1
  %295 = and i64 %290, %294
  %296 = or i64 %290, %293
  %297 = select i1 %291, i64 %296, i64 %295
  %298 = icmp eq i8 %227, %31
  %299 = or i64 %234, 3
  %300 = shl i64 1, %299
  %301 = xor i64 %300, -1
  %302 = and i64 %297, %301
  %303 = or i64 %297, %300
  %304 = select i1 %298, i64 %303, i64 %302
  %305 = icmp eq i8 %227, %34
  %306 = or i64 %234, 4
  %307 = shl i64 1, %306
  %308 = xor i64 %307, -1
  %309 = and i64 %304, %308
  %310 = or i64 %304, %307
  %311 = select i1 %305, i64 %310, i64 %309
  %312 = icmp eq i8 %227, %37
  %313 = or i64 %234, 5
  %314 = shl i64 1, %313
  %315 = xor i64 %314, -1
  %316 = and i64 %311, %315
  %317 = or i64 %311, %314
  %318 = select i1 %312, i64 %317, i64 %316
  %319 = icmp eq i8 %227, %40
  %320 = or i64 %234, 6
  %321 = shl i64 1, %320
  %322 = xor i64 %321, -1
  %323 = and i64 %318, %322
  %324 = or i64 %318, %321
  %325 = select i1 %319, i64 %324, i64 %323
  %326 = icmp eq i8 %227, %43
  %327 = or i64 %234, 7
  %328 = shl i64 1, %327
  %329 = xor i64 %328, -1
  %330 = and i64 %325, %329
  %331 = or i64 %325, %328
  %332 = select i1 %326, i64 %331, i64 %330
  %333 = icmp eq i8 %227, %46
  %334 = or i64 %234, 8
  %335 = shl i64 1, %334
  %336 = xor i64 %335, -1
  %337 = and i64 %332, %336
  %338 = or i64 %332, %335
  %339 = select i1 %333, i64 %338, i64 %337
  %340 = icmp eq i8 %227, %49
  %341 = or i64 %234, 9
  %342 = shl i64 1, %341
  %343 = xor i64 %342, -1
  %344 = and i64 %339, %343
  %345 = or i64 %339, %342
  %346 = select i1 %340, i64 %345, i64 %344
  %347 = icmp eq i8 %227, %52
  %348 = or i64 %234, 10
  %349 = shl i64 1, %348
  %350 = xor i64 %349, -1
  %351 = and i64 %346, %350
  %352 = or i64 %346, %349
  %353 = select i1 %347, i64 %352, i64 %351
  %354 = icmp eq i8 %227, %55
  %355 = or i64 %234, 11
  %356 = shl i64 1, %355
  %357 = xor i64 %356, -1
  %358 = and i64 %353, %357
  %359 = or i64 %353, %356
  %360 = select i1 %354, i64 %359, i64 %358
  %361 = icmp eq i8 %227, %58
  %362 = or i64 %234, 12
  %363 = shl i64 1, %362
  %364 = xor i64 %363, -1
  %365 = and i64 %360, %364
  %366 = or i64 %360, %363
  %367 = select i1 %361, i64 %366, i64 %365
  %368 = icmp eq i8 %227, %61
  %369 = or i64 %234, 13
  %370 = shl i64 1, %369
  %371 = xor i64 %370, -1
  %372 = and i64 %367, %371
  %373 = or i64 %367, %370
  %374 = select i1 %368, i64 %373, i64 %372
  %375 = icmp eq i8 %227, %64
  %376 = or i64 %234, 14
  %377 = shl i64 1, %376
  %378 = xor i64 %377, -1
  %379 = and i64 %374, %378
  %380 = or i64 %374, %377
  %381 = select i1 %375, i64 %380, i64 %379
  store i64 %381, i64* %233, align 8
  %382 = icmp eq i8 %227, %67
  %383 = or i64 %234, 15
  %384 = shl i64 1, %383
  %385 = xor i64 %384, -1
  %386 = and i64 %381, %385
  %387 = or i64 %381, %384
  br label %267

; <label>:388:                                    ; preds = %221
  %389 = icmp eq i64 %218, 0
  %390 = icmp eq i64 %222, 0
  %391 = or i1 %389, %390
  br i1 %391, label %799, label %392

; <label>:392:                                    ; preds = %388
  br label %393

; <label>:393:                                    ; preds = %414, %392
  %394 = phi i64 [ %416, %414 ], [ 0, %392 ]
  %395 = phi i16 [ %417, %414 ], [ 1, %392 ]
  %396 = phi i16 [ %415, %414 ], [ 0, %392 ]
  br label %399

; <label>:397:                                    ; preds = %399
  %398 = icmp ult i64 %410, %222
  br i1 %398, label %399, label %413

; <label>:399:                                    ; preds = %397, %393
  %400 = phi i64 [ 0, %393 ], [ %410, %397 ]
  %401 = shl i64 %400, 4
  %402 = add i64 %401, %394
  %403 = lshr i64 %402, 6
  %404 = getelementptr inbounds %"class.(anonymous namespace)::BitMatrix", %"class.(anonymous namespace)::BitMatrix"* %7, i64 0, i32 0, i32 0, i32 0, i64 %403
  %405 = load i64, i64* %404, align 8
  %406 = and i64 %402, 63
  %407 = shl i64 1, %406
  %408 = and i64 %407, %405
  %409 = icmp eq i64 %408, 0
  %410 = add nuw i64 %400, 1
  br i1 %409, label %397, label %411

; <label>:411:                                    ; preds = %399
  %412 = or i16 %396, %395
  br label %414

; <label>:413:                                    ; preds = %397
  br label %414

; <label>:414:                                    ; preds = %413, %411
  %415 = phi i16 [ %412, %411 ], [ %396, %413 ]
  %416 = add nuw i64 %394, 1
  %417 = shl i16 %395, 1
  %418 = icmp eq i64 %416, %218
  br i1 %418, label %796, label %393

; <label>:419:                                    ; preds = %221
  %420 = icmp eq i64 %218, 0
  br i1 %420, label %799, label %421

; <label>:421:                                    ; preds = %419
  %422 = add i64 %222, -1
  %423 = icmp eq i64 %422, 0
  br i1 %423, label %799, label %424

; <label>:424:                                    ; preds = %421
  br label %425

; <label>:425:                                    ; preds = %456, %424
  %426 = phi i16 [ %452, %456 ], [ 0, %424 ]
  %427 = phi i16 [ %458, %456 ], [ 1, %424 ]
  %428 = phi i64 [ %457, %456 ], [ 0, %424 ]
  br label %429

; <label>:429:                                    ; preds = %429, %425
  %430 = phi i16 [ %426, %425 ], [ %452, %429 ]
  %431 = phi i64 [ 0, %425 ], [ %453, %429 ]
  %432 = shl i64 %431, 4
  %433 = add i64 %432, %428
  %434 = lshr i64 %433, 6
  %435 = getelementptr inbounds %"class.(anonymous namespace)::BitMatrix", %"class.(anonymous namespace)::BitMatrix"* %7, i64 0, i32 0, i32 0, i32 0, i64 %434
  %436 = load i64, i64* %435, align 8
  %437 = and i64 %433, 63
  %438 = shl i64 1, %437
  %439 = and i64 %438, %436
  %440 = or i64 %432, 16
  %441 = add i64 %440, %428
  %442 = lshr i64 %441, 6
  %443 = getelementptr inbounds %"class.(anonymous namespace)::BitMatrix", %"class.(anonymous namespace)::BitMatrix"* %7, i64 0, i32 0, i32 0, i32 0, i64 %442
  %444 = load i64, i64* %443, align 8
  %445 = and i64 %441, 63
  %446 = shl i64 1, %445
  %447 = and i64 %446, %444
  %448 = icmp eq i64 %439, 0
  %449 = icmp eq i64 %447, 0
  %450 = or i1 %448, %449
  %451 = select i1 %450, i16 0, i16 %427
  %452 = or i16 %451, %430
  %453 = add i64 %431, 2
  %454 = icmp ult i64 %453, %422
  %455 = and i1 %454, %450
  br i1 %455, label %429, label %456

; <label>:456:                                    ; preds = %429
  %457 = add nuw i64 %428, 1
  %458 = shl i16 %427, 1
  %459 = icmp eq i64 %457, %218
  br i1 %459, label %797, label %425

; <label>:460:                                    ; preds = %221
  %461 = icmp ne i64 %222, 0
  %462 = icmp ne i64 %218, 0
  %463 = and i1 %462, %461
  br i1 %463, label %464, label %469

; <label>:464:                                    ; preds = %460
  %465 = getelementptr inbounds %"class.(anonymous namespace)::BitMatrix", %"class.(anonymous namespace)::BitMatrix"* %7, i64 0, i32 0, i32 0, i32 0, i64 0
  %466 = load i64, i64* %465, align 8
  %467 = and i64 %466, 1
  %468 = icmp ne i64 %467, 0
  br label %474

; <label>:469:                                    ; preds = %460
  br i1 %461, label %474, label %470

; <label>:470:                                    ; preds = %469
  %471 = xor i1 %462, true
  %472 = zext i1 %471 to i16
  %473 = icmp ugt i64 %218, 1
  br label %481

; <label>:474:                                    ; preds = %469, %464
  %475 = phi i1 [ false, %469 ], [ %468, %464 ]
  %476 = zext i1 %475 to i16
  %477 = icmp ugt i64 %222, 1
  %478 = icmp ugt i64 %218, 1
  %479 = and i1 %478, %477
  br i1 %479, label %487, label %480

; <label>:480:                                    ; preds = %474
  br i1 %477, label %494, label %481

; <label>:481:                                    ; preds = %480, %470
  %482 = phi i16 [ %472, %470 ], [ %476, %480 ]
  %483 = phi i1 [ %473, %470 ], [ %478, %480 ]
  %484 = select i1 %483, i16 0, i16 2
  %485 = or i16 %484, %482
  %486 = icmp ugt i64 %218, 2
  br label %500

; <label>:487:                                    ; preds = %474
  %488 = getelementptr inbounds %"class.(anonymous namespace)::BitMatrix", %"class.(anonymous namespace)::BitMatrix"* %7, i64 0, i32 0, i32 0, i32 0, i64 0
  %489 = load i64, i64* %488, align 8
  %490 = and i64 %489, 131072
  %491 = icmp ne i64 %490, 0
  %492 = select i1 %491, i16 2, i16 0
  %493 = or i16 %492, %476
  br label %494

; <label>:494:                                    ; preds = %487, %480
  %495 = phi i16 [ %476, %480 ], [ %493, %487 ]
  %496 = icmp ugt i64 %222, 2
  %497 = icmp ugt i64 %218, 2
  %498 = and i1 %497, %496
  br i1 %498, label %506, label %499

; <label>:499:                                    ; preds = %494
  br i1 %496, label %513, label %500

; <label>:500:                                    ; preds = %499, %481
  %501 = phi i16 [ %485, %481 ], [ %495, %499 ]
  %502 = phi i1 [ %486, %481 ], [ %497, %499 ]
  %503 = select i1 %502, i16 0, i16 4
  %504 = or i16 %503, %501
  %505 = icmp ugt i64 %218, 3
  br label %519

; <label>:506:                                    ; preds = %494
  %507 = getelementptr inbounds %"class.(anonymous namespace)::BitMatrix", %"class.(anonymous namespace)::BitMatrix"* %7, i64 0, i32 0, i32 0, i32 0, i64 0
  %508 = load i64, i64* %507, align 8
  %509 = and i64 %508, 17179869184
  %510 = icmp ne i64 %509, 0
  %511 = select i1 %510, i16 4, i16 0
  %512 = or i16 %511, %495
  br label %513

; <label>:513:                                    ; preds = %506, %499
  %514 = phi i16 [ %495, %499 ], [ %512, %506 ]
  %515 = icmp ugt i64 %222, 3
  %516 = icmp ugt i64 %218, 3
  %517 = and i1 %516, %515
  br i1 %517, label %525, label %518

; <label>:518:                                    ; preds = %513
  br i1 %515, label %532, label %519

; <label>:519:                                    ; preds = %518, %500
  %520 = phi i16 [ %504, %500 ], [ %514, %518 ]
  %521 = phi i1 [ %505, %500 ], [ %516, %518 ]
  %522 = select i1 %521, i16 0, i16 8
  %523 = or i16 %522, %520
  %524 = icmp ugt i64 %218, 4
  br label %538

; <label>:525:                                    ; preds = %513
  %526 = getelementptr inbounds %"class.(anonymous namespace)::BitMatrix", %"class.(anonymous namespace)::BitMatrix"* %7, i64 0, i32 0, i32 0, i32 0, i64 0
  %527 = load i64, i64* %526, align 8
  %528 = and i64 %527, 2251799813685248
  %529 = icmp ne i64 %528, 0
  %530 = select i1 %529, i16 8, i16 0
  %531 = or i16 %530, %514
  br label %532

; <label>:532:                                    ; preds = %525, %518
  %533 = phi i16 [ %514, %518 ], [ %531, %525 ]
  %534 = icmp ugt i64 %222, 4
  %535 = icmp ugt i64 %218, 4
  %536 = and i1 %535, %534
  br i1 %536, label %544, label %537

; <label>:537:                                    ; preds = %532
  br i1 %534, label %550, label %538

; <label>:538:                                    ; preds = %537, %519
  %539 = phi i16 [ %523, %519 ], [ %533, %537 ]
  %540 = phi i1 [ %524, %519 ], [ %535, %537 ]
  %541 = select i1 %540, i16 0, i16 16
  %542 = or i16 %541, %539
  %543 = icmp ugt i64 %218, 5
  br label %556

; <label>:544:                                    ; preds = %532
  %545 = getelementptr inbounds %"class.(anonymous namespace)::BitMatrix", %"class.(anonymous namespace)::BitMatrix"* %7, i64 0, i32 0, i32 0, i32 0, i64 1
  %546 = load i64, i64* %545, align 8
  %547 = trunc i64 %546 to i16
  %548 = and i16 %547, 16
  %549 = or i16 %548, %533
  br label %550

; <label>:550:                                    ; preds = %544, %537
  %551 = phi i16 [ %533, %537 ], [ %549, %544 ]
  %552 = icmp ugt i64 %222, 5
  %553 = icmp ugt i64 %218, 5
  %554 = and i1 %553, %552
  br i1 %554, label %562, label %555

; <label>:555:                                    ; preds = %550
  br i1 %552, label %569, label %556

; <label>:556:                                    ; preds = %555, %538
  %557 = phi i16 [ %542, %538 ], [ %551, %555 ]
  %558 = phi i1 [ %543, %538 ], [ %553, %555 ]
  %559 = select i1 %558, i16 0, i16 32
  %560 = or i16 %559, %557
  %561 = icmp ugt i64 %218, 6
  br label %575

; <label>:562:                                    ; preds = %550
  %563 = getelementptr inbounds %"class.(anonymous namespace)::BitMatrix", %"class.(anonymous namespace)::BitMatrix"* %7, i64 0, i32 0, i32 0, i32 0, i64 1
  %564 = load i64, i64* %563, align 8
  %565 = and i64 %564, 2097152
  %566 = icmp ne i64 %565, 0
  %567 = select i1 %566, i16 32, i16 0
  %568 = or i16 %567, %551
  br label %569

; <label>:569:                                    ; preds = %562, %555
  %570 = phi i16 [ %551, %555 ], [ %568, %562 ]
  %571 = icmp ugt i64 %222, 6
  %572 = icmp ugt i64 %218, 6
  %573 = and i1 %572, %571
  br i1 %573, label %581, label %574

; <label>:574:                                    ; preds = %569
  br i1 %571, label %588, label %575

; <label>:575:                                    ; preds = %574, %556
  %576 = phi i16 [ %560, %556 ], [ %570, %574 ]
  %577 = phi i1 [ %561, %556 ], [ %572, %574 ]
  %578 = select i1 %577, i16 0, i16 64
  %579 = or i16 %578, %576
  %580 = icmp ugt i64 %218, 7
  br label %594

; <label>:581:                                    ; preds = %569
  %582 = getelementptr inbounds %"class.(anonymous namespace)::BitMatrix", %"class.(anonymous namespace)::BitMatrix"* %7, i64 0, i32 0, i32 0, i32 0, i64 1
  %583 = load i64, i64* %582, align 8
  %584 = and i64 %583, 274877906944
  %585 = icmp ne i64 %584, 0
  %586 = select i1 %585, i16 64, i16 0
  %587 = or i16 %586, %570
  br label %588

; <label>:588:                                    ; preds = %581, %574
  %589 = phi i16 [ %570, %574 ], [ %587, %581 ]
  %590 = icmp ugt i64 %222, 7
  %591 = icmp ugt i64 %218, 7
  %592 = and i1 %591, %590
  br i1 %592, label %600, label %593

; <label>:593:                                    ; preds = %588
  br i1 %590, label %607, label %594

; <label>:594:                                    ; preds = %593, %575
  %595 = phi i16 [ %579, %575 ], [ %589, %593 ]
  %596 = phi i1 [ %580, %575 ], [ %591, %593 ]
  %597 = select i1 %596, i16 0, i16 128
  %598 = or i16 %597, %595
  %599 = icmp ugt i64 %218, 8
  br label %613

; <label>:600:                                    ; preds = %588
  %601 = getelementptr inbounds %"class.(anonymous namespace)::BitMatrix", %"class.(anonymous namespace)::BitMatrix"* %7, i64 0, i32 0, i32 0, i32 0, i64 1
  %602 = load i64, i64* %601, align 8
  %603 = and i64 %602, 36028797018963968
  %604 = icmp ne i64 %603, 0
  %605 = select i1 %604, i16 128, i16 0
  %606 = or i16 %605, %589
  br label %607

; <label>:607:                                    ; preds = %600, %593
  %608 = phi i16 [ %589, %593 ], [ %606, %600 ]
  %609 = icmp ugt i64 %222, 8
  %610 = icmp ugt i64 %218, 8
  %611 = and i1 %610, %609
  br i1 %611, label %619, label %612

; <label>:612:                                    ; preds = %607
  br i1 %609, label %625, label %613

; <label>:613:                                    ; preds = %612, %594
  %614 = phi i16 [ %598, %594 ], [ %608, %612 ]
  %615 = phi i1 [ %599, %594 ], [ %610, %612 ]
  %616 = select i1 %615, i16 0, i16 256
  %617 = or i16 %616, %614
  %618 = icmp ugt i64 %218, 9
  br label %631

; <label>:619:                                    ; preds = %607
  %620 = getelementptr inbounds %"class.(anonymous namespace)::BitMatrix", %"class.(anonymous namespace)::BitMatrix"* %7, i64 0, i32 0, i32 0, i32 0, i64 2
  %621 = load i64, i64* %620, align 8
  %622 = trunc i64 %621 to i16
  %623 = and i16 %622, 256
  %624 = or i16 %623, %608
  br label %625

; <label>:625:                                    ; preds = %619, %612
  %626 = phi i16 [ %608, %612 ], [ %624, %619 ]
  %627 = icmp ugt i64 %222, 9
  %628 = icmp ugt i64 %218, 9
  %629 = and i1 %628, %627
  br i1 %629, label %637, label %630

; <label>:630:                                    ; preds = %625
  br i1 %627, label %644, label %631

; <label>:631:                                    ; preds = %630, %613
  %632 = phi i16 [ %617, %613 ], [ %626, %630 ]
  %633 = phi i1 [ %618, %613 ], [ %628, %630 ]
  %634 = select i1 %633, i16 0, i16 512
  %635 = or i16 %632, %634
  %636 = icmp ugt i64 %218, 10
  br label %650

; <label>:637:                                    ; preds = %625
  %638 = getelementptr inbounds %"class.(anonymous namespace)::BitMatrix", %"class.(anonymous namespace)::BitMatrix"* %7, i64 0, i32 0, i32 0, i32 0, i64 2
  %639 = load i64, i64* %638, align 8
  %640 = and i64 %639, 33554432
  %641 = icmp ne i64 %640, 0
  %642 = select i1 %641, i16 512, i16 0
  %643 = or i16 %642, %626
  br label %644

; <label>:644:                                    ; preds = %637, %630
  %645 = phi i16 [ %626, %630 ], [ %643, %637 ]
  %646 = icmp ugt i64 %222, 10
  %647 = icmp ugt i64 %218, 10
  %648 = and i1 %647, %646
  br i1 %648, label %656, label %649

; <label>:649:                                    ; preds = %644
  br i1 %646, label %663, label %650

; <label>:650:                                    ; preds = %649, %631
  %651 = phi i16 [ %635, %631 ], [ %645, %649 ]
  %652 = phi i1 [ %636, %631 ], [ %647, %649 ]
  %653 = select i1 %652, i16 0, i16 1024
  %654 = or i16 %653, %651
  %655 = icmp ugt i64 %218, 11
  br label %669

; <label>:656:                                    ; preds = %644
  %657 = getelementptr inbounds %"class.(anonymous namespace)::BitMatrix", %"class.(anonymous namespace)::BitMatrix"* %7, i64 0, i32 0, i32 0, i32 0, i64 2
  %658 = load i64, i64* %657, align 8
  %659 = and i64 %658, 4398046511104
  %660 = icmp ne i64 %659, 0
  %661 = select i1 %660, i16 1024, i16 0
  %662 = or i16 %661, %645
  br label %663

; <label>:663:                                    ; preds = %656, %649
  %664 = phi i16 [ %645, %649 ], [ %662, %656 ]
  %665 = icmp ugt i64 %222, 11
  %666 = icmp ugt i64 %218, 11
  %667 = and i1 %666, %665
  br i1 %667, label %675, label %668

; <label>:668:                                    ; preds = %663
  br i1 %665, label %682, label %669

; <label>:669:                                    ; preds = %668, %650
  %670 = phi i16 [ %654, %650 ], [ %664, %668 ]
  %671 = phi i1 [ %655, %650 ], [ %666, %668 ]
  %672 = select i1 %671, i16 0, i16 2048
  %673 = or i16 %672, %670
  %674 = icmp ugt i64 %218, 12
  br label %688

; <label>:675:                                    ; preds = %663
  %676 = getelementptr inbounds %"class.(anonymous namespace)::BitMatrix", %"class.(anonymous namespace)::BitMatrix"* %7, i64 0, i32 0, i32 0, i32 0, i64 2
  %677 = load i64, i64* %676, align 8
  %678 = and i64 %677, 576460752303423488
  %679 = icmp ne i64 %678, 0
  %680 = select i1 %679, i16 2048, i16 0
  %681 = or i16 %680, %664
  br label %682

; <label>:682:                                    ; preds = %675, %668
  %683 = phi i16 [ %664, %668 ], [ %681, %675 ]
  %684 = icmp ugt i64 %222, 12
  %685 = icmp ugt i64 %218, 12
  %686 = and i1 %685, %684
  br i1 %686, label %694, label %687

; <label>:687:                                    ; preds = %682
  br i1 %684, label %700, label %688

; <label>:688:                                    ; preds = %687, %669
  %689 = phi i16 [ %673, %669 ], [ %683, %687 ]
  %690 = phi i1 [ %674, %669 ], [ %685, %687 ]
  %691 = select i1 %690, i16 0, i16 4096
  %692 = or i16 %691, %689
  %693 = icmp ugt i64 %218, 13
  br label %706

; <label>:694:                                    ; preds = %682
  %695 = getelementptr inbounds %"class.(anonymous namespace)::BitMatrix", %"class.(anonymous namespace)::BitMatrix"* %7, i64 0, i32 0, i32 0, i32 0, i64 3
  %696 = load i64, i64* %695, align 8
  %697 = trunc i64 %696 to i16
  %698 = and i16 %697, 4096
  %699 = or i16 %698, %683
  br label %700

; <label>:700:                                    ; preds = %694, %687
  %701 = phi i16 [ %683, %687 ], [ %699, %694 ]
  %702 = icmp ugt i64 %222, 13
  %703 = icmp ugt i64 %218, 13
  %704 = and i1 %703, %702
  br i1 %704, label %712, label %705

; <label>:705:                                    ; preds = %700
  br i1 %702, label %719, label %706

; <label>:706:                                    ; preds = %705, %688
  %707 = phi i16 [ %692, %688 ], [ %701, %705 ]
  %708 = phi i1 [ %693, %688 ], [ %703, %705 ]
  %709 = select i1 %708, i16 0, i16 8192
  %710 = or i16 %709, %707
  %711 = icmp ugt i64 %218, 14
  br label %725

; <label>:712:                                    ; preds = %700
  %713 = getelementptr inbounds %"class.(anonymous namespace)::BitMatrix", %"class.(anonymous namespace)::BitMatrix"* %7, i64 0, i32 0, i32 0, i32 0, i64 3
  %714 = load i64, i64* %713, align 8
  %715 = and i64 %714, 536870912
  %716 = icmp ne i64 %715, 0
  %717 = select i1 %716, i16 8192, i16 0
  %718 = or i16 %717, %701
  br label %719

; <label>:719:                                    ; preds = %712, %705
  %720 = phi i16 [ %701, %705 ], [ %718, %712 ]
  %721 = icmp ugt i64 %222, 14
  %722 = icmp ugt i64 %218, 14
  %723 = and i1 %722, %721
  br i1 %723, label %731, label %724

; <label>:724:                                    ; preds = %719
  br i1 %721, label %738, label %725

; <label>:725:                                    ; preds = %724, %706
  %726 = phi i16 [ %710, %706 ], [ %720, %724 ]
  %727 = phi i1 [ %711, %706 ], [ %722, %724 ]
  %728 = select i1 %727, i16 0, i16 16384
  %729 = or i16 %728, %726
  %730 = icmp ugt i64 %218, 15
  br label %744

; <label>:731:                                    ; preds = %719
  %732 = getelementptr inbounds %"class.(anonymous namespace)::BitMatrix", %"class.(anonymous namespace)::BitMatrix"* %7, i64 0, i32 0, i32 0, i32 0, i64 3
  %733 = load i64, i64* %732, align 8
  %734 = and i64 %733, 70368744177664
  %735 = icmp ne i64 %734, 0
  %736 = select i1 %735, i16 16384, i16 0
  %737 = or i16 %736, %720
  br label %738

; <label>:738:                                    ; preds = %731, %724
  %739 = phi i16 [ %720, %724 ], [ %737, %731 ]
  %740 = icmp ugt i64 %222, 15
  %741 = icmp ugt i64 %218, 15
  %742 = and i1 %741, %740
  br i1 %742, label %749, label %743

; <label>:743:                                    ; preds = %738
  br i1 %740, label %799, label %744

; <label>:744:                                    ; preds = %743, %725
  %745 = phi i16 [ %729, %725 ], [ %739, %743 ]
  %746 = phi i1 [ %730, %725 ], [ %741, %743 ]
  %747 = select i1 %746, i16 0, i16 -32768
  %748 = or i16 %747, %745
  br label %799

; <label>:749:                                    ; preds = %738
  %750 = getelementptr inbounds %"class.(anonymous namespace)::BitMatrix", %"class.(anonymous namespace)::BitMatrix"* %7, i64 0, i32 0, i32 0, i32 0, i64 3
  %751 = load i64, i64* %750, align 8
  %752 = icmp slt i64 %751, 0
  %753 = select i1 %752, i16 -32768, i16 0
  %754 = or i16 %753, %739
  br label %799

; <label>:755:                                    ; preds = %221
  %756 = icmp ugt i64 %222, %218
  br i1 %756, label %799, label %757

; <label>:757:                                    ; preds = %755
  %758 = icmp eq i64 %222, 0
  br i1 %758, label %799, label %759

; <label>:759:                                    ; preds = %757
  br label %760

; <label>:760:                                    ; preds = %790, %759
  %761 = phi i16 [ %791, %790 ], [ -1, %759 ]
  %762 = phi i64 [ %792, %790 ], [ 0, %759 ]
  %763 = phi i16 [ %793, %790 ], [ 1, %759 ]
  %764 = sub nuw nsw i64 16, %762
  br label %765

; <label>:765:                                    ; preds = %779, %760
  %766 = phi i64 [ %781, %779 ], [ %762, %760 ]
  %767 = phi i64 [ %780, %779 ], [ 0, %760 ]
  %768 = icmp ult i64 %766, %218
  br i1 %768, label %769, label %787

; <label>:769:                                    ; preds = %765
  %770 = shl i64 %767, 4
  %771 = add nuw nsw i64 %770, %766
  %772 = lshr i64 %771, 6
  %773 = getelementptr inbounds %"class.(anonymous namespace)::BitMatrix", %"class.(anonymous namespace)::BitMatrix"* %7, i64 0, i32 0, i32 0, i32 0, i64 %772
  %774 = load i64, i64* %773, align 8
  %775 = and i64 %771, 63
  %776 = shl i64 1, %775
  %777 = and i64 %774, %776
  %778 = icmp eq i64 %777, 0
  br i1 %778, label %787, label %779

; <label>:779:                                    ; preds = %769
  %780 = add nuw nsw i64 %767, 1
  %781 = add nuw nsw i64 %766, 1
  %782 = icmp ult i64 %780, %764
  %783 = icmp ult i64 %781, 16
  %784 = and i1 %783, %782
  %785 = icmp ult i64 %780, %222
  %786 = and i1 %785, %784
  br i1 %786, label %765, label %789

; <label>:787:                                    ; preds = %769, %765
  %788 = xor i16 %763, %761
  br label %790

; <label>:789:                                    ; preds = %779
  br label %790

; <label>:790:                                    ; preds = %789, %787
  %791 = phi i16 [ %788, %787 ], [ %761, %789 ]
  %792 = add nuw nsw i64 %762, 1
  %793 = shl i16 %763, 1
  %794 = icmp eq i64 %792, 16
  br i1 %794, label %798, label %760

; <label>:795:                                    ; preds = %221
  unreachable

; <label>:796:                                    ; preds = %414
  br label %799

; <label>:797:                                    ; preds = %456
  br label %799

; <label>:798:                                    ; preds = %790
  br label %799

; <label>:799:                                    ; preds = %798, %797, %796, %757, %755, %749, %744, %743, %421, %419, %388
  %800 = phi i64 [ %222, %388 ], [ %222, %419 ], [ 1, %421 ], [ %222, %743 ], [ %222, %749 ], [ %222, %744 ], [ %222, %755 ], [ 0, %757 ], [ %222, %796 ], [ %222, %797 ], [ %222, %798 ]
  %801 = phi i16 [ 0, %388 ], [ 0, %419 ], [ 0, %421 ], [ %739, %743 ], [ %754, %749 ], [ %748, %744 ], [ 0, %755 ], [ -1, %757 ], [ %415, %796 ], [ %452, %797 ], [ %791, %798 ]
  %802 = trunc i8 %223 to i2
  switch i2 %802, label %810 [
    i2 0, label %811
    i2 1, label %805
    i2 -2, label %811
    i2 -1, label %803
  ]

; <label>:803:                                    ; preds = %799
  %804 = icmp eq i64 %218, 0
  br i1 %804, label %811, label %807

; <label>:805:                                    ; preds = %799
  %806 = xor i16 %801, -1
  br label %811

; <label>:807:                                    ; preds = %803
  %808 = xor i16 %801, 1
  %809 = icmp eq i64 %218, 1
  br i1 %809, label %811, label %829

; <label>:810:                                    ; preds = %799
  unreachable

; <label>:811:                                    ; preds = %868, %865, %862, %859, %856, %853, %850, %847, %844, %841, %838, %835, %832, %829, %807, %805, %803, %799, %799
  %812 = phi i16 [ %806, %805 ], [ %801, %799 ], [ %801, %799 ], [ %866, %865 ], [ %863, %862 ], [ %860, %859 ], [ %857, %856 ], [ %854, %853 ], [ %851, %850 ], [ %848, %847 ], [ %845, %844 ], [ %842, %841 ], [ %839, %838 ], [ %836, %835 ], [ %833, %832 ], [ %830, %829 ], [ %808, %807 ], [ %801, %803 ], [ %871, %868 ]
  %813 = and i8 %12, 64
  %814 = icmp eq i8 %813, 0
  %815 = icmp eq i16 %812, 0
  br i1 %814, label %816, label %821

; <label>:816:                                    ; preds = %811
  br i1 %815, label %1084, label %817

; <label>:817:                                    ; preds = %816
  %818 = zext i16 %812 to i32
  %819 = tail call i32 @llvm.cttz.i32(i32 %818, i1 true) 
  %820 = zext i32 %819 to i64
  br label %1084

; <label>:821:                                    ; preds = %811
  br i1 %815, label %1084, label %822

; <label>:822:                                    ; preds = %821
  %823 = zext i16 %812 to i32
  %824 = tail call i32 @llvm.ctlz.i32(i32 %823, i1 true) 
  %825 = add nuw nsw i32 %824, 65520
  %826 = and i32 %825, 65535
  %827 = zext i32 %826 to i64
  %828 = sub nsw i64 15, %827
  br label %1084

; <label>:829:                                    ; preds = %807
  %830 = xor i16 %801, 3
  %831 = icmp ugt i64 %218, 2
  br i1 %831, label %832, label %811

; <label>:832:                                    ; preds = %829
  %833 = xor i16 %801, 7
  %834 = icmp eq i64 %218, 3
  br i1 %834, label %811, label %835

; <label>:835:                                    ; preds = %832
  %836 = xor i16 %801, 15
  %837 = icmp ugt i64 %218, 4
  br i1 %837, label %838, label %811

; <label>:838:                                    ; preds = %835
  %839 = xor i16 %801, 31
  %840 = icmp eq i64 %218, 5
  br i1 %840, label %811, label %841

; <label>:841:                                    ; preds = %838
  %842 = xor i16 %801, 63
  %843 = icmp ugt i64 %218, 6
  br i1 %843, label %844, label %811

; <label>:844:                                    ; preds = %841
  %845 = xor i16 %801, 127
  %846 = icmp eq i64 %218, 7
  br i1 %846, label %811, label %847

; <label>:847:                                    ; preds = %844
  %848 = xor i16 %801, 255
  %849 = icmp ugt i64 %218, 8
  br i1 %849, label %850, label %811

; <label>:850:                                    ; preds = %847
  %851 = xor i16 %801, 511
  %852 = icmp eq i64 %218, 9
  br i1 %852, label %811, label %853

; <label>:853:                                    ; preds = %850
  %854 = xor i16 %801, 1023
  %855 = icmp ugt i64 %218, 10
  br i1 %855, label %856, label %811

; <label>:856:                                    ; preds = %853
  %857 = xor i16 %801, 2047
  %858 = icmp eq i64 %218, 11
  br i1 %858, label %811, label %859

; <label>:859:                                    ; preds = %856
  %860 = xor i16 %801, 4095
  %861 = icmp ugt i64 %218, 12
  br i1 %861, label %862, label %811

; <label>:862:                                    ; preds = %859
  %863 = xor i16 %801, 8191
  %864 = icmp eq i64 %218, 13
  br i1 %864, label %811, label %865

; <label>:865:                                    ; preds = %862
  %866 = xor i16 %801, 16383
  %867 = icmp ugt i64 %218, 14
  br i1 %867, label %868, label %811

; <label>:868:                                    ; preds = %865
  %869 = icmp ne i64 %218, 15
  %870 = select i1 %869, i16 -1, i16 32767
  %871 = xor i16 %801, %870
  br label %811

; <label>:872:                                    ; preds = %249, %246
  %873 = phi i64 [ %252, %249 ], [ %248, %246 ]
  %874 = icmp ugt i8 %25, %227
  %875 = or i64 %244, 1
  %876 = shl i64 1, %875
  %877 = xor i64 %876, -1
  %878 = and i64 %873, %877
  %879 = or i64 %873, %876
  %880 = select i1 %874, i64 %878, i64 %879
  %881 = icmp ugt i8 %28, %227
  %882 = or i64 %244, 2
  %883 = shl i64 1, %882
  %884 = xor i64 %883, -1
  %885 = and i64 %880, %884
  %886 = or i64 %880, %883
  %887 = select i1 %881, i64 %885, i64 %886
  %888 = icmp ugt i8 %31, %227
  %889 = or i64 %244, 3
  %890 = shl i64 1, %889
  %891 = xor i64 %890, -1
  %892 = and i64 %887, %891
  %893 = or i64 %887, %890
  %894 = select i1 %888, i64 %892, i64 %893
  %895 = icmp ugt i8 %34, %227
  %896 = or i64 %244, 4
  %897 = shl i64 1, %896
  %898 = xor i64 %897, -1
  %899 = and i64 %894, %898
  %900 = or i64 %894, %897
  %901 = select i1 %895, i64 %899, i64 %900
  %902 = icmp ugt i8 %37, %227
  %903 = or i64 %244, 5
  %904 = shl i64 1, %903
  %905 = xor i64 %904, -1
  %906 = and i64 %901, %905
  %907 = or i64 %901, %904
  %908 = select i1 %902, i64 %906, i64 %907
  %909 = icmp ugt i8 %40, %227
  %910 = or i64 %244, 6
  %911 = shl i64 1, %910
  %912 = xor i64 %911, -1
  %913 = and i64 %908, %912
  %914 = or i64 %908, %911
  %915 = select i1 %909, i64 %913, i64 %914
  %916 = icmp ugt i8 %43, %227
  %917 = or i64 %244, 7
  %918 = shl i64 1, %917
  %919 = xor i64 %918, -1
  %920 = and i64 %915, %919
  %921 = or i64 %915, %918
  %922 = select i1 %916, i64 %920, i64 %921
  %923 = icmp ugt i8 %46, %227
  %924 = or i64 %244, 8
  %925 = shl i64 1, %924
  %926 = xor i64 %925, -1
  %927 = and i64 %922, %926
  %928 = or i64 %922, %925
  %929 = select i1 %923, i64 %927, i64 %928
  %930 = icmp ugt i8 %49, %227
  %931 = or i64 %244, 9
  %932 = shl i64 1, %931
  %933 = xor i64 %932, -1
  %934 = and i64 %929, %933
  %935 = or i64 %929, %932
  %936 = select i1 %930, i64 %934, i64 %935
  %937 = icmp ugt i8 %52, %227
  %938 = or i64 %244, 10
  %939 = shl i64 1, %938
  %940 = xor i64 %939, -1
  %941 = and i64 %936, %940
  %942 = or i64 %936, %939
  %943 = select i1 %937, i64 %941, i64 %942
  %944 = icmp ugt i8 %55, %227
  %945 = or i64 %244, 11
  %946 = shl i64 1, %945
  %947 = xor i64 %946, -1
  %948 = and i64 %943, %947
  %949 = or i64 %943, %946
  %950 = select i1 %944, i64 %948, i64 %949
  %951 = icmp ugt i8 %58, %227
  %952 = or i64 %244, 12
  %953 = shl i64 1, %952
  %954 = xor i64 %953, -1
  %955 = and i64 %950, %954
  %956 = or i64 %950, %953
  %957 = select i1 %951, i64 %955, i64 %956
  %958 = icmp ugt i8 %61, %227
  %959 = or i64 %244, 13
  %960 = shl i64 1, %959
  %961 = xor i64 %960, -1
  %962 = and i64 %957, %961
  %963 = or i64 %957, %960
  %964 = select i1 %958, i64 %962, i64 %963
  %965 = icmp ugt i8 %64, %227
  %966 = or i64 %244, 14
  %967 = shl i64 1, %966
  %968 = xor i64 %967, -1
  %969 = and i64 %964, %968
  %970 = or i64 %964, %967
  %971 = select i1 %965, i64 %969, i64 %970
  store i64 %971, i64* %243, align 8
  %972 = icmp ugt i8 %67, %227
  %973 = or i64 %244, 15
  %974 = shl i64 1, %973
  %975 = xor i64 %974, -1
  %976 = and i64 %971, %975
  %977 = or i64 %971, %974
  br label %267

; <label>:978:                                    ; preds = %263, %260
  %979 = phi i64 [ %266, %263 ], [ %262, %260 ]
  %980 = icmp ult i8 %25, %227
  %981 = or i64 %258, 1
  %982 = shl i64 1, %981
  %983 = xor i64 %982, -1
  %984 = and i64 %979, %983
  %985 = or i64 %979, %982
  %986 = select i1 %980, i64 %984, i64 %985
  %987 = icmp ult i8 %28, %227
  %988 = or i64 %258, 2
  %989 = shl i64 1, %988
  %990 = xor i64 %989, -1
  %991 = and i64 %986, %990
  %992 = or i64 %986, %989
  %993 = select i1 %987, i64 %991, i64 %992
  %994 = icmp ult i8 %31, %227
  %995 = or i64 %258, 3
  %996 = shl i64 1, %995
  %997 = xor i64 %996, -1
  %998 = and i64 %993, %997
  %999 = or i64 %993, %996
  %1000 = select i1 %994, i64 %998, i64 %999
  %1001 = icmp ult i8 %34, %227
  %1002 = or i64 %258, 4
  %1003 = shl i64 1, %1002
  %1004 = xor i64 %1003, -1
  %1005 = and i64 %1000, %1004
  %1006 = or i64 %1000, %1003
  %1007 = select i1 %1001, i64 %1005, i64 %1006
  %1008 = icmp ult i8 %37, %227
  %1009 = or i64 %258, 5
  %1010 = shl i64 1, %1009
  %1011 = xor i64 %1010, -1
  %1012 = and i64 %1007, %1011
  %1013 = or i64 %1007, %1010
  %1014 = select i1 %1008, i64 %1012, i64 %1013
  %1015 = icmp ult i8 %40, %227
  %1016 = or i64 %258, 6
  %1017 = shl i64 1, %1016
  %1018 = xor i64 %1017, -1
  %1019 = and i64 %1014, %1018
  %1020 = or i64 %1014, %1017
  %1021 = select i1 %1015, i64 %1019, i64 %1020
  %1022 = icmp ult i8 %43, %227
  %1023 = or i64 %258, 7
  %1024 = shl i64 1, %1023
  %1025 = xor i64 %1024, -1
  %1026 = and i64 %1021, %1025
  %1027 = or i64 %1021, %1024
  %1028 = select i1 %1022, i64 %1026, i64 %1027
  %1029 = icmp ult i8 %46, %227
  %1030 = or i64 %258, 8
  %1031 = shl i64 1, %1030
  %1032 = xor i64 %1031, -1
  %1033 = and i64 %1028, %1032
  %1034 = or i64 %1028, %1031
  %1035 = select i1 %1029, i64 %1033, i64 %1034
  %1036 = icmp ult i8 %49, %227
  %1037 = or i64 %258, 9
  %1038 = shl i64 1, %1037
  %1039 = xor i64 %1038, -1
  %1040 = and i64 %1035, %1039
  %1041 = or i64 %1035, %1038
  %1042 = select i1 %1036, i64 %1040, i64 %1041
  %1043 = icmp ult i8 %52, %227
  %1044 = or i64 %258, 10
  %1045 = shl i64 1, %1044
  %1046 = xor i64 %1045, -1
  %1047 = and i64 %1042, %1046
  %1048 = or i64 %1042, %1045
  %1049 = select i1 %1043, i64 %1047, i64 %1048
  %1050 = icmp ult i8 %55, %227
  %1051 = or i64 %258, 11
  %1052 = shl i64 1, %1051
  %1053 = xor i64 %1052, -1
  %1054 = and i64 %1049, %1053
  %1055 = or i64 %1049, %1052
  %1056 = select i1 %1050, i64 %1054, i64 %1055
  %1057 = icmp ult i8 %58, %227
  %1058 = or i64 %258, 12
  %1059 = shl i64 1, %1058
  %1060 = xor i64 %1059, -1
  %1061 = and i64 %1056, %1060
  %1062 = or i64 %1056, %1059
  %1063 = select i1 %1057, i64 %1061, i64 %1062
  %1064 = icmp ult i8 %61, %227
  %1065 = or i64 %258, 13
  %1066 = shl i64 1, %1065
  %1067 = xor i64 %1066, -1
  %1068 = and i64 %1063, %1067
  %1069 = or i64 %1063, %1066
  %1070 = select i1 %1064, i64 %1068, i64 %1069
  %1071 = icmp ult i8 %64, %227
  %1072 = or i64 %258, 14
  %1073 = shl i64 1, %1072
  %1074 = xor i64 %1073, -1
  %1075 = and i64 %1070, %1074
  %1076 = or i64 %1070, %1073
  %1077 = select i1 %1071, i64 %1075, i64 %1076
  store i64 %1077, i64* %257, align 8
  %1078 = icmp ult i8 %67, %227
  %1079 = or i64 %258, 15
  %1080 = shl i64 1, %1079
  %1081 = xor i64 %1080, -1
  %1082 = and i64 %1077, %1081
  %1083 = or i64 %1077, %1080
  br label %267

; <label>:1084:                                   ; preds = %822, %821, %817, %816
  %1085 = phi i64 [ %828, %822 ], [ 16, %821 ], [ %820, %817 ], [ 16, %816 ]
  %1086 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 5, i32 0, i32 0
  %1087 = and i64 %1085, 65535
  store i64 %1087, i64* %1086, align 8
  %1088 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  %1089 = icmp ne i16 %812, 0
  %1090 = zext i1 %1089 to i8
  store i8 %1090, i8* %1088, align 1
  %1091 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  %1092 = icmp ult i64 %218, 16
  %1093 = zext i1 %1092 to i8
  store i8 %1093, i8* %1091, align 1
  %1094 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  %1095 = icmp ult i64 %800, 16
  %1096 = zext i1 %1095 to i8
  store i8 %1096, i8* %1094, align 1
  %1097 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  %1098 = trunc i16 %812 to i8
  %1099 = and i8 %1098, 1
  store i8 %1099, i8* %1097, align 1
  %1100 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 0, i8* %1100, align 1
  %1101 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 0, i8* %1101, align 1
  call void @llvm.lifetime.end(i64 288, i8* nonnull %68) 
  call void @llvm.lifetime.end(i64 16, i8* nonnull %17) 
  br label %3349

; <label>:1102:                                   ; preds = %5
  %1103 = bitcast { i64, i64 }* %9 to %struct.uint16v8_t*
  %1104 = bitcast { i64, i64 }* %9 to i8*
  call void @llvm.lifetime.start(i64 16, i8* nonnull %1104) 
  %1105 = bitcast i8* %2 to i64*
  %1106 = load i64, i64* %1105, align 1
  %1107 = getelementptr inbounds i8, i8* %2, i64 8
  %1108 = bitcast i8* %1107 to i64*
  %1109 = load i64, i64* %1108, align 1
  %1110 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %9, i64 0, i32 0
  store i64 %1106, i64* %1110, align 8
  %1111 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %9, i64 0, i32 1
  store i64 %1109, i64* %1111, align 8
  %1112 = inttoptr i64 %3 to i16*
  %1113 = load i16, i16* %1112
  %1114 = add i64 %3, 2
  %1115 = inttoptr i64 %1114 to i16*
  %1116 = load i16, i16* %1115
  %1117 = add i64 %3, 4
  %1118 = inttoptr i64 %1117 to i16*
  %1119 = load i16, i16* %1118
  %1120 = add i64 %3, 6
  %1121 = inttoptr i64 %1120 to i16*
  %1122 = load i16, i16* %1121
  %1123 = add i64 %3, 8
  %1124 = inttoptr i64 %1123 to i16*
  %1125 = load i16, i16* %1124
  %1126 = add i64 %3, 10
  %1127 = inttoptr i64 %1126 to i16*
  %1128 = load i16, i16* %1127
  %1129 = add i64 %3, 12
  %1130 = inttoptr i64 %1129 to i16*
  %1131 = load i16, i16* %1130
  %1132 = add i64 %3, 14
  %1133 = inttoptr i64 %1132 to i16*
  %1134 = load i16, i16* %1133
  %1135 = lshr i8 %12, 2
  %1136 = trunc i64 %1106 to i16
  %1137 = icmp eq i16 %1136, 0
  %1138 = select i1 %1137, i64 0, i64 8
  %1139 = icmp eq i16 %1113, 0
  %1140 = select i1 %1139, i64 0, i64 8
  %1141 = and i64 %1106, 4294901760
  %1142 = icmp eq i64 %1141, 0
  %1143 = xor i1 %1137, true
  %1144 = and i1 %1142, %1143
  %1145 = select i1 %1144, i64 1, i64 %1138
  %1146 = icmp eq i16 %1116, 0
  %1147 = xor i1 %1139, true
  %1148 = and i1 %1146, %1147
  %1149 = select i1 %1148, i64 1, i64 %1140
  %1150 = and i64 %1106, 281470681743360
  %1151 = icmp eq i64 %1150, 0
  %1152 = icmp ugt i64 %1145, 2
  %1153 = and i1 %1151, %1152
  %1154 = select i1 %1153, i64 2, i64 %1145
  %1155 = icmp eq i16 %1119, 0
  %1156 = icmp ugt i64 %1149, 2
  %1157 = and i1 %1155, %1156
  %1158 = select i1 %1157, i64 2, i64 %1149
  %1159 = icmp ult i64 %1106, 281474976710656
  %1160 = icmp ugt i64 %1154, 3
  %1161 = and i1 %1159, %1160
  %1162 = select i1 %1161, i64 3, i64 %1154
  %1163 = icmp eq i16 %1122, 0
  %1164 = icmp ugt i64 %1158, 3
  %1165 = and i1 %1163, %1164
  %1166 = select i1 %1165, i64 3, i64 %1158
  %1167 = trunc i64 %1109 to i16
  %1168 = icmp eq i16 %1167, 0
  %1169 = icmp ugt i64 %1162, 4
  %1170 = and i1 %1168, %1169
  %1171 = select i1 %1170, i64 4, i64 %1162
  %1172 = icmp eq i16 %1125, 0
  %1173 = icmp ugt i64 %1166, 4
  %1174 = and i1 %1172, %1173
  %1175 = select i1 %1174, i64 4, i64 %1166
  %1176 = and i64 %1109, 4294901760
  %1177 = icmp eq i64 %1176, 0
  %1178 = icmp ugt i64 %1171, 5
  %1179 = and i1 %1177, %1178
  %1180 = select i1 %1179, i64 5, i64 %1171
  %1181 = icmp eq i16 %1128, 0
  %1182 = icmp ugt i64 %1175, 5
  %1183 = and i1 %1181, %1182
  %1184 = select i1 %1183, i64 5, i64 %1175
  %1185 = and i64 %1109, 281470681743360
  %1186 = icmp eq i64 %1185, 0
  %1187 = icmp ugt i64 %1180, 6
  %1188 = and i1 %1186, %1187
  %1189 = select i1 %1188, i64 6, i64 %1180
  %1190 = icmp eq i16 %1131, 0
  %1191 = icmp ugt i64 %1184, 6
  %1192 = and i1 %1190, %1191
  %1193 = select i1 %1192, i64 6, i64 %1184
  %1194 = icmp ult i64 %1109, 281474976710656
  %1195 = icmp ugt i64 %1189, 7
  %1196 = and i1 %1194, %1195
  %1197 = select i1 %1196, i64 7, i64 %1189
  %1198 = icmp eq i16 %1134, 0
  %1199 = icmp ugt i64 %1193, 7
  %1200 = and i1 %1198, %1199
  %1201 = select i1 %1200, i64 7, i64 %1193
  %1202 = lshr i8 %12, 4
  %1203 = trunc i8 %1135 to i2
  %1204 = icmp eq i2 %1203, 1
  br i1 %1204, label %1206, label %1205

; <label>:1205:                                   ; preds = %1102
  br label %1338

; <label>:1206:                                   ; preds = %1102
  br label %1207

; <label>:1207:                                   ; preds = %1331, %1206
  %1208 = phi i16 [ %1333, %1331 ], [ %1136, %1206 ]
  %1209 = phi i64 [ %1329, %1331 ], [ 0, %1206 ]
  %1210 = phi i64 [ %1328, %1331 ], [ 0, %1206 ]
  %1211 = and i64 %1209, 1
  %1212 = icmp eq i64 %1211, 0
  %1213 = shl i64 %1209, 3
  br i1 %1212, label %1269, label %1214

; <label>:1214:                                   ; preds = %1207
  %1215 = icmp ugt i16 %1113, %1208
  %1216 = shl i64 1, %1213
  %1217 = xor i64 %1216, -1
  %1218 = and i64 %1210, %1217
  %1219 = or i64 %1216, %1210
  %1220 = select i1 %1215, i64 %1218, i64 %1219
  %1221 = icmp ugt i16 %1116, %1208
  %1222 = or i64 %1213, 1
  %1223 = shl i64 1, %1222
  %1224 = xor i64 %1223, -1
  %1225 = and i64 %1220, %1224
  %1226 = or i64 %1220, %1223
  %1227 = select i1 %1221, i64 %1225, i64 %1226
  %1228 = icmp ugt i16 %1119, %1208
  %1229 = or i64 %1213, 2
  %1230 = shl i64 1, %1229
  %1231 = xor i64 %1230, -1
  %1232 = and i64 %1227, %1231
  %1233 = or i64 %1227, %1230
  %1234 = select i1 %1228, i64 %1232, i64 %1233
  %1235 = icmp ugt i16 %1122, %1208
  %1236 = or i64 %1213, 3
  %1237 = shl i64 1, %1236
  %1238 = xor i64 %1237, -1
  %1239 = and i64 %1234, %1238
  %1240 = or i64 %1234, %1237
  %1241 = select i1 %1235, i64 %1239, i64 %1240
  %1242 = icmp ugt i16 %1125, %1208
  %1243 = or i64 %1213, 4
  %1244 = shl i64 1, %1243
  %1245 = xor i64 %1244, -1
  %1246 = and i64 %1241, %1245
  %1247 = or i64 %1241, %1244
  %1248 = select i1 %1242, i64 %1246, i64 %1247
  %1249 = icmp ugt i16 %1128, %1208
  %1250 = or i64 %1213, 5
  %1251 = shl i64 1, %1250
  %1252 = xor i64 %1251, -1
  %1253 = and i64 %1248, %1252
  %1254 = or i64 %1248, %1251
  %1255 = select i1 %1249, i64 %1253, i64 %1254
  %1256 = icmp ugt i16 %1131, %1208
  %1257 = or i64 %1213, 6
  %1258 = shl i64 1, %1257
  %1259 = xor i64 %1258, -1
  %1260 = and i64 %1255, %1259
  %1261 = or i64 %1255, %1258
  %1262 = select i1 %1256, i64 %1260, i64 %1261
  %1263 = icmp ugt i16 %1134, %1208
  %1264 = or i64 %1213, 7
  %1265 = shl i64 1, %1264
  %1266 = xor i64 %1265, -1
  %1267 = and i64 %1262, %1266
  %1268 = or i64 %1262, %1265
  br label %1324

; <label>:1269:                                   ; preds = %1207
  %1270 = icmp ult i16 %1113, %1208
  %1271 = shl i64 1, %1213
  %1272 = xor i64 %1271, -1
  %1273 = and i64 %1210, %1272
  %1274 = or i64 %1271, %1210
  %1275 = select i1 %1270, i64 %1273, i64 %1274
  %1276 = icmp ult i16 %1116, %1208
  %1277 = or i64 %1213, 1
  %1278 = shl i64 1, %1277
  %1279 = xor i64 %1278, -1
  %1280 = and i64 %1275, %1279
  %1281 = or i64 %1275, %1278
  %1282 = select i1 %1276, i64 %1280, i64 %1281
  %1283 = icmp ult i16 %1119, %1208
  %1284 = or i64 %1213, 2
  %1285 = shl i64 1, %1284
  %1286 = xor i64 %1285, -1
  %1287 = and i64 %1282, %1286
  %1288 = or i64 %1282, %1285
  %1289 = select i1 %1283, i64 %1287, i64 %1288
  %1290 = icmp ult i16 %1122, %1208
  %1291 = or i64 %1213, 3
  %1292 = shl i64 1, %1291
  %1293 = xor i64 %1292, -1
  %1294 = and i64 %1289, %1293
  %1295 = or i64 %1289, %1292
  %1296 = select i1 %1290, i64 %1294, i64 %1295
  %1297 = icmp ult i16 %1125, %1208
  %1298 = or i64 %1213, 4
  %1299 = shl i64 1, %1298
  %1300 = xor i64 %1299, -1
  %1301 = and i64 %1296, %1300
  %1302 = or i64 %1296, %1299
  %1303 = select i1 %1297, i64 %1301, i64 %1302
  %1304 = icmp ult i16 %1128, %1208
  %1305 = or i64 %1213, 5
  %1306 = shl i64 1, %1305
  %1307 = xor i64 %1306, -1
  %1308 = and i64 %1303, %1307
  %1309 = or i64 %1303, %1306
  %1310 = select i1 %1304, i64 %1308, i64 %1309
  %1311 = icmp ult i16 %1131, %1208
  %1312 = or i64 %1213, 6
  %1313 = shl i64 1, %1312
  %1314 = xor i64 %1313, -1
  %1315 = and i64 %1310, %1314
  %1316 = or i64 %1310, %1313
  %1317 = select i1 %1311, i64 %1315, i64 %1316
  %1318 = icmp ult i16 %1134, %1208
  %1319 = or i64 %1213, 7
  %1320 = shl i64 1, %1319
  %1321 = xor i64 %1320, -1
  %1322 = and i64 %1317, %1321
  %1323 = or i64 %1317, %1320
  br label %1324

; <label>:1324:                                   ; preds = %1269, %1214
  %1325 = phi i64 [ %1268, %1214 ], [ %1323, %1269 ]
  %1326 = phi i64 [ %1267, %1214 ], [ %1322, %1269 ]
  %1327 = phi i1 [ %1263, %1214 ], [ %1318, %1269 ]
  %1328 = select i1 %1327, i64 %1326, i64 %1325
  %1329 = add nuw nsw i64 %1209, 1
  %1330 = icmp eq i64 %1329, 8
  br i1 %1330, label %1334, label %1331

; <label>:1331:                                   ; preds = %1324
  %1332 = getelementptr inbounds %struct.uint16v8_t, %struct.uint16v8_t* %1103, i64 0, i32 0, i64 %1329
  %1333 = load i16, i16* %1332, align 2
  br label %1207

; <label>:1334:                                   ; preds = %1324
  br label %1336

; <label>:1335:                                   ; preds = %1338
  br label %1336

; <label>:1336:                                   ; preds = %1335, %1334
  %1337 = phi i64 [ %1328, %1334 ], [ %1397, %1335 ]
  switch i2 %1203, label %1611 [
    i2 0, label %1403
    i2 1, label %1431
    i2 -2, label %1464
    i2 -1, label %1594
  ]

; <label>:1338:                                   ; preds = %1400, %1205
  %1339 = phi i16 [ %1402, %1400 ], [ %1136, %1205 ]
  %1340 = phi i64 [ %1398, %1400 ], [ 0, %1205 ]
  %1341 = phi i64 [ %1397, %1400 ], [ 0, %1205 ]
  %1342 = shl i64 %1340, 3
  %1343 = icmp eq i16 %1339, %1113
  %1344 = shl i64 1, %1342
  %1345 = xor i64 %1344, -1
  %1346 = and i64 %1341, %1345
  %1347 = or i64 %1344, %1341
  %1348 = select i1 %1343, i64 %1347, i64 %1346
  %1349 = icmp eq i16 %1339, %1116
  %1350 = or i64 %1342, 1
  %1351 = shl i64 1, %1350
  %1352 = xor i64 %1351, -1
  %1353 = and i64 %1348, %1352
  %1354 = or i64 %1348, %1351
  %1355 = select i1 %1349, i64 %1354, i64 %1353
  %1356 = icmp eq i16 %1339, %1119
  %1357 = or i64 %1342, 2
  %1358 = shl i64 1, %1357
  %1359 = xor i64 %1358, -1
  %1360 = and i64 %1355, %1359
  %1361 = or i64 %1355, %1358
  %1362 = select i1 %1356, i64 %1361, i64 %1360
  %1363 = icmp eq i16 %1339, %1122
  %1364 = or i64 %1342, 3
  %1365 = shl i64 1, %1364
  %1366 = xor i64 %1365, -1
  %1367 = and i64 %1362, %1366
  %1368 = or i64 %1362, %1365
  %1369 = select i1 %1363, i64 %1368, i64 %1367
  %1370 = icmp eq i16 %1339, %1125
  %1371 = or i64 %1342, 4
  %1372 = shl i64 1, %1371
  %1373 = xor i64 %1372, -1
  %1374 = and i64 %1369, %1373
  %1375 = or i64 %1369, %1372
  %1376 = select i1 %1370, i64 %1375, i64 %1374
  %1377 = icmp eq i16 %1339, %1128
  %1378 = or i64 %1342, 5
  %1379 = shl i64 1, %1378
  %1380 = xor i64 %1379, -1
  %1381 = and i64 %1376, %1380
  %1382 = or i64 %1376, %1379
  %1383 = select i1 %1377, i64 %1382, i64 %1381
  %1384 = icmp eq i16 %1339, %1131
  %1385 = or i64 %1342, 6
  %1386 = shl i64 1, %1385
  %1387 = xor i64 %1386, -1
  %1388 = and i64 %1383, %1387
  %1389 = or i64 %1383, %1386
  %1390 = select i1 %1384, i64 %1389, i64 %1388
  %1391 = icmp eq i16 %1339, %1134
  %1392 = or i64 %1342, 7
  %1393 = shl i64 1, %1392
  %1394 = xor i64 %1393, -1
  %1395 = and i64 %1390, %1394
  %1396 = or i64 %1390, %1393
  %1397 = select i1 %1391, i64 %1396, i64 %1395
  %1398 = add nuw nsw i64 %1340, 1
  %1399 = icmp eq i64 %1398, 8
  br i1 %1399, label %1335, label %1400

; <label>:1400:                                   ; preds = %1338
  %1401 = getelementptr inbounds %struct.uint16v8_t, %struct.uint16v8_t* %1103, i64 0, i32 0, i64 %1398
  %1402 = load i16, i16* %1401, align 2
  br label %1338

; <label>:1403:                                   ; preds = %1336
  %1404 = icmp eq i64 %1201, 0
  %1405 = icmp eq i64 %1197, 0
  %1406 = or i1 %1404, %1405
  br i1 %1406, label %1614, label %1407

; <label>:1407:                                   ; preds = %1403
  br label %1408

; <label>:1408:                                   ; preds = %1426, %1407
  %1409 = phi i64 [ %1428, %1426 ], [ 0, %1407 ]
  %1410 = phi i16 [ %1429, %1426 ], [ 1, %1407 ]
  %1411 = phi i16 [ %1427, %1426 ], [ 0, %1407 ]
  br label %1414

; <label>:1412:                                   ; preds = %1414
  %1413 = icmp ult i64 %1422, %1197
  br i1 %1413, label %1414, label %1425

; <label>:1414:                                   ; preds = %1412, %1408
  %1415 = phi i64 [ 0, %1408 ], [ %1422, %1412 ]
  %1416 = shl i64 %1415, 3
  %1417 = add i64 %1416, %1409
  %1418 = and i64 %1417, 63
  %1419 = shl i64 1, %1418
  %1420 = and i64 %1419, %1337
  %1421 = icmp eq i64 %1420, 0
  %1422 = add nuw i64 %1415, 1
  br i1 %1421, label %1412, label %1423

; <label>:1423:                                   ; preds = %1414
  %1424 = or i16 %1411, %1410
  br label %1426

; <label>:1425:                                   ; preds = %1412
  br label %1426

; <label>:1426:                                   ; preds = %1425, %1423
  %1427 = phi i16 [ %1424, %1423 ], [ %1411, %1425 ]
  %1428 = add nuw i64 %1409, 1
  %1429 = shl i16 %1410, 1
  %1430 = icmp eq i64 %1428, %1201
  br i1 %1430, label %1612, label %1408

; <label>:1431:                                   ; preds = %1336
  %1432 = icmp eq i64 %1201, 0
  br i1 %1432, label %1614, label %1433

; <label>:1433:                                   ; preds = %1431
  %1434 = add i64 %1197, -1
  %1435 = icmp eq i64 %1434, 0
  br i1 %1435, label %1614, label %1436

; <label>:1436:                                   ; preds = %1433
  br label %1437

; <label>:1437:                                   ; preds = %1460, %1436
  %1438 = phi i16 [ %1456, %1460 ], [ 0, %1436 ]
  %1439 = phi i16 [ %1462, %1460 ], [ 1, %1436 ]
  %1440 = phi i64 [ %1461, %1460 ], [ 0, %1436 ]
  br label %1441

; <label>:1441:                                   ; preds = %1441, %1437
  %1442 = phi i16 [ %1438, %1437 ], [ %1456, %1441 ]
  %1443 = phi i64 [ 0, %1437 ], [ %1457, %1441 ]
  %1444 = shl i64 %1443, 3
  %1445 = add i64 %1444, %1440
  %1446 = and i64 %1445, 63
  %1447 = shl i64 1, %1446
  %1448 = or i64 %1444, 8
  %1449 = add i64 %1448, %1440
  %1450 = and i64 %1449, 63
  %1451 = shl i64 1, %1450
  %1452 = or i64 %1451, %1447
  %1453 = and i64 %1452, %1337
  %1454 = icmp ne i64 %1453, %1452
  %1455 = select i1 %1454, i16 0, i16 %1439
  %1456 = or i16 %1455, %1442
  %1457 = add i64 %1443, 2
  %1458 = icmp ult i64 %1457, %1434
  %1459 = and i1 %1458, %1454
  br i1 %1459, label %1441, label %1460

; <label>:1460:                                   ; preds = %1441
  %1461 = add nuw i64 %1440, 1
  %1462 = shl i16 %1439, 1
  %1463 = icmp eq i64 %1461, %1201
  br i1 %1463, label %1613, label %1437

; <label>:1464:                                   ; preds = %1336
  %1465 = icmp ne i64 %1197, 0
  %1466 = icmp ne i64 %1201, 0
  %1467 = and i1 %1466, %1465
  br i1 %1467, label %1468, label %1471

; <label>:1468:                                   ; preds = %1464
  %1469 = and i64 %1337, 1
  %1470 = icmp ne i64 %1469, 0
  br label %1476

; <label>:1471:                                   ; preds = %1464
  br i1 %1465, label %1476, label %1472

; <label>:1472:                                   ; preds = %1471
  %1473 = xor i1 %1466, true
  %1474 = zext i1 %1473 to i16
  %1475 = icmp ugt i64 %1201, 1
  br label %1483

; <label>:1476:                                   ; preds = %1471, %1468
  %1477 = phi i1 [ false, %1471 ], [ %1470, %1468 ]
  %1478 = zext i1 %1477 to i16
  %1479 = icmp ugt i64 %1197, 1
  %1480 = icmp ugt i64 %1201, 1
  %1481 = and i1 %1480, %1479
  br i1 %1481, label %1489, label %1482

; <label>:1482:                                   ; preds = %1476
  br i1 %1479, label %1494, label %1483

; <label>:1483:                                   ; preds = %1482, %1472
  %1484 = phi i16 [ %1474, %1472 ], [ %1478, %1482 ]
  %1485 = phi i1 [ %1475, %1472 ], [ %1480, %1482 ]
  %1486 = select i1 %1485, i16 0, i16 2
  %1487 = or i16 %1486, %1484
  %1488 = icmp ugt i64 %1201, 2
  br label %1500

; <label>:1489:                                   ; preds = %1476
  %1490 = trunc i64 %1337 to i16
  %1491 = lshr i16 %1490, 8
  %1492 = and i16 %1491, 2
  %1493 = or i16 %1478, %1492
  br label %1494

; <label>:1494:                                   ; preds = %1489, %1482
  %1495 = phi i16 [ %1478, %1482 ], [ %1493, %1489 ]
  %1496 = icmp ugt i64 %1197, 2
  %1497 = icmp ugt i64 %1201, 2
  %1498 = and i1 %1497, %1496
  br i1 %1498, label %1506, label %1499

; <label>:1499:                                   ; preds = %1494
  br i1 %1496, label %1511, label %1500

; <label>:1500:                                   ; preds = %1499, %1483
  %1501 = phi i16 [ %1487, %1483 ], [ %1495, %1499 ]
  %1502 = phi i1 [ %1488, %1483 ], [ %1497, %1499 ]
  %1503 = select i1 %1502, i16 0, i16 4
  %1504 = or i16 %1503, %1501
  %1505 = icmp ugt i64 %1201, 3
  br label %1517

; <label>:1506:                                   ; preds = %1494
  %1507 = and i64 %1337, 262144
  %1508 = icmp ne i64 %1507, 0
  %1509 = select i1 %1508, i16 4, i16 0
  %1510 = or i16 %1495, %1509
  br label %1511

; <label>:1511:                                   ; preds = %1506, %1499
  %1512 = phi i16 [ %1495, %1499 ], [ %1510, %1506 ]
  %1513 = icmp ugt i64 %1197, 3
  %1514 = icmp ugt i64 %1201, 3
  %1515 = and i1 %1514, %1513
  br i1 %1515, label %1523, label %1516

; <label>:1516:                                   ; preds = %1511
  br i1 %1513, label %1528, label %1517

; <label>:1517:                                   ; preds = %1516, %1500
  %1518 = phi i16 [ %1504, %1500 ], [ %1512, %1516 ]
  %1519 = phi i1 [ %1505, %1500 ], [ %1514, %1516 ]
  %1520 = select i1 %1519, i16 0, i16 8
  %1521 = or i16 %1520, %1518
  %1522 = icmp ugt i64 %1201, 4
  br label %1534

; <label>:1523:                                   ; preds = %1511
  %1524 = and i64 %1337, 134217728
  %1525 = icmp ne i64 %1524, 0
  %1526 = select i1 %1525, i16 8, i16 0
  %1527 = or i16 %1512, %1526
  br label %1528

; <label>:1528:                                   ; preds = %1523, %1516
  %1529 = phi i16 [ %1512, %1516 ], [ %1527, %1523 ]
  %1530 = icmp ugt i64 %1197, 4
  %1531 = icmp ugt i64 %1201, 4
  %1532 = and i1 %1531, %1530
  br i1 %1532, label %1540, label %1533

; <label>:1533:                                   ; preds = %1528
  br i1 %1530, label %1545, label %1534

; <label>:1534:                                   ; preds = %1533, %1517
  %1535 = phi i16 [ %1521, %1517 ], [ %1529, %1533 ]
  %1536 = phi i1 [ %1522, %1517 ], [ %1531, %1533 ]
  %1537 = select i1 %1536, i16 0, i16 16
  %1538 = or i16 %1537, %1535
  %1539 = icmp ugt i64 %1201, 5
  br label %1551

; <label>:1540:                                   ; preds = %1528
  %1541 = and i64 %1337, 68719476736
  %1542 = icmp ne i64 %1541, 0
  %1543 = select i1 %1542, i16 16, i16 0
  %1544 = or i16 %1529, %1543
  br label %1545

; <label>:1545:                                   ; preds = %1540, %1533
  %1546 = phi i16 [ %1529, %1533 ], [ %1544, %1540 ]
  %1547 = icmp ugt i64 %1197, 5
  %1548 = icmp ugt i64 %1201, 5
  %1549 = and i1 %1548, %1547
  br i1 %1549, label %1557, label %1550

; <label>:1550:                                   ; preds = %1545
  br i1 %1547, label %1562, label %1551

; <label>:1551:                                   ; preds = %1550, %1534
  %1552 = phi i16 [ %1538, %1534 ], [ %1546, %1550 ]
  %1553 = phi i1 [ %1539, %1534 ], [ %1548, %1550 ]
  %1554 = select i1 %1553, i16 0, i16 32
  %1555 = or i16 %1554, %1552
  %1556 = icmp ugt i64 %1201, 6
  br label %1568

; <label>:1557:                                   ; preds = %1545
  %1558 = and i64 %1337, 35184372088832
  %1559 = icmp ne i64 %1558, 0
  %1560 = select i1 %1559, i16 32, i16 0
  %1561 = or i16 %1546, %1560
  br label %1562

; <label>:1562:                                   ; preds = %1557, %1550
  %1563 = phi i16 [ %1546, %1550 ], [ %1561, %1557 ]
  %1564 = icmp ugt i64 %1197, 6
  %1565 = icmp ugt i64 %1201, 6
  %1566 = and i1 %1565, %1564
  br i1 %1566, label %1574, label %1567

; <label>:1567:                                   ; preds = %1562
  br i1 %1564, label %1579, label %1568

; <label>:1568:                                   ; preds = %1567, %1551
  %1569 = phi i16 [ %1555, %1551 ], [ %1563, %1567 ]
  %1570 = phi i1 [ %1556, %1551 ], [ %1565, %1567 ]
  %1571 = select i1 %1570, i16 0, i16 64
  %1572 = or i16 %1571, %1569
  %1573 = icmp ugt i64 %1201, 7
  br label %1585

; <label>:1574:                                   ; preds = %1562
  %1575 = and i64 %1337, 18014398509481984
  %1576 = icmp ne i64 %1575, 0
  %1577 = select i1 %1576, i16 64, i16 0
  %1578 = or i16 %1563, %1577
  br label %1579

; <label>:1579:                                   ; preds = %1574, %1567
  %1580 = phi i16 [ %1563, %1567 ], [ %1578, %1574 ]
  %1581 = icmp ugt i64 %1197, 7
  %1582 = icmp ugt i64 %1201, 7
  %1583 = and i1 %1582, %1581
  br i1 %1583, label %1590, label %1584

; <label>:1584:                                   ; preds = %1579
  br i1 %1581, label %1614, label %1585

; <label>:1585:                                   ; preds = %1584, %1568
  %1586 = phi i16 [ %1572, %1568 ], [ %1580, %1584 ]
  %1587 = phi i1 [ %1573, %1568 ], [ %1582, %1584 ]
  %1588 = select i1 %1587, i16 0, i16 128
  %1589 = or i16 %1588, %1586
  br label %1614

; <label>:1590:                                   ; preds = %1579
  %1591 = icmp slt i64 %1337, 0
  %1592 = select i1 %1591, i16 128, i16 0
  %1593 = or i16 %1580, %1592
  br label %1614

; <label>:1594:                                   ; preds = %1336
  %1595 = icmp ugt i64 %1197, %1201
  br i1 %1595, label %1614, label %1596

; <label>:1596:                                   ; preds = %1594
  %1597 = icmp eq i64 %1197, 0
  br i1 %1597, label %1614, label %1598

; <label>:1598:                                   ; preds = %1596
  br label %1599

; <label>:1599:                                   ; preds = %1598
  br label %1600

; <label>:1600:                                   ; preds = %1599
  %1601 = icmp eq i64 %1201, 0
  br i1 %1601, label %1607, label %1602

; <label>:1602:                                   ; preds = %1600
  %1603 = and i64 %1337, 1
  %1604 = icmp eq i64 %1603, 0
  br i1 %1604, label %1607, label %1605

; <label>:1605:                                   ; preds = %1602
  %1606 = icmp ugt i64 %1197, 1
  br i1 %1606, label %3350, label %1608

; <label>:1607:                                   ; preds = %3394, %3392, %3387, %3385, %3380, %3378, %3373, %3371, %3366, %3364, %3359, %3357, %3352, %3350, %1602, %1600
  br label %1609

; <label>:1608:                                   ; preds = %3396, %3390, %3383, %3376, %3369, %3362, %3355, %1605
  br label %1609

; <label>:1609:                                   ; preds = %1608, %1607
  %1610 = phi i16 [ 254, %1607 ], [ 255, %1608 ]
  br label %3397

; <label>:1611:                                   ; preds = %1336
  unreachable

; <label>:1612:                                   ; preds = %1426
  br label %1614

; <label>:1613:                                   ; preds = %1460
  br label %1614

; <label>:1614:                                   ; preds = %3703, %1613, %1612, %1596, %1594, %1590, %1585, %1584, %1433, %1431, %1403
  %1615 = phi i64 [ %1197, %1403 ], [ %1197, %1431 ], [ 1, %1433 ], [ %1197, %1584 ], [ %1197, %1590 ], [ %1197, %1585 ], [ %1197, %1594 ], [ 0, %1596 ], [ %1197, %1612 ], [ %1197, %1613 ], [ %1197, %3703 ]
  %1616 = phi i16 [ 0, %1403 ], [ 0, %1431 ], [ 0, %1433 ], [ %1580, %1584 ], [ %1593, %1590 ], [ %1589, %1585 ], [ 0, %1594 ], [ 255, %1596 ], [ %1427, %1612 ], [ %1456, %1613 ], [ %3704, %3703 ]
  %1617 = trunc i8 %1202 to i2
  switch i2 %1617, label %1625 [
    i2 0, label %1626
    i2 1, label %1620
    i2 -2, label %1626
    i2 -1, label %1618
  ]

; <label>:1618:                                   ; preds = %1614
  %1619 = icmp eq i64 %1201, 0
  br i1 %1619, label %1626, label %1622

; <label>:1620:                                   ; preds = %1614
  %1621 = xor i16 %1616, 255
  br label %1626

; <label>:1622:                                   ; preds = %1618
  %1623 = xor i16 %1616, 1
  %1624 = icmp eq i64 %1201, 1
  br i1 %1624, label %1626, label %1644

; <label>:1625:                                   ; preds = %1614
  unreachable

; <label>:1626:                                   ; preds = %1659, %1656, %1653, %1650, %1647, %1644, %1622, %1620, %1618, %1614, %1614
  %1627 = phi i16 [ %1621, %1620 ], [ %1616, %1614 ], [ %1616, %1614 ], [ %1657, %1656 ], [ %1654, %1653 ], [ %1651, %1650 ], [ %1648, %1647 ], [ %1645, %1644 ], [ %1623, %1622 ], [ %1616, %1618 ], [ %1662, %1659 ]
  %1628 = and i8 %12, 64
  %1629 = icmp eq i8 %1628, 0
  %1630 = icmp eq i16 %1627, 0
  br i1 %1629, label %1631, label %1636

; <label>:1631:                                   ; preds = %1626
  br i1 %1630, label %1663, label %1632

; <label>:1632:                                   ; preds = %1631
  %1633 = zext i16 %1627 to i32
  %1634 = tail call i32 @llvm.cttz.i32(i32 %1633, i1 true) 
  %1635 = zext i32 %1634 to i64
  br label %1663

; <label>:1636:                                   ; preds = %1626
  br i1 %1630, label %1663, label %1637

; <label>:1637:                                   ; preds = %1636
  %1638 = zext i16 %1627 to i32
  %1639 = tail call i32 @llvm.ctlz.i32(i32 %1638, i1 true) 
  %1640 = add nuw nsw i32 %1639, 65512
  %1641 = and i32 %1640, 65535
  %1642 = zext i32 %1641 to i64
  %1643 = sub nsw i64 7, %1642
  br label %1663

; <label>:1644:                                   ; preds = %1622
  %1645 = xor i16 %1616, 3
  %1646 = icmp ugt i64 %1201, 2
  br i1 %1646, label %1647, label %1626

; <label>:1647:                                   ; preds = %1644
  %1648 = xor i16 %1616, 7
  %1649 = icmp eq i64 %1201, 3
  br i1 %1649, label %1626, label %1650

; <label>:1650:                                   ; preds = %1647
  %1651 = xor i16 %1616, 15
  %1652 = icmp ugt i64 %1201, 4
  br i1 %1652, label %1653, label %1626

; <label>:1653:                                   ; preds = %1650
  %1654 = xor i16 %1616, 31
  %1655 = icmp eq i64 %1201, 5
  br i1 %1655, label %1626, label %1656

; <label>:1656:                                   ; preds = %1653
  %1657 = xor i16 %1616, 63
  %1658 = icmp ugt i64 %1201, 6
  br i1 %1658, label %1659, label %1626

; <label>:1659:                                   ; preds = %1656
  %1660 = icmp ne i64 %1201, 7
  %1661 = select i1 %1660, i16 255, i16 127
  %1662 = xor i16 %1616, %1661
  br label %1626

; <label>:1663:                                   ; preds = %1637, %1636, %1632, %1631
  %1664 = phi i64 [ %1643, %1637 ], [ 8, %1636 ], [ %1635, %1632 ], [ 8, %1631 ]
  %1665 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 5, i32 0, i32 0
  %1666 = and i64 %1664, 65535
  store i64 %1666, i64* %1665, align 8
  %1667 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  %1668 = icmp ne i16 %1627, 0
  %1669 = zext i1 %1668 to i8
  store i8 %1669, i8* %1667, align 1
  %1670 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  %1671 = icmp ult i64 %1201, 8
  %1672 = zext i1 %1671 to i8
  store i8 %1672, i8* %1670, align 1
  %1673 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  %1674 = icmp ult i64 %1615, 8
  %1675 = zext i1 %1674 to i8
  store i8 %1675, i8* %1673, align 1
  %1676 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  %1677 = trunc i16 %1627 to i8
  %1678 = and i8 %1677, 1
  store i8 %1678, i8* %1676, align 1
  %1679 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 0, i8* %1679, align 1
  %1680 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 0, i8* %1680, align 1
  call void @llvm.lifetime.end(i64 16, i8* nonnull %1104) 
  br label %3349

; <label>:1681:                                   ; preds = %5
  %1682 = bitcast <2 x i64>* %10 to { i64, i64 }*
  %1683 = bitcast <2 x i64>* %10 to %struct.uint8v16_t*
  %1684 = bitcast <2 x i64>* %10 to i8*
  call void @llvm.lifetime.start(i64 16, i8* nonnull %1684) 
  %1685 = bitcast i8* %2 to <2 x i64>*
  %1686 = load <2 x i64>, <2 x i64>* %1685, align 1
  %1687 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %1682, i64 0, i32 1
  store <2 x i64> %1686, <2 x i64>* %10, align 16
  %1688 = inttoptr i64 %3 to i8*
  %1689 = load i8, i8* %1688
  %1690 = add i64 %3, 1
  %1691 = inttoptr i64 %1690 to i8*
  %1692 = load i8, i8* %1691
  %1693 = add i64 %3, 2
  %1694 = inttoptr i64 %1693 to i8*
  %1695 = load i8, i8* %1694
  %1696 = add i64 %3, 3
  %1697 = inttoptr i64 %1696 to i8*
  %1698 = load i8, i8* %1697
  %1699 = add i64 %3, 4
  %1700 = inttoptr i64 %1699 to i8*
  %1701 = load i8, i8* %1700
  %1702 = add i64 %3, 5
  %1703 = inttoptr i64 %1702 to i8*
  %1704 = load i8, i8* %1703
  %1705 = add i64 %3, 6
  %1706 = inttoptr i64 %1705 to i8*
  %1707 = load i8, i8* %1706
  %1708 = add i64 %3, 7
  %1709 = inttoptr i64 %1708 to i8*
  %1710 = load i8, i8* %1709
  %1711 = add i64 %3, 8
  %1712 = inttoptr i64 %1711 to i8*
  %1713 = load i8, i8* %1712
  %1714 = add i64 %3, 9
  %1715 = inttoptr i64 %1714 to i8*
  %1716 = load i8, i8* %1715
  %1717 = add i64 %3, 10
  %1718 = inttoptr i64 %1717 to i8*
  %1719 = load i8, i8* %1718
  %1720 = add i64 %3, 11
  %1721 = inttoptr i64 %1720 to i8*
  %1722 = load i8, i8* %1721
  %1723 = add i64 %3, 12
  %1724 = inttoptr i64 %1723 to i8*
  %1725 = load i8, i8* %1724
  %1726 = add i64 %3, 13
  %1727 = inttoptr i64 %1726 to i8*
  %1728 = load i8, i8* %1727
  %1729 = add i64 %3, 14
  %1730 = inttoptr i64 %1729 to i8*
  %1731 = load i8, i8* %1730
  %1732 = add i64 %3, 15
  %1733 = inttoptr i64 %1732 to i8*
  %1734 = load i8, i8* %1733
  %1735 = bitcast %"class.(anonymous namespace)::BitMatrix"* %6 to i8*
  call void @llvm.lifetime.start(i64 288, i8* nonnull %1735) 
  call void @llvm.memset.p0i8.i64(i8* nonnull %1735, i8 0, i64 32, i32 8, i1 false) 
  %1736 = lshr i8 %12, 2
  %1737 = extractelement <2 x i64> %1686, i32 0
  %1738 = trunc i64 %1737 to i8
  %1739 = icmp eq i8 %1738, 0
  %1740 = select i1 %1739, i64 0, i64 16
  %1741 = icmp eq i8 %1689, 0
  %1742 = select i1 %1741, i64 0, i64 16
  %1743 = and i64 %1737, 65280
  %1744 = icmp eq i64 %1743, 0
  %1745 = xor i1 %1739, true
  %1746 = and i1 %1744, %1745
  %1747 = select i1 %1746, i64 1, i64 %1740
  %1748 = icmp eq i8 %1692, 0
  %1749 = xor i1 %1741, true
  %1750 = and i1 %1748, %1749
  %1751 = select i1 %1750, i64 1, i64 %1742
  %1752 = and i64 %1737, 16711680
  %1753 = icmp eq i64 %1752, 0
  %1754 = icmp ugt i64 %1747, 2
  %1755 = and i1 %1753, %1754
  %1756 = select i1 %1755, i64 2, i64 %1747
  %1757 = icmp eq i8 %1695, 0
  %1758 = icmp ugt i64 %1751, 2
  %1759 = and i1 %1757, %1758
  %1760 = select i1 %1759, i64 2, i64 %1751
  %1761 = and i64 %1737, 4278190080
  %1762 = icmp eq i64 %1761, 0
  %1763 = icmp ugt i64 %1756, 3
  %1764 = and i1 %1762, %1763
  %1765 = select i1 %1764, i64 3, i64 %1756
  %1766 = icmp eq i8 %1698, 0
  %1767 = icmp ugt i64 %1760, 3
  %1768 = and i1 %1766, %1767
  %1769 = select i1 %1768, i64 3, i64 %1760
  %1770 = and i64 %1737, 1095216660480
  %1771 = icmp eq i64 %1770, 0
  %1772 = icmp ugt i64 %1765, 4
  %1773 = and i1 %1771, %1772
  %1774 = select i1 %1773, i64 4, i64 %1765
  %1775 = icmp eq i8 %1701, 0
  %1776 = icmp ugt i64 %1769, 4
  %1777 = and i1 %1775, %1776
  %1778 = select i1 %1777, i64 4, i64 %1769
  %1779 = and i64 %1737, 280375465082880
  %1780 = icmp eq i64 %1779, 0
  %1781 = icmp ugt i64 %1774, 5
  %1782 = and i1 %1780, %1781
  %1783 = select i1 %1782, i64 5, i64 %1774
  %1784 = icmp eq i8 %1704, 0
  %1785 = icmp ugt i64 %1778, 5
  %1786 = and i1 %1784, %1785
  %1787 = select i1 %1786, i64 5, i64 %1778
  %1788 = and i64 %1737, 71776119061217280
  %1789 = icmp eq i64 %1788, 0
  %1790 = icmp ugt i64 %1783, 6
  %1791 = and i1 %1789, %1790
  %1792 = select i1 %1791, i64 6, i64 %1783
  %1793 = icmp eq i8 %1707, 0
  %1794 = icmp ugt i64 %1787, 6
  %1795 = and i1 %1793, %1794
  %1796 = select i1 %1795, i64 6, i64 %1787
  %1797 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %1683, i64 0, i32 0, i64 7
  %1798 = load i8, i8* %1797, align 1
  %1799 = icmp eq i8 %1798, 0
  %1800 = icmp ugt i64 %1792, 7
  %1801 = and i1 %1799, %1800
  %1802 = select i1 %1801, i64 7, i64 %1792
  %1803 = icmp eq i8 %1710, 0
  %1804 = icmp ugt i64 %1796, 7
  %1805 = and i1 %1803, %1804
  %1806 = select i1 %1805, i64 7, i64 %1796
  %1807 = bitcast i64* %1687 to i8*
  %1808 = load i8, i8* %1807, align 8
  %1809 = icmp eq i8 %1808, 0
  %1810 = icmp ugt i64 %1802, 8
  %1811 = and i1 %1809, %1810
  %1812 = select i1 %1811, i64 8, i64 %1802
  %1813 = icmp eq i8 %1713, 0
  %1814 = icmp ugt i64 %1806, 8
  %1815 = and i1 %1813, %1814
  %1816 = select i1 %1815, i64 8, i64 %1806
  %1817 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %1683, i64 0, i32 0, i64 9
  %1818 = load i8, i8* %1817, align 1
  %1819 = icmp eq i8 %1818, 0
  %1820 = icmp ugt i64 %1812, 9
  %1821 = and i1 %1819, %1820
  %1822 = select i1 %1821, i64 9, i64 %1812
  %1823 = icmp eq i8 %1716, 0
  %1824 = icmp ugt i64 %1816, 9
  %1825 = and i1 %1823, %1824
  %1826 = select i1 %1825, i64 9, i64 %1816
  %1827 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %1683, i64 0, i32 0, i64 10
  %1828 = load i8, i8* %1827, align 2
  %1829 = icmp eq i8 %1828, 0
  %1830 = icmp ugt i64 %1822, 10
  %1831 = and i1 %1829, %1830
  %1832 = select i1 %1831, i64 10, i64 %1822
  %1833 = icmp eq i8 %1719, 0
  %1834 = icmp ugt i64 %1826, 10
  %1835 = and i1 %1833, %1834
  %1836 = select i1 %1835, i64 10, i64 %1826
  %1837 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %1683, i64 0, i32 0, i64 11
  %1838 = load i8, i8* %1837, align 1
  %1839 = icmp eq i8 %1838, 0
  %1840 = icmp ugt i64 %1832, 11
  %1841 = and i1 %1839, %1840
  %1842 = select i1 %1841, i64 11, i64 %1832
  %1843 = icmp eq i8 %1722, 0
  %1844 = icmp ugt i64 %1836, 11
  %1845 = and i1 %1843, %1844
  %1846 = select i1 %1845, i64 11, i64 %1836
  %1847 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %1683, i64 0, i32 0, i64 12
  %1848 = load i8, i8* %1847, align 4
  %1849 = icmp eq i8 %1848, 0
  %1850 = icmp ugt i64 %1842, 12
  %1851 = and i1 %1849, %1850
  %1852 = select i1 %1851, i64 12, i64 %1842
  %1853 = icmp eq i8 %1725, 0
  %1854 = icmp ugt i64 %1846, 12
  %1855 = and i1 %1853, %1854
  %1856 = select i1 %1855, i64 12, i64 %1846
  %1857 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %1683, i64 0, i32 0, i64 13
  %1858 = load i8, i8* %1857, align 1
  %1859 = icmp eq i8 %1858, 0
  %1860 = icmp ugt i64 %1852, 13
  %1861 = and i1 %1859, %1860
  %1862 = select i1 %1861, i64 13, i64 %1852
  %1863 = icmp eq i8 %1728, 0
  %1864 = icmp ugt i64 %1856, 13
  %1865 = and i1 %1863, %1864
  %1866 = select i1 %1865, i64 13, i64 %1856
  %1867 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %1683, i64 0, i32 0, i64 14
  %1868 = load i8, i8* %1867, align 2
  %1869 = icmp eq i8 %1868, 0
  %1870 = icmp ugt i64 %1862, 14
  %1871 = and i1 %1869, %1870
  %1872 = select i1 %1871, i64 14, i64 %1862
  %1873 = icmp eq i8 %1731, 0
  %1874 = icmp ugt i64 %1866, 14
  %1875 = and i1 %1873, %1874
  %1876 = select i1 %1875, i64 14, i64 %1866
  %1877 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %1683, i64 0, i32 0, i64 15
  %1878 = load i8, i8* %1877, align 1
  %1879 = icmp eq i8 %1878, 0
  %1880 = icmp ugt i64 %1872, 15
  %1881 = and i1 %1879, %1880
  %1882 = icmp eq i8 %1734, 0
  %1883 = icmp ugt i64 %1876, 15
  %1884 = and i1 %1882, %1883
  %1885 = select i1 %1884, i64 15, i64 %1876
  %1886 = trunc i8 %1736 to i2
  %1887 = icmp eq i2 %1886, 1
  br label %1891

; <label>:1888:                                   ; preds = %1934
  %1889 = select i1 %1881, i64 15, i64 %1872
  %1890 = lshr i8 %12, 4
  switch i2 %1886, label %2462 [
    i2 0, label %2055
    i2 1, label %2086
    i2 -2, label %2127
    i2 -1, label %2422
  ]

; <label>:1891:                                   ; preds = %1934, %1681
  %1892 = phi i64 [ 0, %1681 ], [ %1940, %1934 ]
  %1893 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %1683, i64 0, i32 0, i64 %1892
  %1894 = load i8, i8* %1893, align 1
  %1895 = shl i64 %1892, 4
  br i1 %1887, label %1903, label %1896

; <label>:1896:                                   ; preds = %1891
  %1897 = icmp eq i8 %1894, %1689
  %1898 = lshr i64 %1892, 2
  %1899 = and i64 %1898, 288230376151711743
  %1900 = getelementptr inbounds %"class.(anonymous namespace)::BitMatrix", %"class.(anonymous namespace)::BitMatrix"* %6, i64 0, i32 0, i32 0, i32 0, i64 %1899
  %1901 = and i64 %1895, 48
  %1902 = shl i64 1, %1901
  br i1 %1897, label %1942, label %1945

; <label>:1903:                                   ; preds = %1891
  %1904 = and i64 %1892, 1
  %1905 = icmp eq i64 %1904, 0
  br i1 %1905, label %1920, label %1906

; <label>:1906:                                   ; preds = %1903
  %1907 = icmp sgt i8 %1689, %1894
  %1908 = lshr i64 %1892, 2
  %1909 = and i64 %1908, 288230376151711743
  %1910 = getelementptr inbounds %"class.(anonymous namespace)::BitMatrix", %"class.(anonymous namespace)::BitMatrix"* %6, i64 0, i32 0, i32 0, i32 0, i64 %1909
  %1911 = and i64 %1895, 48
  %1912 = shl i64 1, %1911
  br i1 %1907, label %1916, label %1913

; <label>:1913:                                   ; preds = %1906
  %1914 = load i64, i64* %1910, align 8
  %1915 = or i64 %1914, %1912
  br label %2539

; <label>:1916:                                   ; preds = %1906
  %1917 = xor i64 %1912, -1
  %1918 = load i64, i64* %1910, align 8
  %1919 = and i64 %1918, %1917
  br label %2539

; <label>:1920:                                   ; preds = %1903
  %1921 = icmp slt i8 %1689, %1894
  %1922 = lshr i64 %1892, 2
  %1923 = and i64 %1922, 288230376151711743
  %1924 = getelementptr inbounds %"class.(anonymous namespace)::BitMatrix", %"class.(anonymous namespace)::BitMatrix"* %6, i64 0, i32 0, i32 0, i32 0, i64 %1923
  %1925 = and i64 %1895, 48
  %1926 = shl i64 1, %1925
  br i1 %1921, label %1930, label %1927

; <label>:1927:                                   ; preds = %1920
  %1928 = load i64, i64* %1924, align 8
  %1929 = or i64 %1928, %1926
  br label %2645

; <label>:1930:                                   ; preds = %1920
  %1931 = xor i64 %1926, -1
  %1932 = load i64, i64* %1924, align 8
  %1933 = and i64 %1932, %1931
  br label %2645

; <label>:1934:                                   ; preds = %2645, %2539, %1949
  %1935 = phi i64 [ %2750, %2645 ], [ %2644, %2539 ], [ %2053, %1949 ]
  %1936 = phi i64 [ %2749, %2645 ], [ %2643, %2539 ], [ %2054, %1949 ]
  %1937 = phi i1 [ %2745, %2645 ], [ %2639, %2539 ], [ %2049, %1949 ]
  %1938 = phi i64* [ %1924, %2645 ], [ %1910, %2539 ], [ %1900, %1949 ]
  %1939 = select i1 %1937, i64 %1936, i64 %1935
  store i64 %1939, i64* %1938, align 8
  %1940 = add nuw nsw i64 %1892, 1
  %1941 = icmp eq i64 %1940, 16
  br i1 %1941, label %1888, label %1891

; <label>:1942:                                   ; preds = %1896
  %1943 = load i64, i64* %1900, align 8
  %1944 = or i64 %1943, %1902
  br label %1949

; <label>:1945:                                   ; preds = %1896
  %1946 = xor i64 %1902, -1
  %1947 = load i64, i64* %1900, align 8
  %1948 = and i64 %1947, %1946
  br label %1949

; <label>:1949:                                   ; preds = %1945, %1942
  %1950 = phi i64 [ %1948, %1945 ], [ %1944, %1942 ]
  %1951 = icmp eq i8 %1894, %1692
  %1952 = or i64 %1901, 1
  %1953 = shl i64 1, %1952
  %1954 = xor i64 %1953, -1
  %1955 = and i64 %1950, %1954
  %1956 = or i64 %1950, %1953
  %1957 = select i1 %1951, i64 %1956, i64 %1955
  %1958 = icmp eq i8 %1894, %1695
  %1959 = or i64 %1901, 2
  %1960 = shl i64 1, %1959
  %1961 = xor i64 %1960, -1
  %1962 = and i64 %1957, %1961
  %1963 = or i64 %1957, %1960
  %1964 = select i1 %1958, i64 %1963, i64 %1962
  %1965 = icmp eq i8 %1894, %1698
  %1966 = or i64 %1901, 3
  %1967 = shl i64 1, %1966
  %1968 = xor i64 %1967, -1
  %1969 = and i64 %1964, %1968
  %1970 = or i64 %1964, %1967
  %1971 = select i1 %1965, i64 %1970, i64 %1969
  %1972 = icmp eq i8 %1894, %1701
  %1973 = or i64 %1901, 4
  %1974 = shl i64 1, %1973
  %1975 = xor i64 %1974, -1
  %1976 = and i64 %1971, %1975
  %1977 = or i64 %1971, %1974
  %1978 = select i1 %1972, i64 %1977, i64 %1976
  %1979 = icmp eq i8 %1894, %1704
  %1980 = or i64 %1901, 5
  %1981 = shl i64 1, %1980
  %1982 = xor i64 %1981, -1
  %1983 = and i64 %1978, %1982
  %1984 = or i64 %1978, %1981
  %1985 = select i1 %1979, i64 %1984, i64 %1983
  %1986 = icmp eq i8 %1894, %1707
  %1987 = or i64 %1901, 6
  %1988 = shl i64 1, %1987
  %1989 = xor i64 %1988, -1
  %1990 = and i64 %1985, %1989
  %1991 = or i64 %1985, %1988
  %1992 = select i1 %1986, i64 %1991, i64 %1990
  %1993 = icmp eq i8 %1894, %1710
  %1994 = or i64 %1901, 7
  %1995 = shl i64 1, %1994
  %1996 = xor i64 %1995, -1
  %1997 = and i64 %1992, %1996
  %1998 = or i64 %1992, %1995
  %1999 = select i1 %1993, i64 %1998, i64 %1997
  %2000 = icmp eq i8 %1894, %1713
  %2001 = or i64 %1901, 8
  %2002 = shl i64 1, %2001
  %2003 = xor i64 %2002, -1
  %2004 = and i64 %1999, %2003
  %2005 = or i64 %1999, %2002
  %2006 = select i1 %2000, i64 %2005, i64 %2004
  %2007 = icmp eq i8 %1894, %1716
  %2008 = or i64 %1901, 9
  %2009 = shl i64 1, %2008
  %2010 = xor i64 %2009, -1
  %2011 = and i64 %2006, %2010
  %2012 = or i64 %2006, %2009
  %2013 = select i1 %2007, i64 %2012, i64 %2011
  %2014 = icmp eq i8 %1894, %1719
  %2015 = or i64 %1901, 10
  %2016 = shl i64 1, %2015
  %2017 = xor i64 %2016, -1
  %2018 = and i64 %2013, %2017
  %2019 = or i64 %2013, %2016
  %2020 = select i1 %2014, i64 %2019, i64 %2018
  %2021 = icmp eq i8 %1894, %1722
  %2022 = or i64 %1901, 11
  %2023 = shl i64 1, %2022
  %2024 = xor i64 %2023, -1
  %2025 = and i64 %2020, %2024
  %2026 = or i64 %2020, %2023
  %2027 = select i1 %2021, i64 %2026, i64 %2025
  %2028 = icmp eq i8 %1894, %1725
  %2029 = or i64 %1901, 12
  %2030 = shl i64 1, %2029
  %2031 = xor i64 %2030, -1
  %2032 = and i64 %2027, %2031
  %2033 = or i64 %2027, %2030
  %2034 = select i1 %2028, i64 %2033, i64 %2032
  %2035 = icmp eq i8 %1894, %1728
  %2036 = or i64 %1901, 13
  %2037 = shl i64 1, %2036
  %2038 = xor i64 %2037, -1
  %2039 = and i64 %2034, %2038
  %2040 = or i64 %2034, %2037
  %2041 = select i1 %2035, i64 %2040, i64 %2039
  %2042 = icmp eq i8 %1894, %1731
  %2043 = or i64 %1901, 14
  %2044 = shl i64 1, %2043
  %2045 = xor i64 %2044, -1
  %2046 = and i64 %2041, %2045
  %2047 = or i64 %2041, %2044
  %2048 = select i1 %2042, i64 %2047, i64 %2046
  store i64 %2048, i64* %1900, align 8
  %2049 = icmp eq i8 %1894, %1734
  %2050 = or i64 %1901, 15
  %2051 = shl i64 1, %2050
  %2052 = xor i64 %2051, -1
  %2053 = and i64 %2048, %2052
  %2054 = or i64 %2048, %2051
  br label %1934

; <label>:2055:                                   ; preds = %1888
  %2056 = icmp eq i64 %1885, 0
  %2057 = icmp eq i64 %1889, 0
  %2058 = or i1 %2056, %2057
  br i1 %2058, label %2466, label %2059

; <label>:2059:                                   ; preds = %2055
  br label %2060

; <label>:2060:                                   ; preds = %2081, %2059
  %2061 = phi i64 [ %2083, %2081 ], [ 0, %2059 ]
  %2062 = phi i16 [ %2084, %2081 ], [ 1, %2059 ]
  %2063 = phi i16 [ %2082, %2081 ], [ 0, %2059 ]
  br label %2066

; <label>:2064:                                   ; preds = %2066
  %2065 = icmp ult i64 %2077, %1889
  br i1 %2065, label %2066, label %2080

; <label>:2066:                                   ; preds = %2064, %2060
  %2067 = phi i64 [ 0, %2060 ], [ %2077, %2064 ]
  %2068 = shl i64 %2067, 4
  %2069 = add i64 %2068, %2061
  %2070 = lshr i64 %2069, 6
  %2071 = getelementptr inbounds %"class.(anonymous namespace)::BitMatrix", %"class.(anonymous namespace)::BitMatrix"* %6, i64 0, i32 0, i32 0, i32 0, i64 %2070
  %2072 = load i64, i64* %2071, align 8
  %2073 = and i64 %2069, 63
  %2074 = shl i64 1, %2073
  %2075 = and i64 %2074, %2072
  %2076 = icmp eq i64 %2075, 0
  %2077 = add nuw i64 %2067, 1
  br i1 %2076, label %2064, label %2078

; <label>:2078:                                   ; preds = %2066
  %2079 = or i16 %2063, %2062
  br label %2081

; <label>:2080:                                   ; preds = %2064
  br label %2081

; <label>:2081:                                   ; preds = %2080, %2078
  %2082 = phi i16 [ %2079, %2078 ], [ %2063, %2080 ]
  %2083 = add nuw i64 %2061, 1
  %2084 = shl i16 %2062, 1
  %2085 = icmp eq i64 %2083, %1885
  br i1 %2085, label %2463, label %2060

; <label>:2086:                                   ; preds = %1888
  %2087 = icmp eq i64 %1885, 0
  br i1 %2087, label %2466, label %2088

; <label>:2088:                                   ; preds = %2086
  %2089 = add i64 %1889, -1
  %2090 = icmp eq i64 %2089, 0
  br i1 %2090, label %2466, label %2091

; <label>:2091:                                   ; preds = %2088
  br label %2092

; <label>:2092:                                   ; preds = %2123, %2091
  %2093 = phi i16 [ %2119, %2123 ], [ 0, %2091 ]
  %2094 = phi i16 [ %2125, %2123 ], [ 1, %2091 ]
  %2095 = phi i64 [ %2124, %2123 ], [ 0, %2091 ]
  br label %2096

; <label>:2096:                                   ; preds = %2096, %2092
  %2097 = phi i16 [ %2093, %2092 ], [ %2119, %2096 ]
  %2098 = phi i64 [ 0, %2092 ], [ %2120, %2096 ]
  %2099 = shl i64 %2098, 4
  %2100 = add i64 %2099, %2095
  %2101 = lshr i64 %2100, 6
  %2102 = getelementptr inbounds %"class.(anonymous namespace)::BitMatrix", %"class.(anonymous namespace)::BitMatrix"* %6, i64 0, i32 0, i32 0, i32 0, i64 %2101
  %2103 = load i64, i64* %2102, align 8
  %2104 = and i64 %2100, 63
  %2105 = shl i64 1, %2104
  %2106 = and i64 %2105, %2103
  %2107 = or i64 %2099, 16
  %2108 = add i64 %2107, %2095
  %2109 = lshr i64 %2108, 6
  %2110 = getelementptr inbounds %"class.(anonymous namespace)::BitMatrix", %"class.(anonymous namespace)::BitMatrix"* %6, i64 0, i32 0, i32 0, i32 0, i64 %2109
  %2111 = load i64, i64* %2110, align 8
  %2112 = and i64 %2108, 63
  %2113 = shl i64 1, %2112
  %2114 = and i64 %2113, %2111
  %2115 = icmp eq i64 %2106, 0
  %2116 = icmp eq i64 %2114, 0
  %2117 = or i1 %2115, %2116
  %2118 = select i1 %2117, i16 0, i16 %2094
  %2119 = or i16 %2118, %2097
  %2120 = add i64 %2098, 2
  %2121 = icmp ult i64 %2120, %2089
  %2122 = and i1 %2121, %2117
  br i1 %2122, label %2096, label %2123

; <label>:2123:                                   ; preds = %2096
  %2124 = add nuw i64 %2095, 1
  %2125 = shl i16 %2094, 1
  %2126 = icmp eq i64 %2124, %1885
  br i1 %2126, label %2464, label %2092

; <label>:2127:                                   ; preds = %1888
  %2128 = icmp ne i64 %1889, 0
  %2129 = icmp ne i64 %1885, 0
  %2130 = and i1 %2129, %2128
  br i1 %2130, label %2131, label %2136

; <label>:2131:                                   ; preds = %2127
  %2132 = getelementptr inbounds %"class.(anonymous namespace)::BitMatrix", %"class.(anonymous namespace)::BitMatrix"* %6, i64 0, i32 0, i32 0, i32 0, i64 0
  %2133 = load i64, i64* %2132, align 8
  %2134 = and i64 %2133, 1
  %2135 = icmp ne i64 %2134, 0
  br label %2141

; <label>:2136:                                   ; preds = %2127
  br i1 %2128, label %2141, label %2137

; <label>:2137:                                   ; preds = %2136
  %2138 = xor i1 %2129, true
  %2139 = zext i1 %2138 to i16
  %2140 = icmp ugt i64 %1885, 1
  br label %2148

; <label>:2141:                                   ; preds = %2136, %2131
  %2142 = phi i1 [ false, %2136 ], [ %2135, %2131 ]
  %2143 = zext i1 %2142 to i16
  %2144 = icmp ugt i64 %1889, 1
  %2145 = icmp ugt i64 %1885, 1
  %2146 = and i1 %2145, %2144
  br i1 %2146, label %2154, label %2147

; <label>:2147:                                   ; preds = %2141
  br i1 %2144, label %2161, label %2148

; <label>:2148:                                   ; preds = %2147, %2137
  %2149 = phi i16 [ %2139, %2137 ], [ %2143, %2147 ]
  %2150 = phi i1 [ %2140, %2137 ], [ %2145, %2147 ]
  %2151 = select i1 %2150, i16 0, i16 2
  %2152 = or i16 %2151, %2149
  %2153 = icmp ugt i64 %1885, 2
  br label %2167

; <label>:2154:                                   ; preds = %2141
  %2155 = getelementptr inbounds %"class.(anonymous namespace)::BitMatrix", %"class.(anonymous namespace)::BitMatrix"* %6, i64 0, i32 0, i32 0, i32 0, i64 0
  %2156 = load i64, i64* %2155, align 8
  %2157 = and i64 %2156, 131072
  %2158 = icmp ne i64 %2157, 0
  %2159 = select i1 %2158, i16 2, i16 0
  %2160 = or i16 %2159, %2143
  br label %2161

; <label>:2161:                                   ; preds = %2154, %2147
  %2162 = phi i16 [ %2143, %2147 ], [ %2160, %2154 ]
  %2163 = icmp ugt i64 %1889, 2
  %2164 = icmp ugt i64 %1885, 2
  %2165 = and i1 %2164, %2163
  br i1 %2165, label %2173, label %2166

; <label>:2166:                                   ; preds = %2161
  br i1 %2163, label %2180, label %2167

; <label>:2167:                                   ; preds = %2166, %2148
  %2168 = phi i16 [ %2152, %2148 ], [ %2162, %2166 ]
  %2169 = phi i1 [ %2153, %2148 ], [ %2164, %2166 ]
  %2170 = select i1 %2169, i16 0, i16 4
  %2171 = or i16 %2170, %2168
  %2172 = icmp ugt i64 %1885, 3
  br label %2186

; <label>:2173:                                   ; preds = %2161
  %2174 = getelementptr inbounds %"class.(anonymous namespace)::BitMatrix", %"class.(anonymous namespace)::BitMatrix"* %6, i64 0, i32 0, i32 0, i32 0, i64 0
  %2175 = load i64, i64* %2174, align 8
  %2176 = and i64 %2175, 17179869184
  %2177 = icmp ne i64 %2176, 0
  %2178 = select i1 %2177, i16 4, i16 0
  %2179 = or i16 %2178, %2162
  br label %2180

; <label>:2180:                                   ; preds = %2173, %2166
  %2181 = phi i16 [ %2162, %2166 ], [ %2179, %2173 ]
  %2182 = icmp ugt i64 %1889, 3
  %2183 = icmp ugt i64 %1885, 3
  %2184 = and i1 %2183, %2182
  br i1 %2184, label %2192, label %2185

; <label>:2185:                                   ; preds = %2180
  br i1 %2182, label %2199, label %2186

; <label>:2186:                                   ; preds = %2185, %2167
  %2187 = phi i16 [ %2171, %2167 ], [ %2181, %2185 ]
  %2188 = phi i1 [ %2172, %2167 ], [ %2183, %2185 ]
  %2189 = select i1 %2188, i16 0, i16 8
  %2190 = or i16 %2189, %2187
  %2191 = icmp ugt i64 %1885, 4
  br label %2205

; <label>:2192:                                   ; preds = %2180
  %2193 = getelementptr inbounds %"class.(anonymous namespace)::BitMatrix", %"class.(anonymous namespace)::BitMatrix"* %6, i64 0, i32 0, i32 0, i32 0, i64 0
  %2194 = load i64, i64* %2193, align 8
  %2195 = and i64 %2194, 2251799813685248
  %2196 = icmp ne i64 %2195, 0
  %2197 = select i1 %2196, i16 8, i16 0
  %2198 = or i16 %2197, %2181
  br label %2199

; <label>:2199:                                   ; preds = %2192, %2185
  %2200 = phi i16 [ %2181, %2185 ], [ %2198, %2192 ]
  %2201 = icmp ugt i64 %1889, 4
  %2202 = icmp ugt i64 %1885, 4
  %2203 = and i1 %2202, %2201
  br i1 %2203, label %2211, label %2204

; <label>:2204:                                   ; preds = %2199
  br i1 %2201, label %2217, label %2205

; <label>:2205:                                   ; preds = %2204, %2186
  %2206 = phi i16 [ %2190, %2186 ], [ %2200, %2204 ]
  %2207 = phi i1 [ %2191, %2186 ], [ %2202, %2204 ]
  %2208 = select i1 %2207, i16 0, i16 16
  %2209 = or i16 %2208, %2206
  %2210 = icmp ugt i64 %1885, 5
  br label %2223

; <label>:2211:                                   ; preds = %2199
  %2212 = getelementptr inbounds %"class.(anonymous namespace)::BitMatrix", %"class.(anonymous namespace)::BitMatrix"* %6, i64 0, i32 0, i32 0, i32 0, i64 1
  %2213 = load i64, i64* %2212, align 8
  %2214 = trunc i64 %2213 to i16
  %2215 = and i16 %2214, 16
  %2216 = or i16 %2215, %2200
  br label %2217

; <label>:2217:                                   ; preds = %2211, %2204
  %2218 = phi i16 [ %2200, %2204 ], [ %2216, %2211 ]
  %2219 = icmp ugt i64 %1889, 5
  %2220 = icmp ugt i64 %1885, 5
  %2221 = and i1 %2220, %2219
  br i1 %2221, label %2229, label %2222

; <label>:2222:                                   ; preds = %2217
  br i1 %2219, label %2236, label %2223

; <label>:2223:                                   ; preds = %2222, %2205
  %2224 = phi i16 [ %2209, %2205 ], [ %2218, %2222 ]
  %2225 = phi i1 [ %2210, %2205 ], [ %2220, %2222 ]
  %2226 = select i1 %2225, i16 0, i16 32
  %2227 = or i16 %2226, %2224
  %2228 = icmp ugt i64 %1885, 6
  br label %2242

; <label>:2229:                                   ; preds = %2217
  %2230 = getelementptr inbounds %"class.(anonymous namespace)::BitMatrix", %"class.(anonymous namespace)::BitMatrix"* %6, i64 0, i32 0, i32 0, i32 0, i64 1
  %2231 = load i64, i64* %2230, align 8
  %2232 = and i64 %2231, 2097152
  %2233 = icmp ne i64 %2232, 0
  %2234 = select i1 %2233, i16 32, i16 0
  %2235 = or i16 %2234, %2218
  br label %2236

; <label>:2236:                                   ; preds = %2229, %2222
  %2237 = phi i16 [ %2218, %2222 ], [ %2235, %2229 ]
  %2238 = icmp ugt i64 %1889, 6
  %2239 = icmp ugt i64 %1885, 6
  %2240 = and i1 %2239, %2238
  br i1 %2240, label %2248, label %2241

; <label>:2241:                                   ; preds = %2236
  br i1 %2238, label %2255, label %2242

; <label>:2242:                                   ; preds = %2241, %2223
  %2243 = phi i16 [ %2227, %2223 ], [ %2237, %2241 ]
  %2244 = phi i1 [ %2228, %2223 ], [ %2239, %2241 ]
  %2245 = select i1 %2244, i16 0, i16 64
  %2246 = or i16 %2245, %2243
  %2247 = icmp ugt i64 %1885, 7
  br label %2261

; <label>:2248:                                   ; preds = %2236
  %2249 = getelementptr inbounds %"class.(anonymous namespace)::BitMatrix", %"class.(anonymous namespace)::BitMatrix"* %6, i64 0, i32 0, i32 0, i32 0, i64 1
  %2250 = load i64, i64* %2249, align 8
  %2251 = and i64 %2250, 274877906944
  %2252 = icmp ne i64 %2251, 0
  %2253 = select i1 %2252, i16 64, i16 0
  %2254 = or i16 %2253, %2237
  br label %2255

; <label>:2255:                                   ; preds = %2248, %2241
  %2256 = phi i16 [ %2237, %2241 ], [ %2254, %2248 ]
  %2257 = icmp ugt i64 %1889, 7
  %2258 = icmp ugt i64 %1885, 7
  %2259 = and i1 %2258, %2257
  br i1 %2259, label %2267, label %2260

; <label>:2260:                                   ; preds = %2255
  br i1 %2257, label %2274, label %2261

; <label>:2261:                                   ; preds = %2260, %2242
  %2262 = phi i16 [ %2246, %2242 ], [ %2256, %2260 ]
  %2263 = phi i1 [ %2247, %2242 ], [ %2258, %2260 ]
  %2264 = select i1 %2263, i16 0, i16 128
  %2265 = or i16 %2264, %2262
  %2266 = icmp ugt i64 %1885, 8
  br label %2280

; <label>:2267:                                   ; preds = %2255
  %2268 = getelementptr inbounds %"class.(anonymous namespace)::BitMatrix", %"class.(anonymous namespace)::BitMatrix"* %6, i64 0, i32 0, i32 0, i32 0, i64 1
  %2269 = load i64, i64* %2268, align 8
  %2270 = and i64 %2269, 36028797018963968
  %2271 = icmp ne i64 %2270, 0
  %2272 = select i1 %2271, i16 128, i16 0
  %2273 = or i16 %2272, %2256
  br label %2274

; <label>:2274:                                   ; preds = %2267, %2260
  %2275 = phi i16 [ %2256, %2260 ], [ %2273, %2267 ]
  %2276 = icmp ugt i64 %1889, 8
  %2277 = icmp ugt i64 %1885, 8
  %2278 = and i1 %2277, %2276
  br i1 %2278, label %2286, label %2279

; <label>:2279:                                   ; preds = %2274
  br i1 %2276, label %2292, label %2280

; <label>:2280:                                   ; preds = %2279, %2261
  %2281 = phi i16 [ %2265, %2261 ], [ %2275, %2279 ]
  %2282 = phi i1 [ %2266, %2261 ], [ %2277, %2279 ]
  %2283 = select i1 %2282, i16 0, i16 256
  %2284 = or i16 %2283, %2281
  %2285 = icmp ugt i64 %1885, 9
  br label %2298

; <label>:2286:                                   ; preds = %2274
  %2287 = getelementptr inbounds %"class.(anonymous namespace)::BitMatrix", %"class.(anonymous namespace)::BitMatrix"* %6, i64 0, i32 0, i32 0, i32 0, i64 2
  %2288 = load i64, i64* %2287, align 8
  %2289 = trunc i64 %2288 to i16
  %2290 = and i16 %2289, 256
  %2291 = or i16 %2290, %2275
  br label %2292

; <label>:2292:                                   ; preds = %2286, %2279
  %2293 = phi i16 [ %2275, %2279 ], [ %2291, %2286 ]
  %2294 = icmp ugt i64 %1889, 9
  %2295 = icmp ugt i64 %1885, 9
  %2296 = and i1 %2295, %2294
  br i1 %2296, label %2304, label %2297

; <label>:2297:                                   ; preds = %2292
  br i1 %2294, label %2311, label %2298

; <label>:2298:                                   ; preds = %2297, %2280
  %2299 = phi i16 [ %2284, %2280 ], [ %2293, %2297 ]
  %2300 = phi i1 [ %2285, %2280 ], [ %2295, %2297 ]
  %2301 = select i1 %2300, i16 0, i16 512
  %2302 = or i16 %2299, %2301
  %2303 = icmp ugt i64 %1885, 10
  br label %2317

; <label>:2304:                                   ; preds = %2292
  %2305 = getelementptr inbounds %"class.(anonymous namespace)::BitMatrix", %"class.(anonymous namespace)::BitMatrix"* %6, i64 0, i32 0, i32 0, i32 0, i64 2
  %2306 = load i64, i64* %2305, align 8
  %2307 = and i64 %2306, 33554432
  %2308 = icmp ne i64 %2307, 0
  %2309 = select i1 %2308, i16 512, i16 0
  %2310 = or i16 %2309, %2293
  br label %2311

; <label>:2311:                                   ; preds = %2304, %2297
  %2312 = phi i16 [ %2293, %2297 ], [ %2310, %2304 ]
  %2313 = icmp ugt i64 %1889, 10
  %2314 = icmp ugt i64 %1885, 10
  %2315 = and i1 %2314, %2313
  br i1 %2315, label %2323, label %2316

; <label>:2316:                                   ; preds = %2311
  br i1 %2313, label %2330, label %2317

; <label>:2317:                                   ; preds = %2316, %2298
  %2318 = phi i16 [ %2302, %2298 ], [ %2312, %2316 ]
  %2319 = phi i1 [ %2303, %2298 ], [ %2314, %2316 ]
  %2320 = select i1 %2319, i16 0, i16 1024
  %2321 = or i16 %2320, %2318
  %2322 = icmp ugt i64 %1885, 11
  br label %2336

; <label>:2323:                                   ; preds = %2311
  %2324 = getelementptr inbounds %"class.(anonymous namespace)::BitMatrix", %"class.(anonymous namespace)::BitMatrix"* %6, i64 0, i32 0, i32 0, i32 0, i64 2
  %2325 = load i64, i64* %2324, align 8
  %2326 = and i64 %2325, 4398046511104
  %2327 = icmp ne i64 %2326, 0
  %2328 = select i1 %2327, i16 1024, i16 0
  %2329 = or i16 %2328, %2312
  br label %2330

; <label>:2330:                                   ; preds = %2323, %2316
  %2331 = phi i16 [ %2312, %2316 ], [ %2329, %2323 ]
  %2332 = icmp ugt i64 %1889, 11
  %2333 = icmp ugt i64 %1885, 11
  %2334 = and i1 %2333, %2332
  br i1 %2334, label %2342, label %2335

; <label>:2335:                                   ; preds = %2330
  br i1 %2332, label %2349, label %2336

; <label>:2336:                                   ; preds = %2335, %2317
  %2337 = phi i16 [ %2321, %2317 ], [ %2331, %2335 ]
  %2338 = phi i1 [ %2322, %2317 ], [ %2333, %2335 ]
  %2339 = select i1 %2338, i16 0, i16 2048
  %2340 = or i16 %2339, %2337
  %2341 = icmp ugt i64 %1885, 12
  br label %2355

; <label>:2342:                                   ; preds = %2330
  %2343 = getelementptr inbounds %"class.(anonymous namespace)::BitMatrix", %"class.(anonymous namespace)::BitMatrix"* %6, i64 0, i32 0, i32 0, i32 0, i64 2
  %2344 = load i64, i64* %2343, align 8
  %2345 = and i64 %2344, 576460752303423488
  %2346 = icmp ne i64 %2345, 0
  %2347 = select i1 %2346, i16 2048, i16 0
  %2348 = or i16 %2347, %2331
  br label %2349

; <label>:2349:                                   ; preds = %2342, %2335
  %2350 = phi i16 [ %2331, %2335 ], [ %2348, %2342 ]
  %2351 = icmp ugt i64 %1889, 12
  %2352 = icmp ugt i64 %1885, 12
  %2353 = and i1 %2352, %2351
  br i1 %2353, label %2361, label %2354

; <label>:2354:                                   ; preds = %2349
  br i1 %2351, label %2367, label %2355

; <label>:2355:                                   ; preds = %2354, %2336
  %2356 = phi i16 [ %2340, %2336 ], [ %2350, %2354 ]
  %2357 = phi i1 [ %2341, %2336 ], [ %2352, %2354 ]
  %2358 = select i1 %2357, i16 0, i16 4096
  %2359 = or i16 %2358, %2356
  %2360 = icmp ugt i64 %1885, 13
  br label %2373

; <label>:2361:                                   ; preds = %2349
  %2362 = getelementptr inbounds %"class.(anonymous namespace)::BitMatrix", %"class.(anonymous namespace)::BitMatrix"* %6, i64 0, i32 0, i32 0, i32 0, i64 3
  %2363 = load i64, i64* %2362, align 8
  %2364 = trunc i64 %2363 to i16
  %2365 = and i16 %2364, 4096
  %2366 = or i16 %2365, %2350
  br label %2367

; <label>:2367:                                   ; preds = %2361, %2354
  %2368 = phi i16 [ %2350, %2354 ], [ %2366, %2361 ]
  %2369 = icmp ugt i64 %1889, 13
  %2370 = icmp ugt i64 %1885, 13
  %2371 = and i1 %2370, %2369
  br i1 %2371, label %2379, label %2372

; <label>:2372:                                   ; preds = %2367
  br i1 %2369, label %2386, label %2373

; <label>:2373:                                   ; preds = %2372, %2355
  %2374 = phi i16 [ %2359, %2355 ], [ %2368, %2372 ]
  %2375 = phi i1 [ %2360, %2355 ], [ %2370, %2372 ]
  %2376 = select i1 %2375, i16 0, i16 8192
  %2377 = or i16 %2376, %2374
  %2378 = icmp ugt i64 %1885, 14
  br label %2392

; <label>:2379:                                   ; preds = %2367
  %2380 = getelementptr inbounds %"class.(anonymous namespace)::BitMatrix", %"class.(anonymous namespace)::BitMatrix"* %6, i64 0, i32 0, i32 0, i32 0, i64 3
  %2381 = load i64, i64* %2380, align 8
  %2382 = and i64 %2381, 536870912
  %2383 = icmp ne i64 %2382, 0
  %2384 = select i1 %2383, i16 8192, i16 0
  %2385 = or i16 %2384, %2368
  br label %2386

; <label>:2386:                                   ; preds = %2379, %2372
  %2387 = phi i16 [ %2368, %2372 ], [ %2385, %2379 ]
  %2388 = icmp ugt i64 %1889, 14
  %2389 = icmp ugt i64 %1885, 14
  %2390 = and i1 %2389, %2388
  br i1 %2390, label %2398, label %2391

; <label>:2391:                                   ; preds = %2386
  br i1 %2388, label %2405, label %2392

; <label>:2392:                                   ; preds = %2391, %2373
  %2393 = phi i16 [ %2377, %2373 ], [ %2387, %2391 ]
  %2394 = phi i1 [ %2378, %2373 ], [ %2389, %2391 ]
  %2395 = select i1 %2394, i16 0, i16 16384
  %2396 = or i16 %2395, %2393
  %2397 = icmp ugt i64 %1885, 15
  br label %2411

; <label>:2398:                                   ; preds = %2386
  %2399 = getelementptr inbounds %"class.(anonymous namespace)::BitMatrix", %"class.(anonymous namespace)::BitMatrix"* %6, i64 0, i32 0, i32 0, i32 0, i64 3
  %2400 = load i64, i64* %2399, align 8
  %2401 = and i64 %2400, 70368744177664
  %2402 = icmp ne i64 %2401, 0
  %2403 = select i1 %2402, i16 16384, i16 0
  %2404 = or i16 %2403, %2387
  br label %2405

; <label>:2405:                                   ; preds = %2398, %2391
  %2406 = phi i16 [ %2387, %2391 ], [ %2404, %2398 ]
  %2407 = icmp ugt i64 %1889, 15
  %2408 = icmp ugt i64 %1885, 15
  %2409 = and i1 %2408, %2407
  br i1 %2409, label %2416, label %2410

; <label>:2410:                                   ; preds = %2405
  br i1 %2407, label %2466, label %2411

; <label>:2411:                                   ; preds = %2410, %2392
  %2412 = phi i16 [ %2396, %2392 ], [ %2406, %2410 ]
  %2413 = phi i1 [ %2397, %2392 ], [ %2408, %2410 ]
  %2414 = select i1 %2413, i16 0, i16 -32768
  %2415 = or i16 %2414, %2412
  br label %2466

; <label>:2416:                                   ; preds = %2405
  %2417 = getelementptr inbounds %"class.(anonymous namespace)::BitMatrix", %"class.(anonymous namespace)::BitMatrix"* %6, i64 0, i32 0, i32 0, i32 0, i64 3
  %2418 = load i64, i64* %2417, align 8
  %2419 = icmp slt i64 %2418, 0
  %2420 = select i1 %2419, i16 -32768, i16 0
  %2421 = or i16 %2420, %2406
  br label %2466

; <label>:2422:                                   ; preds = %1888
  %2423 = icmp ugt i64 %1889, %1885
  br i1 %2423, label %2466, label %2424

; <label>:2424:                                   ; preds = %2422
  %2425 = icmp eq i64 %1889, 0
  br i1 %2425, label %2466, label %2426

; <label>:2426:                                   ; preds = %2424
  br label %2427

; <label>:2427:                                   ; preds = %2457, %2426
  %2428 = phi i16 [ %2458, %2457 ], [ -1, %2426 ]
  %2429 = phi i64 [ %2459, %2457 ], [ 0, %2426 ]
  %2430 = phi i16 [ %2460, %2457 ], [ 1, %2426 ]
  %2431 = sub nuw nsw i64 16, %2429
  br label %2432

; <label>:2432:                                   ; preds = %2446, %2427
  %2433 = phi i64 [ %2448, %2446 ], [ %2429, %2427 ]
  %2434 = phi i64 [ %2447, %2446 ], [ 0, %2427 ]
  %2435 = icmp ult i64 %2433, %1885
  br i1 %2435, label %2436, label %2454

; <label>:2436:                                   ; preds = %2432
  %2437 = shl i64 %2434, 4
  %2438 = add nuw nsw i64 %2437, %2433
  %2439 = lshr i64 %2438, 6
  %2440 = getelementptr inbounds %"class.(anonymous namespace)::BitMatrix", %"class.(anonymous namespace)::BitMatrix"* %6, i64 0, i32 0, i32 0, i32 0, i64 %2439
  %2441 = load i64, i64* %2440, align 8
  %2442 = and i64 %2438, 63
  %2443 = shl i64 1, %2442
  %2444 = and i64 %2441, %2443
  %2445 = icmp eq i64 %2444, 0
  br i1 %2445, label %2454, label %2446

; <label>:2446:                                   ; preds = %2436
  %2447 = add nuw nsw i64 %2434, 1
  %2448 = add nuw nsw i64 %2433, 1
  %2449 = icmp ult i64 %2447, %2431
  %2450 = icmp ult i64 %2448, 16
  %2451 = and i1 %2450, %2449
  %2452 = icmp ult i64 %2447, %1889
  %2453 = and i1 %2452, %2451
  br i1 %2453, label %2432, label %2456

; <label>:2454:                                   ; preds = %2436, %2432
  %2455 = xor i16 %2430, %2428
  br label %2457

; <label>:2456:                                   ; preds = %2446
  br label %2457

; <label>:2457:                                   ; preds = %2456, %2454
  %2458 = phi i16 [ %2455, %2454 ], [ %2428, %2456 ]
  %2459 = add nuw nsw i64 %2429, 1
  %2460 = shl i16 %2430, 1
  %2461 = icmp eq i64 %2459, 16
  br i1 %2461, label %2465, label %2427

; <label>:2462:                                   ; preds = %1888
  unreachable

; <label>:2463:                                   ; preds = %2081
  br label %2466

; <label>:2464:                                   ; preds = %2123
  br label %2466

; <label>:2465:                                   ; preds = %2457
  br label %2466

; <label>:2466:                                   ; preds = %2465, %2464, %2463, %2424, %2422, %2416, %2411, %2410, %2088, %2086, %2055
  %2467 = phi i64 [ %1889, %2055 ], [ %1889, %2086 ], [ 1, %2088 ], [ %1889, %2410 ], [ %1889, %2416 ], [ %1889, %2411 ], [ %1889, %2422 ], [ 0, %2424 ], [ %1889, %2463 ], [ %1889, %2464 ], [ %1889, %2465 ]
  %2468 = phi i16 [ 0, %2055 ], [ 0, %2086 ], [ 0, %2088 ], [ %2406, %2410 ], [ %2421, %2416 ], [ %2415, %2411 ], [ 0, %2422 ], [ -1, %2424 ], [ %2082, %2463 ], [ %2119, %2464 ], [ %2458, %2465 ]
  %2469 = trunc i8 %1890 to i2
  switch i2 %2469, label %2477 [
    i2 0, label %2478
    i2 1, label %2472
    i2 -2, label %2478
    i2 -1, label %2470
  ]

; <label>:2470:                                   ; preds = %2466
  %2471 = icmp eq i64 %1885, 0
  br i1 %2471, label %2478, label %2474

; <label>:2472:                                   ; preds = %2466
  %2473 = xor i16 %2468, -1
  br label %2478

; <label>:2474:                                   ; preds = %2470
  %2475 = xor i16 %2468, 1
  %2476 = icmp eq i64 %1885, 1
  br i1 %2476, label %2478, label %2496

; <label>:2477:                                   ; preds = %2466
  unreachable

; <label>:2478:                                   ; preds = %2535, %2532, %2529, %2526, %2523, %2520, %2517, %2514, %2511, %2508, %2505, %2502, %2499, %2496, %2474, %2472, %2470, %2466, %2466
  %2479 = phi i16 [ %2473, %2472 ], [ %2468, %2466 ], [ %2468, %2466 ], [ %2533, %2532 ], [ %2530, %2529 ], [ %2527, %2526 ], [ %2524, %2523 ], [ %2521, %2520 ], [ %2518, %2517 ], [ %2515, %2514 ], [ %2512, %2511 ], [ %2509, %2508 ], [ %2506, %2505 ], [ %2503, %2502 ], [ %2500, %2499 ], [ %2497, %2496 ], [ %2475, %2474 ], [ %2468, %2470 ], [ %2538, %2535 ]
  %2480 = and i8 %12, 64
  %2481 = icmp eq i8 %2480, 0
  %2482 = icmp eq i16 %2479, 0
  br i1 %2481, label %2483, label %2488

; <label>:2483:                                   ; preds = %2478
  br i1 %2482, label %2751, label %2484

; <label>:2484:                                   ; preds = %2483
  %2485 = zext i16 %2479 to i32
  %2486 = tail call i32 @llvm.cttz.i32(i32 %2485, i1 true) 
  %2487 = zext i32 %2486 to i64
  br label %2751

; <label>:2488:                                   ; preds = %2478
  br i1 %2482, label %2751, label %2489

; <label>:2489:                                   ; preds = %2488
  %2490 = zext i16 %2479 to i32
  %2491 = tail call i32 @llvm.ctlz.i32(i32 %2490, i1 true) 
  %2492 = add nuw nsw i32 %2491, 65520
  %2493 = and i32 %2492, 65535
  %2494 = zext i32 %2493 to i64
  %2495 = sub nsw i64 15, %2494
  br label %2751

; <label>:2496:                                   ; preds = %2474
  %2497 = xor i16 %2468, 3
  %2498 = icmp ugt i64 %1885, 2
  br i1 %2498, label %2499, label %2478

; <label>:2499:                                   ; preds = %2496
  %2500 = xor i16 %2468, 7
  %2501 = icmp eq i64 %1885, 3
  br i1 %2501, label %2478, label %2502

; <label>:2502:                                   ; preds = %2499
  %2503 = xor i16 %2468, 15
  %2504 = icmp ugt i64 %1885, 4
  br i1 %2504, label %2505, label %2478

; <label>:2505:                                   ; preds = %2502
  %2506 = xor i16 %2468, 31
  %2507 = icmp eq i64 %1885, 5
  br i1 %2507, label %2478, label %2508

; <label>:2508:                                   ; preds = %2505
  %2509 = xor i16 %2468, 63
  %2510 = icmp ugt i64 %1885, 6
  br i1 %2510, label %2511, label %2478

; <label>:2511:                                   ; preds = %2508
  %2512 = xor i16 %2468, 127
  %2513 = icmp eq i64 %1885, 7
  br i1 %2513, label %2478, label %2514

; <label>:2514:                                   ; preds = %2511
  %2515 = xor i16 %2468, 255
  %2516 = icmp ugt i64 %1885, 8
  br i1 %2516, label %2517, label %2478

; <label>:2517:                                   ; preds = %2514
  %2518 = xor i16 %2468, 511
  %2519 = icmp eq i64 %1885, 9
  br i1 %2519, label %2478, label %2520

; <label>:2520:                                   ; preds = %2517
  %2521 = xor i16 %2468, 1023
  %2522 = icmp ugt i64 %1885, 10
  br i1 %2522, label %2523, label %2478

; <label>:2523:                                   ; preds = %2520
  %2524 = xor i16 %2468, 2047
  %2525 = icmp eq i64 %1885, 11
  br i1 %2525, label %2478, label %2526

; <label>:2526:                                   ; preds = %2523
  %2527 = xor i16 %2468, 4095
  %2528 = icmp ugt i64 %1885, 12
  br i1 %2528, label %2529, label %2478

; <label>:2529:                                   ; preds = %2526
  %2530 = xor i16 %2468, 8191
  %2531 = icmp eq i64 %1885, 13
  br i1 %2531, label %2478, label %2532

; <label>:2532:                                   ; preds = %2529
  %2533 = xor i16 %2468, 16383
  %2534 = icmp ugt i64 %1885, 14
  br i1 %2534, label %2535, label %2478

; <label>:2535:                                   ; preds = %2532
  %2536 = icmp ne i64 %1885, 15
  %2537 = select i1 %2536, i16 -1, i16 32767
  %2538 = xor i16 %2468, %2537
  br label %2478

; <label>:2539:                                   ; preds = %1916, %1913
  %2540 = phi i64 [ %1919, %1916 ], [ %1915, %1913 ]
  %2541 = icmp sgt i8 %1692, %1894
  %2542 = or i64 %1911, 1
  %2543 = shl i64 1, %2542
  %2544 = xor i64 %2543, -1
  %2545 = and i64 %2540, %2544
  %2546 = or i64 %2540, %2543
  %2547 = select i1 %2541, i64 %2545, i64 %2546
  %2548 = icmp sgt i8 %1695, %1894
  %2549 = or i64 %1911, 2
  %2550 = shl i64 1, %2549
  %2551 = xor i64 %2550, -1
  %2552 = and i64 %2547, %2551
  %2553 = or i64 %2547, %2550
  %2554 = select i1 %2548, i64 %2552, i64 %2553
  %2555 = icmp sgt i8 %1698, %1894
  %2556 = or i64 %1911, 3
  %2557 = shl i64 1, %2556
  %2558 = xor i64 %2557, -1
  %2559 = and i64 %2554, %2558
  %2560 = or i64 %2554, %2557
  %2561 = select i1 %2555, i64 %2559, i64 %2560
  %2562 = icmp sgt i8 %1701, %1894
  %2563 = or i64 %1911, 4
  %2564 = shl i64 1, %2563
  %2565 = xor i64 %2564, -1
  %2566 = and i64 %2561, %2565
  %2567 = or i64 %2561, %2564
  %2568 = select i1 %2562, i64 %2566, i64 %2567
  %2569 = icmp sgt i8 %1704, %1894
  %2570 = or i64 %1911, 5
  %2571 = shl i64 1, %2570
  %2572 = xor i64 %2571, -1
  %2573 = and i64 %2568, %2572
  %2574 = or i64 %2568, %2571
  %2575 = select i1 %2569, i64 %2573, i64 %2574
  %2576 = icmp sgt i8 %1707, %1894
  %2577 = or i64 %1911, 6
  %2578 = shl i64 1, %2577
  %2579 = xor i64 %2578, -1
  %2580 = and i64 %2575, %2579
  %2581 = or i64 %2575, %2578
  %2582 = select i1 %2576, i64 %2580, i64 %2581
  %2583 = icmp sgt i8 %1710, %1894
  %2584 = or i64 %1911, 7
  %2585 = shl i64 1, %2584
  %2586 = xor i64 %2585, -1
  %2587 = and i64 %2582, %2586
  %2588 = or i64 %2582, %2585
  %2589 = select i1 %2583, i64 %2587, i64 %2588
  %2590 = icmp sgt i8 %1713, %1894
  %2591 = or i64 %1911, 8
  %2592 = shl i64 1, %2591
  %2593 = xor i64 %2592, -1
  %2594 = and i64 %2589, %2593
  %2595 = or i64 %2589, %2592
  %2596 = select i1 %2590, i64 %2594, i64 %2595
  %2597 = icmp sgt i8 %1716, %1894
  %2598 = or i64 %1911, 9
  %2599 = shl i64 1, %2598
  %2600 = xor i64 %2599, -1
  %2601 = and i64 %2596, %2600
  %2602 = or i64 %2596, %2599
  %2603 = select i1 %2597, i64 %2601, i64 %2602
  %2604 = icmp sgt i8 %1719, %1894
  %2605 = or i64 %1911, 10
  %2606 = shl i64 1, %2605
  %2607 = xor i64 %2606, -1
  %2608 = and i64 %2603, %2607
  %2609 = or i64 %2603, %2606
  %2610 = select i1 %2604, i64 %2608, i64 %2609
  %2611 = icmp sgt i8 %1722, %1894
  %2612 = or i64 %1911, 11
  %2613 = shl i64 1, %2612
  %2614 = xor i64 %2613, -1
  %2615 = and i64 %2610, %2614
  %2616 = or i64 %2610, %2613
  %2617 = select i1 %2611, i64 %2615, i64 %2616
  %2618 = icmp sgt i8 %1725, %1894
  %2619 = or i64 %1911, 12
  %2620 = shl i64 1, %2619
  %2621 = xor i64 %2620, -1
  %2622 = and i64 %2617, %2621
  %2623 = or i64 %2617, %2620
  %2624 = select i1 %2618, i64 %2622, i64 %2623
  %2625 = icmp sgt i8 %1728, %1894
  %2626 = or i64 %1911, 13
  %2627 = shl i64 1, %2626
  %2628 = xor i64 %2627, -1
  %2629 = and i64 %2624, %2628
  %2630 = or i64 %2624, %2627
  %2631 = select i1 %2625, i64 %2629, i64 %2630
  %2632 = icmp sgt i8 %1731, %1894
  %2633 = or i64 %1911, 14
  %2634 = shl i64 1, %2633
  %2635 = xor i64 %2634, -1
  %2636 = and i64 %2631, %2635
  %2637 = or i64 %2631, %2634
  %2638 = select i1 %2632, i64 %2636, i64 %2637
  store i64 %2638, i64* %1910, align 8
  %2639 = icmp sgt i8 %1734, %1894
  %2640 = or i64 %1911, 15
  %2641 = shl i64 1, %2640
  %2642 = xor i64 %2641, -1
  %2643 = and i64 %2638, %2642
  %2644 = or i64 %2638, %2641
  br label %1934

; <label>:2645:                                   ; preds = %1930, %1927
  %2646 = phi i64 [ %1933, %1930 ], [ %1929, %1927 ]
  %2647 = icmp slt i8 %1692, %1894
  %2648 = or i64 %1925, 1
  %2649 = shl i64 1, %2648
  %2650 = xor i64 %2649, -1
  %2651 = and i64 %2646, %2650
  %2652 = or i64 %2646, %2649
  %2653 = select i1 %2647, i64 %2651, i64 %2652
  %2654 = icmp slt i8 %1695, %1894
  %2655 = or i64 %1925, 2
  %2656 = shl i64 1, %2655
  %2657 = xor i64 %2656, -1
  %2658 = and i64 %2653, %2657
  %2659 = or i64 %2653, %2656
  %2660 = select i1 %2654, i64 %2658, i64 %2659
  %2661 = icmp slt i8 %1698, %1894
  %2662 = or i64 %1925, 3
  %2663 = shl i64 1, %2662
  %2664 = xor i64 %2663, -1
  %2665 = and i64 %2660, %2664
  %2666 = or i64 %2660, %2663
  %2667 = select i1 %2661, i64 %2665, i64 %2666
  %2668 = icmp slt i8 %1701, %1894
  %2669 = or i64 %1925, 4
  %2670 = shl i64 1, %2669
  %2671 = xor i64 %2670, -1
  %2672 = and i64 %2667, %2671
  %2673 = or i64 %2667, %2670
  %2674 = select i1 %2668, i64 %2672, i64 %2673
  %2675 = icmp slt i8 %1704, %1894
  %2676 = or i64 %1925, 5
  %2677 = shl i64 1, %2676
  %2678 = xor i64 %2677, -1
  %2679 = and i64 %2674, %2678
  %2680 = or i64 %2674, %2677
  %2681 = select i1 %2675, i64 %2679, i64 %2680
  %2682 = icmp slt i8 %1707, %1894
  %2683 = or i64 %1925, 6
  %2684 = shl i64 1, %2683
  %2685 = xor i64 %2684, -1
  %2686 = and i64 %2681, %2685
  %2687 = or i64 %2681, %2684
  %2688 = select i1 %2682, i64 %2686, i64 %2687
  %2689 = icmp slt i8 %1710, %1894
  %2690 = or i64 %1925, 7
  %2691 = shl i64 1, %2690
  %2692 = xor i64 %2691, -1
  %2693 = and i64 %2688, %2692
  %2694 = or i64 %2688, %2691
  %2695 = select i1 %2689, i64 %2693, i64 %2694
  %2696 = icmp slt i8 %1713, %1894
  %2697 = or i64 %1925, 8
  %2698 = shl i64 1, %2697
  %2699 = xor i64 %2698, -1
  %2700 = and i64 %2695, %2699
  %2701 = or i64 %2695, %2698
  %2702 = select i1 %2696, i64 %2700, i64 %2701
  %2703 = icmp slt i8 %1716, %1894
  %2704 = or i64 %1925, 9
  %2705 = shl i64 1, %2704
  %2706 = xor i64 %2705, -1
  %2707 = and i64 %2702, %2706
  %2708 = or i64 %2702, %2705
  %2709 = select i1 %2703, i64 %2707, i64 %2708
  %2710 = icmp slt i8 %1719, %1894
  %2711 = or i64 %1925, 10
  %2712 = shl i64 1, %2711
  %2713 = xor i64 %2712, -1
  %2714 = and i64 %2709, %2713
  %2715 = or i64 %2709, %2712
  %2716 = select i1 %2710, i64 %2714, i64 %2715
  %2717 = icmp slt i8 %1722, %1894
  %2718 = or i64 %1925, 11
  %2719 = shl i64 1, %2718
  %2720 = xor i64 %2719, -1
  %2721 = and i64 %2716, %2720
  %2722 = or i64 %2716, %2719
  %2723 = select i1 %2717, i64 %2721, i64 %2722
  %2724 = icmp slt i8 %1725, %1894
  %2725 = or i64 %1925, 12
  %2726 = shl i64 1, %2725
  %2727 = xor i64 %2726, -1
  %2728 = and i64 %2723, %2727
  %2729 = or i64 %2723, %2726
  %2730 = select i1 %2724, i64 %2728, i64 %2729
  %2731 = icmp slt i8 %1728, %1894
  %2732 = or i64 %1925, 13
  %2733 = shl i64 1, %2732
  %2734 = xor i64 %2733, -1
  %2735 = and i64 %2730, %2734
  %2736 = or i64 %2730, %2733
  %2737 = select i1 %2731, i64 %2735, i64 %2736
  %2738 = icmp slt i8 %1731, %1894
  %2739 = or i64 %1925, 14
  %2740 = shl i64 1, %2739
  %2741 = xor i64 %2740, -1
  %2742 = and i64 %2737, %2741
  %2743 = or i64 %2737, %2740
  %2744 = select i1 %2738, i64 %2742, i64 %2743
  store i64 %2744, i64* %1924, align 8
  %2745 = icmp slt i8 %1734, %1894
  %2746 = or i64 %1925, 15
  %2747 = shl i64 1, %2746
  %2748 = xor i64 %2747, -1
  %2749 = and i64 %2744, %2748
  %2750 = or i64 %2744, %2747
  br label %1934

; <label>:2751:                                   ; preds = %2489, %2488, %2484, %2483
  %2752 = phi i64 [ %2495, %2489 ], [ 16, %2488 ], [ %2487, %2484 ], [ 16, %2483 ]
  %2753 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 5, i32 0, i32 0
  %2754 = and i64 %2752, 65535
  store i64 %2754, i64* %2753, align 8
  %2755 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  %2756 = icmp ne i16 %2479, 0
  %2757 = zext i1 %2756 to i8
  store i8 %2757, i8* %2755, align 1
  %2758 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  %2759 = icmp ult i64 %1885, 16
  %2760 = zext i1 %2759 to i8
  store i8 %2760, i8* %2758, align 1
  %2761 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  %2762 = icmp ult i64 %2467, 16
  %2763 = zext i1 %2762 to i8
  store i8 %2763, i8* %2761, align 1
  %2764 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  %2765 = trunc i16 %2479 to i8
  %2766 = and i8 %2765, 1
  store i8 %2766, i8* %2764, align 1
  %2767 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 0, i8* %2767, align 1
  %2768 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 0, i8* %2768, align 1
  call void @llvm.lifetime.end(i64 288, i8* nonnull %1735) 
  call void @llvm.lifetime.end(i64 16, i8* nonnull %1684) 
  br label %3349

; <label>:2769:                                   ; preds = %5
  %2770 = bitcast { i64, i64 }* %11 to %struct.uint16v8_t*
  %2771 = bitcast { i64, i64 }* %11 to i8*
  call void @llvm.lifetime.start(i64 16, i8* nonnull %2771) 
  %2772 = bitcast i8* %2 to i64*
  %2773 = load i64, i64* %2772, align 1
  %2774 = getelementptr inbounds i8, i8* %2, i64 8
  %2775 = bitcast i8* %2774 to i64*
  %2776 = load i64, i64* %2775, align 1
  %2777 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %11, i64 0, i32 0
  store i64 %2773, i64* %2777, align 8
  %2778 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %11, i64 0, i32 1
  store i64 %2776, i64* %2778, align 8
  %2779 = inttoptr i64 %3 to i16*
  %2780 = load i16, i16* %2779
  %2781 = add i64 %3, 2
  %2782 = inttoptr i64 %2781 to i16*
  %2783 = load i16, i16* %2782
  %2784 = add i64 %3, 4
  %2785 = inttoptr i64 %2784 to i16*
  %2786 = load i16, i16* %2785
  %2787 = add i64 %3, 6
  %2788 = inttoptr i64 %2787 to i16*
  %2789 = load i16, i16* %2788
  %2790 = add i64 %3, 8
  %2791 = inttoptr i64 %2790 to i16*
  %2792 = load i16, i16* %2791
  %2793 = add i64 %3, 10
  %2794 = inttoptr i64 %2793 to i16*
  %2795 = load i16, i16* %2794
  %2796 = add i64 %3, 12
  %2797 = inttoptr i64 %2796 to i16*
  %2798 = load i16, i16* %2797
  %2799 = add i64 %3, 14
  %2800 = inttoptr i64 %2799 to i16*
  %2801 = load i16, i16* %2800
  %2802 = lshr i8 %12, 2
  %2803 = trunc i64 %2773 to i16
  %2804 = icmp eq i16 %2803, 0
  %2805 = select i1 %2804, i64 0, i64 8
  %2806 = icmp eq i16 %2780, 0
  %2807 = select i1 %2806, i64 0, i64 8
  %2808 = and i64 %2773, 4294901760
  %2809 = icmp eq i64 %2808, 0
  %2810 = xor i1 %2804, true
  %2811 = and i1 %2809, %2810
  %2812 = select i1 %2811, i64 1, i64 %2805
  %2813 = icmp eq i16 %2783, 0
  %2814 = xor i1 %2806, true
  %2815 = and i1 %2813, %2814
  %2816 = select i1 %2815, i64 1, i64 %2807
  %2817 = and i64 %2773, 281470681743360
  %2818 = icmp eq i64 %2817, 0
  %2819 = icmp ugt i64 %2812, 2
  %2820 = and i1 %2818, %2819
  %2821 = select i1 %2820, i64 2, i64 %2812
  %2822 = icmp eq i16 %2786, 0
  %2823 = icmp ugt i64 %2816, 2
  %2824 = and i1 %2822, %2823
  %2825 = select i1 %2824, i64 2, i64 %2816
  %2826 = icmp ult i64 %2773, 281474976710656
  %2827 = icmp ugt i64 %2821, 3
  %2828 = and i1 %2826, %2827
  %2829 = select i1 %2828, i64 3, i64 %2821
  %2830 = icmp eq i16 %2789, 0
  %2831 = icmp ugt i64 %2825, 3
  %2832 = and i1 %2830, %2831
  %2833 = select i1 %2832, i64 3, i64 %2825
  %2834 = trunc i64 %2776 to i16
  %2835 = icmp eq i16 %2834, 0
  %2836 = icmp ugt i64 %2829, 4
  %2837 = and i1 %2835, %2836
  %2838 = select i1 %2837, i64 4, i64 %2829
  %2839 = icmp eq i16 %2792, 0
  %2840 = icmp ugt i64 %2833, 4
  %2841 = and i1 %2839, %2840
  %2842 = select i1 %2841, i64 4, i64 %2833
  %2843 = and i64 %2776, 4294901760
  %2844 = icmp eq i64 %2843, 0
  %2845 = icmp ugt i64 %2838, 5
  %2846 = and i1 %2844, %2845
  %2847 = select i1 %2846, i64 5, i64 %2838
  %2848 = icmp eq i16 %2795, 0
  %2849 = icmp ugt i64 %2842, 5
  %2850 = and i1 %2848, %2849
  %2851 = select i1 %2850, i64 5, i64 %2842
  %2852 = and i64 %2776, 281470681743360
  %2853 = icmp eq i64 %2852, 0
  %2854 = icmp ugt i64 %2847, 6
  %2855 = and i1 %2853, %2854
  %2856 = select i1 %2855, i64 6, i64 %2847
  %2857 = icmp eq i16 %2798, 0
  %2858 = icmp ugt i64 %2851, 6
  %2859 = and i1 %2857, %2858
  %2860 = select i1 %2859, i64 6, i64 %2851
  %2861 = icmp ult i64 %2776, 281474976710656
  %2862 = icmp ugt i64 %2856, 7
  %2863 = and i1 %2861, %2862
  %2864 = select i1 %2863, i64 7, i64 %2856
  %2865 = icmp eq i16 %2801, 0
  %2866 = icmp ugt i64 %2860, 7
  %2867 = and i1 %2865, %2866
  %2868 = select i1 %2867, i64 7, i64 %2860
  %2869 = lshr i8 %12, 4
  %2870 = trunc i8 %2802 to i2
  %2871 = icmp eq i2 %2870, 1
  br i1 %2871, label %2873, label %2872

; <label>:2872:                                   ; preds = %2769
  br label %3005

; <label>:2873:                                   ; preds = %2769
  br label %2874

; <label>:2874:                                   ; preds = %2998, %2873
  %2875 = phi i16 [ %3000, %2998 ], [ %2803, %2873 ]
  %2876 = phi i64 [ %2996, %2998 ], [ 0, %2873 ]
  %2877 = phi i64 [ %2995, %2998 ], [ 0, %2873 ]
  %2878 = and i64 %2876, 1
  %2879 = icmp eq i64 %2878, 0
  %2880 = shl i64 %2876, 3
  br i1 %2879, label %2936, label %2881

; <label>:2881:                                   ; preds = %2874
  %2882 = icmp sgt i16 %2780, %2875
  %2883 = shl i64 1, %2880
  %2884 = xor i64 %2883, -1
  %2885 = and i64 %2877, %2884
  %2886 = or i64 %2883, %2877
  %2887 = select i1 %2882, i64 %2885, i64 %2886
  %2888 = icmp sgt i16 %2783, %2875
  %2889 = or i64 %2880, 1
  %2890 = shl i64 1, %2889
  %2891 = xor i64 %2890, -1
  %2892 = and i64 %2887, %2891
  %2893 = or i64 %2887, %2890
  %2894 = select i1 %2888, i64 %2892, i64 %2893
  %2895 = icmp sgt i16 %2786, %2875
  %2896 = or i64 %2880, 2
  %2897 = shl i64 1, %2896
  %2898 = xor i64 %2897, -1
  %2899 = and i64 %2894, %2898
  %2900 = or i64 %2894, %2897
  %2901 = select i1 %2895, i64 %2899, i64 %2900
  %2902 = icmp sgt i16 %2789, %2875
  %2903 = or i64 %2880, 3
  %2904 = shl i64 1, %2903
  %2905 = xor i64 %2904, -1
  %2906 = and i64 %2901, %2905
  %2907 = or i64 %2901, %2904
  %2908 = select i1 %2902, i64 %2906, i64 %2907
  %2909 = icmp sgt i16 %2792, %2875
  %2910 = or i64 %2880, 4
  %2911 = shl i64 1, %2910
  %2912 = xor i64 %2911, -1
  %2913 = and i64 %2908, %2912
  %2914 = or i64 %2908, %2911
  %2915 = select i1 %2909, i64 %2913, i64 %2914
  %2916 = icmp sgt i16 %2795, %2875
  %2917 = or i64 %2880, 5
  %2918 = shl i64 1, %2917
  %2919 = xor i64 %2918, -1
  %2920 = and i64 %2915, %2919
  %2921 = or i64 %2915, %2918
  %2922 = select i1 %2916, i64 %2920, i64 %2921
  %2923 = icmp sgt i16 %2798, %2875
  %2924 = or i64 %2880, 6
  %2925 = shl i64 1, %2924
  %2926 = xor i64 %2925, -1
  %2927 = and i64 %2922, %2926
  %2928 = or i64 %2922, %2925
  %2929 = select i1 %2923, i64 %2927, i64 %2928
  %2930 = icmp sgt i16 %2801, %2875
  %2931 = or i64 %2880, 7
  %2932 = shl i64 1, %2931
  %2933 = xor i64 %2932, -1
  %2934 = and i64 %2929, %2933
  %2935 = or i64 %2929, %2932
  br label %2991

; <label>:2936:                                   ; preds = %2874
  %2937 = icmp slt i16 %2780, %2875
  %2938 = shl i64 1, %2880
  %2939 = xor i64 %2938, -1
  %2940 = and i64 %2877, %2939
  %2941 = or i64 %2938, %2877
  %2942 = select i1 %2937, i64 %2940, i64 %2941
  %2943 = icmp slt i16 %2783, %2875
  %2944 = or i64 %2880, 1
  %2945 = shl i64 1, %2944
  %2946 = xor i64 %2945, -1
  %2947 = and i64 %2942, %2946
  %2948 = or i64 %2942, %2945
  %2949 = select i1 %2943, i64 %2947, i64 %2948
  %2950 = icmp slt i16 %2786, %2875
  %2951 = or i64 %2880, 2
  %2952 = shl i64 1, %2951
  %2953 = xor i64 %2952, -1
  %2954 = and i64 %2949, %2953
  %2955 = or i64 %2949, %2952
  %2956 = select i1 %2950, i64 %2954, i64 %2955
  %2957 = icmp slt i16 %2789, %2875
  %2958 = or i64 %2880, 3
  %2959 = shl i64 1, %2958
  %2960 = xor i64 %2959, -1
  %2961 = and i64 %2956, %2960
  %2962 = or i64 %2956, %2959
  %2963 = select i1 %2957, i64 %2961, i64 %2962
  %2964 = icmp slt i16 %2792, %2875
  %2965 = or i64 %2880, 4
  %2966 = shl i64 1, %2965
  %2967 = xor i64 %2966, -1
  %2968 = and i64 %2963, %2967
  %2969 = or i64 %2963, %2966
  %2970 = select i1 %2964, i64 %2968, i64 %2969
  %2971 = icmp slt i16 %2795, %2875
  %2972 = or i64 %2880, 5
  %2973 = shl i64 1, %2972
  %2974 = xor i64 %2973, -1
  %2975 = and i64 %2970, %2974
  %2976 = or i64 %2970, %2973
  %2977 = select i1 %2971, i64 %2975, i64 %2976
  %2978 = icmp slt i16 %2798, %2875
  %2979 = or i64 %2880, 6
  %2980 = shl i64 1, %2979
  %2981 = xor i64 %2980, -1
  %2982 = and i64 %2977, %2981
  %2983 = or i64 %2977, %2980
  %2984 = select i1 %2978, i64 %2982, i64 %2983
  %2985 = icmp slt i16 %2801, %2875
  %2986 = or i64 %2880, 7
  %2987 = shl i64 1, %2986
  %2988 = xor i64 %2987, -1
  %2989 = and i64 %2984, %2988
  %2990 = or i64 %2984, %2987
  br label %2991

; <label>:2991:                                   ; preds = %2936, %2881
  %2992 = phi i64 [ %2935, %2881 ], [ %2990, %2936 ]
  %2993 = phi i64 [ %2934, %2881 ], [ %2989, %2936 ]
  %2994 = phi i1 [ %2930, %2881 ], [ %2985, %2936 ]
  %2995 = select i1 %2994, i64 %2993, i64 %2992
  %2996 = add nuw nsw i64 %2876, 1
  %2997 = icmp eq i64 %2996, 8
  br i1 %2997, label %3001, label %2998

; <label>:2998:                                   ; preds = %2991
  %2999 = getelementptr inbounds %struct.uint16v8_t, %struct.uint16v8_t* %2770, i64 0, i32 0, i64 %2996
  %3000 = load i16, i16* %2999, align 2
  br label %2874

; <label>:3001:                                   ; preds = %2991
  br label %3003

; <label>:3002:                                   ; preds = %3005
  br label %3003

; <label>:3003:                                   ; preds = %3002, %3001
  %3004 = phi i64 [ %2995, %3001 ], [ %3064, %3002 ]
  switch i2 %2870, label %3278 [
    i2 0, label %3070
    i2 1, label %3098
    i2 -2, label %3131
    i2 -1, label %3261
  ]

; <label>:3005:                                   ; preds = %3067, %2872
  %3006 = phi i16 [ %3069, %3067 ], [ %2803, %2872 ]
  %3007 = phi i64 [ %3065, %3067 ], [ 0, %2872 ]
  %3008 = phi i64 [ %3064, %3067 ], [ 0, %2872 ]
  %3009 = shl i64 %3007, 3
  %3010 = icmp eq i16 %3006, %2780
  %3011 = shl i64 1, %3009
  %3012 = xor i64 %3011, -1
  %3013 = and i64 %3008, %3012
  %3014 = or i64 %3011, %3008
  %3015 = select i1 %3010, i64 %3014, i64 %3013
  %3016 = icmp eq i16 %3006, %2783
  %3017 = or i64 %3009, 1
  %3018 = shl i64 1, %3017
  %3019 = xor i64 %3018, -1
  %3020 = and i64 %3015, %3019
  %3021 = or i64 %3015, %3018
  %3022 = select i1 %3016, i64 %3021, i64 %3020
  %3023 = icmp eq i16 %3006, %2786
  %3024 = or i64 %3009, 2
  %3025 = shl i64 1, %3024
  %3026 = xor i64 %3025, -1
  %3027 = and i64 %3022, %3026
  %3028 = or i64 %3022, %3025
  %3029 = select i1 %3023, i64 %3028, i64 %3027
  %3030 = icmp eq i16 %3006, %2789
  %3031 = or i64 %3009, 3
  %3032 = shl i64 1, %3031
  %3033 = xor i64 %3032, -1
  %3034 = and i64 %3029, %3033
  %3035 = or i64 %3029, %3032
  %3036 = select i1 %3030, i64 %3035, i64 %3034
  %3037 = icmp eq i16 %3006, %2792
  %3038 = or i64 %3009, 4
  %3039 = shl i64 1, %3038
  %3040 = xor i64 %3039, -1
  %3041 = and i64 %3036, %3040
  %3042 = or i64 %3036, %3039
  %3043 = select i1 %3037, i64 %3042, i64 %3041
  %3044 = icmp eq i16 %3006, %2795
  %3045 = or i64 %3009, 5
  %3046 = shl i64 1, %3045
  %3047 = xor i64 %3046, -1
  %3048 = and i64 %3043, %3047
  %3049 = or i64 %3043, %3046
  %3050 = select i1 %3044, i64 %3049, i64 %3048
  %3051 = icmp eq i16 %3006, %2798
  %3052 = or i64 %3009, 6
  %3053 = shl i64 1, %3052
  %3054 = xor i64 %3053, -1
  %3055 = and i64 %3050, %3054
  %3056 = or i64 %3050, %3053
  %3057 = select i1 %3051, i64 %3056, i64 %3055
  %3058 = icmp eq i16 %3006, %2801
  %3059 = or i64 %3009, 7
  %3060 = shl i64 1, %3059
  %3061 = xor i64 %3060, -1
  %3062 = and i64 %3057, %3061
  %3063 = or i64 %3057, %3060
  %3064 = select i1 %3058, i64 %3063, i64 %3062
  %3065 = add nuw nsw i64 %3007, 1
  %3066 = icmp eq i64 %3065, 8
  br i1 %3066, label %3002, label %3067

; <label>:3067:                                   ; preds = %3005
  %3068 = getelementptr inbounds %struct.uint16v8_t, %struct.uint16v8_t* %2770, i64 0, i32 0, i64 %3065
  %3069 = load i16, i16* %3068, align 2
  br label %3005

; <label>:3070:                                   ; preds = %3003
  %3071 = icmp eq i64 %2868, 0
  %3072 = icmp eq i64 %2864, 0
  %3073 = or i1 %3071, %3072
  br i1 %3073, label %3281, label %3074

; <label>:3074:                                   ; preds = %3070
  br label %3075

; <label>:3075:                                   ; preds = %3093, %3074
  %3076 = phi i64 [ %3095, %3093 ], [ 0, %3074 ]
  %3077 = phi i16 [ %3096, %3093 ], [ 1, %3074 ]
  %3078 = phi i16 [ %3094, %3093 ], [ 0, %3074 ]
  br label %3081

; <label>:3079:                                   ; preds = %3081
  %3080 = icmp ult i64 %3089, %2864
  br i1 %3080, label %3081, label %3092

; <label>:3081:                                   ; preds = %3079, %3075
  %3082 = phi i64 [ 0, %3075 ], [ %3089, %3079 ]
  %3083 = shl i64 %3082, 3
  %3084 = add i64 %3083, %3076
  %3085 = and i64 %3084, 63
  %3086 = shl i64 1, %3085
  %3087 = and i64 %3086, %3004
  %3088 = icmp eq i64 %3087, 0
  %3089 = add nuw i64 %3082, 1
  br i1 %3088, label %3079, label %3090

; <label>:3090:                                   ; preds = %3081
  %3091 = or i16 %3078, %3077
  br label %3093

; <label>:3092:                                   ; preds = %3079
  br label %3093

; <label>:3093:                                   ; preds = %3092, %3090
  %3094 = phi i16 [ %3091, %3090 ], [ %3078, %3092 ]
  %3095 = add nuw i64 %3076, 1
  %3096 = shl i16 %3077, 1
  %3097 = icmp eq i64 %3095, %2868
  br i1 %3097, label %3279, label %3075

; <label>:3098:                                   ; preds = %3003
  %3099 = icmp eq i64 %2868, 0
  br i1 %3099, label %3281, label %3100

; <label>:3100:                                   ; preds = %3098
  %3101 = add i64 %2864, -1
  %3102 = icmp eq i64 %3101, 0
  br i1 %3102, label %3281, label %3103

; <label>:3103:                                   ; preds = %3100
  br label %3104

; <label>:3104:                                   ; preds = %3127, %3103
  %3105 = phi i16 [ %3123, %3127 ], [ 0, %3103 ]
  %3106 = phi i16 [ %3129, %3127 ], [ 1, %3103 ]
  %3107 = phi i64 [ %3128, %3127 ], [ 0, %3103 ]
  br label %3108

; <label>:3108:                                   ; preds = %3108, %3104
  %3109 = phi i16 [ %3105, %3104 ], [ %3123, %3108 ]
  %3110 = phi i64 [ 0, %3104 ], [ %3124, %3108 ]
  %3111 = shl i64 %3110, 3
  %3112 = add i64 %3111, %3107
  %3113 = and i64 %3112, 63
  %3114 = shl i64 1, %3113
  %3115 = or i64 %3111, 8
  %3116 = add i64 %3115, %3107
  %3117 = and i64 %3116, 63
  %3118 = shl i64 1, %3117
  %3119 = or i64 %3118, %3114
  %3120 = and i64 %3119, %3004
  %3121 = icmp ne i64 %3120, %3119
  %3122 = select i1 %3121, i16 0, i16 %3106
  %3123 = or i16 %3122, %3109
  %3124 = add i64 %3110, 2
  %3125 = icmp ult i64 %3124, %3101
  %3126 = and i1 %3125, %3121
  br i1 %3126, label %3108, label %3127

; <label>:3127:                                   ; preds = %3108
  %3128 = add nuw i64 %3107, 1
  %3129 = shl i16 %3106, 1
  %3130 = icmp eq i64 %3128, %2868
  br i1 %3130, label %3280, label %3104

; <label>:3131:                                   ; preds = %3003
  %3132 = icmp ne i64 %2864, 0
  %3133 = icmp ne i64 %2868, 0
  %3134 = and i1 %3133, %3132
  br i1 %3134, label %3135, label %3138

; <label>:3135:                                   ; preds = %3131
  %3136 = and i64 %3004, 1
  %3137 = icmp ne i64 %3136, 0
  br label %3143

; <label>:3138:                                   ; preds = %3131
  br i1 %3132, label %3143, label %3139

; <label>:3139:                                   ; preds = %3138
  %3140 = xor i1 %3133, true
  %3141 = zext i1 %3140 to i16
  %3142 = icmp ugt i64 %2868, 1
  br label %3150

; <label>:3143:                                   ; preds = %3138, %3135
  %3144 = phi i1 [ false, %3138 ], [ %3137, %3135 ]
  %3145 = zext i1 %3144 to i16
  %3146 = icmp ugt i64 %2864, 1
  %3147 = icmp ugt i64 %2868, 1
  %3148 = and i1 %3147, %3146
  br i1 %3148, label %3156, label %3149

; <label>:3149:                                   ; preds = %3143
  br i1 %3146, label %3161, label %3150

; <label>:3150:                                   ; preds = %3149, %3139
  %3151 = phi i16 [ %3141, %3139 ], [ %3145, %3149 ]
  %3152 = phi i1 [ %3142, %3139 ], [ %3147, %3149 ]
  %3153 = select i1 %3152, i16 0, i16 2
  %3154 = or i16 %3153, %3151
  %3155 = icmp ugt i64 %2868, 2
  br label %3167

; <label>:3156:                                   ; preds = %3143
  %3157 = trunc i64 %3004 to i16
  %3158 = lshr i16 %3157, 8
  %3159 = and i16 %3158, 2
  %3160 = or i16 %3145, %3159
  br label %3161

; <label>:3161:                                   ; preds = %3156, %3149
  %3162 = phi i16 [ %3145, %3149 ], [ %3160, %3156 ]
  %3163 = icmp ugt i64 %2864, 2
  %3164 = icmp ugt i64 %2868, 2
  %3165 = and i1 %3164, %3163
  br i1 %3165, label %3173, label %3166

; <label>:3166:                                   ; preds = %3161
  br i1 %3163, label %3178, label %3167

; <label>:3167:                                   ; preds = %3166, %3150
  %3168 = phi i16 [ %3154, %3150 ], [ %3162, %3166 ]
  %3169 = phi i1 [ %3155, %3150 ], [ %3164, %3166 ]
  %3170 = select i1 %3169, i16 0, i16 4
  %3171 = or i16 %3170, %3168
  %3172 = icmp ugt i64 %2868, 3
  br label %3184

; <label>:3173:                                   ; preds = %3161
  %3174 = and i64 %3004, 262144
  %3175 = icmp ne i64 %3174, 0
  %3176 = select i1 %3175, i16 4, i16 0
  %3177 = or i16 %3162, %3176
  br label %3178

; <label>:3178:                                   ; preds = %3173, %3166
  %3179 = phi i16 [ %3162, %3166 ], [ %3177, %3173 ]
  %3180 = icmp ugt i64 %2864, 3
  %3181 = icmp ugt i64 %2868, 3
  %3182 = and i1 %3181, %3180
  br i1 %3182, label %3190, label %3183

; <label>:3183:                                   ; preds = %3178
  br i1 %3180, label %3195, label %3184

; <label>:3184:                                   ; preds = %3183, %3167
  %3185 = phi i16 [ %3171, %3167 ], [ %3179, %3183 ]
  %3186 = phi i1 [ %3172, %3167 ], [ %3181, %3183 ]
  %3187 = select i1 %3186, i16 0, i16 8
  %3188 = or i16 %3187, %3185
  %3189 = icmp ugt i64 %2868, 4
  br label %3201

; <label>:3190:                                   ; preds = %3178
  %3191 = and i64 %3004, 134217728
  %3192 = icmp ne i64 %3191, 0
  %3193 = select i1 %3192, i16 8, i16 0
  %3194 = or i16 %3179, %3193
  br label %3195

; <label>:3195:                                   ; preds = %3190, %3183
  %3196 = phi i16 [ %3179, %3183 ], [ %3194, %3190 ]
  %3197 = icmp ugt i64 %2864, 4
  %3198 = icmp ugt i64 %2868, 4
  %3199 = and i1 %3198, %3197
  br i1 %3199, label %3207, label %3200

; <label>:3200:                                   ; preds = %3195
  br i1 %3197, label %3212, label %3201

; <label>:3201:                                   ; preds = %3200, %3184
  %3202 = phi i16 [ %3188, %3184 ], [ %3196, %3200 ]
  %3203 = phi i1 [ %3189, %3184 ], [ %3198, %3200 ]
  %3204 = select i1 %3203, i16 0, i16 16
  %3205 = or i16 %3204, %3202
  %3206 = icmp ugt i64 %2868, 5
  br label %3218

; <label>:3207:                                   ; preds = %3195
  %3208 = and i64 %3004, 68719476736
  %3209 = icmp ne i64 %3208, 0
  %3210 = select i1 %3209, i16 16, i16 0
  %3211 = or i16 %3196, %3210
  br label %3212

; <label>:3212:                                   ; preds = %3207, %3200
  %3213 = phi i16 [ %3196, %3200 ], [ %3211, %3207 ]
  %3214 = icmp ugt i64 %2864, 5
  %3215 = icmp ugt i64 %2868, 5
  %3216 = and i1 %3215, %3214
  br i1 %3216, label %3224, label %3217

; <label>:3217:                                   ; preds = %3212
  br i1 %3214, label %3229, label %3218

; <label>:3218:                                   ; preds = %3217, %3201
  %3219 = phi i16 [ %3205, %3201 ], [ %3213, %3217 ]
  %3220 = phi i1 [ %3206, %3201 ], [ %3215, %3217 ]
  %3221 = select i1 %3220, i16 0, i16 32
  %3222 = or i16 %3221, %3219
  %3223 = icmp ugt i64 %2868, 6
  br label %3235

; <label>:3224:                                   ; preds = %3212
  %3225 = and i64 %3004, 35184372088832
  %3226 = icmp ne i64 %3225, 0
  %3227 = select i1 %3226, i16 32, i16 0
  %3228 = or i16 %3213, %3227
  br label %3229

; <label>:3229:                                   ; preds = %3224, %3217
  %3230 = phi i16 [ %3213, %3217 ], [ %3228, %3224 ]
  %3231 = icmp ugt i64 %2864, 6
  %3232 = icmp ugt i64 %2868, 6
  %3233 = and i1 %3232, %3231
  br i1 %3233, label %3241, label %3234

; <label>:3234:                                   ; preds = %3229
  br i1 %3231, label %3246, label %3235

; <label>:3235:                                   ; preds = %3234, %3218
  %3236 = phi i16 [ %3222, %3218 ], [ %3230, %3234 ]
  %3237 = phi i1 [ %3223, %3218 ], [ %3232, %3234 ]
  %3238 = select i1 %3237, i16 0, i16 64
  %3239 = or i16 %3238, %3236
  %3240 = icmp ugt i64 %2868, 7
  br label %3252

; <label>:3241:                                   ; preds = %3229
  %3242 = and i64 %3004, 18014398509481984
  %3243 = icmp ne i64 %3242, 0
  %3244 = select i1 %3243, i16 64, i16 0
  %3245 = or i16 %3230, %3244
  br label %3246

; <label>:3246:                                   ; preds = %3241, %3234
  %3247 = phi i16 [ %3230, %3234 ], [ %3245, %3241 ]
  %3248 = icmp ugt i64 %2864, 7
  %3249 = icmp ugt i64 %2868, 7
  %3250 = and i1 %3249, %3248
  br i1 %3250, label %3257, label %3251

; <label>:3251:                                   ; preds = %3246
  br i1 %3248, label %3281, label %3252

; <label>:3252:                                   ; preds = %3251, %3235
  %3253 = phi i16 [ %3239, %3235 ], [ %3247, %3251 ]
  %3254 = phi i1 [ %3240, %3235 ], [ %3249, %3251 ]
  %3255 = select i1 %3254, i16 0, i16 128
  %3256 = or i16 %3255, %3253
  br label %3281

; <label>:3257:                                   ; preds = %3246
  %3258 = icmp slt i64 %3004, 0
  %3259 = select i1 %3258, i16 128, i16 0
  %3260 = or i16 %3247, %3259
  br label %3281

; <label>:3261:                                   ; preds = %3003
  %3262 = icmp ugt i64 %2864, %2868
  br i1 %3262, label %3281, label %3263

; <label>:3263:                                   ; preds = %3261
  %3264 = icmp eq i64 %2864, 0
  br i1 %3264, label %3281, label %3265

; <label>:3265:                                   ; preds = %3263
  br label %3266

; <label>:3266:                                   ; preds = %3265
  br label %3267

; <label>:3267:                                   ; preds = %3266
  %3268 = icmp eq i64 %2868, 0
  br i1 %3268, label %3274, label %3269

; <label>:3269:                                   ; preds = %3267
  %3270 = and i64 %3004, 1
  %3271 = icmp eq i64 %3270, 0
  br i1 %3271, label %3274, label %3272

; <label>:3272:                                   ; preds = %3269
  %3273 = icmp ugt i64 %2864, 1
  br i1 %3273, label %3705, label %3275

; <label>:3274:                                   ; preds = %3749, %3747, %3742, %3740, %3735, %3733, %3728, %3726, %3721, %3719, %3714, %3712, %3707, %3705, %3269, %3267
  br label %3276

; <label>:3275:                                   ; preds = %3751, %3745, %3738, %3731, %3724, %3717, %3710, %3272
  br label %3276

; <label>:3276:                                   ; preds = %3275, %3274
  %3277 = phi i16 [ 254, %3274 ], [ 255, %3275 ]
  br label %3752

; <label>:3278:                                   ; preds = %3003
  unreachable

; <label>:3279:                                   ; preds = %3093
  br label %3281

; <label>:3280:                                   ; preds = %3127
  br label %3281

; <label>:3281:                                   ; preds = %4058, %3280, %3279, %3263, %3261, %3257, %3252, %3251, %3100, %3098, %3070
  %3282 = phi i64 [ %2864, %3070 ], [ %2864, %3098 ], [ 1, %3100 ], [ %2864, %3251 ], [ %2864, %3257 ], [ %2864, %3252 ], [ %2864, %3261 ], [ 0, %3263 ], [ %2864, %3279 ], [ %2864, %3280 ], [ %2864, %4058 ]
  %3283 = phi i16 [ 0, %3070 ], [ 0, %3098 ], [ 0, %3100 ], [ %3247, %3251 ], [ %3260, %3257 ], [ %3256, %3252 ], [ 0, %3261 ], [ 255, %3263 ], [ %3094, %3279 ], [ %3123, %3280 ], [ %4059, %4058 ]
  %3284 = trunc i8 %2869 to i2
  switch i2 %3284, label %3292 [
    i2 0, label %3293
    i2 1, label %3287
    i2 -2, label %3293
    i2 -1, label %3285
  ]

; <label>:3285:                                   ; preds = %3281
  %3286 = icmp eq i64 %2868, 0
  br i1 %3286, label %3293, label %3289

; <label>:3287:                                   ; preds = %3281
  %3288 = xor i16 %3283, 255
  br label %3293

; <label>:3289:                                   ; preds = %3285
  %3290 = xor i16 %3283, 1
  %3291 = icmp eq i64 %2868, 1
  br i1 %3291, label %3293, label %3311

; <label>:3292:                                   ; preds = %3281
  unreachable

; <label>:3293:                                   ; preds = %3326, %3323, %3320, %3317, %3314, %3311, %3289, %3287, %3285, %3281, %3281
  %3294 = phi i16 [ %3288, %3287 ], [ %3283, %3281 ], [ %3283, %3281 ], [ %3324, %3323 ], [ %3321, %3320 ], [ %3318, %3317 ], [ %3315, %3314 ], [ %3312, %3311 ], [ %3290, %3289 ], [ %3283, %3285 ], [ %3329, %3326 ]
  %3295 = and i8 %12, 64
  %3296 = icmp eq i8 %3295, 0
  %3297 = icmp eq i16 %3294, 0
  br i1 %3296, label %3298, label %3303

; <label>:3298:                                   ; preds = %3293
  br i1 %3297, label %3330, label %3299

; <label>:3299:                                   ; preds = %3298
  %3300 = zext i16 %3294 to i32
  %3301 = tail call i32 @llvm.cttz.i32(i32 %3300, i1 true) 
  %3302 = zext i32 %3301 to i64
  br label %3330

; <label>:3303:                                   ; preds = %3293
  br i1 %3297, label %3330, label %3304

; <label>:3304:                                   ; preds = %3303
  %3305 = zext i16 %3294 to i32
  %3306 = tail call i32 @llvm.ctlz.i32(i32 %3305, i1 true) 
  %3307 = add nuw nsw i32 %3306, 65512
  %3308 = and i32 %3307, 65535
  %3309 = zext i32 %3308 to i64
  %3310 = sub nsw i64 7, %3309
  br label %3330

; <label>:3311:                                   ; preds = %3289
  %3312 = xor i16 %3283, 3
  %3313 = icmp ugt i64 %2868, 2
  br i1 %3313, label %3314, label %3293

; <label>:3314:                                   ; preds = %3311
  %3315 = xor i16 %3283, 7
  %3316 = icmp eq i64 %2868, 3
  br i1 %3316, label %3293, label %3317

; <label>:3317:                                   ; preds = %3314
  %3318 = xor i16 %3283, 15
  %3319 = icmp ugt i64 %2868, 4
  br i1 %3319, label %3320, label %3293

; <label>:3320:                                   ; preds = %3317
  %3321 = xor i16 %3283, 31
  %3322 = icmp eq i64 %2868, 5
  br i1 %3322, label %3293, label %3323

; <label>:3323:                                   ; preds = %3320
  %3324 = xor i16 %3283, 63
  %3325 = icmp ugt i64 %2868, 6
  br i1 %3325, label %3326, label %3293

; <label>:3326:                                   ; preds = %3323
  %3327 = icmp ne i64 %2868, 7
  %3328 = select i1 %3327, i16 255, i16 127
  %3329 = xor i16 %3283, %3328
  br label %3293

; <label>:3330:                                   ; preds = %3304, %3303, %3299, %3298
  %3331 = phi i64 [ %3310, %3304 ], [ 8, %3303 ], [ %3302, %3299 ], [ 8, %3298 ]
  %3332 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 5, i32 0, i32 0
  %3333 = and i64 %3331, 65535
  store i64 %3333, i64* %3332, align 8
  %3334 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  %3335 = icmp ne i16 %3294, 0
  %3336 = zext i1 %3335 to i8
  store i8 %3336, i8* %3334, align 1
  %3337 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  %3338 = icmp ult i64 %2868, 8
  %3339 = zext i1 %3338 to i8
  store i8 %3339, i8* %3337, align 1
  %3340 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  %3341 = icmp ult i64 %3282, 8
  %3342 = zext i1 %3341 to i8
  store i8 %3342, i8* %3340, align 1
  %3343 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  %3344 = trunc i16 %3294 to i8
  %3345 = and i8 %3344, 1
  store i8 %3345, i8* %3343, align 1
  %3346 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 0, i8* %3346, align 1
  %3347 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 0, i8* %3347, align 1
  call void @llvm.lifetime.end(i64 16, i8* nonnull %2771) 
  br label %3349

; <label>:3348:                                   ; preds = %5
  unreachable

; <label>:3349:                                   ; preds = %3330, %2751, %1663, %1084
  ret %struct.Memory* %0

; <label>:3350:                                   ; preds = %1605
  %3351 = icmp ugt i64 %1201, 1
  br i1 %3351, label %3352, label %1607

; <label>:3352:                                   ; preds = %3350
  %3353 = and i64 %1337, 512
  %3354 = icmp eq i64 %3353, 0
  br i1 %3354, label %1607, label %3355

; <label>:3355:                                   ; preds = %3352
  %3356 = icmp ugt i64 %1197, 2
  br i1 %3356, label %3357, label %1608

; <label>:3357:                                   ; preds = %3355
  %3358 = icmp ugt i64 %1201, 2
  br i1 %3358, label %3359, label %1607

; <label>:3359:                                   ; preds = %3357
  %3360 = and i64 %1337, 262144
  %3361 = icmp eq i64 %3360, 0
  br i1 %3361, label %1607, label %3362

; <label>:3362:                                   ; preds = %3359
  %3363 = icmp ugt i64 %1197, 3
  br i1 %3363, label %3364, label %1608

; <label>:3364:                                   ; preds = %3362
  %3365 = icmp ugt i64 %1201, 3
  br i1 %3365, label %3366, label %1607

; <label>:3366:                                   ; preds = %3364
  %3367 = and i64 %1337, 134217728
  %3368 = icmp eq i64 %3367, 0
  br i1 %3368, label %1607, label %3369

; <label>:3369:                                   ; preds = %3366
  %3370 = icmp ugt i64 %1197, 4
  br i1 %3370, label %3371, label %1608

; <label>:3371:                                   ; preds = %3369
  %3372 = icmp ugt i64 %1201, 4
  br i1 %3372, label %3373, label %1607

; <label>:3373:                                   ; preds = %3371
  %3374 = and i64 %1337, 68719476736
  %3375 = icmp eq i64 %3374, 0
  br i1 %3375, label %1607, label %3376

; <label>:3376:                                   ; preds = %3373
  %3377 = icmp ugt i64 %1197, 5
  br i1 %3377, label %3378, label %1608

; <label>:3378:                                   ; preds = %3376
  %3379 = icmp ugt i64 %1201, 5
  br i1 %3379, label %3380, label %1607

; <label>:3380:                                   ; preds = %3378
  %3381 = and i64 %1337, 35184372088832
  %3382 = icmp eq i64 %3381, 0
  br i1 %3382, label %1607, label %3383

; <label>:3383:                                   ; preds = %3380
  %3384 = icmp ugt i64 %1197, 6
  br i1 %3384, label %3385, label %1608

; <label>:3385:                                   ; preds = %3383
  %3386 = icmp ugt i64 %1201, 6
  br i1 %3386, label %3387, label %1607

; <label>:3387:                                   ; preds = %3385
  %3388 = and i64 %1337, 18014398509481984
  %3389 = icmp eq i64 %3388, 0
  br i1 %3389, label %1607, label %3390

; <label>:3390:                                   ; preds = %3387
  %3391 = icmp ugt i64 %1197, 7
  br i1 %3391, label %3392, label %1608

; <label>:3392:                                   ; preds = %3390
  %3393 = icmp ugt i64 %1201, 7
  br i1 %3393, label %3394, label %1607

; <label>:3394:                                   ; preds = %3392
  %3395 = icmp sgt i64 %1337, -1
  br i1 %3395, label %1607, label %3396

; <label>:3396:                                   ; preds = %3394
  br label %1608

; <label>:3397:                                   ; preds = %1609
  %3398 = icmp ugt i64 %1201, 1
  br i1 %3398, label %3399, label %3449

; <label>:3399:                                   ; preds = %3397
  %3400 = and i64 %1337, 2
  %3401 = icmp eq i64 %3400, 0
  br i1 %3401, label %3449, label %3402

; <label>:3402:                                   ; preds = %3399
  %3403 = icmp ugt i64 %1197, 1
  br i1 %3403, label %3404, label %3448

; <label>:3404:                                   ; preds = %3402
  %3405 = icmp ugt i64 %1201, 2
  br i1 %3405, label %3406, label %3449

; <label>:3406:                                   ; preds = %3404
  %3407 = and i64 %1337, 1024
  %3408 = icmp eq i64 %3407, 0
  br i1 %3408, label %3449, label %3409

; <label>:3409:                                   ; preds = %3406
  %3410 = icmp ugt i64 %1197, 2
  br i1 %3410, label %3411, label %3448

; <label>:3411:                                   ; preds = %3409
  %3412 = icmp ugt i64 %1201, 3
  br i1 %3412, label %3413, label %3449

; <label>:3413:                                   ; preds = %3411
  %3414 = and i64 %1337, 524288
  %3415 = icmp eq i64 %3414, 0
  br i1 %3415, label %3449, label %3416

; <label>:3416:                                   ; preds = %3413
  %3417 = icmp ugt i64 %1197, 3
  br i1 %3417, label %3418, label %3448

; <label>:3418:                                   ; preds = %3416
  %3419 = icmp ugt i64 %1201, 4
  br i1 %3419, label %3420, label %3449

; <label>:3420:                                   ; preds = %3418
  %3421 = and i64 %1337, 268435456
  %3422 = icmp eq i64 %3421, 0
  br i1 %3422, label %3449, label %3423

; <label>:3423:                                   ; preds = %3420
  %3424 = icmp ugt i64 %1197, 4
  br i1 %3424, label %3425, label %3448

; <label>:3425:                                   ; preds = %3423
  %3426 = icmp ugt i64 %1201, 5
  br i1 %3426, label %3427, label %3449

; <label>:3427:                                   ; preds = %3425
  %3428 = and i64 %1337, 137438953472
  %3429 = icmp eq i64 %3428, 0
  br i1 %3429, label %3449, label %3430

; <label>:3430:                                   ; preds = %3427
  %3431 = icmp ugt i64 %1197, 5
  br i1 %3431, label %3432, label %3448

; <label>:3432:                                   ; preds = %3430
  %3433 = icmp ugt i64 %1201, 6
  br i1 %3433, label %3434, label %3449

; <label>:3434:                                   ; preds = %3432
  %3435 = and i64 %1337, 70368744177664
  %3436 = icmp eq i64 %3435, 0
  br i1 %3436, label %3449, label %3437

; <label>:3437:                                   ; preds = %3434
  %3438 = icmp ugt i64 %1197, 6
  br i1 %3438, label %3439, label %3448

; <label>:3439:                                   ; preds = %3437
  %3440 = icmp ugt i64 %1201, 7
  br i1 %3440, label %3441, label %3449

; <label>:3441:                                   ; preds = %3439
  %3442 = and i64 %1337, 36028797018963968
  %3443 = icmp eq i64 %3442, 0
  br i1 %3443, label %3449, label %3444

; <label>:3444:                                   ; preds = %3441
  br i1 false, label %3445, label %3448

; <label>:3445:                                   ; preds = %3444
  br i1 undef, label %3446, label %3449

; <label>:3446:                                   ; preds = %3445
  br i1 undef, label %3449, label %3447

; <label>:3447:                                   ; preds = %3446
  br label %3448

; <label>:3448:                                   ; preds = %3447, %3444, %3437, %3430, %3423, %3416, %3409, %3402
  br label %3451

; <label>:3449:                                   ; preds = %3446, %3445, %3441, %3439, %3434, %3432, %3427, %3425, %3420, %3418, %3413, %3411, %3406, %3404, %3399, %3397
  %3450 = and i16 %1610, 253
  br label %3451

; <label>:3451:                                   ; preds = %3449, %3448
  %3452 = phi i16 [ %3450, %3449 ], [ %1610, %3448 ]
  br label %3453

; <label>:3453:                                   ; preds = %3451
  %3454 = icmp ugt i64 %1201, 2
  br i1 %3454, label %3455, label %3501

; <label>:3455:                                   ; preds = %3453
  %3456 = and i64 %1337, 4
  %3457 = icmp eq i64 %3456, 0
  br i1 %3457, label %3501, label %3458

; <label>:3458:                                   ; preds = %3455
  %3459 = icmp ugt i64 %1197, 1
  br i1 %3459, label %3460, label %3500

; <label>:3460:                                   ; preds = %3458
  %3461 = icmp ugt i64 %1201, 3
  br i1 %3461, label %3462, label %3501

; <label>:3462:                                   ; preds = %3460
  %3463 = and i64 %1337, 2048
  %3464 = icmp eq i64 %3463, 0
  br i1 %3464, label %3501, label %3465

; <label>:3465:                                   ; preds = %3462
  %3466 = icmp ugt i64 %1197, 2
  br i1 %3466, label %3467, label %3500

; <label>:3467:                                   ; preds = %3465
  %3468 = icmp ugt i64 %1201, 4
  br i1 %3468, label %3469, label %3501

; <label>:3469:                                   ; preds = %3467
  %3470 = and i64 %1337, 1048576
  %3471 = icmp eq i64 %3470, 0
  br i1 %3471, label %3501, label %3472

; <label>:3472:                                   ; preds = %3469
  %3473 = icmp ugt i64 %1197, 3
  br i1 %3473, label %3474, label %3500

; <label>:3474:                                   ; preds = %3472
  %3475 = icmp ugt i64 %1201, 5
  br i1 %3475, label %3476, label %3501

; <label>:3476:                                   ; preds = %3474
  %3477 = and i64 %1337, 536870912
  %3478 = icmp eq i64 %3477, 0
  br i1 %3478, label %3501, label %3479

; <label>:3479:                                   ; preds = %3476
  %3480 = icmp ugt i64 %1197, 4
  br i1 %3480, label %3481, label %3500

; <label>:3481:                                   ; preds = %3479
  %3482 = icmp ugt i64 %1201, 6
  br i1 %3482, label %3483, label %3501

; <label>:3483:                                   ; preds = %3481
  %3484 = and i64 %1337, 274877906944
  %3485 = icmp eq i64 %3484, 0
  br i1 %3485, label %3501, label %3486

; <label>:3486:                                   ; preds = %3483
  %3487 = icmp ugt i64 %1197, 5
  br i1 %3487, label %3488, label %3500

; <label>:3488:                                   ; preds = %3486
  %3489 = icmp ugt i64 %1201, 7
  br i1 %3489, label %3490, label %3501

; <label>:3490:                                   ; preds = %3488
  %3491 = and i64 %1337, 140737488355328
  %3492 = icmp eq i64 %3491, 0
  br i1 %3492, label %3501, label %3493

; <label>:3493:                                   ; preds = %3490
  br i1 false, label %3494, label %3500

; <label>:3494:                                   ; preds = %3493
  br i1 undef, label %3495, label %3501

; <label>:3495:                                   ; preds = %3494
  br i1 undef, label %3501, label %3496

; <label>:3496:                                   ; preds = %3495
  br i1 false, label %3497, label %3500

; <label>:3497:                                   ; preds = %3496
  br i1 undef, label %3498, label %3501

; <label>:3498:                                   ; preds = %3497
  br i1 undef, label %3501, label %3499

; <label>:3499:                                   ; preds = %3498
  br label %3500

; <label>:3500:                                   ; preds = %3499, %3496, %3493, %3486, %3479, %3472, %3465, %3458
  br label %3503

; <label>:3501:                                   ; preds = %3498, %3497, %3495, %3494, %3490, %3488, %3483, %3481, %3476, %3474, %3469, %3467, %3462, %3460, %3455, %3453
  %3502 = xor i16 %3452, 4
  br label %3503

; <label>:3503:                                   ; preds = %3501, %3500
  %3504 = phi i16 [ %3502, %3501 ], [ %3452, %3500 ]
  br label %3505

; <label>:3505:                                   ; preds = %3503
  %3506 = icmp ugt i64 %1201, 3
  br i1 %3506, label %3507, label %3549

; <label>:3507:                                   ; preds = %3505
  %3508 = and i64 %1337, 8
  %3509 = icmp eq i64 %3508, 0
  br i1 %3509, label %3549, label %3510

; <label>:3510:                                   ; preds = %3507
  %3511 = icmp ugt i64 %1197, 1
  br i1 %3511, label %3512, label %3548

; <label>:3512:                                   ; preds = %3510
  %3513 = icmp ugt i64 %1201, 4
  br i1 %3513, label %3514, label %3549

; <label>:3514:                                   ; preds = %3512
  %3515 = and i64 %1337, 4096
  %3516 = icmp eq i64 %3515, 0
  br i1 %3516, label %3549, label %3517

; <label>:3517:                                   ; preds = %3514
  %3518 = icmp ugt i64 %1197, 2
  br i1 %3518, label %3519, label %3548

; <label>:3519:                                   ; preds = %3517
  %3520 = icmp ugt i64 %1201, 5
  br i1 %3520, label %3521, label %3549

; <label>:3521:                                   ; preds = %3519
  %3522 = and i64 %1337, 2097152
  %3523 = icmp eq i64 %3522, 0
  br i1 %3523, label %3549, label %3524

; <label>:3524:                                   ; preds = %3521
  %3525 = icmp ugt i64 %1197, 3
  br i1 %3525, label %3526, label %3548

; <label>:3526:                                   ; preds = %3524
  %3527 = icmp ugt i64 %1201, 6
  br i1 %3527, label %3528, label %3549

; <label>:3528:                                   ; preds = %3526
  %3529 = and i64 %1337, 1073741824
  %3530 = icmp eq i64 %3529, 0
  br i1 %3530, label %3549, label %3531

; <label>:3531:                                   ; preds = %3528
  %3532 = icmp ugt i64 %1197, 4
  br i1 %3532, label %3533, label %3548

; <label>:3533:                                   ; preds = %3531
  %3534 = icmp ugt i64 %1201, 7
  br i1 %3534, label %3535, label %3549

; <label>:3535:                                   ; preds = %3533
  %3536 = and i64 %1337, 549755813888
  %3537 = icmp eq i64 %3536, 0
  br i1 %3537, label %3549, label %3538

; <label>:3538:                                   ; preds = %3535
  br i1 false, label %3539, label %3548

; <label>:3539:                                   ; preds = %3538
  br i1 undef, label %3540, label %3549

; <label>:3540:                                   ; preds = %3539
  br i1 undef, label %3549, label %3541

; <label>:3541:                                   ; preds = %3540
  br i1 false, label %3542, label %3548

; <label>:3542:                                   ; preds = %3541
  br i1 undef, label %3543, label %3549

; <label>:3543:                                   ; preds = %3542
  br i1 undef, label %3549, label %3544

; <label>:3544:                                   ; preds = %3543
  br i1 false, label %3545, label %3548

; <label>:3545:                                   ; preds = %3544
  br i1 undef, label %3546, label %3549

; <label>:3546:                                   ; preds = %3545
  br i1 undef, label %3549, label %3547

; <label>:3547:                                   ; preds = %3546
  br label %3548

; <label>:3548:                                   ; preds = %3547, %3544, %3541, %3538, %3531, %3524, %3517, %3510
  br label %3551

; <label>:3549:                                   ; preds = %3546, %3545, %3543, %3542, %3540, %3539, %3535, %3533, %3528, %3526, %3521, %3519, %3514, %3512, %3507, %3505
  %3550 = xor i16 %3504, 8
  br label %3551

; <label>:3551:                                   ; preds = %3549, %3548
  %3552 = phi i16 [ %3550, %3549 ], [ %3504, %3548 ]
  br label %3553

; <label>:3553:                                   ; preds = %3551
  %3554 = icmp ugt i64 %1201, 4
  br i1 %3554, label %3555, label %3593

; <label>:3555:                                   ; preds = %3553
  %3556 = and i64 %1337, 16
  %3557 = icmp eq i64 %3556, 0
  br i1 %3557, label %3593, label %3558

; <label>:3558:                                   ; preds = %3555
  %3559 = icmp ugt i64 %1197, 1
  br i1 %3559, label %3560, label %3592

; <label>:3560:                                   ; preds = %3558
  %3561 = icmp ugt i64 %1201, 5
  br i1 %3561, label %3562, label %3593

; <label>:3562:                                   ; preds = %3560
  %3563 = and i64 %1337, 8192
  %3564 = icmp eq i64 %3563, 0
  br i1 %3564, label %3593, label %3565

; <label>:3565:                                   ; preds = %3562
  %3566 = icmp ugt i64 %1197, 2
  br i1 %3566, label %3567, label %3592

; <label>:3567:                                   ; preds = %3565
  %3568 = icmp ugt i64 %1201, 6
  br i1 %3568, label %3569, label %3593

; <label>:3569:                                   ; preds = %3567
  %3570 = and i64 %1337, 4194304
  %3571 = icmp eq i64 %3570, 0
  br i1 %3571, label %3593, label %3572

; <label>:3572:                                   ; preds = %3569
  %3573 = icmp ugt i64 %1197, 3
  br i1 %3573, label %3574, label %3592

; <label>:3574:                                   ; preds = %3572
  %3575 = icmp ugt i64 %1201, 7
  br i1 %3575, label %3576, label %3593

; <label>:3576:                                   ; preds = %3574
  %3577 = trunc i64 %1337 to i32
  %3578 = icmp sgt i32 %3577, -1
  br i1 %3578, label %3593, label %3579

; <label>:3579:                                   ; preds = %3576
  br i1 false, label %3580, label %3592

; <label>:3580:                                   ; preds = %3579
  br i1 undef, label %3581, label %3593

; <label>:3581:                                   ; preds = %3580
  br i1 undef, label %3593, label %3582

; <label>:3582:                                   ; preds = %3581
  br i1 false, label %3583, label %3592

; <label>:3583:                                   ; preds = %3582
  br i1 undef, label %3584, label %3593

; <label>:3584:                                   ; preds = %3583
  br i1 undef, label %3593, label %3585

; <label>:3585:                                   ; preds = %3584
  br i1 false, label %3586, label %3592

; <label>:3586:                                   ; preds = %3585
  br i1 undef, label %3587, label %3593

; <label>:3587:                                   ; preds = %3586
  br i1 undef, label %3593, label %3588

; <label>:3588:                                   ; preds = %3587
  br i1 false, label %3589, label %3592

; <label>:3589:                                   ; preds = %3588
  br i1 undef, label %3590, label %3593

; <label>:3590:                                   ; preds = %3589
  br i1 undef, label %3593, label %3591

; <label>:3591:                                   ; preds = %3590
  br label %3592

; <label>:3592:                                   ; preds = %3591, %3588, %3585, %3582, %3579, %3572, %3565, %3558
  br label %3595

; <label>:3593:                                   ; preds = %3590, %3589, %3587, %3586, %3584, %3583, %3581, %3580, %3576, %3574, %3569, %3567, %3562, %3560, %3555, %3553
  %3594 = xor i16 %3552, 16
  br label %3595

; <label>:3595:                                   ; preds = %3593, %3592
  %3596 = phi i16 [ %3594, %3593 ], [ %3552, %3592 ]
  br label %3597

; <label>:3597:                                   ; preds = %3595
  %3598 = icmp ugt i64 %1201, 5
  br i1 %3598, label %3599, label %3633

; <label>:3599:                                   ; preds = %3597
  %3600 = and i64 %1337, 32
  %3601 = icmp eq i64 %3600, 0
  br i1 %3601, label %3633, label %3602

; <label>:3602:                                   ; preds = %3599
  %3603 = icmp ugt i64 %1197, 1
  br i1 %3603, label %3604, label %3632

; <label>:3604:                                   ; preds = %3602
  %3605 = icmp ugt i64 %1201, 6
  br i1 %3605, label %3606, label %3633

; <label>:3606:                                   ; preds = %3604
  %3607 = and i64 %1337, 16384
  %3608 = icmp eq i64 %3607, 0
  br i1 %3608, label %3633, label %3609

; <label>:3609:                                   ; preds = %3606
  %3610 = icmp ugt i64 %1197, 2
  br i1 %3610, label %3611, label %3632

; <label>:3611:                                   ; preds = %3609
  %3612 = icmp ugt i64 %1201, 7
  br i1 %3612, label %3613, label %3633

; <label>:3613:                                   ; preds = %3611
  %3614 = and i64 %1337, 8388608
  %3615 = icmp eq i64 %3614, 0
  br i1 %3615, label %3633, label %3616

; <label>:3616:                                   ; preds = %3613
  br i1 false, label %3617, label %3632

; <label>:3617:                                   ; preds = %3616
  br i1 undef, label %3618, label %3633

; <label>:3618:                                   ; preds = %3617
  br i1 undef, label %3633, label %3619

; <label>:3619:                                   ; preds = %3618
  br i1 false, label %3620, label %3632

; <label>:3620:                                   ; preds = %3619
  br i1 undef, label %3621, label %3633

; <label>:3621:                                   ; preds = %3620
  br i1 undef, label %3633, label %3622

; <label>:3622:                                   ; preds = %3621
  br i1 false, label %3623, label %3632

; <label>:3623:                                   ; preds = %3622
  br i1 undef, label %3624, label %3633

; <label>:3624:                                   ; preds = %3623
  br i1 undef, label %3633, label %3625

; <label>:3625:                                   ; preds = %3624
  br i1 false, label %3626, label %3632

; <label>:3626:                                   ; preds = %3625
  br i1 undef, label %3627, label %3633

; <label>:3627:                                   ; preds = %3626
  br i1 undef, label %3633, label %3628

; <label>:3628:                                   ; preds = %3627
  br i1 false, label %3629, label %3632

; <label>:3629:                                   ; preds = %3628
  br i1 undef, label %3630, label %3633

; <label>:3630:                                   ; preds = %3629
  br i1 undef, label %3633, label %3631

; <label>:3631:                                   ; preds = %3630
  br label %3632

; <label>:3632:                                   ; preds = %3631, %3628, %3625, %3622, %3619, %3616, %3609, %3602
  br label %3635

; <label>:3633:                                   ; preds = %3630, %3629, %3627, %3626, %3624, %3623, %3621, %3620, %3618, %3617, %3613, %3611, %3606, %3604, %3599, %3597
  %3634 = xor i16 %3596, 32
  br label %3635

; <label>:3635:                                   ; preds = %3633, %3632
  %3636 = phi i16 [ %3634, %3633 ], [ %3596, %3632 ]
  br label %3637

; <label>:3637:                                   ; preds = %3635
  %3638 = icmp ugt i64 %1201, 6
  br i1 %3638, label %3639, label %3669

; <label>:3639:                                   ; preds = %3637
  %3640 = and i64 %1337, 64
  %3641 = icmp eq i64 %3640, 0
  br i1 %3641, label %3669, label %3642

; <label>:3642:                                   ; preds = %3639
  %3643 = icmp ugt i64 %1197, 1
  br i1 %3643, label %3644, label %3668

; <label>:3644:                                   ; preds = %3642
  %3645 = icmp ugt i64 %1201, 7
  br i1 %3645, label %3646, label %3669

; <label>:3646:                                   ; preds = %3644
  %3647 = trunc i64 %1337 to i16
  %3648 = icmp sgt i16 %3647, -1
  br i1 %3648, label %3669, label %3649

; <label>:3649:                                   ; preds = %3646
  br i1 false, label %3650, label %3668

; <label>:3650:                                   ; preds = %3649
  br i1 undef, label %3651, label %3669

; <label>:3651:                                   ; preds = %3650
  br i1 undef, label %3669, label %3652

; <label>:3652:                                   ; preds = %3651
  br i1 false, label %3653, label %3668

; <label>:3653:                                   ; preds = %3652
  br i1 undef, label %3654, label %3669

; <label>:3654:                                   ; preds = %3653
  br i1 undef, label %3669, label %3655

; <label>:3655:                                   ; preds = %3654
  br i1 false, label %3656, label %3668

; <label>:3656:                                   ; preds = %3655
  br i1 undef, label %3657, label %3669

; <label>:3657:                                   ; preds = %3656
  br i1 undef, label %3669, label %3658

; <label>:3658:                                   ; preds = %3657
  br i1 false, label %3659, label %3668

; <label>:3659:                                   ; preds = %3658
  br i1 undef, label %3660, label %3669

; <label>:3660:                                   ; preds = %3659
  br i1 undef, label %3669, label %3661

; <label>:3661:                                   ; preds = %3660
  br i1 false, label %3662, label %3668

; <label>:3662:                                   ; preds = %3661
  br i1 undef, label %3663, label %3669

; <label>:3663:                                   ; preds = %3662
  br i1 undef, label %3669, label %3664

; <label>:3664:                                   ; preds = %3663
  br i1 false, label %3665, label %3668

; <label>:3665:                                   ; preds = %3664
  br i1 undef, label %3666, label %3669

; <label>:3666:                                   ; preds = %3665
  br i1 undef, label %3669, label %3667

; <label>:3667:                                   ; preds = %3666
  br label %3668

; <label>:3668:                                   ; preds = %3667, %3664, %3661, %3658, %3655, %3652, %3649, %3642
  br label %3671

; <label>:3669:                                   ; preds = %3666, %3665, %3663, %3662, %3660, %3659, %3657, %3656, %3654, %3653, %3651, %3650, %3646, %3644, %3639, %3637
  %3670 = xor i16 %3636, 64
  br label %3671

; <label>:3671:                                   ; preds = %3669, %3668
  %3672 = phi i16 [ %3670, %3669 ], [ %3636, %3668 ]
  br label %3673

; <label>:3673:                                   ; preds = %3671
  %3674 = icmp ugt i64 %1201, 7
  br i1 %3674, label %3675, label %3701

; <label>:3675:                                   ; preds = %3673
  %3676 = trunc i64 %1337 to i8
  %3677 = icmp sgt i8 %3676, -1
  br i1 %3677, label %3701, label %3678

; <label>:3678:                                   ; preds = %3675
  br i1 false, label %3679, label %3700

; <label>:3679:                                   ; preds = %3678
  br i1 undef, label %3680, label %3701

; <label>:3680:                                   ; preds = %3679
  br i1 undef, label %3701, label %3681

; <label>:3681:                                   ; preds = %3680
  br i1 false, label %3682, label %3700

; <label>:3682:                                   ; preds = %3681
  br i1 undef, label %3683, label %3701

; <label>:3683:                                   ; preds = %3682
  br i1 undef, label %3701, label %3684

; <label>:3684:                                   ; preds = %3683
  br i1 false, label %3685, label %3700

; <label>:3685:                                   ; preds = %3684
  br i1 undef, label %3686, label %3701

; <label>:3686:                                   ; preds = %3685
  br i1 undef, label %3701, label %3687

; <label>:3687:                                   ; preds = %3686
  br i1 false, label %3688, label %3700

; <label>:3688:                                   ; preds = %3687
  br i1 undef, label %3689, label %3701

; <label>:3689:                                   ; preds = %3688
  br i1 undef, label %3701, label %3690

; <label>:3690:                                   ; preds = %3689
  br i1 false, label %3691, label %3700

; <label>:3691:                                   ; preds = %3690
  br i1 undef, label %3692, label %3701

; <label>:3692:                                   ; preds = %3691
  br i1 undef, label %3701, label %3693

; <label>:3693:                                   ; preds = %3692
  br i1 false, label %3694, label %3700

; <label>:3694:                                   ; preds = %3693
  br i1 undef, label %3695, label %3701

; <label>:3695:                                   ; preds = %3694
  br i1 undef, label %3701, label %3696

; <label>:3696:                                   ; preds = %3695
  br i1 false, label %3697, label %3700

; <label>:3697:                                   ; preds = %3696
  br i1 undef, label %3698, label %3701

; <label>:3698:                                   ; preds = %3697
  br i1 undef, label %3701, label %3699

; <label>:3699:                                   ; preds = %3698
  br label %3700

; <label>:3700:                                   ; preds = %3699, %3696, %3693, %3690, %3687, %3684, %3681, %3678
  br label %3703

; <label>:3701:                                   ; preds = %3698, %3697, %3695, %3694, %3692, %3691, %3689, %3688, %3686, %3685, %3683, %3682, %3680, %3679, %3675, %3673
  %3702 = xor i16 %3672, 128
  br label %3703

; <label>:3703:                                   ; preds = %3701, %3700
  %3704 = phi i16 [ %3702, %3701 ], [ %3672, %3700 ]
  br label %1614

; <label>:3705:                                   ; preds = %3272
  %3706 = icmp ugt i64 %2868, 1
  br i1 %3706, label %3707, label %3274

; <label>:3707:                                   ; preds = %3705
  %3708 = and i64 %3004, 512
  %3709 = icmp eq i64 %3708, 0
  br i1 %3709, label %3274, label %3710

; <label>:3710:                                   ; preds = %3707
  %3711 = icmp ugt i64 %2864, 2
  br i1 %3711, label %3712, label %3275

; <label>:3712:                                   ; preds = %3710
  %3713 = icmp ugt i64 %2868, 2
  br i1 %3713, label %3714, label %3274

; <label>:3714:                                   ; preds = %3712
  %3715 = and i64 %3004, 262144
  %3716 = icmp eq i64 %3715, 0
  br i1 %3716, label %3274, label %3717

; <label>:3717:                                   ; preds = %3714
  %3718 = icmp ugt i64 %2864, 3
  br i1 %3718, label %3719, label %3275

; <label>:3719:                                   ; preds = %3717
  %3720 = icmp ugt i64 %2868, 3
  br i1 %3720, label %3721, label %3274

; <label>:3721:                                   ; preds = %3719
  %3722 = and i64 %3004, 134217728
  %3723 = icmp eq i64 %3722, 0
  br i1 %3723, label %3274, label %3724

; <label>:3724:                                   ; preds = %3721
  %3725 = icmp ugt i64 %2864, 4
  br i1 %3725, label %3726, label %3275

; <label>:3726:                                   ; preds = %3724
  %3727 = icmp ugt i64 %2868, 4
  br i1 %3727, label %3728, label %3274

; <label>:3728:                                   ; preds = %3726
  %3729 = and i64 %3004, 68719476736
  %3730 = icmp eq i64 %3729, 0
  br i1 %3730, label %3274, label %3731

; <label>:3731:                                   ; preds = %3728
  %3732 = icmp ugt i64 %2864, 5
  br i1 %3732, label %3733, label %3275

; <label>:3733:                                   ; preds = %3731
  %3734 = icmp ugt i64 %2868, 5
  br i1 %3734, label %3735, label %3274

; <label>:3735:                                   ; preds = %3733
  %3736 = and i64 %3004, 35184372088832
  %3737 = icmp eq i64 %3736, 0
  br i1 %3737, label %3274, label %3738

; <label>:3738:                                   ; preds = %3735
  %3739 = icmp ugt i64 %2864, 6
  br i1 %3739, label %3740, label %3275

; <label>:3740:                                   ; preds = %3738
  %3741 = icmp ugt i64 %2868, 6
  br i1 %3741, label %3742, label %3274

; <label>:3742:                                   ; preds = %3740
  %3743 = and i64 %3004, 18014398509481984
  %3744 = icmp eq i64 %3743, 0
  br i1 %3744, label %3274, label %3745

; <label>:3745:                                   ; preds = %3742
  %3746 = icmp ugt i64 %2864, 7
  br i1 %3746, label %3747, label %3275

; <label>:3747:                                   ; preds = %3745
  %3748 = icmp ugt i64 %2868, 7
  br i1 %3748, label %3749, label %3274

; <label>:3749:                                   ; preds = %3747
  %3750 = icmp sgt i64 %3004, -1
  br i1 %3750, label %3274, label %3751

; <label>:3751:                                   ; preds = %3749
  br label %3275

; <label>:3752:                                   ; preds = %3276
  %3753 = icmp ugt i64 %2868, 1
  br i1 %3753, label %3754, label %3804

; <label>:3754:                                   ; preds = %3752
  %3755 = and i64 %3004, 2
  %3756 = icmp eq i64 %3755, 0
  br i1 %3756, label %3804, label %3757

; <label>:3757:                                   ; preds = %3754
  %3758 = icmp ugt i64 %2864, 1
  br i1 %3758, label %3759, label %3803

; <label>:3759:                                   ; preds = %3757
  %3760 = icmp ugt i64 %2868, 2
  br i1 %3760, label %3761, label %3804

; <label>:3761:                                   ; preds = %3759
  %3762 = and i64 %3004, 1024
  %3763 = icmp eq i64 %3762, 0
  br i1 %3763, label %3804, label %3764

; <label>:3764:                                   ; preds = %3761
  %3765 = icmp ugt i64 %2864, 2
  br i1 %3765, label %3766, label %3803

; <label>:3766:                                   ; preds = %3764
  %3767 = icmp ugt i64 %2868, 3
  br i1 %3767, label %3768, label %3804

; <label>:3768:                                   ; preds = %3766
  %3769 = and i64 %3004, 524288
  %3770 = icmp eq i64 %3769, 0
  br i1 %3770, label %3804, label %3771

; <label>:3771:                                   ; preds = %3768
  %3772 = icmp ugt i64 %2864, 3
  br i1 %3772, label %3773, label %3803

; <label>:3773:                                   ; preds = %3771
  %3774 = icmp ugt i64 %2868, 4
  br i1 %3774, label %3775, label %3804

; <label>:3775:                                   ; preds = %3773
  %3776 = and i64 %3004, 268435456
  %3777 = icmp eq i64 %3776, 0
  br i1 %3777, label %3804, label %3778

; <label>:3778:                                   ; preds = %3775
  %3779 = icmp ugt i64 %2864, 4
  br i1 %3779, label %3780, label %3803

; <label>:3780:                                   ; preds = %3778
  %3781 = icmp ugt i64 %2868, 5
  br i1 %3781, label %3782, label %3804

; <label>:3782:                                   ; preds = %3780
  %3783 = and i64 %3004, 137438953472
  %3784 = icmp eq i64 %3783, 0
  br i1 %3784, label %3804, label %3785

; <label>:3785:                                   ; preds = %3782
  %3786 = icmp ugt i64 %2864, 5
  br i1 %3786, label %3787, label %3803

; <label>:3787:                                   ; preds = %3785
  %3788 = icmp ugt i64 %2868, 6
  br i1 %3788, label %3789, label %3804

; <label>:3789:                                   ; preds = %3787
  %3790 = and i64 %3004, 70368744177664
  %3791 = icmp eq i64 %3790, 0
  br i1 %3791, label %3804, label %3792

; <label>:3792:                                   ; preds = %3789
  %3793 = icmp ugt i64 %2864, 6
  br i1 %3793, label %3794, label %3803

; <label>:3794:                                   ; preds = %3792
  %3795 = icmp ugt i64 %2868, 7
  br i1 %3795, label %3796, label %3804

; <label>:3796:                                   ; preds = %3794
  %3797 = and i64 %3004, 36028797018963968
  %3798 = icmp eq i64 %3797, 0
  br i1 %3798, label %3804, label %3799

; <label>:3799:                                   ; preds = %3796
  br i1 false, label %3800, label %3803

; <label>:3800:                                   ; preds = %3799
  br i1 undef, label %3801, label %3804

; <label>:3801:                                   ; preds = %3800
  br i1 undef, label %3804, label %3802

; <label>:3802:                                   ; preds = %3801
  br label %3803

; <label>:3803:                                   ; preds = %3802, %3799, %3792, %3785, %3778, %3771, %3764, %3757
  br label %3806

; <label>:3804:                                   ; preds = %3801, %3800, %3796, %3794, %3789, %3787, %3782, %3780, %3775, %3773, %3768, %3766, %3761, %3759, %3754, %3752
  %3805 = and i16 %3277, 253
  br label %3806

; <label>:3806:                                   ; preds = %3804, %3803
  %3807 = phi i16 [ %3805, %3804 ], [ %3277, %3803 ]
  br label %3808

; <label>:3808:                                   ; preds = %3806
  %3809 = icmp ugt i64 %2868, 2
  br i1 %3809, label %3810, label %3856

; <label>:3810:                                   ; preds = %3808
  %3811 = and i64 %3004, 4
  %3812 = icmp eq i64 %3811, 0
  br i1 %3812, label %3856, label %3813

; <label>:3813:                                   ; preds = %3810
  %3814 = icmp ugt i64 %2864, 1
  br i1 %3814, label %3815, label %3855

; <label>:3815:                                   ; preds = %3813
  %3816 = icmp ugt i64 %2868, 3
  br i1 %3816, label %3817, label %3856

; <label>:3817:                                   ; preds = %3815
  %3818 = and i64 %3004, 2048
  %3819 = icmp eq i64 %3818, 0
  br i1 %3819, label %3856, label %3820

; <label>:3820:                                   ; preds = %3817
  %3821 = icmp ugt i64 %2864, 2
  br i1 %3821, label %3822, label %3855

; <label>:3822:                                   ; preds = %3820
  %3823 = icmp ugt i64 %2868, 4
  br i1 %3823, label %3824, label %3856

; <label>:3824:                                   ; preds = %3822
  %3825 = and i64 %3004, 1048576
  %3826 = icmp eq i64 %3825, 0
  br i1 %3826, label %3856, label %3827

; <label>:3827:                                   ; preds = %3824
  %3828 = icmp ugt i64 %2864, 3
  br i1 %3828, label %3829, label %3855

; <label>:3829:                                   ; preds = %3827
  %3830 = icmp ugt i64 %2868, 5
  br i1 %3830, label %3831, label %3856

; <label>:3831:                                   ; preds = %3829
  %3832 = and i64 %3004, 536870912
  %3833 = icmp eq i64 %3832, 0
  br i1 %3833, label %3856, label %3834

; <label>:3834:                                   ; preds = %3831
  %3835 = icmp ugt i64 %2864, 4
  br i1 %3835, label %3836, label %3855

; <label>:3836:                                   ; preds = %3834
  %3837 = icmp ugt i64 %2868, 6
  br i1 %3837, label %3838, label %3856

; <label>:3838:                                   ; preds = %3836
  %3839 = and i64 %3004, 274877906944
  %3840 = icmp eq i64 %3839, 0
  br i1 %3840, label %3856, label %3841

; <label>:3841:                                   ; preds = %3838
  %3842 = icmp ugt i64 %2864, 5
  br i1 %3842, label %3843, label %3855

; <label>:3843:                                   ; preds = %3841
  %3844 = icmp ugt i64 %2868, 7
  br i1 %3844, label %3845, label %3856

; <label>:3845:                                   ; preds = %3843
  %3846 = and i64 %3004, 140737488355328
  %3847 = icmp eq i64 %3846, 0
  br i1 %3847, label %3856, label %3848

; <label>:3848:                                   ; preds = %3845
  br i1 false, label %3849, label %3855

; <label>:3849:                                   ; preds = %3848
  br i1 undef, label %3850, label %3856

; <label>:3850:                                   ; preds = %3849
  br i1 undef, label %3856, label %3851

; <label>:3851:                                   ; preds = %3850
  br i1 false, label %3852, label %3855

; <label>:3852:                                   ; preds = %3851
  br i1 undef, label %3853, label %3856

; <label>:3853:                                   ; preds = %3852
  br i1 undef, label %3856, label %3854

; <label>:3854:                                   ; preds = %3853
  br label %3855

; <label>:3855:                                   ; preds = %3854, %3851, %3848, %3841, %3834, %3827, %3820, %3813
  br label %3858

; <label>:3856:                                   ; preds = %3853, %3852, %3850, %3849, %3845, %3843, %3838, %3836, %3831, %3829, %3824, %3822, %3817, %3815, %3810, %3808
  %3857 = xor i16 %3807, 4
  br label %3858

; <label>:3858:                                   ; preds = %3856, %3855
  %3859 = phi i16 [ %3857, %3856 ], [ %3807, %3855 ]
  br label %3860

; <label>:3860:                                   ; preds = %3858
  %3861 = icmp ugt i64 %2868, 3
  br i1 %3861, label %3862, label %3904

; <label>:3862:                                   ; preds = %3860
  %3863 = and i64 %3004, 8
  %3864 = icmp eq i64 %3863, 0
  br i1 %3864, label %3904, label %3865

; <label>:3865:                                   ; preds = %3862
  %3866 = icmp ugt i64 %2864, 1
  br i1 %3866, label %3867, label %3903

; <label>:3867:                                   ; preds = %3865
  %3868 = icmp ugt i64 %2868, 4
  br i1 %3868, label %3869, label %3904

; <label>:3869:                                   ; preds = %3867
  %3870 = and i64 %3004, 4096
  %3871 = icmp eq i64 %3870, 0
  br i1 %3871, label %3904, label %3872

; <label>:3872:                                   ; preds = %3869
  %3873 = icmp ugt i64 %2864, 2
  br i1 %3873, label %3874, label %3903

; <label>:3874:                                   ; preds = %3872
  %3875 = icmp ugt i64 %2868, 5
  br i1 %3875, label %3876, label %3904

; <label>:3876:                                   ; preds = %3874
  %3877 = and i64 %3004, 2097152
  %3878 = icmp eq i64 %3877, 0
  br i1 %3878, label %3904, label %3879

; <label>:3879:                                   ; preds = %3876
  %3880 = icmp ugt i64 %2864, 3
  br i1 %3880, label %3881, label %3903

; <label>:3881:                                   ; preds = %3879
  %3882 = icmp ugt i64 %2868, 6
  br i1 %3882, label %3883, label %3904

; <label>:3883:                                   ; preds = %3881
  %3884 = and i64 %3004, 1073741824
  %3885 = icmp eq i64 %3884, 0
  br i1 %3885, label %3904, label %3886

; <label>:3886:                                   ; preds = %3883
  %3887 = icmp ugt i64 %2864, 4
  br i1 %3887, label %3888, label %3903

; <label>:3888:                                   ; preds = %3886
  %3889 = icmp ugt i64 %2868, 7
  br i1 %3889, label %3890, label %3904

; <label>:3890:                                   ; preds = %3888
  %3891 = and i64 %3004, 549755813888
  %3892 = icmp eq i64 %3891, 0
  br i1 %3892, label %3904, label %3893

; <label>:3893:                                   ; preds = %3890
  br i1 false, label %3894, label %3903

; <label>:3894:                                   ; preds = %3893
  br i1 undef, label %3895, label %3904

; <label>:3895:                                   ; preds = %3894
  br i1 undef, label %3904, label %3896

; <label>:3896:                                   ; preds = %3895
  br i1 false, label %3897, label %3903

; <label>:3897:                                   ; preds = %3896
  br i1 undef, label %3898, label %3904

; <label>:3898:                                   ; preds = %3897
  br i1 undef, label %3904, label %3899

; <label>:3899:                                   ; preds = %3898
  br i1 false, label %3900, label %3903

; <label>:3900:                                   ; preds = %3899
  br i1 undef, label %3901, label %3904

; <label>:3901:                                   ; preds = %3900
  br i1 undef, label %3904, label %3902

; <label>:3902:                                   ; preds = %3901
  br label %3903

; <label>:3903:                                   ; preds = %3902, %3899, %3896, %3893, %3886, %3879, %3872, %3865
  br label %3906

; <label>:3904:                                   ; preds = %3901, %3900, %3898, %3897, %3895, %3894, %3890, %3888, %3883, %3881, %3876, %3874, %3869, %3867, %3862, %3860
  %3905 = xor i16 %3859, 8
  br label %3906

; <label>:3906:                                   ; preds = %3904, %3903
  %3907 = phi i16 [ %3905, %3904 ], [ %3859, %3903 ]
  br label %3908

; <label>:3908:                                   ; preds = %3906
  %3909 = icmp ugt i64 %2868, 4
  br i1 %3909, label %3910, label %3948

; <label>:3910:                                   ; preds = %3908
  %3911 = and i64 %3004, 16
  %3912 = icmp eq i64 %3911, 0
  br i1 %3912, label %3948, label %3913

; <label>:3913:                                   ; preds = %3910
  %3914 = icmp ugt i64 %2864, 1
  br i1 %3914, label %3915, label %3947

; <label>:3915:                                   ; preds = %3913
  %3916 = icmp ugt i64 %2868, 5
  br i1 %3916, label %3917, label %3948

; <label>:3917:                                   ; preds = %3915
  %3918 = and i64 %3004, 8192
  %3919 = icmp eq i64 %3918, 0
  br i1 %3919, label %3948, label %3920

; <label>:3920:                                   ; preds = %3917
  %3921 = icmp ugt i64 %2864, 2
  br i1 %3921, label %3922, label %3947

; <label>:3922:                                   ; preds = %3920
  %3923 = icmp ugt i64 %2868, 6
  br i1 %3923, label %3924, label %3948

; <label>:3924:                                   ; preds = %3922
  %3925 = and i64 %3004, 4194304
  %3926 = icmp eq i64 %3925, 0
  br i1 %3926, label %3948, label %3927

; <label>:3927:                                   ; preds = %3924
  %3928 = icmp ugt i64 %2864, 3
  br i1 %3928, label %3929, label %3947

; <label>:3929:                                   ; preds = %3927
  %3930 = icmp ugt i64 %2868, 7
  br i1 %3930, label %3931, label %3948

; <label>:3931:                                   ; preds = %3929
  %3932 = trunc i64 %3004 to i32
  %3933 = icmp sgt i32 %3932, -1
  br i1 %3933, label %3948, label %3934

; <label>:3934:                                   ; preds = %3931
  br i1 false, label %3935, label %3947

; <label>:3935:                                   ; preds = %3934
  br i1 undef, label %3936, label %3948

; <label>:3936:                                   ; preds = %3935
  br i1 undef, label %3948, label %3937

; <label>:3937:                                   ; preds = %3936
  br i1 false, label %3938, label %3947

; <label>:3938:                                   ; preds = %3937
  br i1 undef, label %3939, label %3948

; <label>:3939:                                   ; preds = %3938
  br i1 undef, label %3948, label %3940

; <label>:3940:                                   ; preds = %3939
  br i1 false, label %3941, label %3947

; <label>:3941:                                   ; preds = %3940
  br i1 undef, label %3942, label %3948

; <label>:3942:                                   ; preds = %3941
  br i1 undef, label %3948, label %3943

; <label>:3943:                                   ; preds = %3942
  br i1 false, label %3944, label %3947

; <label>:3944:                                   ; preds = %3943
  br i1 undef, label %3945, label %3948

; <label>:3945:                                   ; preds = %3944
  br i1 undef, label %3948, label %3946

; <label>:3946:                                   ; preds = %3945
  br label %3947

; <label>:3947:                                   ; preds = %3946, %3943, %3940, %3937, %3934, %3927, %3920, %3913
  br label %3950

; <label>:3948:                                   ; preds = %3945, %3944, %3942, %3941, %3939, %3938, %3936, %3935, %3931, %3929, %3924, %3922, %3917, %3915, %3910, %3908
  %3949 = xor i16 %3907, 16
  br label %3950

; <label>:3950:                                   ; preds = %3948, %3947
  %3951 = phi i16 [ %3949, %3948 ], [ %3907, %3947 ]
  br label %3952

; <label>:3952:                                   ; preds = %3950
  %3953 = icmp ugt i64 %2868, 5
  br i1 %3953, label %3954, label %3988

; <label>:3954:                                   ; preds = %3952
  %3955 = and i64 %3004, 32
  %3956 = icmp eq i64 %3955, 0
  br i1 %3956, label %3988, label %3957

; <label>:3957:                                   ; preds = %3954
  %3958 = icmp ugt i64 %2864, 1
  br i1 %3958, label %3959, label %3987

; <label>:3959:                                   ; preds = %3957
  %3960 = icmp ugt i64 %2868, 6
  br i1 %3960, label %3961, label %3988

; <label>:3961:                                   ; preds = %3959
  %3962 = and i64 %3004, 16384
  %3963 = icmp eq i64 %3962, 0
  br i1 %3963, label %3988, label %3964

; <label>:3964:                                   ; preds = %3961
  %3965 = icmp ugt i64 %2864, 2
  br i1 %3965, label %3966, label %3987

; <label>:3966:                                   ; preds = %3964
  %3967 = icmp ugt i64 %2868, 7
  br i1 %3967, label %3968, label %3988

; <label>:3968:                                   ; preds = %3966
  %3969 = and i64 %3004, 8388608
  %3970 = icmp eq i64 %3969, 0
  br i1 %3970, label %3988, label %3971

; <label>:3971:                                   ; preds = %3968
  br i1 false, label %3972, label %3987

; <label>:3972:                                   ; preds = %3971
  br i1 undef, label %3973, label %3988

; <label>:3973:                                   ; preds = %3972
  br i1 undef, label %3988, label %3974

; <label>:3974:                                   ; preds = %3973
  br i1 false, label %3975, label %3987

; <label>:3975:                                   ; preds = %3974
  br i1 undef, label %3976, label %3988

; <label>:3976:                                   ; preds = %3975
  br i1 undef, label %3988, label %3977

; <label>:3977:                                   ; preds = %3976
  br i1 false, label %3978, label %3987

; <label>:3978:                                   ; preds = %3977
  br i1 undef, label %3979, label %3988

; <label>:3979:                                   ; preds = %3978
  br i1 undef, label %3988, label %3980

; <label>:3980:                                   ; preds = %3979
  br i1 false, label %3981, label %3987

; <label>:3981:                                   ; preds = %3980
  br i1 undef, label %3982, label %3988

; <label>:3982:                                   ; preds = %3981
  br i1 undef, label %3988, label %3983

; <label>:3983:                                   ; preds = %3982
  br i1 false, label %3984, label %3987

; <label>:3984:                                   ; preds = %3983
  br i1 undef, label %3985, label %3988

; <label>:3985:                                   ; preds = %3984
  br i1 undef, label %3988, label %3986

; <label>:3986:                                   ; preds = %3985
  br label %3987

; <label>:3987:                                   ; preds = %3986, %3983, %3980, %3977, %3974, %3971, %3964, %3957
  br label %3990

; <label>:3988:                                   ; preds = %3985, %3984, %3982, %3981, %3979, %3978, %3976, %3975, %3973, %3972, %3968, %3966, %3961, %3959, %3954, %3952
  %3989 = xor i16 %3951, 32
  br label %3990

; <label>:3990:                                   ; preds = %3988, %3987
  %3991 = phi i16 [ %3989, %3988 ], [ %3951, %3987 ]
  br label %3992

; <label>:3992:                                   ; preds = %3990
  %3993 = icmp ugt i64 %2868, 6
  br i1 %3993, label %3994, label %4024

; <label>:3994:                                   ; preds = %3992
  %3995 = and i64 %3004, 64
  %3996 = icmp eq i64 %3995, 0
  br i1 %3996, label %4024, label %3997

; <label>:3997:                                   ; preds = %3994
  %3998 = icmp ugt i64 %2864, 1
  br i1 %3998, label %3999, label %4023

; <label>:3999:                                   ; preds = %3997
  %4000 = icmp ugt i64 %2868, 7
  br i1 %4000, label %4001, label %4024

; <label>:4001:                                   ; preds = %3999
  %4002 = trunc i64 %3004 to i16
  %4003 = icmp sgt i16 %4002, -1
  br i1 %4003, label %4024, label %4004

; <label>:4004:                                   ; preds = %4001
  br i1 false, label %4005, label %4023

; <label>:4005:                                   ; preds = %4004
  br i1 undef, label %4006, label %4024

; <label>:4006:                                   ; preds = %4005
  br i1 undef, label %4024, label %4007

; <label>:4007:                                   ; preds = %4006
  br i1 false, label %4008, label %4023

; <label>:4008:                                   ; preds = %4007
  br i1 undef, label %4009, label %4024

; <label>:4009:                                   ; preds = %4008
  br i1 undef, label %4024, label %4010

; <label>:4010:                                   ; preds = %4009
  br i1 false, label %4011, label %4023

; <label>:4011:                                   ; preds = %4010
  br i1 undef, label %4012, label %4024

; <label>:4012:                                   ; preds = %4011
  br i1 undef, label %4024, label %4013

; <label>:4013:                                   ; preds = %4012
  br i1 false, label %4014, label %4023

; <label>:4014:                                   ; preds = %4013
  br i1 undef, label %4015, label %4024

; <label>:4015:                                   ; preds = %4014
  br i1 undef, label %4024, label %4016

; <label>:4016:                                   ; preds = %4015
  br i1 false, label %4017, label %4023

; <label>:4017:                                   ; preds = %4016
  br i1 undef, label %4018, label %4024

; <label>:4018:                                   ; preds = %4017
  br i1 undef, label %4024, label %4019

; <label>:4019:                                   ; preds = %4018
  br i1 false, label %4020, label %4023

; <label>:4020:                                   ; preds = %4019
  br i1 undef, label %4021, label %4024

; <label>:4021:                                   ; preds = %4020
  br i1 undef, label %4024, label %4022

; <label>:4022:                                   ; preds = %4021
  br label %4023

; <label>:4023:                                   ; preds = %4022, %4019, %4016, %4013, %4010, %4007, %4004, %3997
  br label %4026

; <label>:4024:                                   ; preds = %4021, %4020, %4018, %4017, %4015, %4014, %4012, %4011, %4009, %4008, %4006, %4005, %4001, %3999, %3994, %3992
  %4025 = xor i16 %3991, 64
  br label %4026

; <label>:4026:                                   ; preds = %4024, %4023
  %4027 = phi i16 [ %4025, %4024 ], [ %3991, %4023 ]
  br label %4028

; <label>:4028:                                   ; preds = %4026
  %4029 = icmp ugt i64 %2868, 7
  br i1 %4029, label %4030, label %4056

; <label>:4030:                                   ; preds = %4028
  %4031 = trunc i64 %3004 to i8
  %4032 = icmp sgt i8 %4031, -1
  br i1 %4032, label %4056, label %4033

; <label>:4033:                                   ; preds = %4030
  br i1 false, label %4034, label %4055

; <label>:4034:                                   ; preds = %4033
  br i1 undef, label %4035, label %4056

; <label>:4035:                                   ; preds = %4034
  br i1 undef, label %4056, label %4036

; <label>:4036:                                   ; preds = %4035
  br i1 false, label %4037, label %4055

; <label>:4037:                                   ; preds = %4036
  br i1 undef, label %4038, label %4056

; <label>:4038:                                   ; preds = %4037
  br i1 undef, label %4056, label %4039

; <label>:4039:                                   ; preds = %4038
  br i1 false, label %4040, label %4055

; <label>:4040:                                   ; preds = %4039
  br i1 undef, label %4041, label %4056

; <label>:4041:                                   ; preds = %4040
  br i1 undef, label %4056, label %4042

; <label>:4042:                                   ; preds = %4041
  br i1 false, label %4043, label %4055

; <label>:4043:                                   ; preds = %4042
  br i1 undef, label %4044, label %4056

; <label>:4044:                                   ; preds = %4043
  br i1 undef, label %4056, label %4045

; <label>:4045:                                   ; preds = %4044
  br i1 false, label %4046, label %4055

; <label>:4046:                                   ; preds = %4045
  br i1 undef, label %4047, label %4056

; <label>:4047:                                   ; preds = %4046
  br i1 undef, label %4056, label %4048

; <label>:4048:                                   ; preds = %4047
  br i1 false, label %4049, label %4055

; <label>:4049:                                   ; preds = %4048
  br i1 undef, label %4050, label %4056

; <label>:4050:                                   ; preds = %4049
  br i1 undef, label %4056, label %4051

; <label>:4051:                                   ; preds = %4050
  br i1 false, label %4052, label %4055

; <label>:4052:                                   ; preds = %4051
  br i1 undef, label %4053, label %4056

; <label>:4053:                                   ; preds = %4052
  br i1 undef, label %4056, label %4054

; <label>:4054:                                   ; preds = %4053
  br label %4055

; <label>:4055:                                   ; preds = %4054, %4051, %4048, %4045, %4042, %4039, %4036, %4033
  br label %4058

; <label>:4056:                                   ; preds = %4053, %4052, %4050, %4049, %4047, %4046, %4044, %4043, %4041, %4040, %4038, %4037, %4035, %4034, %4030, %4028
  %4057 = xor i16 %4027, 128
  br label %4058

; <label>:4058:                                   ; preds = %4056, %4055
  %4059 = phi i16 [ %4057, %4056 ], [ %4027, %4055 ]
  br label %3281
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L6PSRLDQI3VnWI8vec128_tE2VnIS2_EEEP6MemoryS7_R5StateT_T0_2InIhE(%struct.Memory* readnone returned, %struct.State* nocapture readnone dereferenceable(3376), i8* nocapture, i8* nocapture readonly, i64)  {
  %6 = alloca { i64, i64 }, align 8
  %7 = alloca <2 x i64>, align 16
  %8 = bitcast <2 x i64>* %7 to %struct.uint8v16_t*
  %9 = bitcast <2 x i64>* %7 to i8*
  call void @llvm.lifetime.start(i64 16, i8* nonnull %9) 
  %10 = bitcast i8* %3 to <2 x i64>*
  %11 = load <2 x i64>, <2 x i64>* %10, align 1
  store <2 x i64> %11, <2 x i64>* %7, align 16
  %12 = and i64 %4, 255
  %13 = icmp ult i64 %12, 16
  br i1 %13, label %14, label %29

; <label>:14:                                     ; preds = %5
  %15 = bitcast { i64, i64 }* %6 to i8*
  %16 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %6, i64 0, i32 0
  %17 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %6, i64 0, i32 1
  %18 = bitcast { i64, i64 }* %6 to [16 x i8]*
  %19 = sub nsw i64 16, %12
  br label %69

; <label>:20:                                     ; preds = %69
  %21 = trunc i64 %113 to i8
  %22 = trunc i64 %112 to i8
  %23 = trunc i64 %111 to i8
  %24 = trunc i64 %110 to i8
  %25 = trunc i64 %109 to i8
  %26 = trunc i64 %108 to i8
  %27 = trunc i64 %107 to i8
  %28 = trunc i64 %105 to i8
  br label %29

; <label>:29:                                     ; preds = %20, %5
  %30 = phi i8 [ 0, %5 ], [ %23, %20 ]
  %31 = phi i8 [ 0, %5 ], [ %24, %20 ]
  %32 = phi i8 [ 0, %5 ], [ %25, %20 ]
  %33 = phi i8 [ 0, %5 ], [ %26, %20 ]
  %34 = phi i8 [ 0, %5 ], [ %27, %20 ]
  %35 = phi i8 [ 0, %5 ], [ %28, %20 ]
  %36 = phi i64 [ 0, %5 ], [ %106, %20 ]
  %37 = phi i8 [ 0, %5 ], [ %22, %20 ]
  %38 = phi i8 [ 0, %5 ], [ %21, %20 ]
  store i8 %35, i8* %2, align 1
  %39 = getelementptr inbounds i8, i8* %2, i64 1
  store i8 %34, i8* %39, align 1
  %40 = getelementptr inbounds i8, i8* %2, i64 2
  store i8 %33, i8* %40, align 1
  %41 = getelementptr inbounds i8, i8* %2, i64 3
  store i8 %32, i8* %41, align 1
  %42 = getelementptr inbounds i8, i8* %2, i64 4
  store i8 %31, i8* %42, align 1
  %43 = getelementptr inbounds i8, i8* %2, i64 5
  store i8 %30, i8* %43, align 1
  %44 = getelementptr inbounds i8, i8* %2, i64 6
  store i8 %37, i8* %44, align 1
  %45 = getelementptr inbounds i8, i8* %2, i64 7
  store i8 %38, i8* %45, align 1
  %46 = trunc i64 %36 to i8
  %47 = getelementptr inbounds i8, i8* %2, i64 8
  store i8 %46, i8* %47, align 1
  %48 = lshr i64 %36, 8
  %49 = trunc i64 %48 to i8
  %50 = getelementptr inbounds i8, i8* %2, i64 9
  store i8 %49, i8* %50, align 1
  %51 = lshr i64 %36, 16
  %52 = trunc i64 %51 to i8
  %53 = getelementptr inbounds i8, i8* %2, i64 10
  store i8 %52, i8* %53, align 1
  %54 = lshr i64 %36, 24
  %55 = trunc i64 %54 to i8
  %56 = getelementptr inbounds i8, i8* %2, i64 11
  store i8 %55, i8* %56, align 1
  %57 = lshr i64 %36, 32
  %58 = trunc i64 %57 to i8
  %59 = getelementptr inbounds i8, i8* %2, i64 12
  store i8 %58, i8* %59, align 1
  %60 = lshr i64 %36, 40
  %61 = trunc i64 %60 to i8
  %62 = getelementptr inbounds i8, i8* %2, i64 13
  store i8 %61, i8* %62, align 1
  %63 = lshr i64 %36, 48
  %64 = trunc i64 %63 to i8
  %65 = getelementptr inbounds i8, i8* %2, i64 14
  store i8 %64, i8* %65, align 1
  %66 = lshr i64 %36, 56
  %67 = trunc i64 %66 to i8
  %68 = getelementptr inbounds i8, i8* %2, i64 15
  store i8 %67, i8* %68, align 1
  call void @llvm.lifetime.end(i64 16, i8* nonnull %9) 
  ret %struct.Memory* %0

; <label>:69:                                     ; preds = %69, %14
  %70 = phi i64 [ %12, %14 ], [ %114, %69 ]
  %71 = phi i64 [ 0, %14 ], [ %115, %69 ]
  %72 = phi i64 [ 0, %14 ], [ %113, %69 ]
  %73 = phi i64 [ 0, %14 ], [ %112, %69 ]
  %74 = phi i64 [ 0, %14 ], [ %106, %69 ]
  %75 = phi i64 [ 0, %14 ], [ %105, %69 ]
  %76 = phi i64 [ 0, %14 ], [ %107, %69 ]
  %77 = phi i64 [ 0, %14 ], [ %108, %69 ]
  %78 = phi i64 [ 0, %14 ], [ %109, %69 ]
  %79 = phi i64 [ 0, %14 ], [ %110, %69 ]
  %80 = phi i64 [ 0, %14 ], [ %111, %69 ]
  %81 = shl nuw i64 %72, 56
  %82 = shl nuw i64 %73, 48
  %83 = and i64 %82, 71776119061217280
  %84 = shl nuw i64 %80, 40
  %85 = and i64 %84, 280375465082880
  %86 = shl nuw i64 %79, 32
  %87 = and i64 %86, 1095216660480
  %88 = shl nuw i64 %78, 24
  %89 = and i64 %88, 4278190080
  %90 = shl nuw i64 %77, 16
  %91 = and i64 %90, 16711680
  %92 = shl nuw i64 %76, 8
  %93 = and i64 %92, 65280
  %94 = and i64 %75, 255
  %95 = or i64 %87, %85
  %96 = or i64 %95, %89
  %97 = or i64 %96, %91
  %98 = or i64 %97, %93
  %99 = or i64 %98, %94
  %100 = or i64 %99, %83
  %101 = or i64 %100, %81
  %102 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %8, i64 0, i32 0, i64 %70
  %103 = load i8, i8* %102, align 1
  call void @llvm.lifetime.start(i64 16, i8* nonnull %15)
  store i64 %101, i64* %16, align 8
  store i64 %74, i64* %17, align 8
  %104 = getelementptr inbounds [16 x i8], [16 x i8]* %18, i64 0, i64 %71
  store i8 %103, i8* %104, align 1
  %105 = load i64, i64* %16, align 8
  %106 = load i64, i64* %17, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %15)
  %107 = lshr i64 %105, 8
  %108 = lshr i64 %105, 16
  %109 = lshr i64 %105, 24
  %110 = lshr i64 %105, 32
  %111 = lshr i64 %105, 40
  %112 = lshr i64 %105, 48
  %113 = lshr i64 %105, 56
  %114 = add nuw nsw i64 %70, 1
  %115 = add nuw nsw i64 %71, 1
  %116 = icmp eq i64 %115, %19
  br i1 %116, label %20, label %69
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L5MINSSI3VnWI8vec128_tE2VnIS2_E3MVnI7vec32_tEEEP6MemorySA_R5StateT_T0_T1_(%struct.Memory* returned, %struct.State* nocapture readnone dereferenceable(3376), i8* nocapture, i8* nocapture readonly, i64)  {
  %6 = bitcast i8* %3 to <2 x float>*
  %7 = load <2 x float>, <2 x float>* %6, align 1
  %8 = getelementptr inbounds i8, i8* %3, i64 8
  %9 = bitcast i8* %8 to <2 x i32>*
  %10 = load <2 x i32>, <2 x i32>* %9, align 1
  %11 = extractelement <2 x float> %7, i32 0
  %12 = inttoptr i64 %4 to float*
  %13 = load float, float* %12
  %14 = fcmp uno float %11, %13
  br i1 %14, label %22, label %15

; <label>:15:                                     ; preds = %5
  %16 = fcmp oeq float %11, 0.000000e+00
  %17 = fcmp oeq float %13, 0.000000e+00
  %18 = and i1 %16, %17
  br i1 %18, label %22, label %19

; <label>:19:                                     ; preds = %15
  %20 = fcmp ult float %11, %13
  br i1 %20, label %22, label %21

; <label>:21:                                     ; preds = %19
  br label %22

; <label>:22:                                     ; preds = %21, %19, %15, %5
  %23 = phi float [ %13, %21 ], [ %11, %19 ], [ %13, %5 ], [ %13, %15 ]
  %24 = bitcast i8* %2 to float*
  store float %23, float* %24, align 1
  %25 = bitcast <2 x float> %7 to <2 x i32>
  %26 = extractelement <2 x i32> %25, i32 1
  %27 = getelementptr inbounds i8, i8* %2, i64 4
  %28 = bitcast i8* %27 to i32*
  store i32 %26, i32* %28, align 1
  %29 = extractelement <2 x i32> %10, i32 0
  %30 = getelementptr inbounds i8, i8* %2, i64 8
  %31 = bitcast i8* %30 to i32*
  store i32 %29, i32* %31, align 1
  %32 = extractelement <2 x i32> %10, i32 1
  %33 = getelementptr inbounds i8, i8* %2, i64 12
  %34 = bitcast i8* %33 to i32*
  store i32 %32, i32* %34, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L5MINSSI3VnWI8vec128_tE2VnIS2_ES5_EEP6MemoryS7_R5StateT_T0_T1_(%struct.Memory* readnone returned, %struct.State* nocapture readnone dereferenceable(3376), i8* nocapture, i8* nocapture readonly, i8* nocapture readonly)  {
  %6 = bitcast i8* %3 to <2 x float>*
  %7 = load <2 x float>, <2 x float>* %6, align 1
  %8 = getelementptr inbounds i8, i8* %3, i64 8
  %9 = bitcast i8* %8 to <2 x i32>*
  %10 = load <2 x i32>, <2 x i32>* %9, align 1
  %11 = extractelement <2 x float> %7, i32 0
  %12 = bitcast i8* %4 to <2 x float>*
  %13 = load <2 x float>, <2 x float>* %12, align 1
  %14 = extractelement <2 x float> %13, i32 0
  %15 = fcmp uno float %11, %14
  br i1 %15, label %23, label %16

; <label>:16:                                     ; preds = %5
  %17 = fcmp oeq float %11, 0.000000e+00
  %18 = fcmp oeq float %14, 0.000000e+00
  %19 = and i1 %17, %18
  br i1 %19, label %23, label %20

; <label>:20:                                     ; preds = %16
  %21 = fcmp ult float %11, %14
  br i1 %21, label %23, label %22

; <label>:22:                                     ; preds = %20
  br label %23

; <label>:23:                                     ; preds = %22, %20, %16, %5
  %24 = phi float [ %14, %22 ], [ %11, %20 ], [ %14, %5 ], [ %14, %16 ]
  %25 = bitcast i8* %2 to float*
  store float %24, float* %25, align 1
  %26 = bitcast <2 x float> %7 to <2 x i32>
  %27 = extractelement <2 x i32> %26, i32 1
  %28 = getelementptr inbounds i8, i8* %2, i64 4
  %29 = bitcast i8* %28 to i32*
  store i32 %27, i32* %29, align 1
  %30 = extractelement <2 x i32> %10, i32 0
  %31 = getelementptr inbounds i8, i8* %2, i64 8
  %32 = bitcast i8* %31 to i32*
  store i32 %30, i32* %32, align 1
  %33 = extractelement <2 x i32> %10, i32 1
  %34 = getelementptr inbounds i8, i8* %2, i64 12
  %35 = bitcast i8* %34 to i32*
  store i32 %33, i32* %35, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L5MINSDI3VnWI8vec128_tE2VnIS2_E3MVnI7vec64_tEEEP6MemorySA_R5StateT_T0_T1_(%struct.Memory* returned, %struct.State* nocapture readnone dereferenceable(3376), i8* nocapture, i8* nocapture readonly, i64)  {
  %6 = bitcast i8* %3 to double*
  %7 = load double, double* %6, align 1
  %8 = getelementptr inbounds i8, i8* %3, i64 8
  %9 = bitcast i8* %8 to i64*
  %10 = load i64, i64* %9, align 1
  %11 = inttoptr i64 %4 to double*
  %12 = load double, double* %11
  %13 = fcmp uno double %7, %12
  br i1 %13, label %21, label %14

; <label>:14:                                     ; preds = %5
  %15 = fcmp oeq double %7, 0.000000e+00
  %16 = fcmp oeq double %12, 0.000000e+00
  %17 = and i1 %15, %16
  br i1 %17, label %21, label %18

; <label>:18:                                     ; preds = %14
  %19 = fcmp ult double %7, %12
  br i1 %19, label %21, label %20

; <label>:20:                                     ; preds = %18
  br label %21

; <label>:21:                                     ; preds = %20, %18, %14, %5
  %22 = phi double [ %12, %20 ], [ %7, %18 ], [ %12, %5 ], [ %12, %14 ]
  %23 = bitcast i8* %2 to double*
  store double %22, double* %23, align 1
  %24 = getelementptr inbounds i8, i8* %2, i64 8
  %25 = bitcast i8* %24 to i64*
  store i64 %10, i64* %25, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L5MINSDI3VnWI8vec128_tE2VnIS2_ES5_EEP6MemoryS7_R5StateT_T0_T1_(%struct.Memory* readnone returned, %struct.State* nocapture readnone dereferenceable(3376), i8* nocapture, i8* nocapture readonly, i8* nocapture readonly)  {
  %6 = bitcast i8* %3 to double*
  %7 = load double, double* %6, align 1
  %8 = getelementptr inbounds i8, i8* %3, i64 8
  %9 = bitcast i8* %8 to i64*
  %10 = load i64, i64* %9, align 1
  %11 = bitcast i8* %4 to double*
  %12 = load double, double* %11, align 1
  %13 = fcmp uno double %7, %12
  br i1 %13, label %21, label %14

; <label>:14:                                     ; preds = %5
  %15 = fcmp oeq double %7, 0.000000e+00
  %16 = fcmp oeq double %12, 0.000000e+00
  %17 = and i1 %15, %16
  br i1 %17, label %21, label %18

; <label>:18:                                     ; preds = %14
  %19 = fcmp ult double %7, %12
  br i1 %19, label %21, label %20

; <label>:20:                                     ; preds = %18
  br label %21

; <label>:21:                                     ; preds = %20, %18, %14, %5
  %22 = phi double [ %12, %20 ], [ %7, %18 ], [ %12, %5 ], [ %12, %14 ]
  %23 = bitcast i8* %2 to double*
  store double %22, double* %23, align 1
  %24 = getelementptr inbounds i8, i8* %2, i64 8
  %25 = bitcast i8* %24 to i64*
  store i64 %10, i64* %25, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L5MAXSSI3VnWI8vec128_tE2VnIS2_E3MVnI7vec32_tEEEP6MemorySA_R5StateT_T0_T1_(%struct.Memory* returned, %struct.State* nocapture readnone dereferenceable(3376), i8* nocapture, i8* nocapture readonly, i64)  {
  %6 = bitcast i8* %3 to <2 x float>*
  %7 = load <2 x float>, <2 x float>* %6, align 1
  %8 = getelementptr inbounds i8, i8* %3, i64 8
  %9 = bitcast i8* %8 to <2 x i32>*
  %10 = load <2 x i32>, <2 x i32>* %9, align 1
  %11 = extractelement <2 x float> %7, i32 0
  %12 = inttoptr i64 %4 to float*
  %13 = load float, float* %12
  %14 = fcmp uno float %11, %13
  br i1 %14, label %22, label %15

; <label>:15:                                     ; preds = %5
  %16 = fcmp oeq float %11, 0.000000e+00
  %17 = fcmp oeq float %13, 0.000000e+00
  %18 = and i1 %16, %17
  br i1 %18, label %22, label %19

; <label>:19:                                     ; preds = %15
  %20 = fcmp olt float %11, %13
  br i1 %20, label %21, label %22

; <label>:21:                                     ; preds = %19
  br label %22

; <label>:22:                                     ; preds = %21, %19, %15, %5
  %23 = phi float [ %13, %21 ], [ %11, %19 ], [ %13, %5 ], [ %13, %15 ]
  %24 = bitcast i8* %2 to float*
  store float %23, float* %24, align 1
  %25 = bitcast <2 x float> %7 to <2 x i32>
  %26 = extractelement <2 x i32> %25, i32 1
  %27 = getelementptr inbounds i8, i8* %2, i64 4
  %28 = bitcast i8* %27 to i32*
  store i32 %26, i32* %28, align 1
  %29 = extractelement <2 x i32> %10, i32 0
  %30 = getelementptr inbounds i8, i8* %2, i64 8
  %31 = bitcast i8* %30 to i32*
  store i32 %29, i32* %31, align 1
  %32 = extractelement <2 x i32> %10, i32 1
  %33 = getelementptr inbounds i8, i8* %2, i64 12
  %34 = bitcast i8* %33 to i32*
  store i32 %32, i32* %34, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L5MAXSSI3VnWI8vec128_tE2VnIS2_ES5_EEP6MemoryS7_R5StateT_T0_T1_(%struct.Memory* readnone returned, %struct.State* nocapture readnone dereferenceable(3376), i8* nocapture, i8* nocapture readonly, i8* nocapture readonly)  {
  %6 = bitcast i8* %3 to <2 x float>*
  %7 = load <2 x float>, <2 x float>* %6, align 1
  %8 = getelementptr inbounds i8, i8* %3, i64 8
  %9 = bitcast i8* %8 to <2 x i32>*
  %10 = load <2 x i32>, <2 x i32>* %9, align 1
  %11 = extractelement <2 x float> %7, i32 0
  %12 = bitcast i8* %4 to <2 x float>*
  %13 = load <2 x float>, <2 x float>* %12, align 1
  %14 = extractelement <2 x float> %13, i32 0
  %15 = fcmp uno float %11, %14
  br i1 %15, label %23, label %16

; <label>:16:                                     ; preds = %5
  %17 = fcmp oeq float %11, 0.000000e+00
  %18 = fcmp oeq float %14, 0.000000e+00
  %19 = and i1 %17, %18
  br i1 %19, label %23, label %20

; <label>:20:                                     ; preds = %16
  %21 = fcmp olt float %11, %14
  br i1 %21, label %22, label %23

; <label>:22:                                     ; preds = %20
  br label %23

; <label>:23:                                     ; preds = %22, %20, %16, %5
  %24 = phi float [ %14, %22 ], [ %11, %20 ], [ %14, %5 ], [ %14, %16 ]
  %25 = bitcast i8* %2 to float*
  store float %24, float* %25, align 1
  %26 = bitcast <2 x float> %7 to <2 x i32>
  %27 = extractelement <2 x i32> %26, i32 1
  %28 = getelementptr inbounds i8, i8* %2, i64 4
  %29 = bitcast i8* %28 to i32*
  store i32 %27, i32* %29, align 1
  %30 = extractelement <2 x i32> %10, i32 0
  %31 = getelementptr inbounds i8, i8* %2, i64 8
  %32 = bitcast i8* %31 to i32*
  store i32 %30, i32* %32, align 1
  %33 = extractelement <2 x i32> %10, i32 1
  %34 = getelementptr inbounds i8, i8* %2, i64 12
  %35 = bitcast i8* %34 to i32*
  store i32 %33, i32* %35, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L5MAXSDI3VnWI8vec128_tE2VnIS2_E3MVnI7vec64_tEEEP6MemorySA_R5StateT_T0_T1_(%struct.Memory* returned, %struct.State* nocapture readnone dereferenceable(3376), i8* nocapture, i8* nocapture readonly, i64)  {
  %6 = bitcast i8* %3 to double*
  %7 = load double, double* %6, align 1
  %8 = getelementptr inbounds i8, i8* %3, i64 8
  %9 = bitcast i8* %8 to i64*
  %10 = load i64, i64* %9, align 1
  %11 = inttoptr i64 %4 to double*
  %12 = load double, double* %11
  %13 = fcmp uno double %7, %12
  br i1 %13, label %21, label %14

; <label>:14:                                     ; preds = %5
  %15 = fcmp oeq double %7, 0.000000e+00
  %16 = fcmp oeq double %12, 0.000000e+00
  %17 = and i1 %15, %16
  br i1 %17, label %21, label %18

; <label>:18:                                     ; preds = %14
  %19 = fcmp olt double %7, %12
  br i1 %19, label %20, label %21

; <label>:20:                                     ; preds = %18
  br label %21

; <label>:21:                                     ; preds = %20, %18, %14, %5
  %22 = phi double [ %12, %20 ], [ %7, %18 ], [ %12, %5 ], [ %12, %14 ]
  %23 = bitcast i8* %2 to double*
  store double %22, double* %23, align 1
  %24 = getelementptr inbounds i8, i8* %2, i64 8
  %25 = bitcast i8* %24 to i64*
  store i64 %10, i64* %25, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L5MAXSDI3VnWI8vec128_tE2VnIS2_ES5_EEP6MemoryS7_R5StateT_T0_T1_(%struct.Memory* readnone returned, %struct.State* nocapture readnone dereferenceable(3376), i8* nocapture, i8* nocapture readonly, i8* nocapture readonly)  {
  %6 = bitcast i8* %3 to double*
  %7 = load double, double* %6, align 1
  %8 = getelementptr inbounds i8, i8* %3, i64 8
  %9 = bitcast i8* %8 to i64*
  %10 = load i64, i64* %9, align 1
  %11 = bitcast i8* %4 to double*
  %12 = load double, double* %11, align 1
  %13 = fcmp uno double %7, %12
  br i1 %13, label %21, label %14

; <label>:14:                                     ; preds = %5
  %15 = fcmp oeq double %7, 0.000000e+00
  %16 = fcmp oeq double %12, 0.000000e+00
  %17 = and i1 %15, %16
  br i1 %17, label %21, label %18

; <label>:18:                                     ; preds = %14
  %19 = fcmp olt double %7, %12
  br i1 %19, label %20, label %21

; <label>:20:                                     ; preds = %18
  br label %21

; <label>:21:                                     ; preds = %20, %18, %14, %5
  %22 = phi double [ %12, %20 ], [ %7, %18 ], [ %12, %5 ], [ %12, %14 ]
  %23 = bitcast i8* %2 to double*
  store double %22, double* %23, align 1
  %24 = getelementptr inbounds i8, i8* %2, i64 8
  %25 = bitcast i8* %24 to i64*
  store i64 %10, i64* %25, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L5MINPSI3VnWI8vec128_tE2VnIS2_E3MVnIS2_EEEP6MemoryS9_R5StateT_T0_T1_(%struct.Memory* returned, %struct.State* nocapture readnone dereferenceable(3376), i8* nocapture, i8* nocapture readonly, i64)  {
  %6 = alloca { <2 x float>, <2 x float> }, align 8
  %7 = bitcast i8* %3 to i64*
  %8 = load i64, i64* %7, align 1
  %9 = getelementptr inbounds i8, i8* %3, i64 8
  %10 = bitcast i8* %9 to i64*
  %11 = load i64, i64* %10, align 1
  %12 = inttoptr i64 %4 to float*
  %13 = load float, float* %12
  %14 = add i64 %4, 4
  %15 = inttoptr i64 %14 to float*
  %16 = load float, float* %15
  %17 = add i64 %4, 8
  %18 = inttoptr i64 %17 to float*
  %19 = load float, float* %18
  %20 = add i64 %4, 12
  %21 = inttoptr i64 %20 to float*
  %22 = load float, float* %21
  %23 = bitcast { <2 x float>, <2 x float> }* %6 to i8*
  %24 = bitcast { <2 x float>, <2 x float> }* %6 to i64*
  %25 = getelementptr inbounds { <2 x float>, <2 x float> }, { <2 x float>, <2 x float> }* %6, i64 0, i32 1
  %26 = bitcast <2 x float>* %25 to i64*
  %27 = bitcast { <2 x float>, <2 x float> }* %6 to [4 x float]*
  %28 = getelementptr inbounds { <2 x float>, <2 x float> }, { <2 x float>, <2 x float> }* %6, i64 0, i32 1, i64 0
  %29 = bitcast float* %28 to i64*
  %30 = trunc i64 %8 to i32
  %31 = bitcast i32 %30 to float
  %32 = fcmp uno float %31, %13
  br i1 %32, label %40, label %33

; <label>:33:                                     ; preds = %5
  %34 = fcmp oeq float %31, 0.000000e+00
  %35 = fcmp oeq float %13, 0.000000e+00
  %36 = and i1 %34, %35
  br i1 %36, label %40, label %37

; <label>:37:                                     ; preds = %33
  %38 = fcmp olt float %13, %31
  br i1 %38, label %39, label %40

; <label>:39:                                     ; preds = %37
  br label %40

; <label>:40:                                     ; preds = %39, %37, %33, %5
  %41 = phi float [ %13, %39 ], [ %31, %37 ], [ %13, %5 ], [ %13, %33 ]
  call void @llvm.lifetime.start(i64 16, i8* nonnull %23)
  store i64 %8, i64* %24, align 8
  store i64 %11, i64* %26, align 8
  %42 = getelementptr inbounds { <2 x float>, <2 x float> }, { <2 x float>, <2 x float> }* %6, i64 0, i32 0, i64 0
  store float %41, float* %42, align 8
  %43 = load i64, i64* %24, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %23)
  %44 = lshr i64 %43, 32
  %45 = trunc i64 %44 to i32
  %46 = bitcast i32 %45 to float
  %47 = fcmp uno float %46, %16
  br i1 %47, label %55, label %48

; <label>:48:                                     ; preds = %40
  %49 = fcmp oeq float %46, 0.000000e+00
  %50 = fcmp oeq float %16, 0.000000e+00
  %51 = and i1 %49, %50
  br i1 %51, label %55, label %52

; <label>:52:                                     ; preds = %48
  %53 = fcmp olt float %16, %46
  br i1 %53, label %54, label %55

; <label>:54:                                     ; preds = %52
  br label %55

; <label>:55:                                     ; preds = %54, %52, %48, %40
  %56 = phi float [ %16, %54 ], [ %46, %52 ], [ %16, %40 ], [ %16, %48 ]
  call void @llvm.lifetime.start(i64 16, i8* nonnull %23)
  store i64 %43, i64* %24, align 8
  store i64 %11, i64* %26, align 8
  %57 = getelementptr inbounds [4 x float], [4 x float]* %27, i64 0, i64 1
  store float %56, float* %57, align 4
  %58 = load i64, i64* %24, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %23)
  %59 = trunc i64 %11 to i32
  %60 = bitcast i32 %59 to float
  %61 = fcmp uno float %60, %19
  br i1 %61, label %69, label %62

; <label>:62:                                     ; preds = %55
  %63 = fcmp oeq float %60, 0.000000e+00
  %64 = fcmp oeq float %19, 0.000000e+00
  %65 = and i1 %63, %64
  br i1 %65, label %69, label %66

; <label>:66:                                     ; preds = %62
  %67 = fcmp olt float %19, %60
  br i1 %67, label %68, label %69

; <label>:68:                                     ; preds = %66
  br label %69

; <label>:69:                                     ; preds = %68, %66, %62, %55
  %70 = phi float [ %19, %68 ], [ %60, %66 ], [ %19, %55 ], [ %19, %62 ]
  call void @llvm.lifetime.start(i64 16, i8* nonnull %23)
  store i64 %58, i64* %24, align 8
  store i64 %11, i64* %26, align 8
  %71 = getelementptr inbounds { <2 x float>, <2 x float> }, { <2 x float>, <2 x float> }* %6, i64 0, i32 1, i64 0
  store float %70, float* %71, align 8
  %72 = load i64, i64* %29, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %23)
  %73 = lshr i64 %72, 32
  %74 = trunc i64 %73 to i32
  %75 = bitcast i32 %74 to float
  %76 = fcmp uno float %75, %22
  br i1 %76, label %84, label %77

; <label>:77:                                     ; preds = %69
  %78 = fcmp oeq float %75, 0.000000e+00
  %79 = fcmp oeq float %22, 0.000000e+00
  %80 = and i1 %78, %79
  br i1 %80, label %84, label %81

; <label>:81:                                     ; preds = %77
  %82 = fcmp olt float %22, %75
  br i1 %82, label %83, label %84

; <label>:83:                                     ; preds = %81
  br label %84

; <label>:84:                                     ; preds = %83, %81, %77, %69
  %85 = phi float [ %22, %83 ], [ %75, %81 ], [ %22, %69 ], [ %22, %77 ]
  call void @llvm.lifetime.start(i64 16, i8* nonnull %23)
  store i64 %58, i64* %24, align 8
  store i64 %72, i64* %26, align 8
  %86 = getelementptr inbounds [4 x float], [4 x float]* %27, i64 0, i64 3
  store float %85, float* %86, align 4
  %87 = load i64, i64* %29, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %23)
  %88 = trunc i64 %58 to i32
  %89 = bitcast i8* %2 to i32*
  store i32 %88, i32* %89, align 1
  %90 = lshr i64 %58, 32
  %91 = trunc i64 %90 to i32
  %92 = getelementptr inbounds i8, i8* %2, i64 4
  %93 = bitcast i8* %92 to i32*
  store i32 %91, i32* %93, align 1
  %94 = trunc i64 %87 to i32
  %95 = getelementptr inbounds i8, i8* %2, i64 8
  %96 = bitcast i8* %95 to i32*
  store i32 %94, i32* %96, align 1
  %97 = lshr i64 %87, 32
  %98 = trunc i64 %97 to i32
  %99 = getelementptr inbounds i8, i8* %2, i64 12
  %100 = bitcast i8* %99 to i32*
  store i32 %98, i32* %100, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L5MINPSI3VnWI8vec128_tE2VnIS2_ES5_EEP6MemoryS7_R5StateT_T0_T1_(%struct.Memory* readnone returned, %struct.State* nocapture readnone dereferenceable(3376), i8* nocapture, i8* nocapture readonly, i8* nocapture readonly)  {
  %6 = alloca { <2 x float>, <2 x float> }, align 8
  %7 = bitcast i8* %3 to i64*
  %8 = load i64, i64* %7, align 1
  %9 = getelementptr inbounds i8, i8* %3, i64 8
  %10 = bitcast i8* %9 to i64*
  %11 = load i64, i64* %10, align 1
  %12 = bitcast i8* %4 to i64*
  %13 = load i64, i64* %12, align 1
  %14 = getelementptr inbounds i8, i8* %4, i64 8
  %15 = bitcast i8* %14 to i64*
  %16 = load i64, i64* %15, align 1
  %17 = bitcast { <2 x float>, <2 x float> }* %6 to i8*
  %18 = bitcast { <2 x float>, <2 x float> }* %6 to i64*
  %19 = getelementptr inbounds { <2 x float>, <2 x float> }, { <2 x float>, <2 x float> }* %6, i64 0, i32 1
  %20 = bitcast <2 x float>* %19 to i64*
  %21 = bitcast { <2 x float>, <2 x float> }* %6 to [4 x float]*
  %22 = getelementptr inbounds { <2 x float>, <2 x float> }, { <2 x float>, <2 x float> }* %6, i64 0, i32 1, i64 0
  %23 = bitcast float* %22 to i64*
  %24 = trunc i64 %8 to i32
  %25 = bitcast i32 %24 to float
  %26 = trunc i64 %13 to i32
  %27 = bitcast i32 %26 to float
  %28 = fcmp uno float %25, %27
  %29 = lshr i64 %13, 32
  %30 = trunc i64 %29 to i32
  %31 = bitcast i32 %30 to float
  %32 = trunc i64 %16 to i32
  %33 = bitcast i32 %32 to float
  %34 = lshr i64 %16, 32
  %35 = trunc i64 %34 to i32
  %36 = bitcast i32 %35 to float
  br i1 %28, label %44, label %37

; <label>:37:                                     ; preds = %5
  %38 = fcmp oeq float %25, 0.000000e+00
  %39 = fcmp oeq float %27, 0.000000e+00
  %40 = and i1 %38, %39
  br i1 %40, label %44, label %41

; <label>:41:                                     ; preds = %37
  %42 = fcmp olt float %27, %25
  br i1 %42, label %43, label %44

; <label>:43:                                     ; preds = %41
  br label %44

; <label>:44:                                     ; preds = %43, %41, %37, %5
  %45 = phi float [ %27, %43 ], [ %25, %41 ], [ %27, %5 ], [ %27, %37 ]
  call void @llvm.lifetime.start(i64 16, i8* nonnull %17)
  store i64 %8, i64* %18, align 8
  store i64 %11, i64* %20, align 8
  %46 = getelementptr inbounds { <2 x float>, <2 x float> }, { <2 x float>, <2 x float> }* %6, i64 0, i32 0, i64 0
  store float %45, float* %46, align 8
  %47 = load i64, i64* %18, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %17)
  %48 = lshr i64 %47, 32
  %49 = trunc i64 %48 to i32
  %50 = bitcast i32 %49 to float
  %51 = fcmp uno float %50, %31
  br i1 %51, label %59, label %52

; <label>:52:                                     ; preds = %44
  %53 = fcmp oeq float %50, 0.000000e+00
  %54 = fcmp oeq float %31, 0.000000e+00
  %55 = and i1 %53, %54
  br i1 %55, label %59, label %56

; <label>:56:                                     ; preds = %52
  %57 = fcmp olt float %31, %50
  br i1 %57, label %58, label %59

; <label>:58:                                     ; preds = %56
  br label %59

; <label>:59:                                     ; preds = %58, %56, %52, %44
  %60 = phi float [ %31, %58 ], [ %50, %56 ], [ %31, %44 ], [ %31, %52 ]
  call void @llvm.lifetime.start(i64 16, i8* nonnull %17)
  store i64 %47, i64* %18, align 8
  store i64 %11, i64* %20, align 8
  %61 = getelementptr inbounds [4 x float], [4 x float]* %21, i64 0, i64 1
  store float %60, float* %61, align 4
  %62 = load i64, i64* %18, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %17)
  %63 = trunc i64 %11 to i32
  %64 = bitcast i32 %63 to float
  %65 = fcmp uno float %64, %33
  br i1 %65, label %73, label %66

; <label>:66:                                     ; preds = %59
  %67 = fcmp oeq float %64, 0.000000e+00
  %68 = fcmp oeq float %33, 0.000000e+00
  %69 = and i1 %67, %68
  br i1 %69, label %73, label %70

; <label>:70:                                     ; preds = %66
  %71 = fcmp olt float %33, %64
  br i1 %71, label %72, label %73

; <label>:72:                                     ; preds = %70
  br label %73

; <label>:73:                                     ; preds = %72, %70, %66, %59
  %74 = phi float [ %33, %72 ], [ %64, %70 ], [ %33, %59 ], [ %33, %66 ]
  call void @llvm.lifetime.start(i64 16, i8* nonnull %17)
  store i64 %62, i64* %18, align 8
  store i64 %11, i64* %20, align 8
  %75 = getelementptr inbounds { <2 x float>, <2 x float> }, { <2 x float>, <2 x float> }* %6, i64 0, i32 1, i64 0
  store float %74, float* %75, align 8
  %76 = load i64, i64* %23, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %17)
  %77 = lshr i64 %76, 32
  %78 = trunc i64 %77 to i32
  %79 = bitcast i32 %78 to float
  %80 = fcmp uno float %79, %36
  br i1 %80, label %88, label %81

; <label>:81:                                     ; preds = %73
  %82 = fcmp oeq float %79, 0.000000e+00
  %83 = fcmp oeq float %36, 0.000000e+00
  %84 = and i1 %82, %83
  br i1 %84, label %88, label %85

; <label>:85:                                     ; preds = %81
  %86 = fcmp olt float %36, %79
  br i1 %86, label %87, label %88

; <label>:87:                                     ; preds = %85
  br label %88

; <label>:88:                                     ; preds = %87, %85, %81, %73
  %89 = phi float [ %36, %87 ], [ %79, %85 ], [ %36, %73 ], [ %36, %81 ]
  call void @llvm.lifetime.start(i64 16, i8* nonnull %17)
  store i64 %62, i64* %18, align 8
  store i64 %76, i64* %20, align 8
  %90 = getelementptr inbounds [4 x float], [4 x float]* %21, i64 0, i64 3
  store float %89, float* %90, align 4
  %91 = load i64, i64* %23, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %17)
  %92 = trunc i64 %62 to i32
  %93 = bitcast i8* %2 to i32*
  store i32 %92, i32* %93, align 1
  %94 = lshr i64 %62, 32
  %95 = trunc i64 %94 to i32
  %96 = getelementptr inbounds i8, i8* %2, i64 4
  %97 = bitcast i8* %96 to i32*
  store i32 %95, i32* %97, align 1
  %98 = trunc i64 %91 to i32
  %99 = getelementptr inbounds i8, i8* %2, i64 8
  %100 = bitcast i8* %99 to i32*
  store i32 %98, i32* %100, align 1
  %101 = lshr i64 %91, 32
  %102 = trunc i64 %101 to i32
  %103 = getelementptr inbounds i8, i8* %2, i64 12
  %104 = bitcast i8* %103 to i32*
  store i32 %102, i32* %104, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L5MAXPSI3VnWI8vec128_tE2VnIS2_ES5_EEP6MemoryS7_R5StateT_T0_T1_(%struct.Memory* readnone returned, %struct.State* nocapture readnone dereferenceable(3376), i8* nocapture, i8* nocapture readonly, i8* nocapture readonly)  {
  %6 = alloca { <2 x float>, <2 x float> }, align 8
  %7 = bitcast i8* %3 to i64*
  %8 = load i64, i64* %7, align 1
  %9 = getelementptr inbounds i8, i8* %3, i64 8
  %10 = bitcast i8* %9 to i64*
  %11 = load i64, i64* %10, align 1
  %12 = bitcast i8* %4 to i64*
  %13 = load i64, i64* %12, align 1
  %14 = getelementptr inbounds i8, i8* %4, i64 8
  %15 = bitcast i8* %14 to i64*
  %16 = load i64, i64* %15, align 1
  %17 = bitcast { <2 x float>, <2 x float> }* %6 to i8*
  %18 = bitcast { <2 x float>, <2 x float> }* %6 to i64*
  %19 = getelementptr inbounds { <2 x float>, <2 x float> }, { <2 x float>, <2 x float> }* %6, i64 0, i32 1
  %20 = bitcast <2 x float>* %19 to i64*
  %21 = bitcast { <2 x float>, <2 x float> }* %6 to [4 x float]*
  %22 = getelementptr inbounds { <2 x float>, <2 x float> }, { <2 x float>, <2 x float> }* %6, i64 0, i32 1, i64 0
  %23 = bitcast float* %22 to i64*
  %24 = trunc i64 %8 to i32
  %25 = bitcast i32 %24 to float
  %26 = trunc i64 %13 to i32
  %27 = bitcast i32 %26 to float
  %28 = fcmp uno float %25, %27
  %29 = lshr i64 %13, 32
  %30 = trunc i64 %29 to i32
  %31 = bitcast i32 %30 to float
  %32 = trunc i64 %16 to i32
  %33 = bitcast i32 %32 to float
  %34 = lshr i64 %16, 32
  %35 = trunc i64 %34 to i32
  %36 = bitcast i32 %35 to float
  br i1 %28, label %44, label %37

; <label>:37:                                     ; preds = %5
  %38 = fcmp oeq float %25, 0.000000e+00
  %39 = fcmp oeq float %27, 0.000000e+00
  %40 = and i1 %38, %39
  br i1 %40, label %44, label %41

; <label>:41:                                     ; preds = %37
  %42 = fcmp ogt float %27, %25
  br i1 %42, label %43, label %44

; <label>:43:                                     ; preds = %41
  br label %44

; <label>:44:                                     ; preds = %43, %41, %37, %5
  %45 = phi float [ %27, %43 ], [ %25, %41 ], [ %27, %5 ], [ %27, %37 ]
  call void @llvm.lifetime.start(i64 16, i8* nonnull %17)
  store i64 %8, i64* %18, align 8
  store i64 %11, i64* %20, align 8
  %46 = getelementptr inbounds { <2 x float>, <2 x float> }, { <2 x float>, <2 x float> }* %6, i64 0, i32 0, i64 0
  store float %45, float* %46, align 8
  %47 = load i64, i64* %18, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %17)
  %48 = lshr i64 %47, 32
  %49 = trunc i64 %48 to i32
  %50 = bitcast i32 %49 to float
  %51 = fcmp uno float %50, %31
  br i1 %51, label %59, label %52

; <label>:52:                                     ; preds = %44
  %53 = fcmp oeq float %50, 0.000000e+00
  %54 = fcmp oeq float %31, 0.000000e+00
  %55 = and i1 %53, %54
  br i1 %55, label %59, label %56

; <label>:56:                                     ; preds = %52
  %57 = fcmp ogt float %31, %50
  br i1 %57, label %58, label %59

; <label>:58:                                     ; preds = %56
  br label %59

; <label>:59:                                     ; preds = %58, %56, %52, %44
  %60 = phi float [ %31, %58 ], [ %50, %56 ], [ %31, %44 ], [ %31, %52 ]
  call void @llvm.lifetime.start(i64 16, i8* nonnull %17)
  store i64 %47, i64* %18, align 8
  store i64 %11, i64* %20, align 8
  %61 = getelementptr inbounds [4 x float], [4 x float]* %21, i64 0, i64 1
  store float %60, float* %61, align 4
  %62 = load i64, i64* %18, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %17)
  %63 = trunc i64 %11 to i32
  %64 = bitcast i32 %63 to float
  %65 = fcmp uno float %64, %33
  br i1 %65, label %73, label %66

; <label>:66:                                     ; preds = %59
  %67 = fcmp oeq float %64, 0.000000e+00
  %68 = fcmp oeq float %33, 0.000000e+00
  %69 = and i1 %67, %68
  br i1 %69, label %73, label %70

; <label>:70:                                     ; preds = %66
  %71 = fcmp ogt float %33, %64
  br i1 %71, label %72, label %73

; <label>:72:                                     ; preds = %70
  br label %73

; <label>:73:                                     ; preds = %72, %70, %66, %59
  %74 = phi float [ %33, %72 ], [ %64, %70 ], [ %33, %59 ], [ %33, %66 ]
  call void @llvm.lifetime.start(i64 16, i8* nonnull %17)
  store i64 %62, i64* %18, align 8
  store i64 %11, i64* %20, align 8
  %75 = getelementptr inbounds { <2 x float>, <2 x float> }, { <2 x float>, <2 x float> }* %6, i64 0, i32 1, i64 0
  store float %74, float* %75, align 8
  %76 = load i64, i64* %23, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %17)
  %77 = lshr i64 %76, 32
  %78 = trunc i64 %77 to i32
  %79 = bitcast i32 %78 to float
  %80 = fcmp uno float %79, %36
  br i1 %80, label %88, label %81

; <label>:81:                                     ; preds = %73
  %82 = fcmp oeq float %79, 0.000000e+00
  %83 = fcmp oeq float %36, 0.000000e+00
  %84 = and i1 %82, %83
  br i1 %84, label %88, label %85

; <label>:85:                                     ; preds = %81
  %86 = fcmp ogt float %36, %79
  br i1 %86, label %87, label %88

; <label>:87:                                     ; preds = %85
  br label %88

; <label>:88:                                     ; preds = %87, %85, %81, %73
  %89 = phi float [ %36, %87 ], [ %79, %85 ], [ %36, %73 ], [ %36, %81 ]
  call void @llvm.lifetime.start(i64 16, i8* nonnull %17)
  store i64 %62, i64* %18, align 8
  store i64 %76, i64* %20, align 8
  %90 = getelementptr inbounds [4 x float], [4 x float]* %21, i64 0, i64 3
  store float %89, float* %90, align 4
  %91 = load i64, i64* %23, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %17)
  %92 = trunc i64 %62 to i32
  %93 = bitcast i8* %2 to i32*
  store i32 %92, i32* %93, align 1
  %94 = lshr i64 %62, 32
  %95 = trunc i64 %94 to i32
  %96 = getelementptr inbounds i8, i8* %2, i64 4
  %97 = bitcast i8* %96 to i32*
  store i32 %95, i32* %97, align 1
  %98 = trunc i64 %91 to i32
  %99 = getelementptr inbounds i8, i8* %2, i64 8
  %100 = bitcast i8* %99 to i32*
  store i32 %98, i32* %100, align 1
  %101 = lshr i64 %91, 32
  %102 = trunc i64 %101 to i32
  %103 = getelementptr inbounds i8, i8* %2, i64 12
  %104 = bitcast i8* %103 to i32*
  store i32 %102, i32* %104, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L5MAXPSI3VnWI8vec128_tE2VnIS2_E3MVnIS2_EEEP6MemoryS9_R5StateT_T0_T1_(%struct.Memory* returned, %struct.State* nocapture readnone dereferenceable(3376), i8* nocapture, i8* nocapture readonly, i64)  {
  %6 = alloca { <2 x float>, <2 x float> }, align 8
  %7 = bitcast i8* %3 to i64*
  %8 = load i64, i64* %7, align 1
  %9 = getelementptr inbounds i8, i8* %3, i64 8
  %10 = bitcast i8* %9 to i64*
  %11 = load i64, i64* %10, align 1
  %12 = inttoptr i64 %4 to float*
  %13 = load float, float* %12
  %14 = add i64 %4, 4
  %15 = inttoptr i64 %14 to float*
  %16 = load float, float* %15
  %17 = add i64 %4, 8
  %18 = inttoptr i64 %17 to float*
  %19 = load float, float* %18
  %20 = add i64 %4, 12
  %21 = inttoptr i64 %20 to float*
  %22 = load float, float* %21
  %23 = bitcast { <2 x float>, <2 x float> }* %6 to i8*
  %24 = bitcast { <2 x float>, <2 x float> }* %6 to i64*
  %25 = getelementptr inbounds { <2 x float>, <2 x float> }, { <2 x float>, <2 x float> }* %6, i64 0, i32 1
  %26 = bitcast <2 x float>* %25 to i64*
  %27 = bitcast { <2 x float>, <2 x float> }* %6 to [4 x float]*
  %28 = getelementptr inbounds { <2 x float>, <2 x float> }, { <2 x float>, <2 x float> }* %6, i64 0, i32 1, i64 0
  %29 = bitcast float* %28 to i64*
  %30 = trunc i64 %8 to i32
  %31 = bitcast i32 %30 to float
  %32 = fcmp uno float %31, %13
  br i1 %32, label %40, label %33

; <label>:33:                                     ; preds = %5
  %34 = fcmp oeq float %31, 0.000000e+00
  %35 = fcmp oeq float %13, 0.000000e+00
  %36 = and i1 %34, %35
  br i1 %36, label %40, label %37

; <label>:37:                                     ; preds = %33
  %38 = fcmp ogt float %13, %31
  br i1 %38, label %39, label %40

; <label>:39:                                     ; preds = %37
  br label %40

; <label>:40:                                     ; preds = %39, %37, %33, %5
  %41 = phi float [ %13, %39 ], [ %31, %37 ], [ %13, %5 ], [ %13, %33 ]
  call void @llvm.lifetime.start(i64 16, i8* nonnull %23)
  store i64 %8, i64* %24, align 8
  store i64 %11, i64* %26, align 8
  %42 = getelementptr inbounds { <2 x float>, <2 x float> }, { <2 x float>, <2 x float> }* %6, i64 0, i32 0, i64 0
  store float %41, float* %42, align 8
  %43 = load i64, i64* %24, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %23)
  %44 = lshr i64 %43, 32
  %45 = trunc i64 %44 to i32
  %46 = bitcast i32 %45 to float
  %47 = fcmp uno float %46, %16
  br i1 %47, label %55, label %48

; <label>:48:                                     ; preds = %40
  %49 = fcmp oeq float %46, 0.000000e+00
  %50 = fcmp oeq float %16, 0.000000e+00
  %51 = and i1 %49, %50
  br i1 %51, label %55, label %52

; <label>:52:                                     ; preds = %48
  %53 = fcmp ogt float %16, %46
  br i1 %53, label %54, label %55

; <label>:54:                                     ; preds = %52
  br label %55

; <label>:55:                                     ; preds = %54, %52, %48, %40
  %56 = phi float [ %16, %54 ], [ %46, %52 ], [ %16, %40 ], [ %16, %48 ]
  call void @llvm.lifetime.start(i64 16, i8* nonnull %23)
  store i64 %43, i64* %24, align 8
  store i64 %11, i64* %26, align 8
  %57 = getelementptr inbounds [4 x float], [4 x float]* %27, i64 0, i64 1
  store float %56, float* %57, align 4
  %58 = load i64, i64* %24, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %23)
  %59 = trunc i64 %11 to i32
  %60 = bitcast i32 %59 to float
  %61 = fcmp uno float %60, %19
  br i1 %61, label %69, label %62

; <label>:62:                                     ; preds = %55
  %63 = fcmp oeq float %60, 0.000000e+00
  %64 = fcmp oeq float %19, 0.000000e+00
  %65 = and i1 %63, %64
  br i1 %65, label %69, label %66

; <label>:66:                                     ; preds = %62
  %67 = fcmp ogt float %19, %60
  br i1 %67, label %68, label %69

; <label>:68:                                     ; preds = %66
  br label %69

; <label>:69:                                     ; preds = %68, %66, %62, %55
  %70 = phi float [ %19, %68 ], [ %60, %66 ], [ %19, %55 ], [ %19, %62 ]
  call void @llvm.lifetime.start(i64 16, i8* nonnull %23)
  store i64 %58, i64* %24, align 8
  store i64 %11, i64* %26, align 8
  %71 = getelementptr inbounds { <2 x float>, <2 x float> }, { <2 x float>, <2 x float> }* %6, i64 0, i32 1, i64 0
  store float %70, float* %71, align 8
  %72 = load i64, i64* %29, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %23)
  %73 = lshr i64 %72, 32
  %74 = trunc i64 %73 to i32
  %75 = bitcast i32 %74 to float
  %76 = fcmp uno float %75, %22
  br i1 %76, label %84, label %77

; <label>:77:                                     ; preds = %69
  %78 = fcmp oeq float %75, 0.000000e+00
  %79 = fcmp oeq float %22, 0.000000e+00
  %80 = and i1 %78, %79
  br i1 %80, label %84, label %81

; <label>:81:                                     ; preds = %77
  %82 = fcmp ogt float %22, %75
  br i1 %82, label %83, label %84

; <label>:83:                                     ; preds = %81
  br label %84

; <label>:84:                                     ; preds = %83, %81, %77, %69
  %85 = phi float [ %22, %83 ], [ %75, %81 ], [ %22, %69 ], [ %22, %77 ]
  call void @llvm.lifetime.start(i64 16, i8* nonnull %23)
  store i64 %58, i64* %24, align 8
  store i64 %72, i64* %26, align 8
  %86 = getelementptr inbounds [4 x float], [4 x float]* %27, i64 0, i64 3
  store float %85, float* %86, align 4
  %87 = load i64, i64* %29, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %23)
  %88 = trunc i64 %58 to i32
  %89 = bitcast i8* %2 to i32*
  store i32 %88, i32* %89, align 1
  %90 = lshr i64 %58, 32
  %91 = trunc i64 %90 to i32
  %92 = getelementptr inbounds i8, i8* %2, i64 4
  %93 = bitcast i8* %92 to i32*
  store i32 %91, i32* %93, align 1
  %94 = trunc i64 %87 to i32
  %95 = getelementptr inbounds i8, i8* %2, i64 8
  %96 = bitcast i8* %95 to i32*
  store i32 %94, i32* %96, align 1
  %97 = lshr i64 %87, 32
  %98 = trunc i64 %97 to i32
  %99 = getelementptr inbounds i8, i8* %2, i64 12
  %100 = bitcast i8* %99 to i32*
  store i32 %98, i32* %100, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L8UNPCKLPSI3VnWI8vec128_tE2VnIS2_E3MVnI7vec64_tEEEP6MemorySA_R5StateT_T0_T1_(%struct.Memory* returned, %struct.State* nocapture readnone dereferenceable(3376), i8* nocapture, i8* nocapture readonly, i64)  {
  %6 = bitcast i8* %3 to <2 x i32>*
  %7 = load <2 x i32>, <2 x i32>* %6, align 1
  %8 = inttoptr i64 %4 to float*
  %9 = load float, float* %8
  %10 = add i64 %4, 4
  %11 = inttoptr i64 %10 to float*
  %12 = load float, float* %11
  %13 = extractelement <2 x i32> %7, i32 0
  %14 = bitcast i8* %2 to i32*
  store i32 %13, i32* %14, align 1
  %15 = getelementptr inbounds i8, i8* %2, i64 4
  %16 = bitcast i8* %15 to float*
  store float %9, float* %16, align 1
  %17 = extractelement <2 x i32> %7, i32 1
  %18 = getelementptr inbounds i8, i8* %2, i64 8
  %19 = bitcast i8* %18 to i32*
  store i32 %17, i32* %19, align 1
  %20 = getelementptr inbounds i8, i8* %2, i64 12
  %21 = bitcast i8* %20 to float*
  store float %12, float* %21, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L8UNPCKLPSI3VnWI8vec128_tE2VnIS2_ES5_EEP6MemoryS7_R5StateT_T0_T1_(%struct.Memory* readnone returned, %struct.State* nocapture readnone dereferenceable(3376), i8* nocapture, i8* nocapture readonly, i8* nocapture readonly)  {
  %6 = bitcast i8* %3 to <2 x i32>*
  %7 = load <2 x i32>, <2 x i32>* %6, align 1
  %8 = bitcast i8* %4 to <2 x i32>*
  %9 = load <2 x i32>, <2 x i32>* %8, align 1
  %10 = extractelement <2 x i32> %7, i32 0
  %11 = bitcast i8* %2 to i32*
  store i32 %10, i32* %11, align 1
  %12 = extractelement <2 x i32> %9, i32 0
  %13 = getelementptr inbounds i8, i8* %2, i64 4
  %14 = bitcast i8* %13 to i32*
  store i32 %12, i32* %14, align 1
  %15 = extractelement <2 x i32> %7, i32 1
  %16 = getelementptr inbounds i8, i8* %2, i64 8
  %17 = bitcast i8* %16 to i32*
  store i32 %15, i32* %17, align 1
  %18 = extractelement <2 x i32> %9, i32 1
  %19 = getelementptr inbounds i8, i8* %2, i64 12
  %20 = bitcast i8* %19 to i32*
  store i32 %18, i32* %20, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L8UNPCKLPDI3VnWI8vec128_tE2VnIS2_E3MVnI7vec64_tEEEP6MemorySA_R5StateT_T0_T1_(%struct.Memory* returned, %struct.State* nocapture readnone dereferenceable(3376), i8* nocapture, i8* nocapture readonly, i64)  {
  %6 = bitcast i8* %3 to i64*
  %7 = load i64, i64* %6, align 1
  %8 = inttoptr i64 %4 to double*
  %9 = load double, double* %8
  %10 = bitcast i8* %2 to i64*
  store i64 %7, i64* %10, align 1
  %11 = getelementptr inbounds i8, i8* %2, i64 8
  %12 = bitcast i8* %11 to double*
  store double %9, double* %12, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L8UNPCKLPDI3VnWI8vec128_tE2VnIS2_ES5_EEP6MemoryS7_R5StateT_T0_T1_(%struct.Memory* readnone returned, %struct.State* nocapture readnone dereferenceable(3376), i8* nocapture, i8* nocapture readonly, i8* nocapture readonly)  {
  %6 = bitcast i8* %3 to i64*
  %7 = load i64, i64* %6, align 1
  %8 = bitcast i8* %4 to i64*
  %9 = load i64, i64* %8, align 1
  %10 = bitcast i8* %2 to i64*
  store i64 %7, i64* %10, align 1
  %11 = getelementptr inbounds i8, i8* %2, i64 8
  %12 = bitcast i8* %11 to i64*
  store i64 %9, i64* %12, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L8UNPCKHPDI3VnWI8vec128_tE2VnIS2_E3MVnIS2_EEEP6MemoryS9_R5StateT_T0_T1_(%struct.Memory* returned, %struct.State* nocapture readnone dereferenceable(3376), i8* nocapture, i8* nocapture readonly, i64)  {
  %6 = add i64 %4, 8
  %7 = inttoptr i64 %6 to double*
  %8 = load double, double* %7
  %9 = getelementptr inbounds i8, i8* %3, i64 8
  %10 = bitcast i8* %9 to i64*
  %11 = load i64, i64* %10, align 1
  %12 = bitcast i8* %2 to i64*
  store i64 %11, i64* %12, align 1
  %13 = getelementptr inbounds i8, i8* %2, i64 8
  %14 = bitcast i8* %13 to double*
  store double %8, double* %14, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L8UNPCKHPDI3VnWI8vec128_tE2VnIS2_ES5_EEP6MemoryS7_R5StateT_T0_T1_(%struct.Memory* readnone returned, %struct.State* nocapture readnone dereferenceable(3376), i8* nocapture, i8* nocapture readonly, i8* nocapture readonly)  {
  %6 = getelementptr inbounds i8, i8* %4, i64 8
  %7 = bitcast i8* %6 to i64*
  %8 = load i64, i64* %7, align 1
  %9 = getelementptr inbounds i8, i8* %3, i64 8
  %10 = bitcast i8* %9 to i64*
  %11 = load i64, i64* %10, align 1
  %12 = bitcast i8* %2 to i64*
  store i64 %11, i64* %12, align 1
  %13 = getelementptr inbounds i8, i8* %2, i64 8
  %14 = bitcast i8* %13 to i64*
  store i64 %8, i64* %14, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L7MOVDDUPI3VnWI8vec128_tE3MVnI7vec64_tEEEP6MemoryS8_R5StateT_T0_(%struct.Memory* returned, %struct.State* nocapture readnone dereferenceable(3376), i8* nocapture, i64)  {
  %5 = inttoptr i64 %3 to double*
  %6 = load double, double* %5
  %7 = bitcast i8* %2 to double*
  store double %6, double* %7, align 1
  %8 = getelementptr inbounds i8, i8* %2, i64 8
  %9 = bitcast i8* %8 to double*
  store double %6, double* %9, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L7MOVDDUPI3VnWI8vec128_tE2VnIS2_EEEP6MemoryS7_R5StateT_T0_(%struct.Memory* readnone returned, %struct.State* nocapture readnone dereferenceable(3376), i8* nocapture, i8* nocapture readonly)  {
  %5 = bitcast i8* %3 to i64*
  %6 = load i64, i64* %5, align 1
  %7 = bitcast i8* %2 to i64*
  store i64 %6, i64* %7, align 1
  %8 = getelementptr inbounds i8, i8* %2, i64 8
  %9 = bitcast i8* %8 to i64*
  store i64 %6, i64* %9, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L6SQRTSSI3VnWI8vec128_tE3MVnI7vec32_tEEEP6MemoryS8_R5StateT_T0_(%struct.Memory*, %struct.State* nocapture readnone dereferenceable(3376), i8* nocapture, i64)  {
  %5 = inttoptr i64 %3 to float*
  %6 = load float, float* %5
  %7 = fcmp uno float %6, 0.000000e+00
  br i1 %7, label %8, label %18

; <label>:8:                                      ; preds = %4
  %9 = bitcast float %6 to i32
  %10 = and i32 %9, 2143289344
  %11 = icmp eq i32 %10, 2139095040
  %12 = and i32 %9, 4194303
  %13 = icmp ne i32 %12, 0
  %14 = and i1 %11, %13
  br i1 %14, label %15, label %26

; <label>:15:                                     ; preds = %8
  %16 = or i32 %9, 4194304
  %17 = bitcast i32 %16 to float
  br label %26

; <label>:18:                                     ; preds = %4
  %19 = fpext float %6 to double
  %20 = bitcast double %19 to i64
  %21 = icmp slt i64 %20, 0
  %22 = fcmp une float %6, -0.000000e+00
  %23 = and i1 %22, %21
  br i1 %23, label %26, label %24

; <label>:24:                                     ; preds = %18
  %25 = tail call float @sqrtf(float %6) 
  br label %26

; <label>:26:                                     ; preds = %24, %18, %15, %8
  %27 = phi float [ %17, %15 ], [ %25, %24 ], [ %6, %8 ], [ 0xFFF8000000000000, %18 ]
  %28 = bitcast i8* %2 to <2 x i32>*
  %29 = load <2 x i32>, <2 x i32>* %28, align 1
  %30 = getelementptr inbounds i8, i8* %2, i64 8
  %31 = bitcast i8* %30 to <2 x i32>*
  %32 = load <2 x i32>, <2 x i32>* %31, align 1
  %33 = bitcast i8* %2 to float*
  store float %27, float* %33, align 1
  %34 = extractelement <2 x i32> %29, i32 1
  %35 = getelementptr inbounds i8, i8* %2, i64 4
  %36 = bitcast i8* %35 to i32*
  store i32 %34, i32* %36, align 1
  %37 = extractelement <2 x i32> %32, i32 0
  %38 = bitcast i8* %30 to i32*
  store i32 %37, i32* %38, align 1
  %39 = extractelement <2 x i32> %32, i32 1
  %40 = getelementptr inbounds i8, i8* %2, i64 12
  %41 = bitcast i8* %40 to i32*
  store i32 %39, i32* %41, align 1
  ret %struct.Memory* %0
}

; Function Attrs: nounwind readnone
declare float @sqrtf(float) local_unnamed_addr 

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L6SQRTSSI3VnWI8vec128_tE2VnIS2_EEEP6MemoryS7_R5StateT_T0_(%struct.Memory*, %struct.State* nocapture readnone dereferenceable(3376), i8* nocapture, i8* nocapture readonly)  {
  %5 = bitcast i8* %3 to <2 x float>*
  %6 = load <2 x float>, <2 x float>* %5, align 1
  %7 = extractelement <2 x float> %6, i32 0
  %8 = fcmp uno float %7, 0.000000e+00
  br i1 %8, label %9, label %19

; <label>:9:                                      ; preds = %4
  %10 = bitcast float %7 to i32
  %11 = and i32 %10, 2143289344
  %12 = icmp eq i32 %11, 2139095040
  %13 = and i32 %10, 4194303
  %14 = icmp ne i32 %13, 0
  %15 = and i1 %12, %14
  br i1 %15, label %16, label %27

; <label>:16:                                     ; preds = %9
  %17 = or i32 %10, 4194304
  %18 = bitcast i32 %17 to float
  br label %27

; <label>:19:                                     ; preds = %4
  %20 = fpext float %7 to double
  %21 = bitcast double %20 to i64
  %22 = icmp slt i64 %21, 0
  %23 = fcmp une float %7, -0.000000e+00
  %24 = and i1 %23, %22
  br i1 %24, label %27, label %25

; <label>:25:                                     ; preds = %19
  %26 = tail call float @sqrtf(float %7) 
  br label %27

; <label>:27:                                     ; preds = %25, %19, %16, %9
  %28 = phi float [ %18, %16 ], [ %26, %25 ], [ %7, %9 ], [ 0xFFF8000000000000, %19 ]
  %29 = bitcast i8* %2 to <2 x i32>*
  %30 = load <2 x i32>, <2 x i32>* %29, align 1
  %31 = getelementptr inbounds i8, i8* %2, i64 8
  %32 = bitcast i8* %31 to <2 x i32>*
  %33 = load <2 x i32>, <2 x i32>* %32, align 1
  %34 = bitcast i8* %2 to float*
  store float %28, float* %34, align 1
  %35 = extractelement <2 x i32> %30, i32 1
  %36 = getelementptr inbounds i8, i8* %2, i64 4
  %37 = bitcast i8* %36 to i32*
  store i32 %35, i32* %37, align 1
  %38 = extractelement <2 x i32> %33, i32 0
  %39 = bitcast i8* %31 to i32*
  store i32 %38, i32* %39, align 1
  %40 = extractelement <2 x i32> %33, i32 1
  %41 = getelementptr inbounds i8, i8* %2, i64 12
  %42 = bitcast i8* %41 to i32*
  store i32 %40, i32* %42, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L6SQRTSDI3VnWI8vec128_tE3MVnI7vec64_tEEEP6MemoryS8_R5StateT_T0_(%struct.Memory*, %struct.State* nocapture readnone dereferenceable(3376), i8* nocapture, i64)  {
  %5 = inttoptr i64 %3 to double*
  %6 = load double, double* %5
  %7 = fcmp uno double %6, 0.000000e+00
  %8 = bitcast double %6 to i64
  br i1 %7, label %9, label %18

; <label>:9:                                      ; preds = %4
  %10 = and i64 %8, 9221120237041090560
  %11 = icmp eq i64 %10, 9218868437227405312
  %12 = and i64 %8, 2251799813685247
  %13 = icmp ne i64 %12, 0
  %14 = and i1 %11, %13
  br i1 %14, label %15, label %24

; <label>:15:                                     ; preds = %9
  %16 = or i64 %8, 2251799813685248
  %17 = bitcast i64 %16 to double
  br label %24

; <label>:18:                                     ; preds = %4
  %19 = icmp slt i64 %8, 0
  %20 = fcmp une double %6, -0.000000e+00
  %21 = and i1 %20, %19
  br i1 %21, label %24, label %22

; <label>:22:                                     ; preds = %18
  %23 = tail call double @sqrt(double %6) 
  br label %24

; <label>:24:                                     ; preds = %22, %18, %15, %9
  %25 = phi double [ %17, %15 ], [ %23, %22 ], [ %6, %9 ], [ 0xFFF8000000000000, %18 ]
  %26 = bitcast i8* %2 to double*
  store double %25, double* %26, align 1
  ret %struct.Memory* %0
}

; Function Attrs: nounwind readnone
declare double @sqrt(double) local_unnamed_addr 

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L6SQRTSDI3VnWI8vec128_tE2VnIS2_EEEP6MemoryS7_R5StateT_T0_(%struct.Memory*, %struct.State* nocapture readnone dereferenceable(3376), i8* nocapture, i8* nocapture readonly)  {
  %5 = bitcast i8* %3 to double*
  %6 = load double, double* %5, align 1
  %7 = fcmp uno double %6, 0.000000e+00
  %8 = bitcast double %6 to i64
  br i1 %7, label %9, label %18

; <label>:9:                                      ; preds = %4
  %10 = and i64 %8, 9221120237041090560
  %11 = icmp eq i64 %10, 9218868437227405312
  %12 = and i64 %8, 2251799813685247
  %13 = icmp ne i64 %12, 0
  %14 = and i1 %11, %13
  br i1 %14, label %15, label %24

; <label>:15:                                     ; preds = %9
  %16 = or i64 %8, 2251799813685248
  %17 = bitcast i64 %16 to double
  br label %24

; <label>:18:                                     ; preds = %4
  %19 = icmp slt i64 %8, 0
  %20 = fcmp une double %6, -0.000000e+00
  %21 = and i1 %20, %19
  br i1 %21, label %24, label %22

; <label>:22:                                     ; preds = %18
  %23 = tail call double @sqrt(double %6) 
  br label %24

; <label>:24:                                     ; preds = %22, %18, %15, %9
  %25 = phi double [ %17, %15 ], [ %23, %22 ], [ %6, %9 ], [ 0xFFF8000000000000, %18 ]
  %26 = bitcast i8* %2 to double*
  store double %25, double* %26, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L8PACKUSWBI4RVnWI7vec64_tE3RVnIS2_E3MVnIS2_E9uint8v8_tEEP6MemorySA_R5StateT_T0_T1_(%struct.Memory* returned, %struct.State* nocapture readnone dereferenceable(3376), i64* nocapture, i64, i64)  {
  %6 = inttoptr i64 %4 to i16*
  %7 = load i16, i16* %6
  %8 = add i64 %4, 2
  %9 = inttoptr i64 %8 to i16*
  %10 = load i16, i16* %9
  %11 = add i64 %4, 4
  %12 = inttoptr i64 %11 to i16*
  %13 = load i16, i16* %12
  %14 = add i64 %4, 6
  %15 = inttoptr i64 %14 to i16*
  %16 = load i16, i16* %15
  %17 = trunc i64 %3 to i16
  %18 = icmp slt i16 %17, 255
  %19 = select i1 %18, i16 %17, i16 255
  %20 = icmp sgt i16 %17, 0
  %21 = trunc i16 %19 to i8
  %22 = select i1 %20, i8 %21, i8 0
  %23 = icmp slt i16 %7, 255
  %24 = select i1 %23, i16 %7, i16 255
  %25 = icmp sgt i16 %7, 0
  %26 = trunc i16 %24 to i8
  %27 = select i1 %25, i8 %26, i8 0
  %28 = lshr i64 %3, 16
  %29 = trunc i64 %28 to i16
  %30 = icmp slt i16 %29, 255
  %31 = select i1 %30, i16 %29, i16 255
  %32 = icmp sgt i16 %29, 0
  %33 = trunc i16 %31 to i8
  %34 = select i1 %32, i8 %33, i8 0
  %35 = icmp slt i16 %10, 255
  %36 = select i1 %35, i16 %10, i16 255
  %37 = icmp sgt i16 %10, 0
  %38 = trunc i16 %36 to i8
  %39 = select i1 %37, i8 %38, i8 0
  %40 = lshr i64 %3, 32
  %41 = trunc i64 %40 to i16
  %42 = icmp slt i16 %41, 255
  %43 = select i1 %42, i16 %41, i16 255
  %44 = icmp sgt i16 %41, 0
  %45 = trunc i16 %43 to i8
  %46 = select i1 %44, i8 %45, i8 0
  %47 = icmp slt i16 %13, 255
  %48 = select i1 %47, i16 %13, i16 255
  %49 = icmp sgt i16 %13, 0
  %50 = trunc i16 %48 to i8
  %51 = select i1 %49, i8 %50, i8 0
  %52 = lshr i64 %3, 48
  %53 = trunc i64 %52 to i16
  %54 = icmp slt i16 %53, 255
  %55 = select i1 %54, i16 %53, i16 255
  %56 = icmp sgt i16 %53, 0
  %57 = trunc i16 %55 to i8
  %58 = select i1 %56, i8 %57, i8 0
  %59 = icmp slt i16 %16, 255
  %60 = select i1 %59, i16 %16, i16 255
  %61 = icmp sgt i16 %16, 0
  %62 = trunc i16 %60 to i8
  %63 = select i1 %61, i8 %62, i8 0
  %64 = bitcast i64* %2 to [8 x i8]*
  %65 = bitcast i64* %2 to i8*
  store i8 %22, i8* %65, align 1
  %66 = getelementptr inbounds [8 x i8], [8 x i8]* %64, i64 0, i64 1
  store i8 %34, i8* %66, align 1
  %67 = getelementptr inbounds [8 x i8], [8 x i8]* %64, i64 0, i64 2
  store i8 %46, i8* %67, align 1
  %68 = getelementptr inbounds [8 x i8], [8 x i8]* %64, i64 0, i64 3
  store i8 %58, i8* %68, align 1
  %69 = getelementptr inbounds [8 x i8], [8 x i8]* %64, i64 0, i64 4
  store i8 %27, i8* %69, align 1
  %70 = getelementptr inbounds [8 x i8], [8 x i8]* %64, i64 0, i64 5
  store i8 %39, i8* %70, align 1
  %71 = getelementptr inbounds [8 x i8], [8 x i8]* %64, i64 0, i64 6
  store i8 %51, i8* %71, align 1
  %72 = getelementptr inbounds [8 x i8], [8 x i8]* %64, i64 0, i64 7
  store i8 %63, i8* %72, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L8PACKUSWBI4RVnWI7vec64_tE3RVnIS2_ES5_9uint8v8_tEEP6MemoryS8_R5StateT_T0_T1_(%struct.Memory* readnone returned, %struct.State* nocapture readnone dereferenceable(3376), i64* nocapture, i64, i64)  {
  %6 = trunc i64 %3 to i16
  %7 = icmp slt i16 %6, 255
  %8 = select i1 %7, i16 %6, i16 255
  %9 = icmp sgt i16 %6, 0
  %10 = trunc i16 %8 to i8
  %11 = select i1 %9, i8 %10, i8 0
  %12 = trunc i64 %4 to i16
  %13 = icmp slt i16 %12, 255
  %14 = select i1 %13, i16 %12, i16 255
  %15 = icmp sgt i16 %12, 0
  %16 = trunc i16 %14 to i8
  %17 = select i1 %15, i8 %16, i8 0
  %18 = lshr i64 %3, 16
  %19 = trunc i64 %18 to i16
  %20 = icmp slt i16 %19, 255
  %21 = select i1 %20, i16 %19, i16 255
  %22 = icmp sgt i16 %19, 0
  %23 = trunc i16 %21 to i8
  %24 = select i1 %22, i8 %23, i8 0
  %25 = lshr i64 %4, 16
  %26 = trunc i64 %25 to i16
  %27 = icmp slt i16 %26, 255
  %28 = select i1 %27, i16 %26, i16 255
  %29 = icmp sgt i16 %26, 0
  %30 = trunc i16 %28 to i8
  %31 = select i1 %29, i8 %30, i8 0
  %32 = lshr i64 %3, 32
  %33 = trunc i64 %32 to i16
  %34 = icmp slt i16 %33, 255
  %35 = select i1 %34, i16 %33, i16 255
  %36 = icmp sgt i16 %33, 0
  %37 = trunc i16 %35 to i8
  %38 = select i1 %36, i8 %37, i8 0
  %39 = lshr i64 %4, 32
  %40 = trunc i64 %39 to i16
  %41 = icmp slt i16 %40, 255
  %42 = select i1 %41, i16 %40, i16 255
  %43 = icmp sgt i16 %40, 0
  %44 = trunc i16 %42 to i8
  %45 = select i1 %43, i8 %44, i8 0
  %46 = lshr i64 %3, 48
  %47 = trunc i64 %46 to i16
  %48 = icmp slt i16 %47, 255
  %49 = select i1 %48, i16 %47, i16 255
  %50 = icmp sgt i16 %47, 0
  %51 = trunc i16 %49 to i8
  %52 = select i1 %50, i8 %51, i8 0
  %53 = lshr i64 %4, 48
  %54 = trunc i64 %53 to i16
  %55 = icmp slt i16 %54, 255
  %56 = select i1 %55, i16 %54, i16 255
  %57 = icmp sgt i16 %54, 0
  %58 = trunc i16 %56 to i8
  %59 = select i1 %57, i8 %58, i8 0
  %60 = bitcast i64* %2 to [8 x i8]*
  %61 = bitcast i64* %2 to i8*
  store i8 %11, i8* %61, align 1
  %62 = getelementptr inbounds [8 x i8], [8 x i8]* %60, i64 0, i64 1
  store i8 %24, i8* %62, align 1
  %63 = getelementptr inbounds [8 x i8], [8 x i8]* %60, i64 0, i64 2
  store i8 %38, i8* %63, align 1
  %64 = getelementptr inbounds [8 x i8], [8 x i8]* %60, i64 0, i64 3
  store i8 %52, i8* %64, align 1
  %65 = getelementptr inbounds [8 x i8], [8 x i8]* %60, i64 0, i64 4
  store i8 %17, i8* %65, align 1
  %66 = getelementptr inbounds [8 x i8], [8 x i8]* %60, i64 0, i64 5
  store i8 %31, i8* %66, align 1
  %67 = getelementptr inbounds [8 x i8], [8 x i8]* %60, i64 0, i64 6
  store i8 %45, i8* %67, align 1
  %68 = getelementptr inbounds [8 x i8], [8 x i8]* %60, i64 0, i64 7
  store i8 %59, i8* %68, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L8PACKUSWBI3VnWI8vec128_tE2VnIS2_E3MVnIS2_E10uint8v16_tEEP6MemorySA_R5StateT_T0_T1_(%struct.Memory* returned, %struct.State* nocapture readnone dereferenceable(3376), i8* nocapture, i8* nocapture readonly, i64)  {
  %6 = alloca <2 x i64>, align 16
  %7 = bitcast <2 x i64>* %6 to { i64, i64 }*
  %8 = bitcast <2 x i64>* %6 to %struct.uint16v8_t*
  %9 = alloca <2 x i64>, align 16
  %10 = bitcast <2 x i64>* %9 to %struct.uint16v8_t*
  %11 = alloca <16 x i8>, align 16
  %12 = bitcast <16 x i8>* %11 to %struct.uint8v16_t*
  %13 = bitcast <2 x i64>* %6 to i8*
  call void @llvm.lifetime.start(i64 16, i8* nonnull %13) 
  %14 = bitcast i8* %3 to <2 x i64>*
  %15 = load <2 x i64>, <2 x i64>* %14, align 1
  store <2 x i64> %15, <2 x i64>* %6, align 16
  %16 = bitcast <2 x i64>* %9 to i8*
  call void @llvm.lifetime.start(i64 16, i8* nonnull %16) 
  %17 = inttoptr i64 %4 to i16*
  %18 = load i16, i16* %17
  %19 = add i64 %4, 2
  %20 = inttoptr i64 %19 to i16*
  %21 = load i16, i16* %20
  %22 = add i64 %4, 4
  %23 = inttoptr i64 %22 to i16*
  %24 = load i16, i16* %23
  %25 = add i64 %4, 6
  %26 = inttoptr i64 %25 to i16*
  %27 = load i16, i16* %26
  %28 = add i64 %4, 8
  %29 = inttoptr i64 %28 to i16*
  %30 = load i16, i16* %29
  %31 = add i64 %4, 10
  %32 = inttoptr i64 %31 to i16*
  %33 = load i16, i16* %32
  %34 = add i64 %4, 12
  %35 = inttoptr i64 %34 to i16*
  %36 = load i16, i16* %35
  %37 = add i64 %4, 14
  %38 = inttoptr i64 %37 to i16*
  %39 = load i16, i16* %38
  %40 = insertelement <2 x i16> undef, i16 %27, i32 0
  %41 = insertelement <2 x i16> %40, i16 %39, i32 1
  %42 = zext <2 x i16> %41 to <2 x i64>
  %43 = shl nuw <2 x i64> %42, <i64 48, i64 48>
  %44 = insertelement <2 x i16> undef, i16 %24, i32 0
  %45 = insertelement <2 x i16> %44, i16 %36, i32 1
  %46 = zext <2 x i16> %45 to <2 x i64>
  %47 = shl nuw nsw <2 x i64> %46, <i64 32, i64 32>
  %48 = insertelement <2 x i16> undef, i16 %21, i32 0
  %49 = insertelement <2 x i16> %48, i16 %33, i32 1
  %50 = zext <2 x i16> %49 to <2 x i64>
  %51 = shl nuw nsw <2 x i64> %50, <i64 16, i64 16>
  %52 = insertelement <2 x i16> undef, i16 %18, i32 0
  %53 = insertelement <2 x i16> %52, i16 %30, i32 1
  %54 = zext <2 x i16> %53 to <2 x i64>
  %55 = or <2 x i64> %51, %54
  %56 = or <2 x i64> %55, %47
  %57 = or <2 x i64> %56, %43
  store <2 x i64> %57, <2 x i64>* %9, align 16
  %58 = getelementptr inbounds <16 x i8>, <16 x i8>* %11, i64 0, i64 0
  call void @llvm.lifetime.start(i64 16, i8* nonnull %58) 
  %59 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %12, i64 0, i32 0, i64 6
  call void @llvm.memset.p0i8.i64(i8* nonnull %59, i8 0, i64 10, i32 2, i1 false)
  %60 = extractelement <2 x i64> %15, i32 0
  %61 = trunc i64 %60 to i16
  %62 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %12, i64 0, i32 0, i64 8
  %63 = lshr i64 %60, 16
  %64 = trunc i64 %63 to i16
  %65 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %12, i64 0, i32 0, i64 1
  %66 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %12, i64 0, i32 0, i64 9
  %67 = lshr i64 %60, 32
  %68 = trunc i64 %67 to i16
  %69 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %12, i64 0, i32 0, i64 2
  %70 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %12, i64 0, i32 0, i64 10
  %71 = getelementptr inbounds %struct.uint16v8_t, %struct.uint16v8_t* %8, i64 0, i32 0, i64 3
  %72 = load i16, i16* %71, align 2
  %73 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %12, i64 0, i32 0, i64 11
  %74 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %7, i64 0, i32 1
  %75 = bitcast i64* %74 to i16*
  %76 = load i16, i16* %75, align 8
  %77 = getelementptr inbounds %struct.uint16v8_t, %struct.uint16v8_t* %8, i64 0, i32 0, i64 5
  %78 = load i16, i16* %77, align 2
  %79 = getelementptr inbounds %struct.uint16v8_t, %struct.uint16v8_t* %10, i64 0, i32 0, i64 5
  %80 = load i16, i16* %79, align 2
  %81 = getelementptr inbounds %struct.uint16v8_t, %struct.uint16v8_t* %8, i64 0, i32 0, i64 6
  %82 = load i16, i16* %81, align 4
  %83 = getelementptr inbounds %struct.uint16v8_t, %struct.uint16v8_t* %10, i64 0, i32 0, i64 6
  %84 = load i16, i16* %83, align 4
  %85 = getelementptr inbounds %struct.uint16v8_t, %struct.uint16v8_t* %8, i64 0, i32 0, i64 7
  %86 = load i16, i16* %85, align 2
  %87 = getelementptr inbounds %struct.uint16v8_t, %struct.uint16v8_t* %10, i64 0, i32 0, i64 7
  %88 = load i16, i16* %87, align 2
  %89 = insertelement <16 x i16> undef, i16 %61, i32 0
  %90 = insertelement <16 x i16> %89, i16 %64, i32 1
  %91 = insertelement <16 x i16> %90, i16 %68, i32 2
  %92 = insertelement <16 x i16> %91, i16 %72, i32 3
  %93 = insertelement <16 x i16> %92, i16 %76, i32 4
  %94 = insertelement <16 x i16> %93, i16 %78, i32 5
  %95 = insertelement <16 x i16> %94, i16 %82, i32 6
  %96 = insertelement <16 x i16> %95, i16 %86, i32 7
  %97 = insertelement <16 x i16> %96, i16 %18, i32 8
  %98 = insertelement <16 x i16> %97, i16 %21, i32 9
  %99 = insertelement <16 x i16> %98, i16 %24, i32 10
  %100 = insertelement <16 x i16> %99, i16 %27, i32 11
  %101 = insertelement <16 x i16> %100, i16 %30, i32 12
  %102 = insertelement <16 x i16> %101, i16 %80, i32 13
  %103 = insertelement <16 x i16> %102, i16 %84, i32 14
  %104 = insertelement <16 x i16> %103, i16 %88, i32 15
  %105 = icmp slt <16 x i16> %104, <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>
  %106 = select <16 x i1> %105, <16 x i16> %104, <16 x i16> <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>
  %107 = icmp sgt <16 x i16> %104, zeroinitializer
  %108 = trunc <16 x i16> %106 to <16 x i8>
  %109 = select <16 x i1> %107, <16 x i8> %108, <16 x i8> zeroinitializer
  store <16 x i8> %109, <16 x i8>* %11, align 16
  %110 = load i8, i8* %58, align 16
  store i8 %110, i8* %2, align 1
  %111 = load i8, i8* %65, align 1
  %112 = getelementptr inbounds i8, i8* %2, i64 1
  store i8 %111, i8* %112, align 1
  %113 = load i8, i8* %69, align 2
  %114 = getelementptr inbounds i8, i8* %2, i64 2
  store i8 %113, i8* %114, align 1
  %115 = getelementptr inbounds i8, i8* %2, i64 3
  %116 = extractelement <16 x i8> %109, i32 3
  store i8 %116, i8* %115, align 1
  %117 = getelementptr inbounds i8, i8* %2, i64 4
  %118 = extractelement <16 x i8> %109, i32 4
  store i8 %118, i8* %117, align 1
  %119 = getelementptr inbounds i8, i8* %2, i64 5
  %120 = extractelement <16 x i8> %109, i32 5
  store i8 %120, i8* %119, align 1
  %121 = getelementptr inbounds i8, i8* %2, i64 6
  %122 = extractelement <16 x i8> %109, i32 6
  store i8 %122, i8* %121, align 1
  %123 = getelementptr inbounds i8, i8* %2, i64 7
  %124 = extractelement <16 x i8> %109, i32 7
  store i8 %124, i8* %123, align 1
  %125 = load i8, i8* %62, align 8
  %126 = getelementptr inbounds i8, i8* %2, i64 8
  store i8 %125, i8* %126, align 1
  %127 = load i8, i8* %66, align 1
  %128 = getelementptr inbounds i8, i8* %2, i64 9
  store i8 %127, i8* %128, align 1
  %129 = load i8, i8* %70, align 2
  %130 = getelementptr inbounds i8, i8* %2, i64 10
  store i8 %129, i8* %130, align 1
  %131 = load i8, i8* %73, align 1
  %132 = getelementptr inbounds i8, i8* %2, i64 11
  store i8 %131, i8* %132, align 1
  %133 = getelementptr inbounds i8, i8* %2, i64 12
  %134 = extractelement <16 x i8> %109, i32 12
  store i8 %134, i8* %133, align 1
  %135 = getelementptr inbounds i8, i8* %2, i64 13
  %136 = extractelement <16 x i8> %109, i32 13
  store i8 %136, i8* %135, align 1
  %137 = getelementptr inbounds i8, i8* %2, i64 14
  %138 = extractelement <16 x i8> %109, i32 14
  store i8 %138, i8* %137, align 1
  %139 = getelementptr inbounds i8, i8* %2, i64 15
  %140 = extractelement <16 x i8> %109, i32 15
  store i8 %140, i8* %139, align 1
  call void @llvm.lifetime.end(i64 16, i8* nonnull %58) 
  call void @llvm.lifetime.end(i64 16, i8* nonnull %16) 
  call void @llvm.lifetime.end(i64 16, i8* nonnull %13) 
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L8PACKUSWBI3VnWI8vec128_tE2VnIS2_ES5_10uint8v16_tEEP6MemoryS8_R5StateT_T0_T1_(%struct.Memory* readnone returned, %struct.State* nocapture readnone dereferenceable(3376), i8* nocapture, i8* nocapture readonly, i8* nocapture readonly)  {
  %6 = alloca { i64, i64 }, align 8
  %7 = bitcast { i64, i64 }* %6 to %struct.uint16v8_t*
  %8 = alloca { i64, i64 }, align 8
  %9 = bitcast { i64, i64 }* %8 to %struct.uint16v8_t*
  %10 = alloca <16 x i8>, align 16
  %11 = bitcast <16 x i8>* %10 to %struct.uint8v16_t*
  %12 = bitcast { i64, i64 }* %6 to i8*
  call void @llvm.lifetime.start(i64 16, i8* nonnull %12) 
  %13 = bitcast i8* %3 to i64*
  %14 = load i64, i64* %13, align 1
  %15 = getelementptr inbounds i8, i8* %3, i64 8
  %16 = bitcast i8* %15 to i64*
  %17 = load i64, i64* %16, align 1
  %18 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %6, i64 0, i32 0
  store i64 %14, i64* %18, align 8
  %19 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %6, i64 0, i32 1
  store i64 %17, i64* %19, align 8
  %20 = bitcast { i64, i64 }* %8 to i8*
  call void @llvm.lifetime.start(i64 16, i8* nonnull %20) 
  %21 = bitcast i8* %4 to i64*
  %22 = load i64, i64* %21, align 1
  %23 = getelementptr inbounds i8, i8* %4, i64 8
  %24 = bitcast i8* %23 to i64*
  %25 = load i64, i64* %24, align 1
  %26 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %8, i64 0, i32 0
  store i64 %22, i64* %26, align 8
  %27 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %8, i64 0, i32 1
  store i64 %25, i64* %27, align 8
  %28 = getelementptr inbounds <16 x i8>, <16 x i8>* %10, i64 0, i64 0
  call void @llvm.lifetime.start(i64 16, i8* nonnull %28) 
  %29 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %11, i64 0, i32 0, i64 6
  call void @llvm.memset.p0i8.i64(i8* nonnull %29, i8 0, i64 10, i32 2, i1 false)
  %30 = trunc i64 %14 to i16
  %31 = trunc i64 %22 to i16
  %32 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %11, i64 0, i32 0, i64 8
  %33 = lshr i64 %14, 16
  %34 = trunc i64 %33 to i16
  %35 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %11, i64 0, i32 0, i64 1
  %36 = lshr i64 %22, 16
  %37 = trunc i64 %36 to i16
  %38 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %11, i64 0, i32 0, i64 9
  %39 = lshr i64 %14, 32
  %40 = trunc i64 %39 to i16
  %41 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %11, i64 0, i32 0, i64 2
  %42 = lshr i64 %22, 32
  %43 = trunc i64 %42 to i16
  %44 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %11, i64 0, i32 0, i64 10
  %45 = lshr i64 %14, 48
  %46 = trunc i64 %45 to i16
  %47 = lshr i64 %22, 48
  %48 = trunc i64 %47 to i16
  %49 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %11, i64 0, i32 0, i64 11
  %50 = trunc i64 %17 to i16
  %51 = trunc i64 %25 to i16
  %52 = getelementptr inbounds %struct.uint16v8_t, %struct.uint16v8_t* %7, i64 0, i32 0, i64 5
  %53 = load i16, i16* %52, align 2
  %54 = getelementptr inbounds %struct.uint16v8_t, %struct.uint16v8_t* %9, i64 0, i32 0, i64 5
  %55 = load i16, i16* %54, align 2
  %56 = getelementptr inbounds %struct.uint16v8_t, %struct.uint16v8_t* %7, i64 0, i32 0, i64 6
  %57 = load i16, i16* %56, align 4
  %58 = getelementptr inbounds %struct.uint16v8_t, %struct.uint16v8_t* %9, i64 0, i32 0, i64 6
  %59 = load i16, i16* %58, align 4
  %60 = getelementptr inbounds %struct.uint16v8_t, %struct.uint16v8_t* %7, i64 0, i32 0, i64 7
  %61 = load i16, i16* %60, align 2
  %62 = getelementptr inbounds %struct.uint16v8_t, %struct.uint16v8_t* %9, i64 0, i32 0, i64 7
  %63 = load i16, i16* %62, align 2
  %64 = insertelement <16 x i16> undef, i16 %30, i32 0
  %65 = insertelement <16 x i16> %64, i16 %34, i32 1
  %66 = insertelement <16 x i16> %65, i16 %40, i32 2
  %67 = insertelement <16 x i16> %66, i16 %46, i32 3
  %68 = insertelement <16 x i16> %67, i16 %50, i32 4
  %69 = insertelement <16 x i16> %68, i16 %53, i32 5
  %70 = insertelement <16 x i16> %69, i16 %57, i32 6
  %71 = insertelement <16 x i16> %70, i16 %61, i32 7
  %72 = insertelement <16 x i16> %71, i16 %31, i32 8
  %73 = insertelement <16 x i16> %72, i16 %37, i32 9
  %74 = insertelement <16 x i16> %73, i16 %43, i32 10
  %75 = insertelement <16 x i16> %74, i16 %48, i32 11
  %76 = insertelement <16 x i16> %75, i16 %51, i32 12
  %77 = insertelement <16 x i16> %76, i16 %55, i32 13
  %78 = insertelement <16 x i16> %77, i16 %59, i32 14
  %79 = insertelement <16 x i16> %78, i16 %63, i32 15
  %80 = icmp slt <16 x i16> %79, <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>
  %81 = select <16 x i1> %80, <16 x i16> %79, <16 x i16> <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>
  %82 = icmp sgt <16 x i16> %79, zeroinitializer
  %83 = trunc <16 x i16> %81 to <16 x i8>
  %84 = select <16 x i1> %82, <16 x i8> %83, <16 x i8> zeroinitializer
  store <16 x i8> %84, <16 x i8>* %10, align 16
  %85 = load i8, i8* %28, align 16
  store i8 %85, i8* %2, align 1
  %86 = load i8, i8* %35, align 1
  %87 = getelementptr inbounds i8, i8* %2, i64 1
  store i8 %86, i8* %87, align 1
  %88 = load i8, i8* %41, align 2
  %89 = getelementptr inbounds i8, i8* %2, i64 2
  store i8 %88, i8* %89, align 1
  %90 = getelementptr inbounds i8, i8* %2, i64 3
  %91 = extractelement <16 x i8> %84, i32 3
  store i8 %91, i8* %90, align 1
  %92 = getelementptr inbounds i8, i8* %2, i64 4
  %93 = extractelement <16 x i8> %84, i32 4
  store i8 %93, i8* %92, align 1
  %94 = getelementptr inbounds i8, i8* %2, i64 5
  %95 = extractelement <16 x i8> %84, i32 5
  store i8 %95, i8* %94, align 1
  %96 = getelementptr inbounds i8, i8* %2, i64 6
  %97 = extractelement <16 x i8> %84, i32 6
  store i8 %97, i8* %96, align 1
  %98 = getelementptr inbounds i8, i8* %2, i64 7
  %99 = extractelement <16 x i8> %84, i32 7
  store i8 %99, i8* %98, align 1
  %100 = load i8, i8* %32, align 8
  %101 = getelementptr inbounds i8, i8* %2, i64 8
  store i8 %100, i8* %101, align 1
  %102 = load i8, i8* %38, align 1
  %103 = getelementptr inbounds i8, i8* %2, i64 9
  store i8 %102, i8* %103, align 1
  %104 = load i8, i8* %44, align 2
  %105 = getelementptr inbounds i8, i8* %2, i64 10
  store i8 %104, i8* %105, align 1
  %106 = load i8, i8* %49, align 1
  %107 = getelementptr inbounds i8, i8* %2, i64 11
  store i8 %106, i8* %107, align 1
  %108 = getelementptr inbounds i8, i8* %2, i64 12
  %109 = extractelement <16 x i8> %84, i32 12
  store i8 %109, i8* %108, align 1
  %110 = getelementptr inbounds i8, i8* %2, i64 13
  %111 = extractelement <16 x i8> %84, i32 13
  store i8 %111, i8* %110, align 1
  %112 = getelementptr inbounds i8, i8* %2, i64 14
  %113 = extractelement <16 x i8> %84, i32 14
  store i8 %113, i8* %112, align 1
  %114 = getelementptr inbounds i8, i8* %2, i64 15
  %115 = extractelement <16 x i8> %84, i32 15
  store i8 %115, i8* %114, align 1
  call void @llvm.lifetime.end(i64 16, i8* nonnull %28) 
  call void @llvm.lifetime.end(i64 16, i8* nonnull %20) 
  call void @llvm.lifetime.end(i64 16, i8* nonnull %12) 
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L7LDMXCSREP6MemoryR5State2MnIjE(%struct.Memory*, %struct.State* nocapture dereferenceable(3376), i64)  {
  %4 = inttoptr i64 %2 to i32*
  %5 = load i32, i32* %4
  %6 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 11, i32 0, i32 0, i32 11, i32 0
  store i32 %5, i32* %6, align 1
  %7 = and i32 %5, 24576
  %8 = trunc i32 %7 to i15
  switch i15 %8, label %9 [
    i15 0, label %13
    i15 8192, label %12
  ]

; <label>:9:                                      ; preds = %3
  %10 = icmp eq i32 %7, 16384
  %11 = select i1 %10, i32 2048, i32 3072
  br label %13

; <label>:12:                                     ; preds = %3
  br label %13

; <label>:13:                                     ; preds = %12, %9, %3
  %14 = phi i32 [ 0, %3 ], [ %11, %9 ], [ 1024, %12 ]
  %15 = tail call i32 @fesetround(i32 %14) 
  ret %struct.Memory* %0
}

; Function Attrs: nounwind
declare i32 @fesetround(i32) local_unnamed_addr 

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L7STMXCSREP6MemoryR5State3MnWIjE(%struct.Memory* readnone, %struct.State* nocapture dereferenceable(3376), i64)  {
  %4 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 11, i32 0, i32 0, i32 11, i32 0
  %5 = load i32, i32* %4, align 1
  %6 = and i32 %5, -33
  store i32 %6, i32* %4, align 1
  %7 = tail call i32 @fegetround() 
  %8 = lshr i32 %7, 10
  %9 = shl i32 %7, 22
  %10 = or i32 %8, %9
  switch i32 %10, label %11 [
    i32 3, label %19
    i32 1, label %13
    i32 2, label %16
  ]

; <label>:11:                                     ; preds = %3
  %12 = and i32 %5, -24609
  br label %22

; <label>:13:                                     ; preds = %3
  %14 = and i32 %5, -24609
  %15 = or i32 %14, 8192
  br label %22

; <label>:16:                                     ; preds = %3
  %17 = and i32 %5, -24609
  %18 = or i32 %17, 16384
  br label %22

; <label>:19:                                     ; preds = %3
  %20 = and i32 %5, -24609
  %21 = or i32 %20, 24576
  br label %22

; <label>:22:                                     ; preds = %19, %16, %13, %11
  %23 = phi i32 [ %12, %11 ], [ %15, %13 ], [ %18, %16 ], [ %21, %19 ]
  store i32 %23, i32* %4, align 1
  %24 = inttoptr i64 %2 to i32*
  store i32 %23, i32* %24
  ret %struct.Memory* %0
}

; Function Attrs: nounwind readonly
declare i32 @fegetround() local_unnamed_addr 

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L7DoSTOSBEP6MemoryR5State(%struct.Memory* readnone, %struct.State* nocapture dereferenceable(3376))  {
  %3 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 11, i32 0, i32 0
  %4 = load i64, i64* %3, align 8
  %5 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 1, i32 0
  %6 = bitcast %union.anon* %5 to i8*
  %7 = load i8, i8* %6, align 8
  %8 = inttoptr i64 %4 to i8*
  store i8 %7, i8* %8
  %9 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 11
  %10 = load i8, i8* %9, align 1
  %11 = icmp eq i8 %10, 0
  %12 = select i1 %11, i64 1, i64 -1
  %13 = add i64 %12, %4
  store i64 %13, i64* %3, align 8
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L7DoSTOSWEP6MemoryR5State(%struct.Memory* readnone, %struct.State* nocapture dereferenceable(3376))  {
  %3 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 11, i32 0, i32 0
  %4 = load i64, i64* %3, align 8
  %5 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 1, i32 0
  %6 = bitcast %union.anon* %5 to i16*
  %7 = load i16, i16* %6, align 8
  %8 = inttoptr i64 %4 to i16*
  store i16 %7, i16* %8
  %9 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 11
  %10 = load i8, i8* %9, align 1
  %11 = icmp eq i8 %10, 0
  %12 = select i1 %11, i64 2, i64 -2
  %13 = add i64 %12, %4
  store i64 %13, i64* %3, align 8
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L7DoSTOSDEP6MemoryR5State(%struct.Memory* readnone, %struct.State* nocapture dereferenceable(3376))  {
  %3 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 11, i32 0, i32 0
  %4 = load i64, i64* %3, align 8
  %5 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 1, i32 0
  %6 = bitcast %union.anon* %5 to i32*
  %7 = load i32, i32* %6, align 8
  %8 = inttoptr i64 %4 to i32*
  store i32 %7, i32* %8
  %9 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 11
  %10 = load i8, i8* %9, align 1
  %11 = icmp eq i8 %10, 0
  %12 = select i1 %11, i64 4, i64 -4
  %13 = add i64 %12, %4
  store i64 %13, i64* %3, align 8
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L7DoSTOSQEP6MemoryR5State(%struct.Memory* readnone, %struct.State* nocapture dereferenceable(3376))  {
  %3 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 11, i32 0, i32 0
  %4 = load i64, i64* %3, align 8
  %5 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 1, i32 0, i32 0
  %6 = load i64, i64* %5, align 8
  %7 = inttoptr i64 %4 to i64*
  store i64 %6, i64* %7
  %8 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 11
  %9 = load i8, i8* %8, align 1
  %10 = icmp eq i8 %9, 0
  %11 = select i1 %10, i64 8, i64 -8
  %12 = add i64 %11, %4
  store i64 %12, i64* %3, align 8
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L7DoSCASBEP6MemoryR5State(%struct.Memory*, %struct.State* nocapture dereferenceable(3376))  {
  %3 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 11, i32 0, i32 0
  %4 = load i64, i64* %3, align 8
  %5 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 1, i32 0
  %6 = bitcast %union.anon* %5 to i8*
  %7 = load i8, i8* %6, align 8
  %8 = inttoptr i64 %4 to i8*
  %9 = load i8, i8* %8
  %10 = sub i8 %7, %9
  %11 = icmp ult i8 %7, %9
  %12 = zext i1 %11 to i8
  %13 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  store i8 %12, i8* %13, align 1
  %14 = zext i8 %10 to i32
  %15 = tail call i32 @llvm.ctpop.i32(i32 %14) 
  %16 = trunc i32 %15 to i8
  %17 = and i8 %16, 1
  %18 = xor i8 %17, 1
  %19 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 %18, i8* %19, align 1
  %20 = xor i8 %9, %7
  %21 = xor i8 %20, %10
  %22 = lshr i8 %21, 4
  %23 = and i8 %22, 1
  %24 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 %23, i8* %24, align 1
  %25 = icmp eq i8 %10, 0
  %26 = zext i1 %25 to i8
  %27 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  store i8 %26, i8* %27, align 1
  %28 = lshr i8 %10, 7
  %29 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 %28, i8* %29, align 1
  %30 = lshr i8 %7, 7
  %31 = lshr i8 %9, 7
  %32 = xor i8 %31, %30
  %33 = xor i8 %28, %30
  %34 = add nuw nsw i8 %33, %32
  %35 = icmp eq i8 %34, 2
  %36 = zext i1 %35 to i8
  %37 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 %36, i8* %37, align 1
  %38 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 11
  %39 = load i8, i8* %38, align 1
  %40 = icmp eq i8 %39, 0
  %41 = select i1 %40, i64 1, i64 -1
  %42 = add i64 %41, %4
  store i64 %42, i64* %3, align 8
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L7DoSCASWEP6MemoryR5State(%struct.Memory*, %struct.State* nocapture dereferenceable(3376))  {
  %3 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 11, i32 0, i32 0
  %4 = load i64, i64* %3, align 8
  %5 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 1, i32 0
  %6 = bitcast %union.anon* %5 to i16*
  %7 = load i16, i16* %6, align 8
  %8 = inttoptr i64 %4 to i16*
  %9 = load i16, i16* %8
  %10 = sub i16 %7, %9
  %11 = icmp ult i16 %7, %9
  %12 = zext i1 %11 to i8
  %13 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  store i8 %12, i8* %13, align 1
  %14 = and i16 %10, 255
  %15 = zext i16 %14 to i32
  %16 = tail call i32 @llvm.ctpop.i32(i32 %15) 
  %17 = trunc i32 %16 to i8
  %18 = and i8 %17, 1
  %19 = xor i8 %18, 1
  %20 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 %19, i8* %20, align 1
  %21 = xor i16 %9, %7
  %22 = xor i16 %21, %10
  %23 = lshr i16 %22, 4
  %24 = trunc i16 %23 to i8
  %25 = and i8 %24, 1
  %26 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 %25, i8* %26, align 1
  %27 = icmp eq i16 %10, 0
  %28 = zext i1 %27 to i8
  %29 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  store i8 %28, i8* %29, align 1
  %30 = lshr i16 %10, 15
  %31 = trunc i16 %30 to i8
  %32 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 %31, i8* %32, align 1
  %33 = lshr i16 %7, 15
  %34 = lshr i16 %9, 15
  %35 = xor i16 %34, %33
  %36 = xor i16 %30, %33
  %37 = add nuw nsw i16 %36, %35
  %38 = icmp eq i16 %37, 2
  %39 = zext i1 %38 to i8
  %40 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 %39, i8* %40, align 1
  %41 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 11
  %42 = load i8, i8* %41, align 1
  %43 = icmp eq i8 %42, 0
  %44 = select i1 %43, i64 2, i64 -2
  %45 = add i64 %44, %4
  store i64 %45, i64* %3, align 8
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L7DoSCASDEP6MemoryR5State(%struct.Memory*, %struct.State* nocapture dereferenceable(3376))  {
  %3 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 11, i32 0, i32 0
  %4 = load i64, i64* %3, align 8
  %5 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 1, i32 0
  %6 = bitcast %union.anon* %5 to i32*
  %7 = load i32, i32* %6, align 8
  %8 = inttoptr i64 %4 to i32*
  %9 = load i32, i32* %8
  %10 = sub i32 %7, %9
  %11 = icmp ult i32 %7, %9
  %12 = zext i1 %11 to i8
  %13 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  store i8 %12, i8* %13, align 1
  %14 = and i32 %10, 255
  %15 = tail call i32 @llvm.ctpop.i32(i32 %14) 
  %16 = trunc i32 %15 to i8
  %17 = and i8 %16, 1
  %18 = xor i8 %17, 1
  %19 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 %18, i8* %19, align 1
  %20 = xor i32 %9, %7
  %21 = xor i32 %20, %10
  %22 = lshr i32 %21, 4
  %23 = trunc i32 %22 to i8
  %24 = and i8 %23, 1
  %25 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 %24, i8* %25, align 1
  %26 = icmp eq i32 %10, 0
  %27 = zext i1 %26 to i8
  %28 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  store i8 %27, i8* %28, align 1
  %29 = lshr i32 %10, 31
  %30 = trunc i32 %29 to i8
  %31 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 %30, i8* %31, align 1
  %32 = lshr i32 %7, 31
  %33 = lshr i32 %9, 31
  %34 = xor i32 %33, %32
  %35 = xor i32 %29, %32
  %36 = add nuw nsw i32 %35, %34
  %37 = icmp eq i32 %36, 2
  %38 = zext i1 %37 to i8
  %39 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 %38, i8* %39, align 1
  %40 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 11
  %41 = load i8, i8* %40, align 1
  %42 = icmp eq i8 %41, 0
  %43 = select i1 %42, i64 4, i64 -4
  %44 = add i64 %43, %4
  store i64 %44, i64* %3, align 8
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L7DoSCASQEP6MemoryR5State(%struct.Memory*, %struct.State* nocapture dereferenceable(3376))  {
  %3 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 11, i32 0, i32 0
  %4 = load i64, i64* %3, align 8
  %5 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 1, i32 0, i32 0
  %6 = load i64, i64* %5, align 8
  %7 = inttoptr i64 %4 to i64*
  %8 = load i64, i64* %7
  %9 = sub i64 %6, %8
  %10 = icmp ult i64 %6, %8
  %11 = zext i1 %10 to i8
  %12 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  store i8 %11, i8* %12, align 1
  %13 = trunc i64 %9 to i32
  %14 = and i32 %13, 255
  %15 = tail call i32 @llvm.ctpop.i32(i32 %14) 
  %16 = trunc i32 %15 to i8
  %17 = and i8 %16, 1
  %18 = xor i8 %17, 1
  %19 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 %18, i8* %19, align 1
  %20 = xor i64 %8, %6
  %21 = xor i64 %20, %9
  %22 = lshr i64 %21, 4
  %23 = trunc i64 %22 to i8
  %24 = and i8 %23, 1
  %25 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 %24, i8* %25, align 1
  %26 = icmp eq i64 %9, 0
  %27 = zext i1 %26 to i8
  %28 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  store i8 %27, i8* %28, align 1
  %29 = lshr i64 %9, 63
  %30 = trunc i64 %29 to i8
  %31 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 %30, i8* %31, align 1
  %32 = lshr i64 %6, 63
  %33 = lshr i64 %8, 63
  %34 = xor i64 %33, %32
  %35 = xor i64 %29, %32
  %36 = add nuw nsw i64 %35, %34
  %37 = icmp eq i64 %36, 2
  %38 = zext i1 %37 to i8
  %39 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 %38, i8* %39, align 1
  %40 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 11
  %41 = load i8, i8* %40, align 1
  %42 = icmp eq i8 %41, 0
  %43 = select i1 %42, i64 8, i64 -8
  %44 = add i64 %43, %4
  store i64 %44, i64* %3, align 8
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L7DoLODSBEP6MemoryR5State(%struct.Memory*, %struct.State* nocapture dereferenceable(3376))  {
  %3 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 9, i32 0, i32 0
  %4 = load i64, i64* %3, align 8
  %5 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 1, i32 0
  %6 = bitcast %union.anon* %5 to i8*
  %7 = inttoptr i64 %4 to i8*
  %8 = load i8, i8* %7
  store i8 %8, i8* %6, align 1
  %9 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 11
  %10 = load i8, i8* %9, align 1
  %11 = icmp eq i8 %10, 0
  %12 = select i1 %11, i64 1, i64 -1
  %13 = add i64 %12, %4
  store i64 %13, i64* %3, align 8
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L7DoLODSWEP6MemoryR5State(%struct.Memory*, %struct.State* nocapture dereferenceable(3376))  {
  %3 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 9, i32 0, i32 0
  %4 = load i64, i64* %3, align 8
  %5 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 1, i32 0
  %6 = bitcast %union.anon* %5 to i16*
  %7 = inttoptr i64 %4 to i16*
  %8 = load i16, i16* %7
  store i16 %8, i16* %6, align 2
  %9 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 11
  %10 = load i8, i8* %9, align 1
  %11 = icmp eq i8 %10, 0
  %12 = select i1 %11, i64 2, i64 -2
  %13 = add i64 %12, %4
  store i64 %13, i64* %3, align 8
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L7DoLODSDEP6MemoryR5State(%struct.Memory*, %struct.State* nocapture dereferenceable(3376))  {
  %3 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 9, i32 0, i32 0
  %4 = load i64, i64* %3, align 8
  %5 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 1, i32 0, i32 0
  %6 = inttoptr i64 %4 to i32*
  %7 = load i32, i32* %6
  %8 = zext i32 %7 to i64
  store i64 %8, i64* %5, align 8
  %9 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 11
  %10 = load i8, i8* %9, align 1
  %11 = icmp eq i8 %10, 0
  %12 = select i1 %11, i64 4, i64 -4
  %13 = add i64 %12, %4
  store i64 %13, i64* %3, align 8
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L7DoLODSQEP6MemoryR5State(%struct.Memory*, %struct.State* nocapture dereferenceable(3376))  {
  %3 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 9, i32 0, i32 0
  %4 = load i64, i64* %3, align 8
  %5 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 1, i32 0, i32 0
  %6 = inttoptr i64 %4 to i64*
  %7 = load i64, i64* %6
  store i64 %7, i64* %5, align 8
  %8 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 11
  %9 = load i8, i8* %8, align 1
  %10 = icmp eq i8 %9, 0
  %11 = select i1 %10, i64 8, i64 -8
  %12 = add i64 %11, %4
  store i64 %12, i64* %3, align 8
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L7DoMOVSBEP6MemoryR5State(%struct.Memory*, %struct.State* nocapture dereferenceable(3376))  {
  %3 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 9, i32 0, i32 0
  %4 = load i64, i64* %3, align 8
  %5 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 11, i32 0, i32 0
  %6 = load i64, i64* %5, align 8
  %7 = inttoptr i64 %4 to i8*
  %8 = load i8, i8* %7
  %9 = inttoptr i64 %6 to i8*
  store i8 %8, i8* %9
  %10 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 11
  %11 = load i8, i8* %10, align 1
  %12 = icmp eq i8 %11, 0
  %13 = select i1 %12, i64 1, i64 -1
  %14 = add i64 %13, %6
  %15 = add i64 %13, %4
  store i64 %14, i64* %5, align 8
  store i64 %15, i64* %3, align 8
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L7DoMOVSWEP6MemoryR5State(%struct.Memory*, %struct.State* nocapture dereferenceable(3376))  {
  %3 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 9, i32 0, i32 0
  %4 = load i64, i64* %3, align 8
  %5 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 11, i32 0, i32 0
  %6 = load i64, i64* %5, align 8
  %7 = inttoptr i64 %4 to i16*
  %8 = load i16, i16* %7
  %9 = inttoptr i64 %6 to i16*
  store i16 %8, i16* %9
  %10 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 11
  %11 = load i8, i8* %10, align 1
  %12 = icmp eq i8 %11, 0
  %13 = select i1 %12, i64 2, i64 -2
  %14 = add i64 %13, %6
  %15 = add i64 %13, %4
  store i64 %14, i64* %5, align 8
  store i64 %15, i64* %3, align 8
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L7DoMOVSDEP6MemoryR5State(%struct.Memory*, %struct.State* nocapture dereferenceable(3376))  {
  %3 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 9, i32 0, i32 0
  %4 = load i64, i64* %3, align 8
  %5 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 11, i32 0, i32 0
  %6 = load i64, i64* %5, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7
  %9 = inttoptr i64 %6 to i32*
  store i32 %8, i32* %9
  %10 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 11
  %11 = load i8, i8* %10, align 1
  %12 = icmp eq i8 %11, 0
  %13 = select i1 %12, i64 4, i64 -4
  %14 = add i64 %13, %6
  %15 = add i64 %13, %4
  store i64 %14, i64* %5, align 8
  store i64 %15, i64* %3, align 8
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L7DoMOVSQEP6MemoryR5State(%struct.Memory*, %struct.State* nocapture dereferenceable(3376))  {
  %3 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 9, i32 0, i32 0
  %4 = load i64, i64* %3, align 8
  %5 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 11, i32 0, i32 0
  %6 = load i64, i64* %5, align 8
  %7 = inttoptr i64 %4 to i64*
  %8 = load i64, i64* %7
  %9 = inttoptr i64 %6 to i64*
  store i64 %8, i64* %9
  %10 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 11
  %11 = load i8, i8* %10, align 1
  %12 = icmp eq i8 %11, 0
  %13 = select i1 %12, i64 8, i64 -8
  %14 = add i64 %13, %6
  %15 = add i64 %13, %4
  store i64 %14, i64* %5, align 8
  store i64 %15, i64* %3, align 8
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L7DoCMPSBEP6MemoryR5State(%struct.Memory*, %struct.State* nocapture dereferenceable(3376))  {
  %3 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 9, i32 0, i32 0
  %4 = load i64, i64* %3, align 8
  %5 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 11, i32 0, i32 0
  %6 = load i64, i64* %5, align 8
  %7 = inttoptr i64 %4 to i8*
  %8 = load i8, i8* %7
  %9 = inttoptr i64 %6 to i8*
  %10 = load i8, i8* %9
  %11 = sub i8 %8, %10
  %12 = icmp ult i8 %8, %10
  %13 = zext i1 %12 to i8
  %14 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  store i8 %13, i8* %14, align 1
  %15 = zext i8 %11 to i32
  %16 = tail call i32 @llvm.ctpop.i32(i32 %15) 
  %17 = trunc i32 %16 to i8
  %18 = and i8 %17, 1
  %19 = xor i8 %18, 1
  %20 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 %19, i8* %20, align 1
  %21 = xor i8 %10, %8
  %22 = xor i8 %21, %11
  %23 = lshr i8 %22, 4
  %24 = and i8 %23, 1
  %25 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 %24, i8* %25, align 1
  %26 = icmp eq i8 %11, 0
  %27 = zext i1 %26 to i8
  %28 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  store i8 %27, i8* %28, align 1
  %29 = lshr i8 %11, 7
  %30 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 %29, i8* %30, align 1
  %31 = lshr i8 %8, 7
  %32 = lshr i8 %10, 7
  %33 = xor i8 %32, %31
  %34 = xor i8 %29, %31
  %35 = add nuw nsw i8 %34, %33
  %36 = icmp eq i8 %35, 2
  %37 = zext i1 %36 to i8
  %38 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 %37, i8* %38, align 1
  %39 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 11
  %40 = load i8, i8* %39, align 1
  %41 = icmp eq i8 %40, 0
  %42 = select i1 %41, i64 1, i64 -1
  %43 = add i64 %42, %4
  %44 = add i64 %42, %6
  store i64 %44, i64* %5, align 8
  store i64 %43, i64* %3, align 8
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L7DoCMPSWEP6MemoryR5State(%struct.Memory*, %struct.State* nocapture dereferenceable(3376))  {
  %3 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 9, i32 0, i32 0
  %4 = load i64, i64* %3, align 8
  %5 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 11, i32 0, i32 0
  %6 = load i64, i64* %5, align 8
  %7 = inttoptr i64 %4 to i16*
  %8 = load i16, i16* %7
  %9 = inttoptr i64 %6 to i16*
  %10 = load i16, i16* %9
  %11 = sub i16 %8, %10
  %12 = icmp ult i16 %8, %10
  %13 = zext i1 %12 to i8
  %14 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  store i8 %13, i8* %14, align 1
  %15 = and i16 %11, 255
  %16 = zext i16 %15 to i32
  %17 = tail call i32 @llvm.ctpop.i32(i32 %16) 
  %18 = trunc i32 %17 to i8
  %19 = and i8 %18, 1
  %20 = xor i8 %19, 1
  %21 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 %20, i8* %21, align 1
  %22 = xor i16 %10, %8
  %23 = xor i16 %22, %11
  %24 = lshr i16 %23, 4
  %25 = trunc i16 %24 to i8
  %26 = and i8 %25, 1
  %27 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 %26, i8* %27, align 1
  %28 = icmp eq i16 %11, 0
  %29 = zext i1 %28 to i8
  %30 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  store i8 %29, i8* %30, align 1
  %31 = lshr i16 %11, 15
  %32 = trunc i16 %31 to i8
  %33 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 %32, i8* %33, align 1
  %34 = lshr i16 %8, 15
  %35 = lshr i16 %10, 15
  %36 = xor i16 %35, %34
  %37 = xor i16 %31, %34
  %38 = add nuw nsw i16 %37, %36
  %39 = icmp eq i16 %38, 2
  %40 = zext i1 %39 to i8
  %41 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 %40, i8* %41, align 1
  %42 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 11
  %43 = load i8, i8* %42, align 1
  %44 = icmp eq i8 %43, 0
  %45 = select i1 %44, i64 2, i64 -2
  %46 = add i64 %45, %4
  %47 = add i64 %45, %6
  store i64 %47, i64* %5, align 8
  store i64 %46, i64* %3, align 8
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L7DoCMPSDEP6MemoryR5State(%struct.Memory*, %struct.State* nocapture dereferenceable(3376))  {
  %3 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 9, i32 0, i32 0
  %4 = load i64, i64* %3, align 8
  %5 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 11, i32 0, i32 0
  %6 = load i64, i64* %5, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7
  %9 = inttoptr i64 %6 to i32*
  %10 = load i32, i32* %9
  %11 = sub i32 %8, %10
  %12 = icmp ult i32 %8, %10
  %13 = zext i1 %12 to i8
  %14 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  store i8 %13, i8* %14, align 1
  %15 = and i32 %11, 255
  %16 = tail call i32 @llvm.ctpop.i32(i32 %15) 
  %17 = trunc i32 %16 to i8
  %18 = and i8 %17, 1
  %19 = xor i8 %18, 1
  %20 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 %19, i8* %20, align 1
  %21 = xor i32 %10, %8
  %22 = xor i32 %21, %11
  %23 = lshr i32 %22, 4
  %24 = trunc i32 %23 to i8
  %25 = and i8 %24, 1
  %26 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 %25, i8* %26, align 1
  %27 = icmp eq i32 %11, 0
  %28 = zext i1 %27 to i8
  %29 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  store i8 %28, i8* %29, align 1
  %30 = lshr i32 %11, 31
  %31 = trunc i32 %30 to i8
  %32 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 %31, i8* %32, align 1
  %33 = lshr i32 %8, 31
  %34 = lshr i32 %10, 31
  %35 = xor i32 %34, %33
  %36 = xor i32 %30, %33
  %37 = add nuw nsw i32 %36, %35
  %38 = icmp eq i32 %37, 2
  %39 = zext i1 %38 to i8
  %40 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 %39, i8* %40, align 1
  %41 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 11
  %42 = load i8, i8* %41, align 1
  %43 = icmp eq i8 %42, 0
  %44 = select i1 %43, i64 4, i64 -4
  %45 = add i64 %44, %4
  %46 = add i64 %44, %6
  store i64 %46, i64* %5, align 8
  store i64 %45, i64* %3, align 8
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L7DoCMPSQEP6MemoryR5State(%struct.Memory*, %struct.State* nocapture dereferenceable(3376))  {
  %3 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 9, i32 0, i32 0
  %4 = load i64, i64* %3, align 8
  %5 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 11, i32 0, i32 0
  %6 = load i64, i64* %5, align 8
  %7 = inttoptr i64 %4 to i64*
  %8 = load i64, i64* %7
  %9 = inttoptr i64 %6 to i64*
  %10 = load i64, i64* %9
  %11 = sub i64 %8, %10
  %12 = icmp ult i64 %8, %10
  %13 = zext i1 %12 to i8
  %14 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  store i8 %13, i8* %14, align 1
  %15 = trunc i64 %11 to i32
  %16 = and i32 %15, 255
  %17 = tail call i32 @llvm.ctpop.i32(i32 %16) 
  %18 = trunc i32 %17 to i8
  %19 = and i8 %18, 1
  %20 = xor i8 %19, 1
  %21 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 %20, i8* %21, align 1
  %22 = xor i64 %10, %8
  %23 = xor i64 %22, %11
  %24 = lshr i64 %23, 4
  %25 = trunc i64 %24 to i8
  %26 = and i8 %25, 1
  %27 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 %26, i8* %27, align 1
  %28 = icmp eq i64 %11, 0
  %29 = zext i1 %28 to i8
  %30 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  store i8 %29, i8* %30, align 1
  %31 = lshr i64 %11, 63
  %32 = trunc i64 %31 to i8
  %33 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 %32, i8* %33, align 1
  %34 = lshr i64 %8, 63
  %35 = lshr i64 %10, 63
  %36 = xor i64 %35, %34
  %37 = xor i64 %31, %34
  %38 = add nuw nsw i64 %37, %36
  %39 = icmp eq i64 %38, 2
  %40 = zext i1 %39 to i8
  %41 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 %40, i8* %41, align 1
  %42 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 11
  %43 = load i8, i8* %42, align 1
  %44 = icmp eq i8 %43, 0
  %45 = select i1 %44, i64 8, i64 -8
  %46 = add i64 %45, %4
  %47 = add i64 %45, %6
  store i64 %47, i64* %5, align 8
  store i64 %46, i64* %3, align 8
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L11DoREP_LODSBEP6MemoryR5State(%struct.Memory*, %struct.State* nocapture dereferenceable(3376))  {
  %3 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 5, i32 0, i32 0
  %4 = load i64, i64* %3, align 8
  %5 = icmp eq i64 %4, 0
  br i1 %5, label %22, label %6

; <label>:6:                                      ; preds = %2
  %7 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 9, i32 0, i32 0
  %8 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 1, i32 0
  %9 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 11
  %10 = load i8, i8* %9, align 1
  %11 = icmp eq i8 %10, 0
  %12 = select i1 %11, i64 1, i64 -1
  %13 = load i64, i64* %7, align 8
  %14 = add i64 %4, -1
  %15 = mul i64 %12, %14
  %16 = mul i64 %12, %4
  %17 = bitcast %union.anon* %8 to i8*
  %18 = add i64 %13, %15
  %19 = add i64 %13, %16
  %20 = inttoptr i64 %18 to i8*
  %21 = load i8, i8* %20
  store i64 %19, i64* %7, align 8
  store i8 %21, i8* %17, align 1
  store i64 0, i64* %3, align 8
  br label %22

; <label>:22:                                     ; preds = %6, %2
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L11DoREP_LODSWEP6MemoryR5State(%struct.Memory*, %struct.State* nocapture dereferenceable(3376))  {
  %3 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 5, i32 0, i32 0
  %4 = load i64, i64* %3, align 8
  %5 = icmp eq i64 %4, 0
  br i1 %5, label %22, label %6

; <label>:6:                                      ; preds = %2
  %7 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 9, i32 0, i32 0
  %8 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 1, i32 0
  %9 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 11
  %10 = load i8, i8* %9, align 1
  %11 = icmp eq i8 %10, 0
  %12 = select i1 %11, i64 2, i64 -2
  %13 = load i64, i64* %7, align 8
  %14 = add i64 %4, -1
  %15 = mul i64 %12, %14
  %16 = mul i64 %12, %4
  %17 = bitcast %union.anon* %8 to i16*
  %18 = add i64 %13, %15
  %19 = add i64 %13, %16
  %20 = inttoptr i64 %18 to i16*
  %21 = load i16, i16* %20
  store i64 %19, i64* %7, align 8
  store i16 %21, i16* %17, align 2
  store i64 0, i64* %3, align 8
  br label %22

; <label>:22:                                     ; preds = %6, %2
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L11DoREP_LODSDEP6MemoryR5State(%struct.Memory*, %struct.State* nocapture dereferenceable(3376))  {
  %3 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 5, i32 0, i32 0
  %4 = load i64, i64* %3, align 8
  %5 = icmp eq i64 %4, 0
  br i1 %5, label %22, label %6

; <label>:6:                                      ; preds = %2
  %7 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 9, i32 0, i32 0
  %8 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 11
  %9 = load i8, i8* %8, align 1
  %10 = icmp eq i8 %9, 0
  %11 = select i1 %10, i64 4, i64 -4
  %12 = load i64, i64* %7, align 8
  %13 = add i64 %4, -1
  %14 = mul i64 %11, %13
  %15 = mul i64 %11, %4
  %16 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 1, i32 0, i32 0
  %17 = add i64 %12, %14
  %18 = add i64 %12, %15
  %19 = inttoptr i64 %17 to i32*
  %20 = load i32, i32* %19
  %21 = zext i32 %20 to i64
  store i64 %18, i64* %7, align 8
  store i64 %21, i64* %16, align 8
  store i64 0, i64* %3, align 8
  br label %22

; <label>:22:                                     ; preds = %6, %2
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L11DoREP_LODSQEP6MemoryR5State(%struct.Memory*, %struct.State* nocapture dereferenceable(3376))  {
  %3 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 5, i32 0, i32 0
  %4 = load i64, i64* %3, align 8
  %5 = icmp eq i64 %4, 0
  br i1 %5, label %21, label %6

; <label>:6:                                      ; preds = %2
  %7 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 9, i32 0, i32 0
  %8 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 11
  %9 = load i8, i8* %8, align 1
  %10 = icmp eq i8 %9, 0
  %11 = select i1 %10, i64 8, i64 -8
  %12 = load i64, i64* %7, align 8
  %13 = add i64 %4, -1
  %14 = mul i64 %11, %13
  %15 = mul i64 %11, %4
  %16 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 1, i32 0, i32 0
  %17 = add i64 %12, %14
  %18 = add i64 %12, %15
  %19 = inttoptr i64 %17 to i64*
  %20 = load i64, i64* %19
  store i64 %18, i64* %7, align 8
  store i64 %20, i64* %16, align 8
  store i64 0, i64* %3, align 8
  br label %21

; <label>:21:                                     ; preds = %6, %2
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L11DoREP_MOVSBEP6MemoryR5State(%struct.Memory* readnone, %struct.State* nocapture dereferenceable(3376))  {
  %3 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 5, i32 0, i32 0
  %4 = load i64, i64* %3, align 8
  %5 = icmp eq i64 %4, 0
  br i1 %5, label %31, label %6

; <label>:6:                                      ; preds = %2
  %7 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 9, i32 0, i32 0
  %8 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 11, i32 0, i32 0
  %9 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 11
  %10 = load i8, i8* %9, align 1
  %11 = icmp eq i8 %10, 0
  %12 = select i1 %11, i64 1, i64 -1
  %13 = load i64, i64* %7, align 8
  %14 = load i64, i64* %8, align 8
  %15 = mul i64 %12, %4
  %16 = add i64 %14, %15
  br label %17

; <label>:17:                                     ; preds = %17, %6
  %18 = phi i64 [ %14, %6 ], [ %25, %17 ]
  %19 = phi i64 [ %13, %6 ], [ %26, %17 ]
  %20 = phi i64 [ %4, %6 ], [ %27, %17 ]
  %21 = phi %struct.Memory* [ %0, %6 ], [ %21, %17 ]
  %22 = inttoptr i64 %19 to i8*
  %23 = load i8, i8* %22
  %24 = inttoptr i64 %18 to i8*
  store i8 %23, i8* %24
  %25 = add i64 %12, %18
  %26 = add i64 %12, %19
  %27 = add i64 %20, -1
  %28 = icmp eq i64 %27, 0
  br i1 %28, label %29, label %17

; <label>:29:                                     ; preds = %17
  %30 = add i64 %13, %15
  store i64 %30, i64* %7, align 8
  store i64 %16, i64* %8, align 8
  store i64 0, i64* %3, align 8
  br label %31

; <label>:31:                                     ; preds = %29, %2
  %32 = phi %struct.Memory* [ %21, %29 ], [ %0, %2 ]
  ret %struct.Memory* %32
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L11DoREP_MOVSWEP6MemoryR5State(%struct.Memory* readnone, %struct.State* nocapture dereferenceable(3376))  {
  %3 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 5, i32 0, i32 0
  %4 = load i64, i64* %3, align 8
  %5 = icmp eq i64 %4, 0
  br i1 %5, label %31, label %6

; <label>:6:                                      ; preds = %2
  %7 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 9, i32 0, i32 0
  %8 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 11, i32 0, i32 0
  %9 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 11
  %10 = load i8, i8* %9, align 1
  %11 = icmp eq i8 %10, 0
  %12 = select i1 %11, i64 2, i64 -2
  %13 = load i64, i64* %7, align 8
  %14 = load i64, i64* %8, align 8
  %15 = mul i64 %12, %4
  %16 = add i64 %14, %15
  br label %17

; <label>:17:                                     ; preds = %17, %6
  %18 = phi i64 [ %14, %6 ], [ %25, %17 ]
  %19 = phi i64 [ %13, %6 ], [ %26, %17 ]
  %20 = phi i64 [ %4, %6 ], [ %27, %17 ]
  %21 = phi %struct.Memory* [ %0, %6 ], [ %21, %17 ]
  %22 = inttoptr i64 %19 to i16*
  %23 = load i16, i16* %22
  %24 = inttoptr i64 %18 to i16*
  store i16 %23, i16* %24
  %25 = add i64 %12, %18
  %26 = add i64 %12, %19
  %27 = add i64 %20, -1
  %28 = icmp eq i64 %27, 0
  br i1 %28, label %29, label %17

; <label>:29:                                     ; preds = %17
  %30 = add i64 %13, %15
  store i64 %30, i64* %7, align 8
  store i64 %16, i64* %8, align 8
  store i64 0, i64* %3, align 8
  br label %31

; <label>:31:                                     ; preds = %29, %2
  %32 = phi %struct.Memory* [ %21, %29 ], [ %0, %2 ]
  ret %struct.Memory* %32
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L11DoREP_MOVSDEP6MemoryR5State(%struct.Memory* readnone, %struct.State* nocapture dereferenceable(3376))  {
  %3 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 5, i32 0, i32 0
  %4 = load i64, i64* %3, align 8
  %5 = icmp eq i64 %4, 0
  br i1 %5, label %31, label %6

; <label>:6:                                      ; preds = %2
  %7 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 9, i32 0, i32 0
  %8 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 11, i32 0, i32 0
  %9 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 11
  %10 = load i8, i8* %9, align 1
  %11 = icmp eq i8 %10, 0
  %12 = select i1 %11, i64 4, i64 -4
  %13 = load i64, i64* %7, align 8
  %14 = load i64, i64* %8, align 8
  %15 = mul i64 %12, %4
  %16 = add i64 %14, %15
  br label %17

; <label>:17:                                     ; preds = %17, %6
  %18 = phi i64 [ %14, %6 ], [ %25, %17 ]
  %19 = phi i64 [ %13, %6 ], [ %26, %17 ]
  %20 = phi i64 [ %4, %6 ], [ %27, %17 ]
  %21 = phi %struct.Memory* [ %0, %6 ], [ %21, %17 ]
  %22 = inttoptr i64 %19 to i32*
  %23 = load i32, i32* %22
  %24 = inttoptr i64 %18 to i32*
  store i32 %23, i32* %24
  %25 = add i64 %12, %18
  %26 = add i64 %12, %19
  %27 = add i64 %20, -1
  %28 = icmp eq i64 %27, 0
  br i1 %28, label %29, label %17

; <label>:29:                                     ; preds = %17
  %30 = add i64 %13, %15
  store i64 %30, i64* %7, align 8
  store i64 %16, i64* %8, align 8
  store i64 0, i64* %3, align 8
  br label %31

; <label>:31:                                     ; preds = %29, %2
  %32 = phi %struct.Memory* [ %21, %29 ], [ %0, %2 ]
  ret %struct.Memory* %32
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L11DoREP_MOVSQEP6MemoryR5State(%struct.Memory* readnone, %struct.State* nocapture dereferenceable(3376))  {
  %3 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 5, i32 0, i32 0
  %4 = load i64, i64* %3, align 8
  %5 = icmp eq i64 %4, 0
  br i1 %5, label %31, label %6

; <label>:6:                                      ; preds = %2
  %7 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 9, i32 0, i32 0
  %8 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 11, i32 0, i32 0
  %9 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 11
  %10 = load i8, i8* %9, align 1
  %11 = icmp eq i8 %10, 0
  %12 = select i1 %11, i64 8, i64 -8
  %13 = load i64, i64* %7, align 8
  %14 = load i64, i64* %8, align 8
  %15 = mul i64 %12, %4
  %16 = add i64 %14, %15
  br label %17

; <label>:17:                                     ; preds = %17, %6
  %18 = phi i64 [ %14, %6 ], [ %25, %17 ]
  %19 = phi i64 [ %13, %6 ], [ %26, %17 ]
  %20 = phi i64 [ %4, %6 ], [ %27, %17 ]
  %21 = phi %struct.Memory* [ %0, %6 ], [ %21, %17 ]
  %22 = inttoptr i64 %19 to i64*
  %23 = load i64, i64* %22
  %24 = inttoptr i64 %18 to i64*
  store i64 %23, i64* %24
  %25 = add i64 %12, %18
  %26 = add i64 %12, %19
  %27 = add i64 %20, -1
  %28 = icmp eq i64 %27, 0
  br i1 %28, label %29, label %17

; <label>:29:                                     ; preds = %17
  %30 = add i64 %13, %15
  store i64 %30, i64* %7, align 8
  store i64 %16, i64* %8, align 8
  store i64 0, i64* %3, align 8
  br label %31

; <label>:31:                                     ; preds = %29, %2
  %32 = phi %struct.Memory* [ %21, %29 ], [ %0, %2 ]
  ret %struct.Memory* %32
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L11DoREP_STOSBEP6MemoryR5State(%struct.Memory* readnone, %struct.State* nocapture dereferenceable(3376))  {
  %3 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 5, i32 0, i32 0
  %4 = load i64, i64* %3, align 8
  %5 = icmp eq i64 %4, 0
  br i1 %5, label %27, label %6

; <label>:6:                                      ; preds = %2
  %7 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 11, i32 0, i32 0
  %8 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 1, i32 0
  %9 = bitcast %union.anon* %8 to i8*
  %10 = load i8, i8* %9, align 8
  %11 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 11
  %12 = load i8, i8* %11, align 1
  %13 = icmp eq i8 %12, 0
  %14 = select i1 %13, i64 1, i64 -1
  %15 = load i64, i64* %7, align 8
  %16 = mul i64 %14, %4
  br label %17

; <label>:17:                                     ; preds = %17, %6
  %18 = phi i64 [ %15, %6 ], [ %22, %17 ]
  %19 = phi i64 [ %4, %6 ], [ %23, %17 ]
  %20 = phi %struct.Memory* [ %0, %6 ], [ %20, %17 ]
  %21 = inttoptr i64 %18 to i8*
  store i8 %10, i8* %21
  %22 = add i64 %14, %18
  %23 = add i64 %19, -1
  %24 = icmp eq i64 %23, 0
  br i1 %24, label %25, label %17

; <label>:25:                                     ; preds = %17
  %26 = add i64 %15, %16
  store i64 %26, i64* %7, align 8
  store i64 0, i64* %3, align 8
  br label %27

; <label>:27:                                     ; preds = %25, %2
  %28 = phi %struct.Memory* [ %20, %25 ], [ %0, %2 ]
  ret %struct.Memory* %28
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L11DoREP_STOSWEP6MemoryR5State(%struct.Memory* readnone, %struct.State* nocapture dereferenceable(3376))  {
  %3 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 5, i32 0, i32 0
  %4 = load i64, i64* %3, align 8
  %5 = icmp eq i64 %4, 0
  br i1 %5, label %27, label %6

; <label>:6:                                      ; preds = %2
  %7 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 11, i32 0, i32 0
  %8 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 1, i32 0
  %9 = bitcast %union.anon* %8 to i16*
  %10 = load i16, i16* %9, align 8
  %11 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 11
  %12 = load i8, i8* %11, align 1
  %13 = icmp eq i8 %12, 0
  %14 = select i1 %13, i64 2, i64 -2
  %15 = load i64, i64* %7, align 8
  %16 = mul i64 %14, %4
  br label %17

; <label>:17:                                     ; preds = %17, %6
  %18 = phi i64 [ %15, %6 ], [ %22, %17 ]
  %19 = phi i64 [ %4, %6 ], [ %23, %17 ]
  %20 = phi %struct.Memory* [ %0, %6 ], [ %20, %17 ]
  %21 = inttoptr i64 %18 to i16*
  store i16 %10, i16* %21
  %22 = add i64 %14, %18
  %23 = add i64 %19, -1
  %24 = icmp eq i64 %23, 0
  br i1 %24, label %25, label %17

; <label>:25:                                     ; preds = %17
  %26 = add i64 %15, %16
  store i64 %26, i64* %7, align 8
  store i64 0, i64* %3, align 8
  br label %27

; <label>:27:                                     ; preds = %25, %2
  %28 = phi %struct.Memory* [ %20, %25 ], [ %0, %2 ]
  ret %struct.Memory* %28
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L11DoREP_STOSDEP6MemoryR5State(%struct.Memory* readnone, %struct.State* nocapture dereferenceable(3376))  {
  %3 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 5, i32 0, i32 0
  %4 = load i64, i64* %3, align 8
  %5 = icmp eq i64 %4, 0
  br i1 %5, label %27, label %6

; <label>:6:                                      ; preds = %2
  %7 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 11, i32 0, i32 0
  %8 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 1, i32 0
  %9 = bitcast %union.anon* %8 to i32*
  %10 = load i32, i32* %9, align 8
  %11 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 11
  %12 = load i8, i8* %11, align 1
  %13 = icmp eq i8 %12, 0
  %14 = select i1 %13, i64 4, i64 -4
  %15 = load i64, i64* %7, align 8
  %16 = mul i64 %14, %4
  br label %17

; <label>:17:                                     ; preds = %17, %6
  %18 = phi i64 [ %15, %6 ], [ %22, %17 ]
  %19 = phi i64 [ %4, %6 ], [ %23, %17 ]
  %20 = phi %struct.Memory* [ %0, %6 ], [ %20, %17 ]
  %21 = inttoptr i64 %18 to i32*
  store i32 %10, i32* %21
  %22 = add i64 %14, %18
  %23 = add i64 %19, -1
  %24 = icmp eq i64 %23, 0
  br i1 %24, label %25, label %17

; <label>:25:                                     ; preds = %17
  %26 = add i64 %15, %16
  store i64 %26, i64* %7, align 8
  store i64 0, i64* %3, align 8
  br label %27

; <label>:27:                                     ; preds = %25, %2
  %28 = phi %struct.Memory* [ %20, %25 ], [ %0, %2 ]
  ret %struct.Memory* %28
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L11DoREP_STOSQEP6MemoryR5State(%struct.Memory* readnone, %struct.State* nocapture dereferenceable(3376))  {
  %3 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 5, i32 0, i32 0
  %4 = load i64, i64* %3, align 8
  %5 = icmp eq i64 %4, 0
  br i1 %5, label %26, label %6

; <label>:6:                                      ; preds = %2
  %7 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 11, i32 0, i32 0
  %8 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 1, i32 0, i32 0
  %9 = load i64, i64* %8, align 8
  %10 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 11
  %11 = load i8, i8* %10, align 1
  %12 = icmp eq i8 %11, 0
  %13 = select i1 %12, i64 8, i64 -8
  %14 = load i64, i64* %7, align 8
  %15 = mul i64 %13, %4
  br label %16

; <label>:16:                                     ; preds = %16, %6
  %17 = phi i64 [ %14, %6 ], [ %21, %16 ]
  %18 = phi i64 [ %4, %6 ], [ %22, %16 ]
  %19 = phi %struct.Memory* [ %0, %6 ], [ %19, %16 ]
  %20 = inttoptr i64 %17 to i64*
  store i64 %9, i64* %20
  %21 = add i64 %13, %17
  %22 = add i64 %18, -1
  %23 = icmp eq i64 %22, 0
  br i1 %23, label %24, label %16

; <label>:24:                                     ; preds = %16
  %25 = add i64 %14, %15
  store i64 %25, i64* %7, align 8
  store i64 0, i64* %3, align 8
  br label %26

; <label>:26:                                     ; preds = %24, %2
  %27 = phi %struct.Memory* [ %19, %24 ], [ %0, %2 ]
  ret %struct.Memory* %27
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L12DoREPE_CMPSBEP6MemoryR5State(%struct.Memory*, %struct.State* nocapture dereferenceable(3376))  {
  %3 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 5, i32 0, i32 0
  %4 = load i64, i64* %3, align 8
  %5 = icmp eq i64 %4, 0
  br i1 %5, label %57, label %6

; <label>:6:                                      ; preds = %2
  %7 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 9, i32 0, i32 0
  %8 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 11, i32 0, i32 0
  %9 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  %10 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  %11 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  %12 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 11
  %13 = load i8, i8* %12, align 1
  %14 = icmp eq i8 %13, 0
  %15 = select i1 %14, i64 1, i64 -1
  %16 = load i64, i64* %7, align 8
  %17 = load i64, i64* %8, align 8
  br label %18

; <label>:18:                                     ; preds = %18, %6
  %19 = phi i64 [ %29, %18 ], [ %17, %6 ]
  %20 = phi i64 [ %28, %18 ], [ %16, %6 ]
  %21 = phi i64 [ %30, %18 ], [ %4, %6 ]
  %22 = inttoptr i64 %20 to i8*
  %23 = load i8, i8* %22
  %24 = inttoptr i64 %19 to i8*
  %25 = load i8, i8* %24
  %26 = sub i8 %23, %25
  %27 = icmp eq i8 %26, 0
  %28 = add i64 %15, %20
  %29 = add i64 %15, %19
  %30 = add i64 %21, -1
  %31 = icmp ne i64 %30, 0
  %32 = and i1 %31, %27
  br i1 %32, label %18, label %33

; <label>:33:                                     ; preds = %18
  %34 = lshr i8 %26, 7
  %35 = lshr i8 %23, 7
  %36 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  %37 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  %38 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  %39 = icmp ult i8 %23, %25
  %40 = zext i1 %39 to i8
  %41 = zext i8 %26 to i32
  %42 = tail call i32 @llvm.ctpop.i32(i32 %41) 
  %43 = trunc i32 %42 to i8
  %44 = and i8 %43, 1
  %45 = xor i8 %44, 1
  %46 = xor i8 %25, %23
  %47 = xor i8 %46, %26
  %48 = lshr i8 %47, 4
  %49 = and i8 %48, 1
  %50 = zext i1 %27 to i8
  %51 = xor i8 %34, %35
  %52 = lshr i8 %25, 7
  %53 = xor i8 %52, %35
  %54 = add nuw nsw i8 %51, %53
  %55 = icmp eq i8 %54, 2
  %56 = zext i1 %55 to i8
  store i64 %28, i64* %7, align 8
  store i64 %29, i64* %8, align 8
  store i8 %40, i8* %9, align 1
  store i8 %45, i8* %36, align 1
  store i8 %49, i8* %10, align 1
  store i8 %50, i8* %37, align 1
  store i8 %34, i8* %11, align 1
  store i8 %56, i8* %38, align 1
  store i64 %30, i64* %3, align 8
  br label %57

; <label>:57:                                     ; preds = %33, %2
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L12DoREPE_CMPSWEP6MemoryR5State(%struct.Memory*, %struct.State* nocapture dereferenceable(3376))  {
  %3 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 5, i32 0, i32 0
  %4 = load i64, i64* %3, align 8
  %5 = icmp eq i64 %4, 0
  br i1 %5, label %60, label %6

; <label>:6:                                      ; preds = %2
  %7 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 9, i32 0, i32 0
  %8 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 11, i32 0, i32 0
  %9 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  %10 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  %11 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  %12 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 11
  %13 = load i8, i8* %12, align 1
  %14 = icmp eq i8 %13, 0
  %15 = select i1 %14, i64 2, i64 -2
  %16 = load i64, i64* %7, align 8
  %17 = load i64, i64* %8, align 8
  br label %18

; <label>:18:                                     ; preds = %18, %6
  %19 = phi i64 [ %29, %18 ], [ %17, %6 ]
  %20 = phi i64 [ %28, %18 ], [ %16, %6 ]
  %21 = phi i64 [ %30, %18 ], [ %4, %6 ]
  %22 = inttoptr i64 %20 to i16*
  %23 = load i16, i16* %22
  %24 = inttoptr i64 %19 to i16*
  %25 = load i16, i16* %24
  %26 = sub i16 %23, %25
  %27 = icmp eq i16 %26, 0
  %28 = add i64 %15, %20
  %29 = add i64 %15, %19
  %30 = add i64 %21, -1
  %31 = icmp ne i64 %30, 0
  %32 = and i1 %31, %27
  br i1 %32, label %18, label %33

; <label>:33:                                     ; preds = %18
  %34 = lshr i16 %26, 15
  %35 = lshr i16 %23, 15
  %36 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  %37 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  %38 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  %39 = icmp ult i16 %23, %25
  %40 = zext i1 %39 to i8
  %41 = and i16 %26, 255
  %42 = zext i16 %41 to i32
  %43 = tail call i32 @llvm.ctpop.i32(i32 %42) 
  %44 = trunc i32 %43 to i8
  %45 = and i8 %44, 1
  %46 = xor i8 %45, 1
  %47 = xor i16 %25, %23
  %48 = xor i16 %47, %26
  %49 = lshr i16 %48, 4
  %50 = trunc i16 %49 to i8
  %51 = and i8 %50, 1
  %52 = zext i1 %27 to i8
  %53 = trunc i16 %34 to i8
  %54 = xor i16 %34, %35
  %55 = lshr i16 %25, 15
  %56 = xor i16 %55, %35
  %57 = add nuw nsw i16 %54, %56
  %58 = icmp eq i16 %57, 2
  %59 = zext i1 %58 to i8
  store i64 %28, i64* %7, align 8
  store i64 %29, i64* %8, align 8
  store i8 %40, i8* %9, align 1
  store i8 %46, i8* %36, align 1
  store i8 %51, i8* %10, align 1
  store i8 %52, i8* %37, align 1
  store i8 %53, i8* %11, align 1
  store i8 %59, i8* %38, align 1
  store i64 %30, i64* %3, align 8
  br label %60

; <label>:60:                                     ; preds = %33, %2
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L12DoREPE_CMPSDEP6MemoryR5State(%struct.Memory*, %struct.State* nocapture dereferenceable(3376))  {
  %3 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 5, i32 0, i32 0
  %4 = load i64, i64* %3, align 8
  %5 = icmp eq i64 %4, 0
  br i1 %5, label %59, label %6

; <label>:6:                                      ; preds = %2
  %7 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 9, i32 0, i32 0
  %8 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 11, i32 0, i32 0
  %9 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  %10 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  %11 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  %12 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 11
  %13 = load i8, i8* %12, align 1
  %14 = icmp eq i8 %13, 0
  %15 = select i1 %14, i64 4, i64 -4
  %16 = load i64, i64* %7, align 8
  %17 = load i64, i64* %8, align 8
  br label %18

; <label>:18:                                     ; preds = %18, %6
  %19 = phi i64 [ %29, %18 ], [ %17, %6 ]
  %20 = phi i64 [ %28, %18 ], [ %16, %6 ]
  %21 = phi i64 [ %30, %18 ], [ %4, %6 ]
  %22 = inttoptr i64 %20 to i32*
  %23 = load i32, i32* %22
  %24 = inttoptr i64 %19 to i32*
  %25 = load i32, i32* %24
  %26 = sub i32 %23, %25
  %27 = icmp eq i32 %26, 0
  %28 = add i64 %15, %20
  %29 = add i64 %15, %19
  %30 = add i64 %21, -1
  %31 = icmp ne i64 %30, 0
  %32 = and i1 %31, %27
  br i1 %32, label %18, label %33

; <label>:33:                                     ; preds = %18
  %34 = lshr i32 %26, 31
  %35 = lshr i32 %23, 31
  %36 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  %37 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  %38 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  %39 = icmp ult i32 %23, %25
  %40 = zext i1 %39 to i8
  %41 = and i32 %26, 255
  %42 = tail call i32 @llvm.ctpop.i32(i32 %41) 
  %43 = trunc i32 %42 to i8
  %44 = and i8 %43, 1
  %45 = xor i8 %44, 1
  %46 = xor i32 %25, %23
  %47 = xor i32 %46, %26
  %48 = lshr i32 %47, 4
  %49 = trunc i32 %48 to i8
  %50 = and i8 %49, 1
  %51 = zext i1 %27 to i8
  %52 = trunc i32 %34 to i8
  %53 = xor i32 %34, %35
  %54 = lshr i32 %25, 31
  %55 = xor i32 %54, %35
  %56 = add nuw nsw i32 %53, %55
  %57 = icmp eq i32 %56, 2
  %58 = zext i1 %57 to i8
  store i64 %28, i64* %7, align 8
  store i64 %29, i64* %8, align 8
  store i8 %40, i8* %9, align 1
  store i8 %45, i8* %36, align 1
  store i8 %50, i8* %10, align 1
  store i8 %51, i8* %37, align 1
  store i8 %52, i8* %11, align 1
  store i8 %58, i8* %38, align 1
  store i64 %30, i64* %3, align 8
  br label %59

; <label>:59:                                     ; preds = %33, %2
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L12DoREPE_CMPSQEP6MemoryR5State(%struct.Memory*, %struct.State* nocapture dereferenceable(3376))  {
  %3 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 5, i32 0, i32 0
  %4 = load i64, i64* %3, align 8
  %5 = icmp eq i64 %4, 0
  br i1 %5, label %60, label %6

; <label>:6:                                      ; preds = %2
  %7 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 9, i32 0, i32 0
  %8 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 11, i32 0, i32 0
  %9 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  %10 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  %11 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  %12 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 11
  %13 = load i8, i8* %12, align 1
  %14 = icmp eq i8 %13, 0
  %15 = select i1 %14, i64 8, i64 -8
  %16 = load i64, i64* %7, align 8
  %17 = load i64, i64* %8, align 8
  br label %18

; <label>:18:                                     ; preds = %18, %6
  %19 = phi i64 [ %29, %18 ], [ %17, %6 ]
  %20 = phi i64 [ %28, %18 ], [ %16, %6 ]
  %21 = phi i64 [ %30, %18 ], [ %4, %6 ]
  %22 = inttoptr i64 %20 to i64*
  %23 = load i64, i64* %22
  %24 = inttoptr i64 %19 to i64*
  %25 = load i64, i64* %24
  %26 = sub i64 %23, %25
  %27 = icmp eq i64 %26, 0
  %28 = add i64 %15, %20
  %29 = add i64 %15, %19
  %30 = add i64 %21, -1
  %31 = icmp ne i64 %30, 0
  %32 = and i1 %31, %27
  br i1 %32, label %18, label %33

; <label>:33:                                     ; preds = %18
  %34 = lshr i64 %26, 63
  %35 = lshr i64 %23, 63
  %36 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  %37 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  %38 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  %39 = icmp ult i64 %23, %25
  %40 = zext i1 %39 to i8
  %41 = trunc i64 %26 to i32
  %42 = and i32 %41, 255
  %43 = tail call i32 @llvm.ctpop.i32(i32 %42) 
  %44 = trunc i32 %43 to i8
  %45 = and i8 %44, 1
  %46 = xor i8 %45, 1
  %47 = xor i64 %25, %23
  %48 = xor i64 %47, %26
  %49 = lshr i64 %48, 4
  %50 = trunc i64 %49 to i8
  %51 = and i8 %50, 1
  %52 = zext i1 %27 to i8
  %53 = trunc i64 %34 to i8
  %54 = xor i64 %34, %35
  %55 = lshr i64 %25, 63
  %56 = xor i64 %55, %35
  %57 = add nuw nsw i64 %54, %56
  %58 = icmp eq i64 %57, 2
  %59 = zext i1 %58 to i8
  store i64 %28, i64* %7, align 8
  store i64 %29, i64* %8, align 8
  store i8 %40, i8* %9, align 1
  store i8 %46, i8* %36, align 1
  store i8 %51, i8* %10, align 1
  store i8 %52, i8* %37, align 1
  store i8 %53, i8* %11, align 1
  store i8 %59, i8* %38, align 1
  store i64 %30, i64* %3, align 8
  br label %60

; <label>:60:                                     ; preds = %33, %2
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L12DoREPE_SCASBEP6MemoryR5State(%struct.Memory*, %struct.State* nocapture dereferenceable(3376))  {
  %3 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 5, i32 0, i32 0
  %4 = load i64, i64* %3, align 8
  %5 = icmp eq i64 %4, 0
  br i1 %5, label %54, label %6

; <label>:6:                                      ; preds = %2
  %7 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 11, i32 0, i32 0
  %8 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 1, i32 0
  %9 = bitcast %union.anon* %8 to i8*
  %10 = load i8, i8* %9, align 8
  %11 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  %12 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  %13 = lshr i8 %10, 7
  %14 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 11
  %15 = load i8, i8* %14, align 1
  %16 = icmp eq i8 %15, 0
  %17 = select i1 %16, i64 1, i64 -1
  %18 = load i64, i64* %7, align 8
  br label %19

; <label>:19:                                     ; preds = %19, %6
  %20 = phi i64 [ %26, %19 ], [ %18, %6 ]
  %21 = phi i64 [ %27, %19 ], [ %4, %6 ]
  %22 = inttoptr i64 %20 to i8*
  %23 = load i8, i8* %22
  %24 = sub i8 %10, %23
  %25 = icmp eq i8 %24, 0
  %26 = add i64 %17, %20
  %27 = add i64 %21, -1
  %28 = icmp ne i64 %27, 0
  %29 = and i1 %28, %25
  br i1 %29, label %19, label %30

; <label>:30:                                     ; preds = %19
  %31 = lshr i8 %24, 7
  %32 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  %33 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  %34 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  %35 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  %36 = icmp ult i8 %10, %23
  %37 = zext i1 %36 to i8
  %38 = zext i8 %24 to i32
  %39 = tail call i32 @llvm.ctpop.i32(i32 %38) 
  %40 = trunc i32 %39 to i8
  %41 = and i8 %40, 1
  %42 = xor i8 %41, 1
  %43 = xor i8 %23, %10
  %44 = xor i8 %43, %24
  %45 = lshr i8 %44, 4
  %46 = and i8 %45, 1
  %47 = zext i1 %25 to i8
  %48 = xor i8 %31, %13
  %49 = lshr i8 %23, 7
  %50 = xor i8 %49, %13
  %51 = add nuw nsw i8 %48, %50
  %52 = icmp eq i8 %51, 2
  %53 = zext i1 %52 to i8
  store i64 %26, i64* %7, align 8
  store i8 %37, i8* %32, align 1
  store i8 %42, i8* %11, align 1
  store i8 %46, i8* %33, align 1
  store i8 %47, i8* %12, align 1
  store i8 %31, i8* %34, align 1
  store i8 %53, i8* %35, align 1
  store i64 %27, i64* %3, align 8
  br label %54

; <label>:54:                                     ; preds = %30, %2
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L12DoREPE_SCASWEP6MemoryR5State(%struct.Memory*, %struct.State* nocapture dereferenceable(3376))  {
  %3 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 5, i32 0, i32 0
  %4 = load i64, i64* %3, align 8
  %5 = icmp eq i64 %4, 0
  br i1 %5, label %57, label %6

; <label>:6:                                      ; preds = %2
  %7 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 11, i32 0, i32 0
  %8 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 1, i32 0
  %9 = bitcast %union.anon* %8 to i16*
  %10 = load i16, i16* %9, align 8
  %11 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  %12 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  %13 = lshr i16 %10, 15
  %14 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 11
  %15 = load i8, i8* %14, align 1
  %16 = icmp eq i8 %15, 0
  %17 = select i1 %16, i64 2, i64 -2
  %18 = load i64, i64* %7, align 8
  br label %19

; <label>:19:                                     ; preds = %19, %6
  %20 = phi i64 [ %26, %19 ], [ %18, %6 ]
  %21 = phi i64 [ %27, %19 ], [ %4, %6 ]
  %22 = inttoptr i64 %20 to i16*
  %23 = load i16, i16* %22
  %24 = sub i16 %10, %23
  %25 = icmp eq i16 %24, 0
  %26 = add i64 %17, %20
  %27 = add i64 %21, -1
  %28 = icmp ne i64 %27, 0
  %29 = and i1 %28, %25
  br i1 %29, label %19, label %30

; <label>:30:                                     ; preds = %19
  %31 = lshr i16 %24, 15
  %32 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  %33 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  %34 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  %35 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  %36 = icmp ult i16 %10, %23
  %37 = zext i1 %36 to i8
  %38 = and i16 %24, 255
  %39 = zext i16 %38 to i32
  %40 = tail call i32 @llvm.ctpop.i32(i32 %39) 
  %41 = trunc i32 %40 to i8
  %42 = and i8 %41, 1
  %43 = xor i8 %42, 1
  %44 = xor i16 %23, %10
  %45 = xor i16 %44, %24
  %46 = lshr i16 %45, 4
  %47 = trunc i16 %46 to i8
  %48 = and i8 %47, 1
  %49 = zext i1 %25 to i8
  %50 = trunc i16 %31 to i8
  %51 = xor i16 %31, %13
  %52 = lshr i16 %23, 15
  %53 = xor i16 %52, %13
  %54 = add nuw nsw i16 %51, %53
  %55 = icmp eq i16 %54, 2
  %56 = zext i1 %55 to i8
  store i64 %26, i64* %7, align 8
  store i8 %37, i8* %32, align 1
  store i8 %43, i8* %11, align 1
  store i8 %48, i8* %33, align 1
  store i8 %49, i8* %12, align 1
  store i8 %50, i8* %34, align 1
  store i8 %56, i8* %35, align 1
  store i64 %27, i64* %3, align 8
  br label %57

; <label>:57:                                     ; preds = %30, %2
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L12DoREPE_SCASDEP6MemoryR5State(%struct.Memory*, %struct.State* nocapture dereferenceable(3376))  {
  %3 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 5, i32 0, i32 0
  %4 = load i64, i64* %3, align 8
  %5 = icmp eq i64 %4, 0
  br i1 %5, label %56, label %6

; <label>:6:                                      ; preds = %2
  %7 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 11, i32 0, i32 0
  %8 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 1, i32 0
  %9 = bitcast %union.anon* %8 to i32*
  %10 = load i32, i32* %9, align 8
  %11 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  %12 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  %13 = lshr i32 %10, 31
  %14 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 11
  %15 = load i8, i8* %14, align 1
  %16 = icmp eq i8 %15, 0
  %17 = select i1 %16, i64 4, i64 -4
  %18 = load i64, i64* %7, align 8
  br label %19

; <label>:19:                                     ; preds = %19, %6
  %20 = phi i64 [ %26, %19 ], [ %18, %6 ]
  %21 = phi i64 [ %27, %19 ], [ %4, %6 ]
  %22 = inttoptr i64 %20 to i32*
  %23 = load i32, i32* %22
  %24 = sub i32 %10, %23
  %25 = icmp eq i32 %24, 0
  %26 = add i64 %17, %20
  %27 = add i64 %21, -1
  %28 = icmp ne i64 %27, 0
  %29 = and i1 %28, %25
  br i1 %29, label %19, label %30

; <label>:30:                                     ; preds = %19
  %31 = lshr i32 %24, 31
  %32 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  %33 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  %34 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  %35 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  %36 = icmp ult i32 %10, %23
  %37 = zext i1 %36 to i8
  %38 = and i32 %24, 255
  %39 = tail call i32 @llvm.ctpop.i32(i32 %38) 
  %40 = trunc i32 %39 to i8
  %41 = and i8 %40, 1
  %42 = xor i8 %41, 1
  %43 = xor i32 %23, %10
  %44 = xor i32 %43, %24
  %45 = lshr i32 %44, 4
  %46 = trunc i32 %45 to i8
  %47 = and i8 %46, 1
  %48 = zext i1 %25 to i8
  %49 = trunc i32 %31 to i8
  %50 = xor i32 %31, %13
  %51 = lshr i32 %23, 31
  %52 = xor i32 %51, %13
  %53 = add nuw nsw i32 %50, %52
  %54 = icmp eq i32 %53, 2
  %55 = zext i1 %54 to i8
  store i64 %26, i64* %7, align 8
  store i8 %37, i8* %32, align 1
  store i8 %42, i8* %11, align 1
  store i8 %47, i8* %33, align 1
  store i8 %48, i8* %12, align 1
  store i8 %49, i8* %34, align 1
  store i8 %55, i8* %35, align 1
  store i64 %27, i64* %3, align 8
  br label %56

; <label>:56:                                     ; preds = %30, %2
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L12DoREPE_SCASQEP6MemoryR5State(%struct.Memory*, %struct.State* nocapture dereferenceable(3376))  {
  %3 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 5, i32 0, i32 0
  %4 = load i64, i64* %3, align 8
  %5 = icmp eq i64 %4, 0
  br i1 %5, label %56, label %6

; <label>:6:                                      ; preds = %2
  %7 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 11, i32 0, i32 0
  %8 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 1, i32 0, i32 0
  %9 = load i64, i64* %8, align 8
  %10 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  %11 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  %12 = lshr i64 %9, 63
  %13 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 11
  %14 = load i8, i8* %13, align 1
  %15 = icmp eq i8 %14, 0
  %16 = select i1 %15, i64 8, i64 -8
  %17 = load i64, i64* %7, align 8
  br label %18

; <label>:18:                                     ; preds = %18, %6
  %19 = phi i64 [ %25, %18 ], [ %17, %6 ]
  %20 = phi i64 [ %26, %18 ], [ %4, %6 ]
  %21 = inttoptr i64 %19 to i64*
  %22 = load i64, i64* %21
  %23 = sub i64 %9, %22
  %24 = icmp eq i64 %23, 0
  %25 = add i64 %16, %19
  %26 = add i64 %20, -1
  %27 = icmp ne i64 %26, 0
  %28 = and i1 %27, %24
  br i1 %28, label %18, label %29

; <label>:29:                                     ; preds = %18
  %30 = lshr i64 %23, 63
  %31 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  %32 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  %33 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  %34 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  %35 = icmp ult i64 %9, %22
  %36 = zext i1 %35 to i8
  %37 = trunc i64 %23 to i32
  %38 = and i32 %37, 255
  %39 = tail call i32 @llvm.ctpop.i32(i32 %38) 
  %40 = trunc i32 %39 to i8
  %41 = and i8 %40, 1
  %42 = xor i8 %41, 1
  %43 = xor i64 %22, %9
  %44 = xor i64 %43, %23
  %45 = lshr i64 %44, 4
  %46 = trunc i64 %45 to i8
  %47 = and i8 %46, 1
  %48 = zext i1 %24 to i8
  %49 = trunc i64 %30 to i8
  %50 = xor i64 %30, %12
  %51 = lshr i64 %22, 63
  %52 = xor i64 %51, %12
  %53 = add nuw nsw i64 %50, %52
  %54 = icmp eq i64 %53, 2
  %55 = zext i1 %54 to i8
  store i64 %25, i64* %7, align 8
  store i8 %36, i8* %31, align 1
  store i8 %42, i8* %10, align 1
  store i8 %47, i8* %32, align 1
  store i8 %48, i8* %11, align 1
  store i8 %49, i8* %33, align 1
  store i8 %55, i8* %34, align 1
  store i64 %26, i64* %3, align 8
  br label %56

; <label>:56:                                     ; preds = %29, %2
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L13DoREPNE_CMPSBEP6MemoryR5State(%struct.Memory*, %struct.State* nocapture dereferenceable(3376))  {
  %3 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 5, i32 0, i32 0
  %4 = load i64, i64* %3, align 8
  %5 = icmp eq i64 %4, 0
  br i1 %5, label %58, label %6

; <label>:6:                                      ; preds = %2
  %7 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 9, i32 0, i32 0
  %8 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 11, i32 0, i32 0
  %9 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  %10 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  %11 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  %12 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 11
  %13 = load i8, i8* %12, align 1
  %14 = icmp eq i8 %13, 0
  %15 = select i1 %14, i64 1, i64 -1
  %16 = load i64, i64* %7, align 8
  %17 = load i64, i64* %8, align 8
  br label %18

; <label>:18:                                     ; preds = %18, %6
  %19 = phi i64 [ %29, %18 ], [ %17, %6 ]
  %20 = phi i64 [ %28, %18 ], [ %16, %6 ]
  %21 = phi i64 [ %30, %18 ], [ %4, %6 ]
  %22 = inttoptr i64 %20 to i8*
  %23 = load i8, i8* %22
  %24 = inttoptr i64 %19 to i8*
  %25 = load i8, i8* %24
  %26 = sub i8 %23, %25
  %27 = icmp eq i8 %26, 0
  %28 = add i64 %15, %20
  %29 = add i64 %15, %19
  %30 = add i64 %21, -1
  %31 = icmp ne i64 %30, 0
  %32 = xor i1 %27, true
  %33 = and i1 %31, %32
  br i1 %33, label %18, label %34

; <label>:34:                                     ; preds = %18
  %35 = lshr i8 %26, 7
  %36 = lshr i8 %23, 7
  %37 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  %38 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  %39 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  %40 = icmp ult i8 %23, %25
  %41 = zext i1 %40 to i8
  %42 = zext i8 %26 to i32
  %43 = tail call i32 @llvm.ctpop.i32(i32 %42) 
  %44 = trunc i32 %43 to i8
  %45 = and i8 %44, 1
  %46 = xor i8 %45, 1
  %47 = xor i8 %25, %23
  %48 = xor i8 %47, %26
  %49 = lshr i8 %48, 4
  %50 = and i8 %49, 1
  %51 = zext i1 %27 to i8
  %52 = xor i8 %35, %36
  %53 = lshr i8 %25, 7
  %54 = xor i8 %53, %36
  %55 = add nuw nsw i8 %52, %54
  %56 = icmp eq i8 %55, 2
  %57 = zext i1 %56 to i8
  store i64 %28, i64* %7, align 8
  store i64 %29, i64* %8, align 8
  store i8 %41, i8* %9, align 1
  store i8 %46, i8* %37, align 1
  store i8 %50, i8* %10, align 1
  store i8 %51, i8* %38, align 1
  store i8 %35, i8* %11, align 1
  store i8 %57, i8* %39, align 1
  store i64 %30, i64* %3, align 8
  br label %58

; <label>:58:                                     ; preds = %34, %2
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L13DoREPNE_CMPSWEP6MemoryR5State(%struct.Memory*, %struct.State* nocapture dereferenceable(3376))  {
  %3 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 5, i32 0, i32 0
  %4 = load i64, i64* %3, align 8
  %5 = icmp eq i64 %4, 0
  br i1 %5, label %61, label %6

; <label>:6:                                      ; preds = %2
  %7 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 9, i32 0, i32 0
  %8 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 11, i32 0, i32 0
  %9 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  %10 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  %11 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  %12 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 11
  %13 = load i8, i8* %12, align 1
  %14 = icmp eq i8 %13, 0
  %15 = select i1 %14, i64 2, i64 -2
  %16 = load i64, i64* %7, align 8
  %17 = load i64, i64* %8, align 8
  br label %18

; <label>:18:                                     ; preds = %18, %6
  %19 = phi i64 [ %29, %18 ], [ %17, %6 ]
  %20 = phi i64 [ %28, %18 ], [ %16, %6 ]
  %21 = phi i64 [ %30, %18 ], [ %4, %6 ]
  %22 = inttoptr i64 %20 to i16*
  %23 = load i16, i16* %22
  %24 = inttoptr i64 %19 to i16*
  %25 = load i16, i16* %24
  %26 = sub i16 %23, %25
  %27 = icmp eq i16 %26, 0
  %28 = add i64 %15, %20
  %29 = add i64 %15, %19
  %30 = add i64 %21, -1
  %31 = icmp ne i64 %30, 0
  %32 = xor i1 %27, true
  %33 = and i1 %31, %32
  br i1 %33, label %18, label %34

; <label>:34:                                     ; preds = %18
  %35 = lshr i16 %26, 15
  %36 = lshr i16 %23, 15
  %37 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  %38 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  %39 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  %40 = icmp ult i16 %23, %25
  %41 = zext i1 %40 to i8
  %42 = and i16 %26, 255
  %43 = zext i16 %42 to i32
  %44 = tail call i32 @llvm.ctpop.i32(i32 %43) 
  %45 = trunc i32 %44 to i8
  %46 = and i8 %45, 1
  %47 = xor i8 %46, 1
  %48 = xor i16 %25, %23
  %49 = xor i16 %48, %26
  %50 = lshr i16 %49, 4
  %51 = trunc i16 %50 to i8
  %52 = and i8 %51, 1
  %53 = zext i1 %27 to i8
  %54 = trunc i16 %35 to i8
  %55 = xor i16 %35, %36
  %56 = lshr i16 %25, 15
  %57 = xor i16 %56, %36
  %58 = add nuw nsw i16 %55, %57
  %59 = icmp eq i16 %58, 2
  %60 = zext i1 %59 to i8
  store i64 %28, i64* %7, align 8
  store i64 %29, i64* %8, align 8
  store i8 %41, i8* %9, align 1
  store i8 %47, i8* %37, align 1
  store i8 %52, i8* %10, align 1
  store i8 %53, i8* %38, align 1
  store i8 %54, i8* %11, align 1
  store i8 %60, i8* %39, align 1
  store i64 %30, i64* %3, align 8
  br label %61

; <label>:61:                                     ; preds = %34, %2
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L13DoREPNE_CMPSDEP6MemoryR5State(%struct.Memory*, %struct.State* nocapture dereferenceable(3376))  {
  %3 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 5, i32 0, i32 0
  %4 = load i64, i64* %3, align 8
  %5 = icmp eq i64 %4, 0
  br i1 %5, label %60, label %6

; <label>:6:                                      ; preds = %2
  %7 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 9, i32 0, i32 0
  %8 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 11, i32 0, i32 0
  %9 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  %10 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  %11 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  %12 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 11
  %13 = load i8, i8* %12, align 1
  %14 = icmp eq i8 %13, 0
  %15 = select i1 %14, i64 4, i64 -4
  %16 = load i64, i64* %7, align 8
  %17 = load i64, i64* %8, align 8
  br label %18

; <label>:18:                                     ; preds = %18, %6
  %19 = phi i64 [ %29, %18 ], [ %17, %6 ]
  %20 = phi i64 [ %28, %18 ], [ %16, %6 ]
  %21 = phi i64 [ %30, %18 ], [ %4, %6 ]
  %22 = inttoptr i64 %20 to i32*
  %23 = load i32, i32* %22
  %24 = inttoptr i64 %19 to i32*
  %25 = load i32, i32* %24
  %26 = sub i32 %23, %25
  %27 = icmp eq i32 %26, 0
  %28 = add i64 %15, %20
  %29 = add i64 %15, %19
  %30 = add i64 %21, -1
  %31 = icmp ne i64 %30, 0
  %32 = xor i1 %27, true
  %33 = and i1 %31, %32
  br i1 %33, label %18, label %34

; <label>:34:                                     ; preds = %18
  %35 = lshr i32 %26, 31
  %36 = lshr i32 %23, 31
  %37 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  %38 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  %39 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  %40 = icmp ult i32 %23, %25
  %41 = zext i1 %40 to i8
  %42 = and i32 %26, 255
  %43 = tail call i32 @llvm.ctpop.i32(i32 %42) 
  %44 = trunc i32 %43 to i8
  %45 = and i8 %44, 1
  %46 = xor i8 %45, 1
  %47 = xor i32 %25, %23
  %48 = xor i32 %47, %26
  %49 = lshr i32 %48, 4
  %50 = trunc i32 %49 to i8
  %51 = and i8 %50, 1
  %52 = zext i1 %27 to i8
  %53 = trunc i32 %35 to i8
  %54 = xor i32 %35, %36
  %55 = lshr i32 %25, 31
  %56 = xor i32 %55, %36
  %57 = add nuw nsw i32 %54, %56
  %58 = icmp eq i32 %57, 2
  %59 = zext i1 %58 to i8
  store i64 %28, i64* %7, align 8
  store i64 %29, i64* %8, align 8
  store i8 %41, i8* %9, align 1
  store i8 %46, i8* %37, align 1
  store i8 %51, i8* %10, align 1
  store i8 %52, i8* %38, align 1
  store i8 %53, i8* %11, align 1
  store i8 %59, i8* %39, align 1
  store i64 %30, i64* %3, align 8
  br label %60

; <label>:60:                                     ; preds = %34, %2
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L13DoREPNE_CMPSQEP6MemoryR5State(%struct.Memory*, %struct.State* nocapture dereferenceable(3376))  {
  %3 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 5, i32 0, i32 0
  %4 = load i64, i64* %3, align 8
  %5 = icmp eq i64 %4, 0
  br i1 %5, label %61, label %6

; <label>:6:                                      ; preds = %2
  %7 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 9, i32 0, i32 0
  %8 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 11, i32 0, i32 0
  %9 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  %10 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  %11 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  %12 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 11
  %13 = load i8, i8* %12, align 1
  %14 = icmp eq i8 %13, 0
  %15 = select i1 %14, i64 8, i64 -8
  %16 = load i64, i64* %7, align 8
  %17 = load i64, i64* %8, align 8
  br label %18

; <label>:18:                                     ; preds = %18, %6
  %19 = phi i64 [ %29, %18 ], [ %17, %6 ]
  %20 = phi i64 [ %28, %18 ], [ %16, %6 ]
  %21 = phi i64 [ %30, %18 ], [ %4, %6 ]
  %22 = inttoptr i64 %20 to i64*
  %23 = load i64, i64* %22
  %24 = inttoptr i64 %19 to i64*
  %25 = load i64, i64* %24
  %26 = sub i64 %23, %25
  %27 = icmp eq i64 %26, 0
  %28 = add i64 %15, %20
  %29 = add i64 %15, %19
  %30 = add i64 %21, -1
  %31 = icmp ne i64 %30, 0
  %32 = xor i1 %27, true
  %33 = and i1 %31, %32
  br i1 %33, label %18, label %34

; <label>:34:                                     ; preds = %18
  %35 = lshr i64 %26, 63
  %36 = lshr i64 %23, 63
  %37 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  %38 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  %39 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  %40 = icmp ult i64 %23, %25
  %41 = zext i1 %40 to i8
  %42 = trunc i64 %26 to i32
  %43 = and i32 %42, 255
  %44 = tail call i32 @llvm.ctpop.i32(i32 %43) 
  %45 = trunc i32 %44 to i8
  %46 = and i8 %45, 1
  %47 = xor i8 %46, 1
  %48 = xor i64 %25, %23
  %49 = xor i64 %48, %26
  %50 = lshr i64 %49, 4
  %51 = trunc i64 %50 to i8
  %52 = and i8 %51, 1
  %53 = zext i1 %27 to i8
  %54 = trunc i64 %35 to i8
  %55 = xor i64 %35, %36
  %56 = lshr i64 %25, 63
  %57 = xor i64 %56, %36
  %58 = add nuw nsw i64 %55, %57
  %59 = icmp eq i64 %58, 2
  %60 = zext i1 %59 to i8
  store i64 %28, i64* %7, align 8
  store i64 %29, i64* %8, align 8
  store i8 %41, i8* %9, align 1
  store i8 %47, i8* %37, align 1
  store i8 %52, i8* %10, align 1
  store i8 %53, i8* %38, align 1
  store i8 %54, i8* %11, align 1
  store i8 %60, i8* %39, align 1
  store i64 %30, i64* %3, align 8
  br label %61

; <label>:61:                                     ; preds = %34, %2
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L13DoREPNE_SCASBEP6MemoryR5State(%struct.Memory*, %struct.State* nocapture dereferenceable(3376))  {
  %3 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 5, i32 0, i32 0
  %4 = load i64, i64* %3, align 8
  %5 = icmp eq i64 %4, 0
  br i1 %5, label %55, label %6

; <label>:6:                                      ; preds = %2
  %7 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 11, i32 0, i32 0
  %8 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 1, i32 0
  %9 = bitcast %union.anon* %8 to i8*
  %10 = load i8, i8* %9, align 8
  %11 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  %12 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  %13 = lshr i8 %10, 7
  %14 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 11
  %15 = load i8, i8* %14, align 1
  %16 = icmp eq i8 %15, 0
  %17 = select i1 %16, i64 1, i64 -1
  %18 = load i64, i64* %7, align 8
  br label %19

; <label>:19:                                     ; preds = %19, %6
  %20 = phi i64 [ %26, %19 ], [ %18, %6 ]
  %21 = phi i64 [ %27, %19 ], [ %4, %6 ]
  %22 = inttoptr i64 %20 to i8*
  %23 = load i8, i8* %22
  %24 = sub i8 %10, %23
  %25 = icmp eq i8 %24, 0
  %26 = add i64 %17, %20
  %27 = add i64 %21, -1
  %28 = icmp ne i64 %27, 0
  %29 = xor i1 %25, true
  %30 = and i1 %28, %29
  br i1 %30, label %19, label %31

; <label>:31:                                     ; preds = %19
  %32 = lshr i8 %24, 7
  %33 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  %34 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  %35 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  %36 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  %37 = icmp ult i8 %10, %23
  %38 = zext i1 %37 to i8
  %39 = zext i8 %24 to i32
  %40 = tail call i32 @llvm.ctpop.i32(i32 %39) 
  %41 = trunc i32 %40 to i8
  %42 = and i8 %41, 1
  %43 = xor i8 %42, 1
  %44 = xor i8 %23, %10
  %45 = xor i8 %44, %24
  %46 = lshr i8 %45, 4
  %47 = and i8 %46, 1
  %48 = zext i1 %25 to i8
  %49 = xor i8 %32, %13
  %50 = lshr i8 %23, 7
  %51 = xor i8 %50, %13
  %52 = add nuw nsw i8 %49, %51
  %53 = icmp eq i8 %52, 2
  %54 = zext i1 %53 to i8
  store i64 %26, i64* %7, align 8
  store i8 %38, i8* %33, align 1
  store i8 %43, i8* %11, align 1
  store i8 %47, i8* %34, align 1
  store i8 %48, i8* %12, align 1
  store i8 %32, i8* %35, align 1
  store i8 %54, i8* %36, align 1
  store i64 %27, i64* %3, align 8
  br label %55

; <label>:55:                                     ; preds = %31, %2
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L13DoREPNE_SCASWEP6MemoryR5State(%struct.Memory*, %struct.State* nocapture dereferenceable(3376))  {
  %3 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 5, i32 0, i32 0
  %4 = load i64, i64* %3, align 8
  %5 = icmp eq i64 %4, 0
  br i1 %5, label %58, label %6

; <label>:6:                                      ; preds = %2
  %7 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 11, i32 0, i32 0
  %8 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 1, i32 0
  %9 = bitcast %union.anon* %8 to i16*
  %10 = load i16, i16* %9, align 8
  %11 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  %12 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  %13 = lshr i16 %10, 15
  %14 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 11
  %15 = load i8, i8* %14, align 1
  %16 = icmp eq i8 %15, 0
  %17 = select i1 %16, i64 2, i64 -2
  %18 = load i64, i64* %7, align 8
  br label %19

; <label>:19:                                     ; preds = %19, %6
  %20 = phi i64 [ %26, %19 ], [ %18, %6 ]
  %21 = phi i64 [ %27, %19 ], [ %4, %6 ]
  %22 = inttoptr i64 %20 to i16*
  %23 = load i16, i16* %22
  %24 = sub i16 %10, %23
  %25 = icmp eq i16 %24, 0
  %26 = add i64 %17, %20
  %27 = add i64 %21, -1
  %28 = icmp ne i64 %27, 0
  %29 = xor i1 %25, true
  %30 = and i1 %28, %29
  br i1 %30, label %19, label %31

; <label>:31:                                     ; preds = %19
  %32 = lshr i16 %24, 15
  %33 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  %34 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  %35 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  %36 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  %37 = icmp ult i16 %10, %23
  %38 = zext i1 %37 to i8
  %39 = and i16 %24, 255
  %40 = zext i16 %39 to i32
  %41 = tail call i32 @llvm.ctpop.i32(i32 %40) 
  %42 = trunc i32 %41 to i8
  %43 = and i8 %42, 1
  %44 = xor i8 %43, 1
  %45 = xor i16 %23, %10
  %46 = xor i16 %45, %24
  %47 = lshr i16 %46, 4
  %48 = trunc i16 %47 to i8
  %49 = and i8 %48, 1
  %50 = zext i1 %25 to i8
  %51 = trunc i16 %32 to i8
  %52 = xor i16 %32, %13
  %53 = lshr i16 %23, 15
  %54 = xor i16 %53, %13
  %55 = add nuw nsw i16 %52, %54
  %56 = icmp eq i16 %55, 2
  %57 = zext i1 %56 to i8
  store i64 %26, i64* %7, align 8
  store i8 %38, i8* %33, align 1
  store i8 %44, i8* %11, align 1
  store i8 %49, i8* %34, align 1
  store i8 %50, i8* %12, align 1
  store i8 %51, i8* %35, align 1
  store i8 %57, i8* %36, align 1
  store i64 %27, i64* %3, align 8
  br label %58

; <label>:58:                                     ; preds = %31, %2
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L13DoREPNE_SCASDEP6MemoryR5State(%struct.Memory*, %struct.State* nocapture dereferenceable(3376))  {
  %3 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 5, i32 0, i32 0
  %4 = load i64, i64* %3, align 8
  %5 = icmp eq i64 %4, 0
  br i1 %5, label %57, label %6

; <label>:6:                                      ; preds = %2
  %7 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 11, i32 0, i32 0
  %8 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 1, i32 0
  %9 = bitcast %union.anon* %8 to i32*
  %10 = load i32, i32* %9, align 8
  %11 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  %12 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  %13 = lshr i32 %10, 31
  %14 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 11
  %15 = load i8, i8* %14, align 1
  %16 = icmp eq i8 %15, 0
  %17 = select i1 %16, i64 4, i64 -4
  %18 = load i64, i64* %7, align 8
  br label %19

; <label>:19:                                     ; preds = %19, %6
  %20 = phi i64 [ %26, %19 ], [ %18, %6 ]
  %21 = phi i64 [ %27, %19 ], [ %4, %6 ]
  %22 = inttoptr i64 %20 to i32*
  %23 = load i32, i32* %22
  %24 = sub i32 %10, %23
  %25 = icmp eq i32 %24, 0
  %26 = add i64 %17, %20
  %27 = add i64 %21, -1
  %28 = icmp ne i64 %27, 0
  %29 = xor i1 %25, true
  %30 = and i1 %28, %29
  br i1 %30, label %19, label %31

; <label>:31:                                     ; preds = %19
  %32 = lshr i32 %24, 31
  %33 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  %34 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  %35 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  %36 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  %37 = icmp ult i32 %10, %23
  %38 = zext i1 %37 to i8
  %39 = and i32 %24, 255
  %40 = tail call i32 @llvm.ctpop.i32(i32 %39) 
  %41 = trunc i32 %40 to i8
  %42 = and i8 %41, 1
  %43 = xor i8 %42, 1
  %44 = xor i32 %23, %10
  %45 = xor i32 %44, %24
  %46 = lshr i32 %45, 4
  %47 = trunc i32 %46 to i8
  %48 = and i8 %47, 1
  %49 = zext i1 %25 to i8
  %50 = trunc i32 %32 to i8
  %51 = xor i32 %32, %13
  %52 = lshr i32 %23, 31
  %53 = xor i32 %52, %13
  %54 = add nuw nsw i32 %51, %53
  %55 = icmp eq i32 %54, 2
  %56 = zext i1 %55 to i8
  store i64 %26, i64* %7, align 8
  store i8 %38, i8* %33, align 1
  store i8 %43, i8* %11, align 1
  store i8 %48, i8* %34, align 1
  store i8 %49, i8* %12, align 1
  store i8 %50, i8* %35, align 1
  store i8 %56, i8* %36, align 1
  store i64 %27, i64* %3, align 8
  br label %57

; <label>:57:                                     ; preds = %31, %2
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L13DoREPNE_SCASQEP6MemoryR5State(%struct.Memory*, %struct.State* nocapture dereferenceable(3376))  {
  %3 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 5, i32 0, i32 0
  %4 = load i64, i64* %3, align 8
  %5 = icmp eq i64 %4, 0
  br i1 %5, label %57, label %6

; <label>:6:                                      ; preds = %2
  %7 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 11, i32 0, i32 0
  %8 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 1, i32 0, i32 0
  %9 = load i64, i64* %8, align 8
  %10 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  %11 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  %12 = lshr i64 %9, 63
  %13 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 11
  %14 = load i8, i8* %13, align 1
  %15 = icmp eq i8 %14, 0
  %16 = select i1 %15, i64 8, i64 -8
  %17 = load i64, i64* %7, align 8
  br label %18

; <label>:18:                                     ; preds = %18, %6
  %19 = phi i64 [ %25, %18 ], [ %17, %6 ]
  %20 = phi i64 [ %26, %18 ], [ %4, %6 ]
  %21 = inttoptr i64 %19 to i64*
  %22 = load i64, i64* %21
  %23 = sub i64 %9, %22
  %24 = icmp eq i64 %23, 0
  %25 = add i64 %16, %19
  %26 = add i64 %20, -1
  %27 = icmp ne i64 %26, 0
  %28 = xor i1 %24, true
  %29 = and i1 %27, %28
  br i1 %29, label %18, label %30

; <label>:30:                                     ; preds = %18
  %31 = lshr i64 %23, 63
  %32 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  %33 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  %34 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  %35 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  %36 = icmp ult i64 %9, %22
  %37 = zext i1 %36 to i8
  %38 = trunc i64 %23 to i32
  %39 = and i32 %38, 255
  %40 = tail call i32 @llvm.ctpop.i32(i32 %39) 
  %41 = trunc i32 %40 to i8
  %42 = and i8 %41, 1
  %43 = xor i8 %42, 1
  %44 = xor i64 %22, %9
  %45 = xor i64 %44, %23
  %46 = lshr i64 %45, 4
  %47 = trunc i64 %46 to i8
  %48 = and i8 %47, 1
  %49 = zext i1 %24 to i8
  %50 = trunc i64 %31 to i8
  %51 = xor i64 %31, %12
  %52 = lshr i64 %22, 63
  %53 = xor i64 %52, %12
  %54 = add nuw nsw i64 %51, %53
  %55 = icmp eq i64 %54, 2
  %56 = zext i1 %55 to i8
  store i64 %25, i64* %7, align 8
  store i8 %37, i8* %32, align 1
  store i8 %43, i8* %10, align 1
  store i8 %48, i8* %33, align 1
  store i8 %49, i8* %11, align 1
  store i8 %50, i8* %34, align 1
  store i8 %56, i8* %35, align 1
  store i64 %26, i64* %3, align 8
  br label %57

; <label>:57:                                     ; preds = %30, %2
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline norecurse nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L9DoSYSCALLEP6MemoryR5State(%struct.Memory* readnone returned, %struct.State* nocapture dereferenceable(3376))  {
  %3 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 0, i32 0
  store i32 7, i32* %3, align 16
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline norecurse nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L13DoSYSCALL_AMDEP6MemoryR5State(%struct.Memory* readnone returned, %struct.State* nocapture dereferenceable(3376))  {
  %3 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 0, i32 0
  store i32 7, i32* %3, align 16
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline norecurse nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L10DoSYSENTEREP6MemoryR5State(%struct.Memory* readnone returned, %struct.State* nocapture dereferenceable(3376))  {
  %3 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 0, i32 0
  store i32 9, i32* %3, align 16
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline norecurse nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L9DoSYSEXITEP6MemoryR5State(%struct.Memory* readnone returned, %struct.State* nocapture dereferenceable(3376))  {
  %3 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 0, i32 0
  store i32 10, i32* %3, align 16
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L7DoRDTSCEP6MemoryR5State(%struct.Memory*, %struct.State* dereferenceable(3376))  {
  %3 = tail call %struct.Memory* @__remill_sync_hyper_call(%struct.State* nonnull dereferenceable(3376) %1, %struct.Memory* %0, i32 259) 
  ret %struct.Memory* %3
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L8DoRDTSCPEP6MemoryR5State(%struct.Memory*, %struct.State* dereferenceable(3376))  {
  %3 = tail call %struct.Memory* @__remill_sync_hyper_call(%struct.State* nonnull dereferenceable(3376) %1, %struct.Memory* %0, i32 260) 
  ret %struct.Memory* %3
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L7DoRDMSREP6MemoryR5State(%struct.Memory*, %struct.State* dereferenceable(3376))  {
  %3 = tail call %struct.Memory* @__remill_sync_hyper_call(%struct.State* nonnull dereferenceable(3376) %1, %struct.Memory* %0, i32 1) 
  %4 = tail call %struct.Memory* @__remill_sync_hyper_call(%struct.State* nonnull dereferenceable(3376) %1, %struct.Memory* %3, i32 263) 
  ret %struct.Memory* %4
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L7DoWRMSREP6MemoryR5State(%struct.Memory*, %struct.State* dereferenceable(3376))  {
  %3 = tail call %struct.Memory* @__remill_sync_hyper_call(%struct.State* nonnull dereferenceable(3376) %1, %struct.Memory* %0, i32 1) 
  %4 = tail call %struct.Memory* @__remill_sync_hyper_call(%struct.State* nonnull dereferenceable(3376) %1, %struct.Memory* %3, i32 264) 
  ret %struct.Memory* %4
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L8DoWBINVDEP6MemoryR5State(%struct.Memory*, %struct.State* dereferenceable(3376))  {
  %3 = tail call %struct.Memory* @__remill_sync_hyper_call(%struct.State* nonnull dereferenceable(3376) %1, %struct.Memory* %0, i32 1) 
  %4 = tail call %struct.Memory* @__remill_sync_hyper_call(%struct.State* nonnull dereferenceable(3376) %1, %struct.Memory* %3, i32 265) 
  ret %struct.Memory* %4
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L4LGDTEP6MemoryR5State2MnIjE(%struct.Memory*, %struct.State* dereferenceable(3376), i64)  {
  %4 = tail call %struct.Memory* @__remill_sync_hyper_call(%struct.State* nonnull dereferenceable(3376) %1, %struct.Memory* %0, i32 1) 
  %5 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 0, i32 2, i32 0
  store i64 %2, i64* %5, align 8
  %6 = tail call %struct.Memory* @__remill_sync_hyper_call(%struct.State* nonnull dereferenceable(3376) %1, %struct.Memory* %4, i32 261) 
  ret %struct.Memory* %6
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L4LIDTEP6MemoryR5State2MnIjE(%struct.Memory*, %struct.State* dereferenceable(3376), i64)  {
  %4 = tail call %struct.Memory* @__remill_sync_hyper_call(%struct.State* nonnull dereferenceable(3376) %1, %struct.Memory* %0, i32 1) 
  %5 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 0, i32 2, i32 0
  store i64 %2, i64* %5, align 8
  %6 = tail call %struct.Memory* @__remill_sync_hyper_call(%struct.State* nonnull dereferenceable(3376) %1, %struct.Memory* %4, i32 262) 
  ret %struct.Memory* %6
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L20WRITE_CONTROL_REG_32ILN13SyncHyperCall4NameE273EEEP6MemoryS4_R5State3RnWImE2RnIjE(%struct.Memory*, %struct.State* dereferenceable(3376), i64* nocapture, i64)  {
  %5 = tail call %struct.Memory* @__remill_sync_hyper_call(%struct.State* nonnull dereferenceable(3376) %1, %struct.Memory* %0, i32 1) 
  %6 = and i64 %3, 4294967295
  store i64 %6, i64* %2, align 8
  %7 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 0, i8* %7, align 1
  %8 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 0, i8* %8, align 1
  %9 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  store i8 0, i8* %9, align 1
  %10 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 0, i8* %10, align 1
  %11 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 0, i8* %11, align 1
  %12 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  store i8 0, i8* %12, align 1
  %13 = tail call %struct.Memory* @__remill_sync_hyper_call(%struct.State* nonnull dereferenceable(3376) %1, %struct.Memory* %5, i32 273) 
  ret %struct.Memory* %13
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L20WRITE_CONTROL_REG_32ILN13SyncHyperCall4NameE274EEEP6MemoryS4_R5State3RnWImE2RnIjE(%struct.Memory*, %struct.State* dereferenceable(3376), i64* nocapture, i64)  {
  %5 = tail call %struct.Memory* @__remill_sync_hyper_call(%struct.State* nonnull dereferenceable(3376) %1, %struct.Memory* %0, i32 1) 
  %6 = and i64 %3, 4294967295
  store i64 %6, i64* %2, align 8
  %7 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 0, i8* %7, align 1
  %8 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 0, i8* %8, align 1
  %9 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  store i8 0, i8* %9, align 1
  %10 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 0, i8* %10, align 1
  %11 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 0, i8* %11, align 1
  %12 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  store i8 0, i8* %12, align 1
  %13 = tail call %struct.Memory* @__remill_sync_hyper_call(%struct.State* nonnull dereferenceable(3376) %1, %struct.Memory* %5, i32 274) 
  ret %struct.Memory* %13
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L20WRITE_CONTROL_REG_32ILN13SyncHyperCall4NameE275EEEP6MemoryS4_R5State3RnWImE2RnIjE(%struct.Memory*, %struct.State* dereferenceable(3376), i64* nocapture, i64)  {
  %5 = tail call %struct.Memory* @__remill_sync_hyper_call(%struct.State* nonnull dereferenceable(3376) %1, %struct.Memory* %0, i32 1) 
  %6 = and i64 %3, 4294967295
  store i64 %6, i64* %2, align 8
  %7 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 0, i8* %7, align 1
  %8 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 0, i8* %8, align 1
  %9 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  store i8 0, i8* %9, align 1
  %10 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 0, i8* %10, align 1
  %11 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 0, i8* %11, align 1
  %12 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  store i8 0, i8* %12, align 1
  %13 = tail call %struct.Memory* @__remill_sync_hyper_call(%struct.State* nonnull dereferenceable(3376) %1, %struct.Memory* %5, i32 275) 
  ret %struct.Memory* %13
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L20WRITE_CONTROL_REG_32ILN13SyncHyperCall4NameE276EEEP6MemoryS4_R5State3RnWImE2RnIjE(%struct.Memory*, %struct.State* dereferenceable(3376), i64* nocapture, i64)  {
  %5 = tail call %struct.Memory* @__remill_sync_hyper_call(%struct.State* nonnull dereferenceable(3376) %1, %struct.Memory* %0, i32 1) 
  %6 = and i64 %3, 4294967295
  store i64 %6, i64* %2, align 8
  %7 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 0, i8* %7, align 1
  %8 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 0, i8* %8, align 1
  %9 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  store i8 0, i8* %9, align 1
  %10 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 0, i8* %10, align 1
  %11 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 0, i8* %11, align 1
  %12 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  store i8 0, i8* %12, align 1
  %13 = tail call %struct.Memory* @__remill_sync_hyper_call(%struct.State* nonnull dereferenceable(3376) %1, %struct.Memory* %5, i32 276) 
  ret %struct.Memory* %13
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L20WRITE_CONTROL_REG_32ILN13SyncHyperCall4NameE277EEEP6MemoryS4_R5State3RnWImE2RnIjE(%struct.Memory*, %struct.State* dereferenceable(3376), i64* nocapture, i64)  {
  %5 = tail call %struct.Memory* @__remill_sync_hyper_call(%struct.State* nonnull dereferenceable(3376) %1, %struct.Memory* %0, i32 1) 
  %6 = and i64 %3, 4294967295
  store i64 %6, i64* %2, align 8
  %7 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 0, i8* %7, align 1
  %8 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 0, i8* %8, align 1
  %9 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  store i8 0, i8* %9, align 1
  %10 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 0, i8* %10, align 1
  %11 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 0, i8* %11, align 1
  %12 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  store i8 0, i8* %12, align 1
  %13 = tail call %struct.Memory* @__remill_sync_hyper_call(%struct.State* nonnull dereferenceable(3376) %1, %struct.Memory* %5, i32 277) 
  ret %struct.Memory* %13
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L19READ_CONTROL_REG_32EP6MemoryR5State3RnWImE2RnImE(%struct.Memory*, %struct.State* dereferenceable(3376), i64* nocapture, i64)  {
  %5 = tail call %struct.Memory* @__remill_sync_hyper_call(%struct.State* nonnull dereferenceable(3376) %1, %struct.Memory* %0, i32 1) 
  %6 = and i64 %3, 4294967295
  store i64 %6, i64* %2, align 8
  %7 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 0, i8* %7, align 1
  %8 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 0, i8* %8, align 1
  %9 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  store i8 0, i8* %9, align 1
  %10 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 0, i8* %10, align 1
  %11 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 0, i8* %11, align 1
  %12 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  store i8 0, i8* %12, align 1
  ret %struct.Memory* %5
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L20WRITE_CONTROL_REG_64ILN13SyncHyperCall4NameE278EEEP6MemoryS4_R5State3RnWImE2RnImE(%struct.Memory*, %struct.State* dereferenceable(3376), i64* nocapture, i64)  {
  %5 = tail call %struct.Memory* @__remill_sync_hyper_call(%struct.State* nonnull dereferenceable(3376) %1, %struct.Memory* %0, i32 1) 
  store i64 %3, i64* %2, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 0, i8* %6, align 1
  %7 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 0, i8* %7, align 1
  %8 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  store i8 0, i8* %8, align 1
  %9 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 0, i8* %9, align 1
  %10 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 0, i8* %10, align 1
  %11 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  store i8 0, i8* %11, align 1
  %12 = tail call %struct.Memory* @__remill_sync_hyper_call(%struct.State* nonnull dereferenceable(3376) %1, %struct.Memory* %5, i32 278) 
  ret %struct.Memory* %12
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L20WRITE_CONTROL_REG_64ILN13SyncHyperCall4NameE279EEEP6MemoryS4_R5State3RnWImE2RnImE(%struct.Memory*, %struct.State* dereferenceable(3376), i64* nocapture, i64)  {
  %5 = tail call %struct.Memory* @__remill_sync_hyper_call(%struct.State* nonnull dereferenceable(3376) %1, %struct.Memory* %0, i32 1) 
  store i64 %3, i64* %2, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 0, i8* %6, align 1
  %7 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 0, i8* %7, align 1
  %8 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  store i8 0, i8* %8, align 1
  %9 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 0, i8* %9, align 1
  %10 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 0, i8* %10, align 1
  %11 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  store i8 0, i8* %11, align 1
  %12 = tail call %struct.Memory* @__remill_sync_hyper_call(%struct.State* nonnull dereferenceable(3376) %1, %struct.Memory* %5, i32 279) 
  ret %struct.Memory* %12
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L20WRITE_CONTROL_REG_64ILN13SyncHyperCall4NameE280EEEP6MemoryS4_R5State3RnWImE2RnImE(%struct.Memory*, %struct.State* dereferenceable(3376), i64* nocapture, i64)  {
  %5 = tail call %struct.Memory* @__remill_sync_hyper_call(%struct.State* nonnull dereferenceable(3376) %1, %struct.Memory* %0, i32 1) 
  store i64 %3, i64* %2, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 0, i8* %6, align 1
  %7 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 0, i8* %7, align 1
  %8 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  store i8 0, i8* %8, align 1
  %9 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 0, i8* %9, align 1
  %10 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 0, i8* %10, align 1
  %11 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  store i8 0, i8* %11, align 1
  %12 = tail call %struct.Memory* @__remill_sync_hyper_call(%struct.State* nonnull dereferenceable(3376) %1, %struct.Memory* %5, i32 280) 
  ret %struct.Memory* %12
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L20WRITE_CONTROL_REG_64ILN13SyncHyperCall4NameE281EEEP6MemoryS4_R5State3RnWImE2RnImE(%struct.Memory*, %struct.State* dereferenceable(3376), i64* nocapture, i64)  {
  %5 = tail call %struct.Memory* @__remill_sync_hyper_call(%struct.State* nonnull dereferenceable(3376) %1, %struct.Memory* %0, i32 1) 
  store i64 %3, i64* %2, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 0, i8* %6, align 1
  %7 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 0, i8* %7, align 1
  %8 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  store i8 0, i8* %8, align 1
  %9 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 0, i8* %9, align 1
  %10 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 0, i8* %10, align 1
  %11 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  store i8 0, i8* %11, align 1
  %12 = tail call %struct.Memory* @__remill_sync_hyper_call(%struct.State* nonnull dereferenceable(3376) %1, %struct.Memory* %5, i32 281) 
  ret %struct.Memory* %12
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L20WRITE_CONTROL_REG_64ILN13SyncHyperCall4NameE282EEEP6MemoryS4_R5State3RnWImE2RnImE(%struct.Memory*, %struct.State* dereferenceable(3376), i64* nocapture, i64)  {
  %5 = tail call %struct.Memory* @__remill_sync_hyper_call(%struct.State* nonnull dereferenceable(3376) %1, %struct.Memory* %0, i32 1) 
  store i64 %3, i64* %2, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 0, i8* %6, align 1
  %7 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 0, i8* %7, align 1
  %8 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  store i8 0, i8* %8, align 1
  %9 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 0, i8* %9, align 1
  %10 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 0, i8* %10, align 1
  %11 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  store i8 0, i8* %11, align 1
  %12 = tail call %struct.Memory* @__remill_sync_hyper_call(%struct.State* nonnull dereferenceable(3376) %1, %struct.Memory* %5, i32 282) 
  ret %struct.Memory* %12
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L20WRITE_CONTROL_REG_64ILN13SyncHyperCall4NameE283EEEP6MemoryS4_R5State3RnWImE2RnImE(%struct.Memory*, %struct.State* dereferenceable(3376), i64* nocapture, i64)  {
  %5 = tail call %struct.Memory* @__remill_sync_hyper_call(%struct.State* nonnull dereferenceable(3376) %1, %struct.Memory* %0, i32 1) 
  store i64 %3, i64* %2, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 0, i8* %6, align 1
  %7 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 0, i8* %7, align 1
  %8 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  store i8 0, i8* %8, align 1
  %9 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 0, i8* %9, align 1
  %10 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 0, i8* %10, align 1
  %11 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  store i8 0, i8* %11, align 1
  %12 = tail call %struct.Memory* @__remill_sync_hyper_call(%struct.State* nonnull dereferenceable(3376) %1, %struct.Memory* %5, i32 283) 
  ret %struct.Memory* %12
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L19READ_CONTROL_REG_64EP6MemoryR5State3RnWImE2RnImE(%struct.Memory*, %struct.State* dereferenceable(3376), i64* nocapture, i64)  {
  %5 = tail call %struct.Memory* @__remill_sync_hyper_call(%struct.State* nonnull dereferenceable(3376) %1, %struct.Memory* %0, i32 1) 
  store i64 %3, i64* %2, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 0, i8* %6, align 1
  %7 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 0, i8* %7, align 1
  %8 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  store i8 0, i8* %8, align 1
  %9 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 0, i8* %9, align 1
  %10 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 0, i8* %10, align 1
  %11 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  store i8 0, i8* %11, align 1
  ret %struct.Memory* %5
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L18WRITE_DEBUG_REG_32EP6MemoryR5State3RnWImE2RnIjE(%struct.Memory*, %struct.State* dereferenceable(3376), i64* nocapture, i64)  {
  %5 = tail call %struct.Memory* @__remill_sync_hyper_call(%struct.State* nonnull dereferenceable(3376) %1, %struct.Memory* %0, i32 1) 
  %6 = and i64 %3, 4294967295
  store i64 %6, i64* %2, align 8
  %7 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 0, i8* %7, align 1
  %8 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 0, i8* %8, align 1
  %9 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  store i8 0, i8* %9, align 1
  %10 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 0, i8* %10, align 1
  %11 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 0, i8* %11, align 1
  %12 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  store i8 0, i8* %12, align 1
  %13 = tail call %struct.Memory* @__remill_sync_hyper_call(%struct.State* nonnull dereferenceable(3376) %1, %struct.Memory* %5, i32 271) 
  ret %struct.Memory* %13
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L18WRITE_DEBUG_REG_64EP6MemoryR5State3RnWImE2RnImE(%struct.Memory*, %struct.State* dereferenceable(3376), i64* nocapture, i64)  {
  %5 = tail call %struct.Memory* @__remill_sync_hyper_call(%struct.State* nonnull dereferenceable(3376) %1, %struct.Memory* %0, i32 1) 
  store i64 %3, i64* %2, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 0, i8* %6, align 1
  %7 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 0, i8* %7, align 1
  %8 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  store i8 0, i8* %8, align 1
  %9 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 0, i8* %9, align 1
  %10 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 0, i8* %10, align 1
  %11 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  store i8 0, i8* %11, align 1
  %12 = tail call %struct.Memory* @__remill_sync_hyper_call(%struct.State* nonnull dereferenceable(3376) %1, %struct.Memory* %5, i32 272) 
  ret %struct.Memory* %12
}

; Function Attrs: alwaysinline norecurse nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3JMPI2InImEEEP6MemoryS4_R5StateT_(%struct.Memory* readnone returned, %struct.State* nocapture dereferenceable(3376), i64)  {
  %4 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %2, i64* %4, align 8
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3JMPI2MnImEEEP6MemoryS4_R5StateT_(%struct.Memory* returned, %struct.State* nocapture dereferenceable(3376), i64)  {
  %4 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 33, i32 0, i32 0
  %5 = inttoptr i64 %2 to i64*
  %6 = load i64, i64* %5
  store i64 %6, i64* %4, align 8
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline norecurse nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3JMPI2RnImEEEP6MemoryS4_R5StateT_(%struct.Memory* readnone returned, %struct.State* nocapture dereferenceable(3376), i64)  {
  %4 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %2, i64* %4, align 8
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L11JMP_FAR_MEMI2MnImEEEP6MemoryS4_R5StateT_(%struct.Memory*, %struct.State* nocapture dereferenceable(3376), i64)  {
  %4 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 0, i32 0
  store i32 11, i32* %4, align 16
  %5 = inttoptr i64 %2 to i64*
  %6 = load i64, i64* %5
  %7 = lshr i64 %6, 32
  %8 = trunc i64 %7 to i16
  %9 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 33, i32 0, i32 0
  %10 = and i64 %6, 4294967295
  store i64 %10, i64* %9, align 8
  %11 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 4, i32 11, i32 0
  store i16 %8, i16* %11, align 2
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L4FBLDEP6MemoryR5State3RnWIdE2MnI7bcd80_tE2InImES9_ItE(%struct.Memory* returned, %struct.State* nocapture dereferenceable(3376), double* nocapture readnone, i64, i64, i64)  {
  %7 = alloca %struct.bcd80_t, align 8
  %8 = trunc i64 %5 to i16
  %9 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 11, i32 0, i32 0, i32 4
  store i16 %8, i16* %9, align 2
  %10 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 11, i32 0, i32 0, i32 5
  %11 = bitcast i32* %10 to i64*
  store i64 %4, i64* %11, align 8
  %12 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 11, i32 0, i32 0, i32 8
  %13 = bitcast i32* %12 to i64*
  store i64 %3, i64* %13, align 16
  %14 = getelementptr inbounds %struct.bcd80_t, %struct.bcd80_t* %7, i64 0, i32 0, i64 0, i32 0
  call void @llvm.lifetime.start(i64 10, i8* nonnull %14) 
  %15 = inttoptr i64 %3 to i8*
  %16 = load i8, i8* %15
  %17 = add i64 %3, 1
  %18 = inttoptr i64 %17 to i8*
  %19 = load i8, i8* %18
  %20 = add i64 %3, 2
  %21 = inttoptr i64 %20 to i8*
  %22 = load i8, i8* %21
  %23 = add i64 %3, 3
  %24 = inttoptr i64 %23 to i8*
  %25 = load i8, i8* %24
  %26 = add i64 %3, 4
  %27 = inttoptr i64 %26 to i8*
  %28 = load i8, i8* %27
  %29 = add i64 %3, 5
  %30 = inttoptr i64 %29 to i8*
  %31 = load i8, i8* %30
  %32 = add i64 %3, 6
  %33 = inttoptr i64 %32 to i8*
  %34 = load i8, i8* %33
  %35 = add i64 %3, 7
  %36 = inttoptr i64 %35 to i8*
  %37 = load i8, i8* %36
  %38 = add i64 %3, 8
  %39 = inttoptr i64 %38 to i8*
  %40 = load i8, i8* %39
  %41 = zext i8 %40 to i16
  %42 = add i64 %3, 9
  %43 = inttoptr i64 %42 to i8*
  %44 = load i8, i8* %43
  %45 = and i8 %44, -128
  %46 = zext i8 %45 to i16
  %47 = shl nuw i16 %46, 8
  %48 = or i16 %47, %41
  %49 = zext i8 %37 to i64
  %50 = shl nuw i64 %49, 56
  %51 = zext i8 %34 to i64
  %52 = shl nuw nsw i64 %51, 48
  %53 = zext i8 %31 to i64
  %54 = shl nuw nsw i64 %53, 40
  %55 = zext i8 %28 to i64
  %56 = shl nuw nsw i64 %55, 32
  %57 = zext i8 %25 to i64
  %58 = shl nuw nsw i64 %57, 24
  %59 = zext i8 %22 to i64
  %60 = shl nuw nsw i64 %59, 16
  %61 = zext i8 %19 to i64
  %62 = shl nuw nsw i64 %61, 8
  %63 = zext i8 %16 to i64
  %64 = or i64 %62, %63
  %65 = or i64 %64, %60
  %66 = or i64 %65, %58
  %67 = or i64 %66, %56
  %68 = or i64 %67, %54
  %69 = or i64 %68, %52
  %70 = or i64 %69, %50
  %71 = bitcast %struct.bcd80_t* %7 to i64*
  store i64 %70, i64* %71, align 8
  %72 = getelementptr inbounds %struct.bcd80_t, %struct.bcd80_t* %7, i64 0, i32 0, i64 8
  %73 = bitcast %union.FPUAbridgedTagWord* %72 to i16*
  store i16 %48, i16* %73, align 8
  %74 = zext i8 %16 to i32
  %75 = and i32 %74, 15
  %76 = lshr i32 %74, 4
  %77 = sitofp i32 %75 to double
  %78 = sitofp i32 %76 to double
  %79 = fmul double %78, 1.000000e+01
  %80 = fadd double %79, %77
  %81 = zext i8 %19 to i32
  %82 = and i32 %81, 15
  %83 = lshr i32 %81, 4
  %84 = sitofp i32 %82 to double
  %85 = fmul double %84, 1.000000e+02
  %86 = fadd double %80, %85
  %87 = sitofp i32 %83 to double
  %88 = fmul double %87, 1.000000e+03
  %89 = fadd double %88, %86
  %90 = zext i8 %22 to i32
  %91 = and i32 %90, 15
  %92 = lshr i32 %90, 4
  %93 = sitofp i32 %91 to double
  %94 = fmul double %93, 1.000000e+04
  %95 = fadd double %89, %94
  %96 = sitofp i32 %92 to double
  %97 = fmul double %96, 1.000000e+05
  %98 = fadd double %97, %95
  %99 = zext i8 %25 to i32
  %100 = and i32 %99, 15
  %101 = lshr i32 %99, 4
  %102 = sitofp i32 %100 to double
  %103 = fmul double %102, 1.000000e+06
  %104 = fadd double %98, %103
  %105 = sitofp i32 %101 to double
  %106 = fmul double %105, 1.000000e+07
  %107 = fadd double %106, %104
  %108 = lshr i64 %67, 32
  %109 = trunc i64 %108 to i32
  %110 = and i32 %109, 15
  %111 = lshr i64 %67, 36
  %112 = trunc i64 %111 to i32
  %113 = and i32 %112, 15
  %114 = sitofp i32 %110 to double
  %115 = fmul double %114, 1.000000e+08
  %116 = fadd double %107, %115
  %117 = sitofp i32 %113 to double
  %118 = fmul double %117, 1.000000e+09
  %119 = fadd double %118, %116
  %120 = lshr i64 %68, 40
  %121 = trunc i64 %120 to i32
  %122 = and i32 %121, 15
  %123 = lshr i64 %68, 44
  %124 = trunc i64 %123 to i32
  %125 = and i32 %124, 15
  %126 = sitofp i32 %122 to double
  %127 = fmul double %126, 1.000000e+10
  %128 = fadd double %119, %127
  %129 = sitofp i32 %125 to double
  %130 = fmul double %129, 1.000000e+11
  %131 = fadd double %130, %128
  %132 = lshr i64 %69, 48
  %133 = trunc i64 %132 to i32
  %134 = and i32 %133, 15
  %135 = lshr i64 %69, 52
  %136 = trunc i64 %135 to i32
  %137 = and i32 %136, 15
  %138 = sitofp i32 %134 to double
  %139 = fmul double %138, 1.000000e+12
  %140 = fadd double %131, %139
  %141 = sitofp i32 %137 to double
  %142 = fmul double %141, 1.000000e+13
  %143 = fadd double %142, %140
  %144 = lshr i64 %70, 56
  %145 = trunc i64 %144 to i32
  %146 = and i32 %145, 15
  %147 = lshr i64 %70, 60
  %148 = trunc i64 %147 to i32
  %149 = sitofp i32 %146 to double
  %150 = fmul double %149, 1.000000e+14
  %151 = fadd double %143, %150
  %152 = sitofp i32 %148 to double
  %153 = fmul double %152, 1.000000e+15
  %154 = fadd double %153, %151
  %155 = zext i8 %40 to i32
  %156 = and i32 %155, 15
  %157 = lshr i32 %155, 4
  %158 = sitofp i32 %156 to double
  %159 = fmul double %158, 1.000000e+16
  %160 = fadd double %154, %159
  %161 = sitofp i32 %157 to double
  %162 = fmul double %161, 1.000000e+17
  %163 = fadd double %162, %160
  %164 = getelementptr inbounds %struct.bcd80_t, %struct.bcd80_t* %7, i64 0, i32 1, i32 0
  %165 = load i8, i8* %164, align 1
  %166 = icmp slt i8 %165, 0
  %167 = fsub double -0.000000e+00, %163
  %168 = select i1 %166, double %167, double %163
  %169 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 6, i32 1
  %170 = bitcast double* %169 to i64*
  %171 = load i64, i64* %170, align 8
  %172 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 7, i32 1
  %173 = bitcast double* %172 to i64*
  store i64 %171, i64* %173, align 8
  %174 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 5, i32 1
  %175 = bitcast double* %174 to i64*
  %176 = load i64, i64* %175, align 8
  store i64 %176, i64* %170, align 8
  %177 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 4, i32 1
  %178 = bitcast double* %177 to i64*
  %179 = load i64, i64* %178, align 8
  store i64 %179, i64* %175, align 8
  %180 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 3, i32 1
  %181 = bitcast double* %180 to i64*
  %182 = load i64, i64* %181, align 8
  store i64 %182, i64* %178, align 8
  %183 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 2, i32 1
  %184 = bitcast double* %183 to i64*
  %185 = load i64, i64* %184, align 8
  store i64 %185, i64* %181, align 8
  %186 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 1, i32 1
  %187 = bitcast double* %186 to i64*
  %188 = load i64, i64* %187, align 8
  store i64 %188, i64* %184, align 8
  %189 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 0, i32 1
  %190 = bitcast double* %189 to i64*
  %191 = load i64, i64* %190, align 8
  store i64 %191, i64* %187, align 8
  store double %168, double* %189, align 8
  %192 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 11, i32 0, i32 0, i32 1, i32 0
  %193 = load i16, i16* %192, align 2
  %194 = add i16 %193, 14336
  %195 = and i16 %194, 14336
  %196 = and i16 %193, -14337
  %197 = or i16 %195, %196
  store i16 %197, i16* %192, align 2
  call void @llvm.lifetime.end(i64 10, i8* nonnull %14) 
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L4FILDI2MnItEEEP6MemoryS4_R5State3RnWIdET_2InImESA_ItE(%struct.Memory*, %struct.State* nocapture dereferenceable(3376), double* nocapture readnone, i64, i64, i64)  {
  %7 = trunc i64 %5 to i16
  %8 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 11, i32 0, i32 0, i32 4
  store i16 %7, i16* %8, align 2
  %9 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 11, i32 0, i32 0, i32 5
  %10 = bitcast i32* %9 to i64*
  store i64 %4, i64* %10, align 8
  %11 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 11, i32 0, i32 0, i32 8
  %12 = bitcast i32* %11 to i64*
  store i64 %3, i64* %12, align 16
  %13 = inttoptr i64 %3 to i16*
  %14 = load i16, i16* %13
  %15 = sitofp i16 %14 to double
  %16 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 6, i32 1
  %17 = bitcast double* %16 to i64*
  %18 = load i64, i64* %17, align 8
  %19 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 7, i32 1
  %20 = bitcast double* %19 to i64*
  store i64 %18, i64* %20, align 8
  %21 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 5, i32 1
  %22 = bitcast double* %21 to i64*
  %23 = load i64, i64* %22, align 8
  store i64 %23, i64* %17, align 8
  %24 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 4, i32 1
  %25 = bitcast double* %24 to i64*
  %26 = load i64, i64* %25, align 8
  store i64 %26, i64* %22, align 8
  %27 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 3, i32 1
  %28 = bitcast double* %27 to i64*
  %29 = load i64, i64* %28, align 8
  store i64 %29, i64* %25, align 8
  %30 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 2, i32 1
  %31 = bitcast double* %30 to i64*
  %32 = load i64, i64* %31, align 8
  store i64 %32, i64* %28, align 8
  %33 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 1, i32 1
  %34 = bitcast double* %33 to i64*
  %35 = load i64, i64* %34, align 8
  store i64 %35, i64* %31, align 8
  %36 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 0, i32 1
  %37 = bitcast double* %36 to i64*
  %38 = load i64, i64* %37, align 8
  store i64 %38, i64* %34, align 8
  store double %15, double* %36, align 8
  %39 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 11, i32 0, i32 0, i32 1, i32 0
  %40 = load i16, i16* %39, align 2
  %41 = add i16 %40, 14336
  %42 = and i16 %41, 14336
  %43 = and i16 %40, -14337
  %44 = or i16 %42, %43
  store i16 %44, i16* %39, align 2
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L4FILDI2MnIjEEEP6MemoryS4_R5State3RnWIdET_2InImESA_ItE(%struct.Memory*, %struct.State* nocapture dereferenceable(3376), double* nocapture readnone, i64, i64, i64)  {
  %7 = trunc i64 %5 to i16
  %8 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 11, i32 0, i32 0, i32 4
  store i16 %7, i16* %8, align 2
  %9 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 11, i32 0, i32 0, i32 5
  %10 = bitcast i32* %9 to i64*
  store i64 %4, i64* %10, align 8
  %11 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 11, i32 0, i32 0, i32 8
  %12 = bitcast i32* %11 to i64*
  store i64 %3, i64* %12, align 16
  %13 = inttoptr i64 %3 to i32*
  %14 = load i32, i32* %13
  %15 = sitofp i32 %14 to double
  %16 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 6, i32 1
  %17 = bitcast double* %16 to i64*
  %18 = load i64, i64* %17, align 8
  %19 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 7, i32 1
  %20 = bitcast double* %19 to i64*
  store i64 %18, i64* %20, align 8
  %21 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 5, i32 1
  %22 = bitcast double* %21 to i64*
  %23 = load i64, i64* %22, align 8
  store i64 %23, i64* %17, align 8
  %24 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 4, i32 1
  %25 = bitcast double* %24 to i64*
  %26 = load i64, i64* %25, align 8
  store i64 %26, i64* %22, align 8
  %27 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 3, i32 1
  %28 = bitcast double* %27 to i64*
  %29 = load i64, i64* %28, align 8
  store i64 %29, i64* %25, align 8
  %30 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 2, i32 1
  %31 = bitcast double* %30 to i64*
  %32 = load i64, i64* %31, align 8
  store i64 %32, i64* %28, align 8
  %33 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 1, i32 1
  %34 = bitcast double* %33 to i64*
  %35 = load i64, i64* %34, align 8
  store i64 %35, i64* %31, align 8
  %36 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 0, i32 1
  %37 = bitcast double* %36 to i64*
  %38 = load i64, i64* %37, align 8
  store i64 %38, i64* %34, align 8
  store double %15, double* %36, align 8
  %39 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 11, i32 0, i32 0, i32 1, i32 0
  %40 = load i16, i16* %39, align 2
  %41 = add i16 %40, 14336
  %42 = and i16 %41, 14336
  %43 = and i16 %40, -14337
  %44 = or i16 %42, %43
  store i16 %44, i16* %39, align 2
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L4FILDI2MnImEEEP6MemoryS4_R5State3RnWIdET_2InImESA_ItE(%struct.Memory*, %struct.State* nocapture dereferenceable(3376), double* nocapture readnone, i64, i64, i64)  {
  %7 = trunc i64 %5 to i16
  %8 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 11, i32 0, i32 0, i32 4
  store i16 %7, i16* %8, align 2
  %9 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 11, i32 0, i32 0, i32 5
  %10 = bitcast i32* %9 to i64*
  store i64 %4, i64* %10, align 8
  %11 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 11, i32 0, i32 0, i32 8
  %12 = bitcast i32* %11 to i64*
  store i64 %3, i64* %12, align 16
  %13 = inttoptr i64 %3 to i64*
  %14 = load i64, i64* %13
  %15 = sitofp i64 %14 to double
  %16 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 6, i32 1
  %17 = bitcast double* %16 to i64*
  %18 = load i64, i64* %17, align 8
  %19 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 7, i32 1
  %20 = bitcast double* %19 to i64*
  store i64 %18, i64* %20, align 8
  %21 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 5, i32 1
  %22 = bitcast double* %21 to i64*
  %23 = load i64, i64* %22, align 8
  store i64 %23, i64* %17, align 8
  %24 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 4, i32 1
  %25 = bitcast double* %24 to i64*
  %26 = load i64, i64* %25, align 8
  store i64 %26, i64* %22, align 8
  %27 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 3, i32 1
  %28 = bitcast double* %27 to i64*
  %29 = load i64, i64* %28, align 8
  store i64 %29, i64* %25, align 8
  %30 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 2, i32 1
  %31 = bitcast double* %30 to i64*
  %32 = load i64, i64* %31, align 8
  store i64 %32, i64* %28, align 8
  %33 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 1, i32 1
  %34 = bitcast double* %33 to i64*
  %35 = load i64, i64* %34, align 8
  store i64 %35, i64* %31, align 8
  %36 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 0, i32 1
  %37 = bitcast double* %36 to i64*
  %38 = load i64, i64* %37, align 8
  store i64 %38, i64* %34, align 8
  store double %15, double* %36, align 8
  %39 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 11, i32 0, i32 0, i32 1, i32 0
  %40 = load i16, i16* %39, align 2
  %41 = add i16 %40, 14336
  %42 = and i16 %41, 14336
  %43 = and i16 %40, -14337
  %44 = or i16 %42, %43
  store i16 %44, i16* %39, align 2
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L6FLDmemI2MnIfEEEP6MemoryS4_R5State3RnWIdET_2InImESA_ItE(%struct.Memory* returned, %struct.State* nocapture dereferenceable(3376), double* nocapture readnone, i64, i64, i64)  {
  %7 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 11, i32 0, i32 0, i32 8
  %8 = bitcast i32* %7 to i64*
  store i64 %3, i64* %8, align 16
  %9 = trunc i64 %5 to i16
  %10 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 11, i32 0, i32 0, i32 4
  store i16 %9, i16* %10, align 2
  %11 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 11, i32 0, i32 0, i32 5
  %12 = bitcast i32* %11 to i64*
  store i64 %4, i64* %12, align 8
  %13 = inttoptr i64 %3 to float*
  %14 = load float, float* %13
  %15 = bitcast float %14 to i32
  %16 = and i32 %15, 2143289344
  %17 = icmp eq i32 %16, 2139095040
  %18 = and i32 %15, 4194303
  %19 = icmp ne i32 %18, 0
  %20 = and i1 %17, %19
  %21 = zext i1 %20 to i8
  %22 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 19
  %23 = load i8, i8* %22, align 1
  %24 = or i8 %21, %23
  store i8 %24, i8* %22, align 1
  %25 = fcmp ueq float %14, 0.000000e+00
  br i1 %25, label %31, label %26

; <label>:26:                                     ; preds = %6
  %27 = tail call float @llvm.fabs.f32(float %14) 
  %28 = fcmp oeq float %27, 0x7FF0000000000000
  br i1 %28, label %31, label %29

; <label>:29:                                     ; preds = %26
  %30 = fcmp olt float %27, 0x3810000000000000
  br label %31

; <label>:31:                                     ; preds = %29, %26, %6
  %32 = phi i1 [ false, %6 ], [ false, %26 ], [ %30, %29 ]
  %33 = zext i1 %32 to i8
  %34 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 17
  store i8 %33, i8* %34, align 1
  %35 = fpext float %14 to double
  %36 = icmp eq i8 %24, 0
  br i1 %36, label %41, label %37

; <label>:37:                                     ; preds = %31
  %38 = bitcast double %35 to i64
  %39 = or i64 %38, 2251799813685248
  %40 = bitcast i64 %39 to double
  br label %41

; <label>:41:                                     ; preds = %37, %31
  %42 = phi double [ %40, %37 ], [ %35, %31 ]
  %43 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 6, i32 1
  %44 = bitcast double* %43 to i64*
  %45 = load i64, i64* %44, align 8
  %46 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 7, i32 1
  %47 = bitcast double* %46 to i64*
  store i64 %45, i64* %47, align 8
  %48 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 5, i32 1
  %49 = bitcast double* %48 to i64*
  %50 = load i64, i64* %49, align 8
  store i64 %50, i64* %44, align 8
  %51 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 4, i32 1
  %52 = bitcast double* %51 to i64*
  %53 = load i64, i64* %52, align 8
  store i64 %53, i64* %49, align 8
  %54 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 3, i32 1
  %55 = bitcast double* %54 to i64*
  %56 = load i64, i64* %55, align 8
  store i64 %56, i64* %52, align 8
  %57 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 2, i32 1
  %58 = bitcast double* %57 to i64*
  %59 = load i64, i64* %58, align 8
  store i64 %59, i64* %55, align 8
  %60 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 1, i32 1
  %61 = bitcast double* %60 to i64*
  %62 = load i64, i64* %61, align 8
  store i64 %62, i64* %58, align 8
  %63 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 0, i32 1
  %64 = bitcast double* %63 to i64*
  %65 = load i64, i64* %64, align 8
  store i64 %65, i64* %61, align 8
  store double %42, double* %63, align 8
  %66 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 11, i32 0, i32 0, i32 1, i32 0
  %67 = load i16, i16* %66, align 2
  %68 = add i16 %67, 14336
  %69 = and i16 %68, 14336
  %70 = and i16 %67, -14337
  %71 = or i16 %69, %70
  store i16 %71, i16* %66, align 2
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline norecurse nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L12FLDfromstackEP6MemoryR5State3RnWIdE2RnIdE2InImES8_ItE(%struct.Memory* readnone returned, %struct.State* nocapture dereferenceable(3376), double* nocapture readnone, double, i64, i64)  {
  %7 = trunc i64 %5 to i16
  %8 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 11, i32 0, i32 0, i32 4
  store i16 %7, i16* %8, align 2
  %9 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 11, i32 0, i32 0, i32 5
  %10 = bitcast i32* %9 to i64*
  store i64 %4, i64* %10, align 8
  %11 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 19
  store i8 0, i8* %11, align 1
  %12 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 17
  store i8 0, i8* %12, align 1
  %13 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 6, i32 1
  %14 = bitcast double* %13 to i64*
  %15 = load i64, i64* %14, align 8
  %16 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 7, i32 1
  %17 = bitcast double* %16 to i64*
  store i64 %15, i64* %17, align 8
  %18 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 5, i32 1
  %19 = bitcast double* %18 to i64*
  %20 = load i64, i64* %19, align 8
  store i64 %20, i64* %14, align 8
  %21 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 4, i32 1
  %22 = bitcast double* %21 to i64*
  %23 = load i64, i64* %22, align 8
  store i64 %23, i64* %19, align 8
  %24 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 3, i32 1
  %25 = bitcast double* %24 to i64*
  %26 = load i64, i64* %25, align 8
  store i64 %26, i64* %22, align 8
  %27 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 2, i32 1
  %28 = bitcast double* %27 to i64*
  %29 = load i64, i64* %28, align 8
  store i64 %29, i64* %25, align 8
  %30 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 1, i32 1
  %31 = bitcast double* %30 to i64*
  %32 = load i64, i64* %31, align 8
  store i64 %32, i64* %28, align 8
  %33 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 0, i32 1
  %34 = bitcast double* %33 to i64*
  %35 = load i64, i64* %34, align 8
  store i64 %35, i64* %31, align 8
  store double %3, double* %33, align 8
  %36 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 11, i32 0, i32 0, i32 1, i32 0
  %37 = load i16, i16* %36, align 2
  %38 = add i16 %37, 14336
  %39 = and i16 %38, 14336
  %40 = and i16 %37, -14337
  %41 = or i16 %39, %40
  store i16 %41, i16* %36, align 2
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L6FLDmemI2MnIdEEEP6MemoryS4_R5State3RnWIdET_2InImESA_ItE(%struct.Memory* returned, %struct.State* nocapture dereferenceable(3376), double* nocapture readnone, i64, i64, i64)  {
  %7 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 11, i32 0, i32 0, i32 8
  %8 = bitcast i32* %7 to i64*
  store i64 %3, i64* %8, align 16
  %9 = trunc i64 %5 to i16
  %10 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 11, i32 0, i32 0, i32 4
  store i16 %9, i16* %10, align 2
  %11 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 11, i32 0, i32 0, i32 5
  %12 = bitcast i32* %11 to i64*
  store i64 %4, i64* %12, align 8
  %13 = inttoptr i64 %3 to double*
  %14 = load double, double* %13
  %15 = bitcast double %14 to i64
  %16 = and i64 %15, 9221120237041090560
  %17 = icmp eq i64 %16, 9218868437227405312
  %18 = and i64 %15, 2251799813685247
  %19 = icmp ne i64 %18, 0
  %20 = and i1 %17, %19
  %21 = zext i1 %20 to i8
  %22 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 19
  %23 = load i8, i8* %22, align 1
  %24 = or i8 %21, %23
  store i8 %24, i8* %22, align 1
  %25 = fcmp ueq double %14, 0.000000e+00
  br i1 %25, label %31, label %26

; <label>:26:                                     ; preds = %6
  %27 = tail call double @llvm.fabs.f64(double %14) 
  %28 = fcmp oeq double %27, 0x7FF0000000000000
  br i1 %28, label %31, label %29

; <label>:29:                                     ; preds = %26
  %30 = fcmp olt double %27, 0x10000000000000
  br label %31

; <label>:31:                                     ; preds = %29, %26, %6
  %32 = phi i1 [ false, %6 ], [ false, %26 ], [ %30, %29 ]
  %33 = zext i1 %32 to i8
  %34 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 17
  store i8 %33, i8* %34, align 1
  %35 = icmp eq i8 %24, 0
  %36 = or i64 %15, 2251799813685248
  %37 = bitcast i64 %36 to double
  %38 = select i1 %35, double %14, double %37
  %39 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 6, i32 1
  %40 = bitcast double* %39 to i64*
  %41 = load i64, i64* %40, align 8
  %42 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 7, i32 1
  %43 = bitcast double* %42 to i64*
  store i64 %41, i64* %43, align 8
  %44 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 5, i32 1
  %45 = bitcast double* %44 to i64*
  %46 = load i64, i64* %45, align 8
  store i64 %46, i64* %40, align 8
  %47 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 4, i32 1
  %48 = bitcast double* %47 to i64*
  %49 = load i64, i64* %48, align 8
  store i64 %49, i64* %45, align 8
  %50 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 3, i32 1
  %51 = bitcast double* %50 to i64*
  %52 = load i64, i64* %51, align 8
  store i64 %52, i64* %48, align 8
  %53 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 2, i32 1
  %54 = bitcast double* %53 to i64*
  %55 = load i64, i64* %54, align 8
  store i64 %55, i64* %51, align 8
  %56 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 1, i32 1
  %57 = bitcast double* %56 to i64*
  %58 = load i64, i64* %57, align 8
  store i64 %58, i64* %54, align 8
  %59 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 0, i32 1
  %60 = bitcast double* %59 to i64*
  %61 = load i64, i64* %60, align 8
  store i64 %61, i64* %57, align 8
  store double %38, double* %59, align 8
  %62 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 11, i32 0, i32 0, i32 1, i32 0
  %63 = load i16, i16* %62, align 2
  %64 = add i16 %63, 14336
  %65 = and i16 %64, 14336
  %66 = and i16 %63, -14337
  %67 = or i16 %65, %66
  store i16 %67, i16* %62, align 2
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L6FLDmemI2MnI9float80_tEEEP6MemoryS5_R5State3RnWIdET_2InImESB_ItE(%struct.Memory* returned, %struct.State* nocapture dereferenceable(3376), double* nocapture readnone, i64, i64, i64)  {
  %7 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 11, i32 0, i32 0, i32 8
  %8 = bitcast i32* %7 to i64*
  store i64 %3, i64* %8, align 16
  %9 = trunc i64 %5 to i16
  %10 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 11, i32 0, i32 0, i32 4
  store i16 %9, i16* %10, align 2
  %11 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 11, i32 0, i32 0, i32 5
  %12 = bitcast i32* %11 to i64*
  store i64 %4, i64* %12, align 8
  %13 = inttoptr i64 %3 to x86_fp80*
  %14 = load x86_fp80, x86_fp80* %13
  %15 = fptrunc x86_fp80 %14 to double
  %16 = bitcast double %15 to i64
  %17 = and i64 %16, 9221120237041090560
  %18 = icmp eq i64 %17, 9218868437227405312
  %19 = and i64 %16, 2251799813685247
  %20 = icmp ne i64 %19, 0
  %21 = and i1 %18, %20
  %22 = zext i1 %21 to i8
  %23 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 19
  %24 = load i8, i8* %23, align 1
  %25 = or i8 %22, %24
  store i8 %25, i8* %23, align 1
  %26 = fcmp ueq double %15, 0.000000e+00
  br i1 %26, label %32, label %27

; <label>:27:                                     ; preds = %6
  %28 = tail call double @llvm.fabs.f64(double %15) 
  %29 = fcmp oeq double %28, 0x7FF0000000000000
  br i1 %29, label %32, label %30

; <label>:30:                                     ; preds = %27
  %31 = fcmp olt double %28, 0x10000000000000
  br label %32

; <label>:32:                                     ; preds = %30, %27, %6
  %33 = phi i1 [ false, %6 ], [ false, %27 ], [ %31, %30 ]
  %34 = zext i1 %33 to i8
  %35 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 17
  store i8 %34, i8* %35, align 1
  %36 = icmp eq i8 %25, 0
  %37 = or i64 %16, 2251799813685248
  %38 = bitcast i64 %37 to double
  %39 = select i1 %36, double %15, double %38
  %40 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 6, i32 1
  %41 = bitcast double* %40 to i64*
  %42 = load i64, i64* %41, align 8
  %43 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 7, i32 1
  %44 = bitcast double* %43 to i64*
  store i64 %42, i64* %44, align 8
  %45 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 5, i32 1
  %46 = bitcast double* %45 to i64*
  %47 = load i64, i64* %46, align 8
  store i64 %47, i64* %41, align 8
  %48 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 4, i32 1
  %49 = bitcast double* %48 to i64*
  %50 = load i64, i64* %49, align 8
  store i64 %50, i64* %46, align 8
  %51 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 3, i32 1
  %52 = bitcast double* %51 to i64*
  %53 = load i64, i64* %52, align 8
  store i64 %53, i64* %49, align 8
  %54 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 2, i32 1
  %55 = bitcast double* %54 to i64*
  %56 = load i64, i64* %55, align 8
  store i64 %56, i64* %52, align 8
  %57 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 1, i32 1
  %58 = bitcast double* %57 to i64*
  %59 = load i64, i64* %58, align 8
  store i64 %59, i64* %55, align 8
  %60 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 0, i32 1
  %61 = bitcast double* %60 to i64*
  %62 = load i64, i64* %61, align 8
  store i64 %62, i64* %58, align 8
  store double %39, double* %60, align 8
  %63 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 11, i32 0, i32 0, i32 1, i32 0
  %64 = load i16, i16* %63, align 2
  %65 = add i16 %64, 14336
  %66 = and i16 %65, 14336
  %67 = and i16 %64, -14337
  %68 = or i16 %66, %67
  store i16 %68, i16* %63, align 2
  ret %struct.Memory* %0
}

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare double @__remill_read_memory_f80(%struct.Memory*, i64) 

; Function Attrs: alwaysinline norecurse nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L8DoFLDLN2EP6MemoryR5State2InImES4_ItE(%struct.Memory* readnone returned, %struct.State* nocapture dereferenceable(3376), i64, i64)  {
  %5 = trunc i64 %3 to i16
  %6 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 11, i32 0, i32 0, i32 4
  store i16 %5, i16* %6, align 2
  %7 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 11, i32 0, i32 0, i32 5
  %8 = bitcast i32* %7 to i64*
  store i64 %2, i64* %8, align 8
  %9 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 6, i32 1
  %10 = bitcast double* %9 to i64*
  %11 = load i64, i64* %10, align 8
  %12 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 7, i32 1
  %13 = bitcast double* %12 to i64*
  store i64 %11, i64* %13, align 8
  %14 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 5, i32 1
  %15 = bitcast double* %14 to i64*
  %16 = load i64, i64* %15, align 8
  store i64 %16, i64* %10, align 8
  %17 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 4, i32 1
  %18 = bitcast double* %17 to i64*
  %19 = load i64, i64* %18, align 8
  store i64 %19, i64* %15, align 8
  %20 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 3, i32 1
  %21 = bitcast double* %20 to i64*
  %22 = load i64, i64* %21, align 8
  store i64 %22, i64* %18, align 8
  %23 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 2, i32 1
  %24 = bitcast double* %23 to i64*
  %25 = load i64, i64* %24, align 8
  store i64 %25, i64* %21, align 8
  %26 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 1, i32 1
  %27 = bitcast double* %26 to i64*
  %28 = load i64, i64* %27, align 8
  store i64 %28, i64* %24, align 8
  %29 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 0, i32 1
  %30 = bitcast double* %29 to i64*
  %31 = load i64, i64* %30, align 8
  store i64 %31, i64* %27, align 8
  store double 0x3FE62E42FEFA39EF, double* %29, align 8
  %32 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 11, i32 0, i32 0, i32 1, i32 0
  %33 = load i16, i16* %32, align 2
  %34 = add i16 %33, 14336
  %35 = and i16 %34, 14336
  %36 = and i16 %33, -14337
  %37 = or i16 %35, %36
  store i16 %37, i16* %32, align 2
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline norecurse nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L6DoFLD1EP6MemoryR5State2InImES4_ItE(%struct.Memory* readnone returned, %struct.State* nocapture dereferenceable(3376), i64, i64)  {
  %5 = trunc i64 %3 to i16
  %6 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 11, i32 0, i32 0, i32 4
  store i16 %5, i16* %6, align 2
  %7 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 11, i32 0, i32 0, i32 5
  %8 = bitcast i32* %7 to i64*
  store i64 %2, i64* %8, align 8
  %9 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 6, i32 1
  %10 = bitcast double* %9 to i64*
  %11 = load i64, i64* %10, align 8
  %12 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 7, i32 1
  %13 = bitcast double* %12 to i64*
  store i64 %11, i64* %13, align 8
  %14 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 5, i32 1
  %15 = bitcast double* %14 to i64*
  %16 = load i64, i64* %15, align 8
  store i64 %16, i64* %10, align 8
  %17 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 4, i32 1
  %18 = bitcast double* %17 to i64*
  %19 = load i64, i64* %18, align 8
  store i64 %19, i64* %15, align 8
  %20 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 3, i32 1
  %21 = bitcast double* %20 to i64*
  %22 = load i64, i64* %21, align 8
  store i64 %22, i64* %18, align 8
  %23 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 2, i32 1
  %24 = bitcast double* %23 to i64*
  %25 = load i64, i64* %24, align 8
  store i64 %25, i64* %21, align 8
  %26 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 1, i32 1
  %27 = bitcast double* %26 to i64*
  %28 = load i64, i64* %27, align 8
  store i64 %28, i64* %24, align 8
  %29 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 0, i32 1
  %30 = bitcast double* %29 to i64*
  %31 = load i64, i64* %30, align 8
  store i64 %31, i64* %27, align 8
  store double 1.000000e+00, double* %29, align 8
  %32 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 11, i32 0, i32 0, i32 1, i32 0
  %33 = load i16, i16* %32, align 2
  %34 = add i16 %33, 14336
  %35 = and i16 %34, 14336
  %36 = and i16 %33, -14337
  %37 = or i16 %35, %36
  store i16 %37, i16* %32, align 2
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline norecurse nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L6DoFLDZEP6MemoryR5State2InImES4_ItE(%struct.Memory* readnone returned, %struct.State* nocapture dereferenceable(3376), i64, i64)  {
  %5 = trunc i64 %3 to i16
  %6 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 11, i32 0, i32 0, i32 4
  store i16 %5, i16* %6, align 2
  %7 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 11, i32 0, i32 0, i32 5
  %8 = bitcast i32* %7 to i64*
  store i64 %2, i64* %8, align 8
  %9 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 6, i32 1
  %10 = bitcast double* %9 to i64*
  %11 = load i64, i64* %10, align 8
  %12 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 7, i32 1
  %13 = bitcast double* %12 to i64*
  store i64 %11, i64* %13, align 8
  %14 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 5, i32 1
  %15 = bitcast double* %14 to i64*
  %16 = load i64, i64* %15, align 8
  store i64 %16, i64* %10, align 8
  %17 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 4, i32 1
  %18 = bitcast double* %17 to i64*
  %19 = load i64, i64* %18, align 8
  store i64 %19, i64* %15, align 8
  %20 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 3, i32 1
  %21 = bitcast double* %20 to i64*
  %22 = load i64, i64* %21, align 8
  store i64 %22, i64* %18, align 8
  %23 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 2, i32 1
  %24 = bitcast double* %23 to i64*
  %25 = load i64, i64* %24, align 8
  store i64 %25, i64* %21, align 8
  %26 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 1, i32 1
  %27 = bitcast double* %26 to i64*
  %28 = load i64, i64* %27, align 8
  store i64 %28, i64* %24, align 8
  %29 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 0, i32 1
  %30 = bitcast double* %29 to i64*
  %31 = load i64, i64* %30, align 8
  store i64 %31, i64* %27, align 8
  store double 0.000000e+00, double* %29, align 8
  %32 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 11, i32 0, i32 0, i32 1, i32 0
  %33 = load i16, i16* %32, align 2
  %34 = add i16 %33, 14336
  %35 = and i16 %34, 14336
  %36 = and i16 %33, -14337
  %37 = or i16 %35, %36
  store i16 %37, i16* %32, align 2
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline norecurse nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L8DoFLDLG2EP6MemoryR5State2InImES4_ItE(%struct.Memory* readnone returned, %struct.State* nocapture dereferenceable(3376), i64, i64)  {
  %5 = trunc i64 %3 to i16
  %6 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 11, i32 0, i32 0, i32 4
  store i16 %5, i16* %6, align 2
  %7 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 11, i32 0, i32 0, i32 5
  %8 = bitcast i32* %7 to i64*
  store i64 %2, i64* %8, align 8
  %9 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 6, i32 1
  %10 = bitcast double* %9 to i64*
  %11 = load i64, i64* %10, align 8
  %12 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 7, i32 1
  %13 = bitcast double* %12 to i64*
  store i64 %11, i64* %13, align 8
  %14 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 5, i32 1
  %15 = bitcast double* %14 to i64*
  %16 = load i64, i64* %15, align 8
  store i64 %16, i64* %10, align 8
  %17 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 4, i32 1
  %18 = bitcast double* %17 to i64*
  %19 = load i64, i64* %18, align 8
  store i64 %19, i64* %15, align 8
  %20 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 3, i32 1
  %21 = bitcast double* %20 to i64*
  %22 = load i64, i64* %21, align 8
  store i64 %22, i64* %18, align 8
  %23 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 2, i32 1
  %24 = bitcast double* %23 to i64*
  %25 = load i64, i64* %24, align 8
  store i64 %25, i64* %21, align 8
  %26 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 1, i32 1
  %27 = bitcast double* %26 to i64*
  %28 = load i64, i64* %27, align 8
  store i64 %28, i64* %24, align 8
  %29 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 0, i32 1
  %30 = bitcast double* %29 to i64*
  %31 = load i64, i64* %30, align 8
  store i64 %31, i64* %27, align 8
  store double 0x3FD34413509F79FF, double* %29, align 8
  %32 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 11, i32 0, i32 0, i32 1, i32 0
  %33 = load i16, i16* %32, align 2
  %34 = add i16 %33, 14336
  %35 = and i16 %34, 14336
  %36 = and i16 %33, -14337
  %37 = or i16 %35, %36
  store i16 %37, i16* %32, align 2
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline norecurse nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L8DoFLDL2TEP6MemoryR5State2InImES4_ItE(%struct.Memory* readnone returned, %struct.State* nocapture dereferenceable(3376), i64, i64)  {
  %5 = trunc i64 %3 to i16
  %6 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 11, i32 0, i32 0, i32 4
  store i16 %5, i16* %6, align 2
  %7 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 11, i32 0, i32 0, i32 5
  %8 = bitcast i32* %7 to i64*
  store i64 %2, i64* %8, align 8
  %9 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 6, i32 1
  %10 = bitcast double* %9 to i64*
  %11 = load i64, i64* %10, align 8
  %12 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 7, i32 1
  %13 = bitcast double* %12 to i64*
  store i64 %11, i64* %13, align 8
  %14 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 5, i32 1
  %15 = bitcast double* %14 to i64*
  %16 = load i64, i64* %15, align 8
  store i64 %16, i64* %10, align 8
  %17 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 4, i32 1
  %18 = bitcast double* %17 to i64*
  %19 = load i64, i64* %18, align 8
  store i64 %19, i64* %15, align 8
  %20 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 3, i32 1
  %21 = bitcast double* %20 to i64*
  %22 = load i64, i64* %21, align 8
  store i64 %22, i64* %18, align 8
  %23 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 2, i32 1
  %24 = bitcast double* %23 to i64*
  %25 = load i64, i64* %24, align 8
  store i64 %25, i64* %21, align 8
  %26 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 1, i32 1
  %27 = bitcast double* %26 to i64*
  %28 = load i64, i64* %27, align 8
  store i64 %28, i64* %24, align 8
  %29 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 0, i32 1
  %30 = bitcast double* %29 to i64*
  %31 = load i64, i64* %30, align 8
  store i64 %31, i64* %27, align 8
  store double 0x400A934F0979A371, double* %29, align 8
  %32 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 11, i32 0, i32 0, i32 1, i32 0
  %33 = load i16, i16* %32, align 2
  %34 = add i16 %33, 14336
  %35 = and i16 %34, 14336
  %36 = and i16 %33, -14337
  %37 = or i16 %35, %36
  store i16 %37, i16* %32, align 2
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline norecurse nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L8DoFLDL2EEP6MemoryR5State2InImES4_ItE(%struct.Memory* readnone returned, %struct.State* nocapture dereferenceable(3376), i64, i64)  {
  %5 = trunc i64 %3 to i16
  %6 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 11, i32 0, i32 0, i32 4
  store i16 %5, i16* %6, align 2
  %7 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 11, i32 0, i32 0, i32 5
  %8 = bitcast i32* %7 to i64*
  store i64 %2, i64* %8, align 8
  %9 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 6, i32 1
  %10 = bitcast double* %9 to i64*
  %11 = load i64, i64* %10, align 8
  %12 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 7, i32 1
  %13 = bitcast double* %12 to i64*
  store i64 %11, i64* %13, align 8
  %14 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 5, i32 1
  %15 = bitcast double* %14 to i64*
  %16 = load i64, i64* %15, align 8
  store i64 %16, i64* %10, align 8
  %17 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 4, i32 1
  %18 = bitcast double* %17 to i64*
  %19 = load i64, i64* %18, align 8
  store i64 %19, i64* %15, align 8
  %20 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 3, i32 1
  %21 = bitcast double* %20 to i64*
  %22 = load i64, i64* %21, align 8
  store i64 %22, i64* %18, align 8
  %23 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 2, i32 1
  %24 = bitcast double* %23 to i64*
  %25 = load i64, i64* %24, align 8
  store i64 %25, i64* %21, align 8
  %26 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 1, i32 1
  %27 = bitcast double* %26 to i64*
  %28 = load i64, i64* %27, align 8
  store i64 %28, i64* %24, align 8
  %29 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 0, i32 1
  %30 = bitcast double* %29 to i64*
  %31 = load i64, i64* %30, align 8
  store i64 %31, i64* %27, align 8
  store double 0x3FF71547652B82FE, double* %29, align 8
  %32 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 11, i32 0, i32 0, i32 1, i32 0
  %33 = load i16, i16* %32, align 2
  %34 = add i16 %33, 14336
  %35 = and i16 %34, 14336
  %36 = and i16 %33, -14337
  %37 = or i16 %35, %36
  store i16 %37, i16* %32, align 2
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline norecurse nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L7DoFLDPIEP6MemoryR5State2InImES4_ItE(%struct.Memory* readnone returned, %struct.State* nocapture dereferenceable(3376), i64, i64)  {
  %5 = trunc i64 %3 to i16
  %6 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 11, i32 0, i32 0, i32 4
  store i16 %5, i16* %6, align 2
  %7 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 11, i32 0, i32 0, i32 5
  %8 = bitcast i32* %7 to i64*
  store i64 %2, i64* %8, align 8
  %9 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 6, i32 1
  %10 = bitcast double* %9 to i64*
  %11 = load i64, i64* %10, align 8
  %12 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 7, i32 1
  %13 = bitcast double* %12 to i64*
  store i64 %11, i64* %13, align 8
  %14 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 5, i32 1
  %15 = bitcast double* %14 to i64*
  %16 = load i64, i64* %15, align 8
  store i64 %16, i64* %10, align 8
  %17 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 4, i32 1
  %18 = bitcast double* %17 to i64*
  %19 = load i64, i64* %18, align 8
  store i64 %19, i64* %15, align 8
  %20 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 3, i32 1
  %21 = bitcast double* %20 to i64*
  %22 = load i64, i64* %21, align 8
  store i64 %22, i64* %18, align 8
  %23 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 2, i32 1
  %24 = bitcast double* %23 to i64*
  %25 = load i64, i64* %24, align 8
  store i64 %25, i64* %21, align 8
  %26 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 1, i32 1
  %27 = bitcast double* %26 to i64*
  %28 = load i64, i64* %27, align 8
  store i64 %28, i64* %24, align 8
  %29 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 0, i32 1
  %30 = bitcast double* %29 to i64*
  %31 = load i64, i64* %30, align 8
  store i64 %31, i64* %27, align 8
  store double 0x400921FB54442D18, double* %29, align 8
  %32 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 11, i32 0, i32 0, i32 1, i32 0
  %33 = load i16, i16* %32, align 2
  %34 = add i16 %33, 14336
  %35 = and i16 %34, 14336
  %36 = and i16 %33, -14337
  %37 = or i16 %35, %36
  store i16 %37, i16* %32, align 2
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline norecurse nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L7FPU_NOPEP6MemoryR5State2InImES4_ItE(%struct.Memory* readnone returned, %struct.State* nocapture dereferenceable(3376), i64, i64)  {
  %5 = trunc i64 %3 to i16
  %6 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 11, i32 0, i32 0, i32 4
  store i16 %5, i16* %6, align 2
  %7 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 11, i32 0, i32 0, i32 5
  %8 = bitcast i32* %7 to i64*
  store i64 %2, i64* %8, align 8
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L7DoFWAITEP6MemoryR5State(%struct.Memory* readnone returned, %struct.State* nocapture readnone dereferenceable(3376))  {
  %3 = tail call i32 @fetestexcept(i32 61) 
  %4 = tail call i32 @feraiseexcept(i32 %3) 
  ret %struct.Memory* %0
}

; Function Attrs: nounwind
declare i32 @fetestexcept(i32) local_unnamed_addr 

; Function Attrs: nounwind
declare i32 @feraiseexcept(i32) local_unnamed_addr 

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L8DoFNCLEXEP6MemoryR5State(%struct.Memory* readnone returned, %struct.State* nocapture readnone dereferenceable(3376))  {
  %3 = tail call i32 @feclearexcept(i32 61) 
  ret %struct.Memory* %0
}

; Function Attrs: nounwind
declare i32 @feclearexcept(i32) local_unnamed_addr 

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L6DoFABSEP6MemoryR5State2InImES4_ItE(%struct.Memory* readnone returned, %struct.State* nocapture dereferenceable(3376), i64, i64)  {
  %5 = trunc i64 %3 to i16
  %6 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 11, i32 0, i32 0, i32 4
  store i16 %5, i16* %6, align 2
  %7 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 11, i32 0, i32 0, i32 5
  %8 = bitcast i32* %7 to i64*
  store i64 %2, i64* %8, align 8
  %9 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 0, i32 1
  %10 = load double, double* %9, align 8
  %11 = fcmp ueq double %10, 0.000000e+00
  br i1 %11, label %12, label %14

; <label>:12:                                     ; preds = %4
  %13 = tail call double @llvm.fabs.f64(double %10) 
  br label %19

; <label>:14:                                     ; preds = %4
  %15 = tail call double @llvm.fabs.f64(double %10) 
  %16 = fcmp oeq double %15, 0x7FF0000000000000
  br i1 %16, label %19, label %17

; <label>:17:                                     ; preds = %14
  %18 = fcmp olt double %15, 0x10000000000000
  br label %19

; <label>:19:                                     ; preds = %17, %14, %12
  %20 = phi double [ %13, %12 ], [ %15, %14 ], [ %15, %17 ]
  %21 = phi i1 [ false, %12 ], [ false, %14 ], [ %18, %17 ]
  %22 = zext i1 %21 to i8
  %23 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 17
  store i8 %22, i8* %23, align 1
  %24 = tail call i32 @__remill_fpu_exception_test_and_clear(i32 0, i32 61) 
  tail call void asm sideeffect "", "~{memory},~{dirflag},~{fpsr},~{flags}"() 
  tail call void asm sideeffect "", "~{memory},~{dirflag},~{fpsr},~{flags}"() 
  %25 = tail call i32 @__remill_fpu_exception_test_and_clear(i32 61, i32 %24) 
  %26 = lshr i32 %25, 5
  %27 = and i32 %26, 1
  %28 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 9
  %29 = load i8, i8* %28, align 1
  %30 = zext i8 %29 to i32
  %31 = or i32 %30, %27
  %32 = trunc i32 %31 to i8
  store i8 %32, i8* %28, align 1
  %33 = lshr i32 %25, 3
  %34 = and i32 %33, 1
  %35 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 13
  %36 = load i8, i8* %35, align 1
  %37 = zext i8 %36 to i32
  %38 = or i32 %37, %34
  %39 = trunc i32 %38 to i8
  store i8 %39, i8* %35, align 1
  %40 = lshr i32 %25, 4
  %41 = and i32 %40, 1
  %42 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 11
  %43 = load i8, i8* %42, align 1
  %44 = zext i8 %43 to i32
  %45 = or i32 %44, %41
  %46 = trunc i32 %45 to i8
  store i8 %46, i8* %42, align 1
  %47 = and i32 %25, 1
  %48 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 19
  %49 = load i8, i8* %48, align 1
  %50 = zext i8 %49 to i32
  %51 = or i32 %50, %47
  %52 = trunc i32 %51 to i8
  store i8 %52, i8* %48, align 1
  %53 = lshr i32 %25, 2
  %54 = and i32 %53, 1
  %55 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 15
  %56 = load i8, i8* %55, align 1
  %57 = zext i8 %56 to i32
  %58 = or i32 %57, %54
  %59 = trunc i32 %58 to i8
  store i8 %59, i8* %55, align 1
  store double %20, double* %9, align 8
  ret %struct.Memory* %0
}

; Function Attrs: nounwind readnone
declare i32 @__remill_fpu_exception_test_and_clear(i32, i32) 

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L6DoFCHSEP6MemoryR5State2InImES4_ItE(%struct.Memory* readnone returned, %struct.State* nocapture dereferenceable(3376), i64, i64)  {
  %5 = trunc i64 %3 to i16
  %6 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 11, i32 0, i32 0, i32 4
  store i16 %5, i16* %6, align 2
  %7 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 11, i32 0, i32 0, i32 5
  %8 = bitcast i32* %7 to i64*
  store i64 %2, i64* %8, align 8
  %9 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 0, i32 1
  %10 = load double, double* %9, align 8
  %11 = fcmp ueq double %10, 0.000000e+00
  br i1 %11, label %17, label %12

; <label>:12:                                     ; preds = %4
  %13 = tail call double @llvm.fabs.f64(double %10) 
  %14 = fcmp oeq double %13, 0x7FF0000000000000
  br i1 %14, label %17, label %15

; <label>:15:                                     ; preds = %12
  %16 = fcmp olt double %13, 0x10000000000000
  br label %17

; <label>:17:                                     ; preds = %15, %12, %4
  %18 = phi i1 [ false, %4 ], [ false, %12 ], [ %16, %15 ]
  %19 = zext i1 %18 to i8
  %20 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 17
  store i8 %19, i8* %20, align 1
  %21 = tail call i32 @__remill_fpu_exception_test_and_clear(i32 0, i32 61) 
  tail call void asm sideeffect "", "~{memory},~{dirflag},~{fpsr},~{flags}"() 
  %22 = fsub double -0.000000e+00, %10
  tail call void asm sideeffect "", "~{memory},~{dirflag},~{fpsr},~{flags}"() 
  %23 = tail call i32 @__remill_fpu_exception_test_and_clear(i32 61, i32 %21) 
  %24 = lshr i32 %23, 5
  %25 = and i32 %24, 1
  %26 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 9
  %27 = load i8, i8* %26, align 1
  %28 = zext i8 %27 to i32
  %29 = or i32 %28, %25
  %30 = trunc i32 %29 to i8
  store i8 %30, i8* %26, align 1
  %31 = lshr i32 %23, 3
  %32 = and i32 %31, 1
  %33 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 13
  %34 = load i8, i8* %33, align 1
  %35 = zext i8 %34 to i32
  %36 = or i32 %35, %32
  %37 = trunc i32 %36 to i8
  store i8 %37, i8* %33, align 1
  %38 = lshr i32 %23, 4
  %39 = and i32 %38, 1
  %40 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 11
  %41 = load i8, i8* %40, align 1
  %42 = zext i8 %41 to i32
  %43 = or i32 %42, %39
  %44 = trunc i32 %43 to i8
  store i8 %44, i8* %40, align 1
  %45 = and i32 %23, 1
  %46 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 19
  %47 = load i8, i8* %46, align 1
  %48 = zext i8 %47 to i32
  %49 = or i32 %48, %45
  %50 = trunc i32 %49 to i8
  store i8 %50, i8* %46, align 1
  %51 = lshr i32 %23, 2
  %52 = and i32 %51, 1
  %53 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 15
  %54 = load i8, i8* %53, align 1
  %55 = zext i8 %54 to i32
  %56 = or i32 %55, %52
  %57 = trunc i32 %56 to i8
  store i8 %57, i8* %53, align 1
  store double %22, double* %9, align 8
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L6DoFCOSEP6MemoryR5State2InImES4_ItE(%struct.Memory* readnone returned, %struct.State* nocapture dereferenceable(3376), i64, i64)  {
  %5 = trunc i64 %3 to i16
  %6 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 11, i32 0, i32 0, i32 4
  store i16 %5, i16* %6, align 2
  %7 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 11, i32 0, i32 0, i32 5
  %8 = bitcast i32* %7 to i64*
  store i64 %2, i64* %8, align 8
  %9 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 0, i32 1
  %10 = load double, double* %9, align 8
  %11 = bitcast double %10 to i64
  %12 = and i64 %11, 9221120237041090560
  %13 = icmp eq i64 %12, 9218868437227405312
  %14 = and i64 %11, 2251799813685247
  %15 = icmp ne i64 %14, 0
  %16 = and i1 %13, %15
  %17 = fcmp ueq double %10, 0.000000e+00
  br i1 %17, label %31, label %18

; <label>:18:                                     ; preds = %4
  %19 = tail call double @llvm.fabs.f64(double %10) 
  %20 = fcmp oeq double %19, 0x7FF0000000000000
  %21 = or i1 %20, %16
  %22 = zext i1 %21 to i8
  %23 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 19
  %24 = load i8, i8* %23, align 1
  %25 = or i8 %24, %22
  store i8 %25, i8* %23, align 1
  %26 = fcmp olt double %19, 0x10000000000000
  %27 = fcmp une double %19, 0x7FF0000000000000
  %28 = and i1 %26, %27
  %29 = zext i1 %28 to i8
  %30 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 17
  store i8 %29, i8* %30, align 1
  br i1 %20, label %38, label %37

; <label>:31:                                     ; preds = %4
  %32 = zext i1 %16 to i8
  %33 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 19
  %34 = load i8, i8* %33, align 1
  %35 = or i8 %34, %32
  store i8 %35, i8* %33, align 1
  %36 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 17
  store i8 0, i8* %36, align 1
  br label %38

; <label>:37:                                     ; preds = %18
  br label %38

; <label>:38:                                     ; preds = %37, %31, %18
  %39 = phi i8* [ %36, %31 ], [ %30, %18 ], [ %30, %37 ]
  %40 = phi i8* [ %33, %31 ], [ %23, %18 ], [ %23, %37 ]
  %41 = phi i1 [ false, %31 ], [ false, %18 ], [ %26, %37 ]
  %42 = zext i1 %41 to i8
  store i8 %42, i8* %39, align 1
  %43 = tail call i32 @__remill_fpu_exception_test_and_clear(i32 0, i32 61) 
  tail call void asm sideeffect "", "~{memory},~{dirflag},~{fpsr},~{flags}"() 
  %44 = tail call double @cos(double %10) 
  tail call void asm sideeffect "", "~{memory},~{dirflag},~{fpsr},~{flags}"() 
  %45 = tail call i32 @__remill_fpu_exception_test_and_clear(i32 61, i32 %43) 
  %46 = lshr i32 %45, 5
  %47 = and i32 %46, 1
  %48 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 9
  %49 = load i8, i8* %48, align 1
  %50 = zext i8 %49 to i32
  %51 = or i32 %50, %47
  %52 = trunc i32 %51 to i8
  store i8 %52, i8* %48, align 1
  %53 = lshr i32 %45, 3
  %54 = and i32 %53, 1
  %55 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 13
  %56 = load i8, i8* %55, align 1
  %57 = zext i8 %56 to i32
  %58 = or i32 %57, %54
  %59 = trunc i32 %58 to i8
  store i8 %59, i8* %55, align 1
  %60 = lshr i32 %45, 4
  %61 = and i32 %60, 1
  %62 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 11
  %63 = load i8, i8* %62, align 1
  %64 = zext i8 %63 to i32
  %65 = or i32 %64, %61
  %66 = trunc i32 %65 to i8
  store i8 %66, i8* %62, align 1
  %67 = and i32 %45, 1
  %68 = load i8, i8* %40, align 1
  %69 = zext i8 %68 to i32
  %70 = or i32 %69, %67
  %71 = trunc i32 %70 to i8
  store i8 %71, i8* %40, align 1
  %72 = lshr i32 %45, 2
  %73 = and i32 %72, 1
  %74 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 15
  %75 = load i8, i8* %74, align 1
  %76 = zext i8 %75 to i32
  %77 = or i32 %76, %73
  %78 = trunc i32 %77 to i8
  store i8 %78, i8* %74, align 1
  %79 = fcmp uno double %44, 0.000000e+00
  br i1 %79, label %85, label %80

; <label>:80:                                     ; preds = %38
  %81 = bitcast double %44 to i64
  %82 = and i64 %81, 255
  %83 = icmp ne i64 %82, 0
  %84 = zext i1 %83 to i8
  store i8 %84, i8* %48, align 1
  br label %85

; <label>:85:                                     ; preds = %80, %38
  store double %44, double* %9, align 8
  ret %struct.Memory* %0
}

; Function Attrs: nounwind readnone
declare double @cos(double) local_unnamed_addr 

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L6DoFSINEP6MemoryR5State2InImES4_ItE(%struct.Memory* readnone returned, %struct.State* nocapture dereferenceable(3376), i64, i64)  {
  %5 = trunc i64 %3 to i16
  %6 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 11, i32 0, i32 0, i32 4
  store i16 %5, i16* %6, align 2
  %7 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 11, i32 0, i32 0, i32 5
  %8 = bitcast i32* %7 to i64*
  store i64 %2, i64* %8, align 8
  %9 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 0, i32 1
  %10 = load double, double* %9, align 8
  %11 = bitcast double %10 to i64
  %12 = and i64 %11, 9221120237041090560
  %13 = icmp eq i64 %12, 9218868437227405312
  %14 = and i64 %11, 2251799813685247
  %15 = icmp ne i64 %14, 0
  %16 = and i1 %13, %15
  %17 = fcmp ueq double %10, 0.000000e+00
  br i1 %17, label %31, label %18

; <label>:18:                                     ; preds = %4
  %19 = tail call double @llvm.fabs.f64(double %10) 
  %20 = fcmp oeq double %19, 0x7FF0000000000000
  %21 = or i1 %20, %16
  %22 = zext i1 %21 to i8
  %23 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 19
  %24 = load i8, i8* %23, align 1
  %25 = or i8 %24, %22
  store i8 %25, i8* %23, align 1
  %26 = fcmp olt double %19, 0x10000000000000
  %27 = fcmp une double %19, 0x7FF0000000000000
  %28 = and i1 %26, %27
  %29 = zext i1 %28 to i8
  %30 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 17
  store i8 %29, i8* %30, align 1
  br i1 %20, label %38, label %37

; <label>:31:                                     ; preds = %4
  %32 = zext i1 %16 to i8
  %33 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 19
  %34 = load i8, i8* %33, align 1
  %35 = or i8 %34, %32
  store i8 %35, i8* %33, align 1
  %36 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 17
  store i8 0, i8* %36, align 1
  br label %38

; <label>:37:                                     ; preds = %18
  br label %38

; <label>:38:                                     ; preds = %37, %31, %18
  %39 = phi i8* [ %36, %31 ], [ %30, %18 ], [ %30, %37 ]
  %40 = phi i8* [ %33, %31 ], [ %23, %18 ], [ %23, %37 ]
  %41 = phi i1 [ false, %31 ], [ false, %18 ], [ %26, %37 ]
  %42 = zext i1 %41 to i8
  store i8 %42, i8* %39, align 1
  %43 = tail call i32 @__remill_fpu_exception_test_and_clear(i32 0, i32 61) 
  tail call void asm sideeffect "", "~{memory},~{dirflag},~{fpsr},~{flags}"() 
  %44 = tail call double @sin(double %10) 
  tail call void asm sideeffect "", "~{memory},~{dirflag},~{fpsr},~{flags}"() 
  %45 = tail call i32 @__remill_fpu_exception_test_and_clear(i32 61, i32 %43) 
  %46 = lshr i32 %45, 5
  %47 = and i32 %46, 1
  %48 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 9
  %49 = load i8, i8* %48, align 1
  %50 = zext i8 %49 to i32
  %51 = or i32 %50, %47
  %52 = trunc i32 %51 to i8
  store i8 %52, i8* %48, align 1
  %53 = lshr i32 %45, 3
  %54 = and i32 %53, 1
  %55 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 13
  %56 = load i8, i8* %55, align 1
  %57 = zext i8 %56 to i32
  %58 = or i32 %57, %54
  %59 = trunc i32 %58 to i8
  store i8 %59, i8* %55, align 1
  %60 = lshr i32 %45, 4
  %61 = and i32 %60, 1
  %62 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 11
  %63 = load i8, i8* %62, align 1
  %64 = zext i8 %63 to i32
  %65 = or i32 %64, %61
  %66 = trunc i32 %65 to i8
  store i8 %66, i8* %62, align 1
  %67 = and i32 %45, 1
  %68 = load i8, i8* %40, align 1
  %69 = zext i8 %68 to i32
  %70 = or i32 %69, %67
  %71 = trunc i32 %70 to i8
  store i8 %71, i8* %40, align 1
  %72 = lshr i32 %45, 2
  %73 = and i32 %72, 1
  %74 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 15
  %75 = load i8, i8* %74, align 1
  %76 = zext i8 %75 to i32
  %77 = or i32 %76, %73
  %78 = trunc i32 %77 to i8
  store i8 %78, i8* %74, align 1
  %79 = fcmp uno double %44, 0.000000e+00
  br i1 %79, label %85, label %80

; <label>:80:                                     ; preds = %38
  %81 = bitcast double %44 to i64
  %82 = and i64 %81, 255
  %83 = icmp ne i64 %82, 0
  %84 = zext i1 %83 to i8
  store i8 %84, i8* %48, align 1
  br label %85

; <label>:85:                                     ; preds = %80, %38
  store double %44, double* %9, align 8
  ret %struct.Memory* %0
}

; Function Attrs: nounwind readnone
declare double @sin(double) local_unnamed_addr 

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L7DoFPTANEP6MemoryR5State2InImES4_ItE(%struct.Memory* readnone returned, %struct.State* nocapture dereferenceable(3376), i64, i64)  {
  %5 = trunc i64 %3 to i16
  %6 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 11, i32 0, i32 0, i32 4
  store i16 %5, i16* %6, align 2
  %7 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 11, i32 0, i32 0, i32 5
  %8 = bitcast i32* %7 to i64*
  store i64 %2, i64* %8, align 8
  %9 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 0, i32 1
  %10 = load double, double* %9, align 8
  %11 = bitcast double %10 to i64
  %12 = and i64 %11, 9221120237041090560
  %13 = icmp eq i64 %12, 9218868437227405312
  %14 = and i64 %11, 2251799813685247
  %15 = icmp ne i64 %14, 0
  %16 = and i1 %13, %15
  %17 = fcmp ueq double %10, 0.000000e+00
  br i1 %17, label %31, label %18

; <label>:18:                                     ; preds = %4
  %19 = tail call double @llvm.fabs.f64(double %10) 
  %20 = fcmp oeq double %19, 0x7FF0000000000000
  %21 = or i1 %20, %16
  %22 = zext i1 %21 to i8
  %23 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 19
  %24 = load i8, i8* %23, align 1
  %25 = or i8 %24, %22
  store i8 %25, i8* %23, align 1
  %26 = fcmp olt double %19, 0x10000000000000
  %27 = fcmp une double %19, 0x7FF0000000000000
  %28 = and i1 %26, %27
  %29 = zext i1 %28 to i8
  %30 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 17
  store i8 %29, i8* %30, align 1
  br i1 %20, label %38, label %37

; <label>:31:                                     ; preds = %4
  %32 = zext i1 %16 to i8
  %33 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 19
  %34 = load i8, i8* %33, align 1
  %35 = or i8 %34, %32
  store i8 %35, i8* %33, align 1
  %36 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 17
  store i8 0, i8* %36, align 1
  br label %38

; <label>:37:                                     ; preds = %18
  br label %38

; <label>:38:                                     ; preds = %37, %31, %18
  %39 = phi i8* [ %36, %31 ], [ %30, %18 ], [ %30, %37 ]
  %40 = phi i8* [ %33, %31 ], [ %23, %18 ], [ %23, %37 ]
  %41 = phi i1 [ false, %31 ], [ false, %18 ], [ %26, %37 ]
  %42 = zext i1 %41 to i8
  store i8 %42, i8* %39, align 1
  %43 = tail call i32 @__remill_fpu_exception_test_and_clear(i32 0, i32 61) 
  tail call void asm sideeffect "", "~{memory},~{dirflag},~{fpsr},~{flags}"() 
  %44 = tail call double @tan(double %10) 
  tail call void asm sideeffect "", "~{memory},~{dirflag},~{fpsr},~{flags}"() 
  %45 = tail call i32 @__remill_fpu_exception_test_and_clear(i32 61, i32 %43) 
  %46 = lshr i32 %45, 5
  %47 = and i32 %46, 1
  %48 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 9
  %49 = load i8, i8* %48, align 1
  %50 = zext i8 %49 to i32
  %51 = or i32 %50, %47
  %52 = trunc i32 %51 to i8
  store i8 %52, i8* %48, align 1
  %53 = lshr i32 %45, 3
  %54 = and i32 %53, 1
  %55 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 13
  %56 = load i8, i8* %55, align 1
  %57 = zext i8 %56 to i32
  %58 = or i32 %57, %54
  %59 = trunc i32 %58 to i8
  store i8 %59, i8* %55, align 1
  %60 = lshr i32 %45, 4
  %61 = and i32 %60, 1
  %62 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 11
  %63 = load i8, i8* %62, align 1
  %64 = zext i8 %63 to i32
  %65 = or i32 %64, %61
  %66 = trunc i32 %65 to i8
  store i8 %66, i8* %62, align 1
  %67 = and i32 %45, 1
  %68 = load i8, i8* %40, align 1
  %69 = zext i8 %68 to i32
  %70 = or i32 %69, %67
  %71 = trunc i32 %70 to i8
  store i8 %71, i8* %40, align 1
  %72 = lshr i32 %45, 2
  %73 = and i32 %72, 1
  %74 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 15
  %75 = load i8, i8* %74, align 1
  %76 = zext i8 %75 to i32
  %77 = or i32 %76, %73
  %78 = trunc i32 %77 to i8
  store i8 %78, i8* %74, align 1
  %79 = fcmp uno double %44, 0.000000e+00
  br i1 %79, label %85, label %80

; <label>:80:                                     ; preds = %38
  %81 = bitcast double %44 to i64
  %82 = and i64 %81, 255
  %83 = icmp ne i64 %82, 0
  %84 = zext i1 %83 to i8
  store i8 %84, i8* %48, align 1
  br label %85

; <label>:85:                                     ; preds = %80, %38
  %86 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 6, i32 1
  %87 = bitcast double* %86 to i64*
  %88 = load i64, i64* %87, align 8
  %89 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 7, i32 1
  %90 = bitcast double* %89 to i64*
  store i64 %88, i64* %90, align 8
  %91 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 5, i32 1
  %92 = bitcast double* %91 to i64*
  %93 = load i64, i64* %92, align 8
  store i64 %93, i64* %87, align 8
  %94 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 4, i32 1
  %95 = bitcast double* %94 to i64*
  %96 = load i64, i64* %95, align 8
  store i64 %96, i64* %92, align 8
  %97 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 3, i32 1
  %98 = bitcast double* %97 to i64*
  %99 = load i64, i64* %98, align 8
  store i64 %99, i64* %95, align 8
  %100 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 2, i32 1
  %101 = bitcast double* %100 to i64*
  %102 = load i64, i64* %101, align 8
  store i64 %102, i64* %98, align 8
  %103 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 1, i32 1
  %104 = bitcast double* %103 to i64*
  %105 = load i64, i64* %104, align 8
  store i64 %105, i64* %101, align 8
  store double %44, double* %103, align 8
  store double 1.000000e+00, double* %9, align 8
  %106 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 11, i32 0, i32 0, i32 1, i32 0
  %107 = load i16, i16* %106, align 2
  %108 = add i16 %107, 14336
  %109 = and i16 %108, 14336
  %110 = and i16 %107, -14337
  %111 = or i16 %109, %110
  store i16 %111, i16* %106, align 2
  ret %struct.Memory* %0
}

; Function Attrs: nounwind readnone
declare double @tan(double) local_unnamed_addr 

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L8DoFPATANEP6MemoryR5State2InImES4_ItE(%struct.Memory* readnone returned, %struct.State* nocapture dereferenceable(3376), i64, i64)  {
  %5 = trunc i64 %3 to i16
  %6 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 11, i32 0, i32 0, i32 4
  store i16 %5, i16* %6, align 2
  %7 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 11, i32 0, i32 0, i32 5
  %8 = bitcast i32* %7 to i64*
  store i64 %2, i64* %8, align 8
  %9 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 0, i32 1
  %10 = load double, double* %9, align 8
  %11 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 1, i32 1
  %12 = load double, double* %11, align 8
  %13 = fcmp ueq double %12, 0.000000e+00
  br i1 %13, label %19, label %14

; <label>:14:                                     ; preds = %4
  %15 = tail call double @llvm.fabs.f64(double %12) 
  %16 = fcmp oeq double %15, 0x7FF0000000000000
  br i1 %16, label %19, label %17

; <label>:17:                                     ; preds = %14
  %18 = fcmp olt double %15, 0x10000000000000
  br label %19

; <label>:19:                                     ; preds = %17, %14, %4
  %20 = phi i1 [ false, %4 ], [ false, %14 ], [ %18, %17 ]
  %21 = fcmp ueq double %10, 0.000000e+00
  br i1 %21, label %27, label %22

; <label>:22:                                     ; preds = %19
  %23 = tail call double @llvm.fabs.f64(double %10) 
  %24 = fcmp oeq double %23, 0x7FF0000000000000
  br i1 %24, label %27, label %25

; <label>:25:                                     ; preds = %22
  %26 = fcmp olt double %23, 0x10000000000000
  br label %27

; <label>:27:                                     ; preds = %25, %22, %19
  %28 = phi i1 [ false, %19 ], [ false, %22 ], [ %26, %25 ]
  %29 = or i1 %20, %28
  %30 = zext i1 %29 to i8
  %31 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 17
  store i8 %30, i8* %31, align 1
  %32 = tail call i32 @__remill_fpu_exception_test_and_clear(i32 0, i32 61) 
  tail call void asm sideeffect "", "~{memory},~{dirflag},~{fpsr},~{flags}"() 
  %33 = fdiv double %12, %10
  tail call void asm sideeffect "", "~{memory},~{dirflag},~{fpsr},~{flags}"() 
  %34 = tail call i32 @__remill_fpu_exception_test_and_clear(i32 61, i32 %32) 
  %35 = lshr i32 %34, 5
  %36 = and i32 %35, 1
  %37 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 9
  %38 = load i8, i8* %37, align 1
  %39 = zext i8 %38 to i32
  %40 = or i32 %39, %36
  %41 = trunc i32 %40 to i8
  store i8 %41, i8* %37, align 1
  %42 = lshr i32 %34, 3
  %43 = and i32 %42, 1
  %44 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 13
  %45 = load i8, i8* %44, align 1
  %46 = zext i8 %45 to i32
  %47 = or i32 %46, %43
  %48 = trunc i32 %47 to i8
  store i8 %48, i8* %44, align 1
  %49 = lshr i32 %34, 4
  %50 = and i32 %49, 1
  %51 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 11
  %52 = load i8, i8* %51, align 1
  %53 = zext i8 %52 to i32
  %54 = or i32 %53, %50
  %55 = trunc i32 %54 to i8
  store i8 %55, i8* %51, align 1
  %56 = and i32 %34, 1
  %57 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 19
  %58 = load i8, i8* %57, align 1
  %59 = zext i8 %58 to i32
  %60 = or i32 %59, %56
  %61 = trunc i32 %60 to i8
  store i8 %61, i8* %57, align 1
  %62 = lshr i32 %34, 2
  %63 = and i32 %62, 1
  %64 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 15
  %65 = load i8, i8* %64, align 1
  %66 = zext i8 %65 to i32
  %67 = or i32 %66, %63
  %68 = trunc i32 %67 to i8
  store i8 %68, i8* %64, align 1
  %69 = icmp eq i8 %61, 0
  br i1 %69, label %70, label %93

; <label>:70:                                     ; preds = %27
  %71 = bitcast double %33 to i64
  %72 = and i64 %71, 9221120237041090560
  %73 = icmp eq i64 %72, 9218868437227405312
  %74 = and i64 %71, 2251799813685247
  %75 = icmp ne i64 %74, 0
  %76 = and i1 %73, %75
  %77 = fcmp ueq double %33, 0.000000e+00
  br i1 %77, label %78, label %80

; <label>:78:                                     ; preds = %70
  %79 = zext i1 %76 to i8
  store i8 %79, i8* %57, align 1
  br label %87

; <label>:80:                                     ; preds = %70
  %81 = tail call double @llvm.fabs.f64(double %33) 
  %82 = fcmp oeq double %81, 0x7FF0000000000000
  %83 = or i1 %82, %76
  %84 = zext i1 %83 to i8
  store i8 %84, i8* %57, align 1
  br i1 %82, label %87, label %85

; <label>:85:                                     ; preds = %80
  %86 = fcmp olt double %81, 0x10000000000000
  br label %87

; <label>:87:                                     ; preds = %85, %80, %78
  %88 = phi i1 [ false, %80 ], [ %86, %85 ], [ false, %78 ]
  %89 = zext i1 %88 to i8
  store i8 %89, i8* %31, align 1
  %90 = and i64 %71, 255
  %91 = icmp ne i64 %90, 0
  %92 = zext i1 %91 to i8
  store i8 %92, i8* %37, align 1
  br label %93

; <label>:93:                                     ; preds = %87, %27
  %94 = tail call double @atan(double %33) 
  %95 = bitcast double* %9 to i64*
  %96 = load i64, i64* %95, align 8
  %97 = bitcast double* %11 to i64*
  store double %94, double* %9, align 8
  %98 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 2, i32 1
  %99 = bitcast double* %98 to i64*
  %100 = load i64, i64* %99, align 8
  store i64 %100, i64* %97, align 8
  %101 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 3, i32 1
  %102 = bitcast double* %101 to i64*
  %103 = load i64, i64* %102, align 8
  store i64 %103, i64* %99, align 8
  %104 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 4, i32 1
  %105 = bitcast double* %104 to i64*
  %106 = load i64, i64* %105, align 8
  store i64 %106, i64* %102, align 8
  %107 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 5, i32 1
  %108 = bitcast double* %107 to i64*
  %109 = load i64, i64* %108, align 8
  store i64 %109, i64* %105, align 8
  %110 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 6, i32 1
  %111 = bitcast double* %110 to i64*
  %112 = load i64, i64* %111, align 8
  store i64 %112, i64* %108, align 8
  %113 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 7, i32 1
  %114 = bitcast double* %113 to i64*
  %115 = load i64, i64* %114, align 8
  store i64 %115, i64* %111, align 8
  store i64 %96, i64* %114, align 8
  %116 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 11, i32 0, i32 0, i32 1, i32 0
  %117 = load i16, i16* %116, align 2
  %118 = add i16 %117, 2048
  %119 = and i16 %118, 14336
  %120 = and i16 %117, -14337
  %121 = or i16 %119, %120
  store i16 %121, i16* %116, align 2
  ret %struct.Memory* %0
}

; Function Attrs: nounwind readnone
declare double @atan(double) local_unnamed_addr 

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L7DoFSQRTEP6MemoryR5State2InImES4_ItE(%struct.Memory* readnone returned, %struct.State* nocapture dereferenceable(3376), i64, i64)  {
  %5 = trunc i64 %3 to i16
  %6 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 11, i32 0, i32 0, i32 4
  store i16 %5, i16* %6, align 2
  %7 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 11, i32 0, i32 0, i32 5
  %8 = bitcast i32* %7 to i64*
  store i64 %2, i64* %8, align 8
  %9 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 0, i32 1
  %10 = load double, double* %9, align 8
  %11 = fcmp oeq double %10, 0.000000e+00
  br i1 %11, label %12, label %16

; <label>:12:                                     ; preds = %4
  %13 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 19
  store i8 0, i8* %13, align 1
  %14 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 17
  store i8 0, i8* %14, align 1
  %15 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 9
  br label %88

; <label>:16:                                     ; preds = %4
  %17 = bitcast double %10 to i64
  %18 = and i64 %17, 9221120237041090560
  %19 = icmp eq i64 %18, 9218868437227405312
  %20 = and i64 %17, 2251799813685247
  %21 = icmp ne i64 %20, 0
  %22 = and i1 %19, %21
  %23 = zext i1 %22 to i8
  %24 = lshr i64 %17, 63
  %25 = trunc i64 %24 to i8
  %26 = or i8 %23, %25
  %27 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 19
  %28 = load i8, i8* %27, align 1
  %29 = or i8 %26, %28
  store i8 %29, i8* %27, align 1
  %30 = fcmp ueq double %10, 0.000000e+00
  br i1 %30, label %31, label %33

; <label>:31:                                     ; preds = %16
  %32 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 17
  store i8 0, i8* %32, align 1
  br label %42

; <label>:33:                                     ; preds = %16
  %34 = tail call double @llvm.fabs.f64(double %10) 
  %35 = fcmp olt double %34, 0x10000000000000
  %36 = fcmp une double %34, 0x7FF0000000000000
  %37 = and i1 %35, %36
  %38 = zext i1 %37 to i8
  %39 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 17
  store i8 %38, i8* %39, align 1
  %40 = fcmp oeq double %34, 0x7FF0000000000000
  br i1 %40, label %42, label %41

; <label>:41:                                     ; preds = %33
  br label %42

; <label>:42:                                     ; preds = %41, %33, %31
  %43 = phi i8* [ %39, %33 ], [ %39, %41 ], [ %32, %31 ]
  %44 = phi i1 [ false, %33 ], [ %35, %41 ], [ false, %31 ]
  %45 = zext i1 %44 to i8
  store i8 %45, i8* %43, align 1
  %46 = tail call i32 @__remill_fpu_exception_test_and_clear(i32 0, i32 61) 
  tail call void asm sideeffect "", "~{memory},~{dirflag},~{fpsr},~{flags}"() 
  %47 = tail call double @sqrt(double %10) 
  tail call void asm sideeffect "", "~{memory},~{dirflag},~{fpsr},~{flags}"() 
  %48 = tail call i32 @__remill_fpu_exception_test_and_clear(i32 61, i32 %46) 
  %49 = lshr i32 %48, 5
  %50 = and i32 %49, 1
  %51 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 9
  %52 = load i8, i8* %51, align 1
  %53 = zext i8 %52 to i32
  %54 = or i32 %53, %50
  %55 = trunc i32 %54 to i8
  store i8 %55, i8* %51, align 1
  %56 = lshr i32 %48, 3
  %57 = and i32 %56, 1
  %58 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 13
  %59 = load i8, i8* %58, align 1
  %60 = zext i8 %59 to i32
  %61 = or i32 %60, %57
  %62 = trunc i32 %61 to i8
  store i8 %62, i8* %58, align 1
  %63 = lshr i32 %48, 4
  %64 = and i32 %63, 1
  %65 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 11
  %66 = load i8, i8* %65, align 1
  %67 = zext i8 %66 to i32
  %68 = or i32 %67, %64
  %69 = trunc i32 %68 to i8
  store i8 %69, i8* %65, align 1
  %70 = and i32 %48, 1
  %71 = load i8, i8* %27, align 1
  %72 = zext i8 %71 to i32
  %73 = or i32 %72, %70
  %74 = trunc i32 %73 to i8
  store i8 %74, i8* %27, align 1
  %75 = lshr i32 %48, 2
  %76 = and i32 %75, 1
  %77 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 15
  %78 = load i8, i8* %77, align 1
  %79 = zext i8 %78 to i32
  %80 = or i32 %79, %76
  %81 = trunc i32 %80 to i8
  store i8 %81, i8* %77, align 1
  %82 = fcmp uno double %47, 0.000000e+00
  br i1 %82, label %92, label %83

; <label>:83:                                     ; preds = %42
  %84 = bitcast double %47 to i64
  %85 = and i64 %84, 255
  %86 = icmp ne i64 %85, 0
  %87 = zext i1 %86 to i8
  br label %88

; <label>:88:                                     ; preds = %83, %12
  %89 = phi i8* [ %15, %12 ], [ %51, %83 ]
  %90 = phi i8 [ 0, %12 ], [ %87, %83 ]
  %91 = phi double [ %10, %12 ], [ %47, %83 ]
  store i8 %90, i8* %89, align 1
  br label %92

; <label>:92:                                     ; preds = %88, %42
  %93 = phi double [ %91, %88 ], [ %47, %42 ]
  store double %93, double* %9, align 8
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L9DoFSINCOSEP6MemoryR5State2InImES4_ItE(%struct.Memory* readnone returned, %struct.State* dereferenceable(3376), i64, i64)  {
  %5 = trunc i64 %3 to i16
  %6 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 11, i32 0, i32 0, i32 4
  store i16 %5, i16* %6, align 2
  %7 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 11, i32 0, i32 0, i32 5
  %8 = bitcast i32* %7 to i64*
  store i64 %2, i64* %8, align 8
  %9 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 0, i32 1
  %10 = load double, double* %9, align 8
  %11 = bitcast double %10 to i64
  %12 = and i64 %11, 9221120237041090560
  %13 = icmp eq i64 %12, 9218868437227405312
  %14 = and i64 %11, 2251799813685247
  %15 = icmp ne i64 %14, 0
  %16 = and i1 %13, %15
  %17 = fcmp ueq double %10, 0.000000e+00
  br i1 %17, label %31, label %18

; <label>:18:                                     ; preds = %4
  %19 = tail call double @llvm.fabs.f64(double %10) 
  %20 = fcmp oeq double %19, 0x7FF0000000000000
  %21 = or i1 %20, %16
  %22 = zext i1 %21 to i8
  %23 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 19
  %24 = load i8, i8* %23, align 1
  %25 = or i8 %24, %22
  store i8 %25, i8* %23, align 1
  %26 = fcmp olt double %19, 0x10000000000000
  %27 = fcmp une double %19, 0x7FF0000000000000
  %28 = and i1 %26, %27
  %29 = zext i1 %28 to i8
  %30 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 17
  store i8 %29, i8* %30, align 1
  br i1 %20, label %38, label %37

; <label>:31:                                     ; preds = %4
  %32 = zext i1 %16 to i8
  %33 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 19
  %34 = load i8, i8* %33, align 1
  %35 = or i8 %34, %32
  store i8 %35, i8* %33, align 1
  %36 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 17
  store i8 0, i8* %36, align 1
  br label %38

; <label>:37:                                     ; preds = %18
  br label %38

; <label>:38:                                     ; preds = %37, %31, %18
  %39 = phi i8* [ %36, %31 ], [ %30, %18 ], [ %30, %37 ]
  %40 = phi i8* [ %33, %31 ], [ %23, %18 ], [ %23, %37 ]
  %41 = phi i1 [ false, %31 ], [ false, %18 ], [ %26, %37 ]
  %42 = zext i1 %41 to i8
  store i8 %42, i8* %39, align 1
  %43 = tail call i32 @__remill_fpu_exception_test_and_clear(i32 0, i32 61) 
  tail call void asm sideeffect "", "~{memory},~{dirflag},~{fpsr},~{flags}"() 
  %44 = tail call double @sin(double %10) 
  tail call void asm sideeffect "", "~{memory},~{dirflag},~{fpsr},~{flags}"() 
  %45 = tail call i32 @__remill_fpu_exception_test_and_clear(i32 61, i32 %43) 
  %46 = lshr i32 %45, 5
  %47 = and i32 %46, 1
  %48 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 9
  %49 = load i8, i8* %48, align 1
  %50 = zext i8 %49 to i32
  %51 = or i32 %50, %47
  %52 = trunc i32 %51 to i8
  store i8 %52, i8* %48, align 1
  %53 = lshr i32 %45, 3
  %54 = and i32 %53, 1
  %55 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 13
  %56 = load i8, i8* %55, align 1
  %57 = zext i8 %56 to i32
  %58 = or i32 %57, %54
  %59 = trunc i32 %58 to i8
  store i8 %59, i8* %55, align 1
  %60 = lshr i32 %45, 4
  %61 = and i32 %60, 1
  %62 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 11
  %63 = load i8, i8* %62, align 1
  %64 = zext i8 %63 to i32
  %65 = or i32 %64, %61
  %66 = trunc i32 %65 to i8
  store i8 %66, i8* %62, align 1
  %67 = and i32 %45, 1
  %68 = load i8, i8* %40, align 1
  %69 = zext i8 %68 to i32
  %70 = or i32 %69, %67
  %71 = trunc i32 %70 to i8
  store i8 %71, i8* %40, align 1
  %72 = lshr i32 %45, 2
  %73 = and i32 %72, 1
  %74 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 15
  %75 = load i8, i8* %74, align 1
  %76 = zext i8 %75 to i32
  %77 = or i32 %76, %73
  %78 = trunc i32 %77 to i8
  store i8 %78, i8* %74, align 1
  br i1 %17, label %84, label %79

; <label>:79:                                     ; preds = %38
  %80 = tail call double @llvm.fabs.f64(double %10) 
  %81 = fcmp oeq double %80, 0x7FF0000000000000
  br i1 %81, label %84, label %82

; <label>:82:                                     ; preds = %79
  %83 = fcmp olt double %80, 0x10000000000000
  br label %84

; <label>:84:                                     ; preds = %82, %79, %38
  %85 = phi i1 [ false, %38 ], [ false, %79 ], [ %83, %82 ]
  %86 = zext i1 %85 to i8
  store i8 %86, i8* %39, align 1
  tail call void asm sideeffect "", "~{memory},~{dirflag},~{fpsr},~{flags}"() 
  %87 = tail call double @cos(double %10) 
  tail call void asm sideeffect "", "~{memory},~{dirflag},~{fpsr},~{flags}"() 
  %88 = load i8, i8* %48, align 1
  %89 = zext i8 %88 to i32
  %90 = or i32 %89, %47
  %91 = trunc i32 %90 to i8
  store i8 %91, i8* %48, align 1
  %92 = load i8, i8* %55, align 1
  %93 = zext i8 %92 to i32
  %94 = or i32 %93, %54
  %95 = trunc i32 %94 to i8
  store i8 %95, i8* %55, align 1
  %96 = load i8, i8* %62, align 1
  %97 = zext i8 %96 to i32
  %98 = or i32 %97, %61
  %99 = trunc i32 %98 to i8
  store i8 %99, i8* %62, align 1
  %100 = load i8, i8* %40, align 1
  %101 = zext i8 %100 to i32
  %102 = or i32 %101, %67
  %103 = trunc i32 %102 to i8
  store i8 %103, i8* %40, align 1
  %104 = load i8, i8* %74, align 1
  %105 = zext i8 %104 to i32
  %106 = or i32 %105, %73
  %107 = trunc i32 %106 to i8
  store i8 %107, i8* %74, align 1
  %108 = fcmp uno double %44, %87
  br i1 %108, label %116, label %109

; <label>:109:                                    ; preds = %84
  %110 = bitcast double %44 to i64
  %111 = bitcast double %87 to i64
  %112 = or i64 %111, %110
  %113 = and i64 %112, 255
  %114 = icmp ne i64 %113, 0
  %115 = zext i1 %114 to i8
  store i8 %115, i8* %48, align 1
  br label %116

; <label>:116:                                    ; preds = %109, %84
  %117 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 6, i32 1
  %118 = bitcast double* %117 to i64*
  %119 = load i64, i64* %118, align 8
  %120 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 7, i32 1
  %121 = bitcast double* %120 to i64*
  store i64 %119, i64* %121, align 8
  %122 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 5, i32 1
  %123 = bitcast double* %122 to i64*
  %124 = load i64, i64* %123, align 8
  store i64 %124, i64* %118, align 8
  %125 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 4, i32 1
  %126 = bitcast double* %125 to i64*
  %127 = load i64, i64* %126, align 8
  store i64 %127, i64* %123, align 8
  %128 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 3, i32 1
  %129 = bitcast double* %128 to i64*
  %130 = load i64, i64* %129, align 8
  store i64 %130, i64* %126, align 8
  %131 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 2, i32 1
  %132 = bitcast double* %131 to i64*
  %133 = load i64, i64* %132, align 8
  store i64 %133, i64* %129, align 8
  %134 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 1, i32 1
  %135 = bitcast double* %134 to i64*
  %136 = load i64, i64* %135, align 8
  store i64 %136, i64* %132, align 8
  store double %44, double* %134, align 8
  store double %87, double* %9, align 8
  %137 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 11, i32 0, i32 0, i32 1, i32 0
  %138 = load i16, i16* %137, align 2
  %139 = add i16 %138, 14336
  %140 = and i16 %139, 14336
  %141 = and i16 %138, -14337
  %142 = or i16 %140, %141
  store i16 %142, i16* %137, align 2
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L8DoFSCALEEP6MemoryR5State2InImES4_ItE(%struct.Memory* readnone returned, %struct.State* nocapture dereferenceable(3376), i64, i64)  {
  %5 = trunc i64 %3 to i16
  %6 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 11, i32 0, i32 0, i32 4
  store i16 %5, i16* %6, align 2
  %7 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 11, i32 0, i32 0, i32 5
  %8 = bitcast i32* %7 to i64*
  store i64 %2, i64* %8, align 8
  %9 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 1, i32 1
  %10 = load double, double* %9, align 8
  %11 = tail call double @llvm.trunc.f64(double %10)
  %12 = tail call double @exp2(double %11) 
  %13 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 0, i32 1
  %14 = load double, double* %13, align 8
  %15 = fmul double %12, %14
  store double %15, double* %13, align 8
  ret %struct.Memory* %0
}

; Function Attrs: nounwind readnone
declare double @exp2(double) local_unnamed_addr 

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L7DoF2XM1EP6MemoryR5State2InImES4_ItE(%struct.Memory* readnone returned, %struct.State* nocapture dereferenceable(3376), i64, i64)  {
  %5 = trunc i64 %3 to i16
  %6 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 11, i32 0, i32 0, i32 4
  store i16 %5, i16* %6, align 2
  %7 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 11, i32 0, i32 0, i32 5
  %8 = bitcast i32* %7 to i64*
  store i64 %2, i64* %8, align 8
  %9 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 0, i32 1
  %10 = load double, double* %9, align 8
  %11 = bitcast double %10 to i64
  %12 = and i64 %11, 9221120237041090560
  %13 = icmp eq i64 %12, 9218868437227405312
  %14 = and i64 %11, 2251799813685247
  %15 = icmp ne i64 %14, 0
  %16 = and i1 %13, %15
  %17 = fcmp ueq double %10, 0.000000e+00
  br i1 %17, label %18, label %23

; <label>:18:                                     ; preds = %4
  %19 = zext i1 %16 to i8
  %20 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 19
  %21 = load i8, i8* %20, align 1
  %22 = or i8 %21, %19
  store i8 %22, i8* %20, align 1
  br label %33

; <label>:23:                                     ; preds = %4
  %24 = tail call double @llvm.fabs.f64(double %10) 
  %25 = fcmp oeq double %24, 0x7FF0000000000000
  %26 = or i1 %25, %16
  %27 = zext i1 %26 to i8
  %28 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 19
  %29 = load i8, i8* %28, align 1
  %30 = or i8 %29, %27
  store i8 %30, i8* %28, align 1
  br i1 %25, label %33, label %31

; <label>:31:                                     ; preds = %23
  %32 = fcmp olt double %24, 0x10000000000000
  br label %33

; <label>:33:                                     ; preds = %31, %23, %18
  %34 = phi i1 [ false, %23 ], [ %32, %31 ], [ false, %18 ]
  %35 = zext i1 %34 to i8
  %36 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 17
  store i8 %35, i8* %36, align 1
  %37 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 11
  store i8 0, i8* %37, align 1
  %38 = tail call double @exp2(double %10) 
  %39 = fadd double %38, -1.000000e+00
  %40 = fcmp uno double %39, 0.000000e+00
  br i1 %40, label %47, label %41

; <label>:41:                                     ; preds = %33
  %42 = bitcast double %39 to i64
  %43 = and i64 %42, 255
  %44 = icmp ne i64 %43, 0
  %45 = zext i1 %44 to i8
  %46 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 9
  store i8 %45, i8* %46, align 1
  br label %47

; <label>:47:                                     ; preds = %41, %33
  store double %39, double* %9, align 8
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L7DoFPREMEP6MemoryR5State2InImES4_ItE(%struct.Memory* readnone returned, %struct.State* nocapture dereferenceable(3376), i64, i64)  {
  %5 = trunc i64 %3 to i16
  %6 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 11, i32 0, i32 0, i32 4
  store i16 %5, i16* %6, align 2
  %7 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 11, i32 0, i32 0, i32 5
  %8 = bitcast i32* %7 to i64*
  store i64 %2, i64* %8, align 8
  %9 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 0, i32 1
  %10 = load double, double* %9, align 8
  %11 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 1, i32 1
  %12 = load double, double* %11, align 8
  %13 = frem double %10, %12
  store double %13, double* %9, align 8
  %14 = fdiv double %10, %12
  %15 = tail call double @llvm.trunc.f64(double %14) 
  %16 = fptosi double %15 to i64
  %17 = icmp slt i64 %16, 0
  %18 = sub nsw i64 0, %16
  %19 = select i1 %17, i64 %18, i64 %16
  %20 = trunc i64 %19 to i8
  %21 = lshr i64 %19, 2
  %22 = trunc i64 %21 to i8
  %23 = and i8 %22, 1
  %24 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 1
  store i8 %23, i8* %24, align 1
  %25 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 5
  store i8 0, i8* %25, align 1
  %26 = and i8 %20, 1
  %27 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 3
  store i8 %26, i8* %27, align 1
  %28 = lshr i64 %19, 1
  %29 = trunc i64 %28 to i8
  %30 = and i8 %29, 1
  %31 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 7
  store i8 %30, i8* %31, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L8DoFPREM1EP6MemoryR5State2InImES4_ItE(%struct.Memory* readnone returned, %struct.State* nocapture dereferenceable(3376), i64, i64)  {
  %5 = trunc i64 %3 to i16
  %6 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 11, i32 0, i32 0, i32 4
  store i16 %5, i16* %6, align 2
  %7 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 11, i32 0, i32 0, i32 5
  %8 = bitcast i32* %7 to i64*
  store i64 %2, i64* %8, align 8
  %9 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 0, i32 1
  %10 = load double, double* %9, align 8
  %11 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 1, i32 1
  %12 = load double, double* %11, align 8
  %13 = tail call double @remainder(double %10, double %12) 
  store double %13, double* %9, align 8
  %14 = fdiv double %10, %12
  %15 = tail call double @llvm.fabs.f64(double %14) 
  %16 = fcmp ogt double %15, 0x43E0000000000000
  %17 = fptosi double %14 to i64
  %18 = select i1 %16, i64 -9223372036854775808, i64 %17
  %19 = icmp slt i64 %18, 0
  %20 = sub nsw i64 0, %18
  %21 = select i1 %19, i64 %20, i64 %18
  %22 = trunc i64 %21 to i8
  %23 = lshr i64 %21, 2
  %24 = trunc i64 %23 to i8
  %25 = and i8 %24, 1
  %26 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 1
  store i8 %25, i8* %26, align 1
  %27 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 5
  store i8 0, i8* %27, align 1
  %28 = and i8 %22, 1
  %29 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 3
  store i8 %28, i8* %29, align 1
  %30 = lshr i64 %21, 1
  %31 = trunc i64 %30 to i8
  %32 = and i8 %31, 1
  %33 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 7
  store i8 %32, i8* %33, align 1
  ret %struct.Memory* %0
}

; Function Attrs: nounwind readnone
declare double @remainder(double, double) local_unnamed_addr 

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L7FSUBmemI2MnIfEEEP6MemoryS4_R5State3RnWIdE2RnIdET_2InImESC_ItE(%struct.Memory* returned, %struct.State* nocapture dereferenceable(3376), double* nocapture, double, i64, i64, i64)  {
  %8 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 11, i32 0, i32 0, i32 8
  %9 = bitcast i32* %8 to i64*
  store i64 %4, i64* %9, align 16
  %10 = trunc i64 %6 to i16
  %11 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 11, i32 0, i32 0, i32 4
  store i16 %10, i16* %11, align 2
  %12 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 11, i32 0, i32 0, i32 5
  %13 = bitcast i32* %12 to i64*
  store i64 %5, i64* %13, align 8
  %14 = inttoptr i64 %4 to float*
  %15 = load float, float* %14
  %16 = fpext float %15 to double
  %17 = fcmp ueq double %3, 0.000000e+00
  br i1 %17, label %23, label %18

; <label>:18:                                     ; preds = %7
  %19 = tail call double @llvm.fabs.f64(double %3) 
  %20 = fcmp oeq double %19, 0x7FF0000000000000
  br i1 %20, label %23, label %21

; <label>:21:                                     ; preds = %18
  %22 = fcmp olt double %19, 0x10000000000000
  br label %23

; <label>:23:                                     ; preds = %21, %18, %7
  %24 = phi i1 [ false, %7 ], [ false, %18 ], [ %22, %21 ]
  %25 = fcmp ueq float %15, 0.000000e+00
  br i1 %25, label %31, label %26

; <label>:26:                                     ; preds = %23
  %27 = tail call double @llvm.fabs.f64(double %16) 
  %28 = fcmp oeq double %27, 0x7FF0000000000000
  br i1 %28, label %31, label %29

; <label>:29:                                     ; preds = %26
  %30 = fcmp olt double %27, 0x10000000000000
  br label %31

; <label>:31:                                     ; preds = %29, %26, %23
  %32 = phi i1 [ false, %23 ], [ false, %26 ], [ %30, %29 ]
  %33 = or i1 %24, %32
  %34 = zext i1 %33 to i8
  %35 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 17
  store i8 %34, i8* %35, align 1
  %36 = tail call i32 @__remill_fpu_exception_test_and_clear(i32 0, i32 61) 
  tail call void asm sideeffect "", "~{memory},~{dirflag},~{fpsr},~{flags}"() 
  %37 = fsub double %3, %16
  tail call void asm sideeffect "", "~{memory},~{dirflag},~{fpsr},~{flags}"() 
  %38 = tail call i32 @__remill_fpu_exception_test_and_clear(i32 61, i32 %36) 
  %39 = lshr i32 %38, 5
  %40 = and i32 %39, 1
  %41 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 9
  %42 = load i8, i8* %41, align 1
  %43 = zext i8 %42 to i32
  %44 = or i32 %43, %40
  %45 = trunc i32 %44 to i8
  store i8 %45, i8* %41, align 1
  %46 = lshr i32 %38, 3
  %47 = and i32 %46, 1
  %48 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 13
  %49 = load i8, i8* %48, align 1
  %50 = zext i8 %49 to i32
  %51 = or i32 %50, %47
  %52 = trunc i32 %51 to i8
  store i8 %52, i8* %48, align 1
  %53 = lshr i32 %38, 4
  %54 = and i32 %53, 1
  %55 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 11
  %56 = load i8, i8* %55, align 1
  %57 = zext i8 %56 to i32
  %58 = or i32 %57, %54
  %59 = trunc i32 %58 to i8
  store i8 %59, i8* %55, align 1
  %60 = and i32 %38, 1
  %61 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 19
  %62 = load i8, i8* %61, align 1
  %63 = zext i8 %62 to i32
  %64 = or i32 %63, %60
  %65 = trunc i32 %64 to i8
  store i8 %65, i8* %61, align 1
  %66 = lshr i32 %38, 2
  %67 = and i32 %66, 1
  %68 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 15
  %69 = load i8, i8* %68, align 1
  %70 = zext i8 %69 to i32
  %71 = or i32 %70, %67
  %72 = trunc i32 %71 to i8
  store i8 %72, i8* %68, align 1
  store double %37, double* %2, align 8
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L7FSUBmemI2MnIdEEEP6MemoryS4_R5State3RnWIdE2RnIdET_2InImESC_ItE(%struct.Memory* returned, %struct.State* nocapture dereferenceable(3376), double* nocapture, double, i64, i64, i64)  {
  %8 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 11, i32 0, i32 0, i32 8
  %9 = bitcast i32* %8 to i64*
  store i64 %4, i64* %9, align 16
  %10 = trunc i64 %6 to i16
  %11 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 11, i32 0, i32 0, i32 4
  store i16 %10, i16* %11, align 2
  %12 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 11, i32 0, i32 0, i32 5
  %13 = bitcast i32* %12 to i64*
  store i64 %5, i64* %13, align 8
  %14 = inttoptr i64 %4 to double*
  %15 = load double, double* %14
  %16 = fcmp ueq double %3, 0.000000e+00
  br i1 %16, label %22, label %17

; <label>:17:                                     ; preds = %7
  %18 = tail call double @llvm.fabs.f64(double %3) 
  %19 = fcmp oeq double %18, 0x7FF0000000000000
  br i1 %19, label %22, label %20

; <label>:20:                                     ; preds = %17
  %21 = fcmp olt double %18, 0x10000000000000
  br label %22

; <label>:22:                                     ; preds = %20, %17, %7
  %23 = phi i1 [ false, %7 ], [ false, %17 ], [ %21, %20 ]
  %24 = fcmp ueq double %15, 0.000000e+00
  br i1 %24, label %30, label %25

; <label>:25:                                     ; preds = %22
  %26 = tail call double @llvm.fabs.f64(double %15) 
  %27 = fcmp oeq double %26, 0x7FF0000000000000
  br i1 %27, label %30, label %28

; <label>:28:                                     ; preds = %25
  %29 = fcmp olt double %26, 0x10000000000000
  br label %30

; <label>:30:                                     ; preds = %28, %25, %22
  %31 = phi i1 [ false, %22 ], [ false, %25 ], [ %29, %28 ]
  %32 = or i1 %23, %31
  %33 = zext i1 %32 to i8
  %34 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 17
  store i8 %33, i8* %34, align 1
  %35 = tail call i32 @__remill_fpu_exception_test_and_clear(i32 0, i32 61) 
  tail call void asm sideeffect "", "~{memory},~{dirflag},~{fpsr},~{flags}"() 
  %36 = fsub double %3, %15
  tail call void asm sideeffect "", "~{memory},~{dirflag},~{fpsr},~{flags}"() 
  %37 = tail call i32 @__remill_fpu_exception_test_and_clear(i32 61, i32 %35) 
  %38 = lshr i32 %37, 5
  %39 = and i32 %38, 1
  %40 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 9
  %41 = load i8, i8* %40, align 1
  %42 = zext i8 %41 to i32
  %43 = or i32 %42, %39
  %44 = trunc i32 %43 to i8
  store i8 %44, i8* %40, align 1
  %45 = lshr i32 %37, 3
  %46 = and i32 %45, 1
  %47 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 13
  %48 = load i8, i8* %47, align 1
  %49 = zext i8 %48 to i32
  %50 = or i32 %49, %46
  %51 = trunc i32 %50 to i8
  store i8 %51, i8* %47, align 1
  %52 = lshr i32 %37, 4
  %53 = and i32 %52, 1
  %54 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 11
  %55 = load i8, i8* %54, align 1
  %56 = zext i8 %55 to i32
  %57 = or i32 %56, %53
  %58 = trunc i32 %57 to i8
  store i8 %58, i8* %54, align 1
  %59 = and i32 %37, 1
  %60 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 19
  %61 = load i8, i8* %60, align 1
  %62 = zext i8 %61 to i32
  %63 = or i32 %62, %59
  %64 = trunc i32 %63 to i8
  store i8 %64, i8* %60, align 1
  %65 = lshr i32 %37, 2
  %66 = and i32 %65, 1
  %67 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 15
  %68 = load i8, i8* %67, align 1
  %69 = zext i8 %68 to i32
  %70 = or i32 %69, %66
  %71 = trunc i32 %70 to i8
  store i8 %71, i8* %67, align 1
  store double %36, double* %2, align 8
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L4FSUBI2RnIdEEEP6MemoryS4_R5State3RnWIdES2_T_2InImESA_ItE(%struct.Memory* readnone returned, %struct.State* nocapture dereferenceable(3376), double* nocapture, double, double, i64, i64)  {
  %8 = trunc i64 %6 to i16
  %9 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 11, i32 0, i32 0, i32 4
  store i16 %8, i16* %9, align 2
  %10 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 11, i32 0, i32 0, i32 5
  %11 = bitcast i32* %10 to i64*
  store i64 %5, i64* %11, align 8
  %12 = fcmp ueq double %3, 0.000000e+00
  br i1 %12, label %18, label %13

; <label>:13:                                     ; preds = %7
  %14 = tail call double @llvm.fabs.f64(double %3) 
  %15 = fcmp oeq double %14, 0x7FF0000000000000
  br i1 %15, label %18, label %16

; <label>:16:                                     ; preds = %13
  %17 = fcmp olt double %14, 0x10000000000000
  br label %18

; <label>:18:                                     ; preds = %16, %13, %7
  %19 = phi i1 [ false, %7 ], [ false, %13 ], [ %17, %16 ]
  %20 = fcmp ueq double %4, 0.000000e+00
  br i1 %20, label %26, label %21

; <label>:21:                                     ; preds = %18
  %22 = tail call double @llvm.fabs.f64(double %4) 
  %23 = fcmp oeq double %22, 0x7FF0000000000000
  br i1 %23, label %26, label %24

; <label>:24:                                     ; preds = %21
  %25 = fcmp olt double %22, 0x10000000000000
  br label %26

; <label>:26:                                     ; preds = %24, %21, %18
  %27 = phi i1 [ false, %18 ], [ false, %21 ], [ %25, %24 ]
  %28 = or i1 %19, %27
  %29 = zext i1 %28 to i8
  %30 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 17
  store i8 %29, i8* %30, align 1
  %31 = tail call i32 @__remill_fpu_exception_test_and_clear(i32 0, i32 61) 
  tail call void asm sideeffect "", "~{memory},~{dirflag},~{fpsr},~{flags}"() 
  %32 = fsub double %3, %4
  tail call void asm sideeffect "", "~{memory},~{dirflag},~{fpsr},~{flags}"() 
  %33 = tail call i32 @__remill_fpu_exception_test_and_clear(i32 61, i32 %31) 
  %34 = lshr i32 %33, 5
  %35 = and i32 %34, 1
  %36 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 9
  %37 = load i8, i8* %36, align 1
  %38 = zext i8 %37 to i32
  %39 = or i32 %38, %35
  %40 = trunc i32 %39 to i8
  store i8 %40, i8* %36, align 1
  %41 = lshr i32 %33, 3
  %42 = and i32 %41, 1
  %43 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 13
  %44 = load i8, i8* %43, align 1
  %45 = zext i8 %44 to i32
  %46 = or i32 %45, %42
  %47 = trunc i32 %46 to i8
  store i8 %47, i8* %43, align 1
  %48 = lshr i32 %33, 4
  %49 = and i32 %48, 1
  %50 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 11
  %51 = load i8, i8* %50, align 1
  %52 = zext i8 %51 to i32
  %53 = or i32 %52, %49
  %54 = trunc i32 %53 to i8
  store i8 %54, i8* %50, align 1
  %55 = and i32 %33, 1
  %56 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 19
  %57 = load i8, i8* %56, align 1
  %58 = zext i8 %57 to i32
  %59 = or i32 %58, %55
  %60 = trunc i32 %59 to i8
  store i8 %60, i8* %56, align 1
  %61 = lshr i32 %33, 2
  %62 = and i32 %61, 1
  %63 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 15
  %64 = load i8, i8* %63, align 1
  %65 = zext i8 %64 to i32
  %66 = or i32 %65, %62
  %67 = trunc i32 %66 to i8
  store i8 %67, i8* %63, align 1
  store double %32, double* %2, align 8
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L5FSUBPI2RnIdEEEP6MemoryS4_R5State3RnWIdES2_T_2InImESA_ItE(%struct.Memory* readnone returned, %struct.State* nocapture dereferenceable(3376), double* nocapture, double, double, i64, i64)  {
  %8 = trunc i64 %6 to i16
  %9 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 11, i32 0, i32 0, i32 4
  %10 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 11, i32 0, i32 0, i32 5
  %11 = bitcast i32* %10 to i64*
  store i16 %8, i16* %9, align 2
  store i64 %5, i64* %11, align 8
  %12 = fcmp ueq double %3, 0.000000e+00
  br i1 %12, label %18, label %13

; <label>:13:                                     ; preds = %7
  %14 = tail call double @llvm.fabs.f64(double %3) 
  %15 = fcmp oeq double %14, 0x7FF0000000000000
  br i1 %15, label %18, label %16

; <label>:16:                                     ; preds = %13
  %17 = fcmp olt double %14, 0x10000000000000
  br label %18

; <label>:18:                                     ; preds = %16, %13, %7
  %19 = phi i1 [ false, %7 ], [ false, %13 ], [ %17, %16 ]
  %20 = fcmp ueq double %4, 0.000000e+00
  br i1 %20, label %26, label %21

; <label>:21:                                     ; preds = %18
  %22 = tail call double @llvm.fabs.f64(double %4) 
  %23 = fcmp oeq double %22, 0x7FF0000000000000
  br i1 %23, label %26, label %24

; <label>:24:                                     ; preds = %21
  %25 = fcmp olt double %22, 0x10000000000000
  br label %26

; <label>:26:                                     ; preds = %24, %21, %18
  %27 = phi i1 [ false, %18 ], [ false, %21 ], [ %25, %24 ]
  %28 = or i1 %19, %27
  %29 = zext i1 %28 to i8
  %30 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 17
  store i8 %29, i8* %30, align 1
  %31 = tail call i32 @__remill_fpu_exception_test_and_clear(i32 0, i32 61) 
  tail call void asm sideeffect "", "~{memory},~{dirflag},~{fpsr},~{flags}"() 
  %32 = fsub double %3, %4
  tail call void asm sideeffect "", "~{memory},~{dirflag},~{fpsr},~{flags}"() 
  %33 = tail call i32 @__remill_fpu_exception_test_and_clear(i32 61, i32 %31) 
  %34 = lshr i32 %33, 5
  %35 = and i32 %34, 1
  %36 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 9
  %37 = load i8, i8* %36, align 1
  %38 = zext i8 %37 to i32
  %39 = or i32 %38, %35
  %40 = trunc i32 %39 to i8
  store i8 %40, i8* %36, align 1
  %41 = lshr i32 %33, 3
  %42 = and i32 %41, 1
  %43 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 13
  %44 = load i8, i8* %43, align 1
  %45 = zext i8 %44 to i32
  %46 = or i32 %45, %42
  %47 = trunc i32 %46 to i8
  store i8 %47, i8* %43, align 1
  %48 = lshr i32 %33, 4
  %49 = and i32 %48, 1
  %50 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 11
  %51 = load i8, i8* %50, align 1
  %52 = zext i8 %51 to i32
  %53 = or i32 %52, %49
  %54 = trunc i32 %53 to i8
  store i8 %54, i8* %50, align 1
  %55 = and i32 %33, 1
  %56 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 19
  %57 = load i8, i8* %56, align 1
  %58 = zext i8 %57 to i32
  %59 = or i32 %58, %55
  %60 = trunc i32 %59 to i8
  store i8 %60, i8* %56, align 1
  %61 = lshr i32 %33, 2
  %62 = and i32 %61, 1
  %63 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 15
  %64 = load i8, i8* %63, align 1
  %65 = zext i8 %64 to i32
  %66 = or i32 %65, %62
  %67 = trunc i32 %66 to i8
  store i8 %67, i8* %63, align 1
  store double %32, double* %2, align 8
  %68 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 0, i32 1
  %69 = bitcast double* %68 to i64*
  %70 = load i64, i64* %69, align 8
  %71 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 1, i32 1
  %72 = bitcast double* %71 to i64*
  %73 = load i64, i64* %72, align 8
  store i64 %73, i64* %69, align 8
  %74 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 2, i32 1
  %75 = bitcast double* %74 to i64*
  %76 = load i64, i64* %75, align 8
  store i64 %76, i64* %72, align 8
  %77 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 3, i32 1
  %78 = bitcast double* %77 to i64*
  %79 = load i64, i64* %78, align 8
  store i64 %79, i64* %75, align 8
  %80 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 4, i32 1
  %81 = bitcast double* %80 to i64*
  %82 = load i64, i64* %81, align 8
  store i64 %82, i64* %78, align 8
  %83 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 5, i32 1
  %84 = bitcast double* %83 to i64*
  %85 = load i64, i64* %84, align 8
  store i64 %85, i64* %81, align 8
  %86 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 6, i32 1
  %87 = bitcast double* %86 to i64*
  %88 = load i64, i64* %87, align 8
  store i64 %88, i64* %84, align 8
  %89 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 7, i32 1
  %90 = bitcast double* %89 to i64*
  %91 = load i64, i64* %90, align 8
  store i64 %91, i64* %87, align 8
  store i64 %70, i64* %90, align 8
  %92 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 11, i32 0, i32 0, i32 1, i32 0
  %93 = load i16, i16* %92, align 2
  %94 = add i16 %93, 2048
  %95 = and i16 %94, 14336
  %96 = and i16 %93, -14337
  %97 = or i16 %95, %96
  store i16 %97, i16* %92, align 2
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L8FSUBRmemI2MnIfEEEP6MemoryS4_R5State3RnWIdE2RnIdET_2InImESC_ItE(%struct.Memory* returned, %struct.State* nocapture dereferenceable(3376), double* nocapture, double, i64, i64, i64)  {
  %8 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 11, i32 0, i32 0, i32 8
  %9 = bitcast i32* %8 to i64*
  store i64 %4, i64* %9, align 16
  %10 = trunc i64 %6 to i16
  %11 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 11, i32 0, i32 0, i32 4
  store i16 %10, i16* %11, align 2
  %12 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 11, i32 0, i32 0, i32 5
  %13 = bitcast i32* %12 to i64*
  store i64 %5, i64* %13, align 8
  %14 = inttoptr i64 %4 to float*
  %15 = load float, float* %14
  %16 = fpext float %15 to double
  %17 = fcmp ueq float %15, 0.000000e+00
  br i1 %17, label %23, label %18

; <label>:18:                                     ; preds = %7
  %19 = tail call double @llvm.fabs.f64(double %16) 
  %20 = fcmp oeq double %19, 0x7FF0000000000000
  br i1 %20, label %23, label %21

; <label>:21:                                     ; preds = %18
  %22 = fcmp olt double %19, 0x10000000000000
  br label %23

; <label>:23:                                     ; preds = %21, %18, %7
  %24 = phi i1 [ false, %7 ], [ false, %18 ], [ %22, %21 ]
  %25 = fcmp ueq double %3, 0.000000e+00
  br i1 %25, label %31, label %26

; <label>:26:                                     ; preds = %23
  %27 = tail call double @llvm.fabs.f64(double %3) 
  %28 = fcmp oeq double %27, 0x7FF0000000000000
  br i1 %28, label %31, label %29

; <label>:29:                                     ; preds = %26
  %30 = fcmp olt double %27, 0x10000000000000
  br label %31

; <label>:31:                                     ; preds = %29, %26, %23
  %32 = phi i1 [ false, %23 ], [ false, %26 ], [ %30, %29 ]
  %33 = or i1 %24, %32
  %34 = zext i1 %33 to i8
  %35 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 17
  store i8 %34, i8* %35, align 1
  %36 = tail call i32 @__remill_fpu_exception_test_and_clear(i32 0, i32 61) 
  tail call void asm sideeffect "", "~{memory},~{dirflag},~{fpsr},~{flags}"() 
  %37 = fsub double %16, %3
  tail call void asm sideeffect "", "~{memory},~{dirflag},~{fpsr},~{flags}"() 
  %38 = tail call i32 @__remill_fpu_exception_test_and_clear(i32 61, i32 %36) 
  %39 = lshr i32 %38, 5
  %40 = and i32 %39, 1
  %41 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 9
  %42 = load i8, i8* %41, align 1
  %43 = zext i8 %42 to i32
  %44 = or i32 %43, %40
  %45 = trunc i32 %44 to i8
  store i8 %45, i8* %41, align 1
  %46 = lshr i32 %38, 3
  %47 = and i32 %46, 1
  %48 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 13
  %49 = load i8, i8* %48, align 1
  %50 = zext i8 %49 to i32
  %51 = or i32 %50, %47
  %52 = trunc i32 %51 to i8
  store i8 %52, i8* %48, align 1
  %53 = lshr i32 %38, 4
  %54 = and i32 %53, 1
  %55 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 11
  %56 = load i8, i8* %55, align 1
  %57 = zext i8 %56 to i32
  %58 = or i32 %57, %54
  %59 = trunc i32 %58 to i8
  store i8 %59, i8* %55, align 1
  %60 = and i32 %38, 1
  %61 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 19
  %62 = load i8, i8* %61, align 1
  %63 = zext i8 %62 to i32
  %64 = or i32 %63, %60
  %65 = trunc i32 %64 to i8
  store i8 %65, i8* %61, align 1
  %66 = lshr i32 %38, 2
  %67 = and i32 %66, 1
  %68 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 15
  %69 = load i8, i8* %68, align 1
  %70 = zext i8 %69 to i32
  %71 = or i32 %70, %67
  %72 = trunc i32 %71 to i8
  store i8 %72, i8* %68, align 1
  store double %37, double* %2, align 8
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L8FSUBRmemI2MnIdEEEP6MemoryS4_R5State3RnWIdE2RnIdET_2InImESC_ItE(%struct.Memory* returned, %struct.State* nocapture dereferenceable(3376), double* nocapture, double, i64, i64, i64)  {
  %8 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 11, i32 0, i32 0, i32 8
  %9 = bitcast i32* %8 to i64*
  store i64 %4, i64* %9, align 16
  %10 = trunc i64 %6 to i16
  %11 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 11, i32 0, i32 0, i32 4
  store i16 %10, i16* %11, align 2
  %12 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 11, i32 0, i32 0, i32 5
  %13 = bitcast i32* %12 to i64*
  store i64 %5, i64* %13, align 8
  %14 = inttoptr i64 %4 to double*
  %15 = load double, double* %14
  %16 = fcmp ueq double %15, 0.000000e+00
  br i1 %16, label %22, label %17

; <label>:17:                                     ; preds = %7
  %18 = tail call double @llvm.fabs.f64(double %15) 
  %19 = fcmp oeq double %18, 0x7FF0000000000000
  br i1 %19, label %22, label %20

; <label>:20:                                     ; preds = %17
  %21 = fcmp olt double %18, 0x10000000000000
  br label %22

; <label>:22:                                     ; preds = %20, %17, %7
  %23 = phi i1 [ false, %7 ], [ false, %17 ], [ %21, %20 ]
  %24 = fcmp ueq double %3, 0.000000e+00
  br i1 %24, label %30, label %25

; <label>:25:                                     ; preds = %22
  %26 = tail call double @llvm.fabs.f64(double %3) 
  %27 = fcmp oeq double %26, 0x7FF0000000000000
  br i1 %27, label %30, label %28

; <label>:28:                                     ; preds = %25
  %29 = fcmp olt double %26, 0x10000000000000
  br label %30

; <label>:30:                                     ; preds = %28, %25, %22
  %31 = phi i1 [ false, %22 ], [ false, %25 ], [ %29, %28 ]
  %32 = or i1 %23, %31
  %33 = zext i1 %32 to i8
  %34 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 17
  store i8 %33, i8* %34, align 1
  %35 = tail call i32 @__remill_fpu_exception_test_and_clear(i32 0, i32 61) 
  tail call void asm sideeffect "", "~{memory},~{dirflag},~{fpsr},~{flags}"() 
  %36 = fsub double %15, %3
  tail call void asm sideeffect "", "~{memory},~{dirflag},~{fpsr},~{flags}"() 
  %37 = tail call i32 @__remill_fpu_exception_test_and_clear(i32 61, i32 %35) 
  %38 = lshr i32 %37, 5
  %39 = and i32 %38, 1
  %40 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 9
  %41 = load i8, i8* %40, align 1
  %42 = zext i8 %41 to i32
  %43 = or i32 %42, %39
  %44 = trunc i32 %43 to i8
  store i8 %44, i8* %40, align 1
  %45 = lshr i32 %37, 3
  %46 = and i32 %45, 1
  %47 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 13
  %48 = load i8, i8* %47, align 1
  %49 = zext i8 %48 to i32
  %50 = or i32 %49, %46
  %51 = trunc i32 %50 to i8
  store i8 %51, i8* %47, align 1
  %52 = lshr i32 %37, 4
  %53 = and i32 %52, 1
  %54 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 11
  %55 = load i8, i8* %54, align 1
  %56 = zext i8 %55 to i32
  %57 = or i32 %56, %53
  %58 = trunc i32 %57 to i8
  store i8 %58, i8* %54, align 1
  %59 = and i32 %37, 1
  %60 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 19
  %61 = load i8, i8* %60, align 1
  %62 = zext i8 %61 to i32
  %63 = or i32 %62, %59
  %64 = trunc i32 %63 to i8
  store i8 %64, i8* %60, align 1
  %65 = lshr i32 %37, 2
  %66 = and i32 %65, 1
  %67 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 15
  %68 = load i8, i8* %67, align 1
  %69 = zext i8 %68 to i32
  %70 = or i32 %69, %66
  %71 = trunc i32 %70 to i8
  store i8 %71, i8* %67, align 1
  store double %36, double* %2, align 8
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L5FSUBRI2RnIdEEEP6MemoryS4_R5State3RnWIdES2_T_2InImESA_ItE(%struct.Memory* readnone returned, %struct.State* nocapture dereferenceable(3376), double* nocapture, double, double, i64, i64)  {
  %8 = trunc i64 %6 to i16
  %9 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 11, i32 0, i32 0, i32 4
  store i16 %8, i16* %9, align 2
  %10 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 11, i32 0, i32 0, i32 5
  %11 = bitcast i32* %10 to i64*
  store i64 %5, i64* %11, align 8
  %12 = fcmp ueq double %4, 0.000000e+00
  br i1 %12, label %18, label %13

; <label>:13:                                     ; preds = %7
  %14 = tail call double @llvm.fabs.f64(double %4) 
  %15 = fcmp oeq double %14, 0x7FF0000000000000
  br i1 %15, label %18, label %16

; <label>:16:                                     ; preds = %13
  %17 = fcmp olt double %14, 0x10000000000000
  br label %18

; <label>:18:                                     ; preds = %16, %13, %7
  %19 = phi i1 [ false, %7 ], [ false, %13 ], [ %17, %16 ]
  %20 = fcmp ueq double %3, 0.000000e+00
  br i1 %20, label %26, label %21

; <label>:21:                                     ; preds = %18
  %22 = tail call double @llvm.fabs.f64(double %3) 
  %23 = fcmp oeq double %22, 0x7FF0000000000000
  br i1 %23, label %26, label %24

; <label>:24:                                     ; preds = %21
  %25 = fcmp olt double %22, 0x10000000000000
  br label %26

; <label>:26:                                     ; preds = %24, %21, %18
  %27 = phi i1 [ false, %18 ], [ false, %21 ], [ %25, %24 ]
  %28 = or i1 %19, %27
  %29 = zext i1 %28 to i8
  %30 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 17
  store i8 %29, i8* %30, align 1
  %31 = tail call i32 @__remill_fpu_exception_test_and_clear(i32 0, i32 61) 
  tail call void asm sideeffect "", "~{memory},~{dirflag},~{fpsr},~{flags}"() 
  %32 = fsub double %4, %3
  tail call void asm sideeffect "", "~{memory},~{dirflag},~{fpsr},~{flags}"() 
  %33 = tail call i32 @__remill_fpu_exception_test_and_clear(i32 61, i32 %31) 
  %34 = lshr i32 %33, 5
  %35 = and i32 %34, 1
  %36 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 9
  %37 = load i8, i8* %36, align 1
  %38 = zext i8 %37 to i32
  %39 = or i32 %38, %35
  %40 = trunc i32 %39 to i8
  store i8 %40, i8* %36, align 1
  %41 = lshr i32 %33, 3
  %42 = and i32 %41, 1
  %43 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 13
  %44 = load i8, i8* %43, align 1
  %45 = zext i8 %44 to i32
  %46 = or i32 %45, %42
  %47 = trunc i32 %46 to i8
  store i8 %47, i8* %43, align 1
  %48 = lshr i32 %33, 4
  %49 = and i32 %48, 1
  %50 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 11
  %51 = load i8, i8* %50, align 1
  %52 = zext i8 %51 to i32
  %53 = or i32 %52, %49
  %54 = trunc i32 %53 to i8
  store i8 %54, i8* %50, align 1
  %55 = and i32 %33, 1
  %56 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 19
  %57 = load i8, i8* %56, align 1
  %58 = zext i8 %57 to i32
  %59 = or i32 %58, %55
  %60 = trunc i32 %59 to i8
  store i8 %60, i8* %56, align 1
  %61 = lshr i32 %33, 2
  %62 = and i32 %61, 1
  %63 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 15
  %64 = load i8, i8* %63, align 1
  %65 = zext i8 %64 to i32
  %66 = or i32 %65, %62
  %67 = trunc i32 %66 to i8
  store i8 %67, i8* %63, align 1
  store double %32, double* %2, align 8
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L6FSUBRPI2RnIdEEEP6MemoryS4_R5State3RnWIdES2_T_2InImESA_ItE(%struct.Memory* readnone returned, %struct.State* nocapture dereferenceable(3376), double* nocapture, double, double, i64, i64)  {
  %8 = trunc i64 %6 to i16
  %9 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 11, i32 0, i32 0, i32 4
  %10 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 11, i32 0, i32 0, i32 5
  %11 = bitcast i32* %10 to i64*
  store i16 %8, i16* %9, align 2
  store i64 %5, i64* %11, align 8
  %12 = fcmp ueq double %4, 0.000000e+00
  br i1 %12, label %18, label %13

; <label>:13:                                     ; preds = %7
  %14 = tail call double @llvm.fabs.f64(double %4) 
  %15 = fcmp oeq double %14, 0x7FF0000000000000
  br i1 %15, label %18, label %16

; <label>:16:                                     ; preds = %13
  %17 = fcmp olt double %14, 0x10000000000000
  br label %18

; <label>:18:                                     ; preds = %16, %13, %7
  %19 = phi i1 [ false, %7 ], [ false, %13 ], [ %17, %16 ]
  %20 = fcmp ueq double %3, 0.000000e+00
  br i1 %20, label %26, label %21

; <label>:21:                                     ; preds = %18
  %22 = tail call double @llvm.fabs.f64(double %3) 
  %23 = fcmp oeq double %22, 0x7FF0000000000000
  br i1 %23, label %26, label %24

; <label>:24:                                     ; preds = %21
  %25 = fcmp olt double %22, 0x10000000000000
  br label %26

; <label>:26:                                     ; preds = %24, %21, %18
  %27 = phi i1 [ false, %18 ], [ false, %21 ], [ %25, %24 ]
  %28 = or i1 %19, %27
  %29 = zext i1 %28 to i8
  %30 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 17
  store i8 %29, i8* %30, align 1
  %31 = tail call i32 @__remill_fpu_exception_test_and_clear(i32 0, i32 61) 
  tail call void asm sideeffect "", "~{memory},~{dirflag},~{fpsr},~{flags}"() 
  %32 = fsub double %4, %3
  tail call void asm sideeffect "", "~{memory},~{dirflag},~{fpsr},~{flags}"() 
  %33 = tail call i32 @__remill_fpu_exception_test_and_clear(i32 61, i32 %31) 
  %34 = lshr i32 %33, 5
  %35 = and i32 %34, 1
  %36 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 9
  %37 = load i8, i8* %36, align 1
  %38 = zext i8 %37 to i32
  %39 = or i32 %38, %35
  %40 = trunc i32 %39 to i8
  store i8 %40, i8* %36, align 1
  %41 = lshr i32 %33, 3
  %42 = and i32 %41, 1
  %43 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 13
  %44 = load i8, i8* %43, align 1
  %45 = zext i8 %44 to i32
  %46 = or i32 %45, %42
  %47 = trunc i32 %46 to i8
  store i8 %47, i8* %43, align 1
  %48 = lshr i32 %33, 4
  %49 = and i32 %48, 1
  %50 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 11
  %51 = load i8, i8* %50, align 1
  %52 = zext i8 %51 to i32
  %53 = or i32 %52, %49
  %54 = trunc i32 %53 to i8
  store i8 %54, i8* %50, align 1
  %55 = and i32 %33, 1
  %56 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 19
  %57 = load i8, i8* %56, align 1
  %58 = zext i8 %57 to i32
  %59 = or i32 %58, %55
  %60 = trunc i32 %59 to i8
  store i8 %60, i8* %56, align 1
  %61 = lshr i32 %33, 2
  %62 = and i32 %61, 1
  %63 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 15
  %64 = load i8, i8* %63, align 1
  %65 = zext i8 %64 to i32
  %66 = or i32 %65, %62
  %67 = trunc i32 %66 to i8
  store i8 %67, i8* %63, align 1
  store double %32, double* %2, align 8
  %68 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 0, i32 1
  %69 = bitcast double* %68 to i64*
  %70 = load i64, i64* %69, align 8
  %71 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 1, i32 1
  %72 = bitcast double* %71 to i64*
  %73 = load i64, i64* %72, align 8
  store i64 %73, i64* %69, align 8
  %74 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 2, i32 1
  %75 = bitcast double* %74 to i64*
  %76 = load i64, i64* %75, align 8
  store i64 %76, i64* %72, align 8
  %77 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 3, i32 1
  %78 = bitcast double* %77 to i64*
  %79 = load i64, i64* %78, align 8
  store i64 %79, i64* %75, align 8
  %80 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 4, i32 1
  %81 = bitcast double* %80 to i64*
  %82 = load i64, i64* %81, align 8
  store i64 %82, i64* %78, align 8
  %83 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 5, i32 1
  %84 = bitcast double* %83 to i64*
  %85 = load i64, i64* %84, align 8
  store i64 %85, i64* %81, align 8
  %86 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 6, i32 1
  %87 = bitcast double* %86 to i64*
  %88 = load i64, i64* %87, align 8
  store i64 %88, i64* %84, align 8
  %89 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 7, i32 1
  %90 = bitcast double* %89 to i64*
  %91 = load i64, i64* %90, align 8
  store i64 %91, i64* %87, align 8
  store i64 %70, i64* %90, align 8
  %92 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 11, i32 0, i32 0, i32 1, i32 0
  %93 = load i16, i16* %92, align 2
  %94 = add i16 %93, 2048
  %95 = and i16 %94, 14336
  %96 = and i16 %93, -14337
  %97 = or i16 %95, %96
  store i16 %97, i16* %92, align 2
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L5FISUBI2MnIjEEEP6MemoryS4_R5State3RnWIdE2RnIdET_2InImESC_ItE(%struct.Memory*, %struct.State* nocapture dereferenceable(3376), double* nocapture, double, i64, i64, i64)  {
  %8 = trunc i64 %6 to i16
  %9 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 11, i32 0, i32 0, i32 4
  store i16 %8, i16* %9, align 2
  %10 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 11, i32 0, i32 0, i32 5
  %11 = bitcast i32* %10 to i64*
  store i64 %5, i64* %11, align 8
  %12 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 11, i32 0, i32 0, i32 8
  %13 = bitcast i32* %12 to i64*
  store i64 %4, i64* %13, align 16
  %14 = inttoptr i64 %4 to i32*
  %15 = load i32, i32* %14
  %16 = sitofp i32 %15 to double
  %17 = fcmp ueq double %3, 0.000000e+00
  br i1 %17, label %23, label %18

; <label>:18:                                     ; preds = %7
  %19 = tail call double @llvm.fabs.f64(double %3) 
  %20 = fcmp oeq double %19, 0x7FF0000000000000
  br i1 %20, label %23, label %21

; <label>:21:                                     ; preds = %18
  %22 = fcmp olt double %19, 0x10000000000000
  br label %23

; <label>:23:                                     ; preds = %21, %18, %7
  %24 = phi i1 [ false, %7 ], [ false, %18 ], [ %22, %21 ]
  %25 = icmp eq i32 %15, 0
  br i1 %25, label %31, label %26

; <label>:26:                                     ; preds = %23
  %27 = tail call double @llvm.fabs.f64(double %16) 
  %28 = fcmp oeq double %27, 0x7FF0000000000000
  br i1 %28, label %31, label %29

; <label>:29:                                     ; preds = %26
  %30 = fcmp olt double %27, 0x10000000000000
  br label %31

; <label>:31:                                     ; preds = %29, %26, %23
  %32 = phi i1 [ false, %23 ], [ false, %26 ], [ %30, %29 ]
  %33 = or i1 %24, %32
  %34 = zext i1 %33 to i8
  %35 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 17
  store i8 %34, i8* %35, align 1
  %36 = tail call i32 @__remill_fpu_exception_test_and_clear(i32 0, i32 61) 
  tail call void asm sideeffect "", "~{memory},~{dirflag},~{fpsr},~{flags}"() 
  %37 = fsub double %3, %16
  tail call void asm sideeffect "", "~{memory},~{dirflag},~{fpsr},~{flags}"() 
  %38 = tail call i32 @__remill_fpu_exception_test_and_clear(i32 61, i32 %36) 
  %39 = lshr i32 %38, 5
  %40 = and i32 %39, 1
  %41 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 9
  %42 = load i8, i8* %41, align 1
  %43 = zext i8 %42 to i32
  %44 = or i32 %43, %40
  %45 = trunc i32 %44 to i8
  store i8 %45, i8* %41, align 1
  %46 = lshr i32 %38, 3
  %47 = and i32 %46, 1
  %48 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 13
  %49 = load i8, i8* %48, align 1
  %50 = zext i8 %49 to i32
  %51 = or i32 %50, %47
  %52 = trunc i32 %51 to i8
  store i8 %52, i8* %48, align 1
  %53 = lshr i32 %38, 4
  %54 = and i32 %53, 1
  %55 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 11
  %56 = load i8, i8* %55, align 1
  %57 = zext i8 %56 to i32
  %58 = or i32 %57, %54
  %59 = trunc i32 %58 to i8
  store i8 %59, i8* %55, align 1
  %60 = and i32 %38, 1
  %61 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 19
  %62 = load i8, i8* %61, align 1
  %63 = zext i8 %62 to i32
  %64 = or i32 %63, %60
  %65 = trunc i32 %64 to i8
  store i8 %65, i8* %61, align 1
  %66 = lshr i32 %38, 2
  %67 = and i32 %66, 1
  %68 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 15
  %69 = load i8, i8* %68, align 1
  %70 = zext i8 %69 to i32
  %71 = or i32 %70, %67
  %72 = trunc i32 %71 to i8
  store i8 %72, i8* %68, align 1
  store double %37, double* %2, align 8
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L5FISUBI2MnItEEEP6MemoryS4_R5State3RnWIdE2RnIdET_2InImESC_ItE(%struct.Memory*, %struct.State* nocapture dereferenceable(3376), double* nocapture, double, i64, i64, i64)  {
  %8 = trunc i64 %6 to i16
  %9 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 11, i32 0, i32 0, i32 4
  store i16 %8, i16* %9, align 2
  %10 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 11, i32 0, i32 0, i32 5
  %11 = bitcast i32* %10 to i64*
  store i64 %5, i64* %11, align 8
  %12 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 11, i32 0, i32 0, i32 8
  %13 = bitcast i32* %12 to i64*
  store i64 %4, i64* %13, align 16
  %14 = inttoptr i64 %4 to i16*
  %15 = load i16, i16* %14
  %16 = sitofp i16 %15 to double
  %17 = fcmp ueq double %3, 0.000000e+00
  br i1 %17, label %23, label %18

; <label>:18:                                     ; preds = %7
  %19 = tail call double @llvm.fabs.f64(double %3) 
  %20 = fcmp oeq double %19, 0x7FF0000000000000
  br i1 %20, label %23, label %21

; <label>:21:                                     ; preds = %18
  %22 = fcmp olt double %19, 0x10000000000000
  br label %23

; <label>:23:                                     ; preds = %21, %18, %7
  %24 = phi i1 [ false, %7 ], [ false, %18 ], [ %22, %21 ]
  %25 = icmp eq i16 %15, 0
  br i1 %25, label %31, label %26

; <label>:26:                                     ; preds = %23
  %27 = tail call double @llvm.fabs.f64(double %16) 
  %28 = fcmp oeq double %27, 0x7FF0000000000000
  br i1 %28, label %31, label %29

; <label>:29:                                     ; preds = %26
  %30 = fcmp olt double %27, 0x10000000000000
  br label %31

; <label>:31:                                     ; preds = %29, %26, %23
  %32 = phi i1 [ false, %23 ], [ false, %26 ], [ %30, %29 ]
  %33 = or i1 %24, %32
  %34 = zext i1 %33 to i8
  %35 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 17
  store i8 %34, i8* %35, align 1
  %36 = tail call i32 @__remill_fpu_exception_test_and_clear(i32 0, i32 61) 
  tail call void asm sideeffect "", "~{memory},~{dirflag},~{fpsr},~{flags}"() 
  %37 = fsub double %3, %16
  tail call void asm sideeffect "", "~{memory},~{dirflag},~{fpsr},~{flags}"() 
  %38 = tail call i32 @__remill_fpu_exception_test_and_clear(i32 61, i32 %36) 
  %39 = lshr i32 %38, 5
  %40 = and i32 %39, 1
  %41 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 9
  %42 = load i8, i8* %41, align 1
  %43 = zext i8 %42 to i32
  %44 = or i32 %43, %40
  %45 = trunc i32 %44 to i8
  store i8 %45, i8* %41, align 1
  %46 = lshr i32 %38, 3
  %47 = and i32 %46, 1
  %48 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 13
  %49 = load i8, i8* %48, align 1
  %50 = zext i8 %49 to i32
  %51 = or i32 %50, %47
  %52 = trunc i32 %51 to i8
  store i8 %52, i8* %48, align 1
  %53 = lshr i32 %38, 4
  %54 = and i32 %53, 1
  %55 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 11
  %56 = load i8, i8* %55, align 1
  %57 = zext i8 %56 to i32
  %58 = or i32 %57, %54
  %59 = trunc i32 %58 to i8
  store i8 %59, i8* %55, align 1
  %60 = and i32 %38, 1
  %61 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 19
  %62 = load i8, i8* %61, align 1
  %63 = zext i8 %62 to i32
  %64 = or i32 %63, %60
  %65 = trunc i32 %64 to i8
  store i8 %65, i8* %61, align 1
  %66 = lshr i32 %38, 2
  %67 = and i32 %66, 1
  %68 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 15
  %69 = load i8, i8* %68, align 1
  %70 = zext i8 %69 to i32
  %71 = or i32 %70, %67
  %72 = trunc i32 %71 to i8
  store i8 %72, i8* %68, align 1
  store double %37, double* %2, align 8
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L6FISUBRI2MnIjEEEP6MemoryS4_R5State3RnWIdE2RnIdET_2InImESC_ItE(%struct.Memory*, %struct.State* nocapture dereferenceable(3376), double* nocapture, double, i64, i64, i64)  {
  %8 = trunc i64 %6 to i16
  %9 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 11, i32 0, i32 0, i32 4
  store i16 %8, i16* %9, align 2
  %10 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 11, i32 0, i32 0, i32 5
  %11 = bitcast i32* %10 to i64*
  store i64 %5, i64* %11, align 8
  %12 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 11, i32 0, i32 0, i32 8
  %13 = bitcast i32* %12 to i64*
  store i64 %4, i64* %13, align 16
  %14 = inttoptr i64 %4 to i32*
  %15 = load i32, i32* %14
  %16 = sitofp i32 %15 to double
  %17 = icmp eq i32 %15, 0
  br i1 %17, label %23, label %18

; <label>:18:                                     ; preds = %7
  %19 = tail call double @llvm.fabs.f64(double %16) 
  %20 = fcmp oeq double %19, 0x7FF0000000000000
  br i1 %20, label %23, label %21

; <label>:21:                                     ; preds = %18
  %22 = fcmp olt double %19, 0x10000000000000
  br label %23

; <label>:23:                                     ; preds = %21, %18, %7
  %24 = phi i1 [ false, %7 ], [ false, %18 ], [ %22, %21 ]
  %25 = fcmp ueq double %3, 0.000000e+00
  br i1 %25, label %31, label %26

; <label>:26:                                     ; preds = %23
  %27 = tail call double @llvm.fabs.f64(double %3) 
  %28 = fcmp oeq double %27, 0x7FF0000000000000
  br i1 %28, label %31, label %29

; <label>:29:                                     ; preds = %26
  %30 = fcmp olt double %27, 0x10000000000000
  br label %31

; <label>:31:                                     ; preds = %29, %26, %23
  %32 = phi i1 [ false, %23 ], [ false, %26 ], [ %30, %29 ]
  %33 = or i1 %24, %32
  %34 = zext i1 %33 to i8
  %35 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 17
  store i8 %34, i8* %35, align 1
  %36 = tail call i32 @__remill_fpu_exception_test_and_clear(i32 0, i32 61) 
  tail call void asm sideeffect "", "~{memory},~{dirflag},~{fpsr},~{flags}"() 
  %37 = fsub double %16, %3
  tail call void asm sideeffect "", "~{memory},~{dirflag},~{fpsr},~{flags}"() 
  %38 = tail call i32 @__remill_fpu_exception_test_and_clear(i32 61, i32 %36) 
  %39 = lshr i32 %38, 5
  %40 = and i32 %39, 1
  %41 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 9
  %42 = load i8, i8* %41, align 1
  %43 = zext i8 %42 to i32
  %44 = or i32 %43, %40
  %45 = trunc i32 %44 to i8
  store i8 %45, i8* %41, align 1
  %46 = lshr i32 %38, 3
  %47 = and i32 %46, 1
  %48 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 13
  %49 = load i8, i8* %48, align 1
  %50 = zext i8 %49 to i32
  %51 = or i32 %50, %47
  %52 = trunc i32 %51 to i8
  store i8 %52, i8* %48, align 1
  %53 = lshr i32 %38, 4
  %54 = and i32 %53, 1
  %55 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 11
  %56 = load i8, i8* %55, align 1
  %57 = zext i8 %56 to i32
  %58 = or i32 %57, %54
  %59 = trunc i32 %58 to i8
  store i8 %59, i8* %55, align 1
  %60 = and i32 %38, 1
  %61 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 19
  %62 = load i8, i8* %61, align 1
  %63 = zext i8 %62 to i32
  %64 = or i32 %63, %60
  %65 = trunc i32 %64 to i8
  store i8 %65, i8* %61, align 1
  %66 = lshr i32 %38, 2
  %67 = and i32 %66, 1
  %68 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 15
  %69 = load i8, i8* %68, align 1
  %70 = zext i8 %69 to i32
  %71 = or i32 %70, %67
  %72 = trunc i32 %71 to i8
  store i8 %72, i8* %68, align 1
  store double %37, double* %2, align 8
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L6FISUBRI2MnItEEEP6MemoryS4_R5State3RnWIdE2RnIdET_2InImESC_ItE(%struct.Memory*, %struct.State* nocapture dereferenceable(3376), double* nocapture, double, i64, i64, i64)  {
  %8 = trunc i64 %6 to i16
  %9 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 11, i32 0, i32 0, i32 4
  store i16 %8, i16* %9, align 2
  %10 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 11, i32 0, i32 0, i32 5
  %11 = bitcast i32* %10 to i64*
  store i64 %5, i64* %11, align 8
  %12 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 11, i32 0, i32 0, i32 8
  %13 = bitcast i32* %12 to i64*
  store i64 %4, i64* %13, align 16
  %14 = inttoptr i64 %4 to i16*
  %15 = load i16, i16* %14
  %16 = sitofp i16 %15 to double
  %17 = icmp eq i16 %15, 0
  br i1 %17, label %23, label %18

; <label>:18:                                     ; preds = %7
  %19 = tail call double @llvm.fabs.f64(double %16) 
  %20 = fcmp oeq double %19, 0x7FF0000000000000
  br i1 %20, label %23, label %21

; <label>:21:                                     ; preds = %18
  %22 = fcmp olt double %19, 0x10000000000000
  br label %23

; <label>:23:                                     ; preds = %21, %18, %7
  %24 = phi i1 [ false, %7 ], [ false, %18 ], [ %22, %21 ]
  %25 = fcmp ueq double %3, 0.000000e+00
  br i1 %25, label %31, label %26

; <label>:26:                                     ; preds = %23
  %27 = tail call double @llvm.fabs.f64(double %3) 
  %28 = fcmp oeq double %27, 0x7FF0000000000000
  br i1 %28, label %31, label %29

; <label>:29:                                     ; preds = %26
  %30 = fcmp olt double %27, 0x10000000000000
  br label %31

; <label>:31:                                     ; preds = %29, %26, %23
  %32 = phi i1 [ false, %23 ], [ false, %26 ], [ %30, %29 ]
  %33 = or i1 %24, %32
  %34 = zext i1 %33 to i8
  %35 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 17
  store i8 %34, i8* %35, align 1
  %36 = tail call i32 @__remill_fpu_exception_test_and_clear(i32 0, i32 61) 
  tail call void asm sideeffect "", "~{memory},~{dirflag},~{fpsr},~{flags}"() 
  %37 = fsub double %16, %3
  tail call void asm sideeffect "", "~{memory},~{dirflag},~{fpsr},~{flags}"() 
  %38 = tail call i32 @__remill_fpu_exception_test_and_clear(i32 61, i32 %36) 
  %39 = lshr i32 %38, 5
  %40 = and i32 %39, 1
  %41 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 9
  %42 = load i8, i8* %41, align 1
  %43 = zext i8 %42 to i32
  %44 = or i32 %43, %40
  %45 = trunc i32 %44 to i8
  store i8 %45, i8* %41, align 1
  %46 = lshr i32 %38, 3
  %47 = and i32 %46, 1
  %48 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 13
  %49 = load i8, i8* %48, align 1
  %50 = zext i8 %49 to i32
  %51 = or i32 %50, %47
  %52 = trunc i32 %51 to i8
  store i8 %52, i8* %48, align 1
  %53 = lshr i32 %38, 4
  %54 = and i32 %53, 1
  %55 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 11
  %56 = load i8, i8* %55, align 1
  %57 = zext i8 %56 to i32
  %58 = or i32 %57, %54
  %59 = trunc i32 %58 to i8
  store i8 %59, i8* %55, align 1
  %60 = and i32 %38, 1
  %61 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 19
  %62 = load i8, i8* %61, align 1
  %63 = zext i8 %62 to i32
  %64 = or i32 %63, %60
  %65 = trunc i32 %64 to i8
  store i8 %65, i8* %61, align 1
  %66 = lshr i32 %38, 2
  %67 = and i32 %66, 1
  %68 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 15
  %69 = load i8, i8* %68, align 1
  %70 = zext i8 %69 to i32
  %71 = or i32 %70, %67
  %72 = trunc i32 %71 to i8
  store i8 %72, i8* %68, align 1
  store double %37, double* %2, align 8
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L7FADDmemI2MnIfEEEP6MemoryS4_R5State3RnWIdE2RnIdET_2InImESC_ItE(%struct.Memory* returned, %struct.State* nocapture dereferenceable(3376), double* nocapture, double, i64, i64, i64)  {
  %8 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 11, i32 0, i32 0, i32 8
  %9 = bitcast i32* %8 to i64*
  store i64 %4, i64* %9, align 16
  %10 = trunc i64 %6 to i16
  %11 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 11, i32 0, i32 0, i32 4
  store i16 %10, i16* %11, align 2
  %12 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 11, i32 0, i32 0, i32 5
  %13 = bitcast i32* %12 to i64*
  store i64 %5, i64* %13, align 8
  %14 = inttoptr i64 %4 to float*
  %15 = load float, float* %14
  %16 = fpext float %15 to double
  %17 = fcmp ueq double %3, 0.000000e+00
  br i1 %17, label %23, label %18

; <label>:18:                                     ; preds = %7
  %19 = tail call double @llvm.fabs.f64(double %3) 
  %20 = fcmp oeq double %19, 0x7FF0000000000000
  br i1 %20, label %23, label %21

; <label>:21:                                     ; preds = %18
  %22 = fcmp olt double %19, 0x10000000000000
  br label %23

; <label>:23:                                     ; preds = %21, %18, %7
  %24 = phi i1 [ false, %7 ], [ false, %18 ], [ %22, %21 ]
  %25 = fcmp ueq float %15, 0.000000e+00
  br i1 %25, label %31, label %26

; <label>:26:                                     ; preds = %23
  %27 = tail call double @llvm.fabs.f64(double %16) 
  %28 = fcmp oeq double %27, 0x7FF0000000000000
  br i1 %28, label %31, label %29

; <label>:29:                                     ; preds = %26
  %30 = fcmp olt double %27, 0x10000000000000
  br label %31

; <label>:31:                                     ; preds = %29, %26, %23
  %32 = phi i1 [ false, %23 ], [ false, %26 ], [ %30, %29 ]
  %33 = or i1 %24, %32
  %34 = zext i1 %33 to i8
  %35 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 17
  store i8 %34, i8* %35, align 1
  %36 = tail call i32 @__remill_fpu_exception_test_and_clear(i32 0, i32 61) 
  tail call void asm sideeffect "", "~{memory},~{dirflag},~{fpsr},~{flags}"() 
  %37 = fadd double %16, %3
  tail call void asm sideeffect "", "~{memory},~{dirflag},~{fpsr},~{flags}"() 
  %38 = tail call i32 @__remill_fpu_exception_test_and_clear(i32 61, i32 %36) 
  %39 = lshr i32 %38, 5
  %40 = and i32 %39, 1
  %41 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 9
  %42 = load i8, i8* %41, align 1
  %43 = zext i8 %42 to i32
  %44 = or i32 %43, %40
  %45 = trunc i32 %44 to i8
  store i8 %45, i8* %41, align 1
  %46 = lshr i32 %38, 3
  %47 = and i32 %46, 1
  %48 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 13
  %49 = load i8, i8* %48, align 1
  %50 = zext i8 %49 to i32
  %51 = or i32 %50, %47
  %52 = trunc i32 %51 to i8
  store i8 %52, i8* %48, align 1
  %53 = lshr i32 %38, 4
  %54 = and i32 %53, 1
  %55 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 11
  %56 = load i8, i8* %55, align 1
  %57 = zext i8 %56 to i32
  %58 = or i32 %57, %54
  %59 = trunc i32 %58 to i8
  store i8 %59, i8* %55, align 1
  %60 = and i32 %38, 1
  %61 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 19
  %62 = load i8, i8* %61, align 1
  %63 = zext i8 %62 to i32
  %64 = or i32 %63, %60
  %65 = trunc i32 %64 to i8
  store i8 %65, i8* %61, align 1
  %66 = lshr i32 %38, 2
  %67 = and i32 %66, 1
  %68 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 15
  %69 = load i8, i8* %68, align 1
  %70 = zext i8 %69 to i32
  %71 = or i32 %70, %67
  %72 = trunc i32 %71 to i8
  store i8 %72, i8* %68, align 1
  store double %37, double* %2, align 8
  %73 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 1
  store i8 0, i8* %73, align 1
  %74 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 5
  store i8 0, i8* %74, align 1
  %75 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 7
  store i8 0, i8* %75, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L4FADDI2RnIdEEEP6MemoryS4_R5State3RnWIdES2_T_2InImESA_ItE(%struct.Memory* readnone returned, %struct.State* nocapture dereferenceable(3376), double* nocapture, double, double, i64, i64)  {
  %8 = trunc i64 %6 to i16
  %9 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 11, i32 0, i32 0, i32 4
  store i16 %8, i16* %9, align 2
  %10 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 11, i32 0, i32 0, i32 5
  %11 = bitcast i32* %10 to i64*
  store i64 %5, i64* %11, align 8
  %12 = fcmp ueq double %3, 0.000000e+00
  br i1 %12, label %18, label %13

; <label>:13:                                     ; preds = %7
  %14 = tail call double @llvm.fabs.f64(double %3) 
  %15 = fcmp oeq double %14, 0x7FF0000000000000
  br i1 %15, label %18, label %16

; <label>:16:                                     ; preds = %13
  %17 = fcmp olt double %14, 0x10000000000000
  br label %18

; <label>:18:                                     ; preds = %16, %13, %7
  %19 = phi i1 [ false, %7 ], [ false, %13 ], [ %17, %16 ]
  %20 = fcmp ueq double %4, 0.000000e+00
  br i1 %20, label %26, label %21

; <label>:21:                                     ; preds = %18
  %22 = tail call double @llvm.fabs.f64(double %4) 
  %23 = fcmp oeq double %22, 0x7FF0000000000000
  br i1 %23, label %26, label %24

; <label>:24:                                     ; preds = %21
  %25 = fcmp olt double %22, 0x10000000000000
  br label %26

; <label>:26:                                     ; preds = %24, %21, %18
  %27 = phi i1 [ false, %18 ], [ false, %21 ], [ %25, %24 ]
  %28 = or i1 %19, %27
  %29 = zext i1 %28 to i8
  %30 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 17
  store i8 %29, i8* %30, align 1
  %31 = tail call i32 @__remill_fpu_exception_test_and_clear(i32 0, i32 61) 
  tail call void asm sideeffect "", "~{memory},~{dirflag},~{fpsr},~{flags}"() 
  %32 = fadd double %3, %4
  tail call void asm sideeffect "", "~{memory},~{dirflag},~{fpsr},~{flags}"() 
  %33 = tail call i32 @__remill_fpu_exception_test_and_clear(i32 61, i32 %31) 
  %34 = lshr i32 %33, 5
  %35 = and i32 %34, 1
  %36 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 9
  %37 = load i8, i8* %36, align 1
  %38 = zext i8 %37 to i32
  %39 = or i32 %38, %35
  %40 = trunc i32 %39 to i8
  store i8 %40, i8* %36, align 1
  %41 = lshr i32 %33, 3
  %42 = and i32 %41, 1
  %43 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 13
  %44 = load i8, i8* %43, align 1
  %45 = zext i8 %44 to i32
  %46 = or i32 %45, %42
  %47 = trunc i32 %46 to i8
  store i8 %47, i8* %43, align 1
  %48 = lshr i32 %33, 4
  %49 = and i32 %48, 1
  %50 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 11
  %51 = load i8, i8* %50, align 1
  %52 = zext i8 %51 to i32
  %53 = or i32 %52, %49
  %54 = trunc i32 %53 to i8
  store i8 %54, i8* %50, align 1
  %55 = and i32 %33, 1
  %56 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 19
  %57 = load i8, i8* %56, align 1
  %58 = zext i8 %57 to i32
  %59 = or i32 %58, %55
  %60 = trunc i32 %59 to i8
  store i8 %60, i8* %56, align 1
  %61 = lshr i32 %33, 2
  %62 = and i32 %61, 1
  %63 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 15
  %64 = load i8, i8* %63, align 1
  %65 = zext i8 %64 to i32
  %66 = or i32 %65, %62
  %67 = trunc i32 %66 to i8
  store i8 %67, i8* %63, align 1
  store double %32, double* %2, align 8
  %68 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 1
  store i8 0, i8* %68, align 1
  %69 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 5
  store i8 0, i8* %69, align 1
  %70 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 7
  store i8 0, i8* %70, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L7FADDmemI2MnIdEEEP6MemoryS4_R5State3RnWIdE2RnIdET_2InImESC_ItE(%struct.Memory* returned, %struct.State* nocapture dereferenceable(3376), double* nocapture, double, i64, i64, i64)  {
  %8 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 11, i32 0, i32 0, i32 8
  %9 = bitcast i32* %8 to i64*
  store i64 %4, i64* %9, align 16
  %10 = trunc i64 %6 to i16
  %11 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 11, i32 0, i32 0, i32 4
  store i16 %10, i16* %11, align 2
  %12 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 11, i32 0, i32 0, i32 5
  %13 = bitcast i32* %12 to i64*
  store i64 %5, i64* %13, align 8
  %14 = inttoptr i64 %4 to double*
  %15 = load double, double* %14
  %16 = fcmp ueq double %3, 0.000000e+00
  br i1 %16, label %22, label %17

; <label>:17:                                     ; preds = %7
  %18 = tail call double @llvm.fabs.f64(double %3) 
  %19 = fcmp oeq double %18, 0x7FF0000000000000
  br i1 %19, label %22, label %20

; <label>:20:                                     ; preds = %17
  %21 = fcmp olt double %18, 0x10000000000000
  br label %22

; <label>:22:                                     ; preds = %20, %17, %7
  %23 = phi i1 [ false, %7 ], [ false, %17 ], [ %21, %20 ]
  %24 = fcmp ueq double %15, 0.000000e+00
  br i1 %24, label %30, label %25

; <label>:25:                                     ; preds = %22
  %26 = tail call double @llvm.fabs.f64(double %15) 
  %27 = fcmp oeq double %26, 0x7FF0000000000000
  br i1 %27, label %30, label %28

; <label>:28:                                     ; preds = %25
  %29 = fcmp olt double %26, 0x10000000000000
  br label %30

; <label>:30:                                     ; preds = %28, %25, %22
  %31 = phi i1 [ false, %22 ], [ false, %25 ], [ %29, %28 ]
  %32 = or i1 %23, %31
  %33 = zext i1 %32 to i8
  %34 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 17
  store i8 %33, i8* %34, align 1
  %35 = tail call i32 @__remill_fpu_exception_test_and_clear(i32 0, i32 61) 
  tail call void asm sideeffect "", "~{memory},~{dirflag},~{fpsr},~{flags}"() 
  %36 = fadd double %15, %3
  tail call void asm sideeffect "", "~{memory},~{dirflag},~{fpsr},~{flags}"() 
  %37 = tail call i32 @__remill_fpu_exception_test_and_clear(i32 61, i32 %35) 
  %38 = lshr i32 %37, 5
  %39 = and i32 %38, 1
  %40 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 9
  %41 = load i8, i8* %40, align 1
  %42 = zext i8 %41 to i32
  %43 = or i32 %42, %39
  %44 = trunc i32 %43 to i8
  store i8 %44, i8* %40, align 1
  %45 = lshr i32 %37, 3
  %46 = and i32 %45, 1
  %47 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 13
  %48 = load i8, i8* %47, align 1
  %49 = zext i8 %48 to i32
  %50 = or i32 %49, %46
  %51 = trunc i32 %50 to i8
  store i8 %51, i8* %47, align 1
  %52 = lshr i32 %37, 4
  %53 = and i32 %52, 1
  %54 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 11
  %55 = load i8, i8* %54, align 1
  %56 = zext i8 %55 to i32
  %57 = or i32 %56, %53
  %58 = trunc i32 %57 to i8
  store i8 %58, i8* %54, align 1
  %59 = and i32 %37, 1
  %60 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 19
  %61 = load i8, i8* %60, align 1
  %62 = zext i8 %61 to i32
  %63 = or i32 %62, %59
  %64 = trunc i32 %63 to i8
  store i8 %64, i8* %60, align 1
  %65 = lshr i32 %37, 2
  %66 = and i32 %65, 1
  %67 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 15
  %68 = load i8, i8* %67, align 1
  %69 = zext i8 %68 to i32
  %70 = or i32 %69, %66
  %71 = trunc i32 %70 to i8
  store i8 %71, i8* %67, align 1
  store double %36, double* %2, align 8
  %72 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 1
  store i8 0, i8* %72, align 1
  %73 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 5
  store i8 0, i8* %73, align 1
  %74 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 7
  store i8 0, i8* %74, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L5FADDPI2RnIdEEEP6MemoryS4_R5State3RnWIdES2_T_2InImESA_ItE(%struct.Memory* readnone returned, %struct.State* nocapture dereferenceable(3376), double* nocapture, double, double, i64, i64)  {
  %8 = trunc i64 %6 to i16
  %9 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 11, i32 0, i32 0, i32 4
  store i16 %8, i16* %9, align 2
  %10 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 11, i32 0, i32 0, i32 5
  %11 = bitcast i32* %10 to i64*
  store i64 %5, i64* %11, align 8
  %12 = fcmp ueq double %3, 0.000000e+00
  br i1 %12, label %18, label %13

; <label>:13:                                     ; preds = %7
  %14 = tail call double @llvm.fabs.f64(double %3) 
  %15 = fcmp oeq double %14, 0x7FF0000000000000
  br i1 %15, label %18, label %16

; <label>:16:                                     ; preds = %13
  %17 = fcmp olt double %14, 0x10000000000000
  br label %18

; <label>:18:                                     ; preds = %16, %13, %7
  %19 = phi i1 [ false, %7 ], [ false, %13 ], [ %17, %16 ]
  %20 = fcmp ueq double %4, 0.000000e+00
  br i1 %20, label %26, label %21

; <label>:21:                                     ; preds = %18
  %22 = tail call double @llvm.fabs.f64(double %4) 
  %23 = fcmp oeq double %22, 0x7FF0000000000000
  br i1 %23, label %26, label %24

; <label>:24:                                     ; preds = %21
  %25 = fcmp olt double %22, 0x10000000000000
  br label %26

; <label>:26:                                     ; preds = %24, %21, %18
  %27 = phi i1 [ false, %18 ], [ false, %21 ], [ %25, %24 ]
  %28 = or i1 %19, %27
  %29 = zext i1 %28 to i8
  %30 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 17
  store i8 %29, i8* %30, align 1
  %31 = tail call i32 @__remill_fpu_exception_test_and_clear(i32 0, i32 61) 
  tail call void asm sideeffect "", "~{memory},~{dirflag},~{fpsr},~{flags}"() 
  %32 = fadd double %3, %4
  tail call void asm sideeffect "", "~{memory},~{dirflag},~{fpsr},~{flags}"() 
  %33 = tail call i32 @__remill_fpu_exception_test_and_clear(i32 61, i32 %31) 
  %34 = lshr i32 %33, 5
  %35 = and i32 %34, 1
  %36 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 9
  %37 = load i8, i8* %36, align 1
  %38 = zext i8 %37 to i32
  %39 = or i32 %38, %35
  %40 = trunc i32 %39 to i8
  store i8 %40, i8* %36, align 1
  %41 = lshr i32 %33, 3
  %42 = and i32 %41, 1
  %43 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 13
  %44 = load i8, i8* %43, align 1
  %45 = zext i8 %44 to i32
  %46 = or i32 %45, %42
  %47 = trunc i32 %46 to i8
  store i8 %47, i8* %43, align 1
  %48 = lshr i32 %33, 4
  %49 = and i32 %48, 1
  %50 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 11
  %51 = load i8, i8* %50, align 1
  %52 = zext i8 %51 to i32
  %53 = or i32 %52, %49
  %54 = trunc i32 %53 to i8
  store i8 %54, i8* %50, align 1
  %55 = and i32 %33, 1
  %56 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 19
  %57 = load i8, i8* %56, align 1
  %58 = zext i8 %57 to i32
  %59 = or i32 %58, %55
  %60 = trunc i32 %59 to i8
  store i8 %60, i8* %56, align 1
  %61 = lshr i32 %33, 2
  %62 = and i32 %61, 1
  %63 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 15
  %64 = load i8, i8* %63, align 1
  %65 = zext i8 %64 to i32
  %66 = or i32 %65, %62
  %67 = trunc i32 %66 to i8
  store i8 %67, i8* %63, align 1
  store double %32, double* %2, align 8
  %68 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 1
  store i8 0, i8* %68, align 1
  %69 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 5
  store i8 0, i8* %69, align 1
  %70 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 7
  store i8 0, i8* %70, align 1
  %71 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 0, i32 1
  %72 = bitcast double* %71 to i64*
  %73 = load i64, i64* %72, align 8
  %74 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 1, i32 1
  %75 = bitcast double* %74 to i64*
  %76 = load i64, i64* %75, align 8
  store i64 %76, i64* %72, align 8
  %77 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 2, i32 1
  %78 = bitcast double* %77 to i64*
  %79 = load i64, i64* %78, align 8
  store i64 %79, i64* %75, align 8
  %80 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 3, i32 1
  %81 = bitcast double* %80 to i64*
  %82 = load i64, i64* %81, align 8
  store i64 %82, i64* %78, align 8
  %83 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 4, i32 1
  %84 = bitcast double* %83 to i64*
  %85 = load i64, i64* %84, align 8
  store i64 %85, i64* %81, align 8
  %86 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 5, i32 1
  %87 = bitcast double* %86 to i64*
  %88 = load i64, i64* %87, align 8
  store i64 %88, i64* %84, align 8
  %89 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 6, i32 1
  %90 = bitcast double* %89 to i64*
  %91 = load i64, i64* %90, align 8
  store i64 %91, i64* %87, align 8
  %92 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 7, i32 1
  %93 = bitcast double* %92 to i64*
  %94 = load i64, i64* %93, align 8
  store i64 %94, i64* %90, align 8
  store i64 %73, i64* %93, align 8
  %95 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 11, i32 0, i32 0, i32 1, i32 0
  %96 = load i16, i16* %95, align 2
  %97 = add i16 %96, 2048
  %98 = and i16 %97, 14336
  %99 = and i16 %96, -14337
  %100 = or i16 %98, %99
  store i16 %100, i16* %95, align 2
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L5FIADDI2MnIjEEEP6MemoryS4_R5State3RnWIdE2RnIdET_2InImESC_ItE(%struct.Memory*, %struct.State* nocapture dereferenceable(3376), double* nocapture, double, i64, i64, i64)  {
  %8 = trunc i64 %6 to i16
  %9 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 11, i32 0, i32 0, i32 4
  store i16 %8, i16* %9, align 2
  %10 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 11, i32 0, i32 0, i32 5
  %11 = bitcast i32* %10 to i64*
  store i64 %5, i64* %11, align 8
  %12 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 11, i32 0, i32 0, i32 8
  %13 = bitcast i32* %12 to i64*
  store i64 %4, i64* %13, align 16
  %14 = inttoptr i64 %4 to i32*
  %15 = load i32, i32* %14
  %16 = sitofp i32 %15 to double
  %17 = fcmp ueq double %3, 0.000000e+00
  br i1 %17, label %23, label %18

; <label>:18:                                     ; preds = %7
  %19 = tail call double @llvm.fabs.f64(double %3) 
  %20 = fcmp oeq double %19, 0x7FF0000000000000
  br i1 %20, label %23, label %21

; <label>:21:                                     ; preds = %18
  %22 = fcmp olt double %19, 0x10000000000000
  br label %23

; <label>:23:                                     ; preds = %21, %18, %7
  %24 = phi i1 [ false, %7 ], [ false, %18 ], [ %22, %21 ]
  %25 = icmp eq i32 %15, 0
  br i1 %25, label %31, label %26

; <label>:26:                                     ; preds = %23
  %27 = tail call double @llvm.fabs.f64(double %16) 
  %28 = fcmp oeq double %27, 0x7FF0000000000000
  br i1 %28, label %31, label %29

; <label>:29:                                     ; preds = %26
  %30 = fcmp olt double %27, 0x10000000000000
  br label %31

; <label>:31:                                     ; preds = %29, %26, %23
  %32 = phi i1 [ false, %23 ], [ false, %26 ], [ %30, %29 ]
  %33 = or i1 %24, %32
  %34 = zext i1 %33 to i8
  %35 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 17
  store i8 %34, i8* %35, align 1
  %36 = tail call i32 @__remill_fpu_exception_test_and_clear(i32 0, i32 61) 
  tail call void asm sideeffect "", "~{memory},~{dirflag},~{fpsr},~{flags}"() 
  %37 = fadd double %16, %3
  tail call void asm sideeffect "", "~{memory},~{dirflag},~{fpsr},~{flags}"() 
  %38 = tail call i32 @__remill_fpu_exception_test_and_clear(i32 61, i32 %36) 
  %39 = lshr i32 %38, 5
  %40 = and i32 %39, 1
  %41 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 9
  %42 = load i8, i8* %41, align 1
  %43 = zext i8 %42 to i32
  %44 = or i32 %43, %40
  %45 = trunc i32 %44 to i8
  store i8 %45, i8* %41, align 1
  %46 = lshr i32 %38, 3
  %47 = and i32 %46, 1
  %48 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 13
  %49 = load i8, i8* %48, align 1
  %50 = zext i8 %49 to i32
  %51 = or i32 %50, %47
  %52 = trunc i32 %51 to i8
  store i8 %52, i8* %48, align 1
  %53 = lshr i32 %38, 4
  %54 = and i32 %53, 1
  %55 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 11
  %56 = load i8, i8* %55, align 1
  %57 = zext i8 %56 to i32
  %58 = or i32 %57, %54
  %59 = trunc i32 %58 to i8
  store i8 %59, i8* %55, align 1
  %60 = and i32 %38, 1
  %61 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 19
  %62 = load i8, i8* %61, align 1
  %63 = zext i8 %62 to i32
  %64 = or i32 %63, %60
  %65 = trunc i32 %64 to i8
  store i8 %65, i8* %61, align 1
  %66 = lshr i32 %38, 2
  %67 = and i32 %66, 1
  %68 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 15
  %69 = load i8, i8* %68, align 1
  %70 = zext i8 %69 to i32
  %71 = or i32 %70, %67
  %72 = trunc i32 %71 to i8
  store i8 %72, i8* %68, align 1
  store double %37, double* %2, align 8
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L5FIADDI2MnItEEEP6MemoryS4_R5State3RnWIdE2RnIdET_2InImESC_ItE(%struct.Memory*, %struct.State* nocapture dereferenceable(3376), double* nocapture, double, i64, i64, i64)  {
  %8 = trunc i64 %6 to i16
  %9 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 11, i32 0, i32 0, i32 4
  store i16 %8, i16* %9, align 2
  %10 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 11, i32 0, i32 0, i32 5
  %11 = bitcast i32* %10 to i64*
  store i64 %5, i64* %11, align 8
  %12 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 11, i32 0, i32 0, i32 8
  %13 = bitcast i32* %12 to i64*
  store i64 %4, i64* %13, align 16
  %14 = inttoptr i64 %4 to i16*
  %15 = load i16, i16* %14
  %16 = sitofp i16 %15 to double
  %17 = fcmp ueq double %3, 0.000000e+00
  br i1 %17, label %23, label %18

; <label>:18:                                     ; preds = %7
  %19 = tail call double @llvm.fabs.f64(double %3) 
  %20 = fcmp oeq double %19, 0x7FF0000000000000
  br i1 %20, label %23, label %21

; <label>:21:                                     ; preds = %18
  %22 = fcmp olt double %19, 0x10000000000000
  br label %23

; <label>:23:                                     ; preds = %21, %18, %7
  %24 = phi i1 [ false, %7 ], [ false, %18 ], [ %22, %21 ]
  %25 = icmp eq i16 %15, 0
  br i1 %25, label %31, label %26

; <label>:26:                                     ; preds = %23
  %27 = tail call double @llvm.fabs.f64(double %16) 
  %28 = fcmp oeq double %27, 0x7FF0000000000000
  br i1 %28, label %31, label %29

; <label>:29:                                     ; preds = %26
  %30 = fcmp olt double %27, 0x10000000000000
  br label %31

; <label>:31:                                     ; preds = %29, %26, %23
  %32 = phi i1 [ false, %23 ], [ false, %26 ], [ %30, %29 ]
  %33 = or i1 %24, %32
  %34 = zext i1 %33 to i8
  %35 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 17
  store i8 %34, i8* %35, align 1
  %36 = tail call i32 @__remill_fpu_exception_test_and_clear(i32 0, i32 61) 
  tail call void asm sideeffect "", "~{memory},~{dirflag},~{fpsr},~{flags}"() 
  %37 = fadd double %16, %3
  tail call void asm sideeffect "", "~{memory},~{dirflag},~{fpsr},~{flags}"() 
  %38 = tail call i32 @__remill_fpu_exception_test_and_clear(i32 61, i32 %36) 
  %39 = lshr i32 %38, 5
  %40 = and i32 %39, 1
  %41 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 9
  %42 = load i8, i8* %41, align 1
  %43 = zext i8 %42 to i32
  %44 = or i32 %43, %40
  %45 = trunc i32 %44 to i8
  store i8 %45, i8* %41, align 1
  %46 = lshr i32 %38, 3
  %47 = and i32 %46, 1
  %48 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 13
  %49 = load i8, i8* %48, align 1
  %50 = zext i8 %49 to i32
  %51 = or i32 %50, %47
  %52 = trunc i32 %51 to i8
  store i8 %52, i8* %48, align 1
  %53 = lshr i32 %38, 4
  %54 = and i32 %53, 1
  %55 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 11
  %56 = load i8, i8* %55, align 1
  %57 = zext i8 %56 to i32
  %58 = or i32 %57, %54
  %59 = trunc i32 %58 to i8
  store i8 %59, i8* %55, align 1
  %60 = and i32 %38, 1
  %61 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 19
  %62 = load i8, i8* %61, align 1
  %63 = zext i8 %62 to i32
  %64 = or i32 %63, %60
  %65 = trunc i32 %64 to i8
  store i8 %65, i8* %61, align 1
  %66 = lshr i32 %38, 2
  %67 = and i32 %66, 1
  %68 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 15
  %69 = load i8, i8* %68, align 1
  %70 = zext i8 %69 to i32
  %71 = or i32 %70, %67
  %72 = trunc i32 %71 to i8
  store i8 %72, i8* %68, align 1
  store double %37, double* %2, align 8
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L7FMULmemI2MnIfEEEP6MemoryS4_R5State3RnWIdE2RnIdET_2InImESC_ItE(%struct.Memory* returned, %struct.State* nocapture dereferenceable(3376), double* nocapture, double, i64, i64, i64)  {
  %8 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 11, i32 0, i32 0, i32 8
  %9 = bitcast i32* %8 to i64*
  store i64 %4, i64* %9, align 16
  %10 = trunc i64 %6 to i16
  %11 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 11, i32 0, i32 0, i32 4
  store i16 %10, i16* %11, align 2
  %12 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 11, i32 0, i32 0, i32 5
  %13 = bitcast i32* %12 to i64*
  store i64 %5, i64* %13, align 8
  %14 = inttoptr i64 %4 to float*
  %15 = load float, float* %14
  %16 = fpext float %15 to double
  %17 = fcmp ueq double %3, 0.000000e+00
  br i1 %17, label %23, label %18

; <label>:18:                                     ; preds = %7
  %19 = tail call double @llvm.fabs.f64(double %3) 
  %20 = fcmp oeq double %19, 0x7FF0000000000000
  br i1 %20, label %23, label %21

; <label>:21:                                     ; preds = %18
  %22 = fcmp olt double %19, 0x10000000000000
  br label %23

; <label>:23:                                     ; preds = %21, %18, %7
  %24 = phi i1 [ false, %7 ], [ false, %18 ], [ %22, %21 ]
  %25 = fcmp ueq float %15, 0.000000e+00
  br i1 %25, label %31, label %26

; <label>:26:                                     ; preds = %23
  %27 = tail call double @llvm.fabs.f64(double %16) 
  %28 = fcmp oeq double %27, 0x7FF0000000000000
  br i1 %28, label %31, label %29

; <label>:29:                                     ; preds = %26
  %30 = fcmp olt double %27, 0x10000000000000
  br label %31

; <label>:31:                                     ; preds = %29, %26, %23
  %32 = phi i1 [ false, %23 ], [ false, %26 ], [ %30, %29 ]
  %33 = or i1 %24, %32
  %34 = zext i1 %33 to i8
  %35 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 17
  store i8 %34, i8* %35, align 1
  %36 = tail call i32 @__remill_fpu_exception_test_and_clear(i32 0, i32 61) 
  tail call void asm sideeffect "", "~{memory},~{dirflag},~{fpsr},~{flags}"() 
  %37 = fmul double %16, %3
  tail call void asm sideeffect "", "~{memory},~{dirflag},~{fpsr},~{flags}"() 
  %38 = tail call i32 @__remill_fpu_exception_test_and_clear(i32 61, i32 %36) 
  %39 = lshr i32 %38, 5
  %40 = and i32 %39, 1
  %41 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 9
  %42 = load i8, i8* %41, align 1
  %43 = zext i8 %42 to i32
  %44 = or i32 %43, %40
  %45 = trunc i32 %44 to i8
  store i8 %45, i8* %41, align 1
  %46 = lshr i32 %38, 3
  %47 = and i32 %46, 1
  %48 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 13
  %49 = load i8, i8* %48, align 1
  %50 = zext i8 %49 to i32
  %51 = or i32 %50, %47
  %52 = trunc i32 %51 to i8
  store i8 %52, i8* %48, align 1
  %53 = lshr i32 %38, 4
  %54 = and i32 %53, 1
  %55 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 11
  %56 = load i8, i8* %55, align 1
  %57 = zext i8 %56 to i32
  %58 = or i32 %57, %54
  %59 = trunc i32 %58 to i8
  store i8 %59, i8* %55, align 1
  %60 = and i32 %38, 1
  %61 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 19
  %62 = load i8, i8* %61, align 1
  %63 = zext i8 %62 to i32
  %64 = or i32 %63, %60
  %65 = trunc i32 %64 to i8
  store i8 %65, i8* %61, align 1
  %66 = lshr i32 %38, 2
  %67 = and i32 %66, 1
  %68 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 15
  %69 = load i8, i8* %68, align 1
  %70 = zext i8 %69 to i32
  %71 = or i32 %70, %67
  %72 = trunc i32 %71 to i8
  store i8 %72, i8* %68, align 1
  store double %37, double* %2, align 8
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L4FMULI2RnIdEEEP6MemoryS4_R5State3RnWIdES2_T_2InImESA_ItE(%struct.Memory* readnone returned, %struct.State* nocapture dereferenceable(3376), double* nocapture, double, double, i64, i64)  {
  %8 = trunc i64 %6 to i16
  %9 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 11, i32 0, i32 0, i32 4
  store i16 %8, i16* %9, align 2
  %10 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 11, i32 0, i32 0, i32 5
  %11 = bitcast i32* %10 to i64*
  store i64 %5, i64* %11, align 8
  %12 = fcmp ueq double %3, 0.000000e+00
  br i1 %12, label %18, label %13

; <label>:13:                                     ; preds = %7
  %14 = tail call double @llvm.fabs.f64(double %3) 
  %15 = fcmp oeq double %14, 0x7FF0000000000000
  br i1 %15, label %18, label %16

; <label>:16:                                     ; preds = %13
  %17 = fcmp olt double %14, 0x10000000000000
  br label %18

; <label>:18:                                     ; preds = %16, %13, %7
  %19 = phi i1 [ false, %7 ], [ false, %13 ], [ %17, %16 ]
  %20 = fcmp ueq double %4, 0.000000e+00
  br i1 %20, label %26, label %21

; <label>:21:                                     ; preds = %18
  %22 = tail call double @llvm.fabs.f64(double %4) 
  %23 = fcmp oeq double %22, 0x7FF0000000000000
  br i1 %23, label %26, label %24

; <label>:24:                                     ; preds = %21
  %25 = fcmp olt double %22, 0x10000000000000
  br label %26

; <label>:26:                                     ; preds = %24, %21, %18
  %27 = phi i1 [ false, %18 ], [ false, %21 ], [ %25, %24 ]
  %28 = or i1 %19, %27
  %29 = zext i1 %28 to i8
  %30 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 17
  store i8 %29, i8* %30, align 1
  %31 = tail call i32 @__remill_fpu_exception_test_and_clear(i32 0, i32 61) 
  tail call void asm sideeffect "", "~{memory},~{dirflag},~{fpsr},~{flags}"() 
  %32 = fmul double %3, %4
  tail call void asm sideeffect "", "~{memory},~{dirflag},~{fpsr},~{flags}"() 
  %33 = tail call i32 @__remill_fpu_exception_test_and_clear(i32 61, i32 %31) 
  %34 = lshr i32 %33, 5
  %35 = and i32 %34, 1
  %36 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 9
  %37 = load i8, i8* %36, align 1
  %38 = zext i8 %37 to i32
  %39 = or i32 %38, %35
  %40 = trunc i32 %39 to i8
  store i8 %40, i8* %36, align 1
  %41 = lshr i32 %33, 3
  %42 = and i32 %41, 1
  %43 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 13
  %44 = load i8, i8* %43, align 1
  %45 = zext i8 %44 to i32
  %46 = or i32 %45, %42
  %47 = trunc i32 %46 to i8
  store i8 %47, i8* %43, align 1
  %48 = lshr i32 %33, 4
  %49 = and i32 %48, 1
  %50 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 11
  %51 = load i8, i8* %50, align 1
  %52 = zext i8 %51 to i32
  %53 = or i32 %52, %49
  %54 = trunc i32 %53 to i8
  store i8 %54, i8* %50, align 1
  %55 = and i32 %33, 1
  %56 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 19
  %57 = load i8, i8* %56, align 1
  %58 = zext i8 %57 to i32
  %59 = or i32 %58, %55
  %60 = trunc i32 %59 to i8
  store i8 %60, i8* %56, align 1
  %61 = lshr i32 %33, 2
  %62 = and i32 %61, 1
  %63 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 15
  %64 = load i8, i8* %63, align 1
  %65 = zext i8 %64 to i32
  %66 = or i32 %65, %62
  %67 = trunc i32 %66 to i8
  store i8 %67, i8* %63, align 1
  store double %32, double* %2, align 8
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L7FMULmemI2MnIdEEEP6MemoryS4_R5State3RnWIdE2RnIdET_2InImESC_ItE(%struct.Memory* returned, %struct.State* nocapture dereferenceable(3376), double* nocapture, double, i64, i64, i64)  {
  %8 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 11, i32 0, i32 0, i32 8
  %9 = bitcast i32* %8 to i64*
  store i64 %4, i64* %9, align 16
  %10 = trunc i64 %6 to i16
  %11 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 11, i32 0, i32 0, i32 4
  store i16 %10, i16* %11, align 2
  %12 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 11, i32 0, i32 0, i32 5
  %13 = bitcast i32* %12 to i64*
  store i64 %5, i64* %13, align 8
  %14 = inttoptr i64 %4 to double*
  %15 = load double, double* %14
  %16 = fcmp ueq double %3, 0.000000e+00
  br i1 %16, label %22, label %17

; <label>:17:                                     ; preds = %7
  %18 = tail call double @llvm.fabs.f64(double %3) 
  %19 = fcmp oeq double %18, 0x7FF0000000000000
  br i1 %19, label %22, label %20

; <label>:20:                                     ; preds = %17
  %21 = fcmp olt double %18, 0x10000000000000
  br label %22

; <label>:22:                                     ; preds = %20, %17, %7
  %23 = phi i1 [ false, %7 ], [ false, %17 ], [ %21, %20 ]
  %24 = fcmp ueq double %15, 0.000000e+00
  br i1 %24, label %30, label %25

; <label>:25:                                     ; preds = %22
  %26 = tail call double @llvm.fabs.f64(double %15) 
  %27 = fcmp oeq double %26, 0x7FF0000000000000
  br i1 %27, label %30, label %28

; <label>:28:                                     ; preds = %25
  %29 = fcmp olt double %26, 0x10000000000000
  br label %30

; <label>:30:                                     ; preds = %28, %25, %22
  %31 = phi i1 [ false, %22 ], [ false, %25 ], [ %29, %28 ]
  %32 = or i1 %23, %31
  %33 = zext i1 %32 to i8
  %34 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 17
  store i8 %33, i8* %34, align 1
  %35 = tail call i32 @__remill_fpu_exception_test_and_clear(i32 0, i32 61) 
  tail call void asm sideeffect "", "~{memory},~{dirflag},~{fpsr},~{flags}"() 
  %36 = fmul double %15, %3
  tail call void asm sideeffect "", "~{memory},~{dirflag},~{fpsr},~{flags}"() 
  %37 = tail call i32 @__remill_fpu_exception_test_and_clear(i32 61, i32 %35) 
  %38 = lshr i32 %37, 5
  %39 = and i32 %38, 1
  %40 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 9
  %41 = load i8, i8* %40, align 1
  %42 = zext i8 %41 to i32
  %43 = or i32 %42, %39
  %44 = trunc i32 %43 to i8
  store i8 %44, i8* %40, align 1
  %45 = lshr i32 %37, 3
  %46 = and i32 %45, 1
  %47 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 13
  %48 = load i8, i8* %47, align 1
  %49 = zext i8 %48 to i32
  %50 = or i32 %49, %46
  %51 = trunc i32 %50 to i8
  store i8 %51, i8* %47, align 1
  %52 = lshr i32 %37, 4
  %53 = and i32 %52, 1
  %54 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 11
  %55 = load i8, i8* %54, align 1
  %56 = zext i8 %55 to i32
  %57 = or i32 %56, %53
  %58 = trunc i32 %57 to i8
  store i8 %58, i8* %54, align 1
  %59 = and i32 %37, 1
  %60 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 19
  %61 = load i8, i8* %60, align 1
  %62 = zext i8 %61 to i32
  %63 = or i32 %62, %59
  %64 = trunc i32 %63 to i8
  store i8 %64, i8* %60, align 1
  %65 = lshr i32 %37, 2
  %66 = and i32 %65, 1
  %67 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 15
  %68 = load i8, i8* %67, align 1
  %69 = zext i8 %68 to i32
  %70 = or i32 %69, %66
  %71 = trunc i32 %70 to i8
  store i8 %71, i8* %67, align 1
  store double %36, double* %2, align 8
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L5FMULPI2RnIdEEEP6MemoryS4_R5State3RnWIdES2_T_2InImESA_ItE(%struct.Memory* readnone returned, %struct.State* nocapture dereferenceable(3376), double* nocapture, double, double, i64, i64)  {
  %8 = trunc i64 %6 to i16
  %9 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 11, i32 0, i32 0, i32 4
  store i16 %8, i16* %9, align 2
  %10 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 11, i32 0, i32 0, i32 5
  %11 = bitcast i32* %10 to i64*
  store i64 %5, i64* %11, align 8
  %12 = fcmp ueq double %3, 0.000000e+00
  br i1 %12, label %18, label %13

; <label>:13:                                     ; preds = %7
  %14 = tail call double @llvm.fabs.f64(double %3) 
  %15 = fcmp oeq double %14, 0x7FF0000000000000
  br i1 %15, label %18, label %16

; <label>:16:                                     ; preds = %13
  %17 = fcmp olt double %14, 0x10000000000000
  br label %18

; <label>:18:                                     ; preds = %16, %13, %7
  %19 = phi i1 [ false, %7 ], [ false, %13 ], [ %17, %16 ]
  %20 = fcmp ueq double %4, 0.000000e+00
  br i1 %20, label %26, label %21

; <label>:21:                                     ; preds = %18
  %22 = tail call double @llvm.fabs.f64(double %4) 
  %23 = fcmp oeq double %22, 0x7FF0000000000000
  br i1 %23, label %26, label %24

; <label>:24:                                     ; preds = %21
  %25 = fcmp olt double %22, 0x10000000000000
  br label %26

; <label>:26:                                     ; preds = %24, %21, %18
  %27 = phi i1 [ false, %18 ], [ false, %21 ], [ %25, %24 ]
  %28 = or i1 %19, %27
  %29 = zext i1 %28 to i8
  %30 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 17
  store i8 %29, i8* %30, align 1
  %31 = tail call i32 @__remill_fpu_exception_test_and_clear(i32 0, i32 61) 
  tail call void asm sideeffect "", "~{memory},~{dirflag},~{fpsr},~{flags}"() 
  %32 = fmul double %3, %4
  tail call void asm sideeffect "", "~{memory},~{dirflag},~{fpsr},~{flags}"() 
  %33 = tail call i32 @__remill_fpu_exception_test_and_clear(i32 61, i32 %31) 
  %34 = lshr i32 %33, 5
  %35 = and i32 %34, 1
  %36 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 9
  %37 = load i8, i8* %36, align 1
  %38 = zext i8 %37 to i32
  %39 = or i32 %38, %35
  %40 = trunc i32 %39 to i8
  store i8 %40, i8* %36, align 1
  %41 = lshr i32 %33, 3
  %42 = and i32 %41, 1
  %43 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 13
  %44 = load i8, i8* %43, align 1
  %45 = zext i8 %44 to i32
  %46 = or i32 %45, %42
  %47 = trunc i32 %46 to i8
  store i8 %47, i8* %43, align 1
  %48 = lshr i32 %33, 4
  %49 = and i32 %48, 1
  %50 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 11
  %51 = load i8, i8* %50, align 1
  %52 = zext i8 %51 to i32
  %53 = or i32 %52, %49
  %54 = trunc i32 %53 to i8
  store i8 %54, i8* %50, align 1
  %55 = and i32 %33, 1
  %56 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 19
  %57 = load i8, i8* %56, align 1
  %58 = zext i8 %57 to i32
  %59 = or i32 %58, %55
  %60 = trunc i32 %59 to i8
  store i8 %60, i8* %56, align 1
  %61 = lshr i32 %33, 2
  %62 = and i32 %61, 1
  %63 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 15
  %64 = load i8, i8* %63, align 1
  %65 = zext i8 %64 to i32
  %66 = or i32 %65, %62
  %67 = trunc i32 %66 to i8
  store i8 %67, i8* %63, align 1
  store double %32, double* %2, align 8
  %68 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 0, i32 1
  %69 = bitcast double* %68 to i64*
  %70 = load i64, i64* %69, align 8
  %71 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 1, i32 1
  %72 = bitcast double* %71 to i64*
  %73 = load i64, i64* %72, align 8
  store i64 %73, i64* %69, align 8
  %74 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 2, i32 1
  %75 = bitcast double* %74 to i64*
  %76 = load i64, i64* %75, align 8
  store i64 %76, i64* %72, align 8
  %77 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 3, i32 1
  %78 = bitcast double* %77 to i64*
  %79 = load i64, i64* %78, align 8
  store i64 %79, i64* %75, align 8
  %80 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 4, i32 1
  %81 = bitcast double* %80 to i64*
  %82 = load i64, i64* %81, align 8
  store i64 %82, i64* %78, align 8
  %83 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 5, i32 1
  %84 = bitcast double* %83 to i64*
  %85 = load i64, i64* %84, align 8
  store i64 %85, i64* %81, align 8
  %86 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 6, i32 1
  %87 = bitcast double* %86 to i64*
  %88 = load i64, i64* %87, align 8
  store i64 %88, i64* %84, align 8
  %89 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 7, i32 1
  %90 = bitcast double* %89 to i64*
  %91 = load i64, i64* %90, align 8
  store i64 %91, i64* %87, align 8
  store i64 %70, i64* %90, align 8
  %92 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 11, i32 0, i32 0, i32 1, i32 0
  %93 = load i16, i16* %92, align 2
  %94 = add i16 %93, 2048
  %95 = and i16 %94, 14336
  %96 = and i16 %93, -14337
  %97 = or i16 %95, %96
  store i16 %97, i16* %92, align 2
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L5FIMULI2MnIjEEEP6MemoryS4_R5State3RnWIdE2RnIdET_2InImESC_ItE(%struct.Memory*, %struct.State* nocapture dereferenceable(3376), double* nocapture, double, i64, i64, i64)  {
  %8 = trunc i64 %6 to i16
  %9 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 11, i32 0, i32 0, i32 4
  store i16 %8, i16* %9, align 2
  %10 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 11, i32 0, i32 0, i32 5
  %11 = bitcast i32* %10 to i64*
  store i64 %5, i64* %11, align 8
  %12 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 11, i32 0, i32 0, i32 8
  %13 = bitcast i32* %12 to i64*
  store i64 %4, i64* %13, align 16
  %14 = inttoptr i64 %4 to i32*
  %15 = load i32, i32* %14
  %16 = sitofp i32 %15 to double
  %17 = fcmp ueq double %3, 0.000000e+00
  br i1 %17, label %23, label %18

; <label>:18:                                     ; preds = %7
  %19 = tail call double @llvm.fabs.f64(double %3) 
  %20 = fcmp oeq double %19, 0x7FF0000000000000
  br i1 %20, label %23, label %21

; <label>:21:                                     ; preds = %18
  %22 = fcmp olt double %19, 0x10000000000000
  br label %23

; <label>:23:                                     ; preds = %21, %18, %7
  %24 = phi i1 [ false, %7 ], [ false, %18 ], [ %22, %21 ]
  %25 = icmp eq i32 %15, 0
  br i1 %25, label %31, label %26

; <label>:26:                                     ; preds = %23
  %27 = tail call double @llvm.fabs.f64(double %16) 
  %28 = fcmp oeq double %27, 0x7FF0000000000000
  br i1 %28, label %31, label %29

; <label>:29:                                     ; preds = %26
  %30 = fcmp olt double %27, 0x10000000000000
  br label %31

; <label>:31:                                     ; preds = %29, %26, %23
  %32 = phi i1 [ false, %23 ], [ false, %26 ], [ %30, %29 ]
  %33 = or i1 %24, %32
  %34 = zext i1 %33 to i8
  %35 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 17
  store i8 %34, i8* %35, align 1
  %36 = tail call i32 @__remill_fpu_exception_test_and_clear(i32 0, i32 61) 
  tail call void asm sideeffect "", "~{memory},~{dirflag},~{fpsr},~{flags}"() 
  %37 = fmul double %16, %3
  tail call void asm sideeffect "", "~{memory},~{dirflag},~{fpsr},~{flags}"() 
  %38 = tail call i32 @__remill_fpu_exception_test_and_clear(i32 61, i32 %36) 
  %39 = lshr i32 %38, 5
  %40 = and i32 %39, 1
  %41 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 9
  %42 = load i8, i8* %41, align 1
  %43 = zext i8 %42 to i32
  %44 = or i32 %43, %40
  %45 = trunc i32 %44 to i8
  store i8 %45, i8* %41, align 1
  %46 = lshr i32 %38, 3
  %47 = and i32 %46, 1
  %48 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 13
  %49 = load i8, i8* %48, align 1
  %50 = zext i8 %49 to i32
  %51 = or i32 %50, %47
  %52 = trunc i32 %51 to i8
  store i8 %52, i8* %48, align 1
  %53 = lshr i32 %38, 4
  %54 = and i32 %53, 1
  %55 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 11
  %56 = load i8, i8* %55, align 1
  %57 = zext i8 %56 to i32
  %58 = or i32 %57, %54
  %59 = trunc i32 %58 to i8
  store i8 %59, i8* %55, align 1
  %60 = and i32 %38, 1
  %61 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 19
  %62 = load i8, i8* %61, align 1
  %63 = zext i8 %62 to i32
  %64 = or i32 %63, %60
  %65 = trunc i32 %64 to i8
  store i8 %65, i8* %61, align 1
  %66 = lshr i32 %38, 2
  %67 = and i32 %66, 1
  %68 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 15
  %69 = load i8, i8* %68, align 1
  %70 = zext i8 %69 to i32
  %71 = or i32 %70, %67
  %72 = trunc i32 %71 to i8
  store i8 %72, i8* %68, align 1
  store double %37, double* %2, align 8
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L5FIMULI2MnItEEEP6MemoryS4_R5State3RnWIdE2RnIdET_2InImESC_ItE(%struct.Memory*, %struct.State* nocapture dereferenceable(3376), double* nocapture, double, i64, i64, i64)  {
  %8 = trunc i64 %6 to i16
  %9 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 11, i32 0, i32 0, i32 4
  store i16 %8, i16* %9, align 2
  %10 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 11, i32 0, i32 0, i32 5
  %11 = bitcast i32* %10 to i64*
  store i64 %5, i64* %11, align 8
  %12 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 11, i32 0, i32 0, i32 8
  %13 = bitcast i32* %12 to i64*
  store i64 %4, i64* %13, align 16
  %14 = inttoptr i64 %4 to i16*
  %15 = load i16, i16* %14
  %16 = sitofp i16 %15 to double
  %17 = fcmp ueq double %3, 0.000000e+00
  br i1 %17, label %23, label %18

; <label>:18:                                     ; preds = %7
  %19 = tail call double @llvm.fabs.f64(double %3) 
  %20 = fcmp oeq double %19, 0x7FF0000000000000
  br i1 %20, label %23, label %21

; <label>:21:                                     ; preds = %18
  %22 = fcmp olt double %19, 0x10000000000000
  br label %23

; <label>:23:                                     ; preds = %21, %18, %7
  %24 = phi i1 [ false, %7 ], [ false, %18 ], [ %22, %21 ]
  %25 = icmp eq i16 %15, 0
  br i1 %25, label %31, label %26

; <label>:26:                                     ; preds = %23
  %27 = tail call double @llvm.fabs.f64(double %16) 
  %28 = fcmp oeq double %27, 0x7FF0000000000000
  br i1 %28, label %31, label %29

; <label>:29:                                     ; preds = %26
  %30 = fcmp olt double %27, 0x10000000000000
  br label %31

; <label>:31:                                     ; preds = %29, %26, %23
  %32 = phi i1 [ false, %23 ], [ false, %26 ], [ %30, %29 ]
  %33 = or i1 %24, %32
  %34 = zext i1 %33 to i8
  %35 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 17
  store i8 %34, i8* %35, align 1
  %36 = tail call i32 @__remill_fpu_exception_test_and_clear(i32 0, i32 61) 
  tail call void asm sideeffect "", "~{memory},~{dirflag},~{fpsr},~{flags}"() 
  %37 = fmul double %16, %3
  tail call void asm sideeffect "", "~{memory},~{dirflag},~{fpsr},~{flags}"() 
  %38 = tail call i32 @__remill_fpu_exception_test_and_clear(i32 61, i32 %36) 
  %39 = lshr i32 %38, 5
  %40 = and i32 %39, 1
  %41 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 9
  %42 = load i8, i8* %41, align 1
  %43 = zext i8 %42 to i32
  %44 = or i32 %43, %40
  %45 = trunc i32 %44 to i8
  store i8 %45, i8* %41, align 1
  %46 = lshr i32 %38, 3
  %47 = and i32 %46, 1
  %48 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 13
  %49 = load i8, i8* %48, align 1
  %50 = zext i8 %49 to i32
  %51 = or i32 %50, %47
  %52 = trunc i32 %51 to i8
  store i8 %52, i8* %48, align 1
  %53 = lshr i32 %38, 4
  %54 = and i32 %53, 1
  %55 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 11
  %56 = load i8, i8* %55, align 1
  %57 = zext i8 %56 to i32
  %58 = or i32 %57, %54
  %59 = trunc i32 %58 to i8
  store i8 %59, i8* %55, align 1
  %60 = and i32 %38, 1
  %61 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 19
  %62 = load i8, i8* %61, align 1
  %63 = zext i8 %62 to i32
  %64 = or i32 %63, %60
  %65 = trunc i32 %64 to i8
  store i8 %65, i8* %61, align 1
  %66 = lshr i32 %38, 2
  %67 = and i32 %66, 1
  %68 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 15
  %69 = load i8, i8* %68, align 1
  %70 = zext i8 %69 to i32
  %71 = or i32 %70, %67
  %72 = trunc i32 %71 to i8
  store i8 %72, i8* %68, align 1
  store double %37, double* %2, align 8
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L7FDIVmemI2MnIfEEEP6MemoryS4_R5State3RnWIdE2RnIdET_2InImESC_ItE(%struct.Memory* returned, %struct.State* nocapture dereferenceable(3376), double* nocapture, double, i64, i64, i64)  {
  %8 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 11, i32 0, i32 0, i32 8
  %9 = bitcast i32* %8 to i64*
  store i64 %4, i64* %9, align 16
  %10 = trunc i64 %6 to i16
  %11 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 11, i32 0, i32 0, i32 4
  store i16 %10, i16* %11, align 2
  %12 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 11, i32 0, i32 0, i32 5
  %13 = bitcast i32* %12 to i64*
  store i64 %5, i64* %13, align 8
  %14 = inttoptr i64 %4 to float*
  %15 = load float, float* %14
  %16 = fpext float %15 to double
  %17 = fcmp ueq double %3, 0.000000e+00
  br i1 %17, label %23, label %18

; <label>:18:                                     ; preds = %7
  %19 = tail call double @llvm.fabs.f64(double %3) 
  %20 = fcmp oeq double %19, 0x7FF0000000000000
  br i1 %20, label %23, label %21

; <label>:21:                                     ; preds = %18
  %22 = fcmp olt double %19, 0x10000000000000
  br label %23

; <label>:23:                                     ; preds = %21, %18, %7
  %24 = phi i1 [ false, %7 ], [ false, %18 ], [ %22, %21 ]
  %25 = fcmp ueq float %15, 0.000000e+00
  br i1 %25, label %31, label %26

; <label>:26:                                     ; preds = %23
  %27 = tail call double @llvm.fabs.f64(double %16) 
  %28 = fcmp oeq double %27, 0x7FF0000000000000
  br i1 %28, label %31, label %29

; <label>:29:                                     ; preds = %26
  %30 = fcmp olt double %27, 0x10000000000000
  br label %31

; <label>:31:                                     ; preds = %29, %26, %23
  %32 = phi i1 [ false, %23 ], [ false, %26 ], [ %30, %29 ]
  %33 = or i1 %24, %32
  %34 = zext i1 %33 to i8
  %35 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 17
  store i8 %34, i8* %35, align 1
  %36 = tail call i32 @__remill_fpu_exception_test_and_clear(i32 0, i32 61) 
  tail call void asm sideeffect "", "~{memory},~{dirflag},~{fpsr},~{flags}"() 
  %37 = fdiv double %3, %16
  tail call void asm sideeffect "", "~{memory},~{dirflag},~{fpsr},~{flags}"() 
  %38 = tail call i32 @__remill_fpu_exception_test_and_clear(i32 61, i32 %36) 
  %39 = lshr i32 %38, 5
  %40 = and i32 %39, 1
  %41 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 9
  %42 = load i8, i8* %41, align 1
  %43 = zext i8 %42 to i32
  %44 = or i32 %43, %40
  %45 = trunc i32 %44 to i8
  store i8 %45, i8* %41, align 1
  %46 = lshr i32 %38, 3
  %47 = and i32 %46, 1
  %48 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 13
  %49 = load i8, i8* %48, align 1
  %50 = zext i8 %49 to i32
  %51 = or i32 %50, %47
  %52 = trunc i32 %51 to i8
  store i8 %52, i8* %48, align 1
  %53 = lshr i32 %38, 4
  %54 = and i32 %53, 1
  %55 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 11
  %56 = load i8, i8* %55, align 1
  %57 = zext i8 %56 to i32
  %58 = or i32 %57, %54
  %59 = trunc i32 %58 to i8
  store i8 %59, i8* %55, align 1
  %60 = and i32 %38, 1
  %61 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 19
  %62 = load i8, i8* %61, align 1
  %63 = zext i8 %62 to i32
  %64 = or i32 %63, %60
  %65 = trunc i32 %64 to i8
  store i8 %65, i8* %61, align 1
  %66 = lshr i32 %38, 2
  %67 = and i32 %66, 1
  %68 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 15
  %69 = load i8, i8* %68, align 1
  %70 = zext i8 %69 to i32
  %71 = or i32 %70, %67
  %72 = trunc i32 %71 to i8
  store i8 %72, i8* %68, align 1
  store double %37, double* %2, align 8
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L7FDIVmemI2MnIdEEEP6MemoryS4_R5State3RnWIdE2RnIdET_2InImESC_ItE(%struct.Memory* returned, %struct.State* nocapture dereferenceable(3376), double* nocapture, double, i64, i64, i64)  {
  %8 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 11, i32 0, i32 0, i32 8
  %9 = bitcast i32* %8 to i64*
  store i64 %4, i64* %9, align 16
  %10 = trunc i64 %6 to i16
  %11 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 11, i32 0, i32 0, i32 4
  store i16 %10, i16* %11, align 2
  %12 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 11, i32 0, i32 0, i32 5
  %13 = bitcast i32* %12 to i64*
  store i64 %5, i64* %13, align 8
  %14 = inttoptr i64 %4 to double*
  %15 = load double, double* %14
  %16 = fcmp ueq double %3, 0.000000e+00
  br i1 %16, label %22, label %17

; <label>:17:                                     ; preds = %7
  %18 = tail call double @llvm.fabs.f64(double %3) 
  %19 = fcmp oeq double %18, 0x7FF0000000000000
  br i1 %19, label %22, label %20

; <label>:20:                                     ; preds = %17
  %21 = fcmp olt double %18, 0x10000000000000
  br label %22

; <label>:22:                                     ; preds = %20, %17, %7
  %23 = phi i1 [ false, %7 ], [ false, %17 ], [ %21, %20 ]
  %24 = fcmp ueq double %15, 0.000000e+00
  br i1 %24, label %30, label %25

; <label>:25:                                     ; preds = %22
  %26 = tail call double @llvm.fabs.f64(double %15) 
  %27 = fcmp oeq double %26, 0x7FF0000000000000
  br i1 %27, label %30, label %28

; <label>:28:                                     ; preds = %25
  %29 = fcmp olt double %26, 0x10000000000000
  br label %30

; <label>:30:                                     ; preds = %28, %25, %22
  %31 = phi i1 [ false, %22 ], [ false, %25 ], [ %29, %28 ]
  %32 = or i1 %23, %31
  %33 = zext i1 %32 to i8
  %34 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 17
  store i8 %33, i8* %34, align 1
  %35 = tail call i32 @__remill_fpu_exception_test_and_clear(i32 0, i32 61) 
  tail call void asm sideeffect "", "~{memory},~{dirflag},~{fpsr},~{flags}"() 
  %36 = fdiv double %3, %15
  tail call void asm sideeffect "", "~{memory},~{dirflag},~{fpsr},~{flags}"() 
  %37 = tail call i32 @__remill_fpu_exception_test_and_clear(i32 61, i32 %35) 
  %38 = lshr i32 %37, 5
  %39 = and i32 %38, 1
  %40 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 9
  %41 = load i8, i8* %40, align 1
  %42 = zext i8 %41 to i32
  %43 = or i32 %42, %39
  %44 = trunc i32 %43 to i8
  store i8 %44, i8* %40, align 1
  %45 = lshr i32 %37, 3
  %46 = and i32 %45, 1
  %47 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 13
  %48 = load i8, i8* %47, align 1
  %49 = zext i8 %48 to i32
  %50 = or i32 %49, %46
  %51 = trunc i32 %50 to i8
  store i8 %51, i8* %47, align 1
  %52 = lshr i32 %37, 4
  %53 = and i32 %52, 1
  %54 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 11
  %55 = load i8, i8* %54, align 1
  %56 = zext i8 %55 to i32
  %57 = or i32 %56, %53
  %58 = trunc i32 %57 to i8
  store i8 %58, i8* %54, align 1
  %59 = and i32 %37, 1
  %60 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 19
  %61 = load i8, i8* %60, align 1
  %62 = zext i8 %61 to i32
  %63 = or i32 %62, %59
  %64 = trunc i32 %63 to i8
  store i8 %64, i8* %60, align 1
  %65 = lshr i32 %37, 2
  %66 = and i32 %65, 1
  %67 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 15
  %68 = load i8, i8* %67, align 1
  %69 = zext i8 %68 to i32
  %70 = or i32 %69, %66
  %71 = trunc i32 %70 to i8
  store i8 %71, i8* %67, align 1
  store double %36, double* %2, align 8
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L4FDIVI2RnIdEEEP6MemoryS4_R5State3RnWIdES2_T_2InImESA_ItE(%struct.Memory* readnone returned, %struct.State* nocapture dereferenceable(3376), double* nocapture, double, double, i64, i64)  {
  %8 = trunc i64 %6 to i16
  %9 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 11, i32 0, i32 0, i32 4
  store i16 %8, i16* %9, align 2
  %10 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 11, i32 0, i32 0, i32 5
  %11 = bitcast i32* %10 to i64*
  store i64 %5, i64* %11, align 8
  %12 = fcmp ueq double %3, 0.000000e+00
  br i1 %12, label %18, label %13

; <label>:13:                                     ; preds = %7
  %14 = tail call double @llvm.fabs.f64(double %3) 
  %15 = fcmp oeq double %14, 0x7FF0000000000000
  br i1 %15, label %18, label %16

; <label>:16:                                     ; preds = %13
  %17 = fcmp olt double %14, 0x10000000000000
  br label %18

; <label>:18:                                     ; preds = %16, %13, %7
  %19 = phi i1 [ false, %7 ], [ false, %13 ], [ %17, %16 ]
  %20 = fcmp ueq double %4, 0.000000e+00
  br i1 %20, label %26, label %21

; <label>:21:                                     ; preds = %18
  %22 = tail call double @llvm.fabs.f64(double %4) 
  %23 = fcmp oeq double %22, 0x7FF0000000000000
  br i1 %23, label %26, label %24

; <label>:24:                                     ; preds = %21
  %25 = fcmp olt double %22, 0x10000000000000
  br label %26

; <label>:26:                                     ; preds = %24, %21, %18
  %27 = phi i1 [ false, %18 ], [ false, %21 ], [ %25, %24 ]
  %28 = or i1 %19, %27
  %29 = zext i1 %28 to i8
  %30 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 17
  store i8 %29, i8* %30, align 1
  %31 = tail call i32 @__remill_fpu_exception_test_and_clear(i32 0, i32 61) 
  tail call void asm sideeffect "", "~{memory},~{dirflag},~{fpsr},~{flags}"() 
  %32 = fdiv double %3, %4
  tail call void asm sideeffect "", "~{memory},~{dirflag},~{fpsr},~{flags}"() 
  %33 = tail call i32 @__remill_fpu_exception_test_and_clear(i32 61, i32 %31) 
  %34 = lshr i32 %33, 5
  %35 = and i32 %34, 1
  %36 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 9
  %37 = load i8, i8* %36, align 1
  %38 = zext i8 %37 to i32
  %39 = or i32 %38, %35
  %40 = trunc i32 %39 to i8
  store i8 %40, i8* %36, align 1
  %41 = lshr i32 %33, 3
  %42 = and i32 %41, 1
  %43 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 13
  %44 = load i8, i8* %43, align 1
  %45 = zext i8 %44 to i32
  %46 = or i32 %45, %42
  %47 = trunc i32 %46 to i8
  store i8 %47, i8* %43, align 1
  %48 = lshr i32 %33, 4
  %49 = and i32 %48, 1
  %50 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 11
  %51 = load i8, i8* %50, align 1
  %52 = zext i8 %51 to i32
  %53 = or i32 %52, %49
  %54 = trunc i32 %53 to i8
  store i8 %54, i8* %50, align 1
  %55 = and i32 %33, 1
  %56 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 19
  %57 = load i8, i8* %56, align 1
  %58 = zext i8 %57 to i32
  %59 = or i32 %58, %55
  %60 = trunc i32 %59 to i8
  store i8 %60, i8* %56, align 1
  %61 = lshr i32 %33, 2
  %62 = and i32 %61, 1
  %63 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 15
  %64 = load i8, i8* %63, align 1
  %65 = zext i8 %64 to i32
  %66 = or i32 %65, %62
  %67 = trunc i32 %66 to i8
  store i8 %67, i8* %63, align 1
  store double %32, double* %2, align 8
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L5FDIVPI2RnIdEEEP6MemoryS4_R5State3RnWIdES2_T_2InImESA_ItE(%struct.Memory* readnone returned, %struct.State* nocapture dereferenceable(3376), double* nocapture, double, double, i64, i64)  {
  %8 = trunc i64 %6 to i16
  %9 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 11, i32 0, i32 0, i32 4
  store i16 %8, i16* %9, align 2
  %10 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 11, i32 0, i32 0, i32 5
  %11 = bitcast i32* %10 to i64*
  store i64 %5, i64* %11, align 8
  %12 = fcmp ueq double %3, 0.000000e+00
  br i1 %12, label %18, label %13

; <label>:13:                                     ; preds = %7
  %14 = tail call double @llvm.fabs.f64(double %3) 
  %15 = fcmp oeq double %14, 0x7FF0000000000000
  br i1 %15, label %18, label %16

; <label>:16:                                     ; preds = %13
  %17 = fcmp olt double %14, 0x10000000000000
  br label %18

; <label>:18:                                     ; preds = %16, %13, %7
  %19 = phi i1 [ false, %7 ], [ false, %13 ], [ %17, %16 ]
  %20 = fcmp ueq double %4, 0.000000e+00
  br i1 %20, label %26, label %21

; <label>:21:                                     ; preds = %18
  %22 = tail call double @llvm.fabs.f64(double %4) 
  %23 = fcmp oeq double %22, 0x7FF0000000000000
  br i1 %23, label %26, label %24

; <label>:24:                                     ; preds = %21
  %25 = fcmp olt double %22, 0x10000000000000
  br label %26

; <label>:26:                                     ; preds = %24, %21, %18
  %27 = phi i1 [ false, %18 ], [ false, %21 ], [ %25, %24 ]
  %28 = or i1 %19, %27
  %29 = zext i1 %28 to i8
  %30 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 17
  store i8 %29, i8* %30, align 1
  %31 = tail call i32 @__remill_fpu_exception_test_and_clear(i32 0, i32 61) 
  tail call void asm sideeffect "", "~{memory},~{dirflag},~{fpsr},~{flags}"() 
  %32 = fdiv double %3, %4
  tail call void asm sideeffect "", "~{memory},~{dirflag},~{fpsr},~{flags}"() 
  %33 = tail call i32 @__remill_fpu_exception_test_and_clear(i32 61, i32 %31) 
  %34 = lshr i32 %33, 5
  %35 = and i32 %34, 1
  %36 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 9
  %37 = load i8, i8* %36, align 1
  %38 = zext i8 %37 to i32
  %39 = or i32 %38, %35
  %40 = trunc i32 %39 to i8
  store i8 %40, i8* %36, align 1
  %41 = lshr i32 %33, 3
  %42 = and i32 %41, 1
  %43 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 13
  %44 = load i8, i8* %43, align 1
  %45 = zext i8 %44 to i32
  %46 = or i32 %45, %42
  %47 = trunc i32 %46 to i8
  store i8 %47, i8* %43, align 1
  %48 = lshr i32 %33, 4
  %49 = and i32 %48, 1
  %50 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 11
  %51 = load i8, i8* %50, align 1
  %52 = zext i8 %51 to i32
  %53 = or i32 %52, %49
  %54 = trunc i32 %53 to i8
  store i8 %54, i8* %50, align 1
  %55 = and i32 %33, 1
  %56 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 19
  %57 = load i8, i8* %56, align 1
  %58 = zext i8 %57 to i32
  %59 = or i32 %58, %55
  %60 = trunc i32 %59 to i8
  store i8 %60, i8* %56, align 1
  %61 = lshr i32 %33, 2
  %62 = and i32 %61, 1
  %63 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 15
  %64 = load i8, i8* %63, align 1
  %65 = zext i8 %64 to i32
  %66 = or i32 %65, %62
  %67 = trunc i32 %66 to i8
  store i8 %67, i8* %63, align 1
  store double %32, double* %2, align 8
  %68 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 0, i32 1
  %69 = bitcast double* %68 to i64*
  %70 = load i64, i64* %69, align 8
  %71 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 1, i32 1
  %72 = bitcast double* %71 to i64*
  %73 = load i64, i64* %72, align 8
  store i64 %73, i64* %69, align 8
  %74 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 2, i32 1
  %75 = bitcast double* %74 to i64*
  %76 = load i64, i64* %75, align 8
  store i64 %76, i64* %72, align 8
  %77 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 3, i32 1
  %78 = bitcast double* %77 to i64*
  %79 = load i64, i64* %78, align 8
  store i64 %79, i64* %75, align 8
  %80 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 4, i32 1
  %81 = bitcast double* %80 to i64*
  %82 = load i64, i64* %81, align 8
  store i64 %82, i64* %78, align 8
  %83 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 5, i32 1
  %84 = bitcast double* %83 to i64*
  %85 = load i64, i64* %84, align 8
  store i64 %85, i64* %81, align 8
  %86 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 6, i32 1
  %87 = bitcast double* %86 to i64*
  %88 = load i64, i64* %87, align 8
  store i64 %88, i64* %84, align 8
  %89 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 7, i32 1
  %90 = bitcast double* %89 to i64*
  %91 = load i64, i64* %90, align 8
  store i64 %91, i64* %87, align 8
  store i64 %70, i64* %90, align 8
  %92 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 11, i32 0, i32 0, i32 1, i32 0
  %93 = load i16, i16* %92, align 2
  %94 = add i16 %93, 2048
  %95 = and i16 %94, 14336
  %96 = and i16 %93, -14337
  %97 = or i16 %95, %96
  store i16 %97, i16* %92, align 2
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L8FDIVRmemI2MnIfEEEP6MemoryS4_R5State3RnWIdE2RnIdET_2InImESC_ItE(%struct.Memory* returned, %struct.State* nocapture dereferenceable(3376), double* nocapture, double, i64, i64, i64)  {
  %8 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 11, i32 0, i32 0, i32 8
  %9 = bitcast i32* %8 to i64*
  store i64 %4, i64* %9, align 16
  %10 = trunc i64 %6 to i16
  %11 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 11, i32 0, i32 0, i32 4
  store i16 %10, i16* %11, align 2
  %12 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 11, i32 0, i32 0, i32 5
  %13 = bitcast i32* %12 to i64*
  store i64 %5, i64* %13, align 8
  %14 = inttoptr i64 %4 to float*
  %15 = load float, float* %14
  %16 = fpext float %15 to double
  %17 = fcmp ueq float %15, 0.000000e+00
  br i1 %17, label %23, label %18

; <label>:18:                                     ; preds = %7
  %19 = tail call double @llvm.fabs.f64(double %16) 
  %20 = fcmp oeq double %19, 0x7FF0000000000000
  br i1 %20, label %23, label %21

; <label>:21:                                     ; preds = %18
  %22 = fcmp olt double %19, 0x10000000000000
  br label %23

; <label>:23:                                     ; preds = %21, %18, %7
  %24 = phi i1 [ false, %7 ], [ false, %18 ], [ %22, %21 ]
  %25 = fcmp ueq double %3, 0.000000e+00
  br i1 %25, label %31, label %26

; <label>:26:                                     ; preds = %23
  %27 = tail call double @llvm.fabs.f64(double %3) 
  %28 = fcmp oeq double %27, 0x7FF0000000000000
  br i1 %28, label %31, label %29

; <label>:29:                                     ; preds = %26
  %30 = fcmp olt double %27, 0x10000000000000
  br label %31

; <label>:31:                                     ; preds = %29, %26, %23
  %32 = phi i1 [ false, %23 ], [ false, %26 ], [ %30, %29 ]
  %33 = or i1 %24, %32
  %34 = zext i1 %33 to i8
  %35 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 17
  store i8 %34, i8* %35, align 1
  %36 = tail call i32 @__remill_fpu_exception_test_and_clear(i32 0, i32 61) 
  tail call void asm sideeffect "", "~{memory},~{dirflag},~{fpsr},~{flags}"() 
  %37 = fdiv double %16, %3
  tail call void asm sideeffect "", "~{memory},~{dirflag},~{fpsr},~{flags}"() 
  %38 = tail call i32 @__remill_fpu_exception_test_and_clear(i32 61, i32 %36) 
  %39 = lshr i32 %38, 5
  %40 = and i32 %39, 1
  %41 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 9
  %42 = load i8, i8* %41, align 1
  %43 = zext i8 %42 to i32
  %44 = or i32 %43, %40
  %45 = trunc i32 %44 to i8
  store i8 %45, i8* %41, align 1
  %46 = lshr i32 %38, 3
  %47 = and i32 %46, 1
  %48 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 13
  %49 = load i8, i8* %48, align 1
  %50 = zext i8 %49 to i32
  %51 = or i32 %50, %47
  %52 = trunc i32 %51 to i8
  store i8 %52, i8* %48, align 1
  %53 = lshr i32 %38, 4
  %54 = and i32 %53, 1
  %55 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 11
  %56 = load i8, i8* %55, align 1
  %57 = zext i8 %56 to i32
  %58 = or i32 %57, %54
  %59 = trunc i32 %58 to i8
  store i8 %59, i8* %55, align 1
  %60 = and i32 %38, 1
  %61 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 19
  %62 = load i8, i8* %61, align 1
  %63 = zext i8 %62 to i32
  %64 = or i32 %63, %60
  %65 = trunc i32 %64 to i8
  store i8 %65, i8* %61, align 1
  %66 = lshr i32 %38, 2
  %67 = and i32 %66, 1
  %68 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 15
  %69 = load i8, i8* %68, align 1
  %70 = zext i8 %69 to i32
  %71 = or i32 %70, %67
  %72 = trunc i32 %71 to i8
  store i8 %72, i8* %68, align 1
  store double %37, double* %2, align 8
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L8FDIVRmemI2MnIdEEEP6MemoryS4_R5State3RnWIdE2RnIdET_2InImESC_ItE(%struct.Memory* returned, %struct.State* nocapture dereferenceable(3376), double* nocapture, double, i64, i64, i64)  {
  %8 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 11, i32 0, i32 0, i32 8
  %9 = bitcast i32* %8 to i64*
  store i64 %4, i64* %9, align 16
  %10 = trunc i64 %6 to i16
  %11 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 11, i32 0, i32 0, i32 4
  store i16 %10, i16* %11, align 2
  %12 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 11, i32 0, i32 0, i32 5
  %13 = bitcast i32* %12 to i64*
  store i64 %5, i64* %13, align 8
  %14 = inttoptr i64 %4 to double*
  %15 = load double, double* %14
  %16 = fcmp ueq double %15, 0.000000e+00
  br i1 %16, label %22, label %17

; <label>:17:                                     ; preds = %7
  %18 = tail call double @llvm.fabs.f64(double %15) 
  %19 = fcmp oeq double %18, 0x7FF0000000000000
  br i1 %19, label %22, label %20

; <label>:20:                                     ; preds = %17
  %21 = fcmp olt double %18, 0x10000000000000
  br label %22

; <label>:22:                                     ; preds = %20, %17, %7
  %23 = phi i1 [ false, %7 ], [ false, %17 ], [ %21, %20 ]
  %24 = fcmp ueq double %3, 0.000000e+00
  br i1 %24, label %30, label %25

; <label>:25:                                     ; preds = %22
  %26 = tail call double @llvm.fabs.f64(double %3) 
  %27 = fcmp oeq double %26, 0x7FF0000000000000
  br i1 %27, label %30, label %28

; <label>:28:                                     ; preds = %25
  %29 = fcmp olt double %26, 0x10000000000000
  br label %30

; <label>:30:                                     ; preds = %28, %25, %22
  %31 = phi i1 [ false, %22 ], [ false, %25 ], [ %29, %28 ]
  %32 = or i1 %23, %31
  %33 = zext i1 %32 to i8
  %34 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 17
  store i8 %33, i8* %34, align 1
  %35 = tail call i32 @__remill_fpu_exception_test_and_clear(i32 0, i32 61) 
  tail call void asm sideeffect "", "~{memory},~{dirflag},~{fpsr},~{flags}"() 
  %36 = fdiv double %15, %3
  tail call void asm sideeffect "", "~{memory},~{dirflag},~{fpsr},~{flags}"() 
  %37 = tail call i32 @__remill_fpu_exception_test_and_clear(i32 61, i32 %35) 
  %38 = lshr i32 %37, 5
  %39 = and i32 %38, 1
  %40 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 9
  %41 = load i8, i8* %40, align 1
  %42 = zext i8 %41 to i32
  %43 = or i32 %42, %39
  %44 = trunc i32 %43 to i8
  store i8 %44, i8* %40, align 1
  %45 = lshr i32 %37, 3
  %46 = and i32 %45, 1
  %47 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 13
  %48 = load i8, i8* %47, align 1
  %49 = zext i8 %48 to i32
  %50 = or i32 %49, %46
  %51 = trunc i32 %50 to i8
  store i8 %51, i8* %47, align 1
  %52 = lshr i32 %37, 4
  %53 = and i32 %52, 1
  %54 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 11
  %55 = load i8, i8* %54, align 1
  %56 = zext i8 %55 to i32
  %57 = or i32 %56, %53
  %58 = trunc i32 %57 to i8
  store i8 %58, i8* %54, align 1
  %59 = and i32 %37, 1
  %60 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 19
  %61 = load i8, i8* %60, align 1
  %62 = zext i8 %61 to i32
  %63 = or i32 %62, %59
  %64 = trunc i32 %63 to i8
  store i8 %64, i8* %60, align 1
  %65 = lshr i32 %37, 2
  %66 = and i32 %65, 1
  %67 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 15
  %68 = load i8, i8* %67, align 1
  %69 = zext i8 %68 to i32
  %70 = or i32 %69, %66
  %71 = trunc i32 %70 to i8
  store i8 %71, i8* %67, align 1
  store double %36, double* %2, align 8
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L5FDIVRI2RnIdEEEP6MemoryS4_R5State3RnWIdES2_T_2InImESA_ItE(%struct.Memory* readnone returned, %struct.State* nocapture dereferenceable(3376), double* nocapture, double, double, i64, i64)  {
  %8 = trunc i64 %6 to i16
  %9 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 11, i32 0, i32 0, i32 4
  store i16 %8, i16* %9, align 2
  %10 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 11, i32 0, i32 0, i32 5
  %11 = bitcast i32* %10 to i64*
  store i64 %5, i64* %11, align 8
  %12 = fcmp ueq double %4, 0.000000e+00
  br i1 %12, label %18, label %13

; <label>:13:                                     ; preds = %7
  %14 = tail call double @llvm.fabs.f64(double %4) 
  %15 = fcmp oeq double %14, 0x7FF0000000000000
  br i1 %15, label %18, label %16

; <label>:16:                                     ; preds = %13
  %17 = fcmp olt double %14, 0x10000000000000
  br label %18

; <label>:18:                                     ; preds = %16, %13, %7
  %19 = phi i1 [ false, %7 ], [ false, %13 ], [ %17, %16 ]
  %20 = fcmp ueq double %3, 0.000000e+00
  br i1 %20, label %26, label %21

; <label>:21:                                     ; preds = %18
  %22 = tail call double @llvm.fabs.f64(double %3) 
  %23 = fcmp oeq double %22, 0x7FF0000000000000
  br i1 %23, label %26, label %24

; <label>:24:                                     ; preds = %21
  %25 = fcmp olt double %22, 0x10000000000000
  br label %26

; <label>:26:                                     ; preds = %24, %21, %18
  %27 = phi i1 [ false, %18 ], [ false, %21 ], [ %25, %24 ]
  %28 = or i1 %19, %27
  %29 = zext i1 %28 to i8
  %30 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 17
  store i8 %29, i8* %30, align 1
  %31 = tail call i32 @__remill_fpu_exception_test_and_clear(i32 0, i32 61) 
  tail call void asm sideeffect "", "~{memory},~{dirflag},~{fpsr},~{flags}"() 
  %32 = fdiv double %4, %3
  tail call void asm sideeffect "", "~{memory},~{dirflag},~{fpsr},~{flags}"() 
  %33 = tail call i32 @__remill_fpu_exception_test_and_clear(i32 61, i32 %31) 
  %34 = lshr i32 %33, 5
  %35 = and i32 %34, 1
  %36 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 9
  %37 = load i8, i8* %36, align 1
  %38 = zext i8 %37 to i32
  %39 = or i32 %38, %35
  %40 = trunc i32 %39 to i8
  store i8 %40, i8* %36, align 1
  %41 = lshr i32 %33, 3
  %42 = and i32 %41, 1
  %43 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 13
  %44 = load i8, i8* %43, align 1
  %45 = zext i8 %44 to i32
  %46 = or i32 %45, %42
  %47 = trunc i32 %46 to i8
  store i8 %47, i8* %43, align 1
  %48 = lshr i32 %33, 4
  %49 = and i32 %48, 1
  %50 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 11
  %51 = load i8, i8* %50, align 1
  %52 = zext i8 %51 to i32
  %53 = or i32 %52, %49
  %54 = trunc i32 %53 to i8
  store i8 %54, i8* %50, align 1
  %55 = and i32 %33, 1
  %56 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 19
  %57 = load i8, i8* %56, align 1
  %58 = zext i8 %57 to i32
  %59 = or i32 %58, %55
  %60 = trunc i32 %59 to i8
  store i8 %60, i8* %56, align 1
  %61 = lshr i32 %33, 2
  %62 = and i32 %61, 1
  %63 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 15
  %64 = load i8, i8* %63, align 1
  %65 = zext i8 %64 to i32
  %66 = or i32 %65, %62
  %67 = trunc i32 %66 to i8
  store i8 %67, i8* %63, align 1
  store double %32, double* %2, align 8
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L6FDIVRPI2RnIdEEEP6MemoryS4_R5State3RnWIdES2_T_2InImESA_ItE(%struct.Memory* readnone returned, %struct.State* nocapture dereferenceable(3376), double* nocapture, double, double, i64, i64)  {
  %8 = trunc i64 %6 to i16
  %9 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 11, i32 0, i32 0, i32 4
  store i16 %8, i16* %9, align 2
  %10 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 11, i32 0, i32 0, i32 5
  %11 = bitcast i32* %10 to i64*
  store i64 %5, i64* %11, align 8
  %12 = fcmp ueq double %4, 0.000000e+00
  br i1 %12, label %18, label %13

; <label>:13:                                     ; preds = %7
  %14 = tail call double @llvm.fabs.f64(double %4) 
  %15 = fcmp oeq double %14, 0x7FF0000000000000
  br i1 %15, label %18, label %16

; <label>:16:                                     ; preds = %13
  %17 = fcmp olt double %14, 0x10000000000000
  br label %18

; <label>:18:                                     ; preds = %16, %13, %7
  %19 = phi i1 [ false, %7 ], [ false, %13 ], [ %17, %16 ]
  %20 = fcmp ueq double %3, 0.000000e+00
  br i1 %20, label %26, label %21

; <label>:21:                                     ; preds = %18
  %22 = tail call double @llvm.fabs.f64(double %3) 
  %23 = fcmp oeq double %22, 0x7FF0000000000000
  br i1 %23, label %26, label %24

; <label>:24:                                     ; preds = %21
  %25 = fcmp olt double %22, 0x10000000000000
  br label %26

; <label>:26:                                     ; preds = %24, %21, %18
  %27 = phi i1 [ false, %18 ], [ false, %21 ], [ %25, %24 ]
  %28 = or i1 %19, %27
  %29 = zext i1 %28 to i8
  %30 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 17
  store i8 %29, i8* %30, align 1
  %31 = tail call i32 @__remill_fpu_exception_test_and_clear(i32 0, i32 61) 
  tail call void asm sideeffect "", "~{memory},~{dirflag},~{fpsr},~{flags}"() 
  %32 = fdiv double %4, %3
  tail call void asm sideeffect "", "~{memory},~{dirflag},~{fpsr},~{flags}"() 
  %33 = tail call i32 @__remill_fpu_exception_test_and_clear(i32 61, i32 %31) 
  %34 = lshr i32 %33, 5
  %35 = and i32 %34, 1
  %36 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 9
  %37 = load i8, i8* %36, align 1
  %38 = zext i8 %37 to i32
  %39 = or i32 %38, %35
  %40 = trunc i32 %39 to i8
  store i8 %40, i8* %36, align 1
  %41 = lshr i32 %33, 3
  %42 = and i32 %41, 1
  %43 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 13
  %44 = load i8, i8* %43, align 1
  %45 = zext i8 %44 to i32
  %46 = or i32 %45, %42
  %47 = trunc i32 %46 to i8
  store i8 %47, i8* %43, align 1
  %48 = lshr i32 %33, 4
  %49 = and i32 %48, 1
  %50 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 11
  %51 = load i8, i8* %50, align 1
  %52 = zext i8 %51 to i32
  %53 = or i32 %52, %49
  %54 = trunc i32 %53 to i8
  store i8 %54, i8* %50, align 1
  %55 = and i32 %33, 1
  %56 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 19
  %57 = load i8, i8* %56, align 1
  %58 = zext i8 %57 to i32
  %59 = or i32 %58, %55
  %60 = trunc i32 %59 to i8
  store i8 %60, i8* %56, align 1
  %61 = lshr i32 %33, 2
  %62 = and i32 %61, 1
  %63 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 15
  %64 = load i8, i8* %63, align 1
  %65 = zext i8 %64 to i32
  %66 = or i32 %65, %62
  %67 = trunc i32 %66 to i8
  store i8 %67, i8* %63, align 1
  store double %32, double* %2, align 8
  %68 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 0, i32 1
  %69 = bitcast double* %68 to i64*
  %70 = load i64, i64* %69, align 8
  %71 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 1, i32 1
  %72 = bitcast double* %71 to i64*
  %73 = load i64, i64* %72, align 8
  store i64 %73, i64* %69, align 8
  %74 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 2, i32 1
  %75 = bitcast double* %74 to i64*
  %76 = load i64, i64* %75, align 8
  store i64 %76, i64* %72, align 8
  %77 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 3, i32 1
  %78 = bitcast double* %77 to i64*
  %79 = load i64, i64* %78, align 8
  store i64 %79, i64* %75, align 8
  %80 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 4, i32 1
  %81 = bitcast double* %80 to i64*
  %82 = load i64, i64* %81, align 8
  store i64 %82, i64* %78, align 8
  %83 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 5, i32 1
  %84 = bitcast double* %83 to i64*
  %85 = load i64, i64* %84, align 8
  store i64 %85, i64* %81, align 8
  %86 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 6, i32 1
  %87 = bitcast double* %86 to i64*
  %88 = load i64, i64* %87, align 8
  store i64 %88, i64* %84, align 8
  %89 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 7, i32 1
  %90 = bitcast double* %89 to i64*
  %91 = load i64, i64* %90, align 8
  store i64 %91, i64* %87, align 8
  store i64 %70, i64* %90, align 8
  %92 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 11, i32 0, i32 0, i32 1, i32 0
  %93 = load i16, i16* %92, align 2
  %94 = add i16 %93, 2048
  %95 = and i16 %94, 14336
  %96 = and i16 %93, -14337
  %97 = or i16 %95, %96
  store i16 %97, i16* %92, align 2
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L5FIDIVI2MnIjEEEP6MemoryS4_R5State3RnWIdE2RnIdET_2InImESC_ItE(%struct.Memory*, %struct.State* nocapture dereferenceable(3376), double* nocapture, double, i64, i64, i64)  {
  %8 = trunc i64 %6 to i16
  %9 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 11, i32 0, i32 0, i32 4
  store i16 %8, i16* %9, align 2
  %10 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 11, i32 0, i32 0, i32 5
  %11 = bitcast i32* %10 to i64*
  store i64 %5, i64* %11, align 8
  %12 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 11, i32 0, i32 0, i32 8
  %13 = bitcast i32* %12 to i64*
  store i64 %4, i64* %13, align 16
  %14 = inttoptr i64 %4 to i32*
  %15 = load i32, i32* %14
  %16 = sitofp i32 %15 to double
  %17 = fcmp ueq double %3, 0.000000e+00
  br i1 %17, label %23, label %18

; <label>:18:                                     ; preds = %7
  %19 = tail call double @llvm.fabs.f64(double %3) 
  %20 = fcmp oeq double %19, 0x7FF0000000000000
  br i1 %20, label %23, label %21

; <label>:21:                                     ; preds = %18
  %22 = fcmp olt double %19, 0x10000000000000
  br label %23

; <label>:23:                                     ; preds = %21, %18, %7
  %24 = phi i1 [ false, %7 ], [ false, %18 ], [ %22, %21 ]
  %25 = icmp eq i32 %15, 0
  br i1 %25, label %31, label %26

; <label>:26:                                     ; preds = %23
  %27 = tail call double @llvm.fabs.f64(double %16) 
  %28 = fcmp oeq double %27, 0x7FF0000000000000
  br i1 %28, label %31, label %29

; <label>:29:                                     ; preds = %26
  %30 = fcmp olt double %27, 0x10000000000000
  br label %31

; <label>:31:                                     ; preds = %29, %26, %23
  %32 = phi i1 [ false, %23 ], [ false, %26 ], [ %30, %29 ]
  %33 = or i1 %24, %32
  %34 = zext i1 %33 to i8
  %35 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 17
  store i8 %34, i8* %35, align 1
  %36 = tail call i32 @__remill_fpu_exception_test_and_clear(i32 0, i32 61) 
  tail call void asm sideeffect "", "~{memory},~{dirflag},~{fpsr},~{flags}"() 
  %37 = fdiv double %3, %16
  tail call void asm sideeffect "", "~{memory},~{dirflag},~{fpsr},~{flags}"() 
  %38 = tail call i32 @__remill_fpu_exception_test_and_clear(i32 61, i32 %36) 
  %39 = lshr i32 %38, 5
  %40 = and i32 %39, 1
  %41 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 9
  %42 = load i8, i8* %41, align 1
  %43 = zext i8 %42 to i32
  %44 = or i32 %43, %40
  %45 = trunc i32 %44 to i8
  store i8 %45, i8* %41, align 1
  %46 = lshr i32 %38, 3
  %47 = and i32 %46, 1
  %48 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 13
  %49 = load i8, i8* %48, align 1
  %50 = zext i8 %49 to i32
  %51 = or i32 %50, %47
  %52 = trunc i32 %51 to i8
  store i8 %52, i8* %48, align 1
  %53 = lshr i32 %38, 4
  %54 = and i32 %53, 1
  %55 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 11
  %56 = load i8, i8* %55, align 1
  %57 = zext i8 %56 to i32
  %58 = or i32 %57, %54
  %59 = trunc i32 %58 to i8
  store i8 %59, i8* %55, align 1
  %60 = and i32 %38, 1
  %61 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 19
  %62 = load i8, i8* %61, align 1
  %63 = zext i8 %62 to i32
  %64 = or i32 %63, %60
  %65 = trunc i32 %64 to i8
  store i8 %65, i8* %61, align 1
  %66 = lshr i32 %38, 2
  %67 = and i32 %66, 1
  %68 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 15
  %69 = load i8, i8* %68, align 1
  %70 = zext i8 %69 to i32
  %71 = or i32 %70, %67
  %72 = trunc i32 %71 to i8
  store i8 %72, i8* %68, align 1
  store double %37, double* %2, align 8
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L5FIDIVI2MnItEEEP6MemoryS4_R5State3RnWIdE2RnIdET_2InImESC_ItE(%struct.Memory*, %struct.State* nocapture dereferenceable(3376), double* nocapture, double, i64, i64, i64)  {
  %8 = trunc i64 %6 to i16
  %9 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 11, i32 0, i32 0, i32 4
  store i16 %8, i16* %9, align 2
  %10 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 11, i32 0, i32 0, i32 5
  %11 = bitcast i32* %10 to i64*
  store i64 %5, i64* %11, align 8
  %12 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 11, i32 0, i32 0, i32 8
  %13 = bitcast i32* %12 to i64*
  store i64 %4, i64* %13, align 16
  %14 = inttoptr i64 %4 to i16*
  %15 = load i16, i16* %14
  %16 = sitofp i16 %15 to double
  %17 = fcmp ueq double %3, 0.000000e+00
  br i1 %17, label %23, label %18

; <label>:18:                                     ; preds = %7
  %19 = tail call double @llvm.fabs.f64(double %3) 
  %20 = fcmp oeq double %19, 0x7FF0000000000000
  br i1 %20, label %23, label %21

; <label>:21:                                     ; preds = %18
  %22 = fcmp olt double %19, 0x10000000000000
  br label %23

; <label>:23:                                     ; preds = %21, %18, %7
  %24 = phi i1 [ false, %7 ], [ false, %18 ], [ %22, %21 ]
  %25 = icmp eq i16 %15, 0
  br i1 %25, label %31, label %26

; <label>:26:                                     ; preds = %23
  %27 = tail call double @llvm.fabs.f64(double %16) 
  %28 = fcmp oeq double %27, 0x7FF0000000000000
  br i1 %28, label %31, label %29

; <label>:29:                                     ; preds = %26
  %30 = fcmp olt double %27, 0x10000000000000
  br label %31

; <label>:31:                                     ; preds = %29, %26, %23
  %32 = phi i1 [ false, %23 ], [ false, %26 ], [ %30, %29 ]
  %33 = or i1 %24, %32
  %34 = zext i1 %33 to i8
  %35 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 17
  store i8 %34, i8* %35, align 1
  %36 = tail call i32 @__remill_fpu_exception_test_and_clear(i32 0, i32 61) 
  tail call void asm sideeffect "", "~{memory},~{dirflag},~{fpsr},~{flags}"() 
  %37 = fdiv double %3, %16
  tail call void asm sideeffect "", "~{memory},~{dirflag},~{fpsr},~{flags}"() 
  %38 = tail call i32 @__remill_fpu_exception_test_and_clear(i32 61, i32 %36) 
  %39 = lshr i32 %38, 5
  %40 = and i32 %39, 1
  %41 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 9
  %42 = load i8, i8* %41, align 1
  %43 = zext i8 %42 to i32
  %44 = or i32 %43, %40
  %45 = trunc i32 %44 to i8
  store i8 %45, i8* %41, align 1
  %46 = lshr i32 %38, 3
  %47 = and i32 %46, 1
  %48 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 13
  %49 = load i8, i8* %48, align 1
  %50 = zext i8 %49 to i32
  %51 = or i32 %50, %47
  %52 = trunc i32 %51 to i8
  store i8 %52, i8* %48, align 1
  %53 = lshr i32 %38, 4
  %54 = and i32 %53, 1
  %55 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 11
  %56 = load i8, i8* %55, align 1
  %57 = zext i8 %56 to i32
  %58 = or i32 %57, %54
  %59 = trunc i32 %58 to i8
  store i8 %59, i8* %55, align 1
  %60 = and i32 %38, 1
  %61 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 19
  %62 = load i8, i8* %61, align 1
  %63 = zext i8 %62 to i32
  %64 = or i32 %63, %60
  %65 = trunc i32 %64 to i8
  store i8 %65, i8* %61, align 1
  %66 = lshr i32 %38, 2
  %67 = and i32 %66, 1
  %68 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 15
  %69 = load i8, i8* %68, align 1
  %70 = zext i8 %69 to i32
  %71 = or i32 %70, %67
  %72 = trunc i32 %71 to i8
  store i8 %72, i8* %68, align 1
  store double %37, double* %2, align 8
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L6FIDIVRI2MnIjEEEP6MemoryS4_R5State3RnWIdE2RnIdET_2InImESC_ItE(%struct.Memory*, %struct.State* nocapture dereferenceable(3376), double* nocapture, double, i64, i64, i64)  {
  %8 = trunc i64 %6 to i16
  %9 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 11, i32 0, i32 0, i32 4
  store i16 %8, i16* %9, align 2
  %10 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 11, i32 0, i32 0, i32 5
  %11 = bitcast i32* %10 to i64*
  store i64 %5, i64* %11, align 8
  %12 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 11, i32 0, i32 0, i32 8
  %13 = bitcast i32* %12 to i64*
  store i64 %4, i64* %13, align 16
  %14 = inttoptr i64 %4 to i32*
  %15 = load i32, i32* %14
  %16 = sitofp i32 %15 to double
  %17 = icmp eq i32 %15, 0
  br i1 %17, label %23, label %18

; <label>:18:                                     ; preds = %7
  %19 = tail call double @llvm.fabs.f64(double %16) 
  %20 = fcmp oeq double %19, 0x7FF0000000000000
  br i1 %20, label %23, label %21

; <label>:21:                                     ; preds = %18
  %22 = fcmp olt double %19, 0x10000000000000
  br label %23

; <label>:23:                                     ; preds = %21, %18, %7
  %24 = phi i1 [ false, %7 ], [ false, %18 ], [ %22, %21 ]
  %25 = fcmp ueq double %3, 0.000000e+00
  br i1 %25, label %31, label %26

; <label>:26:                                     ; preds = %23
  %27 = tail call double @llvm.fabs.f64(double %3) 
  %28 = fcmp oeq double %27, 0x7FF0000000000000
  br i1 %28, label %31, label %29

; <label>:29:                                     ; preds = %26
  %30 = fcmp olt double %27, 0x10000000000000
  br label %31

; <label>:31:                                     ; preds = %29, %26, %23
  %32 = phi i1 [ false, %23 ], [ false, %26 ], [ %30, %29 ]
  %33 = or i1 %24, %32
  %34 = zext i1 %33 to i8
  %35 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 17
  store i8 %34, i8* %35, align 1
  %36 = tail call i32 @__remill_fpu_exception_test_and_clear(i32 0, i32 61) 
  tail call void asm sideeffect "", "~{memory},~{dirflag},~{fpsr},~{flags}"() 
  %37 = fdiv double %16, %3
  tail call void asm sideeffect "", "~{memory},~{dirflag},~{fpsr},~{flags}"() 
  %38 = tail call i32 @__remill_fpu_exception_test_and_clear(i32 61, i32 %36) 
  %39 = lshr i32 %38, 5
  %40 = and i32 %39, 1
  %41 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 9
  %42 = load i8, i8* %41, align 1
  %43 = zext i8 %42 to i32
  %44 = or i32 %43, %40
  %45 = trunc i32 %44 to i8
  store i8 %45, i8* %41, align 1
  %46 = lshr i32 %38, 3
  %47 = and i32 %46, 1
  %48 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 13
  %49 = load i8, i8* %48, align 1
  %50 = zext i8 %49 to i32
  %51 = or i32 %50, %47
  %52 = trunc i32 %51 to i8
  store i8 %52, i8* %48, align 1
  %53 = lshr i32 %38, 4
  %54 = and i32 %53, 1
  %55 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 11
  %56 = load i8, i8* %55, align 1
  %57 = zext i8 %56 to i32
  %58 = or i32 %57, %54
  %59 = trunc i32 %58 to i8
  store i8 %59, i8* %55, align 1
  %60 = and i32 %38, 1
  %61 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 19
  %62 = load i8, i8* %61, align 1
  %63 = zext i8 %62 to i32
  %64 = or i32 %63, %60
  %65 = trunc i32 %64 to i8
  store i8 %65, i8* %61, align 1
  %66 = lshr i32 %38, 2
  %67 = and i32 %66, 1
  %68 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 15
  %69 = load i8, i8* %68, align 1
  %70 = zext i8 %69 to i32
  %71 = or i32 %70, %67
  %72 = trunc i32 %71 to i8
  store i8 %72, i8* %68, align 1
  store double %37, double* %2, align 8
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L6FIDIVRI2MnItEEEP6MemoryS4_R5State3RnWIdE2RnIdET_2InImESC_ItE(%struct.Memory*, %struct.State* nocapture dereferenceable(3376), double* nocapture, double, i64, i64, i64)  {
  %8 = trunc i64 %6 to i16
  %9 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 11, i32 0, i32 0, i32 4
  store i16 %8, i16* %9, align 2
  %10 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 11, i32 0, i32 0, i32 5
  %11 = bitcast i32* %10 to i64*
  store i64 %5, i64* %11, align 8
  %12 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 11, i32 0, i32 0, i32 8
  %13 = bitcast i32* %12 to i64*
  store i64 %4, i64* %13, align 16
  %14 = inttoptr i64 %4 to i16*
  %15 = load i16, i16* %14
  %16 = sitofp i16 %15 to double
  %17 = icmp eq i16 %15, 0
  br i1 %17, label %23, label %18

; <label>:18:                                     ; preds = %7
  %19 = tail call double @llvm.fabs.f64(double %16) 
  %20 = fcmp oeq double %19, 0x7FF0000000000000
  br i1 %20, label %23, label %21

; <label>:21:                                     ; preds = %18
  %22 = fcmp olt double %19, 0x10000000000000
  br label %23

; <label>:23:                                     ; preds = %21, %18, %7
  %24 = phi i1 [ false, %7 ], [ false, %18 ], [ %22, %21 ]
  %25 = fcmp ueq double %3, 0.000000e+00
  br i1 %25, label %31, label %26

; <label>:26:                                     ; preds = %23
  %27 = tail call double @llvm.fabs.f64(double %3) 
  %28 = fcmp oeq double %27, 0x7FF0000000000000
  br i1 %28, label %31, label %29

; <label>:29:                                     ; preds = %26
  %30 = fcmp olt double %27, 0x10000000000000
  br label %31

; <label>:31:                                     ; preds = %29, %26, %23
  %32 = phi i1 [ false, %23 ], [ false, %26 ], [ %30, %29 ]
  %33 = or i1 %24, %32
  %34 = zext i1 %33 to i8
  %35 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 17
  store i8 %34, i8* %35, align 1
  %36 = tail call i32 @__remill_fpu_exception_test_and_clear(i32 0, i32 61) 
  tail call void asm sideeffect "", "~{memory},~{dirflag},~{fpsr},~{flags}"() 
  %37 = fdiv double %16, %3
  tail call void asm sideeffect "", "~{memory},~{dirflag},~{fpsr},~{flags}"() 
  %38 = tail call i32 @__remill_fpu_exception_test_and_clear(i32 61, i32 %36) 
  %39 = lshr i32 %38, 5
  %40 = and i32 %39, 1
  %41 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 9
  %42 = load i8, i8* %41, align 1
  %43 = zext i8 %42 to i32
  %44 = or i32 %43, %40
  %45 = trunc i32 %44 to i8
  store i8 %45, i8* %41, align 1
  %46 = lshr i32 %38, 3
  %47 = and i32 %46, 1
  %48 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 13
  %49 = load i8, i8* %48, align 1
  %50 = zext i8 %49 to i32
  %51 = or i32 %50, %47
  %52 = trunc i32 %51 to i8
  store i8 %52, i8* %48, align 1
  %53 = lshr i32 %38, 4
  %54 = and i32 %53, 1
  %55 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 11
  %56 = load i8, i8* %55, align 1
  %57 = zext i8 %56 to i32
  %58 = or i32 %57, %54
  %59 = trunc i32 %58 to i8
  store i8 %59, i8* %55, align 1
  %60 = and i32 %38, 1
  %61 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 19
  %62 = load i8, i8* %61, align 1
  %63 = zext i8 %62 to i32
  %64 = or i32 %63, %60
  %65 = trunc i32 %64 to i8
  store i8 %65, i8* %61, align 1
  %66 = lshr i32 %38, 2
  %67 = and i32 %66, 1
  %68 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 15
  %69 = load i8, i8* %68, align 1
  %70 = zext i8 %69 to i32
  %71 = or i32 %70, %67
  %72 = trunc i32 %71 to i8
  store i8 %72, i8* %68, align 1
  store double %37, double* %2, align 8
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L5FBSTPEP6MemoryR5State3MnWI7bcd80_tE2RnIdE2InImES9_ItE(%struct.Memory* readnone, %struct.State* dereferenceable(3376), i64, double, i64, i64)  {
  %7 = alloca %struct.bcd80_t, align 8
  %8 = trunc i64 %5 to i16
  %9 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 11, i32 0, i32 0, i32 4
  store i16 %8, i16* %9, align 2
  %10 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 11, i32 0, i32 0, i32 5
  %11 = bitcast i32* %10 to i64*
  store i64 %4, i64* %11, align 8
  %12 = getelementptr inbounds %struct.bcd80_t, %struct.bcd80_t* %7, i64 0, i32 0, i64 0, i32 0
  call void @llvm.lifetime.start(i64 10, i8* nonnull %12) 
  call void @llvm.memset.p0i8.i64(i8* nonnull %12, i8 0, i64 10, i32 8, i1 false)
  %13 = tail call double @llvm.nearbyint.f64(double %3) 
  %14 = tail call double @llvm.fabs.f64(double %13) 
  %15 = fcmp ogt double %14, 0x43ABC16D674EC7FF
  %16 = fcmp uno double %3, 0.000000e+00
  %17 = or i1 %15, %16
  br i1 %17, label %23, label %18

; <label>:18:                                     ; preds = %6
  %19 = fcmp one double %3, 0.000000e+00
  %20 = tail call double @llvm.fabs.f64(double %3) 
  %21 = fcmp oeq double %20, 0x7FF0000000000000
  %22 = and i1 %19, %21
  br i1 %22, label %23, label %75

; <label>:23:                                     ; preds = %18, %6
  %24 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 19
  store i8 1, i8* %24, align 1
  %25 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 9
  store i8 0, i8* %25, align 1
  %26 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 0, i32 1
  %27 = bitcast double* %26 to i64*
  %28 = load i64, i64* %27, align 8
  %29 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 1, i32 1
  %30 = bitcast double* %29 to i64*
  %31 = load i64, i64* %30, align 8
  store i64 %31, i64* %27, align 8
  %32 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 2, i32 1
  %33 = bitcast double* %32 to i64*
  %34 = load i64, i64* %33, align 8
  store i64 %34, i64* %30, align 8
  %35 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 3, i32 1
  %36 = bitcast double* %35 to i64*
  %37 = load i64, i64* %36, align 8
  store i64 %37, i64* %33, align 8
  %38 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 4, i32 1
  %39 = bitcast double* %38 to i64*
  %40 = load i64, i64* %39, align 8
  store i64 %40, i64* %36, align 8
  %41 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 5, i32 1
  %42 = bitcast double* %41 to i64*
  %43 = load i64, i64* %42, align 8
  store i64 %43, i64* %39, align 8
  %44 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 6, i32 1
  %45 = bitcast double* %44 to i64*
  %46 = load i64, i64* %45, align 8
  store i64 %46, i64* %42, align 8
  %47 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 7, i32 1
  %48 = bitcast double* %47 to i64*
  %49 = load i64, i64* %48, align 8
  store i64 %49, i64* %45, align 8
  store i64 %28, i64* %48, align 8
  %50 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 11, i32 0, i32 0, i32 1, i32 0
  %51 = load i16, i16* %50, align 2
  %52 = add i16 %51, 2048
  %53 = and i16 %52, 14336
  %54 = and i16 %51, -14337
  %55 = or i16 %53, %54
  store i16 %55, i16* %50, align 2
  %56 = inttoptr i64 %2 to i8*
  store i8 0, i8* %56
  %57 = add i64 %2, 1
  %58 = inttoptr i64 %57 to i8*
  store i8 0, i8* %58
  %59 = add i64 %2, 2
  %60 = inttoptr i64 %59 to i8*
  store i8 0, i8* %60
  %61 = add i64 %2, 3
  %62 = inttoptr i64 %61 to i8*
  store i8 0, i8* %62
  %63 = add i64 %2, 4
  %64 = inttoptr i64 %63 to i8*
  store i8 0, i8* %64
  %65 = add i64 %2, 5
  %66 = inttoptr i64 %65 to i8*
  store i8 0, i8* %66
  %67 = add i64 %2, 6
  %68 = inttoptr i64 %67 to i8*
  store i8 0, i8* %68
  %69 = add i64 %2, 7
  %70 = inttoptr i64 %69 to i8*
  store i8 -64, i8* %70
  %71 = add i64 %2, 8
  %72 = inttoptr i64 %71 to i8*
  store i8 -1, i8* %72
  %73 = add i64 %2, 9
  %74 = inttoptr i64 %73 to i8*
  store i8 -1, i8* %74
  br label %178

; <label>:75:                                     ; preds = %18
  %76 = fcmp une double %13, %3
  br i1 %76, label %77, label %82

; <label>:77:                                     ; preds = %75
  %78 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 9
  store i8 1, i8* %78, align 1
  %79 = fcmp ogt double %13, %3
  br i1 %79, label %80, label %82

; <label>:80:                                     ; preds = %77
  %81 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 3
  store i8 1, i8* %81, align 1
  br label %82

; <label>:82:                                     ; preds = %80, %77, %75
  %83 = bitcast double %13 to i64
  %84 = icmp sgt i64 %83, -1
  br i1 %84, label %87, label %85

; <label>:85:                                     ; preds = %82
  %86 = getelementptr inbounds %struct.bcd80_t, %struct.bcd80_t* %7, i64 0, i32 1, i32 0
  store i8 -128, i8* %86, align 1
  br label %87

; <label>:87:                                     ; preds = %85, %82
  %88 = fptoui double %14 to i64
  br label %163

; <label>:89:                                     ; preds = %163
  %90 = bitcast %struct.bcd80_t* %7 to i64*
  %91 = load i64, i64* %90, align 8
  %92 = getelementptr inbounds %struct.bcd80_t, %struct.bcd80_t* %7, i64 0, i32 0, i64 8
  %93 = bitcast %union.FPUAbridgedTagWord* %92 to i16*
  %94 = load i16, i16* %93, align 8
  %95 = trunc i64 %91 to i8
  %96 = inttoptr i64 %2 to i8*
  store i8 %95, i8* %96
  %97 = add i64 %2, 1
  %98 = lshr i64 %91, 8
  %99 = trunc i64 %98 to i8
  %100 = inttoptr i64 %97 to i8*
  store i8 %99, i8* %100
  %101 = add i64 %2, 2
  %102 = lshr i64 %91, 16
  %103 = trunc i64 %102 to i8
  %104 = inttoptr i64 %101 to i8*
  store i8 %103, i8* %104
  %105 = add i64 %2, 3
  %106 = lshr i64 %91, 24
  %107 = trunc i64 %106 to i8
  %108 = inttoptr i64 %105 to i8*
  store i8 %107, i8* %108
  %109 = add i64 %2, 4
  %110 = lshr i64 %91, 32
  %111 = trunc i64 %110 to i8
  %112 = inttoptr i64 %109 to i8*
  store i8 %111, i8* %112
  %113 = add i64 %2, 5
  %114 = lshr i64 %91, 40
  %115 = trunc i64 %114 to i8
  %116 = inttoptr i64 %113 to i8*
  store i8 %115, i8* %116
  %117 = add i64 %2, 6
  %118 = lshr i64 %91, 48
  %119 = trunc i64 %118 to i8
  %120 = inttoptr i64 %117 to i8*
  store i8 %119, i8* %120
  %121 = add i64 %2, 7
  %122 = lshr i64 %91, 56
  %123 = trunc i64 %122 to i8
  %124 = inttoptr i64 %121 to i8*
  store i8 %123, i8* %124
  %125 = add i64 %2, 8
  %126 = trunc i16 %94 to i8
  %127 = inttoptr i64 %125 to i8*
  store i8 %126, i8* %127
  %128 = lshr i16 %94, 8
  %129 = trunc i16 %128 to i8
  %130 = and i8 %129, -128
  %131 = add i64 %2, 9
  %132 = inttoptr i64 %131 to i8*
  store i8 %130, i8* %132
  %133 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 0, i32 1
  %134 = bitcast double* %133 to i64*
  %135 = load i64, i64* %134, align 8
  %136 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 1, i32 1
  %137 = bitcast double* %136 to i64*
  %138 = load i64, i64* %137, align 8
  store i64 %138, i64* %134, align 8
  %139 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 2, i32 1
  %140 = bitcast double* %139 to i64*
  %141 = load i64, i64* %140, align 8
  store i64 %141, i64* %137, align 8
  %142 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 3, i32 1
  %143 = bitcast double* %142 to i64*
  %144 = load i64, i64* %143, align 8
  store i64 %144, i64* %140, align 8
  %145 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 4, i32 1
  %146 = bitcast double* %145 to i64*
  %147 = load i64, i64* %146, align 8
  store i64 %147, i64* %143, align 8
  %148 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 5, i32 1
  %149 = bitcast double* %148 to i64*
  %150 = load i64, i64* %149, align 8
  store i64 %150, i64* %146, align 8
  %151 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 6, i32 1
  %152 = bitcast double* %151 to i64*
  %153 = load i64, i64* %152, align 8
  store i64 %153, i64* %149, align 8
  %154 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 7, i32 1
  %155 = bitcast double* %154 to i64*
  %156 = load i64, i64* %155, align 8
  store i64 %156, i64* %152, align 8
  store i64 %135, i64* %155, align 8
  %157 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 11, i32 0, i32 0, i32 1, i32 0
  %158 = load i16, i16* %157, align 2
  %159 = add i16 %158, 2048
  %160 = and i16 %159, 14336
  %161 = and i16 %158, -14337
  %162 = or i16 %160, %161
  store i16 %162, i16* %157, align 2
  br label %178

; <label>:163:                                    ; preds = %163, %87
  %164 = phi i64 [ %88, %87 ], [ %175, %163 ]
  %165 = phi i64 [ 0, %87 ], [ %176, %163 ]
  %166 = urem i64 %164, 10
  %167 = trunc i64 %166 to i8
  %168 = getelementptr inbounds %struct.bcd80_t, %struct.bcd80_t* %7, i64 0, i32 0, i64 %165, i32 0
  %169 = and i8 %167, 15
  %170 = udiv i64 %164, 10
  %171 = urem i64 %170, 10
  %172 = trunc i64 %171 to i8
  %173 = shl nuw i8 %172, 4
  %174 = or i8 %173, %169
  store i8 %174, i8* %168, align 1
  %175 = udiv i64 %164, 100
  %176 = add nuw nsw i64 %165, 1
  %177 = icmp eq i64 %176, 9
  br i1 %177, label %89, label %163

; <label>:178:                                    ; preds = %89, %23
  %179 = phi %struct.Memory* [ %0, %23 ], [ %0, %89 ]
  call void @llvm.lifetime.end(i64 10, i8* nonnull %12) 
  ret %struct.Memory* %179
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L7FSTPmemI3MnWIfEEEP6MemoryS4_R5StateT_2RnIdE2InImESA_ItE(%struct.Memory* readnone, %struct.State* nocapture dereferenceable(3376), i64, double, i64, i64)  {
  %7 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 11, i32 0, i32 0, i32 8
  %8 = bitcast i32* %7 to i64*
  store i64 %2, i64* %8, align 16
  %9 = trunc i64 %5 to i16
  %10 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 11, i32 0, i32 0, i32 4
  store i16 %9, i16* %10, align 2
  %11 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 11, i32 0, i32 0, i32 5
  %12 = bitcast i32* %11 to i64*
  store i64 %4, i64* %12, align 8
  %13 = fcmp ueq double %3, 0.000000e+00
  br i1 %13, label %19, label %14

; <label>:14:                                     ; preds = %6
  %15 = tail call double @llvm.fabs.f64(double %3) 
  %16 = fcmp oeq double %15, 0x7FF0000000000000
  br i1 %16, label %19, label %17

; <label>:17:                                     ; preds = %14
  %18 = fcmp olt double %15, 0x10000000000000
  br label %19

; <label>:19:                                     ; preds = %17, %14, %6
  %20 = phi i1 [ false, %6 ], [ false, %14 ], [ %18, %17 ]
  %21 = zext i1 %20 to i8
  %22 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 17
  store i8 %21, i8* %22, align 1
  %23 = tail call i32 @__remill_fpu_exception_test_and_clear(i32 0, i32 61) 
  tail call void asm sideeffect "", "~{memory},~{dirflag},~{fpsr},~{flags}"() 
  %24 = fptrunc double %3 to float
  tail call void asm sideeffect "", "~{memory},~{dirflag},~{fpsr},~{flags}"() 
  %25 = tail call i32 @__remill_fpu_exception_test_and_clear(i32 61, i32 %23) 
  %26 = lshr i32 %25, 5
  %27 = and i32 %26, 1
  %28 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 9
  %29 = load i8, i8* %28, align 1
  %30 = zext i8 %29 to i32
  %31 = or i32 %30, %27
  %32 = trunc i32 %31 to i8
  store i8 %32, i8* %28, align 1
  %33 = lshr i32 %25, 3
  %34 = and i32 %33, 1
  %35 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 13
  %36 = load i8, i8* %35, align 1
  %37 = zext i8 %36 to i32
  %38 = or i32 %37, %34
  %39 = trunc i32 %38 to i8
  store i8 %39, i8* %35, align 1
  %40 = lshr i32 %25, 4
  %41 = and i32 %40, 1
  %42 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 11
  %43 = load i8, i8* %42, align 1
  %44 = zext i8 %43 to i32
  %45 = or i32 %44, %41
  %46 = trunc i32 %45 to i8
  store i8 %46, i8* %42, align 1
  %47 = and i32 %25, 1
  %48 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 19
  %49 = load i8, i8* %48, align 1
  %50 = zext i8 %49 to i32
  %51 = or i32 %50, %47
  %52 = trunc i32 %51 to i8
  store i8 %52, i8* %48, align 1
  %53 = lshr i32 %25, 2
  %54 = and i32 %53, 1
  %55 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 15
  %56 = load i8, i8* %55, align 1
  %57 = zext i8 %56 to i32
  %58 = or i32 %57, %54
  %59 = trunc i32 %58 to i8
  store i8 %59, i8* %55, align 1
  %60 = inttoptr i64 %2 to float*
  store float %24, float* %60
  %61 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 0, i32 1
  %62 = bitcast double* %61 to i64*
  %63 = load i64, i64* %62, align 8
  %64 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 1, i32 1
  %65 = bitcast double* %64 to i64*
  %66 = load i64, i64* %65, align 8
  store i64 %66, i64* %62, align 8
  %67 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 2, i32 1
  %68 = bitcast double* %67 to i64*
  %69 = load i64, i64* %68, align 8
  store i64 %69, i64* %65, align 8
  %70 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 3, i32 1
  %71 = bitcast double* %70 to i64*
  %72 = load i64, i64* %71, align 8
  store i64 %72, i64* %68, align 8
  %73 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 4, i32 1
  %74 = bitcast double* %73 to i64*
  %75 = load i64, i64* %74, align 8
  store i64 %75, i64* %71, align 8
  %76 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 5, i32 1
  %77 = bitcast double* %76 to i64*
  %78 = load i64, i64* %77, align 8
  store i64 %78, i64* %74, align 8
  %79 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 6, i32 1
  %80 = bitcast double* %79 to i64*
  %81 = load i64, i64* %80, align 8
  store i64 %81, i64* %77, align 8
  %82 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 7, i32 1
  %83 = bitcast double* %82 to i64*
  %84 = load i64, i64* %83, align 8
  store i64 %84, i64* %80, align 8
  store i64 %63, i64* %83, align 8
  %85 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 11, i32 0, i32 0, i32 1, i32 0
  %86 = load i16, i16* %85, align 2
  %87 = add i16 %86, 2048
  %88 = and i16 %87, 14336
  %89 = and i16 %86, -14337
  %90 = or i16 %88, %89
  store i16 %90, i16* %85, align 2
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L7FSTPmemI3MnWI9float80_tEEEP6MemoryS5_R5StateT_2RnIdE2InImESB_ItE(%struct.Memory*, %struct.State* nocapture dereferenceable(3376), i64, double, i64, i64)  {
  %7 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 11, i32 0, i32 0, i32 8
  %8 = bitcast i32* %7 to i64*
  store i64 %2, i64* %8, align 16
  %9 = trunc i64 %5 to i16
  %10 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 11, i32 0, i32 0, i32 4
  store i16 %9, i16* %10, align 2
  %11 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 11, i32 0, i32 0, i32 5
  %12 = bitcast i32* %11 to i64*
  store i64 %4, i64* %12, align 8
  %13 = fcmp ueq double %3, 0.000000e+00
  br i1 %13, label %19, label %14

; <label>:14:                                     ; preds = %6
  %15 = tail call double @llvm.fabs.f64(double %3) 
  %16 = fcmp oeq double %15, 0x7FF0000000000000
  br i1 %16, label %19, label %17

; <label>:17:                                     ; preds = %14
  %18 = fcmp olt double %15, 0x10000000000000
  br label %19

; <label>:19:                                     ; preds = %17, %14, %6
  %20 = phi i1 [ false, %6 ], [ false, %14 ], [ %18, %17 ]
  %21 = zext i1 %20 to i8
  %22 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 17
  store i8 %21, i8* %22, align 1
  %23 = tail call i32 @__remill_fpu_exception_test_and_clear(i32 0, i32 61) 
  tail call void asm sideeffect "", "~{memory},~{dirflag},~{fpsr},~{flags}"() 
  tail call void asm sideeffect "", "~{memory},~{dirflag},~{fpsr},~{flags}"() 
  %24 = tail call i32 @__remill_fpu_exception_test_and_clear(i32 61, i32 %23) 
  %25 = lshr i32 %24, 5
  %26 = and i32 %25, 1
  %27 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 9
  %28 = load i8, i8* %27, align 1
  %29 = zext i8 %28 to i32
  %30 = or i32 %29, %26
  %31 = trunc i32 %30 to i8
  store i8 %31, i8* %27, align 1
  %32 = lshr i32 %24, 3
  %33 = and i32 %32, 1
  %34 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 13
  %35 = load i8, i8* %34, align 1
  %36 = zext i8 %35 to i32
  %37 = or i32 %36, %33
  %38 = trunc i32 %37 to i8
  store i8 %38, i8* %34, align 1
  %39 = lshr i32 %24, 4
  %40 = and i32 %39, 1
  %41 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 11
  %42 = load i8, i8* %41, align 1
  %43 = zext i8 %42 to i32
  %44 = or i32 %43, %40
  %45 = trunc i32 %44 to i8
  store i8 %45, i8* %41, align 1
  %46 = and i32 %24, 1
  %47 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 19
  %48 = load i8, i8* %47, align 1
  %49 = zext i8 %48 to i32
  %50 = or i32 %49, %46
  %51 = trunc i32 %50 to i8
  store i8 %51, i8* %47, align 1
  %52 = lshr i32 %24, 2
  %53 = and i32 %52, 1
  %54 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 15
  %55 = load i8, i8* %54, align 1
  %56 = zext i8 %55 to i32
  %57 = or i32 %56, %53
  %58 = trunc i32 %57 to i8
  store i8 %58, i8* %54, align 1
  %59 = inttoptr i64 %2 to x86_fp80*
  %60 = fpext double %3 to x86_fp80
  store x86_fp80 %60, x86_fp80* %59
  %61 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 0, i32 1
  %62 = bitcast double* %61 to i64*
  %63 = load i64, i64* %62, align 8
  %64 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 1, i32 1
  %65 = bitcast double* %64 to i64*
  %66 = load i64, i64* %65, align 8
  store i64 %66, i64* %62, align 8
  %67 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 2, i32 1
  %68 = bitcast double* %67 to i64*
  %69 = load i64, i64* %68, align 8
  store i64 %69, i64* %65, align 8
  %70 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 3, i32 1
  %71 = bitcast double* %70 to i64*
  %72 = load i64, i64* %71, align 8
  store i64 %72, i64* %68, align 8
  %73 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 4, i32 1
  %74 = bitcast double* %73 to i64*
  %75 = load i64, i64* %74, align 8
  store i64 %75, i64* %71, align 8
  %76 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 5, i32 1
  %77 = bitcast double* %76 to i64*
  %78 = load i64, i64* %77, align 8
  store i64 %78, i64* %74, align 8
  %79 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 6, i32 1
  %80 = bitcast double* %79 to i64*
  %81 = load i64, i64* %80, align 8
  store i64 %81, i64* %77, align 8
  %82 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 7, i32 1
  %83 = bitcast double* %82 to i64*
  %84 = load i64, i64* %83, align 8
  store i64 %84, i64* %80, align 8
  store i64 %63, i64* %83, align 8
  %85 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 11, i32 0, i32 0, i32 1, i32 0
  %86 = load i16, i16* %85, align 2
  %87 = add i16 %86, 2048
  %88 = and i16 %87, 14336
  %89 = and i16 %86, -14337
  %90 = or i16 %88, %89
  store i16 %90, i16* %85, align 2
  ret %struct.Memory* %0
}

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare %struct.Memory* @__remill_write_memory_f80(%struct.Memory*, i64, double) 

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L7FSTPmemI3MnWIdEEEP6MemoryS4_R5StateT_2RnIdE2InImESA_ItE(%struct.Memory* readnone, %struct.State* nocapture dereferenceable(3376), i64, double, i64, i64)  {
  %7 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 11, i32 0, i32 0, i32 8
  %8 = bitcast i32* %7 to i64*
  store i64 %2, i64* %8, align 16
  %9 = trunc i64 %5 to i16
  %10 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 11, i32 0, i32 0, i32 4
  store i16 %9, i16* %10, align 2
  %11 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 11, i32 0, i32 0, i32 5
  %12 = bitcast i32* %11 to i64*
  store i64 %4, i64* %12, align 8
  %13 = fcmp ueq double %3, 0.000000e+00
  br i1 %13, label %19, label %14

; <label>:14:                                     ; preds = %6
  %15 = tail call double @llvm.fabs.f64(double %3) 
  %16 = fcmp oeq double %15, 0x7FF0000000000000
  br i1 %16, label %19, label %17

; <label>:17:                                     ; preds = %14
  %18 = fcmp olt double %15, 0x10000000000000
  br label %19

; <label>:19:                                     ; preds = %17, %14, %6
  %20 = phi i1 [ false, %6 ], [ false, %14 ], [ %18, %17 ]
  %21 = zext i1 %20 to i8
  %22 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 17
  store i8 %21, i8* %22, align 1
  %23 = tail call i32 @__remill_fpu_exception_test_and_clear(i32 0, i32 61) 
  tail call void asm sideeffect "", "~{memory},~{dirflag},~{fpsr},~{flags}"() 
  tail call void asm sideeffect "", "~{memory},~{dirflag},~{fpsr},~{flags}"() 
  %24 = tail call i32 @__remill_fpu_exception_test_and_clear(i32 61, i32 %23) 
  %25 = lshr i32 %24, 5
  %26 = and i32 %25, 1
  %27 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 9
  %28 = load i8, i8* %27, align 1
  %29 = zext i8 %28 to i32
  %30 = or i32 %29, %26
  %31 = trunc i32 %30 to i8
  store i8 %31, i8* %27, align 1
  %32 = lshr i32 %24, 3
  %33 = and i32 %32, 1
  %34 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 13
  %35 = load i8, i8* %34, align 1
  %36 = zext i8 %35 to i32
  %37 = or i32 %36, %33
  %38 = trunc i32 %37 to i8
  store i8 %38, i8* %34, align 1
  %39 = lshr i32 %24, 4
  %40 = and i32 %39, 1
  %41 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 11
  %42 = load i8, i8* %41, align 1
  %43 = zext i8 %42 to i32
  %44 = or i32 %43, %40
  %45 = trunc i32 %44 to i8
  store i8 %45, i8* %41, align 1
  %46 = and i32 %24, 1
  %47 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 19
  %48 = load i8, i8* %47, align 1
  %49 = zext i8 %48 to i32
  %50 = or i32 %49, %46
  %51 = trunc i32 %50 to i8
  store i8 %51, i8* %47, align 1
  %52 = lshr i32 %24, 2
  %53 = and i32 %52, 1
  %54 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 15
  %55 = load i8, i8* %54, align 1
  %56 = zext i8 %55 to i32
  %57 = or i32 %56, %53
  %58 = trunc i32 %57 to i8
  store i8 %58, i8* %54, align 1
  %59 = inttoptr i64 %2 to double*
  store double %3, double* %59
  %60 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 0, i32 1
  %61 = bitcast double* %60 to i64*
  %62 = load i64, i64* %61, align 8
  %63 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 1, i32 1
  %64 = bitcast double* %63 to i64*
  %65 = load i64, i64* %64, align 8
  store i64 %65, i64* %61, align 8
  %66 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 2, i32 1
  %67 = bitcast double* %66 to i64*
  %68 = load i64, i64* %67, align 8
  store i64 %68, i64* %64, align 8
  %69 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 3, i32 1
  %70 = bitcast double* %69 to i64*
  %71 = load i64, i64* %70, align 8
  store i64 %71, i64* %67, align 8
  %72 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 4, i32 1
  %73 = bitcast double* %72 to i64*
  %74 = load i64, i64* %73, align 8
  store i64 %74, i64* %70, align 8
  %75 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 5, i32 1
  %76 = bitcast double* %75 to i64*
  %77 = load i64, i64* %76, align 8
  store i64 %77, i64* %73, align 8
  %78 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 6, i32 1
  %79 = bitcast double* %78 to i64*
  %80 = load i64, i64* %79, align 8
  store i64 %80, i64* %76, align 8
  %81 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 7, i32 1
  %82 = bitcast double* %81 to i64*
  %83 = load i64, i64* %82, align 8
  store i64 %83, i64* %79, align 8
  store i64 %62, i64* %82, align 8
  %84 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 11, i32 0, i32 0, i32 1, i32 0
  %85 = load i16, i16* %84, align 2
  %86 = add i16 %85, 2048
  %87 = and i16 %86, 14336
  %88 = and i16 %85, -14337
  %89 = or i16 %87, %88
  store i16 %89, i16* %84, align 2
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L4FSTPI3RnWIdEEEP6MemoryS4_R5StateT_2RnIdE2InImESA_ItE(%struct.Memory* readnone returned, %struct.State* nocapture dereferenceable(3376), double* nocapture, double, i64, i64)  {
  %7 = trunc i64 %5 to i16
  %8 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 11, i32 0, i32 0, i32 4
  store i16 %7, i16* %8, align 2
  %9 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 11, i32 0, i32 0, i32 5
  %10 = bitcast i32* %9 to i64*
  store i64 %4, i64* %10, align 8
  %11 = fcmp ueq double %3, 0.000000e+00
  br i1 %11, label %17, label %12

; <label>:12:                                     ; preds = %6
  %13 = tail call double @llvm.fabs.f64(double %3) 
  %14 = fcmp oeq double %13, 0x7FF0000000000000
  br i1 %14, label %17, label %15

; <label>:15:                                     ; preds = %12
  %16 = fcmp olt double %13, 0x10000000000000
  br label %17

; <label>:17:                                     ; preds = %15, %12, %6
  %18 = phi i1 [ false, %6 ], [ false, %12 ], [ %16, %15 ]
  %19 = zext i1 %18 to i8
  %20 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 17
  store i8 %19, i8* %20, align 1
  %21 = tail call i32 @__remill_fpu_exception_test_and_clear(i32 0, i32 61) 
  tail call void asm sideeffect "", "~{memory},~{dirflag},~{fpsr},~{flags}"() 
  tail call void asm sideeffect "", "~{memory},~{dirflag},~{fpsr},~{flags}"() 
  %22 = tail call i32 @__remill_fpu_exception_test_and_clear(i32 61, i32 %21) 
  %23 = lshr i32 %22, 5
  %24 = and i32 %23, 1
  %25 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 9
  %26 = load i8, i8* %25, align 1
  %27 = zext i8 %26 to i32
  %28 = or i32 %27, %24
  %29 = trunc i32 %28 to i8
  store i8 %29, i8* %25, align 1
  %30 = lshr i32 %22, 3
  %31 = and i32 %30, 1
  %32 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 13
  %33 = load i8, i8* %32, align 1
  %34 = zext i8 %33 to i32
  %35 = or i32 %34, %31
  %36 = trunc i32 %35 to i8
  store i8 %36, i8* %32, align 1
  %37 = lshr i32 %22, 4
  %38 = and i32 %37, 1
  %39 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 11
  %40 = load i8, i8* %39, align 1
  %41 = zext i8 %40 to i32
  %42 = or i32 %41, %38
  %43 = trunc i32 %42 to i8
  store i8 %43, i8* %39, align 1
  %44 = and i32 %22, 1
  %45 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 19
  %46 = load i8, i8* %45, align 1
  %47 = zext i8 %46 to i32
  %48 = or i32 %47, %44
  %49 = trunc i32 %48 to i8
  store i8 %49, i8* %45, align 1
  %50 = lshr i32 %22, 2
  %51 = and i32 %50, 1
  %52 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 15
  %53 = load i8, i8* %52, align 1
  %54 = zext i8 %53 to i32
  %55 = or i32 %54, %51
  %56 = trunc i32 %55 to i8
  store i8 %56, i8* %52, align 1
  store double %3, double* %2, align 8
  %57 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 0, i32 1
  %58 = bitcast double* %57 to i64*
  %59 = load i64, i64* %58, align 8
  %60 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 1, i32 1
  %61 = bitcast double* %60 to i64*
  %62 = load i64, i64* %61, align 8
  store i64 %62, i64* %58, align 8
  %63 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 2, i32 1
  %64 = bitcast double* %63 to i64*
  %65 = load i64, i64* %64, align 8
  store i64 %65, i64* %61, align 8
  %66 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 3, i32 1
  %67 = bitcast double* %66 to i64*
  %68 = load i64, i64* %67, align 8
  store i64 %68, i64* %64, align 8
  %69 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 4, i32 1
  %70 = bitcast double* %69 to i64*
  %71 = load i64, i64* %70, align 8
  store i64 %71, i64* %67, align 8
  %72 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 5, i32 1
  %73 = bitcast double* %72 to i64*
  %74 = load i64, i64* %73, align 8
  store i64 %74, i64* %70, align 8
  %75 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 6, i32 1
  %76 = bitcast double* %75 to i64*
  %77 = load i64, i64* %76, align 8
  store i64 %77, i64* %73, align 8
  %78 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 7, i32 1
  %79 = bitcast double* %78 to i64*
  %80 = load i64, i64* %79, align 8
  store i64 %80, i64* %76, align 8
  store i64 %59, i64* %79, align 8
  %81 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 11, i32 0, i32 0, i32 1, i32 0
  %82 = load i16, i16* %81, align 2
  %83 = add i16 %82, 2048
  %84 = and i16 %83, 14336
  %85 = and i16 %82, -14337
  %86 = or i16 %84, %85
  store i16 %86, i16* %81, align 2
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L6FSTmemI3MnWIfEEEP6MemoryS4_R5StateT_2RnIdE2InImESA_ItE(%struct.Memory* readnone, %struct.State* nocapture dereferenceable(3376), i64, double, i64, i64)  {
  %7 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 11, i32 0, i32 0, i32 8
  %8 = bitcast i32* %7 to i64*
  store i64 %2, i64* %8, align 16
  %9 = trunc i64 %5 to i16
  %10 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 11, i32 0, i32 0, i32 4
  store i16 %9, i16* %10, align 2
  %11 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 11, i32 0, i32 0, i32 5
  %12 = bitcast i32* %11 to i64*
  store i64 %4, i64* %12, align 8
  %13 = fcmp ueq double %3, 0.000000e+00
  br i1 %13, label %19, label %14

; <label>:14:                                     ; preds = %6
  %15 = tail call double @llvm.fabs.f64(double %3) 
  %16 = fcmp oeq double %15, 0x7FF0000000000000
  br i1 %16, label %19, label %17

; <label>:17:                                     ; preds = %14
  %18 = fcmp olt double %15, 0x10000000000000
  br label %19

; <label>:19:                                     ; preds = %17, %14, %6
  %20 = phi i1 [ false, %6 ], [ false, %14 ], [ %18, %17 ]
  %21 = zext i1 %20 to i8
  %22 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 17
  store i8 %21, i8* %22, align 1
  %23 = tail call i32 @__remill_fpu_exception_test_and_clear(i32 0, i32 61) 
  tail call void asm sideeffect "", "~{memory},~{dirflag},~{fpsr},~{flags}"() 
  %24 = fptrunc double %3 to float
  tail call void asm sideeffect "", "~{memory},~{dirflag},~{fpsr},~{flags}"() 
  %25 = tail call i32 @__remill_fpu_exception_test_and_clear(i32 61, i32 %23) 
  %26 = lshr i32 %25, 5
  %27 = and i32 %26, 1
  %28 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 9
  %29 = load i8, i8* %28, align 1
  %30 = zext i8 %29 to i32
  %31 = or i32 %30, %27
  %32 = trunc i32 %31 to i8
  store i8 %32, i8* %28, align 1
  %33 = lshr i32 %25, 3
  %34 = and i32 %33, 1
  %35 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 13
  %36 = load i8, i8* %35, align 1
  %37 = zext i8 %36 to i32
  %38 = or i32 %37, %34
  %39 = trunc i32 %38 to i8
  store i8 %39, i8* %35, align 1
  %40 = lshr i32 %25, 4
  %41 = and i32 %40, 1
  %42 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 11
  %43 = load i8, i8* %42, align 1
  %44 = zext i8 %43 to i32
  %45 = or i32 %44, %41
  %46 = trunc i32 %45 to i8
  store i8 %46, i8* %42, align 1
  %47 = and i32 %25, 1
  %48 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 19
  %49 = load i8, i8* %48, align 1
  %50 = zext i8 %49 to i32
  %51 = or i32 %50, %47
  %52 = trunc i32 %51 to i8
  store i8 %52, i8* %48, align 1
  %53 = lshr i32 %25, 2
  %54 = and i32 %53, 1
  %55 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 15
  %56 = load i8, i8* %55, align 1
  %57 = zext i8 %56 to i32
  %58 = or i32 %57, %54
  %59 = trunc i32 %58 to i8
  store i8 %59, i8* %55, align 1
  %60 = inttoptr i64 %2 to float*
  store float %24, float* %60
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L6FSTmemI3MnWIdEEEP6MemoryS4_R5StateT_2RnIdE2InImESA_ItE(%struct.Memory* readnone, %struct.State* nocapture dereferenceable(3376), i64, double, i64, i64)  {
  %7 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 11, i32 0, i32 0, i32 8
  %8 = bitcast i32* %7 to i64*
  store i64 %2, i64* %8, align 16
  %9 = trunc i64 %5 to i16
  %10 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 11, i32 0, i32 0, i32 4
  store i16 %9, i16* %10, align 2
  %11 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 11, i32 0, i32 0, i32 5
  %12 = bitcast i32* %11 to i64*
  store i64 %4, i64* %12, align 8
  %13 = fcmp ueq double %3, 0.000000e+00
  br i1 %13, label %19, label %14

; <label>:14:                                     ; preds = %6
  %15 = tail call double @llvm.fabs.f64(double %3) 
  %16 = fcmp oeq double %15, 0x7FF0000000000000
  br i1 %16, label %19, label %17

; <label>:17:                                     ; preds = %14
  %18 = fcmp olt double %15, 0x10000000000000
  br label %19

; <label>:19:                                     ; preds = %17, %14, %6
  %20 = phi i1 [ false, %6 ], [ false, %14 ], [ %18, %17 ]
  %21 = zext i1 %20 to i8
  %22 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 17
  store i8 %21, i8* %22, align 1
  %23 = tail call i32 @__remill_fpu_exception_test_and_clear(i32 0, i32 61) 
  tail call void asm sideeffect "", "~{memory},~{dirflag},~{fpsr},~{flags}"() 
  tail call void asm sideeffect "", "~{memory},~{dirflag},~{fpsr},~{flags}"() 
  %24 = tail call i32 @__remill_fpu_exception_test_and_clear(i32 61, i32 %23) 
  %25 = lshr i32 %24, 5
  %26 = and i32 %25, 1
  %27 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 9
  %28 = load i8, i8* %27, align 1
  %29 = zext i8 %28 to i32
  %30 = or i32 %29, %26
  %31 = trunc i32 %30 to i8
  store i8 %31, i8* %27, align 1
  %32 = lshr i32 %24, 3
  %33 = and i32 %32, 1
  %34 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 13
  %35 = load i8, i8* %34, align 1
  %36 = zext i8 %35 to i32
  %37 = or i32 %36, %33
  %38 = trunc i32 %37 to i8
  store i8 %38, i8* %34, align 1
  %39 = lshr i32 %24, 4
  %40 = and i32 %39, 1
  %41 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 11
  %42 = load i8, i8* %41, align 1
  %43 = zext i8 %42 to i32
  %44 = or i32 %43, %40
  %45 = trunc i32 %44 to i8
  store i8 %45, i8* %41, align 1
  %46 = and i32 %24, 1
  %47 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 19
  %48 = load i8, i8* %47, align 1
  %49 = zext i8 %48 to i32
  %50 = or i32 %49, %46
  %51 = trunc i32 %50 to i8
  store i8 %51, i8* %47, align 1
  %52 = lshr i32 %24, 2
  %53 = and i32 %52, 1
  %54 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 15
  %55 = load i8, i8* %54, align 1
  %56 = zext i8 %55 to i32
  %57 = or i32 %56, %53
  %58 = trunc i32 %57 to i8
  store i8 %58, i8* %54, align 1
  %59 = inttoptr i64 %2 to double*
  store double %3, double* %59
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3FSTI3RnWIdEEEP6MemoryS4_R5StateT_2RnIdE2InImESA_ItE(%struct.Memory* readnone returned, %struct.State* nocapture dereferenceable(3376), double* nocapture, double, i64, i64)  {
  %7 = trunc i64 %5 to i16
  %8 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 11, i32 0, i32 0, i32 4
  store i16 %7, i16* %8, align 2
  %9 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 11, i32 0, i32 0, i32 5
  %10 = bitcast i32* %9 to i64*
  store i64 %4, i64* %10, align 8
  %11 = fcmp ueq double %3, 0.000000e+00
  br i1 %11, label %17, label %12

; <label>:12:                                     ; preds = %6
  %13 = tail call double @llvm.fabs.f64(double %3) 
  %14 = fcmp oeq double %13, 0x7FF0000000000000
  br i1 %14, label %17, label %15

; <label>:15:                                     ; preds = %12
  %16 = fcmp olt double %13, 0x10000000000000
  br label %17

; <label>:17:                                     ; preds = %15, %12, %6
  %18 = phi i1 [ false, %6 ], [ false, %12 ], [ %16, %15 ]
  %19 = zext i1 %18 to i8
  %20 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 17
  store i8 %19, i8* %20, align 1
  %21 = tail call i32 @__remill_fpu_exception_test_and_clear(i32 0, i32 61) 
  tail call void asm sideeffect "", "~{memory},~{dirflag},~{fpsr},~{flags}"() 
  tail call void asm sideeffect "", "~{memory},~{dirflag},~{fpsr},~{flags}"() 
  %22 = tail call i32 @__remill_fpu_exception_test_and_clear(i32 61, i32 %21) 
  %23 = lshr i32 %22, 5
  %24 = and i32 %23, 1
  %25 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 9
  %26 = load i8, i8* %25, align 1
  %27 = zext i8 %26 to i32
  %28 = or i32 %27, %24
  %29 = trunc i32 %28 to i8
  store i8 %29, i8* %25, align 1
  %30 = lshr i32 %22, 3
  %31 = and i32 %30, 1
  %32 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 13
  %33 = load i8, i8* %32, align 1
  %34 = zext i8 %33 to i32
  %35 = or i32 %34, %31
  %36 = trunc i32 %35 to i8
  store i8 %36, i8* %32, align 1
  %37 = lshr i32 %22, 4
  %38 = and i32 %37, 1
  %39 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 11
  %40 = load i8, i8* %39, align 1
  %41 = zext i8 %40 to i32
  %42 = or i32 %41, %38
  %43 = trunc i32 %42 to i8
  store i8 %43, i8* %39, align 1
  %44 = and i32 %22, 1
  %45 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 19
  %46 = load i8, i8* %45, align 1
  %47 = zext i8 %46 to i32
  %48 = or i32 %47, %44
  %49 = trunc i32 %48 to i8
  store i8 %49, i8* %45, align 1
  %50 = lshr i32 %22, 2
  %51 = and i32 %50, 1
  %52 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 15
  %53 = load i8, i8* %52, align 1
  %54 = zext i8 %53 to i32
  %55 = or i32 %54, %51
  %56 = trunc i32 %55 to i8
  store i8 %56, i8* %52, align 1
  store double %3, double* %2, align 8
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L7FISTm16EP6MemoryR5State3MnWItE2RnIdE2InImES8_ItE(%struct.Memory*, %struct.State* nocapture dereferenceable(3376), i64, double, i64, i64)  {
  %7 = trunc i64 %5 to i16
  %8 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 11, i32 0, i32 0, i32 4
  store i16 %7, i16* %8, align 2
  %9 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 11, i32 0, i32 0, i32 5
  %10 = bitcast i32* %9 to i64*
  store i64 %4, i64* %10, align 8
  %11 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 11, i32 0, i32 0, i32 8
  %12 = bitcast i32* %11 to i64*
  store i64 %2, i64* %12, align 16
  %13 = tail call double @llvm.nearbyint.f64(double %3) 
  %14 = fcmp ueq double %13, 0.000000e+00
  br i1 %14, label %15, label %17

; <label>:15:                                     ; preds = %6
  %16 = tail call double @llvm.fabs.f64(double %13) 
  br label %22

; <label>:17:                                     ; preds = %6
  %18 = tail call double @llvm.fabs.f64(double %13) 
  %19 = fcmp oeq double %18, 0x7FF0000000000000
  br i1 %19, label %22, label %20

; <label>:20:                                     ; preds = %17
  %21 = fcmp olt double %18, 0x10000000000000
  br label %22

; <label>:22:                                     ; preds = %20, %17, %15
  %23 = phi double [ %16, %15 ], [ 0x7FF0000000000000, %17 ], [ %18, %20 ]
  %24 = phi i1 [ false, %15 ], [ false, %17 ], [ %21, %20 ]
  %25 = zext i1 %24 to i8
  %26 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 17
  store i8 %25, i8* %26, align 1
  %27 = tail call i32 @__remill_fpu_exception_test_and_clear(i32 0, i32 61) 
  tail call void asm sideeffect "", "~{memory},~{dirflag},~{fpsr},~{flags}"() 
  %28 = fptosi double %13 to i16
  tail call void asm sideeffect "", "~{memory},~{dirflag},~{fpsr},~{flags}"() 
  %29 = tail call i32 @__remill_fpu_exception_test_and_clear(i32 61, i32 %27) 
  %30 = lshr i32 %29, 5
  %31 = and i32 %30, 1
  %32 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 9
  %33 = load i8, i8* %32, align 1
  %34 = zext i8 %33 to i32
  %35 = or i32 %34, %31
  %36 = trunc i32 %35 to i8
  store i8 %36, i8* %32, align 1
  %37 = lshr i32 %29, 3
  %38 = and i32 %37, 1
  %39 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 13
  %40 = load i8, i8* %39, align 1
  %41 = zext i8 %40 to i32
  %42 = or i32 %41, %38
  %43 = trunc i32 %42 to i8
  store i8 %43, i8* %39, align 1
  %44 = lshr i32 %29, 4
  %45 = and i32 %44, 1
  %46 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 11
  %47 = load i8, i8* %46, align 1
  %48 = zext i8 %47 to i32
  %49 = or i32 %48, %45
  %50 = trunc i32 %49 to i8
  store i8 %50, i8* %46, align 1
  %51 = and i32 %29, 1
  %52 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 19
  %53 = load i8, i8* %52, align 1
  %54 = zext i8 %53 to i32
  %55 = or i32 %54, %51
  %56 = trunc i32 %55 to i8
  store i8 %56, i8* %52, align 1
  %57 = lshr i32 %29, 2
  %58 = and i32 %57, 1
  %59 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 15
  %60 = load i8, i8* %59, align 1
  %61 = zext i8 %60 to i32
  %62 = or i32 %61, %58
  %63 = trunc i32 %62 to i8
  store i8 %63, i8* %59, align 1
  %64 = fcmp ogt double %23, 3.276700e+04
  %65 = select i1 %64, i16 -32768, i16 %28
  %66 = sitofp i16 %65 to double
  %67 = or i32 %55, %35
  %68 = icmp eq i32 %67, 0
  br i1 %68, label %69, label %90

; <label>:69:                                     ; preds = %22
  %70 = icmp eq i16 %65, %28
  br i1 %70, label %71, label %78

; <label>:71:                                     ; preds = %69
  %72 = fcmp one double %3, 0.000000e+00
  %73 = tail call double @llvm.fabs.f64(double %3) 
  %74 = fcmp oeq double %73, 0x7FF0000000000000
  %75 = and i1 %72, %74
  %76 = fcmp uno double %3, 0.000000e+00
  %77 = or i1 %76, %75
  br i1 %77, label %78, label %79

; <label>:78:                                     ; preds = %71, %69
  store i8 1, i8* %52, align 1
  store i8 0, i8* %32, align 1
  br label %90

; <label>:79:                                     ; preds = %71
  %80 = fcmp une double %66, %13
  br i1 %80, label %81, label %87

; <label>:81:                                     ; preds = %79
  %82 = tail call double @llvm.fabs.f64(double %66) 
  %83 = fcmp olt double %82, %73
  %84 = zext i1 %83 to i8
  store i8 %84, i8* %52, align 1
  %85 = xor i1 %83, true
  %86 = zext i1 %85 to i8
  store i8 %86, i8* %32, align 1
  br label %90

; <label>:87:                                     ; preds = %79
  %88 = fcmp une double %13, %3
  %89 = zext i1 %88 to i8
  store i8 %89, i8* %32, align 1
  store i8 0, i8* %52, align 1
  br label %90

; <label>:90:                                     ; preds = %87, %81, %78, %22
  %91 = inttoptr i64 %2 to i16*
  store i16 %65, i16* %91
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L7FISTm32EP6MemoryR5State3MnWIjE2RnIdE2InImES8_ItE(%struct.Memory*, %struct.State* nocapture dereferenceable(3376), i64, double, i64, i64)  {
  %7 = trunc i64 %5 to i16
  %8 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 11, i32 0, i32 0, i32 4
  store i16 %7, i16* %8, align 2
  %9 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 11, i32 0, i32 0, i32 5
  %10 = bitcast i32* %9 to i64*
  store i64 %4, i64* %10, align 8
  %11 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 11, i32 0, i32 0, i32 8
  %12 = bitcast i32* %11 to i64*
  store i64 %2, i64* %12, align 16
  %13 = tail call double @llvm.nearbyint.f64(double %3) 
  %14 = fcmp ueq double %13, 0.000000e+00
  br i1 %14, label %15, label %17

; <label>:15:                                     ; preds = %6
  %16 = tail call double @llvm.fabs.f64(double %13) 
  br label %22

; <label>:17:                                     ; preds = %6
  %18 = tail call double @llvm.fabs.f64(double %13) 
  %19 = fcmp oeq double %18, 0x7FF0000000000000
  br i1 %19, label %22, label %20

; <label>:20:                                     ; preds = %17
  %21 = fcmp olt double %18, 0x10000000000000
  br label %22

; <label>:22:                                     ; preds = %20, %17, %15
  %23 = phi double [ %16, %15 ], [ 0x7FF0000000000000, %17 ], [ %18, %20 ]
  %24 = phi i1 [ false, %15 ], [ false, %17 ], [ %21, %20 ]
  %25 = zext i1 %24 to i8
  %26 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 17
  store i8 %25, i8* %26, align 1
  %27 = tail call i32 @__remill_fpu_exception_test_and_clear(i32 0, i32 61) 
  tail call void asm sideeffect "", "~{memory},~{dirflag},~{fpsr},~{flags}"() 
  %28 = fptosi double %13 to i32
  tail call void asm sideeffect "", "~{memory},~{dirflag},~{fpsr},~{flags}"() 
  %29 = tail call i32 @__remill_fpu_exception_test_and_clear(i32 61, i32 %27) 
  %30 = lshr i32 %29, 5
  %31 = and i32 %30, 1
  %32 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 9
  %33 = load i8, i8* %32, align 1
  %34 = zext i8 %33 to i32
  %35 = or i32 %34, %31
  %36 = trunc i32 %35 to i8
  store i8 %36, i8* %32, align 1
  %37 = lshr i32 %29, 3
  %38 = and i32 %37, 1
  %39 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 13
  %40 = load i8, i8* %39, align 1
  %41 = zext i8 %40 to i32
  %42 = or i32 %41, %38
  %43 = trunc i32 %42 to i8
  store i8 %43, i8* %39, align 1
  %44 = lshr i32 %29, 4
  %45 = and i32 %44, 1
  %46 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 11
  %47 = load i8, i8* %46, align 1
  %48 = zext i8 %47 to i32
  %49 = or i32 %48, %45
  %50 = trunc i32 %49 to i8
  store i8 %50, i8* %46, align 1
  %51 = and i32 %29, 1
  %52 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 19
  %53 = load i8, i8* %52, align 1
  %54 = zext i8 %53 to i32
  %55 = or i32 %54, %51
  %56 = trunc i32 %55 to i8
  store i8 %56, i8* %52, align 1
  %57 = lshr i32 %29, 2
  %58 = and i32 %57, 1
  %59 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 15
  %60 = load i8, i8* %59, align 1
  %61 = zext i8 %60 to i32
  %62 = or i32 %61, %58
  %63 = trunc i32 %62 to i8
  store i8 %63, i8* %59, align 1
  %64 = fcmp ogt double %23, 0x41DFFFFFFFC00000
  %65 = select i1 %64, i32 -2147483648, i32 %28
  %66 = sitofp i32 %65 to double
  %67 = or i32 %55, %35
  %68 = icmp eq i32 %67, 0
  br i1 %68, label %69, label %90

; <label>:69:                                     ; preds = %22
  %70 = icmp eq i32 %65, %28
  br i1 %70, label %71, label %78

; <label>:71:                                     ; preds = %69
  %72 = fcmp one double %3, 0.000000e+00
  %73 = tail call double @llvm.fabs.f64(double %3) 
  %74 = fcmp oeq double %73, 0x7FF0000000000000
  %75 = and i1 %72, %74
  %76 = fcmp uno double %3, 0.000000e+00
  %77 = or i1 %76, %75
  br i1 %77, label %78, label %79

; <label>:78:                                     ; preds = %71, %69
  store i8 1, i8* %52, align 1
  store i8 0, i8* %32, align 1
  br label %90

; <label>:79:                                     ; preds = %71
  %80 = fcmp une double %66, %13
  br i1 %80, label %81, label %87

; <label>:81:                                     ; preds = %79
  %82 = tail call double @llvm.fabs.f64(double %66) 
  %83 = fcmp olt double %82, %73
  %84 = zext i1 %83 to i8
  store i8 %84, i8* %52, align 1
  %85 = xor i1 %83, true
  %86 = zext i1 %85 to i8
  store i8 %86, i8* %32, align 1
  br label %90

; <label>:87:                                     ; preds = %79
  %88 = fcmp une double %13, %3
  %89 = zext i1 %88 to i8
  store i8 %89, i8* %32, align 1
  store i8 0, i8* %52, align 1
  br label %90

; <label>:90:                                     ; preds = %87, %81, %78, %22
  %91 = inttoptr i64 %2 to i32*
  store i32 %65, i32* %91
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L8FISTPm16EP6MemoryR5State3MnWItE2RnIdE2InImES8_ItE(%struct.Memory* readnone, %struct.State* nocapture dereferenceable(3376), i64, double, i64, i64)  {
  %7 = trunc i64 %5 to i16
  %8 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 11, i32 0, i32 0, i32 4
  store i16 %7, i16* %8, align 2
  %9 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 11, i32 0, i32 0, i32 5
  %10 = bitcast i32* %9 to i64*
  store i64 %4, i64* %10, align 8
  %11 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 11, i32 0, i32 0, i32 8
  %12 = bitcast i32* %11 to i64*
  store i64 %2, i64* %12, align 16
  %13 = tail call double @llvm.nearbyint.f64(double %3) 
  %14 = fcmp ueq double %13, 0.000000e+00
  br i1 %14, label %15, label %17

; <label>:15:                                     ; preds = %6
  %16 = tail call double @llvm.fabs.f64(double %13) 
  br label %22

; <label>:17:                                     ; preds = %6
  %18 = tail call double @llvm.fabs.f64(double %13) 
  %19 = fcmp oeq double %18, 0x7FF0000000000000
  br i1 %19, label %22, label %20

; <label>:20:                                     ; preds = %17
  %21 = fcmp olt double %18, 0x10000000000000
  br label %22

; <label>:22:                                     ; preds = %20, %17, %15
  %23 = phi double [ %16, %15 ], [ 0x7FF0000000000000, %17 ], [ %18, %20 ]
  %24 = phi i1 [ false, %15 ], [ false, %17 ], [ %21, %20 ]
  %25 = zext i1 %24 to i8
  %26 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 17
  store i8 %25, i8* %26, align 1
  %27 = tail call i32 @__remill_fpu_exception_test_and_clear(i32 0, i32 61) 
  tail call void asm sideeffect "", "~{memory},~{dirflag},~{fpsr},~{flags}"() 
  %28 = fptosi double %13 to i16
  tail call void asm sideeffect "", "~{memory},~{dirflag},~{fpsr},~{flags}"() 
  %29 = tail call i32 @__remill_fpu_exception_test_and_clear(i32 61, i32 %27) 
  %30 = lshr i32 %29, 5
  %31 = and i32 %30, 1
  %32 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 9
  %33 = load i8, i8* %32, align 1
  %34 = zext i8 %33 to i32
  %35 = or i32 %34, %31
  %36 = trunc i32 %35 to i8
  store i8 %36, i8* %32, align 1
  %37 = lshr i32 %29, 3
  %38 = and i32 %37, 1
  %39 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 13
  %40 = load i8, i8* %39, align 1
  %41 = zext i8 %40 to i32
  %42 = or i32 %41, %38
  %43 = trunc i32 %42 to i8
  store i8 %43, i8* %39, align 1
  %44 = lshr i32 %29, 4
  %45 = and i32 %44, 1
  %46 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 11
  %47 = load i8, i8* %46, align 1
  %48 = zext i8 %47 to i32
  %49 = or i32 %48, %45
  %50 = trunc i32 %49 to i8
  store i8 %50, i8* %46, align 1
  %51 = and i32 %29, 1
  %52 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 19
  %53 = load i8, i8* %52, align 1
  %54 = zext i8 %53 to i32
  %55 = or i32 %54, %51
  %56 = trunc i32 %55 to i8
  store i8 %56, i8* %52, align 1
  %57 = lshr i32 %29, 2
  %58 = and i32 %57, 1
  %59 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 15
  %60 = load i8, i8* %59, align 1
  %61 = zext i8 %60 to i32
  %62 = or i32 %61, %58
  %63 = trunc i32 %62 to i8
  store i8 %63, i8* %59, align 1
  %64 = fcmp ogt double %23, 3.276700e+04
  %65 = select i1 %64, i16 -32768, i16 %28
  %66 = sitofp i16 %65 to double
  %67 = or i32 %55, %35
  %68 = icmp eq i32 %67, 0
  br i1 %68, label %69, label %90

; <label>:69:                                     ; preds = %22
  %70 = icmp eq i16 %65, %28
  br i1 %70, label %71, label %78

; <label>:71:                                     ; preds = %69
  %72 = fcmp one double %3, 0.000000e+00
  %73 = tail call double @llvm.fabs.f64(double %3) 
  %74 = fcmp oeq double %73, 0x7FF0000000000000
  %75 = and i1 %72, %74
  %76 = fcmp uno double %3, 0.000000e+00
  %77 = or i1 %76, %75
  br i1 %77, label %78, label %79

; <label>:78:                                     ; preds = %71, %69
  store i8 1, i8* %52, align 1
  store i8 0, i8* %32, align 1
  br label %90

; <label>:79:                                     ; preds = %71
  %80 = fcmp une double %66, %13
  br i1 %80, label %81, label %87

; <label>:81:                                     ; preds = %79
  %82 = tail call double @llvm.fabs.f64(double %66) 
  %83 = fcmp olt double %82, %73
  %84 = zext i1 %83 to i8
  store i8 %84, i8* %52, align 1
  %85 = xor i1 %83, true
  %86 = zext i1 %85 to i8
  store i8 %86, i8* %32, align 1
  br label %90

; <label>:87:                                     ; preds = %79
  %88 = fcmp une double %13, %3
  %89 = zext i1 %88 to i8
  store i8 %89, i8* %32, align 1
  store i8 0, i8* %52, align 1
  br label %90

; <label>:90:                                     ; preds = %87, %81, %78, %22
  %91 = inttoptr i64 %2 to i16*
  store i16 %65, i16* %91
  %92 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 0, i32 1
  %93 = bitcast double* %92 to i64*
  %94 = load i64, i64* %93, align 8
  %95 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 1, i32 1
  %96 = bitcast double* %95 to i64*
  %97 = load i64, i64* %96, align 8
  store i64 %97, i64* %93, align 8
  %98 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 2, i32 1
  %99 = bitcast double* %98 to i64*
  %100 = load i64, i64* %99, align 8
  store i64 %100, i64* %96, align 8
  %101 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 3, i32 1
  %102 = bitcast double* %101 to i64*
  %103 = load i64, i64* %102, align 8
  store i64 %103, i64* %99, align 8
  %104 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 4, i32 1
  %105 = bitcast double* %104 to i64*
  %106 = load i64, i64* %105, align 8
  store i64 %106, i64* %102, align 8
  %107 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 5, i32 1
  %108 = bitcast double* %107 to i64*
  %109 = load i64, i64* %108, align 8
  store i64 %109, i64* %105, align 8
  %110 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 6, i32 1
  %111 = bitcast double* %110 to i64*
  %112 = load i64, i64* %111, align 8
  store i64 %112, i64* %108, align 8
  %113 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 7, i32 1
  %114 = bitcast double* %113 to i64*
  %115 = load i64, i64* %114, align 8
  store i64 %115, i64* %111, align 8
  store i64 %94, i64* %114, align 8
  %116 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 11, i32 0, i32 0, i32 1, i32 0
  %117 = load i16, i16* %116, align 2
  %118 = add i16 %117, 2048
  %119 = and i16 %118, 14336
  %120 = and i16 %117, -14337
  %121 = or i16 %119, %120
  store i16 %121, i16* %116, align 2
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L8FISTPm32EP6MemoryR5State3MnWIjE2RnIdE2InImES8_ItE(%struct.Memory* readnone, %struct.State* nocapture dereferenceable(3376), i64, double, i64, i64)  {
  %7 = trunc i64 %5 to i16
  %8 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 11, i32 0, i32 0, i32 4
  store i16 %7, i16* %8, align 2
  %9 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 11, i32 0, i32 0, i32 5
  %10 = bitcast i32* %9 to i64*
  store i64 %4, i64* %10, align 8
  %11 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 11, i32 0, i32 0, i32 8
  %12 = bitcast i32* %11 to i64*
  store i64 %2, i64* %12, align 16
  %13 = tail call double @llvm.nearbyint.f64(double %3) 
  %14 = fcmp ueq double %13, 0.000000e+00
  br i1 %14, label %15, label %17

; <label>:15:                                     ; preds = %6
  %16 = tail call double @llvm.fabs.f64(double %13) 
  br label %22

; <label>:17:                                     ; preds = %6
  %18 = tail call double @llvm.fabs.f64(double %13) 
  %19 = fcmp oeq double %18, 0x7FF0000000000000
  br i1 %19, label %22, label %20

; <label>:20:                                     ; preds = %17
  %21 = fcmp olt double %18, 0x10000000000000
  br label %22

; <label>:22:                                     ; preds = %20, %17, %15
  %23 = phi double [ %16, %15 ], [ 0x7FF0000000000000, %17 ], [ %18, %20 ]
  %24 = phi i1 [ false, %15 ], [ false, %17 ], [ %21, %20 ]
  %25 = zext i1 %24 to i8
  %26 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 17
  store i8 %25, i8* %26, align 1
  %27 = tail call i32 @__remill_fpu_exception_test_and_clear(i32 0, i32 61) 
  tail call void asm sideeffect "", "~{memory},~{dirflag},~{fpsr},~{flags}"() 
  %28 = fptosi double %13 to i32
  tail call void asm sideeffect "", "~{memory},~{dirflag},~{fpsr},~{flags}"() 
  %29 = tail call i32 @__remill_fpu_exception_test_and_clear(i32 61, i32 %27) 
  %30 = lshr i32 %29, 5
  %31 = and i32 %30, 1
  %32 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 9
  %33 = load i8, i8* %32, align 1
  %34 = zext i8 %33 to i32
  %35 = or i32 %34, %31
  %36 = trunc i32 %35 to i8
  store i8 %36, i8* %32, align 1
  %37 = lshr i32 %29, 3
  %38 = and i32 %37, 1
  %39 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 13
  %40 = load i8, i8* %39, align 1
  %41 = zext i8 %40 to i32
  %42 = or i32 %41, %38
  %43 = trunc i32 %42 to i8
  store i8 %43, i8* %39, align 1
  %44 = lshr i32 %29, 4
  %45 = and i32 %44, 1
  %46 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 11
  %47 = load i8, i8* %46, align 1
  %48 = zext i8 %47 to i32
  %49 = or i32 %48, %45
  %50 = trunc i32 %49 to i8
  store i8 %50, i8* %46, align 1
  %51 = and i32 %29, 1
  %52 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 19
  %53 = load i8, i8* %52, align 1
  %54 = zext i8 %53 to i32
  %55 = or i32 %54, %51
  %56 = trunc i32 %55 to i8
  store i8 %56, i8* %52, align 1
  %57 = lshr i32 %29, 2
  %58 = and i32 %57, 1
  %59 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 15
  %60 = load i8, i8* %59, align 1
  %61 = zext i8 %60 to i32
  %62 = or i32 %61, %58
  %63 = trunc i32 %62 to i8
  store i8 %63, i8* %59, align 1
  %64 = fcmp ogt double %23, 0x41DFFFFFFFC00000
  %65 = select i1 %64, i32 -2147483648, i32 %28
  %66 = sitofp i32 %65 to double
  %67 = or i32 %55, %35
  %68 = icmp eq i32 %67, 0
  br i1 %68, label %69, label %90

; <label>:69:                                     ; preds = %22
  %70 = icmp eq i32 %65, %28
  br i1 %70, label %71, label %78

; <label>:71:                                     ; preds = %69
  %72 = fcmp one double %3, 0.000000e+00
  %73 = tail call double @llvm.fabs.f64(double %3) 
  %74 = fcmp oeq double %73, 0x7FF0000000000000
  %75 = and i1 %72, %74
  %76 = fcmp uno double %3, 0.000000e+00
  %77 = or i1 %76, %75
  br i1 %77, label %78, label %79

; <label>:78:                                     ; preds = %71, %69
  store i8 1, i8* %52, align 1
  store i8 0, i8* %32, align 1
  br label %90

; <label>:79:                                     ; preds = %71
  %80 = fcmp une double %66, %13
  br i1 %80, label %81, label %87

; <label>:81:                                     ; preds = %79
  %82 = tail call double @llvm.fabs.f64(double %66) 
  %83 = fcmp olt double %82, %73
  %84 = zext i1 %83 to i8
  store i8 %84, i8* %52, align 1
  %85 = xor i1 %83, true
  %86 = zext i1 %85 to i8
  store i8 %86, i8* %32, align 1
  br label %90

; <label>:87:                                     ; preds = %79
  %88 = fcmp une double %13, %3
  %89 = zext i1 %88 to i8
  store i8 %89, i8* %32, align 1
  store i8 0, i8* %52, align 1
  br label %90

; <label>:90:                                     ; preds = %87, %81, %78, %22
  %91 = inttoptr i64 %2 to i32*
  store i32 %65, i32* %91
  %92 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 0, i32 1
  %93 = bitcast double* %92 to i64*
  %94 = load i64, i64* %93, align 8
  %95 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 1, i32 1
  %96 = bitcast double* %95 to i64*
  %97 = load i64, i64* %96, align 8
  store i64 %97, i64* %93, align 8
  %98 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 2, i32 1
  %99 = bitcast double* %98 to i64*
  %100 = load i64, i64* %99, align 8
  store i64 %100, i64* %96, align 8
  %101 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 3, i32 1
  %102 = bitcast double* %101 to i64*
  %103 = load i64, i64* %102, align 8
  store i64 %103, i64* %99, align 8
  %104 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 4, i32 1
  %105 = bitcast double* %104 to i64*
  %106 = load i64, i64* %105, align 8
  store i64 %106, i64* %102, align 8
  %107 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 5, i32 1
  %108 = bitcast double* %107 to i64*
  %109 = load i64, i64* %108, align 8
  store i64 %109, i64* %105, align 8
  %110 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 6, i32 1
  %111 = bitcast double* %110 to i64*
  %112 = load i64, i64* %111, align 8
  store i64 %112, i64* %108, align 8
  %113 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 7, i32 1
  %114 = bitcast double* %113 to i64*
  %115 = load i64, i64* %114, align 8
  store i64 %115, i64* %111, align 8
  store i64 %94, i64* %114, align 8
  %116 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 11, i32 0, i32 0, i32 1, i32 0
  %117 = load i16, i16* %116, align 2
  %118 = add i16 %117, 2048
  %119 = and i16 %118, 14336
  %120 = and i16 %117, -14337
  %121 = or i16 %119, %120
  store i16 %121, i16* %116, align 2
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L8FISTPm64EP6MemoryR5State3MnWImE2RnIdE2InImES8_ItE(%struct.Memory*, %struct.State* nocapture dereferenceable(3376), i64, double, i64, i64)  {
  %7 = trunc i64 %5 to i16
  %8 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 11, i32 0, i32 0, i32 4
  store i16 %7, i16* %8, align 2
  %9 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 11, i32 0, i32 0, i32 5
  %10 = bitcast i32* %9 to i64*
  store i64 %4, i64* %10, align 8
  %11 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 11, i32 0, i32 0, i32 8
  %12 = bitcast i32* %11 to i64*
  store i64 %2, i64* %12, align 16
  %13 = tail call double @llvm.nearbyint.f64(double %3) 
  %14 = fcmp ueq double %13, 0.000000e+00
  br i1 %14, label %15, label %17

; <label>:15:                                     ; preds = %6
  %16 = tail call double @llvm.fabs.f64(double %13) 
  br label %22

; <label>:17:                                     ; preds = %6
  %18 = tail call double @llvm.fabs.f64(double %13) 
  %19 = fcmp oeq double %18, 0x7FF0000000000000
  br i1 %19, label %22, label %20

; <label>:20:                                     ; preds = %17
  %21 = fcmp olt double %18, 0x10000000000000
  br label %22

; <label>:22:                                     ; preds = %20, %17, %15
  %23 = phi double [ %16, %15 ], [ 0x7FF0000000000000, %17 ], [ %18, %20 ]
  %24 = phi i1 [ false, %15 ], [ false, %17 ], [ %21, %20 ]
  %25 = zext i1 %24 to i8
  %26 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 17
  store i8 %25, i8* %26, align 1
  %27 = tail call i32 @__remill_fpu_exception_test_and_clear(i32 0, i32 61) 
  tail call void asm sideeffect "", "~{memory},~{dirflag},~{fpsr},~{flags}"() 
  %28 = fptosi double %13 to i64
  tail call void asm sideeffect "", "~{memory},~{dirflag},~{fpsr},~{flags}"() 
  %29 = tail call i32 @__remill_fpu_exception_test_and_clear(i32 61, i32 %27) 
  %30 = lshr i32 %29, 5
  %31 = and i32 %30, 1
  %32 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 9
  %33 = load i8, i8* %32, align 1
  %34 = zext i8 %33 to i32
  %35 = or i32 %34, %31
  %36 = trunc i32 %35 to i8
  store i8 %36, i8* %32, align 1
  %37 = lshr i32 %29, 3
  %38 = and i32 %37, 1
  %39 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 13
  %40 = load i8, i8* %39, align 1
  %41 = zext i8 %40 to i32
  %42 = or i32 %41, %38
  %43 = trunc i32 %42 to i8
  store i8 %43, i8* %39, align 1
  %44 = lshr i32 %29, 4
  %45 = and i32 %44, 1
  %46 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 11
  %47 = load i8, i8* %46, align 1
  %48 = zext i8 %47 to i32
  %49 = or i32 %48, %45
  %50 = trunc i32 %49 to i8
  store i8 %50, i8* %46, align 1
  %51 = and i32 %29, 1
  %52 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 19
  %53 = load i8, i8* %52, align 1
  %54 = zext i8 %53 to i32
  %55 = or i32 %54, %51
  %56 = trunc i32 %55 to i8
  store i8 %56, i8* %52, align 1
  %57 = lshr i32 %29, 2
  %58 = and i32 %57, 1
  %59 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 15
  %60 = load i8, i8* %59, align 1
  %61 = zext i8 %60 to i32
  %62 = or i32 %61, %58
  %63 = trunc i32 %62 to i8
  store i8 %63, i8* %59, align 1
  %64 = fcmp ogt double %23, 0x43E0000000000000
  %65 = select i1 %64, i64 -9223372036854775808, i64 %28
  %66 = sitofp i64 %65 to double
  %67 = or i32 %55, %35
  %68 = icmp eq i32 %67, 0
  br i1 %68, label %69, label %90

; <label>:69:                                     ; preds = %22
  %70 = icmp eq i64 %65, %28
  br i1 %70, label %71, label %78

; <label>:71:                                     ; preds = %69
  %72 = fcmp one double %3, 0.000000e+00
  %73 = tail call double @llvm.fabs.f64(double %3) 
  %74 = fcmp oeq double %73, 0x7FF0000000000000
  %75 = and i1 %72, %74
  %76 = fcmp uno double %3, 0.000000e+00
  %77 = or i1 %76, %75
  br i1 %77, label %78, label %79

; <label>:78:                                     ; preds = %71, %69
  store i8 1, i8* %52, align 1
  store i8 0, i8* %32, align 1
  br label %90

; <label>:79:                                     ; preds = %71
  %80 = fcmp une double %66, %13
  br i1 %80, label %81, label %87

; <label>:81:                                     ; preds = %79
  %82 = tail call double @llvm.fabs.f64(double %66) 
  %83 = fcmp olt double %82, %73
  %84 = zext i1 %83 to i8
  store i8 %84, i8* %52, align 1
  %85 = xor i1 %83, true
  %86 = zext i1 %85 to i8
  store i8 %86, i8* %32, align 1
  br label %90

; <label>:87:                                     ; preds = %79
  %88 = fcmp une double %13, %3
  %89 = zext i1 %88 to i8
  store i8 %89, i8* %32, align 1
  store i8 0, i8* %52, align 1
  br label %90

; <label>:90:                                     ; preds = %87, %81, %78, %22
  %91 = inttoptr i64 %2 to i64*
  store i64 %65, i64* %91
  %92 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 0, i32 1
  %93 = bitcast double* %92 to i64*
  %94 = load i64, i64* %93, align 8
  %95 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 1, i32 1
  %96 = bitcast double* %95 to i64*
  %97 = load i64, i64* %96, align 8
  store i64 %97, i64* %93, align 8
  %98 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 2, i32 1
  %99 = bitcast double* %98 to i64*
  %100 = load i64, i64* %99, align 8
  store i64 %100, i64* %96, align 8
  %101 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 3, i32 1
  %102 = bitcast double* %101 to i64*
  %103 = load i64, i64* %102, align 8
  store i64 %103, i64* %99, align 8
  %104 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 4, i32 1
  %105 = bitcast double* %104 to i64*
  %106 = load i64, i64* %105, align 8
  store i64 %106, i64* %102, align 8
  %107 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 5, i32 1
  %108 = bitcast double* %107 to i64*
  %109 = load i64, i64* %108, align 8
  store i64 %109, i64* %105, align 8
  %110 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 6, i32 1
  %111 = bitcast double* %110 to i64*
  %112 = load i64, i64* %111, align 8
  store i64 %112, i64* %108, align 8
  %113 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 7, i32 1
  %114 = bitcast double* %113 to i64*
  %115 = load i64, i64* %114, align 8
  store i64 %115, i64* %111, align 8
  store i64 %94, i64* %114, align 8
  %116 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 11, i32 0, i32 0, i32 1, i32 0
  %117 = load i16, i16* %116, align 2
  %118 = add i16 %117, 2048
  %119 = and i16 %118, 14336
  %120 = and i16 %117, -14337
  %121 = or i16 %119, %120
  store i16 %121, i16* %116, align 2
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline norecurse nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L9DoFDECSTPEP6MemoryR5State2InImES4_ItE(%struct.Memory* readnone returned, %struct.State* nocapture dereferenceable(3376), i64, i64)  {
  %5 = trunc i64 %3 to i16
  %6 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 11, i32 0, i32 0, i32 4
  store i16 %5, i16* %6, align 2
  %7 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 11, i32 0, i32 0, i32 5
  %8 = bitcast i32* %7 to i64*
  store i64 %2, i64* %8, align 8
  %9 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 7, i32 1
  %10 = bitcast double* %9 to i64*
  %11 = load i64, i64* %10, align 8
  %12 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 6, i32 1
  %13 = bitcast double* %12 to i64*
  %14 = load i64, i64* %13, align 8
  store i64 %14, i64* %10, align 8
  %15 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 5, i32 1
  %16 = bitcast double* %15 to i64*
  %17 = load i64, i64* %16, align 8
  store i64 %17, i64* %13, align 8
  %18 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 4, i32 1
  %19 = bitcast double* %18 to i64*
  %20 = load i64, i64* %19, align 8
  store i64 %20, i64* %16, align 8
  %21 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 3, i32 1
  %22 = bitcast double* %21 to i64*
  %23 = load i64, i64* %22, align 8
  store i64 %23, i64* %19, align 8
  %24 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 2, i32 1
  %25 = bitcast double* %24 to i64*
  %26 = load i64, i64* %25, align 8
  store i64 %26, i64* %22, align 8
  %27 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 1, i32 1
  %28 = bitcast double* %27 to i64*
  %29 = load i64, i64* %28, align 8
  store i64 %29, i64* %25, align 8
  %30 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 0, i32 1
  %31 = bitcast double* %30 to i64*
  %32 = load i64, i64* %31, align 8
  store i64 %32, i64* %28, align 8
  store i64 %11, i64* %31, align 8
  %33 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 11, i32 0, i32 0, i32 1, i32 0
  %34 = load i16, i16* %33, align 2
  %35 = add i16 %34, 14336
  %36 = and i16 %35, 14336
  %37 = and i16 %34, -14337
  %38 = or i16 %36, %37
  store i16 %38, i16* %33, align 2
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline norecurse nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L9DoFINCSTPEP6MemoryR5State2InImES4_ItE(%struct.Memory* readnone returned, %struct.State* nocapture dereferenceable(3376), i64, i64)  {
  %5 = trunc i64 %3 to i16
  %6 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 11, i32 0, i32 0, i32 4
  store i16 %5, i16* %6, align 2
  %7 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 11, i32 0, i32 0, i32 5
  %8 = bitcast i32* %7 to i64*
  store i64 %2, i64* %8, align 8
  %9 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 0, i32 1
  %10 = bitcast double* %9 to i64*
  %11 = load i64, i64* %10, align 8
  %12 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 1, i32 1
  %13 = bitcast double* %12 to i64*
  %14 = load i64, i64* %13, align 8
  store i64 %14, i64* %10, align 8
  %15 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 2, i32 1
  %16 = bitcast double* %15 to i64*
  %17 = load i64, i64* %16, align 8
  store i64 %17, i64* %13, align 8
  %18 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 3, i32 1
  %19 = bitcast double* %18 to i64*
  %20 = load i64, i64* %19, align 8
  store i64 %20, i64* %16, align 8
  %21 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 4, i32 1
  %22 = bitcast double* %21 to i64*
  %23 = load i64, i64* %22, align 8
  store i64 %23, i64* %19, align 8
  %24 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 5, i32 1
  %25 = bitcast double* %24 to i64*
  %26 = load i64, i64* %25, align 8
  store i64 %26, i64* %22, align 8
  %27 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 6, i32 1
  %28 = bitcast double* %27 to i64*
  %29 = load i64, i64* %28, align 8
  store i64 %29, i64* %25, align 8
  %30 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 7, i32 1
  %31 = bitcast double* %30 to i64*
  %32 = load i64, i64* %31, align 8
  store i64 %32, i64* %28, align 8
  store i64 %11, i64* %31, align 8
  %33 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 11, i32 0, i32 0, i32 1, i32 0
  %34 = load i16, i16* %33, align 2
  %35 = add i16 %34, 2048
  %36 = and i16 %35, 14336
  %37 = and i16 %34, -14337
  %38 = or i16 %36, %37
  store i16 %38, i16* %33, align 2
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L9FISTTPm16EP6MemoryR5State3MnWItE2RnIdE2InImES8_ItE(%struct.Memory*, %struct.State* nocapture dereferenceable(3376), i64, double, i64, i64)  {
  %7 = trunc i64 %5 to i16
  %8 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 11, i32 0, i32 0, i32 4
  store i16 %7, i16* %8, align 2
  %9 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 11, i32 0, i32 0, i32 5
  %10 = bitcast i32* %9 to i64*
  store i64 %4, i64* %10, align 8
  %11 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 11, i32 0, i32 0, i32 8
  %12 = bitcast i32* %11 to i64*
  store i64 %2, i64* %12, align 16
  %13 = tail call double @llvm.trunc.f64(double %3) 
  %14 = fcmp ueq double %13, 0.000000e+00
  br i1 %14, label %15, label %17

; <label>:15:                                     ; preds = %6
  %16 = tail call double @llvm.fabs.f64(double %13) 
  br label %22

; <label>:17:                                     ; preds = %6
  %18 = tail call double @llvm.fabs.f64(double %13) 
  %19 = fcmp oeq double %18, 0x7FF0000000000000
  br i1 %19, label %22, label %20

; <label>:20:                                     ; preds = %17
  %21 = fcmp olt double %18, 0x10000000000000
  br label %22

; <label>:22:                                     ; preds = %20, %17, %15
  %23 = phi double [ %16, %15 ], [ 0x7FF0000000000000, %17 ], [ %18, %20 ]
  %24 = phi i1 [ false, %15 ], [ false, %17 ], [ %21, %20 ]
  %25 = zext i1 %24 to i8
  %26 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 17
  store i8 %25, i8* %26, align 1
  %27 = tail call i32 @__remill_fpu_exception_test_and_clear(i32 0, i32 61) 
  tail call void asm sideeffect "", "~{memory},~{dirflag},~{fpsr},~{flags}"() 
  %28 = fptosi double %13 to i16
  tail call void asm sideeffect "", "~{memory},~{dirflag},~{fpsr},~{flags}"() 
  %29 = tail call i32 @__remill_fpu_exception_test_and_clear(i32 61, i32 %27) 
  %30 = lshr i32 %29, 5
  %31 = and i32 %30, 1
  %32 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 9
  %33 = load i8, i8* %32, align 1
  %34 = zext i8 %33 to i32
  %35 = or i32 %34, %31
  %36 = trunc i32 %35 to i8
  store i8 %36, i8* %32, align 1
  %37 = lshr i32 %29, 3
  %38 = and i32 %37, 1
  %39 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 13
  %40 = load i8, i8* %39, align 1
  %41 = zext i8 %40 to i32
  %42 = or i32 %41, %38
  %43 = trunc i32 %42 to i8
  store i8 %43, i8* %39, align 1
  %44 = lshr i32 %29, 4
  %45 = and i32 %44, 1
  %46 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 11
  %47 = load i8, i8* %46, align 1
  %48 = zext i8 %47 to i32
  %49 = or i32 %48, %45
  %50 = trunc i32 %49 to i8
  store i8 %50, i8* %46, align 1
  %51 = and i32 %29, 1
  %52 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 19
  %53 = load i8, i8* %52, align 1
  %54 = zext i8 %53 to i32
  %55 = or i32 %54, %51
  %56 = trunc i32 %55 to i8
  store i8 %56, i8* %52, align 1
  %57 = lshr i32 %29, 2
  %58 = and i32 %57, 1
  %59 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 15
  %60 = load i8, i8* %59, align 1
  %61 = zext i8 %60 to i32
  %62 = or i32 %61, %58
  %63 = trunc i32 %62 to i8
  store i8 %63, i8* %59, align 1
  %64 = fcmp ogt double %23, 3.276700e+04
  %65 = select i1 %64, i16 -32768, i16 %28
  %66 = sitofp i16 %65 to double
  %67 = or i32 %55, %35
  %68 = icmp eq i32 %67, 0
  br i1 %68, label %69, label %90

; <label>:69:                                     ; preds = %22
  %70 = icmp eq i16 %65, %28
  br i1 %70, label %71, label %78

; <label>:71:                                     ; preds = %69
  %72 = fcmp one double %3, 0.000000e+00
  %73 = tail call double @llvm.fabs.f64(double %3) 
  %74 = fcmp oeq double %73, 0x7FF0000000000000
  %75 = and i1 %72, %74
  %76 = fcmp uno double %3, 0.000000e+00
  %77 = or i1 %76, %75
  br i1 %77, label %78, label %79

; <label>:78:                                     ; preds = %71, %69
  store i8 1, i8* %52, align 1
  store i8 0, i8* %32, align 1
  br label %90

; <label>:79:                                     ; preds = %71
  %80 = fcmp une double %66, %13
  br i1 %80, label %81, label %87

; <label>:81:                                     ; preds = %79
  %82 = tail call double @llvm.fabs.f64(double %66) 
  %83 = fcmp olt double %82, %73
  %84 = zext i1 %83 to i8
  store i8 %84, i8* %52, align 1
  %85 = xor i1 %83, true
  %86 = zext i1 %85 to i8
  store i8 %86, i8* %32, align 1
  br label %90

; <label>:87:                                     ; preds = %79
  %88 = fcmp une double %13, %3
  %89 = zext i1 %88 to i8
  store i8 %89, i8* %32, align 1
  store i8 0, i8* %52, align 1
  br label %90

; <label>:90:                                     ; preds = %87, %81, %78, %22
  %91 = inttoptr i64 %2 to i16*
  store i16 %65, i16* %91
  %92 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 0, i32 1
  %93 = bitcast double* %92 to i64*
  %94 = load i64, i64* %93, align 8
  %95 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 1, i32 1
  %96 = bitcast double* %95 to i64*
  %97 = load i64, i64* %96, align 8
  store i64 %97, i64* %93, align 8
  %98 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 2, i32 1
  %99 = bitcast double* %98 to i64*
  %100 = load i64, i64* %99, align 8
  store i64 %100, i64* %96, align 8
  %101 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 3, i32 1
  %102 = bitcast double* %101 to i64*
  %103 = load i64, i64* %102, align 8
  store i64 %103, i64* %99, align 8
  %104 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 4, i32 1
  %105 = bitcast double* %104 to i64*
  %106 = load i64, i64* %105, align 8
  store i64 %106, i64* %102, align 8
  %107 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 5, i32 1
  %108 = bitcast double* %107 to i64*
  %109 = load i64, i64* %108, align 8
  store i64 %109, i64* %105, align 8
  %110 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 6, i32 1
  %111 = bitcast double* %110 to i64*
  %112 = load i64, i64* %111, align 8
  store i64 %112, i64* %108, align 8
  %113 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 7, i32 1
  %114 = bitcast double* %113 to i64*
  %115 = load i64, i64* %114, align 8
  store i64 %115, i64* %111, align 8
  store i64 %94, i64* %114, align 8
  %116 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 11, i32 0, i32 0, i32 1, i32 0
  %117 = load i16, i16* %116, align 2
  %118 = add i16 %117, 2048
  %119 = and i16 %118, 14336
  %120 = and i16 %117, -14337
  %121 = or i16 %119, %120
  store i16 %121, i16* %116, align 2
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L9FISTTPm32EP6MemoryR5State3MnWIjE2RnIdE2InImES8_ItE(%struct.Memory*, %struct.State* nocapture dereferenceable(3376), i64, double, i64, i64)  {
  %7 = trunc i64 %5 to i16
  %8 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 11, i32 0, i32 0, i32 4
  store i16 %7, i16* %8, align 2
  %9 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 11, i32 0, i32 0, i32 5
  %10 = bitcast i32* %9 to i64*
  store i64 %4, i64* %10, align 8
  %11 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 11, i32 0, i32 0, i32 8
  %12 = bitcast i32* %11 to i64*
  store i64 %2, i64* %12, align 16
  %13 = tail call double @llvm.trunc.f64(double %3) 
  %14 = fcmp ueq double %13, 0.000000e+00
  br i1 %14, label %15, label %17

; <label>:15:                                     ; preds = %6
  %16 = tail call double @llvm.fabs.f64(double %13) 
  br label %22

; <label>:17:                                     ; preds = %6
  %18 = tail call double @llvm.fabs.f64(double %13) 
  %19 = fcmp oeq double %18, 0x7FF0000000000000
  br i1 %19, label %22, label %20

; <label>:20:                                     ; preds = %17
  %21 = fcmp olt double %18, 0x10000000000000
  br label %22

; <label>:22:                                     ; preds = %20, %17, %15
  %23 = phi double [ %16, %15 ], [ 0x7FF0000000000000, %17 ], [ %18, %20 ]
  %24 = phi i1 [ false, %15 ], [ false, %17 ], [ %21, %20 ]
  %25 = zext i1 %24 to i8
  %26 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 17
  store i8 %25, i8* %26, align 1
  %27 = tail call i32 @__remill_fpu_exception_test_and_clear(i32 0, i32 61) 
  tail call void asm sideeffect "", "~{memory},~{dirflag},~{fpsr},~{flags}"() 
  %28 = fptosi double %13 to i32
  tail call void asm sideeffect "", "~{memory},~{dirflag},~{fpsr},~{flags}"() 
  %29 = tail call i32 @__remill_fpu_exception_test_and_clear(i32 61, i32 %27) 
  %30 = lshr i32 %29, 5
  %31 = and i32 %30, 1
  %32 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 9
  %33 = load i8, i8* %32, align 1
  %34 = zext i8 %33 to i32
  %35 = or i32 %34, %31
  %36 = trunc i32 %35 to i8
  store i8 %36, i8* %32, align 1
  %37 = lshr i32 %29, 3
  %38 = and i32 %37, 1
  %39 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 13
  %40 = load i8, i8* %39, align 1
  %41 = zext i8 %40 to i32
  %42 = or i32 %41, %38
  %43 = trunc i32 %42 to i8
  store i8 %43, i8* %39, align 1
  %44 = lshr i32 %29, 4
  %45 = and i32 %44, 1
  %46 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 11
  %47 = load i8, i8* %46, align 1
  %48 = zext i8 %47 to i32
  %49 = or i32 %48, %45
  %50 = trunc i32 %49 to i8
  store i8 %50, i8* %46, align 1
  %51 = and i32 %29, 1
  %52 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 19
  %53 = load i8, i8* %52, align 1
  %54 = zext i8 %53 to i32
  %55 = or i32 %54, %51
  %56 = trunc i32 %55 to i8
  store i8 %56, i8* %52, align 1
  %57 = lshr i32 %29, 2
  %58 = and i32 %57, 1
  %59 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 15
  %60 = load i8, i8* %59, align 1
  %61 = zext i8 %60 to i32
  %62 = or i32 %61, %58
  %63 = trunc i32 %62 to i8
  store i8 %63, i8* %59, align 1
  %64 = fcmp ogt double %23, 0x41DFFFFFFFC00000
  %65 = select i1 %64, i32 -2147483648, i32 %28
  %66 = sitofp i32 %65 to double
  %67 = or i32 %55, %35
  %68 = icmp eq i32 %67, 0
  br i1 %68, label %69, label %90

; <label>:69:                                     ; preds = %22
  %70 = icmp eq i32 %65, %28
  br i1 %70, label %71, label %78

; <label>:71:                                     ; preds = %69
  %72 = fcmp one double %3, 0.000000e+00
  %73 = tail call double @llvm.fabs.f64(double %3) 
  %74 = fcmp oeq double %73, 0x7FF0000000000000
  %75 = and i1 %72, %74
  %76 = fcmp uno double %3, 0.000000e+00
  %77 = or i1 %76, %75
  br i1 %77, label %78, label %79

; <label>:78:                                     ; preds = %71, %69
  store i8 1, i8* %52, align 1
  store i8 0, i8* %32, align 1
  br label %90

; <label>:79:                                     ; preds = %71
  %80 = fcmp une double %66, %13
  br i1 %80, label %81, label %87

; <label>:81:                                     ; preds = %79
  %82 = tail call double @llvm.fabs.f64(double %66) 
  %83 = fcmp olt double %82, %73
  %84 = zext i1 %83 to i8
  store i8 %84, i8* %52, align 1
  %85 = xor i1 %83, true
  %86 = zext i1 %85 to i8
  store i8 %86, i8* %32, align 1
  br label %90

; <label>:87:                                     ; preds = %79
  %88 = fcmp une double %13, %3
  %89 = zext i1 %88 to i8
  store i8 %89, i8* %32, align 1
  store i8 0, i8* %52, align 1
  br label %90

; <label>:90:                                     ; preds = %87, %81, %78, %22
  %91 = inttoptr i64 %2 to i32*
  store i32 %65, i32* %91
  %92 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 0, i32 1
  %93 = bitcast double* %92 to i64*
  %94 = load i64, i64* %93, align 8
  %95 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 1, i32 1
  %96 = bitcast double* %95 to i64*
  %97 = load i64, i64* %96, align 8
  store i64 %97, i64* %93, align 8
  %98 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 2, i32 1
  %99 = bitcast double* %98 to i64*
  %100 = load i64, i64* %99, align 8
  store i64 %100, i64* %96, align 8
  %101 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 3, i32 1
  %102 = bitcast double* %101 to i64*
  %103 = load i64, i64* %102, align 8
  store i64 %103, i64* %99, align 8
  %104 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 4, i32 1
  %105 = bitcast double* %104 to i64*
  %106 = load i64, i64* %105, align 8
  store i64 %106, i64* %102, align 8
  %107 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 5, i32 1
  %108 = bitcast double* %107 to i64*
  %109 = load i64, i64* %108, align 8
  store i64 %109, i64* %105, align 8
  %110 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 6, i32 1
  %111 = bitcast double* %110 to i64*
  %112 = load i64, i64* %111, align 8
  store i64 %112, i64* %108, align 8
  %113 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 7, i32 1
  %114 = bitcast double* %113 to i64*
  %115 = load i64, i64* %114, align 8
  store i64 %115, i64* %111, align 8
  store i64 %94, i64* %114, align 8
  %116 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 11, i32 0, i32 0, i32 1, i32 0
  %117 = load i16, i16* %116, align 2
  %118 = add i16 %117, 2048
  %119 = and i16 %118, 14336
  %120 = and i16 %117, -14337
  %121 = or i16 %119, %120
  store i16 %121, i16* %116, align 2
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L9FISTTPm64EP6MemoryR5State3MnWImE2RnIdE2InImES8_ItE(%struct.Memory*, %struct.State* nocapture dereferenceable(3376), i64, double, i64, i64)  {
  %7 = trunc i64 %5 to i16
  %8 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 11, i32 0, i32 0, i32 4
  store i16 %7, i16* %8, align 2
  %9 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 11, i32 0, i32 0, i32 5
  %10 = bitcast i32* %9 to i64*
  store i64 %4, i64* %10, align 8
  %11 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 11, i32 0, i32 0, i32 8
  %12 = bitcast i32* %11 to i64*
  store i64 %2, i64* %12, align 16
  %13 = tail call double @llvm.trunc.f64(double %3) 
  %14 = fcmp ueq double %13, 0.000000e+00
  br i1 %14, label %15, label %17

; <label>:15:                                     ; preds = %6
  %16 = tail call double @llvm.fabs.f64(double %13) 
  br label %22

; <label>:17:                                     ; preds = %6
  %18 = tail call double @llvm.fabs.f64(double %13) 
  %19 = fcmp oeq double %18, 0x7FF0000000000000
  br i1 %19, label %22, label %20

; <label>:20:                                     ; preds = %17
  %21 = fcmp olt double %18, 0x10000000000000
  br label %22

; <label>:22:                                     ; preds = %20, %17, %15
  %23 = phi double [ %16, %15 ], [ 0x7FF0000000000000, %17 ], [ %18, %20 ]
  %24 = phi i1 [ false, %15 ], [ false, %17 ], [ %21, %20 ]
  %25 = zext i1 %24 to i8
  %26 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 17
  store i8 %25, i8* %26, align 1
  %27 = tail call i32 @__remill_fpu_exception_test_and_clear(i32 0, i32 61) 
  tail call void asm sideeffect "", "~{memory},~{dirflag},~{fpsr},~{flags}"() 
  %28 = fptosi double %13 to i64
  tail call void asm sideeffect "", "~{memory},~{dirflag},~{fpsr},~{flags}"() 
  %29 = tail call i32 @__remill_fpu_exception_test_and_clear(i32 61, i32 %27) 
  %30 = lshr i32 %29, 5
  %31 = and i32 %30, 1
  %32 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 9
  %33 = load i8, i8* %32, align 1
  %34 = zext i8 %33 to i32
  %35 = or i32 %34, %31
  %36 = trunc i32 %35 to i8
  store i8 %36, i8* %32, align 1
  %37 = lshr i32 %29, 3
  %38 = and i32 %37, 1
  %39 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 13
  %40 = load i8, i8* %39, align 1
  %41 = zext i8 %40 to i32
  %42 = or i32 %41, %38
  %43 = trunc i32 %42 to i8
  store i8 %43, i8* %39, align 1
  %44 = lshr i32 %29, 4
  %45 = and i32 %44, 1
  %46 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 11
  %47 = load i8, i8* %46, align 1
  %48 = zext i8 %47 to i32
  %49 = or i32 %48, %45
  %50 = trunc i32 %49 to i8
  store i8 %50, i8* %46, align 1
  %51 = and i32 %29, 1
  %52 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 19
  %53 = load i8, i8* %52, align 1
  %54 = zext i8 %53 to i32
  %55 = or i32 %54, %51
  %56 = trunc i32 %55 to i8
  store i8 %56, i8* %52, align 1
  %57 = lshr i32 %29, 2
  %58 = and i32 %57, 1
  %59 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 15
  %60 = load i8, i8* %59, align 1
  %61 = zext i8 %60 to i32
  %62 = or i32 %61, %58
  %63 = trunc i32 %62 to i8
  store i8 %63, i8* %59, align 1
  %64 = fcmp ogt double %23, 0x43E0000000000000
  %65 = select i1 %64, i64 -9223372036854775808, i64 %28
  %66 = sitofp i64 %65 to double
  %67 = or i32 %55, %35
  %68 = icmp eq i32 %67, 0
  br i1 %68, label %69, label %90

; <label>:69:                                     ; preds = %22
  %70 = icmp eq i64 %65, %28
  br i1 %70, label %71, label %78

; <label>:71:                                     ; preds = %69
  %72 = fcmp one double %3, 0.000000e+00
  %73 = tail call double @llvm.fabs.f64(double %3) 
  %74 = fcmp oeq double %73, 0x7FF0000000000000
  %75 = and i1 %72, %74
  %76 = fcmp uno double %3, 0.000000e+00
  %77 = or i1 %76, %75
  br i1 %77, label %78, label %79

; <label>:78:                                     ; preds = %71, %69
  store i8 1, i8* %52, align 1
  store i8 0, i8* %32, align 1
  br label %90

; <label>:79:                                     ; preds = %71
  %80 = fcmp une double %66, %13
  br i1 %80, label %81, label %87

; <label>:81:                                     ; preds = %79
  %82 = tail call double @llvm.fabs.f64(double %66) 
  %83 = fcmp olt double %82, %73
  %84 = zext i1 %83 to i8
  store i8 %84, i8* %52, align 1
  %85 = xor i1 %83, true
  %86 = zext i1 %85 to i8
  store i8 %86, i8* %32, align 1
  br label %90

; <label>:87:                                     ; preds = %79
  %88 = fcmp une double %13, %3
  %89 = zext i1 %88 to i8
  store i8 %89, i8* %32, align 1
  store i8 0, i8* %52, align 1
  br label %90

; <label>:90:                                     ; preds = %87, %81, %78, %22
  %91 = inttoptr i64 %2 to i64*
  store i64 %65, i64* %91
  %92 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 0, i32 1
  %93 = bitcast double* %92 to i64*
  %94 = load i64, i64* %93, align 8
  %95 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 1, i32 1
  %96 = bitcast double* %95 to i64*
  %97 = load i64, i64* %96, align 8
  store i64 %97, i64* %93, align 8
  %98 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 2, i32 1
  %99 = bitcast double* %98 to i64*
  %100 = load i64, i64* %99, align 8
  store i64 %100, i64* %96, align 8
  %101 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 3, i32 1
  %102 = bitcast double* %101 to i64*
  %103 = load i64, i64* %102, align 8
  store i64 %103, i64* %99, align 8
  %104 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 4, i32 1
  %105 = bitcast double* %104 to i64*
  %106 = load i64, i64* %105, align 8
  store i64 %106, i64* %102, align 8
  %107 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 5, i32 1
  %108 = bitcast double* %107 to i64*
  %109 = load i64, i64* %108, align 8
  store i64 %109, i64* %105, align 8
  %110 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 6, i32 1
  %111 = bitcast double* %110 to i64*
  %112 = load i64, i64* %111, align 8
  store i64 %112, i64* %108, align 8
  %113 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 7, i32 1
  %114 = bitcast double* %113 to i64*
  %115 = load i64, i64* %114, align 8
  store i64 %115, i64* %111, align 8
  store i64 %94, i64* %114, align 8
  %116 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 11, i32 0, i32 0, i32 1, i32 0
  %117 = load i16, i16* %116, align 2
  %118 = add i16 %117, 2048
  %119 = and i16 %118, 14336
  %120 = and i16 %117, -14337
  %121 = or i16 %119, %120
  store i16 %121, i16* %116, align 2
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline norecurse nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L4FXCHEP6MemoryR5State3RnWIdE2RnIdES5_S7_2InImES8_ItE(%struct.Memory* readnone returned, %struct.State* nocapture dereferenceable(3376), double* nocapture, double, double* nocapture, double, i64, i64)  {
  %9 = trunc i64 %7 to i16
  %10 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 11, i32 0, i32 0, i32 4
  store i16 %9, i16* %10, align 2
  %11 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 11, i32 0, i32 0, i32 5
  %12 = bitcast i32* %11 to i64*
  store i64 %6, i64* %12, align 8
  store double %5, double* %2, align 8
  store double %3, double* %4, align 8
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L6DoFXAMEP6MemoryR5State2InImES4_ItE(%struct.Memory* readnone returned, %struct.State* nocapture dereferenceable(3376), i64, i64)  {
  %5 = trunc i64 %3 to i16
  %6 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 11, i32 0, i32 0, i32 4
  store i16 %5, i16* %6, align 2
  %7 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 11, i32 0, i32 0, i32 5
  %8 = bitcast i32* %7 to i64*
  store i64 %2, i64* %8, align 8
  %9 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 0, i32 1
  %10 = load double, double* %9, align 8
  %11 = bitcast double %10 to i64
  %12 = lshr i64 %11, 63
  %13 = trunc i64 %12 to i8
  %14 = fcmp oeq double %10, 0.000000e+00
  br i1 %14, label %23, label %18

; <label>:15:                                     ; preds = %20
  %16 = fcmp olt double %21, 0x10000000000000
  %17 = zext i1 %16 to i8
  br label %23

; <label>:18:                                     ; preds = %4
  %19 = fcmp uno double %10, 0.000000e+00
  br i1 %19, label %23, label %20

; <label>:20:                                     ; preds = %18
  %21 = tail call double @llvm.fabs.f64(double %10) 
  %22 = fcmp oeq double %21, 0x7FF0000000000000
  br i1 %22, label %23, label %15

; <label>:23:                                     ; preds = %20, %18, %15, %4
  %24 = phi i8 [ 1, %20 ], [ 0, %15 ], [ 1, %18 ], [ 0, %4 ]
  %25 = phi i8 [ 0, %20 ], [ %13, %15 ], [ 0, %18 ], [ 0, %4 ]
  %26 = phi i8 [ 1, %20 ], [ 1, %15 ], [ 0, %18 ], [ 0, %4 ]
  %27 = phi i8 [ 0, %20 ], [ %17, %15 ], [ 0, %18 ], [ 1, %4 ]
  %28 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 1
  store i8 %24, i8* %28, align 1
  %29 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 3
  store i8 %25, i8* %29, align 1
  %30 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 5
  store i8 %26, i8* %30, align 1
  %31 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 7
  store i8 %27, i8* %31, align 1
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L6DoFTSTEP6MemoryR5State2InImES4_ItE(%struct.Memory*, %struct.State* nocapture dereferenceable(3376), i64, i64)  {
  %5 = trunc i64 %3 to i16
  %6 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 11, i32 0, i32 0, i32 4
  store i16 %5, i16* %6, align 2
  %7 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 11, i32 0, i32 0, i32 5
  %8 = bitcast i32* %7 to i64*
  store i64 %2, i64* %8, align 8
  %9 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 0, i32 1
  %10 = load double, double* %9, align 8
  %11 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 3
  store i8 0, i8* %11, align 1
  %12 = fcmp ueq double %10, 0.000000e+00
  br i1 %12, label %18, label %13

; <label>:13:                                     ; preds = %4
  %14 = tail call double @llvm.fabs.f64(double %10) 
  %15 = fcmp oeq double %14, 0x7FF0000000000000
  br i1 %15, label %18, label %16

; <label>:16:                                     ; preds = %13
  %17 = fcmp olt double %14, 0x10000000000000
  br label %18

; <label>:18:                                     ; preds = %16, %13, %4
  %19 = phi i1 [ false, %4 ], [ false, %13 ], [ %17, %16 ]
  %20 = zext i1 %19 to i8
  %21 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 17
  store i8 %20, i8* %21, align 1
  %22 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 19
  store i8 0, i8* %22, align 1
  %23 = fcmp uno double %10, 0.000000e+00
  br i1 %23, label %24, label %28

; <label>:24:                                     ; preds = %18
  %25 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 1
  store i8 1, i8* %25, align 1
  %26 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 5
  store i8 1, i8* %26, align 1
  %27 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 7
  store i8 1, i8* %27, align 1
  store i8 1, i8* %22, align 1
  br label %39

; <label>:28:                                     ; preds = %18
  %29 = fcmp olt double %10, 0.000000e+00
  %30 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 1
  br i1 %29, label %31, label %34

; <label>:31:                                     ; preds = %28
  store i8 1, i8* %30, align 1
  %32 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 5
  store i8 0, i8* %32, align 1
  %33 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 7
  store i8 0, i8* %33, align 1
  br label %39

; <label>:34:                                     ; preds = %28
  store i8 0, i8* %30, align 1
  %35 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 5
  store i8 0, i8* %35, align 1
  %36 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 7
  %37 = fcmp ule double %10, 0.000000e+00
  %38 = zext i1 %37 to i8
  store i8 %38, i8* %36, align 1
  br label %39

; <label>:39:                                     ; preds = %34, %31, %24
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L5FUCOMI2RnIdEEEP6MemoryS4_R5StateS2_T_2InImES8_ItE(%struct.Memory*, %struct.State* nocapture dereferenceable(3376), double, double, i64, i64)  {
  %7 = trunc i64 %5 to i16
  %8 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 11, i32 0, i32 0, i32 4
  store i16 %7, i16* %8, align 2
  %9 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 11, i32 0, i32 0, i32 5
  %10 = bitcast i32* %9 to i64*
  store i64 %4, i64* %10, align 8
  %11 = fcmp ueq double %2, 0.000000e+00
  br i1 %11, label %17, label %12

; <label>:12:                                     ; preds = %6
  %13 = tail call double @llvm.fabs.f64(double %2) 
  %14 = fcmp oeq double %13, 0x7FF0000000000000
  br i1 %14, label %17, label %15

; <label>:15:                                     ; preds = %12
  %16 = fcmp olt double %13, 0x10000000000000
  br label %17

; <label>:17:                                     ; preds = %15, %12, %6
  %18 = phi i1 [ false, %6 ], [ false, %12 ], [ %16, %15 ]
  %19 = fcmp ueq double %3, 0.000000e+00
  br i1 %19, label %25, label %20

; <label>:20:                                     ; preds = %17
  %21 = tail call double @llvm.fabs.f64(double %3) 
  %22 = fcmp oeq double %21, 0x7FF0000000000000
  br i1 %22, label %25, label %23

; <label>:23:                                     ; preds = %20
  %24 = fcmp olt double %21, 0x10000000000000
  br label %25

; <label>:25:                                     ; preds = %23, %20, %17
  %26 = phi i1 [ false, %17 ], [ false, %20 ], [ %24, %23 ]
  %27 = or i1 %18, %26
  %28 = zext i1 %27 to i8
  %29 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 17
  store i8 %28, i8* %29, align 1
  %30 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 19
  store i8 0, i8* %30, align 1
  %31 = fcmp uno double %2, %3
  br i1 %31, label %32, label %43

; <label>:32:                                     ; preds = %25
  %33 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 1
  store i8 1, i8* %33, align 1
  %34 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 5
  store i8 1, i8* %34, align 1
  %35 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 7
  store i8 1, i8* %35, align 1
  %36 = bitcast double %2 to i64
  %37 = and i64 %36, 9221120237041090560
  %38 = icmp eq i64 %37, 9218868437227405312
  %39 = and i64 %36, 2251799813685247
  %40 = icmp ne i64 %39, 0
  %41 = and i1 %38, %40
  %42 = zext i1 %41 to i8
  store i8 %42, i8* %30, align 1
  br label %54

; <label>:43:                                     ; preds = %25
  %44 = fcmp olt double %2, %3
  %45 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 1
  br i1 %44, label %46, label %49

; <label>:46:                                     ; preds = %43
  store i8 1, i8* %45, align 1
  %47 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 5
  store i8 0, i8* %47, align 1
  %48 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 7
  store i8 0, i8* %48, align 1
  br label %54

; <label>:49:                                     ; preds = %43
  store i8 0, i8* %45, align 1
  %50 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 5
  store i8 0, i8* %50, align 1
  %51 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 7
  %52 = fcmp ule double %2, %3
  %53 = zext i1 %52 to i8
  store i8 %53, i8* %51, align 1
  br label %54

; <label>:54:                                     ; preds = %49, %46, %32
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L6FUCOMPI2RnIdEEEP6MemoryS4_R5StateS2_T_2InImES8_ItE(%struct.Memory* readnone returned, %struct.State* dereferenceable(3376), double, double, i64, i64)  {
  %7 = trunc i64 %5 to i16
  %8 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 11, i32 0, i32 0, i32 4
  store i16 %7, i16* %8, align 2
  %9 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 11, i32 0, i32 0, i32 5
  %10 = bitcast i32* %9 to i64*
  store i64 %4, i64* %10, align 8
  %11 = fcmp ueq double %2, 0.000000e+00
  br i1 %11, label %17, label %12

; <label>:12:                                     ; preds = %6
  %13 = tail call double @llvm.fabs.f64(double %2) 
  %14 = fcmp oeq double %13, 0x7FF0000000000000
  br i1 %14, label %17, label %15

; <label>:15:                                     ; preds = %12
  %16 = fcmp olt double %13, 0x10000000000000
  br label %17

; <label>:17:                                     ; preds = %15, %12, %6
  %18 = phi i1 [ false, %6 ], [ false, %12 ], [ %16, %15 ]
  %19 = fcmp ueq double %3, 0.000000e+00
  br i1 %19, label %25, label %20

; <label>:20:                                     ; preds = %17
  %21 = tail call double @llvm.fabs.f64(double %3) 
  %22 = fcmp oeq double %21, 0x7FF0000000000000
  br i1 %22, label %25, label %23

; <label>:23:                                     ; preds = %20
  %24 = fcmp olt double %21, 0x10000000000000
  br label %25

; <label>:25:                                     ; preds = %23, %20, %17
  %26 = phi i1 [ false, %17 ], [ false, %20 ], [ %24, %23 ]
  %27 = or i1 %18, %26
  %28 = zext i1 %27 to i8
  %29 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 17
  store i8 %28, i8* %29, align 1
  %30 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 19
  store i8 0, i8* %30, align 1
  %31 = fcmp uno double %2, %3
  br i1 %31, label %32, label %43

; <label>:32:                                     ; preds = %25
  %33 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 1
  store i8 1, i8* %33, align 1
  %34 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 5
  store i8 1, i8* %34, align 1
  %35 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 7
  store i8 1, i8* %35, align 1
  %36 = bitcast double %2 to i64
  %37 = and i64 %36, 9221120237041090560
  %38 = icmp eq i64 %37, 9218868437227405312
  %39 = and i64 %36, 2251799813685247
  %40 = icmp ne i64 %39, 0
  %41 = and i1 %38, %40
  %42 = zext i1 %41 to i8
  store i8 %42, i8* %30, align 1
  br label %54

; <label>:43:                                     ; preds = %25
  %44 = fcmp olt double %2, %3
  %45 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 1
  br i1 %44, label %46, label %49

; <label>:46:                                     ; preds = %43
  store i8 1, i8* %45, align 1
  %47 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 5
  store i8 0, i8* %47, align 1
  %48 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 7
  store i8 0, i8* %48, align 1
  br label %54

; <label>:49:                                     ; preds = %43
  store i8 0, i8* %45, align 1
  %50 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 5
  store i8 0, i8* %50, align 1
  %51 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 7
  %52 = fcmp ule double %2, %3
  %53 = zext i1 %52 to i8
  store i8 %53, i8* %51, align 1
  br label %54

; <label>:54:                                     ; preds = %49, %46, %32
  %55 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 0, i32 1
  %56 = bitcast double* %55 to i64*
  %57 = load i64, i64* %56, align 8
  %58 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 1, i32 1
  %59 = bitcast double* %58 to i64*
  %60 = load i64, i64* %59, align 8
  store i64 %60, i64* %56, align 8
  %61 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 2, i32 1
  %62 = bitcast double* %61 to i64*
  %63 = load i64, i64* %62, align 8
  store i64 %63, i64* %59, align 8
  %64 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 3, i32 1
  %65 = bitcast double* %64 to i64*
  %66 = load i64, i64* %65, align 8
  store i64 %66, i64* %62, align 8
  %67 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 4, i32 1
  %68 = bitcast double* %67 to i64*
  %69 = load i64, i64* %68, align 8
  store i64 %69, i64* %65, align 8
  %70 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 5, i32 1
  %71 = bitcast double* %70 to i64*
  %72 = load i64, i64* %71, align 8
  store i64 %72, i64* %68, align 8
  %73 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 6, i32 1
  %74 = bitcast double* %73 to i64*
  %75 = load i64, i64* %74, align 8
  store i64 %75, i64* %71, align 8
  %76 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 7, i32 1
  %77 = bitcast double* %76 to i64*
  %78 = load i64, i64* %77, align 8
  store i64 %78, i64* %74, align 8
  store i64 %57, i64* %77, align 8
  %79 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 11, i32 0, i32 0, i32 1, i32 0
  %80 = load i16, i16* %79, align 2
  %81 = add i16 %80, 2048
  %82 = and i16 %81, 14336
  %83 = and i16 %80, -14337
  %84 = or i16 %82, %83
  store i16 %84, i16* %79, align 2
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L9DoFUCOMPPEP6MemoryR5State2InImES4_ItE(%struct.Memory* readnone returned, %struct.State* dereferenceable(3376), i64, i64)  {
  %5 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 0, i32 1
  %6 = load double, double* %5, align 8
  %7 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 1, i32 1
  %8 = load double, double* %7, align 8
  %9 = trunc i64 %3 to i16
  %10 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 11, i32 0, i32 0, i32 4
  store i16 %9, i16* %10, align 2
  %11 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 11, i32 0, i32 0, i32 5
  %12 = bitcast i32* %11 to i64*
  store i64 %2, i64* %12, align 8
  %13 = fcmp ueq double %6, 0.000000e+00
  %14 = bitcast double %6 to i64
  br i1 %13, label %20, label %15

; <label>:15:                                     ; preds = %4
  %16 = tail call double @llvm.fabs.f64(double %6) 
  %17 = fcmp oeq double %16, 0x7FF0000000000000
  br i1 %17, label %20, label %18

; <label>:18:                                     ; preds = %15
  %19 = fcmp olt double %16, 0x10000000000000
  br label %20

; <label>:20:                                     ; preds = %18, %15, %4
  %21 = phi i1 [ false, %4 ], [ false, %15 ], [ %19, %18 ]
  %22 = fcmp ueq double %8, 0.000000e+00
  br i1 %22, label %28, label %23

; <label>:23:                                     ; preds = %20
  %24 = tail call double @llvm.fabs.f64(double %8) 
  %25 = fcmp oeq double %24, 0x7FF0000000000000
  br i1 %25, label %28, label %26

; <label>:26:                                     ; preds = %23
  %27 = fcmp olt double %24, 0x10000000000000
  br label %28

; <label>:28:                                     ; preds = %26, %23, %20
  %29 = phi i1 [ false, %20 ], [ false, %23 ], [ %27, %26 ]
  %30 = or i1 %21, %29
  %31 = zext i1 %30 to i8
  %32 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 17
  store i8 %31, i8* %32, align 1
  %33 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 19
  store i8 0, i8* %33, align 1
  %34 = fcmp uno double %6, %8
  br i1 %34, label %35, label %45

; <label>:35:                                     ; preds = %28
  %36 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 1
  store i8 1, i8* %36, align 1
  %37 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 5
  store i8 1, i8* %37, align 1
  %38 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 7
  store i8 1, i8* %38, align 1
  %39 = and i64 %14, 9221120237041090560
  %40 = icmp eq i64 %39, 9218868437227405312
  %41 = and i64 %14, 2251799813685247
  %42 = icmp ne i64 %41, 0
  %43 = and i1 %40, %42
  %44 = zext i1 %43 to i8
  store i8 %44, i8* %33, align 1
  br label %56

; <label>:45:                                     ; preds = %28
  %46 = fcmp olt double %6, %8
  %47 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 1
  br i1 %46, label %48, label %51

; <label>:48:                                     ; preds = %45
  store i8 1, i8* %47, align 1
  %49 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 5
  store i8 0, i8* %49, align 1
  %50 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 7
  store i8 0, i8* %50, align 1
  br label %56

; <label>:51:                                     ; preds = %45
  store i8 0, i8* %47, align 1
  %52 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 5
  store i8 0, i8* %52, align 1
  %53 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 7
  %54 = fcmp ule double %6, %8
  %55 = zext i1 %54 to i8
  store i8 %55, i8* %53, align 1
  br label %56

; <label>:56:                                     ; preds = %51, %48, %35
  %57 = bitcast double* %5 to i64*
  %58 = bitcast double* %7 to i64*
  %59 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 2, i32 1
  %60 = bitcast double* %59 to i64*
  %61 = load i64, i64* %60, align 8
  %62 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 3, i32 1
  %63 = bitcast double* %62 to i64*
  %64 = load i64, i64* %63, align 8
  %65 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 4, i32 1
  %66 = bitcast double* %65 to i64*
  %67 = load i64, i64* %66, align 8
  %68 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 5, i32 1
  %69 = bitcast double* %68 to i64*
  %70 = load i64, i64* %69, align 8
  %71 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 6, i32 1
  %72 = bitcast double* %71 to i64*
  %73 = load i64, i64* %72, align 8
  %74 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 7, i32 1
  %75 = bitcast double* %74 to i64*
  %76 = load i64, i64* %75, align 8
  %77 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 11, i32 0, i32 0, i32 1, i32 0
  %78 = load i16, i16* %77, align 2
  %79 = add i16 %78, 2048
  %80 = and i16 %79, 14336
  %81 = and i16 %78, -14337
  %82 = or i16 %80, %81
  store i64 %61, i64* %57, align 8
  store i64 %64, i64* %58, align 8
  store i64 %67, i64* %60, align 8
  store i64 %70, i64* %63, align 8
  store i64 %73, i64* %66, align 8
  store i64 %76, i64* %69, align 8
  store double %6, double* %71, align 8
  store double %8, double* %74, align 8
  %83 = add i16 %82, 2048
  %84 = and i16 %83, 14336
  %85 = or i16 %84, %81
  store i16 %85, i16* %77, align 2
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L6FUCOMIEP6MemoryR5State2RnIdES5_2InImES6_ItE(%struct.Memory*, %struct.State* nocapture dereferenceable(3376), double, double, i64, i64)  {
  %7 = trunc i64 %5 to i16
  %8 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 11, i32 0, i32 0, i32 4
  store i16 %7, i16* %8, align 2
  %9 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 11, i32 0, i32 0, i32 5
  %10 = bitcast i32* %9 to i64*
  store i64 %4, i64* %10, align 8
  %11 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 3
  store i8 0, i8* %11, align 1
  %12 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 0, i8* %12, align 1
  %13 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 0, i8* %13, align 1
  %14 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 0, i8* %14, align 1
  %15 = fcmp ueq double %2, 0.000000e+00
  br i1 %15, label %21, label %16

; <label>:16:                                     ; preds = %6
  %17 = tail call double @llvm.fabs.f64(double %2) 
  %18 = fcmp oeq double %17, 0x7FF0000000000000
  br i1 %18, label %21, label %19

; <label>:19:                                     ; preds = %16
  %20 = fcmp olt double %17, 0x10000000000000
  br label %21

; <label>:21:                                     ; preds = %19, %16, %6
  %22 = phi i1 [ false, %6 ], [ false, %16 ], [ %20, %19 ]
  %23 = fcmp ueq double %3, 0.000000e+00
  br i1 %23, label %29, label %24

; <label>:24:                                     ; preds = %21
  %25 = tail call double @llvm.fabs.f64(double %3) 
  %26 = fcmp oeq double %25, 0x7FF0000000000000
  br i1 %26, label %29, label %27

; <label>:27:                                     ; preds = %24
  %28 = fcmp olt double %25, 0x10000000000000
  br label %29

; <label>:29:                                     ; preds = %27, %24, %21
  %30 = phi i1 [ false, %21 ], [ false, %24 ], [ %28, %27 ]
  %31 = or i1 %22, %30
  %32 = zext i1 %31 to i8
  %33 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 17
  store i8 %32, i8* %33, align 1
  %34 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 19
  store i8 0, i8* %34, align 1
  %35 = fcmp uno double %2, %3
  br i1 %35, label %36, label %47

; <label>:36:                                     ; preds = %29
  %37 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  store i8 1, i8* %37, align 1
  %38 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 1, i8* %38, align 1
  %39 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  store i8 1, i8* %39, align 1
  %40 = bitcast double %2 to i64
  %41 = and i64 %40, 9221120237041090560
  %42 = icmp eq i64 %41, 9218868437227405312
  %43 = and i64 %40, 2251799813685247
  %44 = icmp ne i64 %43, 0
  %45 = and i1 %42, %44
  %46 = zext i1 %45 to i8
  store i8 %46, i8* %34, align 1
  br label %58

; <label>:47:                                     ; preds = %29
  %48 = fcmp olt double %2, %3
  %49 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  br i1 %48, label %50, label %53

; <label>:50:                                     ; preds = %47
  store i8 1, i8* %49, align 1
  %51 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 0, i8* %51, align 1
  %52 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  store i8 0, i8* %52, align 1
  br label %58

; <label>:53:                                     ; preds = %47
  store i8 0, i8* %49, align 1
  %54 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 0, i8* %54, align 1
  %55 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  %56 = fcmp ule double %2, %3
  %57 = zext i1 %56 to i8
  store i8 %57, i8* %55, align 1
  br label %58

; <label>:58:                                     ; preds = %53, %50, %36
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L7FUCOMIPEP6MemoryR5State2RnIdES5_2InImES6_ItE(%struct.Memory* readnone returned, %struct.State* dereferenceable(3376), double, double, i64, i64)  {
  %7 = trunc i64 %5 to i16
  %8 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 11, i32 0, i32 0, i32 4
  store i16 %7, i16* %8, align 2
  %9 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 11, i32 0, i32 0, i32 5
  %10 = bitcast i32* %9 to i64*
  store i64 %4, i64* %10, align 8
  %11 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 3
  store i8 0, i8* %11, align 1
  %12 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 0, i8* %12, align 1
  %13 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 0, i8* %13, align 1
  %14 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 0, i8* %14, align 1
  %15 = fcmp ueq double %2, 0.000000e+00
  br i1 %15, label %21, label %16

; <label>:16:                                     ; preds = %6
  %17 = tail call double @llvm.fabs.f64(double %2) 
  %18 = fcmp oeq double %17, 0x7FF0000000000000
  br i1 %18, label %21, label %19

; <label>:19:                                     ; preds = %16
  %20 = fcmp olt double %17, 0x10000000000000
  br label %21

; <label>:21:                                     ; preds = %19, %16, %6
  %22 = phi i1 [ false, %6 ], [ false, %16 ], [ %20, %19 ]
  %23 = fcmp ueq double %3, 0.000000e+00
  br i1 %23, label %29, label %24

; <label>:24:                                     ; preds = %21
  %25 = tail call double @llvm.fabs.f64(double %3) 
  %26 = fcmp oeq double %25, 0x7FF0000000000000
  br i1 %26, label %29, label %27

; <label>:27:                                     ; preds = %24
  %28 = fcmp olt double %25, 0x10000000000000
  br label %29

; <label>:29:                                     ; preds = %27, %24, %21
  %30 = phi i1 [ false, %21 ], [ false, %24 ], [ %28, %27 ]
  %31 = or i1 %22, %30
  %32 = zext i1 %31 to i8
  %33 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 17
  store i8 %32, i8* %33, align 1
  %34 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 19
  store i8 0, i8* %34, align 1
  %35 = fcmp uno double %2, %3
  br i1 %35, label %36, label %47

; <label>:36:                                     ; preds = %29
  %37 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  store i8 1, i8* %37, align 1
  %38 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 1, i8* %38, align 1
  %39 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  store i8 1, i8* %39, align 1
  %40 = bitcast double %2 to i64
  %41 = and i64 %40, 9221120237041090560
  %42 = icmp eq i64 %41, 9218868437227405312
  %43 = and i64 %40, 2251799813685247
  %44 = icmp ne i64 %43, 0
  %45 = and i1 %42, %44
  %46 = zext i1 %45 to i8
  store i8 %46, i8* %34, align 1
  br label %58

; <label>:47:                                     ; preds = %29
  %48 = fcmp olt double %2, %3
  %49 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  br i1 %48, label %50, label %53

; <label>:50:                                     ; preds = %47
  store i8 1, i8* %49, align 1
  %51 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 0, i8* %51, align 1
  %52 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  store i8 0, i8* %52, align 1
  br label %58

; <label>:53:                                     ; preds = %47
  store i8 0, i8* %49, align 1
  %54 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 0, i8* %54, align 1
  %55 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  %56 = fcmp ule double %2, %3
  %57 = zext i1 %56 to i8
  store i8 %57, i8* %55, align 1
  br label %58

; <label>:58:                                     ; preds = %53, %50, %36
  %59 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 0, i32 1
  %60 = bitcast double* %59 to i64*
  %61 = load i64, i64* %60, align 8
  %62 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 1, i32 1
  %63 = bitcast double* %62 to i64*
  %64 = load i64, i64* %63, align 8
  store i64 %64, i64* %60, align 8
  %65 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 2, i32 1
  %66 = bitcast double* %65 to i64*
  %67 = load i64, i64* %66, align 8
  store i64 %67, i64* %63, align 8
  %68 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 3, i32 1
  %69 = bitcast double* %68 to i64*
  %70 = load i64, i64* %69, align 8
  store i64 %70, i64* %66, align 8
  %71 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 4, i32 1
  %72 = bitcast double* %71 to i64*
  %73 = load i64, i64* %72, align 8
  store i64 %73, i64* %69, align 8
  %74 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 5, i32 1
  %75 = bitcast double* %74 to i64*
  %76 = load i64, i64* %75, align 8
  store i64 %76, i64* %72, align 8
  %77 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 6, i32 1
  %78 = bitcast double* %77 to i64*
  %79 = load i64, i64* %78, align 8
  store i64 %79, i64* %75, align 8
  %80 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 7, i32 1
  %81 = bitcast double* %80 to i64*
  %82 = load i64, i64* %81, align 8
  store i64 %82, i64* %78, align 8
  store i64 %61, i64* %81, align 8
  %83 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 11, i32 0, i32 0, i32 1, i32 0
  %84 = load i16, i16* %83, align 2
  %85 = add i16 %84, 2048
  %86 = and i16 %85, 14336
  %87 = and i16 %84, -14337
  %88 = or i16 %86, %87
  store i16 %88, i16* %83, align 2
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L5FCOMIEP6MemoryR5State2RnIdES5_2InImES6_ItE(%struct.Memory*, %struct.State* nocapture dereferenceable(3376), double, double, i64, i64)  {
  %7 = trunc i64 %5 to i16
  %8 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 11, i32 0, i32 0, i32 4
  store i16 %7, i16* %8, align 2
  %9 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 11, i32 0, i32 0, i32 5
  %10 = bitcast i32* %9 to i64*
  store i64 %4, i64* %10, align 8
  %11 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 3
  store i8 0, i8* %11, align 1
  %12 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 0, i8* %12, align 1
  %13 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 0, i8* %13, align 1
  %14 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 0, i8* %14, align 1
  %15 = fcmp ueq double %2, 0.000000e+00
  br i1 %15, label %21, label %16

; <label>:16:                                     ; preds = %6
  %17 = tail call double @llvm.fabs.f64(double %2) 
  %18 = fcmp oeq double %17, 0x7FF0000000000000
  br i1 %18, label %21, label %19

; <label>:19:                                     ; preds = %16
  %20 = fcmp olt double %17, 0x10000000000000
  br label %21

; <label>:21:                                     ; preds = %19, %16, %6
  %22 = phi i1 [ false, %6 ], [ false, %16 ], [ %20, %19 ]
  %23 = fcmp ueq double %3, 0.000000e+00
  br i1 %23, label %29, label %24

; <label>:24:                                     ; preds = %21
  %25 = tail call double @llvm.fabs.f64(double %3) 
  %26 = fcmp oeq double %25, 0x7FF0000000000000
  br i1 %26, label %29, label %27

; <label>:27:                                     ; preds = %24
  %28 = fcmp olt double %25, 0x10000000000000
  br label %29

; <label>:29:                                     ; preds = %27, %24, %21
  %30 = phi i1 [ false, %21 ], [ false, %24 ], [ %28, %27 ]
  %31 = or i1 %22, %30
  %32 = zext i1 %31 to i8
  %33 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 17
  store i8 %32, i8* %33, align 1
  %34 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 19
  store i8 0, i8* %34, align 1
  %35 = fcmp uno double %2, %3
  br i1 %35, label %36, label %40

; <label>:36:                                     ; preds = %29
  %37 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  store i8 1, i8* %37, align 1
  %38 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 1, i8* %38, align 1
  %39 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  store i8 1, i8* %39, align 1
  store i8 1, i8* %34, align 1
  br label %51

; <label>:40:                                     ; preds = %29
  %41 = fcmp olt double %2, %3
  %42 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  br i1 %41, label %43, label %46

; <label>:43:                                     ; preds = %40
  store i8 1, i8* %42, align 1
  %44 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 0, i8* %44, align 1
  %45 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  store i8 0, i8* %45, align 1
  br label %51

; <label>:46:                                     ; preds = %40
  store i8 0, i8* %42, align 1
  %47 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 0, i8* %47, align 1
  %48 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  %49 = fcmp ule double %2, %3
  %50 = zext i1 %49 to i8
  store i8 %50, i8* %48, align 1
  br label %51

; <label>:51:                                     ; preds = %46, %43, %36
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L6FCOMIPEP6MemoryR5State2RnIdES5_2InImES6_ItE(%struct.Memory* readnone returned, %struct.State* dereferenceable(3376), double, double, i64, i64)  {
  %7 = trunc i64 %5 to i16
  %8 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 11, i32 0, i32 0, i32 4
  store i16 %7, i16* %8, align 2
  %9 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 11, i32 0, i32 0, i32 5
  %10 = bitcast i32* %9 to i64*
  store i64 %4, i64* %10, align 8
  %11 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 3
  store i8 0, i8* %11, align 1
  %12 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 0, i8* %12, align 1
  %13 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 0, i8* %13, align 1
  %14 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 0, i8* %14, align 1
  %15 = fcmp ueq double %2, 0.000000e+00
  br i1 %15, label %21, label %16

; <label>:16:                                     ; preds = %6
  %17 = tail call double @llvm.fabs.f64(double %2) 
  %18 = fcmp oeq double %17, 0x7FF0000000000000
  br i1 %18, label %21, label %19

; <label>:19:                                     ; preds = %16
  %20 = fcmp olt double %17, 0x10000000000000
  br label %21

; <label>:21:                                     ; preds = %19, %16, %6
  %22 = phi i1 [ false, %6 ], [ false, %16 ], [ %20, %19 ]
  %23 = fcmp ueq double %3, 0.000000e+00
  br i1 %23, label %29, label %24

; <label>:24:                                     ; preds = %21
  %25 = tail call double @llvm.fabs.f64(double %3) 
  %26 = fcmp oeq double %25, 0x7FF0000000000000
  br i1 %26, label %29, label %27

; <label>:27:                                     ; preds = %24
  %28 = fcmp olt double %25, 0x10000000000000
  br label %29

; <label>:29:                                     ; preds = %27, %24, %21
  %30 = phi i1 [ false, %21 ], [ false, %24 ], [ %28, %27 ]
  %31 = or i1 %22, %30
  %32 = zext i1 %31 to i8
  %33 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 17
  store i8 %32, i8* %33, align 1
  %34 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 19
  store i8 0, i8* %34, align 1
  %35 = fcmp uno double %2, %3
  br i1 %35, label %36, label %40

; <label>:36:                                     ; preds = %29
  %37 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  store i8 1, i8* %37, align 1
  %38 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 1, i8* %38, align 1
  %39 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  store i8 1, i8* %39, align 1
  store i8 1, i8* %34, align 1
  br label %51

; <label>:40:                                     ; preds = %29
  %41 = fcmp olt double %2, %3
  %42 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  br i1 %41, label %43, label %46

; <label>:43:                                     ; preds = %40
  store i8 1, i8* %42, align 1
  %44 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 0, i8* %44, align 1
  %45 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  store i8 0, i8* %45, align 1
  br label %51

; <label>:46:                                     ; preds = %40
  store i8 0, i8* %42, align 1
  %47 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 0, i8* %47, align 1
  %48 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  %49 = fcmp ule double %2, %3
  %50 = zext i1 %49 to i8
  store i8 %50, i8* %48, align 1
  br label %51

; <label>:51:                                     ; preds = %46, %43, %36
  %52 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 0, i32 1
  %53 = bitcast double* %52 to i64*
  %54 = load i64, i64* %53, align 8
  %55 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 1, i32 1
  %56 = bitcast double* %55 to i64*
  %57 = load i64, i64* %56, align 8
  store i64 %57, i64* %53, align 8
  %58 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 2, i32 1
  %59 = bitcast double* %58 to i64*
  %60 = load i64, i64* %59, align 8
  store i64 %60, i64* %56, align 8
  %61 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 3, i32 1
  %62 = bitcast double* %61 to i64*
  %63 = load i64, i64* %62, align 8
  store i64 %63, i64* %59, align 8
  %64 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 4, i32 1
  %65 = bitcast double* %64 to i64*
  %66 = load i64, i64* %65, align 8
  store i64 %66, i64* %62, align 8
  %67 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 5, i32 1
  %68 = bitcast double* %67 to i64*
  %69 = load i64, i64* %68, align 8
  store i64 %69, i64* %65, align 8
  %70 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 6, i32 1
  %71 = bitcast double* %70 to i64*
  %72 = load i64, i64* %71, align 8
  store i64 %72, i64* %68, align 8
  %73 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 7, i32 1
  %74 = bitcast double* %73 to i64*
  %75 = load i64, i64* %74, align 8
  store i64 %75, i64* %71, align 8
  store i64 %54, i64* %74, align 8
  %76 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 11, i32 0, i32 0, i32 1, i32 0
  %77 = load i16, i16* %76, align 2
  %78 = add i16 %77, 2048
  %79 = and i16 %78, 14336
  %80 = and i16 %77, -14337
  %81 = or i16 %79, %80
  store i16 %81, i16* %76, align 2
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L4FCOMI2RnIdEEEP6MemoryS4_R5StateS2_T_2InImES8_ItE(%struct.Memory*, %struct.State* nocapture dereferenceable(3376), double, double, i64, i64)  {
  %7 = trunc i64 %5 to i16
  %8 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 11, i32 0, i32 0, i32 4
  store i16 %7, i16* %8, align 2
  %9 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 11, i32 0, i32 0, i32 5
  %10 = bitcast i32* %9 to i64*
  store i64 %4, i64* %10, align 8
  %11 = fcmp ueq double %2, 0.000000e+00
  br i1 %11, label %17, label %12

; <label>:12:                                     ; preds = %6
  %13 = tail call double @llvm.fabs.f64(double %2) 
  %14 = fcmp oeq double %13, 0x7FF0000000000000
  br i1 %14, label %17, label %15

; <label>:15:                                     ; preds = %12
  %16 = fcmp olt double %13, 0x10000000000000
  br label %17

; <label>:17:                                     ; preds = %15, %12, %6
  %18 = phi i1 [ false, %6 ], [ false, %12 ], [ %16, %15 ]
  %19 = fcmp ueq double %3, 0.000000e+00
  br i1 %19, label %25, label %20

; <label>:20:                                     ; preds = %17
  %21 = tail call double @llvm.fabs.f64(double %3) 
  %22 = fcmp oeq double %21, 0x7FF0000000000000
  br i1 %22, label %25, label %23

; <label>:23:                                     ; preds = %20
  %24 = fcmp olt double %21, 0x10000000000000
  br label %25

; <label>:25:                                     ; preds = %23, %20, %17
  %26 = phi i1 [ false, %17 ], [ false, %20 ], [ %24, %23 ]
  %27 = or i1 %18, %26
  %28 = zext i1 %27 to i8
  %29 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 17
  store i8 %28, i8* %29, align 1
  %30 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 19
  store i8 0, i8* %30, align 1
  %31 = fcmp uno double %2, %3
  br i1 %31, label %32, label %36

; <label>:32:                                     ; preds = %25
  %33 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 1
  store i8 1, i8* %33, align 1
  %34 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 5
  store i8 1, i8* %34, align 1
  %35 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 7
  store i8 1, i8* %35, align 1
  store i8 1, i8* %30, align 1
  br label %47

; <label>:36:                                     ; preds = %25
  %37 = fcmp olt double %2, %3
  %38 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 1
  br i1 %37, label %39, label %42

; <label>:39:                                     ; preds = %36
  store i8 1, i8* %38, align 1
  %40 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 5
  store i8 0, i8* %40, align 1
  %41 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 7
  store i8 0, i8* %41, align 1
  br label %47

; <label>:42:                                     ; preds = %36
  store i8 0, i8* %38, align 1
  %43 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 5
  store i8 0, i8* %43, align 1
  %44 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 7
  %45 = fcmp ule double %2, %3
  %46 = zext i1 %45 to i8
  store i8 %46, i8* %44, align 1
  br label %47

; <label>:47:                                     ; preds = %42, %39, %32
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L7FCOMmemI2MnIfEEEP6MemoryS4_R5State2RnIdET_2InImESA_ItE(%struct.Memory* returned, %struct.State* nocapture dereferenceable(3376), double, i64, i64, i64)  {
  %7 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 11, i32 0, i32 0, i32 8
  %8 = bitcast i32* %7 to i64*
  store i64 %3, i64* %8, align 16
  %9 = trunc i64 %5 to i16
  %10 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 11, i32 0, i32 0, i32 4
  store i16 %9, i16* %10, align 2
  %11 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 11, i32 0, i32 0, i32 5
  %12 = bitcast i32* %11 to i64*
  store i64 %4, i64* %12, align 8
  %13 = inttoptr i64 %3 to float*
  %14 = load float, float* %13
  %15 = fpext float %14 to double
  %16 = fcmp ueq double %2, 0.000000e+00
  br i1 %16, label %22, label %17

; <label>:17:                                     ; preds = %6
  %18 = tail call double @llvm.fabs.f64(double %2) 
  %19 = fcmp oeq double %18, 0x7FF0000000000000
  br i1 %19, label %22, label %20

; <label>:20:                                     ; preds = %17
  %21 = fcmp olt double %18, 0x10000000000000
  br label %22

; <label>:22:                                     ; preds = %20, %17, %6
  %23 = phi i1 [ false, %6 ], [ false, %17 ], [ %21, %20 ]
  %24 = fcmp ueq float %14, 0.000000e+00
  br i1 %24, label %30, label %25

; <label>:25:                                     ; preds = %22
  %26 = tail call double @llvm.fabs.f64(double %15) 
  %27 = fcmp oeq double %26, 0x7FF0000000000000
  br i1 %27, label %30, label %28

; <label>:28:                                     ; preds = %25
  %29 = fcmp olt double %26, 0x10000000000000
  br label %30

; <label>:30:                                     ; preds = %28, %25, %22
  %31 = phi i1 [ false, %22 ], [ false, %25 ], [ %29, %28 ]
  %32 = or i1 %23, %31
  %33 = zext i1 %32 to i8
  %34 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 17
  store i8 %33, i8* %34, align 1
  %35 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 19
  store i8 0, i8* %35, align 1
  %36 = fcmp uno double %15, %2
  br i1 %36, label %37, label %41

; <label>:37:                                     ; preds = %30
  %38 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 1
  store i8 1, i8* %38, align 1
  %39 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 5
  store i8 1, i8* %39, align 1
  %40 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 7
  store i8 1, i8* %40, align 1
  store i8 1, i8* %35, align 1
  br label %52

; <label>:41:                                     ; preds = %30
  %42 = fcmp ogt double %15, %2
  %43 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 1
  br i1 %42, label %44, label %47

; <label>:44:                                     ; preds = %41
  store i8 1, i8* %43, align 1
  %45 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 5
  store i8 0, i8* %45, align 1
  %46 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 7
  store i8 0, i8* %46, align 1
  br label %52

; <label>:47:                                     ; preds = %41
  store i8 0, i8* %43, align 1
  %48 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 5
  store i8 0, i8* %48, align 1
  %49 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 7
  %50 = fcmp uge double %15, %2
  %51 = zext i1 %50 to i8
  store i8 %51, i8* %49, align 1
  br label %52

; <label>:52:                                     ; preds = %47, %44, %37
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L7FCOMmemI2MnIdEEEP6MemoryS4_R5State2RnIdET_2InImESA_ItE(%struct.Memory* returned, %struct.State* nocapture dereferenceable(3376), double, i64, i64, i64)  {
  %7 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 11, i32 0, i32 0, i32 8
  %8 = bitcast i32* %7 to i64*
  store i64 %3, i64* %8, align 16
  %9 = trunc i64 %5 to i16
  %10 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 11, i32 0, i32 0, i32 4
  store i16 %9, i16* %10, align 2
  %11 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 11, i32 0, i32 0, i32 5
  %12 = bitcast i32* %11 to i64*
  store i64 %4, i64* %12, align 8
  %13 = inttoptr i64 %3 to double*
  %14 = load double, double* %13
  %15 = fcmp ueq double %2, 0.000000e+00
  br i1 %15, label %21, label %16

; <label>:16:                                     ; preds = %6
  %17 = tail call double @llvm.fabs.f64(double %2) 
  %18 = fcmp oeq double %17, 0x7FF0000000000000
  br i1 %18, label %21, label %19

; <label>:19:                                     ; preds = %16
  %20 = fcmp olt double %17, 0x10000000000000
  br label %21

; <label>:21:                                     ; preds = %19, %16, %6
  %22 = phi i1 [ false, %6 ], [ false, %16 ], [ %20, %19 ]
  %23 = fcmp ueq double %14, 0.000000e+00
  br i1 %23, label %29, label %24

; <label>:24:                                     ; preds = %21
  %25 = tail call double @llvm.fabs.f64(double %14) 
  %26 = fcmp oeq double %25, 0x7FF0000000000000
  br i1 %26, label %29, label %27

; <label>:27:                                     ; preds = %24
  %28 = fcmp olt double %25, 0x10000000000000
  br label %29

; <label>:29:                                     ; preds = %27, %24, %21
  %30 = phi i1 [ false, %21 ], [ false, %24 ], [ %28, %27 ]
  %31 = or i1 %22, %30
  %32 = zext i1 %31 to i8
  %33 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 17
  store i8 %32, i8* %33, align 1
  %34 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 19
  store i8 0, i8* %34, align 1
  %35 = fcmp uno double %14, %2
  br i1 %35, label %36, label %40

; <label>:36:                                     ; preds = %29
  %37 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 1
  store i8 1, i8* %37, align 1
  %38 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 5
  store i8 1, i8* %38, align 1
  %39 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 7
  store i8 1, i8* %39, align 1
  store i8 1, i8* %34, align 1
  br label %51

; <label>:40:                                     ; preds = %29
  %41 = fcmp ogt double %14, %2
  %42 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 1
  br i1 %41, label %43, label %46

; <label>:43:                                     ; preds = %40
  store i8 1, i8* %42, align 1
  %44 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 5
  store i8 0, i8* %44, align 1
  %45 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 7
  store i8 0, i8* %45, align 1
  br label %51

; <label>:46:                                     ; preds = %40
  store i8 0, i8* %42, align 1
  %47 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 5
  store i8 0, i8* %47, align 1
  %48 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 7
  %49 = fcmp uge double %14, %2
  %50 = zext i1 %49 to i8
  store i8 %50, i8* %48, align 1
  br label %51

; <label>:51:                                     ; preds = %46, %43, %36
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L5FCOMPI2RnIdEEEP6MemoryS4_R5StateS2_T_2InImES8_ItE(%struct.Memory* readnone returned, %struct.State* dereferenceable(3376), double, double, i64, i64)  {
  %7 = trunc i64 %5 to i16
  %8 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 11, i32 0, i32 0, i32 4
  store i16 %7, i16* %8, align 2
  %9 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 11, i32 0, i32 0, i32 5
  %10 = bitcast i32* %9 to i64*
  store i64 %4, i64* %10, align 8
  %11 = fcmp ueq double %2, 0.000000e+00
  br i1 %11, label %17, label %12

; <label>:12:                                     ; preds = %6
  %13 = tail call double @llvm.fabs.f64(double %2) 
  %14 = fcmp oeq double %13, 0x7FF0000000000000
  br i1 %14, label %17, label %15

; <label>:15:                                     ; preds = %12
  %16 = fcmp olt double %13, 0x10000000000000
  br label %17

; <label>:17:                                     ; preds = %15, %12, %6
  %18 = phi i1 [ false, %6 ], [ false, %12 ], [ %16, %15 ]
  %19 = fcmp ueq double %3, 0.000000e+00
  br i1 %19, label %25, label %20

; <label>:20:                                     ; preds = %17
  %21 = tail call double @llvm.fabs.f64(double %3) 
  %22 = fcmp oeq double %21, 0x7FF0000000000000
  br i1 %22, label %25, label %23

; <label>:23:                                     ; preds = %20
  %24 = fcmp olt double %21, 0x10000000000000
  br label %25

; <label>:25:                                     ; preds = %23, %20, %17
  %26 = phi i1 [ false, %17 ], [ false, %20 ], [ %24, %23 ]
  %27 = or i1 %18, %26
  %28 = zext i1 %27 to i8
  %29 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 17
  store i8 %28, i8* %29, align 1
  %30 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 19
  store i8 0, i8* %30, align 1
  %31 = fcmp uno double %2, %3
  br i1 %31, label %32, label %36

; <label>:32:                                     ; preds = %25
  %33 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 1
  store i8 1, i8* %33, align 1
  %34 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 5
  store i8 1, i8* %34, align 1
  %35 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 7
  store i8 1, i8* %35, align 1
  store i8 1, i8* %30, align 1
  br label %47

; <label>:36:                                     ; preds = %25
  %37 = fcmp olt double %2, %3
  %38 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 1
  br i1 %37, label %39, label %42

; <label>:39:                                     ; preds = %36
  store i8 1, i8* %38, align 1
  %40 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 5
  store i8 0, i8* %40, align 1
  %41 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 7
  store i8 0, i8* %41, align 1
  br label %47

; <label>:42:                                     ; preds = %36
  store i8 0, i8* %38, align 1
  %43 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 5
  store i8 0, i8* %43, align 1
  %44 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 7
  %45 = fcmp ule double %2, %3
  %46 = zext i1 %45 to i8
  store i8 %46, i8* %44, align 1
  br label %47

; <label>:47:                                     ; preds = %42, %39, %32
  %48 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 0, i32 1
  %49 = bitcast double* %48 to i64*
  %50 = load i64, i64* %49, align 8
  %51 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 1, i32 1
  %52 = bitcast double* %51 to i64*
  %53 = load i64, i64* %52, align 8
  store i64 %53, i64* %49, align 8
  %54 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 2, i32 1
  %55 = bitcast double* %54 to i64*
  %56 = load i64, i64* %55, align 8
  store i64 %56, i64* %52, align 8
  %57 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 3, i32 1
  %58 = bitcast double* %57 to i64*
  %59 = load i64, i64* %58, align 8
  store i64 %59, i64* %55, align 8
  %60 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 4, i32 1
  %61 = bitcast double* %60 to i64*
  %62 = load i64, i64* %61, align 8
  store i64 %62, i64* %58, align 8
  %63 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 5, i32 1
  %64 = bitcast double* %63 to i64*
  %65 = load i64, i64* %64, align 8
  store i64 %65, i64* %61, align 8
  %66 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 6, i32 1
  %67 = bitcast double* %66 to i64*
  %68 = load i64, i64* %67, align 8
  store i64 %68, i64* %64, align 8
  %69 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 7, i32 1
  %70 = bitcast double* %69 to i64*
  %71 = load i64, i64* %70, align 8
  store i64 %71, i64* %67, align 8
  store i64 %50, i64* %70, align 8
  %72 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 11, i32 0, i32 0, i32 1, i32 0
  %73 = load i16, i16* %72, align 2
  %74 = add i16 %73, 2048
  %75 = and i16 %74, 14336
  %76 = and i16 %73, -14337
  %77 = or i16 %75, %76
  store i16 %77, i16* %72, align 2
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal noalias %struct.Memory* @_ZN12_GLOBAL__N_1L8FCOMPmemI2MnIfEEEP6MemoryS4_R5State2RnIdET_2InImESA_ItE(%struct.Memory* nocapture readnone, %struct.State* nocapture dereferenceable(3376), double, i64, i64, i64)  {
  br label %7

; <label>:7:                                      ; preds = %7, %6
  br label %7
}

; Function Attrs: alwaysinline nounwind
define internal noalias %struct.Memory* @_ZN12_GLOBAL__N_1L8FCOMPmemI2MnIdEEEP6MemoryS4_R5State2RnIdET_2InImESA_ItE(%struct.Memory* nocapture readnone, %struct.State* nocapture dereferenceable(3376), double, i64, i64, i64)  {
  br label %7

; <label>:7:                                      ; preds = %7, %6
  br label %7
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L8DoFCOMPPEP6MemoryR5State2InImES4_ItE(%struct.Memory* readnone returned, %struct.State* dereferenceable(3376), i64, i64)  {
  %5 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 0, i32 1
  %6 = load double, double* %5, align 8
  %7 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 1, i32 1
  %8 = load double, double* %7, align 8
  %9 = trunc i64 %3 to i16
  %10 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 11, i32 0, i32 0, i32 4
  store i16 %9, i16* %10, align 2
  %11 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 11, i32 0, i32 0, i32 5
  %12 = bitcast i32* %11 to i64*
  store i64 %2, i64* %12, align 8
  %13 = fcmp ueq double %6, 0.000000e+00
  br i1 %13, label %19, label %14

; <label>:14:                                     ; preds = %4
  %15 = tail call double @llvm.fabs.f64(double %6) 
  %16 = fcmp oeq double %15, 0x7FF0000000000000
  br i1 %16, label %19, label %17

; <label>:17:                                     ; preds = %14
  %18 = fcmp olt double %15, 0x10000000000000
  br label %19

; <label>:19:                                     ; preds = %17, %14, %4
  %20 = phi i1 [ false, %4 ], [ false, %14 ], [ %18, %17 ]
  %21 = fcmp ueq double %8, 0.000000e+00
  br i1 %21, label %27, label %22

; <label>:22:                                     ; preds = %19
  %23 = tail call double @llvm.fabs.f64(double %8) 
  %24 = fcmp oeq double %23, 0x7FF0000000000000
  br i1 %24, label %27, label %25

; <label>:25:                                     ; preds = %22
  %26 = fcmp olt double %23, 0x10000000000000
  br label %27

; <label>:27:                                     ; preds = %25, %22, %19
  %28 = phi i1 [ false, %19 ], [ false, %22 ], [ %26, %25 ]
  %29 = or i1 %20, %28
  %30 = zext i1 %29 to i8
  %31 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 17
  store i8 %30, i8* %31, align 1
  %32 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 19
  store i8 0, i8* %32, align 1
  %33 = fcmp uno double %6, %8
  br i1 %33, label %34, label %38

; <label>:34:                                     ; preds = %27
  %35 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 1
  store i8 1, i8* %35, align 1
  %36 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 5
  store i8 1, i8* %36, align 1
  %37 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 7
  store i8 1, i8* %37, align 1
  store i8 1, i8* %32, align 1
  br label %49

; <label>:38:                                     ; preds = %27
  %39 = fcmp olt double %6, %8
  %40 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 1
  br i1 %39, label %41, label %44

; <label>:41:                                     ; preds = %38
  store i8 1, i8* %40, align 1
  %42 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 5
  store i8 0, i8* %42, align 1
  %43 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 7
  store i8 0, i8* %43, align 1
  br label %49

; <label>:44:                                     ; preds = %38
  store i8 0, i8* %40, align 1
  %45 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 5
  store i8 0, i8* %45, align 1
  %46 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 7
  %47 = fcmp ule double %6, %8
  %48 = zext i1 %47 to i8
  store i8 %48, i8* %46, align 1
  br label %49

; <label>:49:                                     ; preds = %44, %41, %34
  %50 = bitcast double* %5 to i64*
  %51 = bitcast double* %7 to i64*
  %52 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 2, i32 1
  %53 = bitcast double* %52 to i64*
  %54 = load i64, i64* %53, align 8
  %55 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 3, i32 1
  %56 = bitcast double* %55 to i64*
  %57 = load i64, i64* %56, align 8
  %58 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 4, i32 1
  %59 = bitcast double* %58 to i64*
  %60 = load i64, i64* %59, align 8
  %61 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 5, i32 1
  %62 = bitcast double* %61 to i64*
  %63 = load i64, i64* %62, align 8
  %64 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 6, i32 1
  %65 = bitcast double* %64 to i64*
  %66 = load i64, i64* %65, align 8
  %67 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 7, i32 1
  %68 = bitcast double* %67 to i64*
  %69 = load i64, i64* %68, align 8
  %70 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 11, i32 0, i32 0, i32 1, i32 0
  %71 = load i16, i16* %70, align 2
  %72 = add i16 %71, 2048
  %73 = and i16 %72, 14336
  %74 = and i16 %71, -14337
  %75 = or i16 %73, %74
  store i64 %54, i64* %50, align 8
  store i64 %57, i64* %51, align 8
  store i64 %60, i64* %53, align 8
  store i64 %63, i64* %56, align 8
  store i64 %66, i64* %59, align 8
  store i64 %69, i64* %62, align 8
  store double %6, double* %64, align 8
  store double %8, double* %67, align 8
  %76 = add i16 %75, 2048
  %77 = and i16 %76, 14336
  %78 = or i16 %77, %74
  store i16 %78, i16* %70, align 2
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L6FNSTSWI3MnWItEEEP6MemoryS4_R5StateT_(%struct.Memory* readnone, %struct.State* nocapture dereferenceable(3376), i64)  {
  %4 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 1
  %5 = load i8, i8* %4, align 1
  %6 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 11, i32 0, i32 0, i32 1, i32 0
  %7 = load i16, i16* %6, align 1
  %8 = and i8 %5, 1
  %9 = zext i8 %8 to i16
  %10 = shl nuw nsw i16 %9, 8
  %11 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 3
  %12 = load i8, i8* %11, align 1
  %13 = and i8 %12, 1
  %14 = zext i8 %13 to i16
  %15 = shl nuw nsw i16 %14, 9
  %16 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 5
  %17 = load i8, i8* %16, align 1
  %18 = and i8 %17, 1
  %19 = zext i8 %18 to i16
  %20 = shl nuw nsw i16 %19, 10
  %21 = and i16 %7, -18240
  %22 = or i16 %10, %21
  %23 = or i16 %15, %22
  %24 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 7
  %25 = load i8, i8* %24, align 1
  %26 = and i8 %25, 1
  %27 = zext i8 %26 to i16
  %28 = shl nuw nsw i16 %27, 14
  %29 = and i16 %20, 1024
  %30 = or i16 %23, %29
  %31 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 9
  %32 = load i8, i8* %31, align 1
  %33 = shl i8 %32, 5
  %34 = and i8 %33, 32
  %35 = zext i8 %34 to i16
  %36 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 11
  %37 = load i8, i8* %36, align 1
  %38 = shl i8 %37, 4
  %39 = and i8 %38, 16
  %40 = zext i8 %39 to i16
  %41 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 13
  %42 = load i8, i8* %41, align 1
  %43 = shl i8 %42, 3
  %44 = and i8 %43, 8
  %45 = zext i8 %44 to i16
  %46 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 15
  %47 = load i8, i8* %46, align 1
  %48 = shl i8 %47, 2
  %49 = and i8 %48, 4
  %50 = zext i8 %49 to i16
  %51 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 17
  %52 = load i8, i8* %51, align 1
  %53 = shl i8 %52, 1
  %54 = and i8 %53, 2
  %55 = zext i8 %54 to i16
  %56 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 19
  %57 = load i8, i8* %56, align 1
  %58 = and i8 %57, 1
  %59 = zext i8 %58 to i16
  %60 = or i16 %30, %28
  %61 = or i16 %60, %35
  %62 = or i16 %61, %40
  %63 = or i16 %62, %45
  %64 = or i16 %63, %50
  %65 = or i16 %64, %55
  %66 = or i16 %65, %59
  store i16 %66, i16* %6, align 1
  %67 = inttoptr i64 %2 to i16*
  store i16 %66, i16* %67
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline norecurse nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L6FNSTSWI3RnWItEEEP6MemoryS4_R5StateT_(%struct.Memory* readnone returned, %struct.State* nocapture dereferenceable(3376), i16* nocapture)  {
  %4 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 1
  %5 = load i8, i8* %4, align 1
  %6 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 11, i32 0, i32 0, i32 1, i32 0
  %7 = load i16, i16* %6, align 1
  %8 = and i8 %5, 1
  %9 = zext i8 %8 to i16
  %10 = shl nuw nsw i16 %9, 8
  %11 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 3
  %12 = load i8, i8* %11, align 1
  %13 = and i8 %12, 1
  %14 = zext i8 %13 to i16
  %15 = shl nuw nsw i16 %14, 9
  %16 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 5
  %17 = load i8, i8* %16, align 1
  %18 = and i8 %17, 1
  %19 = zext i8 %18 to i16
  %20 = shl nuw nsw i16 %19, 10
  %21 = and i16 %7, -18240
  %22 = or i16 %10, %21
  %23 = or i16 %15, %22
  %24 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 7
  %25 = load i8, i8* %24, align 1
  %26 = and i8 %25, 1
  %27 = zext i8 %26 to i16
  %28 = shl nuw nsw i16 %27, 14
  %29 = and i16 %20, 1024
  %30 = or i16 %23, %29
  %31 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 9
  %32 = load i8, i8* %31, align 1
  %33 = shl i8 %32, 5
  %34 = and i8 %33, 32
  %35 = zext i8 %34 to i16
  %36 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 11
  %37 = load i8, i8* %36, align 1
  %38 = shl i8 %37, 4
  %39 = and i8 %38, 16
  %40 = zext i8 %39 to i16
  %41 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 13
  %42 = load i8, i8* %41, align 1
  %43 = shl i8 %42, 3
  %44 = and i8 %43, 8
  %45 = zext i8 %44 to i16
  %46 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 15
  %47 = load i8, i8* %46, align 1
  %48 = shl i8 %47, 2
  %49 = and i8 %48, 4
  %50 = zext i8 %49 to i16
  %51 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 17
  %52 = load i8, i8* %51, align 1
  %53 = shl i8 %52, 1
  %54 = and i8 %53, 2
  %55 = zext i8 %54 to i16
  %56 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 19
  %57 = load i8, i8* %56, align 1
  %58 = and i8 %57, 1
  %59 = zext i8 %58 to i16
  %60 = or i16 %30, %28
  %61 = or i16 %60, %35
  %62 = or i16 %61, %40
  %63 = or i16 %62, %45
  %64 = or i16 %63, %50
  %65 = or i16 %64, %55
  %66 = or i16 %65, %59
  store i16 %66, i16* %6, align 1
  store i16 %66, i16* %2, align 2
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L6FNSTCWEP6MemoryR5State3MnWItE(%struct.Memory* readnone, %struct.State* nocapture dereferenceable(3376), i64)  {
  %4 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 11, i32 0, i32 0, i32 0, i32 0
  %5 = load i16, i16* %4, align 1
  %6 = and i16 %5, -769
  store i16 %6, i16* %4, align 1
  %7 = tail call i32 @fegetround() 
  %8 = lshr i32 %7, 10
  %9 = shl i32 %7, 22
  %10 = or i32 %8, %9
  switch i32 %10, label %11 [
    i32 3, label %19
    i32 1, label %13
    i32 2, label %16
  ]

; <label>:11:                                     ; preds = %3
  %12 = and i16 %5, -3841
  br label %22

; <label>:13:                                     ; preds = %3
  %14 = and i16 %5, -3841
  %15 = or i16 %14, 1024
  br label %22

; <label>:16:                                     ; preds = %3
  %17 = and i16 %5, -3841
  %18 = or i16 %17, 2048
  br label %22

; <label>:19:                                     ; preds = %3
  %20 = and i16 %5, -3841
  %21 = or i16 %20, 3072
  br label %22

; <label>:22:                                     ; preds = %19, %16, %13, %11
  %23 = phi i16 [ %12, %11 ], [ %15, %13 ], [ %18, %16 ], [ %21, %19 ]
  store i16 %23, i16* %4, align 1
  %24 = inttoptr i64 %2 to i16*
  store i16 %23, i16* %24
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L5FLDCWEP6MemoryR5State2MnItE(%struct.Memory*, %struct.State* nocapture dereferenceable(3376), i64)  {
  %4 = inttoptr i64 %2 to i16*
  %5 = load i16, i16* %4
  %6 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 11, i32 0, i32 0, i32 0, i32 0
  %7 = and i16 %5, -769
  store i16 %7, i16* %6, align 1
  %8 = lshr i16 %5, 10
  %9 = and i16 %8, 3
  %10 = xor i16 %9, 2
  %11 = zext i16 %10 to i64
  %12 = getelementptr inbounds [4 x i32], [4 x i32]* @switch.table, i64 0, i64 %11
  %13 = load i32, i32* %12, align 4
  %14 = tail call i32 @fesetround(i32 %13) 
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L9DoFRNDINTEP6MemoryR5State2InImES4_ItE(%struct.Memory* readnone returned, %struct.State* nocapture dereferenceable(3376), i64, i64)  {
  %5 = trunc i64 %3 to i16
  %6 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 11, i32 0, i32 0, i32 4
  store i16 %5, i16* %6, align 2
  %7 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 11, i32 0, i32 0, i32 5
  %8 = bitcast i32* %7 to i64*
  store i64 %2, i64* %8, align 8
  %9 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 0, i32 1
  %10 = load double, double* %9, align 8
  %11 = tail call double @llvm.nearbyint.f64(double %10) 
  %12 = bitcast double %10 to i64
  %13 = and i64 %12, 9221120237041090560
  %14 = icmp eq i64 %13, 9218868437227405312
  %15 = and i64 %12, 2251799813685247
  %16 = icmp ne i64 %15, 0
  %17 = and i1 %14, %16
  %18 = zext i1 %17 to i8
  %19 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 19
  %20 = load i8, i8* %19, align 1
  %21 = or i8 %18, %20
  store i8 %21, i8* %19, align 1
  %22 = fcmp ueq double %10, 0.000000e+00
  br i1 %22, label %28, label %23

; <label>:23:                                     ; preds = %4
  %24 = tail call double @llvm.fabs.f64(double %10) 
  %25 = fcmp oeq double %24, 0x7FF0000000000000
  br i1 %25, label %28, label %26

; <label>:26:                                     ; preds = %23
  %27 = fcmp olt double %24, 0x10000000000000
  br label %28

; <label>:28:                                     ; preds = %26, %23, %4
  %29 = phi i1 [ false, %4 ], [ false, %23 ], [ %27, %26 ]
  %30 = zext i1 %29 to i8
  %31 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 17
  store i8 %30, i8* %31, align 1
  %32 = fcmp uno double %11, 0.000000e+00
  br i1 %32, label %37, label %33

; <label>:33:                                     ; preds = %28
  %34 = fcmp une double %10, %11
  %35 = zext i1 %34 to i8
  %36 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 9
  store i8 %35, i8* %36, align 1
  br label %37

; <label>:37:                                     ; preds = %33, %28
  store double %11, double* %9, align 8
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L7DoFYL2XEP6MemoryR5State2InImES4_ItE(%struct.Memory* readnone returned, %struct.State* nocapture dereferenceable(3376), i64, i64)  {
  %5 = trunc i64 %3 to i16
  %6 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 11, i32 0, i32 0, i32 4
  store i16 %5, i16* %6, align 2
  %7 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 11, i32 0, i32 0, i32 5
  %8 = bitcast i32* %7 to i64*
  store i64 %2, i64* %8, align 8
  %9 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 0, i32 1
  %10 = load double, double* %9, align 8
  %11 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 1, i32 1
  %12 = load double, double* %11, align 8
  %13 = fcmp oeq double %10, 0.000000e+00
  %14 = zext i1 %13 to i8
  %15 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 15
  store i8 %14, i8* %15, align 1
  %16 = fcmp ueq double %10, 0.000000e+00
  %17 = bitcast double %10 to i64
  br i1 %16, label %23, label %18

; <label>:18:                                     ; preds = %4
  %19 = tail call double @llvm.fabs.f64(double %10) 
  %20 = fcmp oeq double %19, 0x7FF0000000000000
  br i1 %20, label %23, label %21

; <label>:21:                                     ; preds = %18
  %22 = fcmp olt double %19, 0x10000000000000
  br label %23

; <label>:23:                                     ; preds = %21, %18, %4
  %24 = phi i1 [ false, %4 ], [ false, %18 ], [ %22, %21 ]
  %25 = fcmp ueq double %12, 0.000000e+00
  br i1 %25, label %31, label %26

; <label>:26:                                     ; preds = %23
  %27 = tail call double @llvm.fabs.f64(double %12) 
  %28 = fcmp oeq double %27, 0x7FF0000000000000
  br i1 %28, label %31, label %29

; <label>:29:                                     ; preds = %26
  %30 = fcmp olt double %27, 0x10000000000000
  br label %31

; <label>:31:                                     ; preds = %29, %26, %23
  %32 = phi i1 [ false, %23 ], [ false, %26 ], [ %30, %29 ]
  %33 = or i1 %24, %32
  %34 = zext i1 %33 to i8
  %35 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 17
  store i8 %34, i8* %35, align 1
  %36 = and i64 %17, 9221120237041090560
  %37 = icmp eq i64 %36, 9218868437227405312
  %38 = and i64 %17, 2251799813685247
  %39 = icmp ne i64 %38, 0
  %40 = and i1 %37, %39
  %41 = bitcast double %12 to i64
  %42 = and i64 %41, 9221120237041090560
  %43 = icmp eq i64 %42, 9218868437227405312
  %44 = and i64 %41, 2251799813685247
  %45 = icmp ne i64 %44, 0
  %46 = and i1 %43, %45
  %47 = or i1 %40, %46
  br i1 %47, label %57, label %48

; <label>:48:                                     ; preds = %31
  %49 = icmp sgt i64 %17, -1
  br i1 %49, label %57, label %50

; <label>:50:                                     ; preds = %48
  %51 = xor i1 %16, true
  %52 = tail call double @llvm.fabs.f64(double %10) 
  %53 = fcmp oeq double %52, 0x7FF0000000000000
  %54 = and i1 %53, %51
  %55 = or i1 %54, %13
  %56 = xor i1 %55, true
  br label %57

; <label>:57:                                     ; preds = %50, %48, %31
  %58 = phi i1 [ true, %31 ], [ false, %48 ], [ %56, %50 ]
  %59 = zext i1 %58 to i8
  %60 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 19
  store i8 %59, i8* %60, align 1
  %61 = tail call double @log2(double %10) 
  %62 = fmul double %12, %61
  %63 = bitcast double %62 to i64
  %64 = and i64 %63, 255
  %65 = icmp ne i64 %64, 0
  %66 = zext i1 %65 to i8
  %67 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 9
  store i8 %66, i8* %67, align 1
  %68 = bitcast double* %11 to i64*
  store double %62, double* %9, align 8
  %69 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 2, i32 1
  %70 = bitcast double* %69 to i64*
  %71 = load i64, i64* %70, align 8
  store i64 %71, i64* %68, align 8
  %72 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 3, i32 1
  %73 = bitcast double* %72 to i64*
  %74 = load i64, i64* %73, align 8
  store i64 %74, i64* %70, align 8
  %75 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 4, i32 1
  %76 = bitcast double* %75 to i64*
  %77 = load i64, i64* %76, align 8
  store i64 %77, i64* %73, align 8
  %78 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 5, i32 1
  %79 = bitcast double* %78 to i64*
  %80 = load i64, i64* %79, align 8
  store i64 %80, i64* %76, align 8
  %81 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 6, i32 1
  %82 = bitcast double* %81 to i64*
  %83 = load i64, i64* %82, align 8
  store i64 %83, i64* %79, align 8
  %84 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 7, i32 1
  %85 = bitcast double* %84 to i64*
  %86 = load i64, i64* %85, align 8
  store i64 %86, i64* %82, align 8
  store double %10, double* %84, align 8
  %87 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 11, i32 0, i32 0, i32 1, i32 0
  %88 = load i16, i16* %87, align 2
  %89 = add i16 %88, 2048
  %90 = and i16 %89, 14336
  %91 = and i16 %88, -14337
  %92 = or i16 %90, %91
  store i16 %92, i16* %87, align 2
  ret %struct.Memory* %0
}

; Function Attrs: nounwind readnone
declare double @log2(double) local_unnamed_addr 

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L9DoFYL2XP1EP6MemoryR5State2InImES4_ItE(%struct.Memory* readnone returned, %struct.State* nocapture dereferenceable(3376), i64, i64)  {
  %5 = trunc i64 %3 to i16
  %6 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 11, i32 0, i32 0, i32 4
  store i16 %5, i16* %6, align 2
  %7 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 11, i32 0, i32 0, i32 5
  %8 = bitcast i32* %7 to i64*
  store i64 %2, i64* %8, align 8
  %9 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 0, i32 1
  %10 = load double, double* %9, align 8
  %11 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 1, i32 1
  %12 = load double, double* %11, align 8
  %13 = fcmp oeq double %10, 0.000000e+00
  %14 = zext i1 %13 to i8
  %15 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 15
  store i8 %14, i8* %15, align 1
  %16 = fcmp ueq double %10, 0.000000e+00
  %17 = bitcast double %10 to i64
  br i1 %16, label %23, label %18

; <label>:18:                                     ; preds = %4
  %19 = tail call double @llvm.fabs.f64(double %10) 
  %20 = fcmp oeq double %19, 0x7FF0000000000000
  br i1 %20, label %23, label %21

; <label>:21:                                     ; preds = %18
  %22 = fcmp olt double %19, 0x10000000000000
  br label %23

; <label>:23:                                     ; preds = %21, %18, %4
  %24 = phi i1 [ false, %4 ], [ false, %18 ], [ %22, %21 ]
  %25 = fcmp ueq double %12, 0.000000e+00
  br i1 %25, label %31, label %26

; <label>:26:                                     ; preds = %23
  %27 = tail call double @llvm.fabs.f64(double %12) 
  %28 = fcmp oeq double %27, 0x7FF0000000000000
  br i1 %28, label %31, label %29

; <label>:29:                                     ; preds = %26
  %30 = fcmp olt double %27, 0x10000000000000
  br label %31

; <label>:31:                                     ; preds = %29, %26, %23
  %32 = phi i1 [ false, %23 ], [ false, %26 ], [ %30, %29 ]
  %33 = or i1 %24, %32
  %34 = zext i1 %33 to i8
  %35 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 17
  store i8 %34, i8* %35, align 1
  %36 = and i64 %17, 9221120237041090560
  %37 = icmp eq i64 %36, 9218868437227405312
  %38 = and i64 %17, 2251799813685247
  %39 = icmp ne i64 %38, 0
  %40 = and i1 %37, %39
  %41 = bitcast double %12 to i64
  %42 = and i64 %41, 9221120237041090560
  %43 = icmp eq i64 %42, 9218868437227405312
  %44 = and i64 %41, 2251799813685247
  %45 = icmp ne i64 %44, 0
  %46 = and i1 %43, %45
  %47 = or i1 %40, %46
  %48 = zext i1 %47 to i8
  %49 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 19
  store i8 %48, i8* %49, align 1
  %50 = fadd double %10, 1.000000e+00
  %51 = tail call double @log2(double %50) 
  %52 = fmul double %12, %51
  %53 = bitcast double %52 to i64
  %54 = and i64 %53, 255
  %55 = icmp ne i64 %54, 0
  %56 = zext i1 %55 to i8
  %57 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 9
  store i8 %56, i8* %57, align 1
  %58 = bitcast double* %11 to i64*
  store double %52, double* %9, align 8
  %59 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 2, i32 1
  %60 = bitcast double* %59 to i64*
  %61 = load i64, i64* %60, align 8
  store i64 %61, i64* %58, align 8
  %62 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 3, i32 1
  %63 = bitcast double* %62 to i64*
  %64 = load i64, i64* %63, align 8
  store i64 %64, i64* %60, align 8
  %65 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 4, i32 1
  %66 = bitcast double* %65 to i64*
  %67 = load i64, i64* %66, align 8
  store i64 %67, i64* %63, align 8
  %68 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 5, i32 1
  %69 = bitcast double* %68 to i64*
  %70 = load i64, i64* %69, align 8
  store i64 %70, i64* %66, align 8
  %71 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 6, i32 1
  %72 = bitcast double* %71 to i64*
  %73 = load i64, i64* %72, align 8
  store i64 %73, i64* %69, align 8
  %74 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 7, i32 1
  %75 = bitcast double* %74 to i64*
  %76 = load i64, i64* %75, align 8
  store i64 %76, i64* %72, align 8
  store double %10, double* %74, align 8
  %77 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 11, i32 0, i32 0, i32 1, i32 0
  %78 = load i16, i16* %77, align 2
  %79 = add i16 %78, 2048
  %80 = and i16 %79, 14336
  %81 = and i16 %78, -14337
  %82 = or i16 %80, %81
  store i16 %82, i16* %77, align 2
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline norecurse nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L5FFREEEP6MemoryR5State2RnIdE2InImES6_ItE(%struct.Memory* readnone returned, %struct.State* nocapture dereferenceable(3376), double, i64, i64)  {
  %6 = trunc i64 %4 to i16
  %7 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 11, i32 0, i32 0, i32 4
  store i16 %6, i16* %7, align 2
  %8 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 11, i32 0, i32 0, i32 5
  %9 = bitcast i32* %8 to i64*
  store i64 %3, i64* %9, align 8
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline norecurse nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L6FFREEPEP6MemoryR5State2RnIdE2InImES6_ItE(%struct.Memory* readnone returned, %struct.State* nocapture dereferenceable(3376), double, i64, i64)  {
  %6 = trunc i64 %4 to i16
  %7 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 11, i32 0, i32 0, i32 4
  store i16 %6, i16* %7, align 2
  %8 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 11, i32 0, i32 0, i32 5
  %9 = bitcast i32* %8 to i64*
  store i64 %3, i64* %9, align 8
  %10 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 0, i32 1
  %11 = bitcast double* %10 to i64*
  %12 = load i64, i64* %11, align 8
  %13 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 1, i32 1
  %14 = bitcast double* %13 to i64*
  %15 = load i64, i64* %14, align 8
  store i64 %15, i64* %11, align 8
  %16 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 2, i32 1
  %17 = bitcast double* %16 to i64*
  %18 = load i64, i64* %17, align 8
  store i64 %18, i64* %14, align 8
  %19 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 3, i32 1
  %20 = bitcast double* %19 to i64*
  %21 = load i64, i64* %20, align 8
  store i64 %21, i64* %17, align 8
  %22 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 4, i32 1
  %23 = bitcast double* %22 to i64*
  %24 = load i64, i64* %23, align 8
  store i64 %24, i64* %20, align 8
  %25 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 5, i32 1
  %26 = bitcast double* %25 to i64*
  %27 = load i64, i64* %26, align 8
  store i64 %27, i64* %23, align 8
  %28 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 6, i32 1
  %29 = bitcast double* %28 to i64*
  %30 = load i64, i64* %29, align 8
  store i64 %30, i64* %26, align 8
  %31 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 7, i32 1
  %32 = bitcast double* %31 to i64*
  %33 = load i64, i64* %32, align 8
  store i64 %33, i64* %29, align 8
  store i64 %12, i64* %32, align 8
  %34 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 11, i32 0, i32 0, i32 1, i32 0
  %35 = load i16, i16* %34, align 2
  %36 = add i16 %35, 2048
  %37 = and i16 %36, 14336
  %38 = and i16 %35, -14337
  %39 = or i16 %37, %38
  store i16 %39, i16* %34, align 2
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline norecurse nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L7FCMOVNPI3RnWIdE2RnIdEEEP6MemoryS6_R5StateT_T0_2InImESB_ItE(%struct.Memory* readnone returned, %struct.State* nocapture dereferenceable(3376), double* nocapture, double, i64, i64)  {
  %7 = trunc i64 %5 to i16
  %8 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 11, i32 0, i32 0, i32 4
  store i16 %7, i16* %8, align 2
  %9 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 11, i32 0, i32 0, i32 5
  %10 = bitcast i32* %9 to i64*
  store i64 %4, i64* %10, align 8
  %11 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  %12 = load i8, i8* %11, align 1
  %13 = icmp eq i8 %12, 0
  %14 = load double, double* %2, align 8
  %15 = select i1 %13, double %3, double %14
  store double %15, double* %2, align 8
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline norecurse nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L7FCMOVNBI3RnWIdE2RnIdEEEP6MemoryS6_R5StateT_T0_2InImESB_ItE(%struct.Memory* readnone returned, %struct.State* nocapture dereferenceable(3376), double* nocapture, double, i64, i64)  {
  %7 = trunc i64 %5 to i16
  %8 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 11, i32 0, i32 0, i32 4
  store i16 %7, i16* %8, align 2
  %9 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 11, i32 0, i32 0, i32 5
  %10 = bitcast i32* %9 to i64*
  store i64 %4, i64* %10, align 8
  %11 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  %12 = load i8, i8* %11, align 1
  %13 = icmp eq i8 %12, 0
  %14 = load double, double* %2, align 8
  %15 = select i1 %13, double %3, double %14
  store double %15, double* %2, align 8
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline norecurse nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L7FCMOVNZI3RnWIdE2RnIdEEEP6MemoryS6_R5StateT_T0_2InImESB_ItE(%struct.Memory* readnone returned, %struct.State* nocapture dereferenceable(3376), double* nocapture, double, i64, i64)  {
  %7 = trunc i64 %5 to i16
  %8 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 11, i32 0, i32 0, i32 4
  store i16 %7, i16* %8, align 2
  %9 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 11, i32 0, i32 0, i32 5
  %10 = bitcast i32* %9 to i64*
  store i64 %4, i64* %10, align 8
  %11 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  %12 = load i8, i8* %11, align 1
  %13 = icmp eq i8 %12, 0
  %14 = load double, double* %2, align 8
  %15 = select i1 %13, double %3, double %14
  store double %15, double* %2, align 8
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline norecurse nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L7FCMOVBEI3RnWIdE2RnIdEEEP6MemoryS6_R5StateT_T0_2InImESB_ItE(%struct.Memory* readnone returned, %struct.State* nocapture dereferenceable(3376), double* nocapture, double, i64, i64)  {
  %7 = trunc i64 %5 to i16
  %8 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 11, i32 0, i32 0, i32 4
  store i16 %7, i16* %8, align 2
  %9 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 11, i32 0, i32 0, i32 5
  %10 = bitcast i32* %9 to i64*
  store i64 %4, i64* %10, align 8
  %11 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  %12 = load i8, i8* %11, align 1
  %13 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  %14 = load i8, i8* %13, align 1
  %15 = or i8 %14, %12
  %16 = icmp ne i8 %15, 0
  %17 = load double, double* %2, align 8
  %18 = select i1 %16, double %3, double %17
  store double %18, double* %2, align 8
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline norecurse nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L8FCMOVNBEI3RnWIdE2RnIdEEEP6MemoryS6_R5StateT_T0_2InImESB_ItE(%struct.Memory* readnone returned, %struct.State* nocapture dereferenceable(3376), double* nocapture, double, i64, i64)  {
  %7 = trunc i64 %5 to i16
  %8 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 11, i32 0, i32 0, i32 4
  store i16 %7, i16* %8, align 2
  %9 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 11, i32 0, i32 0, i32 5
  %10 = bitcast i32* %9 to i64*
  store i64 %4, i64* %10, align 8
  %11 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  %12 = load i8, i8* %11, align 1
  %13 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  %14 = load i8, i8* %13, align 1
  %15 = or i8 %14, %12
  %16 = icmp eq i8 %15, 0
  %17 = load double, double* %2, align 8
  %18 = select i1 %16, double %3, double %17
  store double %18, double* %2, align 8
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline norecurse nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L6FCMOVPI3RnWIdE2RnIdEEEP6MemoryS6_R5StateT_T0_2InImESB_ItE(%struct.Memory* readnone returned, %struct.State* nocapture dereferenceable(3376), double* nocapture, double, i64, i64)  {
  %7 = trunc i64 %5 to i16
  %8 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 11, i32 0, i32 0, i32 4
  store i16 %7, i16* %8, align 2
  %9 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 11, i32 0, i32 0, i32 5
  %10 = bitcast i32* %9 to i64*
  store i64 %4, i64* %10, align 8
  %11 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  %12 = load i8, i8* %11, align 1
  %13 = icmp ne i8 %12, 0
  %14 = load double, double* %2, align 8
  %15 = select i1 %13, double %3, double %14
  store double %15, double* %2, align 8
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline norecurse nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L6FCMOVZI3RnWIdE2RnIdEEEP6MemoryS6_R5StateT_T0_2InImESB_ItE(%struct.Memory* readnone returned, %struct.State* nocapture dereferenceable(3376), double* nocapture, double, i64, i64)  {
  %7 = trunc i64 %5 to i16
  %8 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 11, i32 0, i32 0, i32 4
  store i16 %7, i16* %8, align 2
  %9 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 11, i32 0, i32 0, i32 5
  %10 = bitcast i32* %9 to i64*
  store i64 %4, i64* %10, align 8
  %11 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  %12 = load i8, i8* %11, align 1
  %13 = icmp ne i8 %12, 0
  %14 = load double, double* %2, align 8
  %15 = select i1 %13, double %3, double %14
  store double %15, double* %2, align 8
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline norecurse nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L6FCMOVBI3RnWIdE2RnIdEEEP6MemoryS6_R5StateT_T0_2InImESB_ItE(%struct.Memory* readnone returned, %struct.State* nocapture dereferenceable(3376), double* nocapture, double, i64, i64)  {
  %7 = trunc i64 %5 to i16
  %8 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 11, i32 0, i32 0, i32 4
  store i16 %7, i16* %8, align 2
  %9 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 11, i32 0, i32 0, i32 5
  %10 = bitcast i32* %9 to i64*
  store i64 %4, i64* %10, align 8
  %11 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  %12 = load i8, i8* %11, align 1
  %13 = icmp ne i8 %12, 0
  %14 = load double, double* %2, align 8
  %15 = select i1 %13, double %3, double %14
  store double %15, double* %2, align 8
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L8DoFNINITEP6MemoryR5State(%struct.Memory* readnone returned, %struct.State* nocapture dereferenceable(3376))  {
  %3 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 11
  %4 = bitcast %union.FPU* %3 to %struct.FpuFSAVE*
  %5 = getelementptr inbounds %union.FPU, %union.FPU* %3, i64 0, i32 0, i32 0, i32 0, i32 0
  store i16 895, i16* %5, align 16
  %6 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 11, i32 0, i32 0, i32 2
  %7 = bitcast %union.FPUAbridgedTagWord* %6 to i16*
  store i16 0, i16* %7, align 4
  %8 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 11, i32 0, i32 0, i32 5
  %9 = bitcast i32* %8 to i16*
  store i16 0, i16* %9, align 8
  %10 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 11, i32 0, i32 0, i32 9
  %11 = bitcast %union.SegmentSelector* %10 to i32*
  store i32 0, i32* %11, align 4
  %12 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 11, i32 0, i32 0, i32 6
  %13 = bitcast %union.SegmentSelector* %12 to i32*
  store i32 0, i32* %13, align 4
  %14 = getelementptr inbounds %struct.FpuFSAVE, %struct.FpuFSAVE* %4, i64 0, i32 5
  store i16 0, i16* %14, align 2
  %15 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 11, i32 0, i32 0, i32 11
  %16 = bitcast %union.FPUControlStatus* %15 to i16*
  store i16 0, i16* %16, align 8
  %17 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 11, i32 0, i32 0, i32 8
  %18 = bitcast i32* %17 to i16*
  store i16 0, i16* %18, align 16
  %19 = tail call i32 @feclearexcept(i32 61) 
  %20 = tail call i32 @fesetround(i32 0) 
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L8DoXGETBVEP6MemoryR5State(%struct.Memory*, %struct.State* dereferenceable(3376))  {
  %3 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 5, i32 0
  %4 = bitcast %union.anon* %3 to i32*
  %5 = load i32, i32* %4, align 8
  switch i32 %5, label %17 [
    i32 0, label %6
    i32 1, label %21
  ]

; <label>:6:                                      ; preds = %2
  %7 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 1, i32 0, i32 0
  %8 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 10
  %9 = bitcast %union.anon* %8 to %struct.anon.5*
  %10 = bitcast %union.anon* %8 to i32*
  %11 = load i32, i32* %10, align 8
  %12 = zext i32 %11 to i64
  store i64 %12, i64* %7, align 8
  %13 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 7, i32 0, i32 0
  %14 = getelementptr inbounds %struct.anon.5, %struct.anon.5* %9, i64 0, i32 1
  %15 = load i32, i32* %14, align 4
  %16 = zext i32 %15 to i64
  store i64 %16, i64* %13, align 8
  br label %21

; <label>:17:                                     ; preds = %2
  %18 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 33, i32 0, i32 0
  %19 = load i64, i64* %18, align 8
  %20 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %1, i64 %19, %struct.Memory* %0) 
  br label %21

; <label>:21:                                     ; preds = %17, %6, %2
  %22 = phi %struct.Memory* [ %20, %17 ], [ %0, %6 ], [ %0, %2 ]
  ret %struct.Memory* %22
}

; Function Attrs: noinline nounwind optnone
define %struct.Memory* @__remill_basic_block(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) {
  %state = alloca %struct.State*, align 8
  %curr_pc = alloca i64, align 8
  %memory = alloca %struct.Memory*, align 8
  %BRANCH_TAKEN = alloca i8, align 1
  %SS_BASE = alloca i64, align 8
  %ES_BASE = alloca i64, align 8
  %DS_BASE = alloca i64, align 8
  %CS_BASE = alloca i64, align 8
  %STATE = alloca %struct.State*, align 8
  %MEMORY = alloca %struct.Memory*, align 8
  %_DR0 = alloca i64*, align 8
  %_DR1 = alloca i64*, align 8
  %_DR2 = alloca i64*, align 8
  %_DR3 = alloca i64*, align 8
  %_DR4 = alloca i64*, align 8
  %_DR5 = alloca i64*, align 8
  %_DR6 = alloca i64*, align 8
  %_DR7 = alloca i64*, align 8
  %CR0 = alloca i64*, align 8
  %CR1 = alloca i64*, align 8
  %CR2 = alloca i64*, align 8
  %CR3 = alloca i64*, align 8
  %CR4 = alloca i64*, align 8
  %CR8 = alloca i64*, align 8
  store %struct.State* %0, %struct.State** %state, align 8
  store i64 %1, i64* %curr_pc, align 8
  store %struct.Memory* %2, %struct.Memory** %memory, align 8
  store i8 0, i8* %BRANCH_TAKEN, align 1
  store i64 0, i64* %SS_BASE, align 8
  store i64 0, i64* %ES_BASE, align 8
  store i64 0, i64* %DS_BASE, align 8
  store i64 0, i64* %CS_BASE, align 8
  store %struct.State* %0, %struct.State** %STATE, align 8
  store %struct.Memory* %2, %struct.Memory** %MEMORY, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %5 = getelementptr inbounds %struct.GPR, %struct.GPR* %4, i32 0, i32 33
  %6 = getelementptr inbounds %struct.Reg, %struct.Reg* %5, i32 0, i32 0
  %PC = bitcast %union.anon* %6 to i64*
  store i64 %1, i64* %PC, align 8
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %8 = getelementptr inbounds %struct.GPR, %struct.GPR* %7, i32 0, i32 1
  %9 = getelementptr inbounds %struct.Reg, %struct.Reg* %8, i32 0, i32 0
  %10 = bitcast %union.anon* %9 to %struct.anon.2*
  %AH = getelementptr inbounds %struct.anon.2, %struct.anon.2* %10, i32 0, i32 1
  %11 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %12 = getelementptr inbounds %struct.GPR, %struct.GPR* %11, i32 0, i32 3
  %13 = getelementptr inbounds %struct.Reg, %struct.Reg* %12, i32 0, i32 0
  %14 = bitcast %union.anon* %13 to %struct.anon.2*
  %BH = getelementptr inbounds %struct.anon.2, %struct.anon.2* %14, i32 0, i32 1
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %16 = getelementptr inbounds %struct.GPR, %struct.GPR* %15, i32 0, i32 5
  %17 = getelementptr inbounds %struct.Reg, %struct.Reg* %16, i32 0, i32 0
  %18 = bitcast %union.anon* %17 to %struct.anon.2*
  %CH = getelementptr inbounds %struct.anon.2, %struct.anon.2* %18, i32 0, i32 1
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %20 = getelementptr inbounds %struct.GPR, %struct.GPR* %19, i32 0, i32 7
  %21 = getelementptr inbounds %struct.Reg, %struct.Reg* %20, i32 0, i32 0
  %22 = bitcast %union.anon* %21 to %struct.anon.2*
  %DH = getelementptr inbounds %struct.anon.2, %struct.anon.2* %22, i32 0, i32 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %24 = getelementptr inbounds %struct.GPR, %struct.GPR* %23, i32 0, i32 1
  %25 = getelementptr inbounds %struct.Reg, %struct.Reg* %24, i32 0, i32 0
  %26 = bitcast %union.anon* %25 to %struct.anon.2*
  %AL = getelementptr inbounds %struct.anon.2, %struct.anon.2* %26, i32 0, i32 0
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %28 = getelementptr inbounds %struct.GPR, %struct.GPR* %27, i32 0, i32 3
  %29 = getelementptr inbounds %struct.Reg, %struct.Reg* %28, i32 0, i32 0
  %30 = bitcast %union.anon* %29 to %struct.anon.2*
  %BL = getelementptr inbounds %struct.anon.2, %struct.anon.2* %30, i32 0, i32 0
  %31 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %32 = getelementptr inbounds %struct.GPR, %struct.GPR* %31, i32 0, i32 5
  %33 = getelementptr inbounds %struct.Reg, %struct.Reg* %32, i32 0, i32 0
  %34 = bitcast %union.anon* %33 to %struct.anon.2*
  %CL = getelementptr inbounds %struct.anon.2, %struct.anon.2* %34, i32 0, i32 0
  %35 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %36 = getelementptr inbounds %struct.GPR, %struct.GPR* %35, i32 0, i32 7
  %37 = getelementptr inbounds %struct.Reg, %struct.Reg* %36, i32 0, i32 0
  %38 = bitcast %union.anon* %37 to %struct.anon.2*
  %DL = getelementptr inbounds %struct.anon.2, %struct.anon.2* %38, i32 0, i32 0
  %39 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %40 = getelementptr inbounds %struct.GPR, %struct.GPR* %39, i32 0, i32 9
  %41 = getelementptr inbounds %struct.Reg, %struct.Reg* %40, i32 0, i32 0
  %42 = bitcast %union.anon* %41 to %struct.anon.2*
  %SIL = getelementptr inbounds %struct.anon.2, %struct.anon.2* %42, i32 0, i32 0
  %43 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %44 = getelementptr inbounds %struct.GPR, %struct.GPR* %43, i32 0, i32 11
  %45 = getelementptr inbounds %struct.Reg, %struct.Reg* %44, i32 0, i32 0
  %46 = bitcast %union.anon* %45 to %struct.anon.2*
  %DIL = getelementptr inbounds %struct.anon.2, %struct.anon.2* %46, i32 0, i32 0
  %47 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %48 = getelementptr inbounds %struct.GPR, %struct.GPR* %47, i32 0, i32 13
  %49 = getelementptr inbounds %struct.Reg, %struct.Reg* %48, i32 0, i32 0
  %50 = bitcast %union.anon* %49 to %struct.anon.2*
  %SPL = getelementptr inbounds %struct.anon.2, %struct.anon.2* %50, i32 0, i32 0
  %51 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %52 = getelementptr inbounds %struct.GPR, %struct.GPR* %51, i32 0, i32 15
  %53 = getelementptr inbounds %struct.Reg, %struct.Reg* %52, i32 0, i32 0
  %54 = bitcast %union.anon* %53 to %struct.anon.2*
  %BPL = getelementptr inbounds %struct.anon.2, %struct.anon.2* %54, i32 0, i32 0
  %55 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %56 = getelementptr inbounds %struct.GPR, %struct.GPR* %55, i32 0, i32 17
  %57 = getelementptr inbounds %struct.Reg, %struct.Reg* %56, i32 0, i32 0
  %58 = bitcast %union.anon* %57 to %struct.anon.2*
  %R8B = getelementptr inbounds %struct.anon.2, %struct.anon.2* %58, i32 0, i32 0
  %59 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %60 = getelementptr inbounds %struct.GPR, %struct.GPR* %59, i32 0, i32 19
  %61 = getelementptr inbounds %struct.Reg, %struct.Reg* %60, i32 0, i32 0
  %62 = bitcast %union.anon* %61 to %struct.anon.2*
  %R9B = getelementptr inbounds %struct.anon.2, %struct.anon.2* %62, i32 0, i32 0
  %63 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %64 = getelementptr inbounds %struct.GPR, %struct.GPR* %63, i32 0, i32 21
  %65 = getelementptr inbounds %struct.Reg, %struct.Reg* %64, i32 0, i32 0
  %66 = bitcast %union.anon* %65 to %struct.anon.2*
  %R10B = getelementptr inbounds %struct.anon.2, %struct.anon.2* %66, i32 0, i32 0
  %67 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %68 = getelementptr inbounds %struct.GPR, %struct.GPR* %67, i32 0, i32 23
  %69 = getelementptr inbounds %struct.Reg, %struct.Reg* %68, i32 0, i32 0
  %70 = bitcast %union.anon* %69 to %struct.anon.2*
  %R11B = getelementptr inbounds %struct.anon.2, %struct.anon.2* %70, i32 0, i32 0
  %71 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %72 = getelementptr inbounds %struct.GPR, %struct.GPR* %71, i32 0, i32 25
  %73 = getelementptr inbounds %struct.Reg, %struct.Reg* %72, i32 0, i32 0
  %74 = bitcast %union.anon* %73 to %struct.anon.2*
  %R12B = getelementptr inbounds %struct.anon.2, %struct.anon.2* %74, i32 0, i32 0
  %75 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %76 = getelementptr inbounds %struct.GPR, %struct.GPR* %75, i32 0, i32 27
  %77 = getelementptr inbounds %struct.Reg, %struct.Reg* %76, i32 0, i32 0
  %78 = bitcast %union.anon* %77 to %struct.anon.2*
  %R13B = getelementptr inbounds %struct.anon.2, %struct.anon.2* %78, i32 0, i32 0
  %79 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %80 = getelementptr inbounds %struct.GPR, %struct.GPR* %79, i32 0, i32 29
  %81 = getelementptr inbounds %struct.Reg, %struct.Reg* %80, i32 0, i32 0
  %82 = bitcast %union.anon* %81 to %struct.anon.2*
  %R14B = getelementptr inbounds %struct.anon.2, %struct.anon.2* %82, i32 0, i32 0
  %83 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %84 = getelementptr inbounds %struct.GPR, %struct.GPR* %83, i32 0, i32 31
  %85 = getelementptr inbounds %struct.Reg, %struct.Reg* %84, i32 0, i32 0
  %86 = bitcast %union.anon* %85 to %struct.anon.2*
  %R15B = getelementptr inbounds %struct.anon.2, %struct.anon.2* %86, i32 0, i32 0
  %87 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %88 = getelementptr inbounds %struct.GPR, %struct.GPR* %87, i32 0, i32 1
  %89 = getelementptr inbounds %struct.Reg, %struct.Reg* %88, i32 0, i32 0
  %AX = bitcast %union.anon* %89 to i16*
  %90 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %91 = getelementptr inbounds %struct.GPR, %struct.GPR* %90, i32 0, i32 3
  %92 = getelementptr inbounds %struct.Reg, %struct.Reg* %91, i32 0, i32 0
  %BX = bitcast %union.anon* %92 to i16*
  %93 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %94 = getelementptr inbounds %struct.GPR, %struct.GPR* %93, i32 0, i32 5
  %95 = getelementptr inbounds %struct.Reg, %struct.Reg* %94, i32 0, i32 0
  %CX = bitcast %union.anon* %95 to i16*
  %96 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %97 = getelementptr inbounds %struct.GPR, %struct.GPR* %96, i32 0, i32 7
  %98 = getelementptr inbounds %struct.Reg, %struct.Reg* %97, i32 0, i32 0
  %DX = bitcast %union.anon* %98 to i16*
  %99 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %100 = getelementptr inbounds %struct.GPR, %struct.GPR* %99, i32 0, i32 9
  %101 = getelementptr inbounds %struct.Reg, %struct.Reg* %100, i32 0, i32 0
  %SI = bitcast %union.anon* %101 to i16*
  %102 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %103 = getelementptr inbounds %struct.GPR, %struct.GPR* %102, i32 0, i32 11
  %104 = getelementptr inbounds %struct.Reg, %struct.Reg* %103, i32 0, i32 0
  %DI = bitcast %union.anon* %104 to i16*
  %105 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %106 = getelementptr inbounds %struct.GPR, %struct.GPR* %105, i32 0, i32 13
  %107 = getelementptr inbounds %struct.Reg, %struct.Reg* %106, i32 0, i32 0
  %SP = bitcast %union.anon* %107 to i16*
  %108 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %109 = getelementptr inbounds %struct.GPR, %struct.GPR* %108, i32 0, i32 15
  %110 = getelementptr inbounds %struct.Reg, %struct.Reg* %109, i32 0, i32 0
  %BP = bitcast %union.anon* %110 to i16*
  %111 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %112 = getelementptr inbounds %struct.GPR, %struct.GPR* %111, i32 0, i32 17
  %113 = getelementptr inbounds %struct.Reg, %struct.Reg* %112, i32 0, i32 0
  %R8W = bitcast %union.anon* %113 to i16*
  %114 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %115 = getelementptr inbounds %struct.GPR, %struct.GPR* %114, i32 0, i32 19
  %116 = getelementptr inbounds %struct.Reg, %struct.Reg* %115, i32 0, i32 0
  %R9W = bitcast %union.anon* %116 to i16*
  %117 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %118 = getelementptr inbounds %struct.GPR, %struct.GPR* %117, i32 0, i32 21
  %119 = getelementptr inbounds %struct.Reg, %struct.Reg* %118, i32 0, i32 0
  %R10W = bitcast %union.anon* %119 to i16*
  %120 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %121 = getelementptr inbounds %struct.GPR, %struct.GPR* %120, i32 0, i32 23
  %122 = getelementptr inbounds %struct.Reg, %struct.Reg* %121, i32 0, i32 0
  %R11W = bitcast %union.anon* %122 to i16*
  %123 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %124 = getelementptr inbounds %struct.GPR, %struct.GPR* %123, i32 0, i32 25
  %125 = getelementptr inbounds %struct.Reg, %struct.Reg* %124, i32 0, i32 0
  %R12W = bitcast %union.anon* %125 to i16*
  %126 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %127 = getelementptr inbounds %struct.GPR, %struct.GPR* %126, i32 0, i32 27
  %128 = getelementptr inbounds %struct.Reg, %struct.Reg* %127, i32 0, i32 0
  %R13W = bitcast %union.anon* %128 to i16*
  %129 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %130 = getelementptr inbounds %struct.GPR, %struct.GPR* %129, i32 0, i32 29
  %131 = getelementptr inbounds %struct.Reg, %struct.Reg* %130, i32 0, i32 0
  %R14W = bitcast %union.anon* %131 to i16*
  %132 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %133 = getelementptr inbounds %struct.GPR, %struct.GPR* %132, i32 0, i32 31
  %134 = getelementptr inbounds %struct.Reg, %struct.Reg* %133, i32 0, i32 0
  %R15W = bitcast %union.anon* %134 to i16*
  %135 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %136 = getelementptr inbounds %struct.GPR, %struct.GPR* %135, i32 0, i32 33
  %137 = getelementptr inbounds %struct.Reg, %struct.Reg* %136, i32 0, i32 0
  %IP = bitcast %union.anon* %137 to i16*
  %138 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %139 = getelementptr inbounds %struct.GPR, %struct.GPR* %138, i32 0, i32 1
  %140 = getelementptr inbounds %struct.Reg, %struct.Reg* %139, i32 0, i32 0
  %EAX = bitcast %union.anon* %140 to i32*
  %141 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %142 = getelementptr inbounds %struct.GPR, %struct.GPR* %141, i32 0, i32 3
  %143 = getelementptr inbounds %struct.Reg, %struct.Reg* %142, i32 0, i32 0
  %EBX = bitcast %union.anon* %143 to i32*
  %144 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %145 = getelementptr inbounds %struct.GPR, %struct.GPR* %144, i32 0, i32 5
  %146 = getelementptr inbounds %struct.Reg, %struct.Reg* %145, i32 0, i32 0
  %ECX = bitcast %union.anon* %146 to i32*
  %147 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %148 = getelementptr inbounds %struct.GPR, %struct.GPR* %147, i32 0, i32 7
  %149 = getelementptr inbounds %struct.Reg, %struct.Reg* %148, i32 0, i32 0
  %EDX = bitcast %union.anon* %149 to i32*
  %150 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %151 = getelementptr inbounds %struct.GPR, %struct.GPR* %150, i32 0, i32 9
  %152 = getelementptr inbounds %struct.Reg, %struct.Reg* %151, i32 0, i32 0
  %ESI = bitcast %union.anon* %152 to i32*
  %153 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %154 = getelementptr inbounds %struct.GPR, %struct.GPR* %153, i32 0, i32 11
  %155 = getelementptr inbounds %struct.Reg, %struct.Reg* %154, i32 0, i32 0
  %EDI = bitcast %union.anon* %155 to i32*
  %156 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %157 = getelementptr inbounds %struct.GPR, %struct.GPR* %156, i32 0, i32 13
  %158 = getelementptr inbounds %struct.Reg, %struct.Reg* %157, i32 0, i32 0
  %ESP = bitcast %union.anon* %158 to i32*
  %159 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %160 = getelementptr inbounds %struct.GPR, %struct.GPR* %159, i32 0, i32 15
  %161 = getelementptr inbounds %struct.Reg, %struct.Reg* %160, i32 0, i32 0
  %EBP = bitcast %union.anon* %161 to i32*
  %162 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %163 = getelementptr inbounds %struct.GPR, %struct.GPR* %162, i32 0, i32 33
  %164 = getelementptr inbounds %struct.Reg, %struct.Reg* %163, i32 0, i32 0
  %EIP = bitcast %union.anon* %164 to i32*
  %165 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %166 = getelementptr inbounds %struct.GPR, %struct.GPR* %165, i32 0, i32 17
  %167 = getelementptr inbounds %struct.Reg, %struct.Reg* %166, i32 0, i32 0
  %R8D = bitcast %union.anon* %167 to i32*
  %168 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %169 = getelementptr inbounds %struct.GPR, %struct.GPR* %168, i32 0, i32 19
  %170 = getelementptr inbounds %struct.Reg, %struct.Reg* %169, i32 0, i32 0
  %R9D = bitcast %union.anon* %170 to i32*
  %171 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %172 = getelementptr inbounds %struct.GPR, %struct.GPR* %171, i32 0, i32 21
  %173 = getelementptr inbounds %struct.Reg, %struct.Reg* %172, i32 0, i32 0
  %R10D = bitcast %union.anon* %173 to i32*
  %174 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %175 = getelementptr inbounds %struct.GPR, %struct.GPR* %174, i32 0, i32 23
  %176 = getelementptr inbounds %struct.Reg, %struct.Reg* %175, i32 0, i32 0
  %R11D = bitcast %union.anon* %176 to i32*
  %177 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %178 = getelementptr inbounds %struct.GPR, %struct.GPR* %177, i32 0, i32 25
  %179 = getelementptr inbounds %struct.Reg, %struct.Reg* %178, i32 0, i32 0
  %R12D = bitcast %union.anon* %179 to i32*
  %180 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %181 = getelementptr inbounds %struct.GPR, %struct.GPR* %180, i32 0, i32 27
  %182 = getelementptr inbounds %struct.Reg, %struct.Reg* %181, i32 0, i32 0
  %R13D = bitcast %union.anon* %182 to i32*
  %183 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %184 = getelementptr inbounds %struct.GPR, %struct.GPR* %183, i32 0, i32 29
  %185 = getelementptr inbounds %struct.Reg, %struct.Reg* %184, i32 0, i32 0
  %R14D = bitcast %union.anon* %185 to i32*
  %186 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %187 = getelementptr inbounds %struct.GPR, %struct.GPR* %186, i32 0, i32 31
  %188 = getelementptr inbounds %struct.Reg, %struct.Reg* %187, i32 0, i32 0
  %R15D = bitcast %union.anon* %188 to i32*
  %189 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %190 = getelementptr inbounds %struct.GPR, %struct.GPR* %189, i32 0, i32 1
  %191 = getelementptr inbounds %struct.Reg, %struct.Reg* %190, i32 0, i32 0
  %RAX = bitcast %union.anon* %191 to i64*
  %192 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %193 = getelementptr inbounds %struct.GPR, %struct.GPR* %192, i32 0, i32 3
  %194 = getelementptr inbounds %struct.Reg, %struct.Reg* %193, i32 0, i32 0
  %RBX = bitcast %union.anon* %194 to i64*
  %195 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %196 = getelementptr inbounds %struct.GPR, %struct.GPR* %195, i32 0, i32 5
  %197 = getelementptr inbounds %struct.Reg, %struct.Reg* %196, i32 0, i32 0
  %RCX = bitcast %union.anon* %197 to i64*
  %198 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %199 = getelementptr inbounds %struct.GPR, %struct.GPR* %198, i32 0, i32 7
  %200 = getelementptr inbounds %struct.Reg, %struct.Reg* %199, i32 0, i32 0
  %RDX = bitcast %union.anon* %200 to i64*
  %201 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %202 = getelementptr inbounds %struct.GPR, %struct.GPR* %201, i32 0, i32 9
  %203 = getelementptr inbounds %struct.Reg, %struct.Reg* %202, i32 0, i32 0
  %RSI = bitcast %union.anon* %203 to i64*
  %204 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %205 = getelementptr inbounds %struct.GPR, %struct.GPR* %204, i32 0, i32 11
  %206 = getelementptr inbounds %struct.Reg, %struct.Reg* %205, i32 0, i32 0
  %RDI = bitcast %union.anon* %206 to i64*
  %207 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %208 = getelementptr inbounds %struct.GPR, %struct.GPR* %207, i32 0, i32 13
  %209 = getelementptr inbounds %struct.Reg, %struct.Reg* %208, i32 0, i32 0
  %RSP = bitcast %union.anon* %209 to i64*
  %210 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %211 = getelementptr inbounds %struct.GPR, %struct.GPR* %210, i32 0, i32 15
  %212 = getelementptr inbounds %struct.Reg, %struct.Reg* %211, i32 0, i32 0
  %RBP = bitcast %union.anon* %212 to i64*
  %213 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %214 = getelementptr inbounds %struct.GPR, %struct.GPR* %213, i32 0, i32 17
  %215 = getelementptr inbounds %struct.Reg, %struct.Reg* %214, i32 0, i32 0
  %R8 = bitcast %union.anon* %215 to i64*
  %216 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %217 = getelementptr inbounds %struct.GPR, %struct.GPR* %216, i32 0, i32 19
  %218 = getelementptr inbounds %struct.Reg, %struct.Reg* %217, i32 0, i32 0
  %R9 = bitcast %union.anon* %218 to i64*
  %219 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %220 = getelementptr inbounds %struct.GPR, %struct.GPR* %219, i32 0, i32 21
  %221 = getelementptr inbounds %struct.Reg, %struct.Reg* %220, i32 0, i32 0
  %R10 = bitcast %union.anon* %221 to i64*
  %222 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %223 = getelementptr inbounds %struct.GPR, %struct.GPR* %222, i32 0, i32 23
  %224 = getelementptr inbounds %struct.Reg, %struct.Reg* %223, i32 0, i32 0
  %R11 = bitcast %union.anon* %224 to i64*
  %225 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %226 = getelementptr inbounds %struct.GPR, %struct.GPR* %225, i32 0, i32 25
  %227 = getelementptr inbounds %struct.Reg, %struct.Reg* %226, i32 0, i32 0
  %R12 = bitcast %union.anon* %227 to i64*
  %228 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %229 = getelementptr inbounds %struct.GPR, %struct.GPR* %228, i32 0, i32 27
  %230 = getelementptr inbounds %struct.Reg, %struct.Reg* %229, i32 0, i32 0
  %R13 = bitcast %union.anon* %230 to i64*
  %231 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %232 = getelementptr inbounds %struct.GPR, %struct.GPR* %231, i32 0, i32 29
  %233 = getelementptr inbounds %struct.Reg, %struct.Reg* %232, i32 0, i32 0
  %R14 = bitcast %union.anon* %233 to i64*
  %234 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %235 = getelementptr inbounds %struct.GPR, %struct.GPR* %234, i32 0, i32 31
  %236 = getelementptr inbounds %struct.Reg, %struct.Reg* %235, i32 0, i32 0
  %R15 = bitcast %union.anon* %236 to i64*
  %237 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %238 = getelementptr inbounds %struct.GPR, %struct.GPR* %237, i32 0, i32 33
  %239 = getelementptr inbounds %struct.Reg, %struct.Reg* %238, i32 0, i32 0
  %RIP = bitcast %union.anon* %239 to i64*
  %240 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 4
  %241 = getelementptr inbounds %struct.Segments, %struct.Segments* %240, i32 0, i32 1
  %SS = bitcast %union.SegmentSelector* %241 to i16*
  %242 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 4
  %243 = getelementptr inbounds %struct.Segments, %struct.Segments* %242, i32 0, i32 3
  %ES = bitcast %union.SegmentSelector* %243 to i16*
  %244 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 4
  %245 = getelementptr inbounds %struct.Segments, %struct.Segments* %244, i32 0, i32 5
  %GS = bitcast %union.SegmentSelector* %245 to i16*
  %246 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 4
  %247 = getelementptr inbounds %struct.Segments, %struct.Segments* %246, i32 0, i32 7
  %FS = bitcast %union.SegmentSelector* %247 to i16*
  %248 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 4
  %249 = getelementptr inbounds %struct.Segments, %struct.Segments* %248, i32 0, i32 9
  %DS = bitcast %union.SegmentSelector* %249 to i16*
  %250 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 4
  %251 = getelementptr inbounds %struct.Segments, %struct.Segments* %250, i32 0, i32 11
  %CS = bitcast %union.SegmentSelector* %251 to i16*
  %252 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 5
  %253 = getelementptr inbounds %struct.AddressSpace, %struct.AddressSpace* %252, i32 0, i32 5
  %254 = getelementptr inbounds %struct.Reg, %struct.Reg* %253, i32 0, i32 0
  %GS_BASE = bitcast %union.anon* %254 to i64*
  %255 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 5
  %256 = getelementptr inbounds %struct.AddressSpace, %struct.AddressSpace* %255, i32 0, i32 7
  %257 = getelementptr inbounds %struct.Reg, %struct.Reg* %256, i32 0, i32 0
  %FS_BASE = bitcast %union.anon* %257 to i64*
  %258 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %259 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %258, i64 0, i64 0
  %XMM0 = bitcast %union.VectorReg* %259 to %union.vec128_t*
  %260 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %261 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %260, i64 0, i64 1
  %XMM1 = bitcast %union.VectorReg* %261 to %union.vec128_t*
  %262 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %263 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %262, i64 0, i64 2
  %XMM2 = bitcast %union.VectorReg* %263 to %union.vec128_t*
  %264 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %265 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %264, i64 0, i64 3
  %XMM3 = bitcast %union.VectorReg* %265 to %union.vec128_t*
  %266 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %267 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %266, i64 0, i64 4
  %XMM4 = bitcast %union.VectorReg* %267 to %union.vec128_t*
  %268 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %269 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %268, i64 0, i64 5
  %XMM5 = bitcast %union.VectorReg* %269 to %union.vec128_t*
  %270 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %271 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %270, i64 0, i64 6
  %XMM6 = bitcast %union.VectorReg* %271 to %union.vec128_t*
  %272 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %273 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %272, i64 0, i64 7
  %XMM7 = bitcast %union.VectorReg* %273 to %union.vec128_t*
  %274 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %275 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %274, i64 0, i64 8
  %XMM8 = bitcast %union.VectorReg* %275 to %union.vec128_t*
  %276 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %277 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %276, i64 0, i64 9
  %XMM9 = bitcast %union.VectorReg* %277 to %union.vec128_t*
  %278 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %279 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %278, i64 0, i64 10
  %XMM10 = bitcast %union.VectorReg* %279 to %union.vec128_t*
  %280 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %281 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %280, i64 0, i64 11
  %XMM11 = bitcast %union.VectorReg* %281 to %union.vec128_t*
  %282 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %283 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %282, i64 0, i64 12
  %XMM12 = bitcast %union.VectorReg* %283 to %union.vec128_t*
  %284 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %285 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %284, i64 0, i64 13
  %XMM13 = bitcast %union.VectorReg* %285 to %union.vec128_t*
  %286 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %287 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %286, i64 0, i64 14
  %XMM14 = bitcast %union.VectorReg* %287 to %union.vec128_t*
  %288 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %289 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %288, i64 0, i64 15
  %XMM15 = bitcast %union.VectorReg* %289 to %union.vec128_t*
  %290 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 7
  %291 = getelementptr inbounds %struct.X87Stack, %struct.X87Stack* %290, i32 0, i32 0
  %292 = getelementptr inbounds [8 x %struct.anon.3], [8 x %struct.anon.3]* %291, i64 0, i64 0
  %ST0 = getelementptr inbounds %struct.anon.3, %struct.anon.3* %292, i32 0, i32 1
  %293 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 7
  %294 = getelementptr inbounds %struct.X87Stack, %struct.X87Stack* %293, i32 0, i32 0
  %295 = getelementptr inbounds [8 x %struct.anon.3], [8 x %struct.anon.3]* %294, i64 0, i64 1
  %ST1 = getelementptr inbounds %struct.anon.3, %struct.anon.3* %295, i32 0, i32 1
  %296 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 7
  %297 = getelementptr inbounds %struct.X87Stack, %struct.X87Stack* %296, i32 0, i32 0
  %298 = getelementptr inbounds [8 x %struct.anon.3], [8 x %struct.anon.3]* %297, i64 0, i64 2
  %ST2 = getelementptr inbounds %struct.anon.3, %struct.anon.3* %298, i32 0, i32 1
  %299 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 7
  %300 = getelementptr inbounds %struct.X87Stack, %struct.X87Stack* %299, i32 0, i32 0
  %301 = getelementptr inbounds [8 x %struct.anon.3], [8 x %struct.anon.3]* %300, i64 0, i64 3
  %ST3 = getelementptr inbounds %struct.anon.3, %struct.anon.3* %301, i32 0, i32 1
  %302 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 7
  %303 = getelementptr inbounds %struct.X87Stack, %struct.X87Stack* %302, i32 0, i32 0
  %304 = getelementptr inbounds [8 x %struct.anon.3], [8 x %struct.anon.3]* %303, i64 0, i64 4
  %ST4 = getelementptr inbounds %struct.anon.3, %struct.anon.3* %304, i32 0, i32 1
  %305 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 7
  %306 = getelementptr inbounds %struct.X87Stack, %struct.X87Stack* %305, i32 0, i32 0
  %307 = getelementptr inbounds [8 x %struct.anon.3], [8 x %struct.anon.3]* %306, i64 0, i64 5
  %ST5 = getelementptr inbounds %struct.anon.3, %struct.anon.3* %307, i32 0, i32 1
  %308 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 7
  %309 = getelementptr inbounds %struct.X87Stack, %struct.X87Stack* %308, i32 0, i32 0
  %310 = getelementptr inbounds [8 x %struct.anon.3], [8 x %struct.anon.3]* %309, i64 0, i64 6
  %ST6 = getelementptr inbounds %struct.anon.3, %struct.anon.3* %310, i32 0, i32 1
  %311 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 7
  %312 = getelementptr inbounds %struct.X87Stack, %struct.X87Stack* %311, i32 0, i32 0
  %313 = getelementptr inbounds [8 x %struct.anon.3], [8 x %struct.anon.3]* %312, i64 0, i64 7
  %ST7 = getelementptr inbounds %struct.anon.3, %struct.anon.3* %313, i32 0, i32 1
  %314 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 8
  %315 = getelementptr inbounds %struct.MMX, %struct.MMX* %314, i32 0, i32 0
  %316 = getelementptr inbounds [8 x %struct.anon.4], [8 x %struct.anon.4]* %315, i64 0, i64 0
  %317 = getelementptr inbounds %struct.anon.4, %struct.anon.4* %316, i32 0, i32 1
  %318 = bitcast %union.vec64_t* %317 to %struct.uint64v1_t*
  %319 = getelementptr inbounds %struct.uint64v1_t, %struct.uint64v1_t* %318, i32 0, i32 0
  %MM0 = getelementptr inbounds [1 x i64], [1 x i64]* %319, i64 0, i64 0
  %320 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 8
  %321 = getelementptr inbounds %struct.MMX, %struct.MMX* %320, i32 0, i32 0
  %322 = getelementptr inbounds [8 x %struct.anon.4], [8 x %struct.anon.4]* %321, i64 0, i64 1
  %323 = getelementptr inbounds %struct.anon.4, %struct.anon.4* %322, i32 0, i32 1
  %324 = bitcast %union.vec64_t* %323 to %struct.uint64v1_t*
  %325 = getelementptr inbounds %struct.uint64v1_t, %struct.uint64v1_t* %324, i32 0, i32 0
  %MM1 = getelementptr inbounds [1 x i64], [1 x i64]* %325, i64 0, i64 0
  %326 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 8
  %327 = getelementptr inbounds %struct.MMX, %struct.MMX* %326, i32 0, i32 0
  %328 = getelementptr inbounds [8 x %struct.anon.4], [8 x %struct.anon.4]* %327, i64 0, i64 2
  %329 = getelementptr inbounds %struct.anon.4, %struct.anon.4* %328, i32 0, i32 1
  %330 = bitcast %union.vec64_t* %329 to %struct.uint64v1_t*
  %331 = getelementptr inbounds %struct.uint64v1_t, %struct.uint64v1_t* %330, i32 0, i32 0
  %MM2 = getelementptr inbounds [1 x i64], [1 x i64]* %331, i64 0, i64 0
  %332 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 8
  %333 = getelementptr inbounds %struct.MMX, %struct.MMX* %332, i32 0, i32 0
  %334 = getelementptr inbounds [8 x %struct.anon.4], [8 x %struct.anon.4]* %333, i64 0, i64 3
  %335 = getelementptr inbounds %struct.anon.4, %struct.anon.4* %334, i32 0, i32 1
  %336 = bitcast %union.vec64_t* %335 to %struct.uint64v1_t*
  %337 = getelementptr inbounds %struct.uint64v1_t, %struct.uint64v1_t* %336, i32 0, i32 0
  %MM3 = getelementptr inbounds [1 x i64], [1 x i64]* %337, i64 0, i64 0
  %338 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 8
  %339 = getelementptr inbounds %struct.MMX, %struct.MMX* %338, i32 0, i32 0
  %340 = getelementptr inbounds [8 x %struct.anon.4], [8 x %struct.anon.4]* %339, i64 0, i64 4
  %341 = getelementptr inbounds %struct.anon.4, %struct.anon.4* %340, i32 0, i32 1
  %342 = bitcast %union.vec64_t* %341 to %struct.uint64v1_t*
  %343 = getelementptr inbounds %struct.uint64v1_t, %struct.uint64v1_t* %342, i32 0, i32 0
  %MM4 = getelementptr inbounds [1 x i64], [1 x i64]* %343, i64 0, i64 0
  %344 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 8
  %345 = getelementptr inbounds %struct.MMX, %struct.MMX* %344, i32 0, i32 0
  %346 = getelementptr inbounds [8 x %struct.anon.4], [8 x %struct.anon.4]* %345, i64 0, i64 5
  %347 = getelementptr inbounds %struct.anon.4, %struct.anon.4* %346, i32 0, i32 1
  %348 = bitcast %union.vec64_t* %347 to %struct.uint64v1_t*
  %349 = getelementptr inbounds %struct.uint64v1_t, %struct.uint64v1_t* %348, i32 0, i32 0
  %MM5 = getelementptr inbounds [1 x i64], [1 x i64]* %349, i64 0, i64 0
  %350 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 8
  %351 = getelementptr inbounds %struct.MMX, %struct.MMX* %350, i32 0, i32 0
  %352 = getelementptr inbounds [8 x %struct.anon.4], [8 x %struct.anon.4]* %351, i64 0, i64 6
  %353 = getelementptr inbounds %struct.anon.4, %struct.anon.4* %352, i32 0, i32 1
  %354 = bitcast %union.vec64_t* %353 to %struct.uint64v1_t*
  %355 = getelementptr inbounds %struct.uint64v1_t, %struct.uint64v1_t* %354, i32 0, i32 0
  %MM6 = getelementptr inbounds [1 x i64], [1 x i64]* %355, i64 0, i64 0
  %356 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 8
  %357 = getelementptr inbounds %struct.MMX, %struct.MMX* %356, i32 0, i32 0
  %358 = getelementptr inbounds [8 x %struct.anon.4], [8 x %struct.anon.4]* %357, i64 0, i64 7
  %359 = getelementptr inbounds %struct.anon.4, %struct.anon.4* %358, i32 0, i32 1
  %360 = bitcast %union.vec64_t* %359 to %struct.uint64v1_t*
  %361 = getelementptr inbounds %struct.uint64v1_t, %struct.uint64v1_t* %360, i32 0, i32 0
  %MM7 = getelementptr inbounds [1 x i64], [1 x i64]* %361, i64 0, i64 0
  %362 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 2
  %AF = getelementptr inbounds %struct.ArithFlags, %struct.ArithFlags* %362, i32 0, i32 5
  %363 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 2
  %CF = getelementptr inbounds %struct.ArithFlags, %struct.ArithFlags* %363, i32 0, i32 1
  %364 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 2
  %DF = getelementptr inbounds %struct.ArithFlags, %struct.ArithFlags* %364, i32 0, i32 11
  %365 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 2
  %OF = getelementptr inbounds %struct.ArithFlags, %struct.ArithFlags* %365, i32 0, i32 13
  %366 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 2
  %PF = getelementptr inbounds %struct.ArithFlags, %struct.ArithFlags* %366, i32 0, i32 3
  %367 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 2
  %SF = getelementptr inbounds %struct.ArithFlags, %struct.ArithFlags* %367, i32 0, i32 9
  %368 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 2
  %ZF = getelementptr inbounds %struct.ArithFlags, %struct.ArithFlags* %368, i32 0, i32 7
  store i64* @DR0, i64** %_DR0, align 8
  store i64* @DR1, i64** %_DR1, align 8
  store i64* @DR2, i64** %_DR2, align 8
  store i64* @DR3, i64** %_DR3, align 8
  store i64* @DR4, i64** %_DR4, align 8
  store i64* @DR5, i64** %_DR5, align 8
  store i64* @DR6, i64** %_DR6, align 8
  store i64* @DR7, i64** %_DR7, align 8
  store i64* getelementptr inbounds (%union.anon, %union.anon* @gCR0, i32 0, i32 0), i64** %CR0, align 8
  store i64* getelementptr inbounds (%union.anon, %union.anon* @gCR1, i32 0, i32 0), i64** %CR1, align 8
  store i64* getelementptr inbounds (%union.anon, %union.anon* @gCR2, i32 0, i32 0), i64** %CR2, align 8
  store i64* getelementptr inbounds (%union.anon, %union.anon* @gCR3, i32 0, i32 0), i64** %CR3, align 8
  store i64* getelementptr inbounds (%union.anon, %union.anon* @gCR4, i32 0, i32 0), i64** %CR4, align 8
  store i64* getelementptr inbounds (%union.anon, %union.anon* @gCR8, i32 0, i32 0), i64** %CR8, align 8
  ret %struct.Memory* %2
}

; Function Attrs: noduplicate noinline nounwind optnone
define void @__remill_intrinsics() {
  ret void
}

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare %struct.Memory* @__remill_barrier_load_store(%struct.Memory*) 

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare %struct.Memory* @__remill_atomic_begin(%struct.Memory*) 

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare %struct.Memory* @__remill_atomic_end(%struct.Memory*) 

declare %struct.Memory* @__remill_fetch_and_sub_8(%struct.Memory*, i64, i8* dereferenceable(1)) 

declare %struct.Memory* @__remill_fetch_and_sub_16(%struct.Memory*, i64, i16* dereferenceable(2)) 

declare %struct.Memory* @__remill_fetch_and_sub_32(%struct.Memory*, i64, i32* dereferenceable(4)) 

declare %struct.Memory* @__remill_fetch_and_sub_64(%struct.Memory*, i64, i64* dereferenceable(8)) 

declare %struct.Memory* @__remill_fetch_and_or_8(%struct.Memory*, i64, i8* dereferenceable(1)) 

declare %struct.Memory* @__remill_fetch_and_or_16(%struct.Memory*, i64, i16* dereferenceable(2)) 

declare %struct.Memory* @__remill_fetch_and_or_32(%struct.Memory*, i64, i32* dereferenceable(4)) 

declare %struct.Memory* @__remill_fetch_and_or_64(%struct.Memory*, i64, i64* dereferenceable(8)) 

declare %struct.Memory* @__remill_fetch_and_and_8(%struct.Memory*, i64, i8* dereferenceable(1)) 

declare %struct.Memory* @__remill_fetch_and_and_16(%struct.Memory*, i64, i16* dereferenceable(2)) 

declare %struct.Memory* @__remill_fetch_and_and_32(%struct.Memory*, i64, i32* dereferenceable(4)) 

declare %struct.Memory* @__remill_fetch_and_and_64(%struct.Memory*, i64, i64* dereferenceable(8)) 

declare %struct.Memory* @__remill_fetch_and_xor_8(%struct.Memory*, i64, i8* dereferenceable(1)) 

declare %struct.Memory* @__remill_fetch_and_xor_16(%struct.Memory*, i64, i16* dereferenceable(2)) 

declare %struct.Memory* @__remill_fetch_and_xor_32(%struct.Memory*, i64, i32* dereferenceable(4)) 

declare %struct.Memory* @__remill_fetch_and_xor_64(%struct.Memory*, i64, i64* dereferenceable(8)) 

; Function Attrs: noduplicate noinline nounwind optnone
declare %struct.Memory* @__remill_function_call(%struct.State* dereferenceable(3376), i64, %struct.Memory*) 

; Function Attrs: noduplicate noinline nounwind optnone
declare %struct.Memory* @__remill_function_return(%struct.State* dereferenceable(3376), i64, %struct.Memory*) 

; Function Attrs: noduplicate noinline nounwind optnone
declare %struct.Memory* @__remill_jump(%struct.State* dereferenceable(3376), i64, %struct.Memory*) 

; Function Attrs: noduplicate noinline nounwind optnone
declare %struct.Memory* @__remill_missing_block(%struct.State* dereferenceable(3376), i64, %struct.Memory*) 

; Function Attrs: noduplicate noinline nounwind optnone
declare %struct.Memory* @__remill_async_hyper_call(%struct.State* dereferenceable(3376), i64, %struct.Memory*) 

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare zeroext i16 @__remill_undefined_16() 

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare i32 @__remill_undefined_32() 

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare float @__remill_undefined_f32() 

; Function Attrs: nounwind readnone
declare void @llvm.dbg.declare(metadata, metadata, metadata) 

; Function Attrs: noinline
declare extern_weak x86_64_sysvcc i64 @_ITM_deregisterTMCloneTable(i64) 

; Function Attrs: noinline
declare extern_weak x86_64_sysvcc i64 @_Jv_RegisterClasses(i64) 

; Function Attrs: noinline
declare extern_weak x86_64_sysvcc i64 @__libc_start_main(i64, i64, i64, i64, i64, i64, i64, i64) 

; Function Attrs: noinline
declare extern_weak x86_64_sysvcc i64 @__gmon_start__() 

; Function Attrs: noinline
declare extern_weak x86_64_sysvcc i64 @__cxa_finalize(i64) 

; Function Attrs: noinline
declare extern_weak x86_64_sysvcc i64 @_ITM_registerTMCloneTable(i64, i64) 

; Function Attrs: noinline
define %struct.Memory* @sub_6e0___libc_csu_init(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias)  {
block_6e0:
  %BRANCH_TAKEN = alloca i8, align 1
  store i8 0, i8* %BRANCH_TAKEN, align 1
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 1
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %EAX = bitcast %union.anon* %8 to i32*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 3
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %EBX = bitcast %union.anon* %11 to i32*
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %13 = getelementptr inbounds %struct.GPR, %struct.GPR* %12, i32 0, i32 11
  %14 = getelementptr inbounds %struct.Reg, %struct.Reg* %13, i32 0, i32 0
  %EDI = bitcast %union.anon* %14 to i32*
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %16 = getelementptr inbounds %struct.GPR, %struct.GPR* %15, i32 0, i32 31
  %17 = getelementptr inbounds %struct.Reg, %struct.Reg* %16, i32 0, i32 0
  %R15D = bitcast %union.anon* %17 to i32*
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %19 = getelementptr inbounds %struct.GPR, %struct.GPR* %18, i32 0, i32 1
  %20 = getelementptr inbounds %struct.Reg, %struct.Reg* %19, i32 0, i32 0
  %RAX = bitcast %union.anon* %20 to i64*
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %22 = getelementptr inbounds %struct.GPR, %struct.GPR* %21, i32 0, i32 3
  %23 = getelementptr inbounds %struct.Reg, %struct.Reg* %22, i32 0, i32 0
  %RBX = bitcast %union.anon* %23 to i64*
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %25 = getelementptr inbounds %struct.GPR, %struct.GPR* %24, i32 0, i32 7
  %26 = getelementptr inbounds %struct.Reg, %struct.Reg* %25, i32 0, i32 0
  %RDX = bitcast %union.anon* %26 to i64*
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %28 = getelementptr inbounds %struct.GPR, %struct.GPR* %27, i32 0, i32 9
  %29 = getelementptr inbounds %struct.Reg, %struct.Reg* %28, i32 0, i32 0
  %RSI = bitcast %union.anon* %29 to i64*
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %31 = getelementptr inbounds %struct.GPR, %struct.GPR* %30, i32 0, i32 11
  %32 = getelementptr inbounds %struct.Reg, %struct.Reg* %31, i32 0, i32 0
  %RDI = bitcast %union.anon* %32 to i64*
  %33 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %34 = getelementptr inbounds %struct.GPR, %struct.GPR* %33, i32 0, i32 13
  %35 = getelementptr inbounds %struct.Reg, %struct.Reg* %34, i32 0, i32 0
  %RSP = bitcast %union.anon* %35 to i64*
  %36 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %37 = getelementptr inbounds %struct.GPR, %struct.GPR* %36, i32 0, i32 15
  %38 = getelementptr inbounds %struct.Reg, %struct.Reg* %37, i32 0, i32 0
  %RBP = bitcast %union.anon* %38 to i64*
  %39 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %40 = getelementptr inbounds %struct.GPR, %struct.GPR* %39, i32 0, i32 25
  %41 = getelementptr inbounds %struct.Reg, %struct.Reg* %40, i32 0, i32 0
  %R12 = bitcast %union.anon* %41 to i64*
  %42 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %43 = getelementptr inbounds %struct.GPR, %struct.GPR* %42, i32 0, i32 27
  %44 = getelementptr inbounds %struct.Reg, %struct.Reg* %43, i32 0, i32 0
  %R13 = bitcast %union.anon* %44 to i64*
  %45 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %46 = getelementptr inbounds %struct.GPR, %struct.GPR* %45, i32 0, i32 29
  %47 = getelementptr inbounds %struct.Reg, %struct.Reg* %46, i32 0, i32 0
  %R14 = bitcast %union.anon* %47 to i64*
  %48 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %49 = getelementptr inbounds %struct.GPR, %struct.GPR* %48, i32 0, i32 31
  %50 = getelementptr inbounds %struct.Reg, %struct.Reg* %49, i32 0, i32 0
  %R15 = bitcast %union.anon* %50 to i64*
  %51 = load i64, i64* %R15
  %52 = load i64, i64* %PC
  %53 = add i64 %52, 2
  store i64 %53, i64* %PC
  %54 = call %struct.Memory* @_ZN12_GLOBAL__N_1L4PUSHI2InImEEEP6MemoryS4_R5StateT_(%struct.Memory* %2, %struct.State* %0, i64 %51)
  %55 = load i64, i64* %R14
  %56 = load i64, i64* %PC
  %57 = add i64 %56, 2
  store i64 %57, i64* %PC
  %58 = call %struct.Memory* @_ZN12_GLOBAL__N_1L4PUSHI2InImEEEP6MemoryS4_R5StateT_(%struct.Memory* %54, %struct.State* %0, i64 %55)
  %59 = bitcast i32* %R15D to i64*
  %60 = load i32, i32* %EDI
  %61 = zext i32 %60 to i64
  %62 = load i64, i64* %PC
  %63 = add i64 %62, 3
  store i64 %63, i64* %PC
  %64 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3MOVI3RnWImE2RnIjEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* %58, %struct.State* %0, i64* %59, i64 %61)
  %65 = load i64, i64* %R13
  %66 = load i64, i64* %PC
  %67 = add i64 %66, 2
  store i64 %67, i64* %PC
  %68 = call %struct.Memory* @_ZN12_GLOBAL__N_1L4PUSHI2InImEEEP6MemoryS4_R5StateT_(%struct.Memory* %64, %struct.State* %0, i64 %65)
  %69 = load i64, i64* %R12
  %70 = load i64, i64* %PC
  %71 = add i64 %70, 2
  store i64 %71, i64* %PC
  %72 = call %struct.Memory* @_ZN12_GLOBAL__N_1L4PUSHI2InImEEEP6MemoryS4_R5StateT_(%struct.Memory* %68, %struct.State* %0, i64 %69)
  %73 = load i64, i64* %PC
  %74 = add i64 %73, 7
  store i64 %74, i64* %PC
  %75 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3LEAI3RnWImE2MnIhEmEEP6MemoryS6_R5StateT_T0_(%struct.Memory* %72, %struct.State* %0, i64* %R12, i64 ptrtoint (%seg_200de0__init_array_type* @seg_200de0__init_array to i64))
  %76 = load i64, i64* %RBP
  %77 = load i64, i64* %PC
  %78 = add i64 %77, 1
  store i64 %78, i64* %PC
  %79 = call %struct.Memory* @_ZN12_GLOBAL__N_1L4PUSHI2InImEEEP6MemoryS4_R5StateT_(%struct.Memory* %75, %struct.State* %0, i64 %76)
  %80 = load i64, i64* %PC
  %81 = add i64 %80, 7
  store i64 %81, i64* %PC
  %82 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3LEAI3RnWImE2MnIhEmEEP6MemoryS6_R5StateT_T0_(%struct.Memory* %79, %struct.State* %0, i64* %RBP, i64 add (i64 ptrtoint (%seg_200de0__init_array_type* @seg_200de0__init_array to i64), i64 8))
  %83 = load i64, i64* %RBX
  %84 = load i64, i64* %PC
  %85 = add i64 %84, 1
  store i64 %85, i64* %PC
  %86 = call %struct.Memory* @_ZN12_GLOBAL__N_1L4PUSHI2InImEEEP6MemoryS4_R5StateT_(%struct.Memory* %82, %struct.State* %0, i64 %83)
  %87 = load i64, i64* %RSI
  %88 = load i64, i64* %PC
  %89 = add i64 %88, 3
  store i64 %89, i64* %PC
  %90 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3MOVI3RnWImE2RnImEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* %86, %struct.State* %0, i64* %R14, i64 %87)
  %91 = load i64, i64* %RDX
  %92 = load i64, i64* %PC
  %93 = add i64 %92, 3
  store i64 %93, i64* %PC
  %94 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3MOVI3RnWImE2RnImEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* %90, %struct.State* %0, i64* %R13, i64 %91)
  %95 = load i64, i64* %RBP
  %96 = load i64, i64* %R12
  %97 = load i64, i64* %PC
  %98 = add i64 %97, 3
  store i64 %98, i64* %PC
  %99 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3SUBI3RnWImE2RnImES4_EEP6MemoryS6_R5StateT_T0_T1_(%struct.Memory* %94, %struct.State* %0, i64* %RBP, i64 %95, i64 %96)
  %100 = load i64, i64* %RSP
  %101 = load i64, i64* %PC
  %102 = add i64 %101, 4
  store i64 %102, i64* %PC
  %103 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3SUBI3RnWImE2RnImE2InImEEEP6MemoryS8_R5StateT_T0_T1_(%struct.Memory* %99, %struct.State* %0, i64* %RSP, i64 %100, i64 8)
  %104 = load i64, i64* %RBP
  %105 = load i64, i64* %PC
  %106 = add i64 %105, 4
  store i64 %106, i64* %PC
  %107 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3SARI3RnWImE2RnImE2InImEEEP6MemoryS8_R5StateT_T0_T1_(%struct.Memory* %103, %struct.State* %0, i64* %RBP, i64 %104, i64 3)
  %108 = load i64, i64* %PC
  %109 = sub i64 %108, 532
  %110 = load i64, i64* %PC
  %111 = add i64 %110, 5
  %112 = load i64, i64* %PC
  %113 = add i64 %112, 5
  store i64 %113, i64* %PC
  %114 = call %struct.Memory* @_ZN12_GLOBAL__N_1L4CALLI2InImEEEP6MemoryS4_R5StateT_S2_(%struct.Memory* %107, %struct.State* %0, i64 %109, i64 %111)
  %115 = load i64, i64* %PC
  %116 = call %struct.Memory* @sub_4f8__init_proc(%struct.State* %0, i64 %115, %struct.Memory* %114)
  %117 = load i64, i64* %RBP
  %118 = load i64, i64* %RBP
  %119 = load i64, i64* %PC
  %120 = add i64 %119, 3
  store i64 %120, i64* %PC
  %121 = call %struct.Memory* @_ZN12_GLOBAL__N_1L4TESTI2RnImES2_EEP6MemoryS4_R5StateT_T0_(%struct.Memory* %116, %struct.State* %0, i64 %117, i64 %118)
  %122 = load i64, i64* %PC
  %123 = add i64 %122, 34
  %124 = load i64, i64* %PC
  %125 = add i64 %124, 2
  %126 = load i64, i64* %PC
  %127 = add i64 %126, 2
  store i64 %127, i64* %PC
  %128 = call %struct.Memory* @_ZN12_GLOBAL__N_1L2JZEP6MemoryR5State3RnWIhE2InImES7_(%struct.Memory* %121, %struct.State* %0, i8* %BRANCH_TAKEN, i64 %123, i64 %125)
  %129 = load i8, i8* %BRANCH_TAKEN
  %130 = icmp eq i8 %129, 1
  br i1 %130, label %block_736, label %block_716

block_736:                                        ; preds = %block_720, %block_6e0
  %MEMORY.0 = phi %struct.Memory* [ %128, %block_6e0 ], [ %209, %block_720 ]
  %131 = load i64, i64* %RSP
  %132 = load i64, i64* %PC
  %133 = add i64 %132, 4
  store i64 %133, i64* %PC
  %134 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3ADDI3RnWImE2RnImE2InImEEEP6MemoryS8_R5StateT_T0_T1_(%struct.Memory* %MEMORY.0, %struct.State* %0, i64* %RSP, i64 %131, i64 8)
  %135 = load i64, i64* %PC
  %136 = add i64 %135, 1
  store i64 %136, i64* %PC
  %137 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3POPI3RnWImEEEP6MemoryS4_R5StateT_(%struct.Memory* %134, %struct.State* %0, i64* %RBX)
  %138 = load i64, i64* %PC
  %139 = add i64 %138, 1
  store i64 %139, i64* %PC
  %140 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3POPI3RnWImEEEP6MemoryS4_R5StateT_(%struct.Memory* %137, %struct.State* %0, i64* %RBP)
  %141 = load i64, i64* %PC
  %142 = add i64 %141, 2
  store i64 %142, i64* %PC
  %143 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3POPI3RnWImEEEP6MemoryS4_R5StateT_(%struct.Memory* %140, %struct.State* %0, i64* %R12)
  %144 = load i64, i64* %PC
  %145 = add i64 %144, 2
  store i64 %145, i64* %PC
  %146 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3POPI3RnWImEEEP6MemoryS4_R5StateT_(%struct.Memory* %143, %struct.State* %0, i64* %R13)
  %147 = load i64, i64* %PC
  %148 = add i64 %147, 2
  store i64 %148, i64* %PC
  %149 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3POPI3RnWImEEEP6MemoryS4_R5StateT_(%struct.Memory* %146, %struct.State* %0, i64* %R14)
  %150 = load i64, i64* %PC
  %151 = add i64 %150, 2
  store i64 %151, i64* %PC
  %152 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3POPI3RnWImEEEP6MemoryS4_R5StateT_(%struct.Memory* %149, %struct.State* %0, i64* %R15)
  %153 = load i64, i64* %PC
  %154 = add i64 %153, 1
  store i64 %154, i64* %PC
  %155 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3RETEP6MemoryR5State(%struct.Memory* %152, %struct.State* %0)
  ret %struct.Memory* %155

block_716:                                        ; preds = %block_6e0
  %156 = load i64, i64* %RBX
  %157 = load i32, i32* %EBX
  %158 = zext i32 %157 to i64
  %159 = load i64, i64* %PC
  %160 = add i64 %159, 2
  store i64 %160, i64* %PC
  %161 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3XORI3RnWImE2RnIjES4_EEP6MemoryS6_R5StateT_T0_T1_(%struct.Memory* %128, %struct.State* %0, i64* %RBX, i64 %156, i64 %158)
  %162 = load i64, i64* %RAX
  %163 = load i64, i64* %RAX
  %164 = add i64 %163, %162
  %165 = load i32, i32* %EAX
  %166 = zext i32 %165 to i64
  %167 = load i64, i64* %PC
  %168 = add i64 %167, 8
  store i64 %168, i64* %PC
  %169 = call %struct.Memory* @_ZN12_GLOBAL__N_1L8NOP_IMPLIJ2MnIjE2RnIjEEEEP6MemoryS6_R5StateDpT_(%struct.Memory* %161, %struct.State* %0, i64 %164, i64 %166)
  br label %block_720

block_720:                                        ; preds = %block_720, %block_716
  %MEMORY.1 = phi %struct.Memory* [ %169, %block_716 ], [ %209, %block_720 ]
  %170 = load i64, i64* %R13
  %171 = load i64, i64* %PC
  %172 = add i64 %171, 3
  store i64 %172, i64* %PC
  %173 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3MOVI3RnWImE2RnImEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* %MEMORY.1, %struct.State* %0, i64* %RDX, i64 %170)
  %174 = load i64, i64* %R14
  %175 = load i64, i64* %PC
  %176 = add i64 %175, 3
  store i64 %176, i64* %PC
  %177 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3MOVI3RnWImE2RnImEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* %173, %struct.State* %0, i64* %RSI, i64 %174)
  %178 = load i32, i32* %R15D
  %179 = zext i32 %178 to i64
  %180 = load i64, i64* %PC
  %181 = add i64 %180, 3
  store i64 %181, i64* %PC
  %182 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3MOVI3RnWImE2RnIjEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* %177, %struct.State* %0, i64* %RDI, i64 %179)
  %183 = load i64, i64* %R12
  %184 = load i64, i64* %RBX
  %185 = mul i64 %184, 8
  %186 = add i64 %185, %183
  %187 = load i64, i64* %PC
  %188 = add i64 %187, 4
  %189 = load i64, i64* %PC
  %190 = add i64 %189, 4
  store i64 %190, i64* %PC
  %191 = call %struct.Memory* @_ZN12_GLOBAL__N_1L4CALLI2MnImEEEP6MemoryS4_R5StateT_2InImE(%struct.Memory* %182, %struct.State* %0, i64 %186, i64 %188)
  %192 = load i64, i64* %PC
  %193 = call %struct.Memory* @__remill_function_call(%struct.State* %0, i64 %192, %struct.Memory* %191)
  %194 = load i64, i64* %RBX
  %195 = load i64, i64* %PC
  %196 = add i64 %195, 4
  store i64 %196, i64* %PC
  %197 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3ADDI3RnWImE2RnImE2InImEEEP6MemoryS8_R5StateT_T0_T1_(%struct.Memory* %193, %struct.State* %0, i64* %RBX, i64 %194, i64 1)
  %198 = load i64, i64* %RBP
  %199 = load i64, i64* %RBX
  %200 = load i64, i64* %PC
  %201 = add i64 %200, 3
  store i64 %201, i64* %PC
  %202 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3CMPI2RnImES2_EEP6MemoryS4_R5StateT_T0_(%struct.Memory* %197, %struct.State* %0, i64 %198, i64 %199)
  %203 = load i64, i64* %PC
  %204 = sub i64 %203, 20
  %205 = load i64, i64* %PC
  %206 = add i64 %205, 2
  %207 = load i64, i64* %PC
  %208 = add i64 %207, 2
  store i64 %208, i64* %PC
  %209 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3JNZEP6MemoryR5State3RnWIhE2InImES7_(%struct.Memory* %202, %struct.State* %0, i8* %BRANCH_TAKEN, i64 %204, i64 %206)
  %210 = load i8, i8* %BRANCH_TAKEN
  %211 = icmp eq i8 %210, 1
  br i1 %211, label %block_720, label %block_736
}

; Function Attrs: noinline
define %struct.Memory* @sub_67b_init_var_correspondence(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias)  {
block_67b:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 1
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %RAX = bitcast %union.anon* %8 to i64*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 3
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %RBX = bitcast %union.anon* %11 to i64*
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %13 = getelementptr inbounds %struct.GPR, %struct.GPR* %12, i32 0, i32 5
  %14 = getelementptr inbounds %struct.Reg, %struct.Reg* %13, i32 0, i32 0
  %RCX = bitcast %union.anon* %14 to i64*
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %16 = getelementptr inbounds %struct.GPR, %struct.GPR* %15, i32 0, i32 7
  %17 = getelementptr inbounds %struct.Reg, %struct.Reg* %16, i32 0, i32 0
  %RDX = bitcast %union.anon* %17 to i64*
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %19 = getelementptr inbounds %struct.GPR, %struct.GPR* %18, i32 0, i32 9
  %20 = getelementptr inbounds %struct.Reg, %struct.Reg* %19, i32 0, i32 0
  %RSI = bitcast %union.anon* %20 to i64*
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %22 = getelementptr inbounds %struct.GPR, %struct.GPR* %21, i32 0, i32 11
  %23 = getelementptr inbounds %struct.Reg, %struct.Reg* %22, i32 0, i32 0
  %RDI = bitcast %union.anon* %23 to i64*
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %25 = getelementptr inbounds %struct.GPR, %struct.GPR* %24, i32 0, i32 13
  %26 = getelementptr inbounds %struct.Reg, %struct.Reg* %25, i32 0, i32 0
  %RSP = bitcast %union.anon* %26 to i64*
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %28 = getelementptr inbounds %struct.GPR, %struct.GPR* %27, i32 0, i32 15
  %29 = getelementptr inbounds %struct.Reg, %struct.Reg* %28, i32 0, i32 0
  %RBP = bitcast %union.anon* %29 to i64*
  %30 = load i64, i64* %RBP
  %31 = load i64, i64* %PC
  %32 = add i64 %31, 1
  store i64 %32, i64* %PC
  %33 = call %struct.Memory* @_ZN12_GLOBAL__N_1L4PUSHI2InImEEEP6MemoryS4_R5StateT_(%struct.Memory* %2, %struct.State* %0, i64 %30)
  %34 = load i64, i64* %RSP
  %35 = load i64, i64* %PC
  %36 = add i64 %35, 3
  store i64 %36, i64* %PC
  %37 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3MOVI3RnWImE2RnImEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* %33, %struct.State* %0, i64* %RBP, i64 %34)
  %38 = load i64, i64* %PC
  %39 = add i64 %38, 7
  store i64 %39, i64* %PC
  %40 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3MOVI3RnWImE2InImEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* %37, %struct.State* %0, i64* %RAX, i64 10)
  %41 = load i64, i64* %PC
  %42 = add i64 %41, 7
  store i64 %42, i64* %PC
  %43 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3MOVI3RnWImE2InImEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* %40, %struct.State* %0, i64* %RBX, i64 20)
  %44 = load i64, i64* %PC
  %45 = add i64 %44, 7
  store i64 %45, i64* %PC
  %46 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3MOVI3RnWImE2InImEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* %43, %struct.State* %0, i64* %RCX, i64 30)
  %47 = load i64, i64* %PC
  %48 = add i64 %47, 7
  store i64 %48, i64* %PC
  %49 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3MOVI3RnWImE2InImEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* %46, %struct.State* %0, i64* %RDX, i64 40)
  %50 = load i64, i64* %PC
  %51 = add i64 %50, 7
  store i64 %51, i64* %PC
  %52 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3MOVI3RnWImE2InImEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* %49, %struct.State* %0, i64* %RSI, i64 50)
  %53 = load i64, i64* %PC
  %54 = add i64 %53, 5
  store i64 %54, i64* %PC
  %55 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3MOVI3RnWImE2InIjEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* %52, %struct.State* %0, i64* %RDI, i64 90)
  %56 = load i64, i64* %PC
  %57 = add i64 %56, 7
  store i64 %57, i64* %PC
  %58 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3MOVI3RnWImE2InImEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* %55, %struct.State* %0, i64* %RDI, i64 60)
  %59 = load i64, i64* %PC
  %60 = add i64 %59, 1
  store i64 %60, i64* %PC
  %61 = call %struct.Memory* @_ZN12_GLOBAL__N_1L8NOP_IMPLIJEEEP6MemoryS2_R5StateDpT_(%struct.Memory* %58, %struct.State* %0)
  %62 = load i64, i64* %PC
  %63 = add i64 %62, 1
  store i64 %63, i64* %PC
  %64 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3POPI3RnWImEEEP6MemoryS4_R5StateT_(%struct.Memory* %61, %struct.State* %0, i64* %RBP)
  %65 = load i64, i64* %PC
  %66 = add i64 %65, 1
  store i64 %66, i64* %PC
  %67 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3RETEP6MemoryR5State(%struct.Memory* %64, %struct.State* %0)
  ret %struct.Memory* %67
}

; Function Attrs: noinline
define %struct.Memory* @sub_660_get_sign(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias)  {
block_660:
  %BRANCH_TAKEN = alloca i8, align 1
  store i8 0, i8* %BRANCH_TAKEN, align 1
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 11
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %EDI = bitcast %union.anon* %8 to i32*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 1
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %RAX = bitcast %union.anon* %11 to i64*
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %13 = getelementptr inbounds %struct.GPR, %struct.GPR* %12, i32 0, i32 13
  %14 = getelementptr inbounds %struct.Reg, %struct.Reg* %13, i32 0, i32 0
  %RSP = bitcast %union.anon* %14 to i64*
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %16 = getelementptr inbounds %struct.GPR, %struct.GPR* %15, i32 0, i32 15
  %17 = getelementptr inbounds %struct.Reg, %struct.Reg* %16, i32 0, i32 0
  %RBP = bitcast %union.anon* %17 to i64*
  %18 = load i64, i64* %RBP
  %19 = load i64, i64* %PC
  %20 = add i64 %19, 1
  store i64 %20, i64* %PC
  %21 = call %struct.Memory* @_ZN12_GLOBAL__N_1L4PUSHI2InImEEEP6MemoryS4_R5StateT_(%struct.Memory* %2, %struct.State* %0, i64 %18)
  %22 = load i64, i64* %RSP
  %23 = load i64, i64* %PC
  %24 = add i64 %23, 3
  store i64 %24, i64* %PC
  %25 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3MOVI3RnWImE2RnImEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* %21, %struct.State* %0, i64* %RBP, i64 %22)
  %26 = load i64, i64* %RBP
  %27 = sub i64 %26, 4
  %28 = load i32, i32* %EDI
  %29 = zext i32 %28 to i64
  %30 = load i64, i64* %PC
  %31 = add i64 %30, 3
  store i64 %31, i64* %PC
  %32 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3MOVI3MnWIjE2RnIjEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* %25, %struct.State* %0, i64 %27, i64 %29)
  %33 = load i64, i64* %RBP
  %34 = sub i64 %33, 4
  %35 = load i64, i64* %PC
  %36 = add i64 %35, 4
  store i64 %36, i64* %PC
  %37 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3CMPI2MnIjE2InIjEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* %32, %struct.State* %0, i64 %34, i64 0)
  %38 = load i64, i64* %PC
  %39 = add i64 %38, 9
  %40 = load i64, i64* %PC
  %41 = add i64 %40, 2
  %42 = load i64, i64* %PC
  %43 = add i64 %42, 2
  store i64 %43, i64* %PC
  %44 = call %struct.Memory* @_ZN12_GLOBAL__N_1L4JNLEEP6MemoryR5State3RnWIhE2InImES7_(%struct.Memory* %37, %struct.State* %0, i8* %BRANCH_TAKEN, i64 %39, i64 %41)
  %45 = load i8, i8* %BRANCH_TAKEN
  %46 = icmp eq i8 %45, 1
  %47 = load i64, i64* %PC
  %48 = add i64 %47, 5
  store i64 %48, i64* %PC
  br i1 %46, label %block_674, label %block_66d

block_66d:                                        ; preds = %block_660
  %49 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3MOVI3RnWImE2InIjEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* %44, %struct.State* %0, i64* %RAX, i64 1)
  %50 = load i64, i64* %PC
  %51 = add i64 %50, 7
  %52 = load i64, i64* %PC
  %53 = add i64 %52, 2
  store i64 %53, i64* %PC
  %54 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3JMPI2InImEEEP6MemoryS4_R5StateT_(%struct.Memory* %49, %struct.State* %0, i64 %51)
  br label %block_679

block_674:                                        ; preds = %block_660
  %55 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3MOVI3RnWImE2InIjEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* %44, %struct.State* %0, i64* %RAX, i64 0)
  br label %block_679

block_679:                                        ; preds = %block_674, %block_66d
  %MEMORY.0 = phi %struct.Memory* [ %55, %block_674 ], [ %54, %block_66d ]
  %56 = load i64, i64* %PC
  %57 = add i64 %56, 1
  store i64 %57, i64* %PC
  %58 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3POPI3RnWImEEEP6MemoryS4_R5StateT_(%struct.Memory* %MEMORY.0, %struct.State* %0, i64* %RBP)
  %59 = load i64, i64* %PC
  %60 = add i64 %59, 1
  store i64 %60, i64* %PC
  %61 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3RETEP6MemoryR5State(%struct.Memory* %58, %struct.State* %0)
  ret %struct.Memory* %61
}

; Function Attrs: noinline
define %struct.Memory* @sub_4f8__init_proc(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias)  {
block_4f8:
  %BRANCH_TAKEN = alloca i8, align 1
  store i8 0, i8* %BRANCH_TAKEN, align 1
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 1
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %RAX = bitcast %union.anon* %8 to i64*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 13
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %RSP = bitcast %union.anon* %11 to i64*
  %12 = load i64, i64* %RSP
  %13 = load i64, i64* %PC
  %14 = add i64 %13, 4
  store i64 %14, i64* %PC
  %15 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3SUBI3RnWImE2RnImE2InImEEEP6MemoryS8_R5StateT_T0_T1_(%struct.Memory* %2, %struct.State* %0, i64* %RSP, i64 %12, i64 8)
  %16 = load i64, i64* %PC
  %17 = add i64 %16, 7
  store i64 %17, i64* %PC
  %18 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3MOVI3RnWImE2MnImEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* %15, %struct.State* %0, i64* %RAX, i64 add (i64 ptrtoint (%seg_200fb8__got_type* @seg_200fb8__got to i64), i64 40))
  %19 = load i64, i64* %RAX
  %20 = load i64, i64* %RAX
  %21 = load i64, i64* %PC
  %22 = add i64 %21, 3
  store i64 %22, i64* %PC
  %23 = call %struct.Memory* @_ZN12_GLOBAL__N_1L4TESTI2RnImES2_EEP6MemoryS4_R5StateT_T0_(%struct.Memory* %18, %struct.State* %0, i64 %19, i64 %20)
  %24 = load i64, i64* %PC
  %25 = add i64 %24, 4
  %26 = load i64, i64* %PC
  %27 = add i64 %26, 2
  %28 = load i64, i64* %PC
  %29 = add i64 %28, 2
  store i64 %29, i64* %PC
  %30 = call %struct.Memory* @_ZN12_GLOBAL__N_1L2JZEP6MemoryR5State3RnWIhE2InImES7_(%struct.Memory* %23, %struct.State* %0, i8* %BRANCH_TAKEN, i64 %25, i64 %27)
  %31 = load i8, i8* %BRANCH_TAKEN
  %32 = icmp eq i8 %31, 1
  br i1 %32, label %block_50a, label %block_508

block_50a:                                        ; preds = %block_508, %block_4f8
  %MEMORY.0 = phi %struct.Memory* [ %30, %block_4f8 ], [ %47, %block_508 ]
  %33 = load i64, i64* %RSP
  %34 = load i64, i64* %PC
  %35 = add i64 %34, 4
  store i64 %35, i64* %PC
  %36 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3ADDI3RnWImE2RnImE2InImEEEP6MemoryS8_R5StateT_T0_T1_(%struct.Memory* %MEMORY.0, %struct.State* %0, i64* %RSP, i64 %33, i64 8)
  %37 = load i64, i64* %PC
  %38 = add i64 %37, 1
  store i64 %38, i64* %PC
  %39 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3RETEP6MemoryR5State(%struct.Memory* %36, %struct.State* %0)
  ret %struct.Memory* %39

block_508:                                        ; preds = %block_4f8
  %40 = load i64, i64* %RAX
  %41 = load i64, i64* %PC
  %42 = add i64 %41, 2
  %43 = load i64, i64* %PC
  %44 = add i64 %43, 2
  store i64 %44, i64* %PC
  %45 = call %struct.Memory* @_ZN12_GLOBAL__N_1L4CALLI2RnImEEEP6MemoryS4_R5StateT_2InImE(%struct.Memory* %30, %struct.State* %0, i64 %40, i64 %42)
  %46 = load i64, i64* %PC
  %47 = call %struct.Memory* @__remill_function_call(%struct.State* %0, i64 %46, %struct.Memory* %45)
  br label %block_50a
}

; Function Attrs: noinline
define %struct.Memory* @sub_754__term_proc(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias)  {
block_754:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 13
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %RSP = bitcast %union.anon* %8 to i64*
  %9 = load i64, i64* %RSP
  %10 = load i64, i64* %PC
  %11 = add i64 %10, 4
  store i64 %11, i64* %PC
  %12 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3SUBI3RnWImE2RnImE2InImEEEP6MemoryS8_R5StateT_T0_T1_(%struct.Memory* %2, %struct.State* %0, i64* %RSP, i64 %9, i64 8)
  %13 = load i64, i64* %RSP
  %14 = load i64, i64* %PC
  %15 = add i64 %14, 4
  store i64 %15, i64* %PC
  %16 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3ADDI3RnWImE2RnImE2InImEEEP6MemoryS8_R5StateT_T0_T1_(%struct.Memory* %12, %struct.State* %0, i64* %RSP, i64 %13, i64 8)
  %17 = load i64, i64* %PC
  %18 = add i64 %17, 1
  store i64 %18, i64* %PC
  %19 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3RETEP6MemoryR5State(%struct.Memory* %16, %struct.State* %0)
  ret %struct.Memory* %19
}

; Function Attrs: noinline
define %struct.Memory* @sub_560_deregister_tm_clones(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias)  {
block_560:
  %BRANCH_TAKEN = alloca i8, align 1
  store i8 0, i8* %BRANCH_TAKEN, align 1
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 1
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %AX = bitcast %union.anon* %8 to i16*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 1
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %EAX = bitcast %union.anon* %11 to i32*
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %13 = getelementptr inbounds %struct.GPR, %struct.GPR* %12, i32 0, i32 1
  %14 = getelementptr inbounds %struct.Reg, %struct.Reg* %13, i32 0, i32 0
  %RAX = bitcast %union.anon* %14 to i64*
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %16 = getelementptr inbounds %struct.GPR, %struct.GPR* %15, i32 0, i32 11
  %17 = getelementptr inbounds %struct.Reg, %struct.Reg* %16, i32 0, i32 0
  %RDI = bitcast %union.anon* %17 to i64*
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %19 = getelementptr inbounds %struct.GPR, %struct.GPR* %18, i32 0, i32 13
  %20 = getelementptr inbounds %struct.Reg, %struct.Reg* %19, i32 0, i32 0
  %RSP = bitcast %union.anon* %20 to i64*
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %22 = getelementptr inbounds %struct.GPR, %struct.GPR* %21, i32 0, i32 15
  %23 = getelementptr inbounds %struct.Reg, %struct.Reg* %22, i32 0, i32 0
  %RBP = bitcast %union.anon* %23 to i64*
  %24 = load i64, i64* %PC
  %25 = add i64 %24, 7
  store i64 %25, i64* %PC
  %26 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3LEAI3RnWImE2MnIhEmEEP6MemoryS6_R5StateT_T0_(%struct.Memory* %2, %struct.State* %0, i64* %RDI, i64 ptrtoint (%__bss_start_type* @__bss_start to i64))
  %27 = load i64, i64* %PC
  %28 = add i64 %27, 7
  store i64 %28, i64* %PC
  %29 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3LEAI3RnWImE2MnIhEmEEP6MemoryS6_R5StateT_T0_(%struct.Memory* %26, %struct.State* %0, i64* %RAX, i64 add (i64 ptrtoint (%__bss_start_type* @__bss_start to i64), i64 7))
  %30 = load i64, i64* %RBP
  %31 = load i64, i64* %PC
  %32 = add i64 %31, 1
  store i64 %32, i64* %PC
  %33 = call %struct.Memory* @_ZN12_GLOBAL__N_1L4PUSHI2InImEEEP6MemoryS4_R5StateT_(%struct.Memory* %29, %struct.State* %0, i64 %30)
  %34 = load i64, i64* %RAX
  %35 = load i64, i64* %RDI
  %36 = load i64, i64* %PC
  %37 = add i64 %36, 3
  store i64 %37, i64* %PC
  %38 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3SUBI3RnWImE2RnImES4_EEP6MemoryS6_R5StateT_T0_T1_(%struct.Memory* %33, %struct.State* %0, i64* %RAX, i64 %34, i64 %35)
  %39 = load i64, i64* %RSP
  %40 = load i64, i64* %PC
  %41 = add i64 %40, 3
  store i64 %41, i64* %PC
  %42 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3MOVI3RnWImE2RnImEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* %38, %struct.State* %0, i64* %RBP, i64 %39)
  %43 = load i64, i64* %RAX
  %44 = load i64, i64* %PC
  %45 = add i64 %44, 4
  store i64 %45, i64* %PC
  %46 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3CMPI2RnImE2InImEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* %42, %struct.State* %0, i64 %43, i64 14)
  %47 = load i64, i64* %PC
  %48 = add i64 %47, 23
  %49 = load i64, i64* %PC
  %50 = add i64 %49, 2
  %51 = load i64, i64* %PC
  %52 = add i64 %51, 2
  store i64 %52, i64* %PC
  %53 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3JBEEP6MemoryR5State3RnWIhE2InImES7_(%struct.Memory* %46, %struct.State* %0, i8* %BRANCH_TAKEN, i64 %48, i64 %50)
  %54 = load i8, i8* %BRANCH_TAKEN
  %55 = icmp eq i8 %54, 1
  br i1 %55, label %block_590, label %block_57b

block_592:                                        ; preds = %block_587
  %56 = load i64, i64* %RAX
  %57 = load i32, i32* %EAX
  %58 = zext i32 %57 to i64
  %59 = load i64, i64* %PC
  %60 = add i64 %59, 4
  store i64 %60, i64* %PC
  %61 = call %struct.Memory* @_ZN12_GLOBAL__N_1L8NOP_IMPLIJ2MnIjE2RnIjEEEEP6MemoryS6_R5StateDpT_(%struct.Memory* %101, %struct.State* %0, i64 %56, i64 %58)
  %62 = load i64, i64* %RAX
  %63 = load i64, i64* %RAX
  %64 = add i64 %63, %62
  %65 = load i16, i16* %AX
  %66 = zext i16 %65 to i64
  %67 = load i64, i64* %PC
  %68 = add i64 %67, 10
  store i64 %68, i64* %PC
  %69 = call %struct.Memory* @_ZN12_GLOBAL__N_1L8NOP_IMPLIJ2MnItE2RnItEEEEP6MemoryS6_R5StateDpT_(%struct.Memory* %61, %struct.State* %0, i64 %64, i64 %66)
  %70 = load i64, i64* %PC
  %71 = tail call %struct.Memory* @sub_5a0_register_tm_clones(%struct.State* %0, i64 %70, %struct.Memory* %69)
  ret %struct.Memory* %71

block_57b:                                        ; preds = %block_560
  %72 = load i64, i64* %PC
  %73 = add i64 %72, 7
  store i64 %73, i64* %PC
  %74 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3MOVI3RnWImE2MnImEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* %53, %struct.State* %0, i64* %RAX, i64 add (i64 ptrtoint (%seg_200fb8__got_type* @seg_200fb8__got to i64), i64 24))
  %75 = load i64, i64* %RAX
  %76 = load i64, i64* %RAX
  %77 = load i64, i64* %PC
  %78 = add i64 %77, 3
  store i64 %78, i64* %PC
  %79 = call %struct.Memory* @_ZN12_GLOBAL__N_1L4TESTI2RnImES2_EEP6MemoryS4_R5StateT_T0_(%struct.Memory* %74, %struct.State* %0, i64 %75, i64 %76)
  %80 = load i64, i64* %PC
  %81 = add i64 %80, 11
  %82 = load i64, i64* %PC
  %83 = add i64 %82, 2
  %84 = load i64, i64* %PC
  %85 = add i64 %84, 2
  store i64 %85, i64* %PC
  %86 = call %struct.Memory* @_ZN12_GLOBAL__N_1L2JZEP6MemoryR5State3RnWIhE2InImES7_(%struct.Memory* %79, %struct.State* %0, i8* %BRANCH_TAKEN, i64 %81, i64 %83)
  %87 = load i8, i8* %BRANCH_TAKEN
  %88 = icmp eq i8 %87, 1
  br i1 %88, label %block_590, label %block_587

block_590:                                        ; preds = %block_58a, %block_57b, %block_560
  %MEMORY.0 = phi %struct.Memory* [ %53, %block_560 ], [ %86, %block_57b ], [ %110, %block_58a ]
  %89 = load i64, i64* %PC
  %90 = add i64 %89, 1
  store i64 %90, i64* %PC
  %91 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3POPI3RnWImEEEP6MemoryS4_R5StateT_(%struct.Memory* %MEMORY.0, %struct.State* %0, i64* %RBP)
  %92 = load i64, i64* %PC
  %93 = add i64 %92, 1
  store i64 %93, i64* %PC
  %94 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3RETEP6MemoryR5State(%struct.Memory* %91, %struct.State* %0)
  ret %struct.Memory* %94

block_587:                                        ; preds = %block_57b
  %95 = load i64, i64* %PC
  %96 = add i64 %95, 1
  store i64 %96, i64* %PC
  %97 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3POPI3RnWImEEEP6MemoryS4_R5StateT_(%struct.Memory* %86, %struct.State* %0, i64* %RBP)
  %98 = load i64, i64* %RAX
  %99 = load i64, i64* %PC
  %100 = add i64 %99, 2
  store i64 %100, i64* %PC
  %101 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3JMPI2RnImEEEP6MemoryS4_R5StateT_(%struct.Memory* %97, %struct.State* %0, i64 %98)
  %102 = load i64, i64* %PC
  switch i64 %102, label %111 [
    i64 1426, label %block_592
    i64 1418, label %block_58a
  ]

block_58a:                                        ; preds = %block_587
  %103 = load i64, i64* %RAX
  %104 = load i64, i64* %RAX
  %105 = add i64 %104, %103
  %106 = load i16, i16* %AX
  %107 = zext i16 %106 to i64
  %108 = load i64, i64* %PC
  %109 = add i64 %108, 6
  store i64 %109, i64* %PC
  %110 = call %struct.Memory* @_ZN12_GLOBAL__N_1L8NOP_IMPLIJ2MnItE2RnItEEEEP6MemoryS6_R5StateDpT_(%struct.Memory* %101, %struct.State* %0, i64 %105, i64 %107)
  br label %block_590

; <label>:111:                                    ; preds = %block_587
  %112 = load i64, i64* %PC
  %113 = tail call %struct.Memory* @__remill_jump(%struct.State* %0, i64 %112, %struct.Memory* %101)
  ret %struct.Memory* %113
}

; Function Attrs: noinline
define %struct.Memory* @sub_5f0___do_global_dtors_aux(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias)  {
block_5f0:
  %BRANCH_TAKEN = alloca i8, align 1
  store i8 0, i8* %BRANCH_TAKEN, align 1
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 11
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %RDI = bitcast %union.anon* %8 to i64*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 13
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %RSP = bitcast %union.anon* %11 to i64*
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %13 = getelementptr inbounds %struct.GPR, %struct.GPR* %12, i32 0, i32 15
  %14 = getelementptr inbounds %struct.Reg, %struct.Reg* %13, i32 0, i32 0
  %RBP = bitcast %union.anon* %14 to i64*
  %15 = load i64, i64* %PC
  %16 = add i64 %15, 7
  store i64 %16, i64* %PC
  %17 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3CMPI2MnIhE2InIhEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* %2, %struct.State* %0, i64 ptrtoint (%__bss_start_type* @__bss_start to i64), i64 0)
  %18 = load i64, i64* %PC
  %19 = add i64 %18, 41
  %20 = load i64, i64* %PC
  %21 = add i64 %20, 2
  %22 = load i64, i64* %PC
  %23 = add i64 %22, 2
  store i64 %23, i64* %PC
  %24 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3JNZEP6MemoryR5State3RnWIhE2InImES7_(%struct.Memory* %17, %struct.State* %0, i8* %BRANCH_TAKEN, i64 %19, i64 %21)
  %25 = load i8, i8* %BRANCH_TAKEN
  %26 = icmp eq i8 %25, 1
  br i1 %26, label %block_620, label %block_5f9

block_613:                                        ; preds = %block_607, %block_5f9
  %MEMORY.0 = phi %struct.Memory* [ %59, %block_5f9 ], [ %73, %block_607 ]
  %27 = load i64, i64* %PC
  %28 = sub i64 %27, 179
  %29 = load i64, i64* %PC
  %30 = add i64 %29, 5
  %31 = load i64, i64* %PC
  %32 = add i64 %31, 5
  store i64 %32, i64* %PC
  %33 = call %struct.Memory* @_ZN12_GLOBAL__N_1L4CALLI2InImEEEP6MemoryS4_R5StateT_S2_(%struct.Memory* %MEMORY.0, %struct.State* %0, i64 %28, i64 %30)
  %34 = load i64, i64* %PC
  %35 = call %struct.Memory* @sub_560_deregister_tm_clones(%struct.State* %0, i64 %34, %struct.Memory* %33)
  %36 = load i64, i64* %PC
  %37 = add i64 %36, 1
  store i64 %37, i64* %PC
  %38 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3POPI3RnWImEEEP6MemoryS4_R5StateT_(%struct.Memory* %35, %struct.State* %0, i64* %RBP)
  %39 = load i64, i64* %PC
  %40 = add i64 %39, 7
  store i64 %40, i64* %PC
  %41 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3MOVI3MnWIhE2InIhEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* %38, %struct.State* %0, i64 ptrtoint (%__bss_start_type* @__bss_start to i64), i64 1)
  br label %block_620

block_5f9:                                        ; preds = %block_5f0
  %42 = load i64, i64* %PC
  %43 = add i64 %42, 8
  store i64 %43, i64* %PC
  %44 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3CMPI2MnImE2InImEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* %24, %struct.State* %0, i64 add (i64 ptrtoint (%seg_200fb8__got_type* @seg_200fb8__got to i64), i64 64), i64 0)
  %45 = load i64, i64* %RBP
  %46 = load i64, i64* %PC
  %47 = add i64 %46, 1
  store i64 %47, i64* %PC
  %48 = call %struct.Memory* @_ZN12_GLOBAL__N_1L4PUSHI2InImEEEP6MemoryS4_R5StateT_(%struct.Memory* %44, %struct.State* %0, i64 %45)
  %49 = load i64, i64* %RSP
  %50 = load i64, i64* %PC
  %51 = add i64 %50, 3
  store i64 %51, i64* %PC
  %52 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3MOVI3RnWImE2RnImEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* %48, %struct.State* %0, i64* %RBP, i64 %49)
  %53 = load i64, i64* %PC
  %54 = add i64 %53, 14
  %55 = load i64, i64* %PC
  %56 = add i64 %55, 2
  %57 = load i64, i64* %PC
  %58 = add i64 %57, 2
  store i64 %58, i64* %PC
  %59 = call %struct.Memory* @_ZN12_GLOBAL__N_1L2JZEP6MemoryR5State3RnWIhE2InImES7_(%struct.Memory* %52, %struct.State* %0, i8* %BRANCH_TAKEN, i64 %54, i64 %56)
  %60 = load i8, i8* %BRANCH_TAKEN
  %61 = icmp eq i8 %60, 1
  br i1 %61, label %block_613, label %block_607

block_607:                                        ; preds = %block_5f9
  %62 = load i64, i64* %PC
  %63 = add i64 %62, 7
  store i64 %63, i64* %PC
  %64 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3MOVI3RnWImE2MnImEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* %59, %struct.State* %0, i64* %RDI, i64 add (i64 ptrtoint (%seg_201000__data_type* @seg_201000__data to i64), i64 8))
  %65 = load i64, i64* %PC
  %66 = sub i64 %65, 238
  %67 = load i64, i64* %PC
  %68 = add i64 %67, 5
  %69 = load i64, i64* %PC
  %70 = add i64 %69, 5
  store i64 %70, i64* %PC
  %71 = call %struct.Memory* @_ZN12_GLOBAL__N_1L4CALLI2InImEEEP6MemoryS4_R5StateT_S2_(%struct.Memory* %64, %struct.State* %0, i64 %66, i64 %68)
  %72 = load i64, i64* %PC
  %73 = call %struct.Memory* @sub_520___cxa_finalize(%struct.State* %0, i64 %72, %struct.Memory* %71)
  br label %block_613

block_620:                                        ; preds = %block_613, %block_5f0
  %MEMORY.1 = phi %struct.Memory* [ %24, %block_5f0 ], [ %41, %block_613 ]
  %74 = load i64, i64* %PC
  %75 = add i64 %74, 2
  store i64 %75, i64* %PC
  %76 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3RETEP6MemoryR5State(%struct.Memory* %MEMORY.1, %struct.State* %0)
  ret %struct.Memory* %76
}

; Function Attrs: noinline
define %struct.Memory* @sub_6b1_main(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias)  {
block_6b1:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 1
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %RAX = bitcast %union.anon* %8 to i64*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 3
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %RBX = bitcast %union.anon* %11 to i64*
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %13 = getelementptr inbounds %struct.GPR, %struct.GPR* %12, i32 0, i32 5
  %14 = getelementptr inbounds %struct.Reg, %struct.Reg* %13, i32 0, i32 0
  %RCX = bitcast %union.anon* %14 to i64*
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %16 = getelementptr inbounds %struct.GPR, %struct.GPR* %15, i32 0, i32 7
  %17 = getelementptr inbounds %struct.Reg, %struct.Reg* %16, i32 0, i32 0
  %RDX = bitcast %union.anon* %17 to i64*
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %19 = getelementptr inbounds %struct.GPR, %struct.GPR* %18, i32 0, i32 9
  %20 = getelementptr inbounds %struct.Reg, %struct.Reg* %19, i32 0, i32 0
  %RSI = bitcast %union.anon* %20 to i64*
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %22 = getelementptr inbounds %struct.GPR, %struct.GPR* %21, i32 0, i32 11
  %23 = getelementptr inbounds %struct.Reg, %struct.Reg* %22, i32 0, i32 0
  %RDI = bitcast %union.anon* %23 to i64*
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %25 = getelementptr inbounds %struct.GPR, %struct.GPR* %24, i32 0, i32 13
  %26 = getelementptr inbounds %struct.Reg, %struct.Reg* %25, i32 0, i32 0
  %RSP = bitcast %union.anon* %26 to i64*
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %28 = getelementptr inbounds %struct.GPR, %struct.GPR* %27, i32 0, i32 15
  %29 = getelementptr inbounds %struct.Reg, %struct.Reg* %28, i32 0, i32 0
  %RBP = bitcast %union.anon* %29 to i64*
  %30 = load i64, i64* %RBP
  %31 = load i64, i64* %PC
  %32 = add i64 %31, 1
  store i64 %32, i64* %PC
  %33 = call %struct.Memory* @_ZN12_GLOBAL__N_1L4PUSHI2InImEEEP6MemoryS4_R5StateT_(%struct.Memory* %2, %struct.State* %0, i64 %30)
  %34 = load i64, i64* %RSP
  %35 = load i64, i64* %PC
  %36 = add i64 %35, 3
  store i64 %36, i64* %PC
  %37 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3MOVI3RnWImE2RnImEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* %33, %struct.State* %0, i64* %RBP, i64 %34)
  %38 = load i64, i64* %RAX
  %39 = load i64, i64* %PC
  %40 = add i64 %39, 1
  store i64 %40, i64* %PC
  %41 = call %struct.Memory* @_ZN12_GLOBAL__N_1L4PUSHI2InImEEEP6MemoryS4_R5StateT_(%struct.Memory* %37, %struct.State* %0, i64 %38)
  %42 = load i64, i64* %RBX
  %43 = load i64, i64* %PC
  %44 = add i64 %43, 1
  store i64 %44, i64* %PC
  %45 = call %struct.Memory* @_ZN12_GLOBAL__N_1L4PUSHI2InImEEEP6MemoryS4_R5StateT_(%struct.Memory* %41, %struct.State* %0, i64 %42)
  %46 = load i64, i64* %RCX
  %47 = load i64, i64* %PC
  %48 = add i64 %47, 1
  store i64 %48, i64* %PC
  %49 = call %struct.Memory* @_ZN12_GLOBAL__N_1L4PUSHI2InImEEEP6MemoryS4_R5StateT_(%struct.Memory* %45, %struct.State* %0, i64 %46)
  %50 = load i64, i64* %RDX
  %51 = load i64, i64* %PC
  %52 = add i64 %51, 1
  store i64 %52, i64* %PC
  %53 = call %struct.Memory* @_ZN12_GLOBAL__N_1L4PUSHI2InImEEEP6MemoryS4_R5StateT_(%struct.Memory* %49, %struct.State* %0, i64 %50)
  %54 = load i64, i64* %RSI
  %55 = load i64, i64* %PC
  %56 = add i64 %55, 1
  store i64 %56, i64* %PC
  %57 = call %struct.Memory* @_ZN12_GLOBAL__N_1L4PUSHI2InImEEEP6MemoryS4_R5StateT_(%struct.Memory* %53, %struct.State* %0, i64 %54)
  %58 = load i64, i64* %RDI
  %59 = load i64, i64* %PC
  %60 = add i64 %59, 1
  store i64 %60, i64* %PC
  %61 = call %struct.Memory* @_ZN12_GLOBAL__N_1L4PUSHI2InImEEEP6MemoryS4_R5StateT_(%struct.Memory* %57, %struct.State* %0, i64 %58)
  %62 = load i64, i64* %PC
  %63 = add i64 %62, 5
  store i64 %63, i64* %PC
  %64 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3MOVI3RnWImE2InIjEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* %61, %struct.State* %0, i64* %RAX, i64 0)
  %65 = load i64, i64* %PC
  %66 = sub i64 %65, 69
  %67 = load i64, i64* %PC
  %68 = add i64 %67, 5
  %69 = load i64, i64* %PC
  %70 = add i64 %69, 5
  store i64 %70, i64* %PC
  %71 = call %struct.Memory* @_ZN12_GLOBAL__N_1L4CALLI2InImEEEP6MemoryS4_R5StateT_S2_(%struct.Memory* %64, %struct.State* %0, i64 %66, i64 %68)
  %72 = load i64, i64* %PC
  %73 = call %struct.Memory* @sub_67b_init_var_correspondence(%struct.State* %0, i64 %72, %struct.Memory* %71)
  %74 = load i64, i64* %PC
  %75 = add i64 %74, 1
  store i64 %75, i64* %PC
  %76 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3POPI3RnWImEEEP6MemoryS4_R5StateT_(%struct.Memory* %73, %struct.State* %0, i64* %RAX)
  %77 = load i64, i64* %PC
  %78 = add i64 %77, 1
  store i64 %78, i64* %PC
  %79 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3POPI3RnWImEEEP6MemoryS4_R5StateT_(%struct.Memory* %76, %struct.State* %0, i64* %RBX)
  %80 = load i64, i64* %PC
  %81 = add i64 %80, 1
  store i64 %81, i64* %PC
  %82 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3POPI3RnWImEEEP6MemoryS4_R5StateT_(%struct.Memory* %79, %struct.State* %0, i64* %RCX)
  %83 = load i64, i64* %PC
  %84 = add i64 %83, 1
  store i64 %84, i64* %PC
  %85 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3POPI3RnWImEEEP6MemoryS4_R5StateT_(%struct.Memory* %82, %struct.State* %0, i64* %RDX)
  %86 = load i64, i64* %PC
  %87 = add i64 %86, 1
  store i64 %87, i64* %PC
  %88 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3POPI3RnWImEEEP6MemoryS4_R5StateT_(%struct.Memory* %85, %struct.State* %0, i64* %RSI)
  %89 = load i64, i64* %PC
  %90 = add i64 %89, 1
  store i64 %90, i64* %PC
  %91 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3POPI3RnWImEEEP6MemoryS4_R5StateT_(%struct.Memory* %88, %struct.State* %0, i64* %RDI)
  %92 = load i64, i64* %PC
  %93 = add i64 %92, 5
  store i64 %93, i64* %PC
  %94 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3MOVI3RnWImE2InIjEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* %91, %struct.State* %0, i64* %RDI, i64 10)
  %95 = load i64, i64* %PC
  %96 = sub i64 %95, 112
  %97 = load i64, i64* %PC
  %98 = add i64 %97, 5
  %99 = load i64, i64* %PC
  %100 = add i64 %99, 5
  store i64 %100, i64* %PC
  %101 = call %struct.Memory* @_ZN12_GLOBAL__N_1L4CALLI2InImEEEP6MemoryS4_R5StateT_S2_(%struct.Memory* %94, %struct.State* %0, i64 %96, i64 %98)
  %102 = load i64, i64* %PC
  %103 = call %struct.Memory* @sub_660_get_sign(%struct.State* %0, i64 %102, %struct.Memory* %101)
  %104 = load i64, i64* %PC
  %105 = add i64 %104, 1
  store i64 %105, i64* %PC
  %106 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3POPI3RnWImEEEP6MemoryS4_R5StateT_(%struct.Memory* %103, %struct.State* %0, i64* %RBP)
  %107 = load i64, i64* %PC
  %108 = add i64 %107, 1
  store i64 %108, i64* %PC
  %109 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3RETEP6MemoryR5State(%struct.Memory* %106, %struct.State* %0)
  ret %struct.Memory* %109
}

; Function Attrs: noinline
define %struct.Memory* @sub_750___libc_csu_fini(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias)  {
block_750:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = load i64, i64* %PC
  %7 = add i64 %6, 2
  store i64 %7, i64* %PC
  %8 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3RETEP6MemoryR5State(%struct.Memory* %2, %struct.State* %0)
  ret %struct.Memory* %8
}

; Function Attrs: noinline
define %struct.Memory* @sub_5a0_register_tm_clones(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias)  {
block_5a0:
  %BRANCH_TAKEN = alloca i8, align 1
  store i8 0, i8* %BRANCH_TAKEN, align 1
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 1
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %AX = bitcast %union.anon* %8 to i16*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 1
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %EAX = bitcast %union.anon* %11 to i32*
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %13 = getelementptr inbounds %struct.GPR, %struct.GPR* %12, i32 0, i32 1
  %14 = getelementptr inbounds %struct.Reg, %struct.Reg* %13, i32 0, i32 0
  %RAX = bitcast %union.anon* %14 to i64*
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %16 = getelementptr inbounds %struct.GPR, %struct.GPR* %15, i32 0, i32 9
  %17 = getelementptr inbounds %struct.Reg, %struct.Reg* %16, i32 0, i32 0
  %RSI = bitcast %union.anon* %17 to i64*
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %19 = getelementptr inbounds %struct.GPR, %struct.GPR* %18, i32 0, i32 11
  %20 = getelementptr inbounds %struct.Reg, %struct.Reg* %19, i32 0, i32 0
  %RDI = bitcast %union.anon* %20 to i64*
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %22 = getelementptr inbounds %struct.GPR, %struct.GPR* %21, i32 0, i32 13
  %23 = getelementptr inbounds %struct.Reg, %struct.Reg* %22, i32 0, i32 0
  %RSP = bitcast %union.anon* %23 to i64*
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %25 = getelementptr inbounds %struct.GPR, %struct.GPR* %24, i32 0, i32 15
  %26 = getelementptr inbounds %struct.Reg, %struct.Reg* %25, i32 0, i32 0
  %RBP = bitcast %union.anon* %26 to i64*
  %27 = load i64, i64* %PC
  %28 = add i64 %27, 7
  store i64 %28, i64* %PC
  %29 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3LEAI3RnWImE2MnIhEmEEP6MemoryS6_R5StateT_T0_(%struct.Memory* %2, %struct.State* %0, i64* %RDI, i64 ptrtoint (%__bss_start_type* @__bss_start to i64))
  %30 = load i64, i64* %PC
  %31 = add i64 %30, 7
  store i64 %31, i64* %PC
  %32 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3LEAI3RnWImE2MnIhEmEEP6MemoryS6_R5StateT_T0_(%struct.Memory* %29, %struct.State* %0, i64* %RSI, i64 ptrtoint (%__bss_start_type* @__bss_start to i64))
  %33 = load i64, i64* %RBP
  %34 = load i64, i64* %PC
  %35 = add i64 %34, 1
  store i64 %35, i64* %PC
  %36 = call %struct.Memory* @_ZN12_GLOBAL__N_1L4PUSHI2InImEEEP6MemoryS4_R5StateT_(%struct.Memory* %32, %struct.State* %0, i64 %33)
  %37 = load i64, i64* %RSI
  %38 = load i64, i64* %RDI
  %39 = load i64, i64* %PC
  %40 = add i64 %39, 3
  store i64 %40, i64* %PC
  %41 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3SUBI3RnWImE2RnImES4_EEP6MemoryS6_R5StateT_T0_T1_(%struct.Memory* %36, %struct.State* %0, i64* %RSI, i64 %37, i64 %38)
  %42 = load i64, i64* %RSP
  %43 = load i64, i64* %PC
  %44 = add i64 %43, 3
  store i64 %44, i64* %PC
  %45 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3MOVI3RnWImE2RnImEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* %41, %struct.State* %0, i64* %RBP, i64 %42)
  %46 = load i64, i64* %RSI
  %47 = load i64, i64* %PC
  %48 = add i64 %47, 4
  store i64 %48, i64* %PC
  %49 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3SARI3RnWImE2RnImE2InImEEEP6MemoryS8_R5StateT_T0_T1_(%struct.Memory* %45, %struct.State* %0, i64* %RSI, i64 %46, i64 3)
  %50 = load i64, i64* %RSI
  %51 = load i64, i64* %PC
  %52 = add i64 %51, 3
  store i64 %52, i64* %PC
  %53 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3MOVI3RnWImE2RnImEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* %49, %struct.State* %0, i64* %RAX, i64 %50)
  %54 = load i64, i64* %RAX
  %55 = load i64, i64* %PC
  %56 = add i64 %55, 4
  store i64 %56, i64* %PC
  %57 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3SHRI3RnWImE2RnImE2InImEEEP6MemoryS8_R5StateT_T0_T1_(%struct.Memory* %53, %struct.State* %0, i64* %RAX, i64 %54, i64 63)
  %58 = load i64, i64* %RSI
  %59 = load i64, i64* %RAX
  %60 = load i64, i64* %PC
  %61 = add i64 %60, 3
  store i64 %61, i64* %PC
  %62 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3ADDI3RnWImE2RnImES4_EEP6MemoryS6_R5StateT_T0_T1_(%struct.Memory* %57, %struct.State* %0, i64* %RSI, i64 %58, i64 %59)
  %63 = load i64, i64* %RSI
  %64 = load i64, i64* %PC
  %65 = add i64 %64, 3
  store i64 %65, i64* %PC
  %66 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3SARI3RnWImE2RnImE2InImEEEP6MemoryS8_R5StateT_T0_T1_(%struct.Memory* %62, %struct.State* %0, i64* %RSI, i64 %63, i64 1)
  %67 = load i64, i64* %PC
  %68 = add i64 %67, 26
  %69 = load i64, i64* %PC
  %70 = add i64 %69, 2
  %71 = load i64, i64* %PC
  %72 = add i64 %71, 2
  store i64 %72, i64* %PC
  %73 = call %struct.Memory* @_ZN12_GLOBAL__N_1L2JZEP6MemoryR5State3RnWIhE2InImES7_(%struct.Memory* %66, %struct.State* %0, i8* %BRANCH_TAKEN, i64 %68, i64 %70)
  %74 = load i8, i8* %BRANCH_TAKEN
  %75 = icmp eq i8 %74, 1
  br i1 %75, label %block_5e0, label %block_5c8

block_5d7:                                        ; preds = %block_5d4
  %76 = load i64, i64* %RAX
  %77 = load i64, i64* %RAX
  %78 = add i64 %77, %76
  %79 = load i16, i16* %AX
  %80 = zext i16 %79 to i64
  %81 = load i64, i64* %PC
  %82 = add i64 %81, 9
  store i64 %82, i64* %PC
  %83 = call %struct.Memory* @_ZN12_GLOBAL__N_1L8NOP_IMPLIJ2MnItE2RnItEEEEP6MemoryS6_R5StateDpT_(%struct.Memory* %107, %struct.State* %0, i64 %78, i64 %80)
  br label %block_5e0

block_5c8:                                        ; preds = %block_5a0
  %84 = load i64, i64* %PC
  %85 = add i64 %84, 7
  store i64 %85, i64* %PC
  %86 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3MOVI3RnWImE2MnImEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* %73, %struct.State* %0, i64* %RAX, i64 add (i64 ptrtoint (%seg_200fb8__got_type* @seg_200fb8__got to i64), i64 56))
  %87 = load i64, i64* %RAX
  %88 = load i64, i64* %RAX
  %89 = load i64, i64* %PC
  %90 = add i64 %89, 3
  store i64 %90, i64* %PC
  %91 = call %struct.Memory* @_ZN12_GLOBAL__N_1L4TESTI2RnImES2_EEP6MemoryS4_R5StateT_T0_(%struct.Memory* %86, %struct.State* %0, i64 %87, i64 %88)
  %92 = load i64, i64* %PC
  %93 = add i64 %92, 14
  %94 = load i64, i64* %PC
  %95 = add i64 %94, 2
  %96 = load i64, i64* %PC
  %97 = add i64 %96, 2
  store i64 %97, i64* %PC
  %98 = call %struct.Memory* @_ZN12_GLOBAL__N_1L2JZEP6MemoryR5State3RnWIhE2InImES7_(%struct.Memory* %91, %struct.State* %0, i8* %BRANCH_TAKEN, i64 %93, i64 %95)
  %99 = load i8, i8* %BRANCH_TAKEN
  %100 = icmp eq i8 %99, 1
  br i1 %100, label %block_5e0, label %block_5d4

block_5d4:                                        ; preds = %block_5c8
  %101 = load i64, i64* %PC
  %102 = add i64 %101, 1
  store i64 %102, i64* %PC
  %103 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3POPI3RnWImEEEP6MemoryS4_R5StateT_(%struct.Memory* %98, %struct.State* %0, i64* %RBP)
  %104 = load i64, i64* %RAX
  %105 = load i64, i64* %PC
  %106 = add i64 %105, 2
  store i64 %106, i64* %PC
  %107 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3JMPI2RnImEEEP6MemoryS4_R5StateT_(%struct.Memory* %103, %struct.State* %0, i64 %104)
  %108 = load i64, i64* %PC
  switch i64 %108, label %131 [
    i64 1506, label %block_5e2
    i64 1495, label %block_5d7
  ]

block_5e2:                                        ; preds = %block_5d4
  %109 = load i64, i64* %RAX
  %110 = load i32, i32* %EAX
  %111 = zext i32 %110 to i64
  %112 = load i64, i64* %PC
  %113 = add i64 %112, 4
  store i64 %113, i64* %PC
  %114 = call %struct.Memory* @_ZN12_GLOBAL__N_1L8NOP_IMPLIJ2MnIjE2RnIjEEEEP6MemoryS6_R5StateDpT_(%struct.Memory* %107, %struct.State* %0, i64 %109, i64 %111)
  %115 = load i64, i64* %RAX
  %116 = load i64, i64* %RAX
  %117 = add i64 %116, %115
  %118 = load i16, i16* %AX
  %119 = zext i16 %118 to i64
  %120 = load i64, i64* %PC
  %121 = add i64 %120, 10
  store i64 %121, i64* %PC
  %122 = call %struct.Memory* @_ZN12_GLOBAL__N_1L8NOP_IMPLIJ2MnItE2RnItEEEEP6MemoryS6_R5StateDpT_(%struct.Memory* %114, %struct.State* %0, i64 %117, i64 %119)
  %123 = load i64, i64* %PC
  %124 = tail call %struct.Memory* @sub_5f0___do_global_dtors_aux(%struct.State* %0, i64 %123, %struct.Memory* %122)
  ret %struct.Memory* %124

block_5e0:                                        ; preds = %block_5c8, %block_5d7, %block_5a0
  %MEMORY.0 = phi %struct.Memory* [ %73, %block_5a0 ], [ %98, %block_5c8 ], [ %83, %block_5d7 ]
  %125 = load i64, i64* %PC
  %126 = add i64 %125, 1
  store i64 %126, i64* %PC
  %127 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3POPI3RnWImEEEP6MemoryS4_R5StateT_(%struct.Memory* %MEMORY.0, %struct.State* %0, i64* %RBP)
  %128 = load i64, i64* %PC
  %129 = add i64 %128, 1
  store i64 %129, i64* %PC
  %130 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3RETEP6MemoryR5State(%struct.Memory* %127, %struct.State* %0)
  ret %struct.Memory* %130

; <label>:131:                                    ; preds = %block_5d4
  %132 = load i64, i64* %PC
  %133 = tail call %struct.Memory* @__remill_jump(%struct.State* %0, i64 %132, %struct.Memory* %107)
  ret %struct.Memory* %133
}

; Function Attrs: noinline
define %struct.Memory* @sub_630_frame_dummy(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias)  {
block_630:
  %BRANCH_TAKEN = alloca i8, align 1
  store i8 0, i8* %BRANCH_TAKEN, align 1
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 1
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %RAX = bitcast %union.anon* %8 to i64*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 11
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %RDI = bitcast %union.anon* %11 to i64*
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %13 = getelementptr inbounds %struct.GPR, %struct.GPR* %12, i32 0, i32 13
  %14 = getelementptr inbounds %struct.Reg, %struct.Reg* %13, i32 0, i32 0
  %RSP = bitcast %union.anon* %14 to i64*
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %16 = getelementptr inbounds %struct.GPR, %struct.GPR* %15, i32 0, i32 15
  %17 = getelementptr inbounds %struct.Reg, %struct.Reg* %16, i32 0, i32 0
  %RBP = bitcast %union.anon* %17 to i64*
  %18 = load i64, i64* %PC
  %19 = add i64 %18, 7
  store i64 %19, i64* %PC
  %20 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3LEAI3RnWImE2MnIhEmEEP6MemoryS6_R5StateT_T0_(%struct.Memory* %2, %struct.State* %0, i64* %RDI, i64 ptrtoint (%seg_200df0__jcr_type* @seg_200df0__jcr to i64))
  %21 = load i64, i64* %RDI
  %22 = load i64, i64* %PC
  %23 = add i64 %22, 4
  store i64 %23, i64* %PC
  %24 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3CMPI2MnImE2InImEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* %20, %struct.State* %0, i64 %21, i64 0)
  %25 = load i64, i64* %PC
  %26 = add i64 %25, 13
  %27 = load i64, i64* %PC
  %28 = add i64 %27, 2
  %29 = load i64, i64* %PC
  %30 = add i64 %29, 2
  store i64 %30, i64* %PC
  %31 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3JNZEP6MemoryR5State3RnWIhE2InImES7_(%struct.Memory* %24, %struct.State* %0, i8* %BRANCH_TAKEN, i64 %26, i64 %28)
  %32 = load i8, i8* %BRANCH_TAKEN
  %33 = icmp eq i8 %32, 1
  br i1 %33, label %block_648, label %block_63d

block_63d:                                        ; preds = %block_648, %block_630
  %MEMORY.0 = phi %struct.Memory* [ %77, %block_648 ], [ %31, %block_630 ]
  %34 = load i64, i64* %PC
  %35 = sub i64 %34, 157
  %36 = load i64, i64* %PC
  %37 = add i64 %36, 5
  store i64 %37, i64* %PC
  %38 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3JMPI2InImEEEP6MemoryS4_R5StateT_(%struct.Memory* %MEMORY.0, %struct.State* %0, i64 %35)
  br label %block_5a0

block_654:                                        ; preds = %block_648
  %39 = load i64, i64* %RBP
  %40 = load i64, i64* %PC
  %41 = add i64 %40, 1
  store i64 %41, i64* %PC
  %42 = call %struct.Memory* @_ZN12_GLOBAL__N_1L4PUSHI2InImEEEP6MemoryS4_R5StateT_(%struct.Memory* %77, %struct.State* %0, i64 %39)
  %43 = load i64, i64* %RSP
  %44 = load i64, i64* %PC
  %45 = add i64 %44, 3
  store i64 %45, i64* %PC
  %46 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3MOVI3RnWImE2RnImEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* %42, %struct.State* %0, i64* %RBP, i64 %43)
  %47 = load i64, i64* %RAX
  %48 = load i64, i64* %PC
  %49 = add i64 %48, 2
  %50 = load i64, i64* %PC
  %51 = add i64 %50, 2
  store i64 %51, i64* %PC
  %52 = call %struct.Memory* @_ZN12_GLOBAL__N_1L4CALLI2RnImEEEP6MemoryS4_R5StateT_2InImE(%struct.Memory* %46, %struct.State* %0, i64 %47, i64 %49)
  %53 = load i64, i64* %PC
  %54 = call %struct.Memory* @__remill_function_call(%struct.State* %0, i64 %53, %struct.Memory* %52)
  %55 = load i64, i64* %PC
  %56 = add i64 %55, 1
  store i64 %56, i64* %PC
  %57 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3POPI3RnWImEEEP6MemoryS4_R5StateT_(%struct.Memory* %54, %struct.State* %0, i64* %RBP)
  %58 = load i64, i64* %PC
  %59 = sub i64 %58, 187
  %60 = load i64, i64* %PC
  %61 = add i64 %60, 5
  store i64 %61, i64* %PC
  %62 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3JMPI2InImEEEP6MemoryS4_R5StateT_(%struct.Memory* %57, %struct.State* %0, i64 %59)
  br label %block_5a0

block_648:                                        ; preds = %block_630
  %63 = load i64, i64* %PC
  %64 = add i64 %63, 7
  store i64 %64, i64* %PC
  %65 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3MOVI3RnWImE2MnImEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* %31, %struct.State* %0, i64* %RAX, i64 add (i64 ptrtoint (%seg_200fb8__got_type* @seg_200fb8__got to i64), i64 48))
  %66 = load i64, i64* %RAX
  %67 = load i64, i64* %RAX
  %68 = load i64, i64* %PC
  %69 = add i64 %68, 3
  store i64 %69, i64* %PC
  %70 = call %struct.Memory* @_ZN12_GLOBAL__N_1L4TESTI2RnImES2_EEP6MemoryS4_R5StateT_T0_(%struct.Memory* %65, %struct.State* %0, i64 %66, i64 %67)
  %71 = load i64, i64* %PC
  %72 = sub i64 %71, 21
  %73 = load i64, i64* %PC
  %74 = add i64 %73, 2
  %75 = load i64, i64* %PC
  %76 = add i64 %75, 2
  store i64 %76, i64* %PC
  %77 = call %struct.Memory* @_ZN12_GLOBAL__N_1L2JZEP6MemoryR5State3RnWIhE2InImES7_(%struct.Memory* %70, %struct.State* %0, i8* %BRANCH_TAKEN, i64 %72, i64 %74)
  %78 = load i8, i8* %BRANCH_TAKEN
  %79 = icmp eq i8 %78, 1
  br i1 %79, label %block_63d, label %block_654

block_5a0:                                        ; preds = %block_654, %block_63d
  %MEMORY.1 = phi %struct.Memory* [ %38, %block_63d ], [ %62, %block_654 ]
  %80 = load i64, i64* %PC
  %81 = tail call %struct.Memory* @sub_5a0_register_tm_clones(%struct.State* %0, i64 %80, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %81
}

; Function Attrs: noinline
define %struct.Memory* @sub_530__start(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias)  {
block_530:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 15
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %EBP = bitcast %union.anon* %8 to i32*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 1
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %RAX = bitcast %union.anon* %11 to i64*
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %13 = getelementptr inbounds %struct.GPR, %struct.GPR* %12, i32 0, i32 5
  %14 = getelementptr inbounds %struct.Reg, %struct.Reg* %13, i32 0, i32 0
  %RCX = bitcast %union.anon* %14 to i64*
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %16 = getelementptr inbounds %struct.GPR, %struct.GPR* %15, i32 0, i32 7
  %17 = getelementptr inbounds %struct.Reg, %struct.Reg* %16, i32 0, i32 0
  %RDX = bitcast %union.anon* %17 to i64*
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %19 = getelementptr inbounds %struct.GPR, %struct.GPR* %18, i32 0, i32 9
  %20 = getelementptr inbounds %struct.Reg, %struct.Reg* %19, i32 0, i32 0
  %RSI = bitcast %union.anon* %20 to i64*
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %22 = getelementptr inbounds %struct.GPR, %struct.GPR* %21, i32 0, i32 11
  %23 = getelementptr inbounds %struct.Reg, %struct.Reg* %22, i32 0, i32 0
  %RDI = bitcast %union.anon* %23 to i64*
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %25 = getelementptr inbounds %struct.GPR, %struct.GPR* %24, i32 0, i32 13
  %26 = getelementptr inbounds %struct.Reg, %struct.Reg* %25, i32 0, i32 0
  %RSP = bitcast %union.anon* %26 to i64*
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %28 = getelementptr inbounds %struct.GPR, %struct.GPR* %27, i32 0, i32 15
  %29 = getelementptr inbounds %struct.Reg, %struct.Reg* %28, i32 0, i32 0
  %RBP = bitcast %union.anon* %29 to i64*
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %31 = getelementptr inbounds %struct.GPR, %struct.GPR* %30, i32 0, i32 17
  %32 = getelementptr inbounds %struct.Reg, %struct.Reg* %31, i32 0, i32 0
  %R8 = bitcast %union.anon* %32 to i64*
  %33 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %34 = getelementptr inbounds %struct.GPR, %struct.GPR* %33, i32 0, i32 19
  %35 = getelementptr inbounds %struct.Reg, %struct.Reg* %34, i32 0, i32 0
  %R9 = bitcast %union.anon* %35 to i64*
  %36 = load i64, i64* %RBP
  %37 = load i32, i32* %EBP
  %38 = zext i32 %37 to i64
  %39 = load i64, i64* %PC
  %40 = add i64 %39, 2
  store i64 %40, i64* %PC
  %41 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3XORI3RnWImE2RnIjES4_EEP6MemoryS6_R5StateT_T0_T1_(%struct.Memory* %2, %struct.State* %0, i64* %RBP, i64 %36, i64 %38)
  %42 = load i64, i64* %RDX
  %43 = load i64, i64* %PC
  %44 = add i64 %43, 3
  store i64 %44, i64* %PC
  %45 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3MOVI3RnWImE2RnImEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* %41, %struct.State* %0, i64* %R9, i64 %42)
  %46 = load i64, i64* %PC
  %47 = add i64 %46, 1
  store i64 %47, i64* %PC
  %48 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3POPI3RnWImEEEP6MemoryS4_R5StateT_(%struct.Memory* %45, %struct.State* %0, i64* %RSI)
  %49 = load i64, i64* %RSP
  %50 = load i64, i64* %PC
  %51 = add i64 %50, 3
  store i64 %51, i64* %PC
  %52 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3MOVI3RnWImE2RnImEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* %48, %struct.State* %0, i64* %RDX, i64 %49)
  %53 = load i64, i64* %RSP
  %54 = load i64, i64* %PC
  %55 = add i64 %54, 4
  store i64 %55, i64* %PC
  %56 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3ANDI3RnWImE2RnImE2InImEEEP6MemoryS8_R5StateT_T0_T1_(%struct.Memory* %52, %struct.State* %0, i64* %RSP, i64 %53, i64 -16)
  %57 = load i64, i64* %RAX
  %58 = load i64, i64* %PC
  %59 = add i64 %58, 1
  store i64 %59, i64* %PC
  %60 = call %struct.Memory* @_ZN12_GLOBAL__N_1L4PUSHI2InImEEEP6MemoryS4_R5StateT_(%struct.Memory* %56, %struct.State* %0, i64 %57)
  %61 = load i64, i64* %RSP
  %62 = load i64, i64* %PC
  %63 = add i64 %62, 1
  store i64 %63, i64* %PC
  %64 = call %struct.Memory* @_ZN12_GLOBAL__N_1L4PUSHI2InImEEEP6MemoryS4_R5StateT_(%struct.Memory* %60, %struct.State* %0, i64 %61)
  %65 = load i64, i64* %PC
  %66 = add i64 %65, 7
  store i64 %66, i64* %PC
  %67 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3LEAI3RnWImE2MnIhEmEEP6MemoryS6_R5StateT_T0_(%struct.Memory* %64, %struct.State* %0, i64* %R8, i64 ptrtoint (void ()* @callback_sub_750___libc_csu_fini to i64))
  %68 = load i64, i64* %PC
  %69 = add i64 %68, 7
  store i64 %69, i64* %PC
  %70 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3LEAI3RnWImE2MnIhEmEEP6MemoryS6_R5StateT_T0_(%struct.Memory* %67, %struct.State* %0, i64* %RCX, i64 ptrtoint (void ()* @callback_sub_6e0___libc_csu_init to i64))
  %71 = load i64, i64* %PC
  %72 = add i64 %71, 7
  store i64 %72, i64* %PC
  %73 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3LEAI3RnWImE2MnIhEmEEP6MemoryS6_R5StateT_T0_(%struct.Memory* %70, %struct.State* %0, i64* %RDI, i64 ptrtoint (void ()* @main to i64))
  %74 = load i64, i64* %PC
  %75 = add i64 %74, 6
  %76 = load i64, i64* %PC
  %77 = add i64 %76, 6
  store i64 %77, i64* %PC
  %78 = call %struct.Memory* @_ZN12_GLOBAL__N_1L4CALLI2MnImEEEP6MemoryS4_R5StateT_2InImE(%struct.Memory* %73, %struct.State* %0, i64 add (i64 ptrtoint (%seg_200fb8__got_type* @seg_200fb8__got to i64), i64 32), i64 %75)
  %79 = load i64, i64* %PC
  %80 = call %struct.Memory* @ext_201018___libc_start_main(%struct.State* %0, i64 %79, %struct.Memory* %78)
  %81 = load i64, i64* %PC
  %82 = add i64 %81, 1
  store i64 %82, i64* %PC
  %83 = call %struct.Memory* @_ZN12_GLOBAL__N_1L9DoNothingEP6MemoryR5State(%struct.Memory* %80, %struct.State* %0)
  %84 = load i64, i64* %PC
  %85 = tail call %struct.Memory* @__remill_error(%struct.State* %0, i64 %84, %struct.Memory* %83)
  ret %struct.Memory* %85
}

; Function Attrs: noinline
define %struct.Memory* @sub_520___cxa_finalize(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias)  {
block_520:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = load i64, i64* %PC
  %7 = add i64 %6, 6
  store i64 %7, i64* %PC
  %8 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3JMPI2MnImEEEP6MemoryS4_R5StateT_(%struct.Memory* %2, %struct.State* %0, i64 add (i64 ptrtoint (%seg_200fb8__got_type* @seg_200fb8__got to i64), i64 64))
  %9 = load i64, i64* %PC
  %10 = tail call %struct.Memory* @ext_201030___cxa_finalize(%struct.State* %0, i64 %9, %struct.Memory* %8)
  ret %struct.Memory* %10
}

; Function Attrs: noinline
declare void @__mcsema_attach_call() 

; Function Attrs: naked nobuiltin noinline
define internal void @callback_sub_630_frame_dummy()  {
  call void asm sideeffect "pushq $0;pushq $$0x630;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** @1, void ()** @2)
  ret void
}

define internal %struct.Memory* @callback_sub_630_frame_dummy_wrapper(%struct.State*, i64, %struct.Memory*) {
  call void @__mcsema_early_init()
  %4 = tail call %struct.Memory* @sub_630_frame_dummy(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %4
}

define internal void @__mcsema_early_init() {
  %1 = load volatile i1, i1* @0
  br i1 %1, label %2, label %3

; <label>:2:                                      ; preds = %0
  ret void

; <label>:3:                                      ; preds = %0
  store volatile i1 true, i1* @0
  ret void
}

; Function Attrs: naked nobuiltin noinline
define internal void @callback_sub_5f0___do_global_dtors_aux()  {
  call void asm sideeffect "pushq $0;pushq $$0x5f0;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** @3, void ()** @2)
  ret void
}

define internal %struct.Memory* @callback_sub_5f0___do_global_dtors_aux_wrapper(%struct.State*, i64, %struct.Memory*) {
  call void @__mcsema_early_init()
  %4 = tail call %struct.Memory* @sub_5f0___do_global_dtors_aux(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %4
}

; Function Attrs: naked nobuiltin noinline
define internal void @callback_sub_750___libc_csu_fini()  {
  call void asm sideeffect "pushq $0;pushq $$0x750;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** @4, void ()** @2)
  ret void
}

define internal %struct.Memory* @callback_sub_750___libc_csu_fini_wrapper(%struct.State*, i64, %struct.Memory*) {
  call void @__mcsema_early_init()
  %4 = tail call %struct.Memory* @sub_750___libc_csu_fini(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %4
}

; Function Attrs: naked nobuiltin noinline
define internal void @callback_sub_6e0___libc_csu_init()  {
  call void asm sideeffect "pushq $0;pushq $$0x6e0;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** @5, void ()** @2)
  ret void
}

define internal %struct.Memory* @callback_sub_6e0___libc_csu_init_wrapper(%struct.State*, i64, %struct.Memory*) {
  call void @__mcsema_early_init()
  %4 = tail call %struct.Memory* @sub_6e0___libc_csu_init(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %4
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @main()  {
  call void asm sideeffect "pushq $0;pushq $$0x6b1;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** @6, void ()** @2)
  ret void
}

define internal %struct.Memory* @main_wrapper(%struct.State*, i64, %struct.Memory*) {
  call void @__mcsema_early_init()
  %4 = tail call %struct.Memory* @sub_6b1_main(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %4
}

; Function Attrs: noinline
define internal %struct.Memory* @ext_201018___libc_start_main(%struct.State*, i64, %struct.Memory*)  {
  %4 = call %struct.Memory* @__remill_function_call(%struct.State* %0, i64 ptrtoint (i64 (i64, i64, i64, i64, i64, i64, i64, i64)* @__libc_start_main to i64), %struct.Memory* %2)
  ret %struct.Memory* %4
}

; Function Attrs: noinline
define internal %struct.Memory* @ext_201030___cxa_finalize(%struct.State*, i64, %struct.Memory*)  {
  %4 = call %struct.Memory* @__remill_function_call(%struct.State* %0, i64 ptrtoint (i64 (i64)* @__cxa_finalize to i64), %struct.Memory* %2)
  ret %struct.Memory* %4
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @get_sign()  {
  call void asm sideeffect "pushq $0;pushq $$0x660;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** @7, void ()** @2)
  ret void
}

define internal %struct.Memory* @get_sign_wrapper(%struct.State*, i64, %struct.Memory*) {
  call void @__mcsema_early_init()
  %4 = tail call %struct.Memory* @sub_660_get_sign(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %4
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @.init_proc()  {
  call void asm sideeffect "pushq $0;pushq $$0x4f8;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** @8, void ()** @2)
  ret void
}

define internal %struct.Memory* @.init_proc_wrapper(%struct.State*, i64, %struct.Memory*) {
  call void @__mcsema_early_init()
  %4 = tail call %struct.Memory* @sub_4f8__init_proc(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %4
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @init_var_correspondence()  {
  call void asm sideeffect "pushq $0;pushq $$0x67b;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** @9, void ()** @2)
  ret void
}

define internal %struct.Memory* @init_var_correspondence_wrapper(%struct.State*, i64, %struct.Memory*) {
  call void @__mcsema_early_init()
  %4 = tail call %struct.Memory* @sub_67b_init_var_correspondence(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %4
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @.term_proc()  {
  call void asm sideeffect "pushq $0;pushq $$0x754;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** @10, void ()** @2)
  ret void
}

define internal %struct.Memory* @.term_proc_wrapper(%struct.State*, i64, %struct.Memory*) {
  call void @__mcsema_early_init()
  %4 = tail call %struct.Memory* @sub_754__term_proc(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %4
}

define internal void @__mcsema_constructor() {
  call void @__mcsema_early_init()
  call void @callback_sub_6e0___libc_csu_init()
  ret void
}

define internal void @__mcsema_destructor() {
  call void @callback_sub_750___libc_csu_fini()
  ret void
}

